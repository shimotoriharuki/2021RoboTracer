
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bdc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019da0  08019da0  00029da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7ac  0801a7ac  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7ac  0801a7ac  0002a7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a7b4  0801a7b4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a7b4  0801a7b4  0002a7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a7bc  0801a7bc  0002a7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a7c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004ca00  200001e0  0801a99c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004cbe0  0801a99c  0003cbe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1d3  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b3df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00073010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000773c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026606  00000000  00000000  000ac874  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110dc  00000000  00000000  000d2e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3f56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a764  00000000  00000000  001e3fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019d84 	.word	0x08019d84

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019d84 	.word	0x08019d84

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb7a 	bl	800b6d0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004a6d8 	.word	0x2004a6d8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fb62 	bl	800b6d0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004a6d8 	.word	0x2004a6d8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a fa03 	bl	800b42c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff6a 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff64 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ff5e 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ff58 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ff52 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ff4c 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff46 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff40 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff3a 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff34 	bl	8009f00 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff28 	bl	8009f00 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff22 	bl	8009f00 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f9f5 	bl	8017518 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f832 	bl	800f260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f82e 	bl	800f260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f82a 	bl	800f260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f826 	bl	800f260 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004a7c4 	.word	0x2004a7c4
 8001248:	2004a72c 	.word	0x2004a72c
 800124c:	2004a84c 	.word	0x2004a84c

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004a7c4 	.word	0x2004a7c4
 800137c:	2004a84c 	.word	0x2004a84c
 8001380:	2004a72c 	.word	0x2004a72c

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004a7c4 	.word	0x2004a7c4
 80013c4:	2004a72c 	.word	0x2004a72c
 80013c8:	2004a84c 	.word	0x2004a84c

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ffe6 	bl	800f400 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ffe2 	bl	800f400 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2004a92c 	.word	0x2004a92c
 8001458:	2004a610 	.word	0x2004a610
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f978 	bl	8001a98 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f98c 	bl	8001ac4 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fb76 	bl	8013eb4 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2004951c 	.word	0x2004951c

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 ff35 	bl	8016680 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fbba 	bl	8013f9c <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fbb5 	bl	8013f9c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f923 	bl	8013a8a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f958 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019da0 	.word	0x08019da0
 8001870:	2004948c 	.word	0x2004948c
 8001874:	2004951c 	.word	0x2004951c
 8001878:	2004950c 	.word	0x2004950c

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f900 	bl	8001a98 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fb31 	bl	8013f08 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fd9c 	bl	80143e4 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fb2b 	bl	8013f08 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f907 	bl	8001ac4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fed0 	bl	8016680 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fb58 	bl	8013f9c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f8c6 	bl	8013a8a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f8fb 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 faca 	bl	8013eb4 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	2004938c 	.word	0x2004938c
 8001930:	2004824c 	.word	0x2004824c
 8001934:	08019dbc 	.word	0x08019dbc
 8001938:	08019da0 	.word	0x08019da0
 800193c:	2004948c 	.word	0x2004948c
 8001940:	2004951c 	.word	0x2004951c
 8001944:	2004950c 	.word	0x2004950c

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f898 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f8ac 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fed3 	bl	8016728 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fefa 	bl	80147a0 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f8a1 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fa7c 	bl	8013eb4 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019dac 	.word	0x08019dac
 80019cc:	2004948c 	.word	0x2004948c
 80019d0:	2004951c 	.word	0x2004951c

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f852 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f866 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fe8d 	bl	8016728 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 feb4 	bl	80147a0 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f85b 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 fa36 	bl	8013eb4 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019db8 	.word	0x08019db8
 8001a58:	2004948c 	.word	0x2004948c
 8001a5c:	2004951c 	.word	0x2004951c

08001a60 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <sd_mount+0x30>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <sd_mount+0x34>)
 8001a70:	f011 fc98 	bl	80133a4 <f_mount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <sd_mount+0x20>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <sd_mount+0x24>
	else ret = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08019dc8 	.word	0x08019dc8
 8001a94:	2004834c 	.word	0x2004834c

08001a98 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <create_path+0x24>)
 8001aa6:	f014 fe6b 	bl	8016780 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <create_path+0x28>)
 8001aae:	f014 fe67 	bl	8016780 <strcpy>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2004938c 	.word	0x2004938c
 8001ac0:	2004824c 	.word	0x2004824c

08001ac4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001aca:	f012 fd4d 	bl	8014568 <f_mkdir>

	f_chdir(dirpath);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001ad0:	f012 fa1a 	bl	8013f08 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	4905      	ldr	r1, [pc, #20]	; (8001aec <fopen_folder_and_file+0x28>)
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fopen_folder_and_file+0x2c>)
 8001ada:	f011 fca9 	bl	8013430 <f_open>

	f_chdir("..");
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <fopen_folder_and_file+0x30>)
 8001ae0:	f012 fa12 	bl	8013f08 <f_chdir>


}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2004938c 	.word	0x2004938c
 8001aec:	2004824c 	.word	0x2004824c
 8001af0:	2004951c 	.word	0x2004951c
 8001af4:	08019dbc 	.word	0x08019dbc

08001af8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <bufclear+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	ddf4      	ble.n	8001b04 <bufclear+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2004948c 	.word	0x2004948c

08001b2c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <read_byte+0x54>)
 8001b48:	f009 fc70 	bl	800b42c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b4c:	f107 010f 	add.w	r1, r7, #15
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <read_byte+0x58>)
 8001b56:	f00c fe19 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b5a:	f107 010e 	add.w	r1, r7, #14
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <read_byte+0x58>)
 8001b64:	f00c ff46 	bl	800e9f4 <HAL_SPI_Receive>
	CS_SET;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <read_byte+0x54>)
 8001b70:	f009 fc5c 	bl	800b42c <HAL_GPIO_WritePin>

	return val;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400
 8001b84:	2004a5b8 	.word	0x2004a5b8

08001b88 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <write_byte+0x54>)
 8001baa:	f009 fc3f 	bl	800b42c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bae:	f107 010f 	add.w	r1, r7, #15
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <write_byte+0x58>)
 8001bb8:	f00c fde8 	bl	800e78c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <write_byte+0x58>)
 8001bc4:	f00c fde2 	bl	800e78c <HAL_SPI_Transmit>
	CS_SET;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <write_byte+0x54>)
 8001bd0:	f009 fc2c 	bl	800b42c <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	2004a5b8 	.word	0x2004a5b8

08001be4 <IMU_init>:

uint16_t IMU_init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9c 	bl	8001b2c <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	2be0      	cmp	r3, #224	; 0xe0
 8001bfc:	d119      	bne.n	8001c32 <IMU_init+0x4e>
		ret = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c02:	2101      	movs	r1, #1
 8001c04:	2006      	movs	r0, #6
 8001c06:	f7ff ffbf 	bl	8001b88 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff ffbb 	bl	8001b88 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c12:	2120      	movs	r1, #32
 8001c14:	207f      	movs	r0, #127	; 0x7f
 8001c16:	f7ff ffb7 	bl	8001b88 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffb3 	bl	8001b88 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c22:	2106      	movs	r1, #6
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffaf 	bl	8001b88 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f7ff ffab 	bl	8001b88 <write_byte>
	}
	return ret;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <read_gyro_data>:

void read_gyro_data() {
 8001c3c:	b598      	push	{r3, r4, r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c40:	2033      	movs	r0, #51	; 0x33
 8001c42:	f7ff ff73 	bl	8001b2c <read_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21c      	sxth	r4, r3
 8001c4c:	2034      	movs	r0, #52	; 0x34
 8001c4e:	f7ff ff6d 	bl	8001b2c <read_byte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4323      	orrs	r3, r4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <read_gyro_data+0x64>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c5e:	2035      	movs	r0, #53	; 0x35
 8001c60:	f7ff ff64 	bl	8001b2c <read_byte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f7ff ff5e 	bl	8001b2c <read_byte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4323      	orrs	r3, r4
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <read_gyro_data+0x68>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c7c:	2037      	movs	r0, #55	; 0x37
 8001c7e:	f7ff ff55 	bl	8001b2c <read_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21c      	sxth	r4, r3
 8001c88:	2038      	movs	r0, #56	; 0x38
 8001c8a:	f7ff ff4f 	bl	8001b2c <read_byte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4323      	orrs	r3, r4
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <read_gyro_data+0x6c>)
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd98      	pop	{r3, r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2004a554 	.word	0x2004a554
 8001ca4:	2004a552 	.word	0x2004a552
 8001ca8:	2004a54c 	.word	0x2004a54c

08001cac <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	80da      	strh	r2, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	811a      	strh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	815a      	strh	r2, [r3, #10]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
{

}
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cf8:	f7ff ff74 	bl	8001be4 <IMU_init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d00:	f7ff f9ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f9da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <_ZN3IMU4initEv+0x44>)
 8001d0e:	f7ff fa01 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f9d3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <_ZN3IMU4initEv+0x48>)
 8001d20:	f7ff f9f8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f008 f8ea 	bl	8009f00 <HAL_Delay>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08019dcc 	.word	0x08019dcc
 8001d38:	08019dd8 	.word	0x08019dd8
 8001d3c:	00000000 	.word	0x00000000

08001d40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d48:	f7ff ff78 	bl	8001c3c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <_ZN3IMU12updateValuesEv+0xbc>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <_ZN3IMU12updateValuesEv+0xc0>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	a31c      	add	r3, pc, #112	; (adr r3, 8001de8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <_ZN3IMU12updateValuesEv+0xc4>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe0 	bl	8000554 <__aeabi_i2d>
 8001d94:	a316      	add	r3, pc, #88	; (adr r3, 8001df0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc45 	bl	8000628 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa89 	bl	80002bc <__adddf3>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fee9 	bl	8000b88 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <_ZN3IMU12updateValuesEv+0xc4>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <_ZN3IMU12updateValuesEv+0xc8>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	f3af 8000 	nop.w
 8001de8:	47ae147b 	.word	0x47ae147b
 8001dec:	3f847ae1 	.word	0x3f847ae1
 8001df0:	7ae147ae 	.word	0x7ae147ae
 8001df4:	3fefae14 	.word	0x3fefae14
 8001df8:	2004a554 	.word	0x2004a554
 8001dfc:	2004a552 	.word	0x2004a552
 8001e00:	2004a54c 	.word	0x2004a54c
 8001e04:	20000214 	.word	0x20000214
 8001e08:	20000210 	.word	0x20000210
 8001e0c:	00000000 	.word	0x00000000

08001e10 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e30:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7fe fb9f 	bl	8000578 <__aeabi_f2d>
 8001e3a:	a316      	add	r3, pc, #88	; (adr r3, 8001e94 <_ZN3IMU8getOmegaEv+0x84>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fd1c 	bl	800087c <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4614      	mov	r4, r2
 8001e4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e4e:	a313      	add	r3, pc, #76	; (adr r3, 8001e9c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fbe6 	bl	8000628 <__aeabi_dmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <_ZN3IMU8getOmegaEv+0x80>)
 8001e6a:	f7fe fd07 	bl	800087c <__aeabi_ddiv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460c      	mov	r4, r1
 8001e72:	4618      	mov	r0, r3
 8001e74:	4621      	mov	r1, r4
 8001e76:	f7fe fecf 	bl	8000c18 <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	ee07 3a90 	vmov	s15, r3
}
 8001e84:	eeb0 0a67 	vmov.f32	s0, s15
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40668000 	.word	0x40668000
 8001e94:	66666666 	.word	0x66666666
 8001e98:	40306666 	.word	0x40306666
 8001e9c:	54411744 	.word	0x54411744
 8001ea0:	400921fb 	.word	0x400921fb

08001ea4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001eac:	466b      	mov	r3, sp
 8001eae:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb4:	f008 f824 	bl	8009f00 <HAL_Delay>
	lcd_clear();
 8001eb8:	f7ff f8f2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f8fe 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ec4:	4840      	ldr	r0, [pc, #256]	; (8001fc8 <_ZN3IMU11calibrationEv+0x124>)
 8001ec6:	f7ff f925 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff f8f7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001ed2:	483e      	ldr	r0, [pc, #248]	; (8001fcc <_ZN3IMU11calibrationEv+0x128>)
 8001ed4:	f7ff f91e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001ed8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001edc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001ede:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ee2:	1e5d      	subs	r5, r3, #1
 8001ee4:	61bd      	str	r5, [r7, #24]
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f04f 0400 	mov.w	r4, #0
 8001ef8:	0154      	lsls	r4, r2, #5
 8001efa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001efe:	014b      	lsls	r3, r1, #5
 8001f00:	462b      	mov	r3, r5
 8001f02:	3301      	adds	r3, #1
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f04f 0400 	mov.w	r4, #0
 8001f12:	0154      	lsls	r4, r2, #5
 8001f14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f18:	014b      	lsls	r3, r1, #5
 8001f1a:	462b      	mov	r3, r5
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3303      	adds	r3, #3
 8001f22:	3307      	adds	r3, #7
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	ebad 0d03 	sub.w	sp, sp, r3
 8001f2c:	466b      	mov	r3, sp
 8001f2e:	3303      	adds	r3, #3
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	83fb      	strh	r3, [r7, #30]
 8001f3a:	8bfa      	ldrh	r2, [r7, #30]
 8001f3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	da13      	bge.n	8001f6c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f4a:	8bfb      	ldrh	r3, [r7, #30]
 8001f4c:	ee07 2a90 	vmov	s15, r2
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f007 ffce 	bl	8009f00 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f64:	8bfb      	ldrh	r3, [r7, #30]
 8001f66:	3301      	adds	r3, #1
 8001f68:	83fb      	strh	r3, [r7, #30]
 8001f6a:	e7e6      	b.n	8001f3a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	462b      	mov	r3, r5
 8001f74:	3301      	adds	r3, #1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d00e      	beq.n	8001fa2 <_ZN3IMU11calibrationEv+0xfe>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	e7ec      	b.n	8001f7c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001fa2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fae:	edd7 6a08 	vldr	s13, [r7, #32]
 8001fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fbc:	46b5      	mov	sp, r6
}
 8001fbe:	bf00      	nop
 8001fc0:	372c      	adds	r7, #44	; 0x2c
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08019ddc 	.word	0x08019ddc
 8001fcc:	08019de8 	.word	0x08019de8

08001fd0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	1dfa      	adds	r2, r7, #7
 8001fe6:	2364      	movs	r3, #100	; 0x64
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <INA260_read+0x50>)
 8001fee:	f009 fb6f 	bl	800b6d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	2364      	movs	r3, #100	; 0x64
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <INA260_read+0x50>)
 8002002:	f009 fc63 	bl	800b8cc <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	7b7b      	ldrb	r3, [r7, #13]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	81fb      	strh	r3, [r7, #14]
	return val;
 8002016:	89fb      	ldrh	r3, [r7, #14]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2004a76c 	.word	0x2004a76c

08002024 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b087      	sub	sp, #28
 8002028:	af02      	add	r7, sp, #8
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	4603      	mov	r3, r0
 8002038:	71bb      	strb	r3, [r7, #6]
 800203a:	460b      	mov	r3, r1
 800203c:	717b      	strb	r3, [r7, #5]
 800203e:	4613      	mov	r3, r2
 8002040:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	733b      	strb	r3, [r7, #12]
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	737b      	strb	r3, [r7, #13]
 800204a:	797b      	ldrb	r3, [r7, #5]
 800204c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800204e:	793b      	ldrb	r3, [r7, #4]
 8002050:	b299      	uxth	r1, r3
 8002052:	f107 020c 	add.w	r2, r7, #12
 8002056:	2364      	movs	r3, #100	; 0x64
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2303      	movs	r3, #3
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <INA260_write+0x48>)
 800205e:	f009 fb37 	bl	800b6d0 <HAL_I2C_Master_Transmit>
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	2004a76c 	.word	0x2004a76c

08002070 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	460b      	mov	r3, r1
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	4613      	mov	r3, r2
 8002080:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002082:	797b      	ldrb	r3, [r7, #5]
 8002084:	79ba      	ldrb	r2, [r7, #6]
 8002086:	79f9      	ldrb	r1, [r7, #7]
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ffcb 	bl	8002024 <INA260_write>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	461a      	mov	r2, r3
 80020a4:	21df      	movs	r1, #223	; 0xdf
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ffe2 	bl	8002070 <setConfig>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
{

}
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80020d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020dc:	482a      	ldr	r0, [pc, #168]	; (8002188 <_ZN8JoyStick8getValueEv+0xbc>)
 80020de:	f009 f98d 	bl	800b3fc <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ZN8JoyStick8getValueEv+0x2e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020fa:	2101      	movs	r1, #1
 80020fc:	4823      	ldr	r0, [pc, #140]	; (800218c <_ZN8JoyStick8getValueEv+0xc0>)
 80020fe:	f009 f97d 	bl	800b3fc <HAL_GPIO_ReadPin>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <_ZN8JoyStick8getValueEv+0x4e>
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800211a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f009 f96c 	bl	800b3fc <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0x70>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800213c:	2104      	movs	r1, #4
 800213e:	4814      	ldr	r0, [pc, #80]	; (8002190 <_ZN8JoyStick8getValueEv+0xc4>)
 8002140:	f009 f95c 	bl	800b3fc <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN8JoyStick8getValueEv+0x90>
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <_ZN8JoyStick8getValueEv+0xbc>)
 8002160:	f009 f94c 	bl	800b3fc <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <_ZN8JoyStick8getValueEv+0xb0>
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800217c:	89fb      	ldrh	r3, [r7, #14]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40020400 	.word	0x40020400

08002194 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b52      	cmp	r3, #82	; 0x52
 80021a4:	d112      	bne.n	80021cc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ac:	4856      	ldr	r0, [pc, #344]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021ae:	f009 f93d 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b8:	4853      	ldr	r0, [pc, #332]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f009 f937 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c4:	4850      	ldr	r0, [pc, #320]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f009 f931 	bl	800b42c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021ca:	e098      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b47      	cmp	r3, #71	; 0x47
 80021d0:	d112      	bne.n	80021f8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d8:	484b      	ldr	r0, [pc, #300]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021da:	f009 f927 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4848      	ldr	r0, [pc, #288]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f009 f921 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f0:	4845      	ldr	r0, [pc, #276]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f009 f91b 	bl	800b42c <HAL_GPIO_WritePin>
}
 80021f6:	e082      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b42      	cmp	r3, #66	; 0x42
 80021fc:	d112      	bne.n	8002224 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002204:	4840      	ldr	r0, [pc, #256]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002206:	f009 f911 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002210:	483d      	ldr	r0, [pc, #244]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002212:	f009 f90b 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221c:	483a      	ldr	r0, [pc, #232]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f009 f905 	bl	800b42c <HAL_GPIO_WritePin>
}
 8002222:	e06c      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b43      	cmp	r3, #67	; 0x43
 8002228:	d112      	bne.n	8002250 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002230:	4835      	ldr	r0, [pc, #212]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002232:	f009 f8fb 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223c:	4832      	ldr	r0, [pc, #200]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800223e:	f009 f8f5 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002248:	482f      	ldr	r0, [pc, #188]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f009 f8ef 	bl	800b42c <HAL_GPIO_WritePin>
}
 800224e:	e056      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b4d      	cmp	r3, #77	; 0x4d
 8002254:	d112      	bne.n	800227c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	482a      	ldr	r0, [pc, #168]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800225e:	f009 f8e5 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002268:	4827      	ldr	r0, [pc, #156]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800226a:	f009 f8df 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002274:	4824      	ldr	r0, [pc, #144]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f009 f8d9 	bl	800b42c <HAL_GPIO_WritePin>
}
 800227a:	e040      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b59      	cmp	r3, #89	; 0x59
 8002280:	d112      	bne.n	80022a8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002288:	481f      	ldr	r0, [pc, #124]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800228a:	f009 f8cf 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002294:	481c      	ldr	r0, [pc, #112]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002296:	f009 f8c9 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a0:	4819      	ldr	r0, [pc, #100]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f009 f8c3 	bl	800b42c <HAL_GPIO_WritePin>
}
 80022a6:	e02a      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b57      	cmp	r3, #87	; 0x57
 80022ac:	d112      	bne.n	80022d4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022b6:	f009 f8b9 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c0:	4811      	ldr	r0, [pc, #68]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022c2:	f009 f8b3 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022cc:	480e      	ldr	r0, [pc, #56]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022ce:	f009 f8ad 	bl	800b42c <HAL_GPIO_WritePin>
}
 80022d2:	e014      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b7e      	cmp	r3, #126	; 0x7e
 80022d8:	d111      	bne.n	80022fe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e0:	4809      	ldr	r0, [pc, #36]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022e2:	f009 f8a3 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022e6:	2201      	movs	r2, #1
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022ee:	f009 f89d 	bl	800b42c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022fa:	f009 f897 	bl	800b42c <HAL_GPIO_WritePin>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40020000 	.word	0x40020000

0800230c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
 8002318:	4613      	mov	r3, r2
 800231a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800231c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232a:	4813      	ldr	r0, [pc, #76]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 800232c:	f009 f87e 	bl	800b42c <HAL_GPIO_WritePin>
 8002330:	e009      	b.n	8002346 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 8002342:	f009 f873 	bl	800b42c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002346:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d106      	bne.n	800235c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 8002356:	f009 f869 	bl	800b42c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800235a:	e009      	b.n	8002370 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800235c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 800236c:	f009 f85e 	bl	800b42c <HAL_GPIO_WritePin>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000

0800237c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800237c:	b580      	push	{r7, lr}
 800237e:	b092      	sub	sp, #72	; 0x48
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe92 	bl	80020b4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	331c      	adds	r3, #28
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d008      	beq.n	80023b8 <_ZN10LineSensorC1Ev+0x3c>
 80023a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b2:	3302      	adds	r3, #2
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
 80023b6:	e7f2      	b.n	800239e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	3338      	adds	r3, #56	; 0x38
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d009      	beq.n	80023e6 <_ZN10LineSensorC1Ev+0x6a>
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80023de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e0:	3304      	adds	r3, #4
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
 80023e4:	e7f1      	b.n	80023ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3338      	adds	r3, #56	; 0x38
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d009      	beq.n	8002414 <_ZN10LineSensorC1Ev+0x98>
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	617b      	str	r3, [r7, #20]
		m = 0;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240e:	3304      	adds	r3, #4
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002412:	e7f1      	b.n	80023f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	429a      	cmp	r2, r3
 800242c:	d009      	beq.n	8002442 <_ZN10LineSensorC1Ev+0xc6>
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002438:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	3304      	adds	r3, #4
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002440:	e7f1      	b.n	8002426 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	3748      	adds	r7, #72	; 0x48
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	220e      	movs	r2, #14
 8002458:	4619      	mov	r1, r3
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800245c:	f007 fdb6 	bl	8009fcc <HAL_ADC_Start_DMA>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2004a690 	.word	0x2004a690

0800246c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b0d      	cmp	r3, #13
 800247c:	dc2f      	bgt.n	80024de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3392      	adds	r3, #146	; 0x92
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	ed93 7a00 	vldr	s14, [r3]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	33a0      	adds	r3, #160	; 0xa0
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a5b      	subs	r3, r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	440b      	add	r3, r1
 80024ca:	3306      	adds	r3, #6
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e7cc      	b.n	8002478 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d902      	bls.n	80024f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]


}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000254 	.word	0x20000254

08002508 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002508:	b490      	push	{r4, r7}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002516:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800251a:	2b0d      	cmp	r3, #13
 800251c:	f200 8087 	bhi.w	800262e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800252a:	2b09      	cmp	r3, #9
 800252c:	d81c      	bhi.n	8002568 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800252e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002532:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002536:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4423      	add	r3, r4
 8002546:	3306      	adds	r3, #6
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4403      	add	r3, r0
 800254c:	3304      	adds	r3, #4
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	008b      	lsls	r3, r1, #2
 8002552:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002556:	440b      	add	r3, r1
 8002558:	3b30      	subs	r3, #48	; 0x30
 800255a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800255c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002560:	3301      	adds	r3, #1
 8002562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002566:	e7de      	b.n	8002526 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800256e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002572:	2b09      	cmp	r3, #9
 8002574:	d84d      	bhi.n	8002612 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002576:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800257a:	3301      	adds	r3, #1
 800257c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002580:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002584:	2b09      	cmp	r3, #9
 8002586:	d83e      	bhi.n	8002606 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002588:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002592:	4413      	add	r3, r2
 8002594:	3b30      	subs	r3, #48	; 0x30
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a4:	4413      	add	r3, r2
 80025a6:	3b30      	subs	r3, #48	; 0x30
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d521      	bpl.n	80025fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80025b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025c0:	4413      	add	r3, r2
 80025c2:	3b30      	subs	r3, #48	; 0x30
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025d6:	440a      	add	r2, r1
 80025d8:	3a30      	subs	r2, #48	; 0x30
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025e2:	440b      	add	r3, r1
 80025e4:	3b30      	subs	r3, #48	; 0x30
 80025e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025f2:	4413      	add	r3, r2
 80025f4:	3b30      	subs	r3, #48	; 0x30
 80025f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025fe:	3301      	adds	r3, #1
 8002600:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002604:	e7bc      	b.n	8002580 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002606:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800260a:	3301      	adds	r3, #1
 800260c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002610:	e7ad      	b.n	800256e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 8002612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	33b0      	adds	r3, #176	; 0xb0
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002626:	3301      	adds	r3, #1
 8002628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800262c:	e773      	b.n	8002516 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 8002636:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002640:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002648:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800264a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002654:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800265e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002666:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002668:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002670:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002672:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800267c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002684:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002686:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800268e:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002690:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800269a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 80026a4:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 80026ae:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 80026b8:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3738      	adds	r7, #56	; 0x38
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc90      	pop	{r4, r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000218 	.word	0x20000218
 80026d4:	2000021c 	.word	0x2000021c
 80026d8:	20000220 	.word	0x20000220
 80026dc:	20000224 	.word	0x20000224
 80026e0:	20000228 	.word	0x20000228
 80026e4:	2000022c 	.word	0x2000022c
 80026e8:	20000230 	.word	0x20000230
 80026ec:	20000234 	.word	0x20000234
 80026f0:	20000238 	.word	0x20000238
 80026f4:	2000023c 	.word	0x2000023c
 80026f8:	20000240 	.word	0x20000240
 80026fc:	20000244 	.word	0x20000244
 8002700:	20000248 	.word	0x20000248
 8002704:	2000024c 	.word	0x2000024c
 8002708:	20000250 	.word	0x20000250

0800270c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b0a0      	sub	sp, #128	; 0x80
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	f007 fbf3 	bl	8009f00 <HAL_Delay>

	lcd_clear();
 800271a:	f7fe fcc1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800271e:	2100      	movs	r1, #0
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fccd 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002726:	4886      	ldr	r0, [pc, #536]	; (8002940 <_ZN10LineSensor11calibrationEv+0x234>)
 8002728:	f7fe fcf4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800272c:	2101      	movs	r1, #1
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fcc6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002734:	4883      	ldr	r0, [pc, #524]	; (8002944 <_ZN10LineSensor11calibrationEv+0x238>)
 8002736:	f7fe fced 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273a:	2300      	movs	r3, #0
 800273c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002740:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002744:	2b0d      	cmp	r3, #13
 8002746:	d823      	bhi.n	8002790 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002748:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800274c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	32b0      	adds	r2, #176	; 0xb0
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	440a      	add	r2, r1
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002760:	440b      	add	r3, r1
 8002762:	3b40      	subs	r3, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002766:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800276a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	32b0      	adds	r2, #176	; 0xb0
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	440a      	add	r2, r1
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800277e:	440b      	add	r3, r1
 8002780:	3b78      	subs	r3, #120	; 0x78
 8002782:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002784:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002788:	3301      	adds	r3, #1
 800278a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800278e:	e7d7      	b.n	8002740 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fc98 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800279c:	4603      	mov	r3, r0
 800279e:	2b02      	cmp	r3, #2
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d079      	beq.n	80028a0 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027b2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027b6:	2b0d      	cmp	r3, #13
 80027b8:	d850      	bhi.n	800285c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80027ba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027c4:	4413      	add	r3, r2
 80027c6:	3b40      	subs	r3, #64	; 0x40
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	33b0      	adds	r3, #176	; 0xb0
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	d50f      	bpl.n	8002806 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80027e6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80027ea:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	32b0      	adds	r2, #176	; 0xb0
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	440a      	add	r2, r1
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027fe:	440b      	add	r3, r1
 8002800:	3b40      	subs	r3, #64	; 0x40
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e024      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002806:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002810:	4413      	add	r3, r2
 8002812:	3b78      	subs	r3, #120	; 0x78
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	33b0      	adds	r3, #176	; 0xb0
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	dd0e      	ble.n	8002850 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002832:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002836:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	32b0      	adds	r2, #176	; 0xb0
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	440a      	add	r2, r1
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800284a:	440b      	add	r3, r1
 800284c:	3b78      	subs	r3, #120	; 0x78
 800284e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002850:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002854:	3301      	adds	r3, #1
 8002856:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800285a:	e7aa      	b.n	80027b2 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fe76 	bl	8005554 <_ZN12RotarySwitch8getValueEv>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800287e:	2201      	movs	r2, #1
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fd41 	bl	800230c <_ZN3LED2LREaa>
 800288a:	e781      	b.n	8002790 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002892:	2200      	movs	r2, #0
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fd37 	bl	800230c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800289e:	e777      	b.n	8002790 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028aa:	2b0d      	cmp	r3, #13
 80028ac:	d826      	bhi.n	80028fc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80028ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028b8:	4413      	add	r3, r2
 80028ba:	3b40      	subs	r3, #64	; 0x40
 80028bc:	ed93 7a00 	vldr	s14, [r3]
 80028c0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028ca:	4413      	add	r3, r2
 80028cc:	3b78      	subs	r3, #120	; 0x78
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028da:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002948 <_ZN10LineSensor11calibrationEv+0x23c>
 80028de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	3392      	adds	r3, #146	; 0x92
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028f0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028f4:	3301      	adds	r3, #1
 80028f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028fa:	e7d4      	b.n	80028a6 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002902:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002906:	2b0d      	cmp	r3, #13
 8002908:	d815      	bhi.n	8002936 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800290a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800290e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002918:	440a      	add	r2, r1
 800291a:	3a78      	subs	r2, #120	; 0x78
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	33a0      	adds	r3, #160	; 0xa0
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3304      	adds	r3, #4
 8002928:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800292a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800292e:	3301      	adds	r3, #1
 8002930:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002934:	e7e5      	b.n	8002902 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002936:	bf00      	nop
 8002938:	3780      	adds	r7, #128	; 0x80
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	08019df4 	.word	0x08019df4
 8002944:	08019e00 	.word	0x08019e00
 8002948:	447a0000 	.word	0x447a0000

0800294c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002958:	2303      	movs	r3, #3
 800295a:	81bb      	strh	r3, [r7, #12]
 800295c:	89bb      	ldrh	r3, [r7, #12]
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d814      	bhi.n	800298c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002962:	89bb      	ldrh	r3, [r7, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	33b0      	adds	r3, #176	; 0xb0
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80029e0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	db02      	blt.n	8002984 <_ZN10LineSensor13emergencyStopEv+0x38>
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	3301      	adds	r3, #1
 8002982:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	81bb      	strh	r3, [r7, #12]
 800298a:	e7e7      	b.n	800295c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	2b07      	cmp	r3, #7
 8002990:	d906      	bls.n	80029a0 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	e002      	b.n	80029a6 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	2b63      	cmp	r3, #99	; 0x63
 80029ac:	d903      	bls.n	80029b6 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e002      	b.n	80029bc <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d903      	bls.n	80029d0 <_ZN10LineSensor13emergencyStopEv+0x84>
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80029ce:	801a      	strh	r2, [r3, #0]

	return flag;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]

}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	44098000 	.word	0x44098000
 80029e4:	20000256 	.word	0x20000256
 80029e8:	20000258 	.word	0x20000258

080029ec <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80029f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029fa:	eef0 7ae7 	vabs.f32	s15, s15
 80029fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a98:	3350      	adds	r3, #80	; 0x50
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002aa4:	3352      	adds	r3, #82	; 0x52
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ab0:	3354      	adds	r3, #84	; 0x54
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002abc:	3318      	adds	r3, #24
 8002abe:	2200      	movs	r2, #0
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ac8:	331c      	adds	r3, #28
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ad4:	331e      	adds	r3, #30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aec:	3322      	adds	r3, #34	; 0x22
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002af8:	3323      	adds	r3, #35	; 0x23
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b04:	3324      	adds	r3, #36	; 0x24
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b10:	3328      	adds	r3, #40	; 0x28
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b1e:	332c      	adds	r3, #44	; 0x2c
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b2c:	3330      	adds	r3, #48	; 0x30
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b3a:	3334      	adds	r3, #52	; 0x34
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b48:	3338      	adds	r3, #56	; 0x38
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b54:	333a      	adds	r3, #58	; 0x3a
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b60:	333c      	adds	r3, #60	; 0x3c
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b82:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b8e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b94:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	83fb      	strh	r3, [r7, #30]
 8002ba0:	8bfb      	ldrh	r3, [r7, #30]
 8002ba2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d80d      	bhi.n	8002bc6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 8002baa:	8bfb      	ldrh	r3, [r7, #30]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bbe:	8bfb      	ldrh	r3, [r7, #30]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	83fb      	strh	r3, [r7, #30]
 8002bc4:	e7ec      	b.n	8002ba0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	83bb      	strh	r3, [r7, #28]
 8002bca:	8bbb      	ldrh	r3, [r7, #28]
 8002bcc:	2b63      	cmp	r3, #99	; 0x63
 8002bce:	d80d      	bhi.n	8002bec <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002bd0:	8bbb      	ldrh	r3, [r7, #28]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002bd8:	3316      	adds	r3, #22
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002be4:	8bbb      	ldrh	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	83bb      	strh	r3, [r7, #28]
 8002bea:	e7ee      	b.n	8002bca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bec:	2300      	movs	r3, #0
 8002bee:	837b      	strh	r3, [r7, #26]
 8002bf0:	8b7b      	ldrh	r3, [r7, #26]
 8002bf2:	2b63      	cmp	r3, #99	; 0x63
 8002bf4:	d80d      	bhi.n	8002c12 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002bf6:	8b7b      	ldrh	r3, [r7, #26]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002bfe:	333a      	adds	r3, #58	; 0x3a
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	837b      	strh	r3, [r7, #26]
 8002c10:	e7ee      	b.n	8002bf0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	833b      	strh	r3, [r7, #24]
 8002c16:	8b3b      	ldrh	r3, [r7, #24]
 8002c18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c1c:	d20d      	bcs.n	8002c3a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002c1e:	8b3b      	ldrh	r3, [r7, #24]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002c26:	331e      	adds	r3, #30
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c32:	8b3b      	ldrh	r3, [r7, #24]
 8002c34:	3301      	adds	r3, #1
 8002c36:	833b      	strh	r3, [r7, #24]
 8002c38:	e7ed      	b.n	8002c16 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	82fb      	strh	r3, [r7, #22]
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c44:	d20d      	bcs.n	8002c62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002c4e:	3312      	adds	r3, #18
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c5a:	8afb      	ldrh	r3, [r7, #22]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	82fb      	strh	r3, [r7, #22]
 8002c60:	e7ed      	b.n	8002c3e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4618      	mov	r0, r3
 8002c66:	3724      	adds	r7, #36	; 0x24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002ca8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cbc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	ee07 3a90 	vmov	s15, r3

}
 8002ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000025c 	.word	0x2000025c

08002ce0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffc1 	bl	8002c70 <_ZN9LineTrace9calcErrorEv>
 8002cee:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d12:	3354      	adds	r3, #84	; 0x54
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d14c      	bne.n	8002db6 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d22:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	ee17 0a90 	vmov	r0, s15
 8002d4a:	f7fd fc15 	bl	8000578 <__aeabi_f2d>
 8002d4e:	a350      	add	r3, pc, #320	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fd92 	bl	800087c <__aeabi_ddiv>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f7fd ff5a 	bl	8000c18 <__aeabi_d2f>
 8002d64:	4603      	mov	r3, r0
 8002d66:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fc03 	bl	8000578 <__aeabi_f2d>
 8002d72:	4604      	mov	r4, r0
 8002d74:	460d      	mov	r5, r1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d84:	ee17 0a90 	vmov	r0, s15
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	a340      	add	r3, pc, #256	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fc49 	bl	8000628 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f7fd fa8d 	bl	80002bc <__adddf3>
 8002da2:	4603      	mov	r3, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	4618      	mov	r0, r3
 8002da8:	4621      	mov	r1, r4
 8002daa:	f7fd ff35 	bl	8000c18 <__aeabi_d2f>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e04b      	b.n	8002e4e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc4:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	ee17 0a90 	vmov	r0, s15
 8002de4:	f7fd fbc8 	bl	8000578 <__aeabi_f2d>
 8002de8:	a329      	add	r3, pc, #164	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fd45 	bl	800087c <__aeabi_ddiv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	4618      	mov	r0, r3
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f7fd ff0d 	bl	8000c18 <__aeabi_d2f>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fbb6 	bl	8000578 <__aeabi_f2d>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	460d      	mov	r5, r1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	ee17 0a90 	vmov	r0, s15
 8002e22:	f7fd fba9 	bl	8000578 <__aeabi_f2d>
 8002e26:	a31a      	add	r3, pc, #104	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fbfc 	bl	8000628 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7fd fa40 	bl	80002bc <__adddf3>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4618      	mov	r0, r3
 8002e42:	4621      	mov	r1, r4
 8002e44:	f7fd fee8 	bl	8000c18 <__aeabi_d2f>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e4c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002e4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e64:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002e72:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e76:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f003 f844 	bl	8005f08 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6013      	str	r3, [r2, #0]

}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e94:	3f50624d 	.word	0x3f50624d
 8002e98:	20000270 	.word	0x20000270
 8002e9c:	2000026c 	.word	0x2000026c

08002ea0 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fc37 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fa0e 	bl	80052d8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 ff1e 	bl	8004d02 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 ff9f 	bl	8004e26 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	461c      	mov	r4, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7fe fbe7 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f16:	eef0 7a40 	vmov.f32	s15, s0
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f20:	3316      	adds	r3, #22
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f30:	3318      	adds	r3, #24
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f3e:	3318      	adds	r3, #24
 8002f40:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f48:	3318      	adds	r3, #24
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b63      	cmp	r3, #99	; 0x63
 8002f4e:	d905      	bls.n	8002f5c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f56:	3318      	adds	r3, #24
 8002f58:	2263      	movs	r2, #99	; 0x63
 8002f5a:	801a      	strh	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}

08002f64 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f76:	331a      	adds	r3, #26
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7fe fbb1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f82:	eef0 7a40 	vmov.f32	s15, s0
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f8c:	333a      	adds	r3, #58	; 0x3a
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f9c:	331a      	adds	r3, #26
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002faa:	331a      	adds	r3, #26
 8002fac:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fb4:	331a      	adds	r3, #26
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	2b63      	cmp	r3, #99	; 0x63
 8002fba:	d905      	bls.n	8002fc8 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fc2:	331a      	adds	r3, #26
 8002fc4:	2263      	movs	r2, #99	; 0x63
 8002fc6:	801a      	strh	r2, [r3, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fe2:	331c      	adds	r3, #28
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7fe fb7b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002ff8:	331e      	adds	r3, #30
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	331c      	adds	r3, #28
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003016:	331c      	adds	r3, #28
 8003018:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003020:	331c      	adds	r3, #28
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003028:	d306      	bcc.n	8003038 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003030:	331c      	adds	r3, #28
 8003032:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003036:	801a      	strh	r2, [r3, #0]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003052:	331e      	adds	r3, #30
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	461c      	mov	r4, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7fe fb43 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800305e:	eef0 7a40 	vmov.f32	s15, s0
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003068:	3312      	adds	r3, #18
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003078:	331e      	adds	r3, #30
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003086:	331e      	adds	r3, #30
 8003088:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003090:	331e      	adds	r3, #30
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003098:	d306      	bcc.n	80030a8 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a0:	331e      	adds	r3, #30
 80030a2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030a6:	801a      	strh	r2, [r3, #0]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	ed2d 8b02 	vpush	{d8}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d046      	beq.n	8003154 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030cc:	3354      	adds	r3, #84	; 0x54
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11c      	bne.n	8003110 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69dc      	ldr	r4, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe faf1 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80030e4:	eeb0 8a40 	vmov.f32	s16, s0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 f8e2 	bl	80052b6 <_ZN8Odometry8getThetaEv>
 80030f2:	ec53 2b10 	vmov	r2, r3, d0
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd8d 	bl	8000c18 <__aeabi_d2f>
 80030fe:	4603      	mov	r3, r0
 8003100:	ee00 3a90 	vmov	s1, r3
 8003104:	eeb0 0a48 	vmov.f32	s0, s16
 8003108:	4620      	mov	r0, r4
 800310a:	f001 fcb9 	bl	8004a80 <_ZN6Logger21storeDistanceAndThetaEff>
 800310e:	e01b      	b.n	8003148 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69dc      	ldr	r4, [r3, #28]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fae3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800311e:	eeb0 8a40 	vmov.f32	s16, s0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 f8c5 	bl	80052b6 <_ZN8Odometry8getThetaEv>
 800312c:	ec53 2b10 	vmov	r2, r3, d0
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f7fd fd70 	bl	8000c18 <__aeabi_d2f>
 8003138:	4603      	mov	r3, r0
 800313a:	ee00 3a90 	vmov	s1, r3
 800313e:	eeb0 0a48 	vmov.f32	s0, s16
 8003142:	4620      	mov	r0, r4
 8003144:	f001 fce5 	bl	8004b12 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003152:	801a      	strh	r2, [r3, #0]
	}
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	ecbd 8b02 	vpop	{d8}
 800315e:	bd90      	pop	{r4, r7, pc}
 8003160:	20000260 	.word	0x20000260

08003164 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003172:	3318      	adds	r3, #24
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d85a      	bhi.n	8003230 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003180:	3318      	adds	r3, #24
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800318a:	3316      	adds	r3, #22
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe faa3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800319e:	eeb0 7a40 	vmov.f32	s14, s0
 80031a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031aa:	eeb0 0a67 	vmov.f32	s0, s15
 80031ae:	f7ff fc1d 	bl	80029ec <_ZSt3absf>
 80031b2:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 80031b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ba:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003254 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 80031be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d826      	bhi.n	8003216 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031ce:	3338      	adds	r3, #56	; 0x38
 80031d0:	2200      	movs	r2, #0
 80031d2:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6959      	ldr	r1, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031de:	3318      	adds	r3, #24
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80031e8:	3316      	adds	r3, #22
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	4608      	mov	r0, r1
 80031f8:	f7fe fa83 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003202:	3318      	adds	r3, #24
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003210:	3318      	adds	r3, #24
 8003212:	801a      	strh	r2, [r3, #0]
			break;
 8003214:	e00c      	b.n	8003230 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800321c:	3318      	adds	r3, #24
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800322a:	3318      	adds	r3, #24
 800322c:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 800322e:	e79d      	b.n	800316c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003236:	3318      	adds	r3, #24
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	2b63      	cmp	r3, #99	; 0x63
 800323c:	d905      	bls.n	800324a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003244:	3318      	adds	r3, #24
 8003246:	2263      	movs	r2, #99	; 0x63
 8003248:	801a      	strh	r2, [r3, #0]

}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	437a0000 	.word	0x437a0000

08003258 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003260:	2300      	movs	r3, #0
 8003262:	82fb      	strh	r3, [r7, #22]
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800326a:	d23d      	bcs.n	80032e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 800326c:	8afb      	ldrh	r3, [r7, #22]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003274:	331e      	adds	r3, #30
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fa2e 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003288:	eeb0 7a40 	vmov.f32	s14, s0
 800328c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003294:	eeb0 0a67 	vmov.f32	s0, s15
 8003298:	f7ff fba8 	bl	80029ec <_ZSt3absf>
 800329c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 80032a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003310 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 80032a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	d816      	bhi.n	80032e0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032b8:	3338      	adds	r3, #56	; 0x38
 80032ba:	2200      	movs	r2, #0
 80032bc:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6959      	ldr	r1, [r3, #20]
 80032c2:	8afb      	ldrh	r3, [r7, #22]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80032ca:	331e      	adds	r3, #30
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	eeb0 0a67 	vmov.f32	s0, s15
 80032d8:	4608      	mov	r0, r1
 80032da:	f7fe fa12 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80032de:	e003      	b.n	80032e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80032e0:	8afb      	ldrh	r3, [r7, #22]
 80032e2:	3301      	adds	r3, #1
 80032e4:	82fb      	strh	r3, [r7, #22]
 80032e6:	e7bd      	b.n	8003264 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032ee:	331c      	adds	r3, #28
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032f6:	d306      	bcc.n	8003306 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032fe:	331c      	adds	r3, #28
 8003300:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003304:	801a      	strh	r2, [r3, #0]

}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	43660000 	.word	0x43660000

08003314 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003326:	3354      	adds	r3, #84	; 0x54
 8003328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d138      	bne.n	80033a2 <_ZN9LineTrace15radius2VelocityEf+0x8e>
		if(radius < 400) velocity = min_velocity_;
 8003330:	edd7 7a00 	vldr	s15, [r7]
 8003334:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800343c <_ZN9LineTrace15radius2VelocityEf+0x128>
 8003338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	d504      	bpl.n	800334c <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e06d      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else if(radius < 500) velocity = 1.5;
 800334c:	edd7 7a00 	vldr	s15, [r7]
 8003350:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003440 <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8003354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	d503      	bpl.n	8003366 <_ZN9LineTrace15radius2VelocityEf+0x52>
 800335e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e060      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else if(radius < 650) velocity = 2.0;
 8003366:	edd7 7a00 	vldr	s15, [r7]
 800336a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003444 <_ZN9LineTrace15radius2VelocityEf+0x130>
 800336e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	d503      	bpl.n	8003380 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8003378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e053      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else if(radius < 2000) velocity = 3.0;
 8003380:	edd7 7a00 	vldr	s15, [r7]
 8003384:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003448 <_ZN9LineTrace15radius2VelocityEf+0x134>
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	d502      	bpl.n	8003398 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <_ZN9LineTrace15radius2VelocityEf+0x138>)
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e047      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else velocity = max_velocity_;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e042      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033a8:	3354      	adds	r3, #84	; 0x54
 80033aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d138      	bne.n	8003424 <_ZN9LineTrace15radius2VelocityEf+0x110>
		if(radius < 400) velocity = min_velocity2_;
 80033b2:	edd7 7a00 	vldr	s15, [r7]
 80033b6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800343c <_ZN9LineTrace15radius2VelocityEf+0x128>
 80033ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c2:	d504      	bpl.n	80033ce <_ZN9LineTrace15radius2VelocityEf+0xba>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e02c      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else if(radius < 500) velocity = 1.5;
 80033ce:	edd7 7a00 	vldr	s15, [r7]
 80033d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003440 <_ZN9LineTrace15radius2VelocityEf+0x12c>
 80033d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	d503      	bpl.n	80033e8 <_ZN9LineTrace15radius2VelocityEf+0xd4>
 80033e0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e01f      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else if(radius < 650) velocity = 2.0;
 80033e8:	edd7 7a00 	vldr	s15, [r7]
 80033ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003444 <_ZN9LineTrace15radius2VelocityEf+0x130>
 80033f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f8:	d503      	bpl.n	8003402 <_ZN9LineTrace15radius2VelocityEf+0xee>
 80033fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e012      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else if(radius < 2000) velocity = 3.0;
 8003402:	edd7 7a00 	vldr	s15, [r7]
 8003406:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003448 <_ZN9LineTrace15radius2VelocityEf+0x134>
 800340a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	d502      	bpl.n	800341a <_ZN9LineTrace15radius2VelocityEf+0x106>
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <_ZN9LineTrace15radius2VelocityEf+0x138>)
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e006      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
		else velocity = max_velocity2_;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e001      	b.n	8003428 <_ZN9LineTrace15radius2VelocityEf+0x114>
	}
	else velocity = 1.3;
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <_ZN9LineTrace15radius2VelocityEf+0x13c>)
 8003426:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	ee07 3a90 	vmov	s15, r3
}
 800342e:	eeb0 0a67 	vmov.f32	s0, s15
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	43c80000 	.word	0x43c80000
 8003440:	43fa0000 	.word	0x43fa0000
 8003444:	44228000 	.word	0x44228000
 8003448:	44fa0000 	.word	0x44fa0000
 800344c:	40400000 	.word	0x40400000
 8003450:	3fa66666 	.word	0x3fa66666
 8003454:	00000000 	.word	0x00000000

08003458 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	ed87 0a02 	vstr	s0, [r7, #8]
 8003464:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003466:	f241 736f 	movw	r3, #5999	; 0x176f
 800346a:	83fb      	strh	r3, [r7, #30]
 800346c:	8bfb      	ldrh	r3, [r7, #30]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 808d 	beq.w	800358e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003474:	8bfb      	ldrh	r3, [r7, #30]
 8003476:	3b01      	subs	r3, #1
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800347e:	3304      	adds	r3, #4
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	ed93 7a00 	vldr	s14, [r3]
 8003488:	8bfb      	ldrh	r3, [r7, #30]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003490:	3304      	adds	r3, #4
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80034a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80034a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	dd6a      	ble.n	8003586 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80034b0:	8bfb      	ldrh	r3, [r7, #30]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f85c 	bl	8000578 <__aeabi_f2d>
 80034c0:	a335      	add	r3, pc, #212	; (adr r3, 8003598 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd f8af 	bl	8000628 <__aeabi_dmul>
 80034ca:	4603      	mov	r3, r0
 80034cc:	460c      	mov	r4, r1
 80034ce:	4625      	mov	r5, r4
 80034d0:	461c      	mov	r4, r3
 80034d2:	69b8      	ldr	r0, [r7, #24]
 80034d4:	f7fd f850 	bl	8000578 <__aeabi_f2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4620      	mov	r0, r4
 80034de:	4629      	mov	r1, r5
 80034e0:	f7fd f9cc 	bl	800087c <__aeabi_ddiv>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	4618      	mov	r0, r3
 80034ea:	4621      	mov	r1, r4
 80034ec:	f7fd fb94 	bl	8000c18 <__aeabi_d2f>
 80034f0:	4603      	mov	r3, r0
 80034f2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034f4:	edd7 6a06 	vldr	s13, [r7, #24]
 80034f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80034fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003500:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003504:	ed97 7a04 	vldr	s14, [r7, #16]
 8003508:	edd7 7a02 	vldr	s15, [r7, #8]
 800350c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	dd37      	ble.n	8003586 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003516:	8bfb      	ldrh	r3, [r7, #30]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800351e:	3304      	adds	r3, #4
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd f826 	bl	8000578 <__aeabi_f2d>
 800352c:	4604      	mov	r4, r0
 800352e:	460d      	mov	r5, r1
 8003530:	8bfb      	ldrh	r3, [r7, #30]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	ed93 7a00 	vldr	s14, [r3]
 800353c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003544:	ee17 0a90 	vmov	r0, s15
 8003548:	f7fd f816 	bl	8000578 <__aeabi_f2d>
 800354c:	a312      	add	r3, pc, #72	; (adr r3, 8003598 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fd f869 	bl	8000628 <__aeabi_dmul>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fc fead 	bl	80002bc <__adddf3>
 8003562:	4603      	mov	r3, r0
 8003564:	460c      	mov	r4, r1
 8003566:	4619      	mov	r1, r3
 8003568:	4622      	mov	r2, r4
 800356a:	8bfb      	ldrh	r3, [r7, #30]
 800356c:	1e5c      	subs	r4, r3, #1
 800356e:	4608      	mov	r0, r1
 8003570:	4611      	mov	r1, r2
 8003572:	f7fd fb51 	bl	8000c18 <__aeabi_d2f>
 8003576:	4601      	mov	r1, r0
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800357e:	3304      	adds	r3, #4
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003586:	8bfb      	ldrh	r3, [r7, #30]
 8003588:	3b01      	subs	r3, #1
 800358a:	83fb      	strh	r3, [r7, #30]
 800358c:	e76e      	b.n	800346c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800358e:	bf00      	nop
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bdb0      	pop	{r4, r5, r7, pc}
 8003596:	bf00      	nop
 8003598:	d2f1a9fc 	.word	0xd2f1a9fc
 800359c:	3f50624d 	.word	0x3f50624d

080035a0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80035ac:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80035ae:	2300      	movs	r3, #0
 80035b0:	83fb      	strh	r3, [r7, #30]
 80035b2:	8bfb      	ldrh	r3, [r7, #30]
 80035b4:	f241 726f 	movw	r2, #5999	; 0x176f
 80035b8:	4293      	cmp	r3, r2
 80035ba:	f200 808d 	bhi.w	80036d8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80035be:	8bfb      	ldrh	r3, [r7, #30]
 80035c0:	3301      	adds	r3, #1
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035c8:	3304      	adds	r3, #4
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	ed93 7a00 	vldr	s14, [r3]
 80035d2:	8bfb      	ldrh	r3, [r7, #30]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035da:	3304      	adds	r3, #4
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80035f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	dd6a      	ble.n	80036d0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035fa:	8bfb      	ldrh	r3, [r7, #30]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ffb7 	bl	8000578 <__aeabi_f2d>
 800360a:	a335      	add	r3, pc, #212	; (adr r3, 80036e0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd f80a 	bl	8000628 <__aeabi_dmul>
 8003614:	4603      	mov	r3, r0
 8003616:	460c      	mov	r4, r1
 8003618:	4625      	mov	r5, r4
 800361a:	461c      	mov	r4, r3
 800361c:	69b8      	ldr	r0, [r7, #24]
 800361e:	f7fc ffab 	bl	8000578 <__aeabi_f2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4620      	mov	r0, r4
 8003628:	4629      	mov	r1, r5
 800362a:	f7fd f927 	bl	800087c <__aeabi_ddiv>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	4618      	mov	r0, r3
 8003634:	4621      	mov	r1, r4
 8003636:	f7fd faef 	bl	8000c18 <__aeabi_d2f>
 800363a:	4603      	mov	r3, r0
 800363c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800363e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003642:	ed97 7a05 	vldr	s14, [r7, #20]
 8003646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800364e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003652:	edd7 7a02 	vldr	s15, [r7, #8]
 8003656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	dd37      	ble.n	80036d0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003660:	8bfb      	ldrh	r3, [r7, #30]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003668:	3304      	adds	r3, #4
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff81 	bl	8000578 <__aeabi_f2d>
 8003676:	4604      	mov	r4, r0
 8003678:	460d      	mov	r5, r1
 800367a:	8bfb      	ldrh	r3, [r7, #30]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	ed93 7a00 	vldr	s14, [r3]
 8003686:	edd7 7a02 	vldr	s15, [r7, #8]
 800368a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368e:	ee17 0a90 	vmov	r0, s15
 8003692:	f7fc ff71 	bl	8000578 <__aeabi_f2d>
 8003696:	a312      	add	r3, pc, #72	; (adr r3, 80036e0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fc ffc4 	bl	8000628 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4620      	mov	r0, r4
 80036a6:	4629      	mov	r1, r5
 80036a8:	f7fc fe08 	bl	80002bc <__adddf3>
 80036ac:	4603      	mov	r3, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	4619      	mov	r1, r3
 80036b2:	4622      	mov	r2, r4
 80036b4:	8bfb      	ldrh	r3, [r7, #30]
 80036b6:	1c5c      	adds	r4, r3, #1
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	f7fd faac 	bl	8000c18 <__aeabi_d2f>
 80036c0:	4601      	mov	r1, r0
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80036c8:	3304      	adds	r3, #4
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80036d0:	8bfb      	ldrh	r3, [r7, #30]
 80036d2:	3301      	adds	r3, #1
 80036d4:	83fb      	strh	r3, [r7, #30]
 80036d6:	e76c      	b.n	80035b2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80036d8:	bf00      	nop
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bdb0      	pop	{r4, r5, r7, pc}
 80036e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036e4:	3f50624d 	.word	0x3f50624d

080036e8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe f821 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003700:	3350      	adds	r3, #80	; 0x50
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800370c:	3352      	adds	r3, #82	; 0x52
 800370e:	2200      	movs	r2, #0
 8003710:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003718:	330c      	adds	r3, #12
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003736:	3350      	adds	r3, #80	; 0x50
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003742:	3352      	adds	r3, #82	; 0x52
 8003744:	2200      	movs	r2, #0
 8003746:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800374e:	330c      	adds	r3, #12
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003770:	3350      	adds	r3, #80	; 0x50
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05e      	beq.n	8003836 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd ffb1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003782:	eeb0 7a40 	vmov.f32	s14, s0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800378c:	330c      	adds	r3, #12
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	bfac      	ite	ge
 800379c:	2301      	movge	r3, #1
 800379e:	2300      	movlt	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d025      	beq.n	80037f2 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037ac:	330c      	adds	r3, #12
 80037ae:	ed93 7a00 	vldr	s14, [r3]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037b8:	3352      	adds	r3, #82	; 0x52
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	3332      	adds	r3, #50	; 0x32
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	3304      	adds	r3, #4
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037d4:	330c      	adds	r3, #12
 80037d6:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037e0:	3352      	adds	r3, #82	; 0x52
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ee:	3352      	adds	r3, #82	; 0x52
 80037f0:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037f8:	3352      	adds	r3, #82	; 0x52
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	f241 726f 	movw	r2, #5999	; 0x176f
 8003800:	4293      	cmp	r3, r2
 8003802:	d906      	bls.n	8003812 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800380a:	3352      	adds	r3, #82	; 0x52
 800380c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003810:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003818:	3352      	adds	r3, #82	; 0x52
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003822:	3304      	adds	r3, #4
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fade 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd ff37 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003858:	eeb0 7a40 	vmov.f32	s14, s0
 800385c:	edd7 7a00 	vldr	s15, [r7]
 8003860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	bf94      	ite	ls
 800386a:	2301      	movls	r3, #1
 800386c:	2300      	movhi	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800389c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038a8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80038bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c8:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80038cc:	4a44      	ldr	r2, [pc, #272]	; (80039e0 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80038d2:	4a44      	ldr	r2, [pc, #272]	; (80039e4 <_ZN9LineTrace11isCrossLineEv+0x160>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80038d8:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <_ZN9LineTrace11isCrossLineEv+0x164>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04d      	beq.n	8003982 <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80038e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80038ea:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80039ec <_ZN9LineTrace11isCrossLineEv+0x168>
 80038ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d50f      	bpl.n	8003918 <_ZN9LineTrace11isCrossLineEv+0x94>
 80038f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038fc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80039ec <_ZN9LineTrace11isCrossLineEv+0x168>
 8003900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	d506      	bpl.n	8003918 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e002      	b.n	800391e <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003918:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800391a:	2200      	movs	r2, #0
 800391c:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 800391e:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d056      	beq.n	80039d4 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 800392c:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <_ZN9LineTrace11isCrossLineEv+0x164>)
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003934:	2200      	movs	r2, #0
 8003936:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800393e:	3324      	adds	r3, #36	; 0x24
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800394a:	3354      	adds	r3, #84	; 0x54
 800394c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800395a:	333a      	adds	r3, #58	; 0x3a
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fac9 	bl	8002ef8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003966:	e035      	b.n	80039d4 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800396e:	333a      	adds	r3, #58	; 0x3a
 8003970:	2200      	movs	r2, #0
 8003972:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fbf5 	bl	8003164 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff faf2 	bl	8002f64 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003980:	e028      	b.n	80039d4 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003982:	edd7 7a03 	vldr	s15, [r7, #12]
 8003986:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039f8 <_ZN9LineTrace11isCrossLineEv+0x174>
 800398a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	dd0f      	ble.n	80039b4 <_ZN9LineTrace11isCrossLineEv+0x130>
 8003994:	edd7 7a02 	vldr	s15, [r7, #8]
 8003998:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80039f8 <_ZN9LineTrace11isCrossLineEv+0x174>
 800399c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	dd06      	ble.n	80039b4 <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	e002      	b.n	80039ba <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 5){
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d908      	bls.n	80039d4 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <_ZN9LineTrace11isCrossLineEv+0x170>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <_ZN9LineTrace11isCrossLineEv+0x164>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <_ZN9LineTrace11isCrossLineEv+0x170>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000264 	.word	0x20000264
 80039e4:	20000268 	.word	0x20000268
 80039e8:	20000277 	.word	0x20000277
 80039ec:	44160000 	.word	0x44160000
 80039f0:	20000274 	.word	0x20000274
 80039f4:	20000276 	.word	0x20000276
 80039f8:	43fa0000 	.word	0x43fa0000

080039fc <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fe5a 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003a12:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fc4b 	bl	80052b6 <_ZN8Odometry8getThetaEv>
 8003a20:	ec54 3b10 	vmov	r3, r4, d0
 8003a24:	4618      	mov	r0, r3
 8003a26:	4621      	mov	r1, r4
 8003a28:	f7fd f8f6 	bl	8000c18 <__aeabi_d2f>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003a30:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	d101      	bne.n	8003a42 <_ZN9LineTrace8isStableEv+0x46>
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <_ZN9LineTrace8isStableEv+0xd0>)
 8003a40:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003a42:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a4e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a52:	f7fe ffcb 	bl	80029ec <_ZSt3absf>
 8003a56:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a5e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ad0 <_ZN9LineTrace8isStableEv+0xd4>
 8003a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	db01      	blt.n	8003a70 <_ZN9LineTrace8isStableEv+0x74>
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <_ZN9LineTrace8isStableEv+0xd8>)
 8003a6e:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a76:	3324      	adds	r3, #36	; 0x24
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a8a:	3324      	adds	r3, #36	; 0x24
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a94:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003adc <_ZN9LineTrace8isStableEv+0xe0>
 8003a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	db06      	blt.n	8003ab0 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e002      	b.n	8003ab6 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	2b18      	cmp	r3, #24
 8003abc:	d901      	bls.n	8003ac2 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	3727c5ac 	.word	0x3727c5ac
 8003ad0:	459c4000 	.word	0x459c4000
 8003ad4:	459c4000 	.word	0x459c4000
 8003ad8:	20000278 	.word	0x20000278
 8003adc:	44fa0000 	.word	0x44fa0000

08003ae0 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b092      	sub	sp, #72	; 0x48
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003ae8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aec:	2201      	movs	r2, #1
 8003aee:	4963      	ldr	r1, [pc, #396]	; (8003c7c <_ZN9LineTrace4initEv+0x19c>)
 8003af0:	4863      	ldr	r0, [pc, #396]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003af2:	f7fd ff29 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003af6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003afa:	2201      	movs	r2, #1
 8003afc:	4961      	ldr	r1, [pc, #388]	; (8003c84 <_ZN9LineTrace4initEv+0x1a4>)
 8003afe:	4860      	ldr	r0, [pc, #384]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b00:	f7fd ff22 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003b04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b08:	2201      	movs	r2, #1
 8003b0a:	495f      	ldr	r1, [pc, #380]	; (8003c88 <_ZN9LineTrace4initEv+0x1a8>)
 8003b0c:	485c      	ldr	r0, [pc, #368]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b0e:	f7fd ff1b 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003b12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b1a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003b1e:	eeb0 1a66 	vmov.f32	s2, s13
 8003b22:	eef0 0a47 	vmov.f32	s1, s14
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8c6 	bl	8003cbc <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b34:	2201      	movs	r2, #1
 8003b36:	4955      	ldr	r1, [pc, #340]	; (8003c8c <_ZN9LineTrace4initEv+0x1ac>)
 8003b38:	4851      	ldr	r0, [pc, #324]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b3a:	f7fd ff05 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b42:	2201      	movs	r2, #1
 8003b44:	4952      	ldr	r1, [pc, #328]	; (8003c90 <_ZN9LineTrace4initEv+0x1b0>)
 8003b46:	484e      	ldr	r0, [pc, #312]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b48:	f7fd fefe 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b50:	2201      	movs	r2, #1
 8003b52:	4950      	ldr	r1, [pc, #320]	; (8003c94 <_ZN9LineTrace4initEv+0x1b4>)
 8003b54:	484a      	ldr	r0, [pc, #296]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b56:	f7fd fef7 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003b5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b5e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b62:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003b66:	eeb0 1a66 	vmov.f32	s2, s13
 8003b6a:	eef0 0a47 	vmov.f32	s1, s14
 8003b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8e8 	bl	8003d48 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4946      	ldr	r1, [pc, #280]	; (8003c98 <_ZN9LineTrace4initEv+0x1b8>)
 8003b80:	483f      	ldr	r0, [pc, #252]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b82:	f7fd fee1 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4943      	ldr	r1, [pc, #268]	; (8003c9c <_ZN9LineTrace4initEv+0x1bc>)
 8003b8e:	483c      	ldr	r0, [pc, #240]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b90:	f7fd feda 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4941      	ldr	r1, [pc, #260]	; (8003ca0 <_ZN9LineTrace4initEv+0x1c0>)
 8003b9c:	4838      	ldr	r0, [pc, #224]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003b9e:	f7fd fed3 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003ba2:	f107 0320 	add.w	r3, r7, #32
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	493e      	ldr	r1, [pc, #248]	; (8003ca4 <_ZN9LineTrace4initEv+0x1c4>)
 8003baa:	4835      	ldr	r0, [pc, #212]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003bac:	f7fd fecc 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	493c      	ldr	r1, [pc, #240]	; (8003ca8 <_ZN9LineTrace4initEv+0x1c8>)
 8003bb8:	4831      	ldr	r0, [pc, #196]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003bba:	f7fd fec5 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003bbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f913 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003bcc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f91c 	bl	8003e12 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003bda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bde:	eeb0 0a67 	vmov.f32	s0, s15
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f925 	bl	8003e32 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003be8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bec:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f92e 	bl	8003e52 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003bf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f937 	bl	8003e72 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003c04:	f107 0318 	add.w	r3, r7, #24
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4928      	ldr	r1, [pc, #160]	; (8003cac <_ZN9LineTrace4initEv+0x1cc>)
 8003c0c:	481c      	ldr	r0, [pc, #112]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003c0e:	f7fd fe9b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	2201      	movs	r2, #1
 8003c18:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <_ZN9LineTrace4initEv+0x1d0>)
 8003c1a:	4819      	ldr	r0, [pc, #100]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003c1c:	f7fd fe94 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c28:	eef0 0a47 	vmov.f32	s1, s14
 8003c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f97e 	bl	8003f32 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003c42:	f107 0310 	add.w	r3, r7, #16
 8003c46:	2201      	movs	r2, #1
 8003c48:	491a      	ldr	r1, [pc, #104]	; (8003cb4 <_ZN9LineTrace4initEv+0x1d4>)
 8003c4a:	480d      	ldr	r0, [pc, #52]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003c4c:	f7fd fe7c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003c50:	f107 030c 	add.w	r3, r7, #12
 8003c54:	2201      	movs	r2, #1
 8003c56:	4918      	ldr	r1, [pc, #96]	; (8003cb8 <_ZN9LineTrace4initEv+0x1d8>)
 8003c58:	4809      	ldr	r0, [pc, #36]	; (8003c80 <_ZN9LineTrace4initEv+0x1a0>)
 8003c5a:	f7fd fe75 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c62:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c66:	eef0 0a47 	vmov.f32	s1, s14
 8003c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f979 	bl	8003f66 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c74:	bf00      	nop
 8003c76:	3748      	adds	r7, #72	; 0x48
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08019e40 	.word	0x08019e40
 8003c80:	08019e48 	.word	0x08019e48
 8003c84:	08019e50 	.word	0x08019e50
 8003c88:	08019e58 	.word	0x08019e58
 8003c8c:	08019e60 	.word	0x08019e60
 8003c90:	08019e6c 	.word	0x08019e6c
 8003c94:	08019e78 	.word	0x08019e78
 8003c98:	08019e84 	.word	0x08019e84
 8003c9c:	08019e90 	.word	0x08019e90
 8003ca0:	08019e9c 	.word	0x08019e9c
 8003ca4:	08019ea8 	.word	0x08019ea8
 8003ca8:	08019eb4 	.word	0x08019eb4
 8003cac:	08019ec0 	.word	0x08019ec0
 8003cb0:	08019ec8 	.word	0x08019ec8
 8003cb4:	08019ed0 	.word	0x08019ed0
 8003cb8:	08019edc 	.word	0x08019edc

08003cbc <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cc8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ccc:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
	return kp_;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	ee07 3a90 	vmov	s15, r3
}
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	return ki_;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	ee07 3a90 	vmov	s15, r3
}
 8003d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
	return kd_;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	ee07 3a90 	vmov	s15, r3
}
 8003d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d54:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d58:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	ee07 3a90 	vmov	s15, r3
}
 8003d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	ee07 3a90 	vmov	s15, r3
}
 8003da8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	ee07 3a90 	vmov	s15, r3
}
 8003dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ea0:	ee07 3a90 	vmov	s15, r3
}
 8003ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ec0:	ee07 3a90 	vmov	s15, r3
}
 8003ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ee0:	ee07 3a90 	vmov	s15, r3
}
 8003ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f00:	ee07 3a90 	vmov	s15, r3
}
 8003f04:	eeb0 0a67 	vmov.f32	s0, s15
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f20:	ee07 3a90 	vmov	s15, r3
}
 8003f24:	eeb0 0a67 	vmov.f32	s0, s15
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f3e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f48:	3328      	adds	r3, #40	; 0x28
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f54:	332c      	adds	r3, #44	; 0x2c
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f72:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f7c:	3330      	adds	r3, #48	; 0x30
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f88:	3334      	adds	r3, #52	; 0x34
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	601a      	str	r2, [r3, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa8:	3328      	adds	r3, #40	; 0x28
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	ee07 3a90 	vmov	s15, r3
}
 8003fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fcc:	3334      	adds	r3, #52	; 0x34
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	ee07 3a90 	vmov	s15, r3
}
 8003fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ff0:	3330      	adds	r3, #48	; 0x30
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	ee07 3a90 	vmov	s15, r3
}
 8003ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
	return max_dec_;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004014:	332c      	adds	r3, #44	; 0x2c
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	ee07 3a90 	vmov	s15, r3
}
 800401c:	eeb0 0a67 	vmov.f32	s0, s15
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8120 	beq.w	8004280 <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fe fe4d 	bl	8002ce0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fb8b 	bl	8003762 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 800404c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fbf4 	bl	800383e <_ZN9LineTrace16isTargetDistanceEf>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d028      	beq.n	80040ae <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff f827 	bl	80030b0 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fcca 	bl	80039fc <_ZN9LineTrace8isStableEv>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <_ZN9LineTrace4flipEv+0x5c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fbea 	bl	800584c <_ZN10SideSensor10getStatusLEv>
 8004078:	4603      	mov	r3, r0
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <_ZN9LineTrace4flipEv+0x5c>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <_ZN9LineTrace4flipEv+0x5e>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004094:	3323      	adds	r3, #35	; 0x23
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fb3e 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 f915 	bl	80052d8 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040b4:	3323      	adds	r3, #35	; 0x23
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <_ZN9LineTrace4flipEv+0xa4>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fbc3 	bl	800584c <_ZN10SideSensor10getStatusLEv>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <_ZN9LineTrace4flipEv+0xa4>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <_ZN9LineTrace4flipEv+0xa6>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d029      	beq.n	800412a <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040dc:	3354      	adds	r3, #84	; 0x54
 80040de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040ec:	333a      	adds	r3, #58	; 0x3a
 80040ee:	2200      	movs	r2, #0
 80040f0:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe ff6c 	bl	8002fd0 <_ZN9LineTrace21storeSideLineDistanceEv>
 80040f8:	e00b      	b.n	8004112 <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004100:	333a      	adds	r3, #58	; 0x3a
 8004102:	2200      	movs	r2, #0
 8004104:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff f8a6 	bl	8003258 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fe ff97 	bl	8003040 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004118:	3323      	adds	r3, #35	; 0x23
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fbaa 	bl	8003884 <_ZN9LineTrace11isCrossLineEv>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	4618      	mov	r0, r3
 800413c:	f001 fbae 	bl	800589c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd fb16 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 60){
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fbbe 	bl	80058d0 <_ZN10SideSensor13getIgnoreFlagEv>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00f      	beq.n	800417a <_ZN9LineTrace4flipEv+0x14e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fafa 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004164:	eeb0 7a40 	vmov.f32	s14, s0
 8004168:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004288 <_ZN9LineTrace4flipEv+0x25c>
 800416c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	db01      	blt.n	800417a <_ZN9LineTrace4flipEv+0x14e>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <_ZN9LineTrace4flipEv+0x150>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4618      	mov	r0, r3
 8004186:	f001 fb96 	bl	80058b6 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fbdc 	bl	800294c <_ZN10LineSensor13emergencyStopEv>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800428c <_ZN9LineTrace4flipEv+0x260>
 80041a2:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800428c <_ZN9LineTrace4flipEv+0x260>
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 feae 	bl	8005f08 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd f8e7 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041bc:	3338      	adds	r3, #56	; 0x38
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ca:	3338      	adds	r3, #56	; 0x38
 80041cc:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041d4:	3338      	adds	r3, #56	; 0x38
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80041dc:	4293      	cmp	r3, r2
 80041de:	d906      	bls.n	80041ee <_ZN9LineTrace4flipEv+0x1c2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e6:	3338      	adds	r3, #56	; 0x38
 80041e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80041ec:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041f4:	3338      	adds	r3, #56	; 0x38
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80041fc:	d806      	bhi.n	800420c <_ZN9LineTrace4flipEv+0x1e0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	330c      	adds	r3, #12
 8004202:	2152      	movs	r1, #82	; 0x52
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd ffc5 	bl	8002194 <_ZN3LED9fullColorEc>
 800420a:	e005      	b.n	8004218 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	330c      	adds	r3, #12
 8004210:	2142      	movs	r1, #66	; 0x42
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd ffbe 	bl	8002194 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800421e:	333a      	adds	r3, #58	; 0x3a
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800422c:	333a      	adds	r3, #58	; 0x3a
 800422e:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004236:	333a      	adds	r3, #58	; 0x3a
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	f242 720f 	movw	r2, #9999	; 0x270f
 800423e:	4293      	cmp	r3, r2
 8004240:	d906      	bls.n	8004250 <_ZN9LineTrace4flipEv+0x224>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004248:	333a      	adds	r3, #58	; 0x3a
 800424a:	f242 7210 	movw	r2, #10000	; 0x2710
 800424e:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004256:	333a      	adds	r3, #58	; 0x3a
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	2bc8      	cmp	r3, #200	; 0xc8
 800425c:	d808      	bhi.n	8004270 <_ZN9LineTrace4flipEv+0x244>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	330c      	adds	r3, #12
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe f84f 	bl	800230c <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 800426e:	e007      	b.n	8004280 <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	330c      	adds	r3, #12
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe f846 	bl	800230c <_ZN3LED2LREaa>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	42700000 	.word	0x42700000
 800428c:	00000000 	.word	0x00000000

08004290 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042a2:	3354      	adds	r3, #84	; 0x54
 80042a4:	887a      	ldrh	r2, [r7, #2]
 80042a6:	801a      	strh	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fe72 	bl	8005fba <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 face 	bl	800587c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042e6:	3318      	adds	r3, #24
 80042e8:	2200      	movs	r2, #0
 80042ea:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042f2:	331c      	adds	r3, #28
 80042f4:	2200      	movs	r2, #0
 80042f6:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042fe:	331e      	adds	r3, #30
 8004300:	2200      	movs	r2, #0
 8004302:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800430a:	3320      	adds	r3, #32
 800430c:	2200      	movs	r2, #0
 800430e:	801a      	strh	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004324:	2300      	movs	r3, #0
 8004326:	737b      	strb	r3, [r7, #13]
	start();
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ffc3 	bl	80042b4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800432e:	7b7b      	ldrb	r3, [r7, #13]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d161      	bne.n	80043f8 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004334:	89fb      	ldrh	r3, [r7, #14]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <_ZN9LineTrace7runningEv+0x28>
 800433a:	2b0a      	cmp	r3, #10
 800433c:	d030      	beq.n	80043a0 <_ZN9LineTrace7runningEv+0x88>
 800433e:	e05a      	b.n	80043f6 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fa8d 	bl	8005864 <_ZN10SideSensor16getWhiteLineCntREv>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d04a      	beq.n	80043f0 <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe fda0 	bl	8002ea0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004366:	3354      	adds	r3, #84	; 0x54
 8004368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff f9b9 	bl	80036e8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd f9fb 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	4618      	mov	r0, r3
 8004386:	f7fd f9d9 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	330c      	adds	r3, #12
 800438e:	f04f 32ff 	mov.w	r2, #4294967295
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f7fd ffb9 	bl	800230c <_ZN3LED2LREaa>
				stage = 10;
 800439a:	230a      	movs	r3, #10
 800439c:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800439e:	e027      	b.n	80043f0 <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fa5d 	bl	8005864 <_ZN10SideSensor16getWhiteLineCntREv>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01c      	beq.n	80043f4 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	330c      	adds	r3, #12
 80043be:	214d      	movs	r1, #77	; 0x4d
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fee7 	bl	8002194 <_ZN3LED9fullColorEc>
				loggerStop();
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe fd85 	bl	8002ed6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff f9ab 	bl	8003728 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80043d2:	2064      	movs	r0, #100	; 0x64
 80043d4:	f005 fd94 	bl	8009f00 <HAL_Delay>

				setTargetVelocity(0);
 80043d8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004408 <_ZN9LineTrace7runningEv+0xf0>
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fd08 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80043e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043e6:	f005 fd8b 	bl	8009f00 <HAL_Delay>

				goal_flag = true;
 80043ea:	2301      	movs	r3, #1
 80043ec:	737b      	strb	r3, [r7, #13]

			}

			break;
 80043ee:	e001      	b.n	80043f4 <_ZN9LineTrace7runningEv+0xdc>
			break;
 80043f0:	bf00      	nop
 80043f2:	e79c      	b.n	800432e <_ZN9LineTrace7runningEv+0x16>
			break;
 80043f4:	bf00      	nop
	while(goal_flag == false){
 80043f6:	e79a      	b.n	800432e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f807 	bl	800440c <_ZN9LineTrace4stopEv>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	00000000 	.word	0x00000000

0800440c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fddd 	bl	8005fe0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	330c      	adds	r3, #12
 800442a:	2201      	movs	r2, #1
 800442c:	f04f 31ff 	mov.w	r1, #4294967295
 8004430:	4618      	mov	r0, r3
 8004432:	f7fd ff6b 	bl	800230c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800443c:	3354      	adds	r3, #84	; 0x54
 800443e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11e      	bne.n	8004484 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69d8      	ldr	r0, [r3, #28]
 800444a:	4b28      	ldr	r3, [pc, #160]	; (80044ec <_ZN9LineTrace4stopEv+0xe0>)
 800444c:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <_ZN9LineTrace4stopEv+0xe4>)
 800444e:	4929      	ldr	r1, [pc, #164]	; (80044f4 <_ZN9LineTrace4stopEv+0xe8>)
 8004450:	f000 fbef 	bl	8004c32 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800445a:	3358      	adds	r3, #88	; 0x58
 800445c:	2200      	movs	r2, #0
 800445e:	9200      	str	r2, [sp, #0]
 8004460:	2264      	movs	r2, #100	; 0x64
 8004462:	4925      	ldr	r1, [pc, #148]	; (80044f8 <_ZN9LineTrace4stopEv+0xec>)
 8004464:	4823      	ldr	r0, [pc, #140]	; (80044f4 <_ZN9LineTrace4stopEv+0xe8>)
 8004466:	f7fd fa09 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004470:	3378      	adds	r3, #120	; 0x78
 8004472:	2200      	movs	r2, #0
 8004474:	9200      	str	r2, [sp, #0]
 8004476:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800447a:	4920      	ldr	r1, [pc, #128]	; (80044fc <_ZN9LineTrace4stopEv+0xf0>)
 800447c:	481d      	ldr	r0, [pc, #116]	; (80044f4 <_ZN9LineTrace4stopEv+0xe8>)
 800447e:	f7fd f9fd 	bl	800187c <sd_write_array_float>
 8004482:	e01d      	b.n	80044c0 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69d8      	ldr	r0, [r3, #28]
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <_ZN9LineTrace4stopEv+0xf4>)
 800448a:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <_ZN9LineTrace4stopEv+0xf8>)
 800448c:	4919      	ldr	r1, [pc, #100]	; (80044f4 <_ZN9LineTrace4stopEv+0xe8>)
 800448e:	f000 fbf4 	bl	8004c7a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004498:	33e8      	adds	r3, #232	; 0xe8
 800449a:	2200      	movs	r2, #0
 800449c:	9200      	str	r2, [sp, #0]
 800449e:	2264      	movs	r2, #100	; 0x64
 80044a0:	4919      	ldr	r1, [pc, #100]	; (8004508 <_ZN9LineTrace4stopEv+0xfc>)
 80044a2:	4814      	ldr	r0, [pc, #80]	; (80044f4 <_ZN9LineTrace4stopEv+0xe8>)
 80044a4:	f7fd f9ea 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80044ae:	3348      	adds	r3, #72	; 0x48
 80044b0:	2200      	movs	r2, #0
 80044b2:	9200      	str	r2, [sp, #0]
 80044b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044b8:	4914      	ldr	r1, [pc, #80]	; (800450c <_ZN9LineTrace4stopEv+0x100>)
 80044ba:	480e      	ldr	r0, [pc, #56]	; (80044f4 <_ZN9LineTrace4stopEv+0xe8>)
 80044bc:	f7fd f9de 	bl	800187c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	330c      	adds	r3, #12
 80044c4:	2200      	movs	r2, #0
 80044c6:	f04f 31ff 	mov.w	r1, #4294967295
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd ff1e 	bl	800230c <_ZN3LED2LREaa>

	logger_->resetIdx();
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fc68 	bl	8004daa <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fc0f 	bl	8004d02 <_ZN6Logger10resetLogs2Ev>
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	08019ee8 	.word	0x08019ee8
 80044f0:	08019ef4 	.word	0x08019ef4
 80044f4:	08019f04 	.word	0x08019f04
 80044f8:	08019f10 	.word	0x08019f10
 80044fc:	08019f20 	.word	0x08019f20
 8004500:	08019f2c 	.word	0x08019f2c
 8004504:	08019f38 	.word	0x08019f38
 8004508:	08019f48 	.word	0x08019f48
 800450c:	08019f58 	.word	0x08019f58

08004510 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b08b      	sub	sp, #44	; 0x2c
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fb41 	bl	8004ba4 <_ZN6Logger23getDistanceArrayPointerEv>
 8004522:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fb49 	bl	8004bc0 <_ZN6Logger20getThetaArrayPointerEv>
 800452e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004530:	2300      	movs	r3, #0
 8004532:	837b      	strh	r3, [r7, #26]
 8004534:	8b7b      	ldrh	r3, [r7, #26]
 8004536:	f241 726f 	movw	r2, #5999	; 0x176f
 800453a:	4293      	cmp	r3, r2
 800453c:	d84b      	bhi.n	80045d6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800453e:	8b7b      	ldrh	r3, [r7, #26]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800454a:	8b7b      	ldrh	r3, [r7, #26]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004556:	edd7 7a07 	vldr	s15, [r7, #28]
 800455a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004562:	d101      	bne.n	8004568 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004564:	4b4c      	ldr	r3, [pc, #304]	; (8004698 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004566:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004568:	ed97 7a02 	vldr	s14, [r7, #8]
 800456c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004570:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004574:	eeb0 0a66 	vmov.f32	s0, s13
 8004578:	f7fe fa38 	bl	80029ec <_ZSt3absf>
 800457c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004580:	edd7 7a05 	vldr	s15, [r7, #20]
 8004584:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800469c <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	db01      	blt.n	8004596 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004592:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004594:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004596:	8b7c      	ldrh	r4, [r7, #26]
 8004598:	ed97 0a05 	vldr	s0, [r7, #20]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fe feb9 	bl	8003314 <_ZN9LineTrace15radius2VelocityEf>
 80045a2:	eef0 7a40 	vmov.f32	s15, s0
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045ac:	3304      	adds	r3, #4
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045b6:	8b7b      	ldrh	r3, [r7, #26]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	441a      	add	r2, r3
 80045be:	8b7b      	ldrh	r3, [r7, #26]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	3332      	adds	r3, #50	; 0x32
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3304      	adds	r3, #4
 80045cc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045ce:	8b7b      	ldrh	r3, [r7, #26]
 80045d0:	3301      	adds	r3, #1
 80045d2:	837b      	strh	r3, [r7, #26]
 80045d4:	e7ae      	b.n	8004534 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045dc:	3354      	adds	r3, #84	; 0x54
 80045de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d120      	bne.n	8004628 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045f2:	3310      	adds	r3, #16
 80045f4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045fc:	332c      	adds	r3, #44	; 0x2c
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	6939      	ldr	r1, [r7, #16]
 8004604:	eeb0 0a67 	vmov.f32	s0, s15
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fe ff25 	bl	8003458 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004614:	3328      	adds	r3, #40	; 0x28
 8004616:	edd3 7a00 	vldr	s15, [r3]
 800461a:	6939      	ldr	r1, [r7, #16]
 800461c:	eeb0 0a67 	vmov.f32	s0, s15
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7fe ffbd 	bl	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004626:	e027      	b.n	8004678 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800462e:	3354      	adds	r3, #84	; 0x54
 8004630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d11f      	bne.n	8004678 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004644:	3310      	adds	r3, #16
 8004646:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800464e:	3334      	adds	r3, #52	; 0x34
 8004650:	edd3 7a00 	vldr	s15, [r3]
 8004654:	6939      	ldr	r1, [r7, #16]
 8004656:	eeb0 0a67 	vmov.f32	s0, s15
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fe fefc 	bl	8003458 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004666:	3330      	adds	r3, #48	; 0x30
 8004668:	edd3 7a00 	vldr	s15, [r3]
 800466c:	6939      	ldr	r1, [r7, #16]
 800466e:	eeb0 0a67 	vmov.f32	s0, s15
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fe ff94 	bl	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800467e:	3310      	adds	r3, #16
 8004680:	2200      	movs	r2, #0
 8004682:	9200      	str	r2, [sp, #0]
 8004684:	f241 7270 	movw	r2, #6000	; 0x1770
 8004688:	4906      	ldr	r1, [pc, #24]	; (80046a4 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800468a:	4807      	ldr	r0, [pc, #28]	; (80046a8 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 800468c:	f7fd f8f6 	bl	800187c <sd_write_array_float>

}
 8004690:	bf00      	nop
 8004692:	3724      	adds	r7, #36	; 0x24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	3727c5ac 	.word	0x3727c5ac
 800469c:	459c4000 	.word	0x459c4000
 80046a0:	459c4000 	.word	0x459c4000
 80046a4:	08019f68 	.word	0x08019f68
 80046a8:	08019f04 	.word	0x08019f04

080046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b08b      	sub	sp, #44	; 0x2c
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69d8      	ldr	r0, [r3, #28]
 80046b8:	4b6b      	ldr	r3, [pc, #428]	; (8004868 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046ba:	4a6c      	ldr	r2, [pc, #432]	; (800486c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046bc:	496c      	ldr	r1, [pc, #432]	; (8004870 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046be:	f000 fb00 	bl	8004cc2 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046c8:	3358      	adds	r3, #88	; 0x58
 80046ca:	2264      	movs	r2, #100	; 0x64
 80046cc:	4969      	ldr	r1, [pc, #420]	; (8004874 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80046ce:	4868      	ldr	r0, [pc, #416]	; (8004870 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046d0:	f7fd f93a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80046da:	3378      	adds	r3, #120	; 0x78
 80046dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046e0:	4965      	ldr	r1, [pc, #404]	; (8004878 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80046e2:	4863      	ldr	r0, [pc, #396]	; (8004870 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046e4:	f7fd f930 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fa59 	bl	8004ba4 <_ZN6Logger23getDistanceArrayPointerEv>
 80046f2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa61 	bl	8004bc0 <_ZN6Logger20getThetaArrayPointerEv>
 80046fe:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004700:	2300      	movs	r3, #0
 8004702:	837b      	strh	r3, [r7, #26]
 8004704:	8b7b      	ldrh	r3, [r7, #26]
 8004706:	f241 726f 	movw	r2, #5999	; 0x176f
 800470a:	4293      	cmp	r3, r2
 800470c:	d84b      	bhi.n	80047a6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800470e:	8b7b      	ldrh	r3, [r7, #26]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800471a:	8b7b      	ldrh	r3, [r7, #26]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004726:	edd7 7a07 	vldr	s15, [r7, #28]
 800472a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	d101      	bne.n	8004738 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004734:	4b51      	ldr	r3, [pc, #324]	; (800487c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004736:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004738:	ed97 7a02 	vldr	s14, [r7, #8]
 800473c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004740:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004744:	eeb0 0a66 	vmov.f32	s0, s13
 8004748:	f7fe f950 	bl	80029ec <_ZSt3absf>
 800474c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004750:	edd7 7a05 	vldr	s15, [r7, #20]
 8004754:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004760:	db01      	blt.n	8004766 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004762:	4b48      	ldr	r3, [pc, #288]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004764:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004766:	8b7c      	ldrh	r4, [r7, #26]
 8004768:	ed97 0a05 	vldr	s0, [r7, #20]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fe fdd1 	bl	8003314 <_ZN9LineTrace15radius2VelocityEf>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800477c:	3304      	adds	r3, #4
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004786:	8b7b      	ldrh	r3, [r7, #26]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	441a      	add	r2, r3
 800478e:	8b7b      	ldrh	r3, [r7, #26]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	3332      	adds	r3, #50	; 0x32
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3304      	adds	r3, #4
 800479c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800479e:	8b7b      	ldrh	r3, [r7, #26]
 80047a0:	3301      	adds	r3, #1
 80047a2:	837b      	strh	r3, [r7, #26]
 80047a4:	e7ae      	b.n	8004704 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047ac:	3354      	adds	r3, #84	; 0x54
 80047ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d120      	bne.n	80047f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047c2:	3310      	adds	r3, #16
 80047c4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047cc:	332c      	adds	r3, #44	; 0x2c
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	eeb0 0a67 	vmov.f32	s0, s15
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fe fe3d 	bl	8003458 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047e4:	3328      	adds	r3, #40	; 0x28
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	6939      	ldr	r1, [r7, #16]
 80047ec:	eeb0 0a67 	vmov.f32	s0, s15
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fe fed5 	bl	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80047f6:	e027      	b.n	8004848 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047fe:	3354      	adds	r3, #84	; 0x54
 8004800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d11f      	bne.n	8004848 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004814:	3310      	adds	r3, #16
 8004816:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800481e:	3334      	adds	r3, #52	; 0x34
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	6939      	ldr	r1, [r7, #16]
 8004826:	eeb0 0a67 	vmov.f32	s0, s15
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe fe14 	bl	8003458 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004836:	3330      	adds	r3, #48	; 0x30
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	6939      	ldr	r1, [r7, #16]
 800483e:	eeb0 0a67 	vmov.f32	s0, s15
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fe feac 	bl	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800484e:	3310      	adds	r3, #16
 8004850:	2200      	movs	r2, #0
 8004852:	9200      	str	r2, [sp, #0]
 8004854:	f241 7270 	movw	r2, #6000	; 0x1770
 8004858:	490b      	ldr	r1, [pc, #44]	; (8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800485a:	4805      	ldr	r0, [pc, #20]	; (8004870 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800485c:	f7fd f80e 	bl	800187c <sd_write_array_float>

}
 8004860:	bf00      	nop
 8004862:	3724      	adds	r7, #36	; 0x24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd90      	pop	{r4, r7, pc}
 8004868:	08019ee8 	.word	0x08019ee8
 800486c:	08019ef4 	.word	0x08019ef4
 8004870:	08019f04 	.word	0x08019f04
 8004874:	08019f10 	.word	0x08019f10
 8004878:	08019f20 	.word	0x08019f20
 800487c:	3727c5ac 	.word	0x3727c5ac
 8004880:	459c4000 	.word	0x459c4000
 8004884:	459c4000 	.word	0x459c4000
 8004888:	08019f68 	.word	0x08019f68

0800488c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800489a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048a8:	f203 2382 	addw	r3, r3, #642	; 0x282
 80048ac:	2200      	movs	r2, #0
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048b6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048ba:	2200      	movs	r2, #0
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048c4:	f203 2386 	addw	r3, r3, #646	; 0x286
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048d6:	2200      	movs	r2, #0
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80048e0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 80048e4:	2200      	movs	r2, #0
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004904:	f7fd f8ac 	bl	8001a60 <sd_mount>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d016      	beq.n	8004946 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004918:	f7fc fbc2 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800491c:	2100      	movs	r1, #0
 800491e:	2000      	movs	r0, #0
 8004920:	f7fc fbce 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004924:	4815      	ldr	r0, [pc, #84]	; (800497c <_ZN6Logger10sdCardInitEv+0x84>)
 8004926:	f7fc fbf5 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800492a:	2101      	movs	r1, #1
 800492c:	2000      	movs	r0, #0
 800492e:	f7fc fbc7 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004932:	4813      	ldr	r0, [pc, #76]	; (8004980 <_ZN6Logger10sdCardInitEv+0x88>)
 8004934:	f7fc fbee 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800493c:	f005 fae0 	bl	8009f00 <HAL_Delay>

	  ret = true;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	e015      	b.n	8004972 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004946:	f7fc fbab 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800494a:	2100      	movs	r1, #0
 800494c:	2000      	movs	r0, #0
 800494e:	f7fc fbb7 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004952:	480a      	ldr	r0, [pc, #40]	; (800497c <_ZN6Logger10sdCardInitEv+0x84>)
 8004954:	f7fc fbde 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004958:	2101      	movs	r1, #1
 800495a:	2000      	movs	r0, #0
 800495c:	f7fc fbb0 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004962:	f7fc fbd7 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800496a:	f005 fac9 	bl	8009f00 <HAL_Delay>

	  ret = false;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08019f78 	.word	0x08019f78
 8004980:	08019f84 	.word	0x08019f84
 8004984:	08019f8c 	.word	0x08019f8c

08004988 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800499a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d028      	beq.n	80049f6 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049aa:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049c0:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049d0:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049d4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049dc:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80049e6:	d306      	bcc.n	80049f6 <_ZN6Logger8storeLogEf+0x6e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049ee:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049f2:	2200      	movs	r2, #0
 80049f4:	801a      	strh	r2, [r3, #0]
	}
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02a      	beq.n	8004a74 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a24:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a3e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a4e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a52:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a5a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004a64:	d306      	bcc.n	8004a74 <_ZN6Logger9storeLog2Ef+0x72>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a6c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a70:	2200      	movs	r2, #0
 8004a72:	801a      	strh	r2, [r3, #0]
	}
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a8c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a96:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004aa2:	3320      	adds	r3, #32
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ab2:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004abe:	3350      	adds	r3, #80	; 0x50
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ace:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ade:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ae2:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004aea:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	f241 726f 	movw	r2, #5999	; 0x176f
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d906      	bls.n	8004b06 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004afe:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b02:	2200      	movs	r2, #0
 8004b04:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b1e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b28:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b34:	3340      	adds	r3, #64	; 0x40
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b44:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004b50:	3330      	adds	r3, #48	; 0x30
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b60:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b70:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b74:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b7c:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d906      	bls.n	8004b98 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b90:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b94:	2200      	movs	r2, #0
 8004b96:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004bb2:	3380      	adds	r3, #128	; 0x80
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004bce:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	2300      	movs	r3, #0
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	68b8      	ldr	r0, [r7, #8]
 8004bfa:	f7fc fe3f 	bl	800187c <sd_write_array_float>
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af02      	add	r7, sp, #8
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68b8      	ldr	r0, [r7, #8]
 8004c26:	f7fc fe29 	bl	800187c <sd_write_array_float>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af02      	add	r7, sp, #8
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c46:	3380      	adds	r3, #128	; 0x80
 8004c48:	2200      	movs	r2, #0
 8004c4a:	9200      	str	r2, [sp, #0]
 8004c4c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	68b8      	ldr	r0, [r7, #8]
 8004c54:	f7fc fe12 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c5e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c62:	2200      	movs	r2, #0
 8004c64:	9200      	str	r2, [sp, #0]
 8004c66:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	68b8      	ldr	r0, [r7, #8]
 8004c6e:	f7fc fe05 	bl	800187c <sd_write_array_float>
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af02      	add	r7, sp, #8
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c92:	2200      	movs	r2, #0
 8004c94:	9200      	str	r2, [sp, #0]
 8004c96:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	68b8      	ldr	r0, [r7, #8]
 8004c9e:	f7fc fded 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ca8:	33c0      	adds	r3, #192	; 0xc0
 8004caa:	2200      	movs	r2, #0
 8004cac:	9200      	str	r2, [sp, #0]
 8004cae:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f7fc fde1 	bl	800187c <sd_write_array_float>
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004cd6:	3380      	adds	r3, #128	; 0x80
 8004cd8:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f7fc fe32 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004cea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004cee:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	68b8      	ldr	r0, [r7, #8]
 8004cf6:	f7fc fe27 	bl	8001948 <sd_read_array_float>
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004d02:	b480      	push	{r7}
 8004d04:	b08b      	sub	sp, #44	; 0x2c
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004d10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d20:	3340      	adds	r3, #64	; 0x40
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d009      	beq.n	8004d40 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	617b      	str	r3, [r7, #20]
		log = 0;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	e7f1      	b.n	8004d24 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d46:	33c0      	adds	r3, #192	; 0xc0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d54:	3340      	adds	r3, #64	; 0x40
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d009      	beq.n	8004d74 <_ZN6Logger10resetLogs2Ev+0x72>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	e7f1      	b.n	8004d58 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d7a:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004d7e:	2200      	movs	r2, #0
 8004d80:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d88:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d96:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	801a      	strh	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	372c      	adds	r7, #44	; 0x2c
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004db8:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dc6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004dca:	2200      	movs	r2, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dd4:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004dd8:	2200      	movs	r2, #0
 8004dda:	801a      	strh	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004df6:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004e04:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004e08:	2200      	movs	r2, #0
 8004e0a:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004e12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004e34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	805a      	strh	r2, [r3, #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <_ZN5Motor4initEv>:

void Motor::init()
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004e74:	2108      	movs	r1, #8
 8004e76:	4805      	ldr	r0, [pc, #20]	; (8004e8c <_ZN5Motor4initEv+0x20>)
 8004e78:	f00a f9f2 	bl	800f260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004e7c:	210c      	movs	r1, #12
 8004e7e:	4803      	ldr	r0, [pc, #12]	; (8004e8c <_ZN5Motor4initEv+0x20>)
 8004e80:	f00a f9ee 	bl	800f260 <HAL_TIM_PWM_Start>

}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	2004a650 	.word	0x2004a650

08004e90 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da0d      	bge.n	8004ebe <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ea8:	481f      	ldr	r0, [pc, #124]	; (8004f28 <_ZN5Motor9motorCtrlEv+0x98>)
 8004eaa:	f006 fabf 	bl	800b42c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	425b      	negs	r3, r3
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	81fb      	strh	r3, [r7, #14]
 8004ebc:	e00a      	b.n	8004ed4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ec4:	4818      	ldr	r0, [pc, #96]	; (8004f28 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ec6:	f006 fab1 	bl	800b42c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da0d      	bge.n	8004efa <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ee4:	4810      	ldr	r0, [pc, #64]	; (8004f28 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ee6:	f006 faa1 	bl	800b42c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	81bb      	strh	r3, [r7, #12]
 8004ef8:	e00a      	b.n	8004f10 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004efa:	2200      	movs	r2, #0
 8004efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f00:	4809      	ldr	r0, [pc, #36]	; (8004f28 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f02:	f006 fa93 	bl	800b42c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004f10:	89fa      	ldrh	r2, [r7, #14]
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004f18:	89ba      	ldrh	r2, [r7, #12]
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40020c00 	.word	0x40020c00
 8004f2c:	2004a650 	.word	0x2004a650

08004f30 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6178      	str	r0, [r7, #20]
 8004f38:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f3c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	4b30      	ldr	r3, [pc, #192]	; (8005008 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f4a:	f7fb fdfd 	bl	8000b48 <__aeabi_dcmpgt>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <_ZN5Motor8setRatioEdd+0x30>
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	4c2b      	ldr	r4, [pc, #172]	; (8005008 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004f5e:	e00e      	b.n	8004f7e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <_ZN5Motor8setRatioEdd+0xdc>)
 8004f66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f6a:	f7fb fdcf 	bl	8000b0c <__aeabi_dcmplt>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <_ZN5Motor8setRatioEdd+0x4e>
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	4c24      	ldr	r4, [pc, #144]	; (800500c <_ZN5Motor8setRatioEdd+0xdc>)
 8004f7a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f88:	f7fb fdde 	bl	8000b48 <__aeabi_dcmpgt>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <_ZN5Motor8setRatioEdd+0x6e>
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	4c1c      	ldr	r4, [pc, #112]	; (8005008 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f98:	e9c7 3400 	strd	r3, r4, [r7]
 8004f9c:	e00e      	b.n	8004fbc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <_ZN5Motor8setRatioEdd+0xdc>)
 8004fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa8:	f7fb fdb0 	bl	8000b0c <__aeabi_dcmplt>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <_ZN5Motor8setRatioEdd+0x8c>
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	4c15      	ldr	r4, [pc, #84]	; (800500c <_ZN5Motor8setRatioEdd+0xdc>)
 8004fb8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <_ZN5Motor8setRatioEdd+0xe0>)
 8004fc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fc6:	f7fb fb2f 	bl	8000628 <__aeabi_dmul>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	460c      	mov	r4, r1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	f7fb fdd9 	bl	8000b88 <__aeabi_d2iz>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	b21a      	sxth	r2, r3
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <_ZN5Motor8setRatioEdd+0xe0>)
 8004fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fe8:	f7fb fb1e 	bl	8000628 <__aeabi_dmul>
 8004fec:	4603      	mov	r3, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	f7fb fdc8 	bl	8000b88 <__aeabi_d2iz>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	b21a      	sxth	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	805a      	strh	r2, [r3, #2]

}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}
 8005008:	3ff00000 	.word	0x3ff00000
 800500c:	bff00000 	.word	0xbff00000
 8005010:	409c2000 	.word	0x409c2000

08005014 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8005014:	b490      	push	{r4, r7}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	f04f 0400 	mov.w	r4, #0
 800503a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	f04f 0400 	mov.w	r4, #0
 8005048:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	f04f 0400 	mov.w	r4, #0
 8005056:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	f04f 0400 	mov.w	r4, #0
 8005064:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bc90      	pop	{r4, r7}
 8005084:	4770      	bx	lr
	...

08005088 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fc feba 	bl	8001e10 <_ZN3IMU8getOmegaEv>
 800509c:	ee10 3a10 	vmov	r3, s0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fb fa69 	bl	8000578 <__aeabi_f2d>
 80050a6:	4603      	mov	r3, r0
 80050a8:	460c      	mov	r4, r1
 80050aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fc faf8 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80050b8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80050bc:	a376      	add	r3, pc, #472	; (adr r3, 8005298 <_ZN8Odometry12calcPotitionEv+0x210>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050c6:	f7fb faaf 	bl	8000628 <__aeabi_dmul>
 80050ca:	4603      	mov	r3, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7fb fa4c 	bl	8000578 <__aeabi_f2d>
 80050e0:	4682      	mov	sl, r0
 80050e2:	468b      	mov	fp, r1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050f8:	f7fb fbc0 	bl	800087c <__aeabi_ddiv>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4640      	mov	r0, r8
 8005102:	4649      	mov	r1, r9
 8005104:	f7fb f8da 	bl	80002bc <__adddf3>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	ec43 2b17 	vmov	d7, r2, r3
 8005110:	eeb0 0a47 	vmov.f32	s0, s14
 8005114:	eef0 0a67 	vmov.f32	s1, s15
 8005118:	f00f fbe6 	bl	80148e8 <cos>
 800511c:	ec53 2b10 	vmov	r2, r3, d0
 8005120:	4650      	mov	r0, sl
 8005122:	4659      	mov	r1, fp
 8005124:	f7fb fa80 	bl	8000628 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f8c4 	bl	80002bc <__adddf3>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7fb fa17 	bl	8000578 <__aeabi_f2d>
 800514a:	4682      	mov	sl, r0
 800514c:	468b      	mov	fp, r1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005162:	f7fb fb8b 	bl	800087c <__aeabi_ddiv>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	f7fb f8a5 	bl	80002bc <__adddf3>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	ec43 2b17 	vmov	d7, r2, r3
 800517a:	eeb0 0a47 	vmov.f32	s0, s14
 800517e:	eef0 0a67 	vmov.f32	s1, s15
 8005182:	f00f fbf5 	bl	8014970 <sin>
 8005186:	ec53 2b10 	vmov	r2, r3, d0
 800518a:	4650      	mov	r0, sl
 800518c:	4659      	mov	r1, fp
 800518e:	f7fb fa4b 	bl	8000628 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb f88f 	bl	80002bc <__adddf3>
 800519e:	4603      	mov	r3, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80051b4:	461a      	mov	r2, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	f7fb f880 	bl	80002bc <__adddf3>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	ed93 7b08 	vldr	d7, [r3, #32]
 80051d2:	eeb0 0a47 	vmov.f32	s0, s14
 80051d6:	eef0 0a67 	vmov.f32	s1, s15
 80051da:	f00f fb85 	bl	80148e8 <cos>
 80051de:	ec51 0b10 	vmov	r0, r1, d0
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	4b28      	ldr	r3, [pc, #160]	; (8005288 <_ZN8Odometry12calcPotitionEv+0x200>)
 80051e8:	f7fb fa1e 	bl	8000628 <__aeabi_dmul>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4620      	mov	r0, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	f7fb f862 	bl	80002bc <__adddf3>
 80051f8:	4603      	mov	r3, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	ed93 7b08 	vldr	d7, [r3, #32]
 800520e:	eeb0 0a47 	vmov.f32	s0, s14
 8005212:	eef0 0a67 	vmov.f32	s1, s15
 8005216:	f00f fbab 	bl	8014970 <sin>
 800521a:	ec51 0b10 	vmov	r0, r1, d0
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	4b19      	ldr	r3, [pc, #100]	; (8005288 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005224:	f7fb fa00 	bl	8000628 <__aeabi_dmul>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb f844 	bl	80002bc <__adddf3>
 8005234:	4603      	mov	r3, r0
 8005236:	460c      	mov	r4, r1
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005244:	4618      	mov	r0, r3
 8005246:	4621      	mov	r1, r4
 8005248:	f7fb fce6 	bl	8000c18 <__aeabi_d2f>
 800524c:	4602      	mov	r2, r0
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005250:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005258:	4618      	mov	r0, r3
 800525a:	4621      	mov	r1, r4
 800525c:	f7fb fcdc 	bl	8000c18 <__aeabi_d2f>
 8005260:	4602      	mov	r2, r0
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005264:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800526c:	4618      	mov	r0, r3
 800526e:	4621      	mov	r1, r4
 8005270:	f7fb fcd2 	bl	8000c18 <__aeabi_d2f>
 8005274:	4602      	mov	r2, r0
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005278:	601a      	str	r2, [r3, #0]
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005284:	f3af 8000 	nop.w
 8005288:	405b8000 	.word	0x405b8000
 800528c:	2000027c 	.word	0x2000027c
 8005290:	20000280 	.word	0x20000280
 8005294:	20000284 	.word	0x20000284
 8005298:	d2f1a9fc 	.word	0xd2f1a9fc
 800529c:	3f50624d 	.word	0x3f50624d

080052a0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	calcPotition();
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff feed 	bl	8005088 <_ZN8Odometry12calcPotitionEv>
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80052b6:	b490      	push	{r4, r7}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
	return theta_;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80052c4:	ec44 3b17 	vmov	d7, r3, r4
}
 80052c8:	eeb0 0a47 	vmov.f32	s0, s14
 80052cc:	eef0 0a67 	vmov.f32	s1, s15
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc90      	pop	{r4, r7}
 80052d6:	4770      	bx	lr

080052d8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80052d8:	b490      	push	{r4, r7}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	f04f 0400 	mov.w	r4, #0
 80052ea:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f04f 0400 	mov.w	r4, #0
 80052f8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bc90      	pop	{r4, r7}
 8005312:	4770      	bx	lr

08005314 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005314:	b490      	push	{r4, r7}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005352:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005356:	2200      	movs	r2, #0
 8005358:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800535a:	4a29      	ldr	r2, [pc, #164]	; (8005400 <_ZN13PathFollowingC1Ev+0xec>)
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005368:	4a25      	ldr	r2, [pc, #148]	; (8005400 <_ZN13PathFollowingC1Ev+0xec>)
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005376:	4a22      	ldr	r2, [pc, #136]	; (8005400 <_ZN13PathFollowingC1Ev+0xec>)
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005384:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <_ZN13PathFollowingC1Ev+0xf0>)
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	f04f 0400 	mov.w	r4, #0
 800538e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005392:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <_ZN13PathFollowingC1Ev+0xf0>)
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80053a0:	4a18      	ldr	r2, [pc, #96]	; (8005404 <_ZN13PathFollowingC1Ev+0xf0>)
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80053ae:	4a15      	ldr	r2, [pc, #84]	; (8005404 <_ZN13PathFollowingC1Ev+0xf0>)
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80053bc:	4a11      	ldr	r2, [pc, #68]	; (8005404 <_ZN13PathFollowingC1Ev+0xf0>)
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	f04f 0400 	mov.w	r4, #0
 80053c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80053ca:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <_ZN13PathFollowingC1Ev+0xf0>)
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	f04f 0400 	mov.w	r4, #0
 80053d4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <_ZN13PathFollowingC1Ev+0xf4>)
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	f04f 0400 	mov.w	r4, #0
 80053e2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80053e6:	4a08      	ldr	r2, [pc, #32]	; (8005408 <_ZN13PathFollowingC1Ev+0xf4>)
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	f04f 0400 	mov.w	r4, #0
 80053f0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc90      	pop	{r4, r7}
 80053fe:	4770      	bx	lr
 8005400:	2004ab50 	.word	0x2004ab50
 8005404:	2004aae0 	.word	0x2004aae0
 8005408:	2004ab40 	.word	0x2004ab40

0800540c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005414:	f001 fd8a 	bl	8006f2c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005418:	f107 0318 	add.w	r3, r7, #24
 800541c:	2201      	movs	r2, #1
 800541e:	4915      	ldr	r1, [pc, #84]	; (8005474 <_ZN13PathFollowing4initEv+0x68>)
 8005420:	4815      	ldr	r0, [pc, #84]	; (8005478 <_ZN13PathFollowing4initEv+0x6c>)
 8005422:	f7fc fad7 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005426:	f107 0310 	add.w	r3, r7, #16
 800542a:	2201      	movs	r2, #1
 800542c:	4913      	ldr	r1, [pc, #76]	; (800547c <_ZN13PathFollowing4initEv+0x70>)
 800542e:	4812      	ldr	r0, [pc, #72]	; (8005478 <_ZN13PathFollowing4initEv+0x6c>)
 8005430:	f7fc fad0 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005434:	f107 0308 	add.w	r3, r7, #8
 8005438:	2201      	movs	r2, #1
 800543a:	4911      	ldr	r1, [pc, #68]	; (8005480 <_ZN13PathFollowing4initEv+0x74>)
 800543c:	480e      	ldr	r0, [pc, #56]	; (8005478 <_ZN13PathFollowing4initEv+0x6c>)
 800543e:	f7fc fac9 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005442:	ed97 7b06 	vldr	d7, [r7, #24]
 8005446:	ed97 6b04 	vldr	d6, [r7, #16]
 800544a:	ed97 5b02 	vldr	d5, [r7, #8]
 800544e:	eeb0 2a45 	vmov.f32	s4, s10
 8005452:	eef0 2a65 	vmov.f32	s5, s11
 8005456:	eeb0 1a46 	vmov.f32	s2, s12
 800545a:	eef0 1a66 	vmov.f32	s3, s13
 800545e:	eeb0 0a47 	vmov.f32	s0, s14
 8005462:	eef0 0a67 	vmov.f32	s1, s15
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f80c 	bl	8005484 <_ZN13PathFollowing7setGainEddd>
}
 800546c:	bf00      	nop
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	08019f94 	.word	0x08019f94
 8005478:	08019f9c 	.word	0x08019f9c
 800547c:	08019fa4 	.word	0x08019fa4
 8005480:	08019fac 	.word	0x08019fac

08005484 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005484:	b490      	push	{r4, r7}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	61f8      	str	r0, [r7, #28]
 800548c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005490:	ed87 1b02 	vstr	d1, [r7, #8]
 8005494:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005498:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800549a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800549e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80054a2:	4a07      	ldr	r2, [pc, #28]	; (80054c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80054a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80054a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80054ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80054b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80054b6:	bf00      	nop
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc90      	pop	{r4, r7}
 80054be:	4770      	bx	lr
 80054c0:	2004ab50 	.word	0x2004ab50

080054c4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80054cc:	2088      	movs	r0, #136	; 0x88
 80054ce:	f7fc fde2 	bl	8002096 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80054d2:	2080      	movs	r0, #128	; 0x80
 80054d4:	f7fc fddf 	bl	8002096 <INA260_init>
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80054e8:	2188      	movs	r1, #136	; 0x88
 80054ea:	2002      	movs	r0, #2
 80054ec:	f7fc fd70 	bl	8001fd0 <INA260_read>
 80054f0:	4603      	mov	r3, r0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f82e 	bl	8000554 <__aeabi_i2d>
 80054f8:	a30c      	add	r3, pc, #48	; (adr r3, 800552c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f893 	bl	8000628 <__aeabi_dmul>
 8005502:	4603      	mov	r3, r0
 8005504:	460c      	mov	r4, r1
 8005506:	4618      	mov	r0, r3
 8005508:	4621      	mov	r1, r4
 800550a:	f7fb fb85 	bl	8000c18 <__aeabi_d2f>
 800550e:	4602      	mov	r2, r0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4a03      	ldr	r2, [pc, #12]	; (8005528 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bd90      	pop	{r4, r7, pc}
 8005524:	f3af 8000 	nop.w
 8005528:	20000288 	.word	0x20000288
 800552c:	47ae147b 	.word	0x47ae147b
 8005530:	3f547ae1 	.word	0x3f547ae1

08005534 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	ee07 3a90 	vmov	s15, r3

}
 8005544:	eeb0 0a67 	vmov.f32	s0, s15
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005560:	2102      	movs	r1, #2
 8005562:	4822      	ldr	r0, [pc, #136]	; (80055ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005564:	f005 ff4a 	bl	800b3fc <HAL_GPIO_ReadPin>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf0c      	ite	eq
 800556e:	2301      	moveq	r3, #1
 8005570:	2300      	movne	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005580:	2108      	movs	r1, #8
 8005582:	481a      	ldr	r0, [pc, #104]	; (80055ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005584:	f005 ff3a 	bl	800b3fc <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005598:	89fb      	ldrh	r3, [r7, #14]
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80055a0:	2110      	movs	r1, #16
 80055a2:	4812      	ldr	r0, [pc, #72]	; (80055ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80055a4:	f005 ff2a 	bl	800b3fc <HAL_GPIO_ReadPin>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	f043 0304 	orr.w	r3, r3, #4
 80055be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	480a      	ldr	r0, [pc, #40]	; (80055ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80055c4:	f005 ff1a 	bl	800b3fc <HAL_GPIO_ReadPin>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf0c      	ite	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	2300      	movne	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80055d8:	89fb      	ldrh	r3, [r7, #14]
 80055da:	f043 0308 	orr.w	r3, r3, #8
 80055de:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80055e0:	89fb      	ldrh	r3, [r7, #14]

}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40020c00 	.word	0x40020c00

080055f0 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	709a      	strb	r2, [r3, #2]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	70da      	strb	r2, [r3, #3]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	809a      	strh	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	80da      	strh	r2, [r3, #6]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	721a      	strb	r2, [r3, #8]
{

}
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7a1b      	ldrb	r3, [r3, #8]
 8005638:	f083 0301 	eor.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80ea 	beq.w	8005818 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 8005644:	4b76      	ldr	r3, [pc, #472]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f083 0301 	eor.w	r3, r3, #1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d032      	beq.n	80056b8 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 8005652:	2104      	movs	r1, #4
 8005654:	4873      	ldr	r0, [pc, #460]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005656:	f005 fed1 	bl	800b3fc <HAL_GPIO_ReadPin>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <_ZN10SideSensor12updateStatusEv+0x48>
 8005660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005664:	4870      	ldr	r0, [pc, #448]	; (8005828 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005666:	f005 fec9 	bl	800b3fc <HAL_GPIO_ReadPin>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <_ZN10SideSensor12updateStatusEv+0x48>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <_ZN10SideSensor12updateStatusEv+0x4a>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d006      	beq.n	8005688 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 800567a:	4b6c      	ldr	r3, [pc, #432]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	4b6a      	ldr	r3, [pc, #424]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	e002      	b.n	800568e <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005688:	4b68      	ldr	r3, [pc, #416]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 800568a:	2200      	movs	r2, #0
 800568c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800568e:	4b67      	ldr	r3, [pc, #412]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	2b04      	cmp	r3, #4
 8005694:	d945      	bls.n	8005722 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 80056aa:	4b5d      	ldr	r3, [pc, #372]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80056b0:	4b5e      	ldr	r3, [pc, #376]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	e034      	b.n	8005722 <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 80056b8:	4b59      	ldr	r3, [pc, #356]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d030      	beq.n	8005722 <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 80056c0:	2104      	movs	r1, #4
 80056c2:	4858      	ldr	r0, [pc, #352]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80056c4:	f005 fe9a 	bl	800b3fc <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 80056d8:	4b54      	ldr	r3, [pc, #336]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	4b52      	ldr	r3, [pc, #328]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	e002      	b.n	80056ec <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 80056e6:	4b51      	ldr	r3, [pc, #324]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80056ec:	4b4f      	ldr	r3, [pc, #316]	; (800582c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d916      	bls.n	8005722 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	f083 0301 	eor.w	r3, r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005708:	4b45      	ldr	r3, [pc, #276]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	88db      	ldrh	r3, [r3, #6]
 8005712:	3301      	adds	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	88da      	ldrh	r2, [r3, #6]
 800571e:	4b44      	ldr	r3, [pc, #272]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x204>)
 8005720:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005722:	4b44      	ldr	r3, [pc, #272]	; (8005834 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	f083 0301 	eor.w	r3, r3, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d031      	beq.n	8005794 <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 8005730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005734:	483c      	ldr	r0, [pc, #240]	; (8005828 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005736:	f005 fe61 	bl	800b3fc <HAL_GPIO_ReadPin>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d108      	bne.n	8005752 <_ZN10SideSensor12updateStatusEv+0x126>
 8005740:	2104      	movs	r1, #4
 8005742:	4838      	ldr	r0, [pc, #224]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005744:	f005 fe5a 	bl	800b3fc <HAL_GPIO_ReadPin>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <_ZN10SideSensor12updateStatusEv+0x126>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <_ZN10SideSensor12updateStatusEv+0x128>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 8005758:	4b37      	ldr	r3, [pc, #220]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	3301      	adds	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	4b35      	ldr	r3, [pc, #212]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	e002      	b.n	800576c <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 8005766:	4b34      	ldr	r3, [pc, #208]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005768:	2200      	movs	r2, #0
 800576a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800576c:	4b32      	ldr	r3, [pc, #200]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d90f      	bls.n	8005794 <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <_ZN10SideSensor12updateStatusEv+0x208>)
 800578a:	2201      	movs	r2, #1
 800578c:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005790:	2200      	movs	r2, #0
 8005792:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005794:	4b27      	ldr	r3, [pc, #156]	; (8005834 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d031      	beq.n	8005800 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 800579c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a0:	4821      	ldr	r0, [pc, #132]	; (8005828 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80057a2:	f005 fe2b 	bl	800b3fc <HAL_GPIO_ReadPin>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 80057b6:	4b20      	ldr	r3, [pc, #128]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	e002      	b.n	80057ca <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 80057c4:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d916      	bls.n	8005800 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	f083 0302 	eor.w	r3, r3, #2
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80057e6:	4b13      	ldr	r3, [pc, #76]	; (8005834 <_ZN10SideSensor12updateStatusEv+0x208>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	889b      	ldrh	r3, [r3, #4]
 80057f0:	3301      	adds	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	889a      	ldrh	r2, [r3, #4]
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <_ZN10SideSensor12updateStatusEv+0x210>)
 80057fe:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <_ZN10SideSensor12updateStatusEv+0x214>)
 8005806:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	789a      	ldrb	r2, [r3, #2]
 800580c:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <_ZN10SideSensor12updateStatusEv+0x218>)
 800580e:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	78da      	ldrb	r2, [r3, #3]
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <_ZN10SideSensor12updateStatusEv+0x21c>)
 8005816:	701a      	strb	r2, [r3, #0]
	}

}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000294 	.word	0x20000294
 8005824:	40021000 	.word	0x40021000
 8005828:	40020c00 	.word	0x40020c00
 800582c:	20000298 	.word	0x20000298
 8005830:	20000292 	.word	0x20000292
 8005834:	20000295 	.word	0x20000295
 8005838:	20000296 	.word	0x20000296
 800583c:	20000290 	.word	0x20000290
 8005840:	2000028c 	.word	0x2000028c
 8005844:	2000028e 	.word	0x2000028e
 8005848:	2000028f 	.word	0x2000028f

0800584c <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	789b      	ldrb	r3, [r3, #2]
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	88db      	ldrh	r3, [r3, #6]
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	80da      	strh	r2, [r3, #6]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	721a      	strb	r2, [r3, #8]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	721a      	strb	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7a1b      	ldrb	r3, [r3, #8]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3308      	adds	r3, #8
 80058f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f010 f872 	bl	80159e8 <memset>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590a:	811a      	strh	r2, [r3, #8]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005912:	815a      	strh	r2, [r3, #10]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800591a:	819a      	strh	r2, [r3, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005922:	81da      	strh	r2, [r3, #14]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	821a      	strh	r2, [r3, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005932:	825a      	strh	r2, [r3, #18]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	829a      	strh	r2, [r3, #20]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	82da      	strh	r2, [r3, #22]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	831a      	strh	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	835a      	strh	r2, [r3, #26]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	839a      	strh	r2, [r3, #28]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	83da      	strh	r2, [r3, #30]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	841a      	strh	r2, [r3, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005964:	845a      	strh	r2, [r3, #34]	; 0x22
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	849a      	strh	r2, [r3, #36]	; 0x24
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005972:	84da      	strh	r2, [r3, #38]	; 0x26
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	851a      	strh	r2, [r3, #40]	; 0x28
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005980:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005996:	861a      	strh	r2, [r3, #48]	; 0x30
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	865a      	strh	r2, [r3, #50]	; 0x32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	869a      	strh	r2, [r3, #52]	; 0x34
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b2:	871a      	strh	r2, [r3, #56]	; 0x38
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	879a      	strh	r2, [r3, #60]	; 0x3c
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a36:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a8e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aba:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b0a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b14:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b26:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b30:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b3a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b66:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b70:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b7a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b8c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bbe:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc8:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bda:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bec:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c0e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c18:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c32:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c44:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	615a      	str	r2, [r3, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	619a      	str	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	61da      	str	r2, [r3, #28]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	621a      	str	r2, [r3, #32]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	f107 020c 	add.w	r2, r7, #12
 8005d20:	f107 0110 	add.w	r1, r7, #16
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fb fcab 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005d2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d3e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005d42:	6978      	ldr	r0, [r7, #20]
 8005d44:	f7fa fc18 	bl	8000578 <__aeabi_f2d>
 8005d48:	a30e      	add	r3, pc, #56	; (adr r3, 8005d84 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fc6b 	bl	8000628 <__aeabi_dmul>
 8005d52:	4603      	mov	r3, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	4618      	mov	r0, r3
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f7fa ff5d 	bl	8000c18 <__aeabi_d2f>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005d6a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	ee07 3a90 	vmov	s15, r3
}
 8005d74:	eeb0 0a67 	vmov.f32	s0, s15
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd90      	pop	{r4, r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000029c 	.word	0x2000029c
 8005d84:	1ab1d998 	.word	0x1ab1d998
 8005d88:	3f7830b5 	.word	0x3f7830b5
 8005d8c:	00000000 	.word	0x00000000

08005d90 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	ed93 7a00 	vldr	s14, [r3]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005db6:	4b48      	ldr	r3, [pc, #288]	; (8005ed8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8005dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fa fbcb 	bl	8000578 <__aeabi_f2d>
 8005de2:	4604      	mov	r4, r0
 8005de4:	460d      	mov	r5, r1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	ed93 7a06 	vldr	s14, [r3, #24]
 8005dec:	edd7 7a05 	vldr	s15, [r7, #20]
 8005df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df4:	ee17 0a90 	vmov	r0, s15
 8005df8:	f7fa fbbe 	bl	8000578 <__aeabi_f2d>
 8005dfc:	a334      	add	r3, pc, #208	; (adr r3, 8005ed0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f7fa fc11 	bl	8000628 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fa55 	bl	80002bc <__adddf3>
 8005e12:	4603      	mov	r3, r0
 8005e14:	460c      	mov	r4, r1
 8005e16:	4618      	mov	r0, r3
 8005e18:	4621      	mov	r1, r4
 8005e1a:	f7fa fefd 	bl	8000c18 <__aeabi_d2f>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e22:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	ed93 7a05 	vldr	s14, [r3, #20]
 8005e2a:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005e2c:	edd3 7a00 	vldr	s15, [r3]
 8005e30:	edd7 6a05 	vldr	s13, [r7, #20]
 8005e34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3c:	ee17 0a90 	vmov	r0, s15
 8005e40:	f7fa fb9a 	bl	8000578 <__aeabi_f2d>
 8005e44:	a322      	add	r3, pc, #136	; (adr r3, 8005ed0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fd17 	bl	800087c <__aeabi_ddiv>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	4618      	mov	r0, r3
 8005e54:	4621      	mov	r1, r4
 8005e56:	f7fa fedf 	bl	8000c18 <__aeabi_d2f>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005e5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e62:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e6c:	edd3 7a00 	vldr	s15, [r3]
 8005e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e74:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e8a:	ee17 0a90 	vmov	r0, s15
 8005e8e:	f7fa fb73 	bl	8000578 <__aeabi_f2d>
 8005e92:	4605      	mov	r5, r0
 8005e94:	460e      	mov	r6, r1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea4:	ee17 0a90 	vmov	r0, s15
 8005ea8:	f7fa fb66 	bl	8000578 <__aeabi_f2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	ec43 2b11 	vmov	d1, r2, r3
 8005eb4:	ec46 5b10 	vmov	d0, r5, r6
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f7ff f839 	bl	8004f30 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005ebe:	4a07      	ldr	r2, [pc, #28]	; (8005edc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ed4:	3f50624d 	.word	0x3f50624d
 8005ed8:	200002a4 	.word	0x200002a4
 8005edc:	200002a0 	.word	0x200002a0

08005ee0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005eec:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f14:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f40:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	615a      	str	r2, [r3, #20]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f6e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f72:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff feb7 	bl	8005d10 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff feef 	bl	8005d90 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006010 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ff8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006010 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe ff97 	bl	8004f30 <_ZN5Motor8setRatioEdd>

}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w
	...

08006018 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	ee07 3a90 	vmov	s15, r3
}
 8006028:	eeb0 0a67 	vmov.f32	s0, s15
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d10e      	bne.n	8006068 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 800604a:	f001 fe0f 	bl	8007c6c <cppFlip100ns>

		tim7_timer++;
 800604e:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3301      	adds	r3, #1
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006056:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006058:	4b1a      	ldr	r3, [pc, #104]	; (80060c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d902      	bls.n	8006068 <HAL_TIM_PeriodElapsedCallback+0x30>
 8006062:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10e      	bne.n	8006090 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8006072:	f001 fdcb 	bl	8007c0c <cppFlip1ms>

		tim6_timer++;
 8006076:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800607e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8006080:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d902      	bls.n	8006090 <HAL_TIM_PeriodElapsedCallback+0x58>
 800608a:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800609a:	f001 fdf1 	bl	8007c80 <cppFlip10ms>

		tim13_timer++;
 800609e:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80060a6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d902      	bls.n	80060b8 <HAL_TIM_PeriodElapsedCallback+0x80>
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
	}

}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40001400 	.word	0x40001400
 80060c4:	2004a804 	.word	0x2004a804
 80060c8:	0001869f 	.word	0x0001869f
 80060cc:	40001000 	.word	0x40001000
 80060d0:	2004a7c0 	.word	0x2004a7c0
 80060d4:	40001c00 	.word	0x40001c00
 80060d8:	2004a808 	.word	0x2004a808

080060dc <init>:

void init()
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80060e0:	2201      	movs	r2, #1
 80060e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060e6:	4808      	ldr	r0, [pc, #32]	; (8006108 <init+0x2c>)
 80060e8:	f005 f9a0 	bl	800b42c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80060ec:	4807      	ldr	r0, [pc, #28]	; (800610c <init+0x30>)
 80060ee:	f009 f868 	bl	800f1c2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80060f2:	4807      	ldr	r0, [pc, #28]	; (8006110 <init+0x34>)
 80060f4:	f009 f865 	bl	800f1c2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80060f8:	4806      	ldr	r0, [pc, #24]	; (8006114 <init+0x38>)
 80060fa:	f009 f862 	bl	800f1c2 <HAL_TIM_Base_Start_IT>

	cppInit();
 80060fe:	f001 fce3 	bl	8007ac8 <cppInit>

	//path_following_initialize();

}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40021000 	.word	0x40021000
 800610c:	2004a8ec 	.word	0x2004a8ec
 8006110:	2004aa90 	.word	0x2004aa90
 8006114:	2004a80c 	.word	0x2004a80c

08006118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800611c:	f003 fe7e 	bl	8009e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006120:	f000 f82a 	bl	8006178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006124:	f000 fdbc 	bl	8006ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006128:	f000 fd8a 	bl	8006c40 <MX_DMA_Init>
  MX_I2C2_Init();
 800612c:	f000 f9e8 	bl	8006500 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006130:	f000 fa14 	bl	800655c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8006134:	f000 fa32 	bl	800659c <MX_SPI2_Init>
  MX_TIM1_Init();
 8006138:	f000 fa66 	bl	8006608 <MX_TIM1_Init>
  MX_TIM4_Init();
 800613c:	f000 fb70 	bl	8006820 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006140:	f000 fc3c 	bl	80069bc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8006144:	f000 fd52 	bl	8006bec <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006148:	f00b f80e 	bl	8011168 <MX_FATFS_Init>
  MX_TIM6_Init();
 800614c:	f000 fbcc 	bl	80068e8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006150:	f000 f9a8 	bl	80064a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8006154:	f000 fb00 	bl	8006758 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006158:	f000 fc88 	bl	8006a6c <MX_TIM10_Init>
  MX_TIM11_Init();
 800615c:	f000 fcd4 	bl	8006b08 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006160:	f000 f898 	bl	8006294 <MX_ADC2_Init>
  MX_TIM7_Init();
 8006164:	f000 fbf6 	bl	8006954 <MX_TIM7_Init>
  MX_TIM13_Init();
 8006168:	f000 fd1c 	bl	8006ba4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800616c:	f7ff ffb6 	bl	80060dc <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006170:	f001 fda6 	bl	8007cc0 <cppLoop>
 8006174:	e7fc      	b.n	8006170 <main+0x58>
	...

08006178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b0a4      	sub	sp, #144	; 0x90
 800617c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800617e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006182:	2234      	movs	r2, #52	; 0x34
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f00f fc2e 	bl	80159e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800618c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800619c:	f107 030c 	add.w	r3, r7, #12
 80061a0:	223c      	movs	r2, #60	; 0x3c
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f00f fc1f 	bl	80159e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	4b37      	ldr	r3, [pc, #220]	; (800628c <SystemClock_Config+0x114>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	4a36      	ldr	r2, [pc, #216]	; (800628c <SystemClock_Config+0x114>)
 80061b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ba:	4b34      	ldr	r3, [pc, #208]	; (800628c <SystemClock_Config+0x114>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	4b31      	ldr	r3, [pc, #196]	; (8006290 <SystemClock_Config+0x118>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a30      	ldr	r2, [pc, #192]	; (8006290 <SystemClock_Config+0x118>)
 80061d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4b2e      	ldr	r3, [pc, #184]	; (8006290 <SystemClock_Config+0x118>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061ec:	2302      	movs	r3, #2
 80061ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80061f6:	2308      	movs	r3, #8
 80061f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80061fa:	23b4      	movs	r3, #180	; 0xb4
 80061fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006200:	2302      	movs	r3, #2
 8006202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006206:	2308      	movs	r3, #8
 8006208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800620c:	2302      	movs	r3, #2
 800620e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006212:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006216:	4618      	mov	r0, r3
 8006218:	f006 fd2a 	bl	800cc70 <HAL_RCC_OscConfig>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006222:	f000 fe7f 	bl	8006f24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006226:	f006 f8a5 	bl	800c374 <HAL_PWREx_EnableOverDrive>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006230:	f000 fe78 	bl	8006f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006234:	230f      	movs	r3, #15
 8006236:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006238:	2302      	movs	r3, #2
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800623c:	2300      	movs	r3, #0
 800623e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006240:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006244:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800624a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800624c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006250:	2105      	movs	r1, #5
 8006252:	4618      	mov	r0, r3
 8006254:	f006 f8de 	bl	800c414 <HAL_RCC_ClockConfig>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800625e:	f000 fe61 	bl	8006f24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8006262:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006266:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006268:	2300      	movs	r3, #0
 800626a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800626c:	2300      	movs	r3, #0
 800626e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006270:	f107 030c 	add.w	r3, r7, #12
 8006274:	4618      	mov	r0, r3
 8006276:	f006 fabd 	bl	800c7f4 <HAL_RCCEx_PeriphCLKConfig>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006280:	f000 fe50 	bl	8006f24 <Error_Handler>
  }
}
 8006284:	bf00      	nop
 8006286:	3790      	adds	r7, #144	; 0x90
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	40007000 	.word	0x40007000

08006294 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800629a:	463b      	mov	r3, r7
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80062a6:	4b7c      	ldr	r3, [pc, #496]	; (8006498 <MX_ADC2_Init+0x204>)
 80062a8:	4a7c      	ldr	r2, [pc, #496]	; (800649c <MX_ADC2_Init+0x208>)
 80062aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80062ac:	4b7a      	ldr	r3, [pc, #488]	; (8006498 <MX_ADC2_Init+0x204>)
 80062ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80062b4:	4b78      	ldr	r3, [pc, #480]	; (8006498 <MX_ADC2_Init+0x204>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80062ba:	4b77      	ldr	r3, [pc, #476]	; (8006498 <MX_ADC2_Init+0x204>)
 80062bc:	2201      	movs	r2, #1
 80062be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80062c0:	4b75      	ldr	r3, [pc, #468]	; (8006498 <MX_ADC2_Init+0x204>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80062c6:	4b74      	ldr	r3, [pc, #464]	; (8006498 <MX_ADC2_Init+0x204>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80062ce:	4b72      	ldr	r3, [pc, #456]	; (8006498 <MX_ADC2_Init+0x204>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80062d4:	4b70      	ldr	r3, [pc, #448]	; (8006498 <MX_ADC2_Init+0x204>)
 80062d6:	4a72      	ldr	r2, [pc, #456]	; (80064a0 <MX_ADC2_Init+0x20c>)
 80062d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80062da:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <MX_ADC2_Init+0x204>)
 80062dc:	2200      	movs	r2, #0
 80062de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80062e0:	4b6d      	ldr	r3, [pc, #436]	; (8006498 <MX_ADC2_Init+0x204>)
 80062e2:	220e      	movs	r2, #14
 80062e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80062e6:	4b6c      	ldr	r3, [pc, #432]	; (8006498 <MX_ADC2_Init+0x204>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80062ee:	4b6a      	ldr	r3, [pc, #424]	; (8006498 <MX_ADC2_Init+0x204>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80062f4:	4868      	ldr	r0, [pc, #416]	; (8006498 <MX_ADC2_Init+0x204>)
 80062f6:	f003 fe25 	bl	8009f44 <HAL_ADC_Init>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006300:	f000 fe10 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006304:	230a      	movs	r3, #10
 8006306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006308:	2301      	movs	r3, #1
 800630a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800630c:	2306      	movs	r3, #6
 800630e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006310:	463b      	mov	r3, r7
 8006312:	4619      	mov	r1, r3
 8006314:	4860      	ldr	r0, [pc, #384]	; (8006498 <MX_ADC2_Init+0x204>)
 8006316:	f003 ff69 	bl	800a1ec <HAL_ADC_ConfigChannel>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006320:	f000 fe00 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006324:	230b      	movs	r3, #11
 8006326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006328:	2302      	movs	r3, #2
 800632a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800632c:	463b      	mov	r3, r7
 800632e:	4619      	mov	r1, r3
 8006330:	4859      	ldr	r0, [pc, #356]	; (8006498 <MX_ADC2_Init+0x204>)
 8006332:	f003 ff5b 	bl	800a1ec <HAL_ADC_ConfigChannel>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800633c:	f000 fdf2 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006340:	230c      	movs	r3, #12
 8006342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006344:	2303      	movs	r3, #3
 8006346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006348:	463b      	mov	r3, r7
 800634a:	4619      	mov	r1, r3
 800634c:	4852      	ldr	r0, [pc, #328]	; (8006498 <MX_ADC2_Init+0x204>)
 800634e:	f003 ff4d 	bl	800a1ec <HAL_ADC_ConfigChannel>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006358:	f000 fde4 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800635c:	230d      	movs	r3, #13
 800635e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006360:	2304      	movs	r3, #4
 8006362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006364:	463b      	mov	r3, r7
 8006366:	4619      	mov	r1, r3
 8006368:	484b      	ldr	r0, [pc, #300]	; (8006498 <MX_ADC2_Init+0x204>)
 800636a:	f003 ff3f 	bl	800a1ec <HAL_ADC_ConfigChannel>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006374:	f000 fdd6 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006378:	2300      	movs	r3, #0
 800637a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800637c:	2305      	movs	r3, #5
 800637e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006380:	463b      	mov	r3, r7
 8006382:	4619      	mov	r1, r3
 8006384:	4844      	ldr	r0, [pc, #272]	; (8006498 <MX_ADC2_Init+0x204>)
 8006386:	f003 ff31 	bl	800a1ec <HAL_ADC_ConfigChannel>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006390:	f000 fdc8 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006394:	2301      	movs	r3, #1
 8006396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006398:	2306      	movs	r3, #6
 800639a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800639c:	463b      	mov	r3, r7
 800639e:	4619      	mov	r1, r3
 80063a0:	483d      	ldr	r0, [pc, #244]	; (8006498 <MX_ADC2_Init+0x204>)
 80063a2:	f003 ff23 	bl	800a1ec <HAL_ADC_ConfigChannel>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80063ac:	f000 fdba 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80063b0:	2302      	movs	r3, #2
 80063b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80063b4:	2307      	movs	r3, #7
 80063b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063b8:	463b      	mov	r3, r7
 80063ba:	4619      	mov	r1, r3
 80063bc:	4836      	ldr	r0, [pc, #216]	; (8006498 <MX_ADC2_Init+0x204>)
 80063be:	f003 ff15 	bl	800a1ec <HAL_ADC_ConfigChannel>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80063c8:	f000 fdac 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80063cc:	2303      	movs	r3, #3
 80063ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80063d0:	2308      	movs	r3, #8
 80063d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063d4:	463b      	mov	r3, r7
 80063d6:	4619      	mov	r1, r3
 80063d8:	482f      	ldr	r0, [pc, #188]	; (8006498 <MX_ADC2_Init+0x204>)
 80063da:	f003 ff07 	bl	800a1ec <HAL_ADC_ConfigChannel>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80063e4:	f000 fd9e 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80063e8:	2304      	movs	r3, #4
 80063ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80063ec:	2309      	movs	r3, #9
 80063ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063f0:	463b      	mov	r3, r7
 80063f2:	4619      	mov	r1, r3
 80063f4:	4828      	ldr	r0, [pc, #160]	; (8006498 <MX_ADC2_Init+0x204>)
 80063f6:	f003 fef9 	bl	800a1ec <HAL_ADC_ConfigChannel>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006400:	f000 fd90 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006404:	2305      	movs	r3, #5
 8006406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006408:	230a      	movs	r3, #10
 800640a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800640c:	463b      	mov	r3, r7
 800640e:	4619      	mov	r1, r3
 8006410:	4821      	ldr	r0, [pc, #132]	; (8006498 <MX_ADC2_Init+0x204>)
 8006412:	f003 feeb 	bl	800a1ec <HAL_ADC_ConfigChannel>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800641c:	f000 fd82 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006420:	2306      	movs	r3, #6
 8006422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006424:	230b      	movs	r3, #11
 8006426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006428:	463b      	mov	r3, r7
 800642a:	4619      	mov	r1, r3
 800642c:	481a      	ldr	r0, [pc, #104]	; (8006498 <MX_ADC2_Init+0x204>)
 800642e:	f003 fedd 	bl	800a1ec <HAL_ADC_ConfigChannel>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006438:	f000 fd74 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800643c:	2307      	movs	r3, #7
 800643e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006440:	230c      	movs	r3, #12
 8006442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006444:	463b      	mov	r3, r7
 8006446:	4619      	mov	r1, r3
 8006448:	4813      	ldr	r0, [pc, #76]	; (8006498 <MX_ADC2_Init+0x204>)
 800644a:	f003 fecf 	bl	800a1ec <HAL_ADC_ConfigChannel>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8006454:	f000 fd66 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006458:	2308      	movs	r3, #8
 800645a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800645c:	230d      	movs	r3, #13
 800645e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006460:	463b      	mov	r3, r7
 8006462:	4619      	mov	r1, r3
 8006464:	480c      	ldr	r0, [pc, #48]	; (8006498 <MX_ADC2_Init+0x204>)
 8006466:	f003 fec1 	bl	800a1ec <HAL_ADC_ConfigChannel>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006470:	f000 fd58 	bl	8006f24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006474:	2309      	movs	r3, #9
 8006476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006478:	230e      	movs	r3, #14
 800647a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800647c:	463b      	mov	r3, r7
 800647e:	4619      	mov	r1, r3
 8006480:	4805      	ldr	r0, [pc, #20]	; (8006498 <MX_ADC2_Init+0x204>)
 8006482:	f003 feb3 	bl	800a1ec <HAL_ADC_ConfigChannel>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800648c:	f000 fd4a 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	2004a690 	.word	0x2004a690
 800649c:	40012100 	.word	0x40012100
 80064a0:	0f000001 	.word	0x0f000001

080064a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064aa:	4a13      	ldr	r2, [pc, #76]	; (80064f8 <MX_I2C1_Init+0x54>)
 80064ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <MX_I2C1_Init+0x58>)
 80064b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80064b4:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064bc:	2200      	movs	r2, #0
 80064be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064dc:	2280      	movs	r2, #128	; 0x80
 80064de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80064e0:	4804      	ldr	r0, [pc, #16]	; (80064f4 <MX_I2C1_Init+0x50>)
 80064e2:	f004 ffbd 	bl	800b460 <HAL_I2C_Init>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80064ec:	f000 fd1a 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80064f0:	bf00      	nop
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	2004a6d8 	.word	0x2004a6d8
 80064f8:	40005400 	.word	0x40005400
 80064fc:	000186a0 	.word	0x000186a0

08006500 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006504:	4b12      	ldr	r3, [pc, #72]	; (8006550 <MX_I2C2_Init+0x50>)
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <MX_I2C2_Init+0x54>)
 8006508:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800650a:	4b11      	ldr	r3, [pc, #68]	; (8006550 <MX_I2C2_Init+0x50>)
 800650c:	4a12      	ldr	r2, [pc, #72]	; (8006558 <MX_I2C2_Init+0x58>)
 800650e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <MX_I2C2_Init+0x50>)
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006516:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <MX_I2C2_Init+0x50>)
 8006518:	2200      	movs	r2, #0
 800651a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <MX_I2C2_Init+0x50>)
 800651e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006522:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006524:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <MX_I2C2_Init+0x50>)
 8006526:	2200      	movs	r2, #0
 8006528:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800652a:	4b09      	ldr	r3, [pc, #36]	; (8006550 <MX_I2C2_Init+0x50>)
 800652c:	2200      	movs	r2, #0
 800652e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <MX_I2C2_Init+0x50>)
 8006532:	2200      	movs	r2, #0
 8006534:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <MX_I2C2_Init+0x50>)
 8006538:	2280      	movs	r2, #128	; 0x80
 800653a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800653c:	4804      	ldr	r0, [pc, #16]	; (8006550 <MX_I2C2_Init+0x50>)
 800653e:	f004 ff8f 	bl	800b460 <HAL_I2C_Init>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006548:	f000 fcec 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}
 8006550:	2004a76c 	.word	0x2004a76c
 8006554:	40005800 	.word	0x40005800
 8006558:	000186a0 	.word	0x000186a0

0800655c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 8006562:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <MX_SDIO_SD_Init+0x3c>)
 8006564:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 8006574:	2200      	movs	r2, #0
 8006576:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 800657a:	2200      	movs	r2, #0
 800657c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 8006580:	2200      	movs	r2, #0
 8006582:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8006584:	4b03      	ldr	r3, [pc, #12]	; (8006594 <MX_SDIO_SD_Init+0x38>)
 8006586:	2202      	movs	r2, #2
 8006588:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	2004a96c 	.word	0x2004a96c
 8006598:	40012c00 	.word	0x40012c00

0800659c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <MX_SPI2_Init+0x64>)
 80065a2:	4a18      	ldr	r2, [pc, #96]	; (8006604 <MX_SPI2_Init+0x68>)
 80065a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80065a6:	4b16      	ldr	r3, [pc, #88]	; (8006600 <MX_SPI2_Init+0x64>)
 80065a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80065ae:	4b14      	ldr	r3, [pc, #80]	; (8006600 <MX_SPI2_Init+0x64>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065b4:	4b12      	ldr	r3, [pc, #72]	; (8006600 <MX_SPI2_Init+0x64>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80065ba:	4b11      	ldr	r3, [pc, #68]	; (8006600 <MX_SPI2_Init+0x64>)
 80065bc:	2202      	movs	r2, #2
 80065be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80065c0:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <MX_SPI2_Init+0x64>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80065c6:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <MX_SPI2_Init+0x64>)
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <MX_SPI2_Init+0x64>)
 80065d0:	2228      	movs	r2, #40	; 0x28
 80065d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <MX_SPI2_Init+0x64>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <MX_SPI2_Init+0x64>)
 80065dc:	2200      	movs	r2, #0
 80065de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <MX_SPI2_Init+0x64>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <MX_SPI2_Init+0x64>)
 80065e8:	220a      	movs	r2, #10
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80065ec:	4804      	ldr	r0, [pc, #16]	; (8006600 <MX_SPI2_Init+0x64>)
 80065ee:	f008 f869 	bl	800e6c4 <HAL_SPI_Init>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80065f8:	f000 fc94 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80065fc:	bf00      	nop
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	2004a5b8 	.word	0x2004a5b8
 8006604:	40003800 	.word	0x40003800

08006608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b09a      	sub	sp, #104	; 0x68
 800660c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800660e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006612:	2224      	movs	r2, #36	; 0x24
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f00f f9e6 	bl	80159e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800661c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006626:	f107 0320 	add.w	r3, r7, #32
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	611a      	str	r2, [r3, #16]
 8006636:	615a      	str	r2, [r3, #20]
 8006638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800663a:	463b      	mov	r3, r7
 800663c:	2220      	movs	r2, #32
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f00f f9d1 	bl	80159e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006646:	4b42      	ldr	r3, [pc, #264]	; (8006750 <MX_TIM1_Init+0x148>)
 8006648:	4a42      	ldr	r2, [pc, #264]	; (8006754 <MX_TIM1_Init+0x14c>)
 800664a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800664c:	4b40      	ldr	r3, [pc, #256]	; (8006750 <MX_TIM1_Init+0x148>)
 800664e:	2200      	movs	r2, #0
 8006650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006652:	4b3f      	ldr	r3, [pc, #252]	; (8006750 <MX_TIM1_Init+0x148>)
 8006654:	2200      	movs	r2, #0
 8006656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006658:	4b3d      	ldr	r3, [pc, #244]	; (8006750 <MX_TIM1_Init+0x148>)
 800665a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800665e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006660:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <MX_TIM1_Init+0x148>)
 8006662:	2200      	movs	r2, #0
 8006664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006666:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <MX_TIM1_Init+0x148>)
 8006668:	2200      	movs	r2, #0
 800666a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800666c:	4b38      	ldr	r3, [pc, #224]	; (8006750 <MX_TIM1_Init+0x148>)
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006672:	4837      	ldr	r0, [pc, #220]	; (8006750 <MX_TIM1_Init+0x148>)
 8006674:	f008 fdc9 	bl	800f20a <HAL_TIM_PWM_Init>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800667e:	f000 fc51 	bl	8006f24 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006682:	2303      	movs	r3, #3
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006686:	2300      	movs	r3, #0
 8006688:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800668a:	2301      	movs	r3, #1
 800668c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800668e:	2300      	movs	r3, #0
 8006690:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006696:	2300      	movs	r3, #0
 8006698:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800669a:	2301      	movs	r3, #1
 800669c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800669e:	2300      	movs	r3, #0
 80066a0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80066a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066aa:	4619      	mov	r1, r3
 80066ac:	4828      	ldr	r0, [pc, #160]	; (8006750 <MX_TIM1_Init+0x148>)
 80066ae:	f008 fe15 	bl	800f2dc <HAL_TIM_Encoder_Init>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80066b8:	f000 fc34 	bl	8006f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80066c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066c8:	4619      	mov	r1, r3
 80066ca:	4821      	ldr	r0, [pc, #132]	; (8006750 <MX_TIM1_Init+0x148>)
 80066cc:	f009 fb3c 	bl	800fd48 <HAL_TIMEx_MasterConfigSynchronization>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80066d6:	f000 fc25 	bl	8006f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066da:	2360      	movs	r3, #96	; 0x60
 80066dc:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066e2:	2300      	movs	r3, #0
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066e6:	2300      	movs	r3, #0
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066ee:	2300      	movs	r3, #0
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066f2:	2300      	movs	r3, #0
 80066f4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066f6:	f107 0320 	add.w	r3, r7, #32
 80066fa:	2208      	movs	r2, #8
 80066fc:	4619      	mov	r1, r3
 80066fe:	4814      	ldr	r0, [pc, #80]	; (8006750 <MX_TIM1_Init+0x148>)
 8006700:	f008 ffbe 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800670a:	f000 fc0b 	bl	8006f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800670e:	2300      	movs	r3, #0
 8006710:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006716:	2300      	movs	r3, #0
 8006718:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006726:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800672c:	463b      	mov	r3, r7
 800672e:	4619      	mov	r1, r3
 8006730:	4807      	ldr	r0, [pc, #28]	; (8006750 <MX_TIM1_Init+0x148>)
 8006732:	f009 fb85 	bl	800fe40 <HAL_TIMEx_ConfigBreakDeadTime>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800673c:	f000 fbf2 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006740:	4803      	ldr	r0, [pc, #12]	; (8006750 <MX_TIM1_Init+0x148>)
 8006742:	f000 ffdf 	bl	8007704 <HAL_TIM_MspPostInit>

}
 8006746:	bf00      	nop
 8006748:	3768      	adds	r7, #104	; 0x68
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	2004a92c 	.word	0x2004a92c
 8006754:	40010000 	.word	0x40010000

08006758 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800675e:	f107 0320 	add.w	r3, r7, #32
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006768:	1d3b      	adds	r3, r7, #4
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	605a      	str	r2, [r3, #4]
 8006770:	609a      	str	r2, [r3, #8]
 8006772:	60da      	str	r2, [r3, #12]
 8006774:	611a      	str	r2, [r3, #16]
 8006776:	615a      	str	r2, [r3, #20]
 8006778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800677a:	4b27      	ldr	r3, [pc, #156]	; (8006818 <MX_TIM3_Init+0xc0>)
 800677c:	4a27      	ldr	r2, [pc, #156]	; (800681c <MX_TIM3_Init+0xc4>)
 800677e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006780:	4b25      	ldr	r3, [pc, #148]	; (8006818 <MX_TIM3_Init+0xc0>)
 8006782:	2201      	movs	r2, #1
 8006784:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006786:	4b24      	ldr	r3, [pc, #144]	; (8006818 <MX_TIM3_Init+0xc0>)
 8006788:	2200      	movs	r2, #0
 800678a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 800678c:	4b22      	ldr	r3, [pc, #136]	; (8006818 <MX_TIM3_Init+0xc0>)
 800678e:	f241 1293 	movw	r2, #4499	; 0x1193
 8006792:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006794:	4b20      	ldr	r3, [pc, #128]	; (8006818 <MX_TIM3_Init+0xc0>)
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800679a:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <MX_TIM3_Init+0xc0>)
 800679c:	2200      	movs	r2, #0
 800679e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80067a0:	481d      	ldr	r0, [pc, #116]	; (8006818 <MX_TIM3_Init+0xc0>)
 80067a2:	f008 fd32 	bl	800f20a <HAL_TIM_PWM_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80067ac:	f000 fbba 	bl	8006f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067b0:	2300      	movs	r3, #0
 80067b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80067b8:	f107 0320 	add.w	r3, r7, #32
 80067bc:	4619      	mov	r1, r3
 80067be:	4816      	ldr	r0, [pc, #88]	; (8006818 <MX_TIM3_Init+0xc0>)
 80067c0:	f009 fac2 	bl	800fd48 <HAL_TIMEx_MasterConfigSynchronization>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80067ca:	f000 fbab 	bl	8006f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067ce:	2360      	movs	r3, #96	; 0x60
 80067d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	2200      	movs	r2, #0
 80067e2:	4619      	mov	r1, r3
 80067e4:	480c      	ldr	r0, [pc, #48]	; (8006818 <MX_TIM3_Init+0xc0>)
 80067e6:	f008 ff4b 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80067f0:	f000 fb98 	bl	8006f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80067f4:	1d3b      	adds	r3, r7, #4
 80067f6:	2204      	movs	r2, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4807      	ldr	r0, [pc, #28]	; (8006818 <MX_TIM3_Init+0xc0>)
 80067fc:	f008 ff40 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006806:	f000 fb8d 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800680a:	4803      	ldr	r0, [pc, #12]	; (8006818 <MX_TIM3_Init+0xc0>)
 800680c:	f000 ff7a 	bl	8007704 <HAL_TIM_MspPostInit>

}
 8006810:	bf00      	nop
 8006812:	3728      	adds	r7, #40	; 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	2004a7c4 	.word	0x2004a7c4
 800681c:	40000400 	.word	0x40000400

08006820 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006826:	f107 0320 	add.w	r3, r7, #32
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	605a      	str	r2, [r3, #4]
 8006838:	609a      	str	r2, [r3, #8]
 800683a:	60da      	str	r2, [r3, #12]
 800683c:	611a      	str	r2, [r3, #16]
 800683e:	615a      	str	r2, [r3, #20]
 8006840:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006842:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <MX_TIM4_Init+0xc0>)
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <MX_TIM4_Init+0xc4>)
 8006846:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <MX_TIM4_Init+0xc0>)
 800684a:	2200      	movs	r2, #0
 800684c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800684e:	4b24      	ldr	r3, [pc, #144]	; (80068e0 <MX_TIM4_Init+0xc0>)
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006854:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <MX_TIM4_Init+0xc0>)
 8006856:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800685a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800685c:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <MX_TIM4_Init+0xc0>)
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006862:	4b1f      	ldr	r3, [pc, #124]	; (80068e0 <MX_TIM4_Init+0xc0>)
 8006864:	2200      	movs	r2, #0
 8006866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006868:	481d      	ldr	r0, [pc, #116]	; (80068e0 <MX_TIM4_Init+0xc0>)
 800686a:	f008 fcce 	bl	800f20a <HAL_TIM_PWM_Init>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006874:	f000 fb56 	bl	8006f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006878:	2300      	movs	r3, #0
 800687a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800687c:	2300      	movs	r3, #0
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006880:	f107 0320 	add.w	r3, r7, #32
 8006884:	4619      	mov	r1, r3
 8006886:	4816      	ldr	r0, [pc, #88]	; (80068e0 <MX_TIM4_Init+0xc0>)
 8006888:	f009 fa5e 	bl	800fd48 <HAL_TIMEx_MasterConfigSynchronization>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006892:	f000 fb47 	bl	8006f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006896:	2360      	movs	r3, #96	; 0x60
 8006898:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	2208      	movs	r2, #8
 80068aa:	4619      	mov	r1, r3
 80068ac:	480c      	ldr	r0, [pc, #48]	; (80068e0 <MX_TIM4_Init+0xc0>)
 80068ae:	f008 fee7 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80068b8:	f000 fb34 	bl	8006f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	220c      	movs	r2, #12
 80068c0:	4619      	mov	r1, r3
 80068c2:	4807      	ldr	r0, [pc, #28]	; (80068e0 <MX_TIM4_Init+0xc0>)
 80068c4:	f008 fedc 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80068ce:	f000 fb29 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80068d2:	4803      	ldr	r0, [pc, #12]	; (80068e0 <MX_TIM4_Init+0xc0>)
 80068d4:	f000 ff16 	bl	8007704 <HAL_TIM_MspPostInit>

}
 80068d8:	bf00      	nop
 80068da:	3728      	adds	r7, #40	; 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	2004a650 	.word	0x2004a650
 80068e4:	40000800 	.word	0x40000800

080068e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068ee:	463b      	mov	r3, r7
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <MX_TIM6_Init+0x64>)
 80068f8:	4a15      	ldr	r2, [pc, #84]	; (8006950 <MX_TIM6_Init+0x68>)
 80068fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80068fc:	4b13      	ldr	r3, [pc, #76]	; (800694c <MX_TIM6_Init+0x64>)
 80068fe:	2259      	movs	r2, #89	; 0x59
 8006900:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <MX_TIM6_Init+0x64>)
 8006904:	2200      	movs	r2, #0
 8006906:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006908:	4b10      	ldr	r3, [pc, #64]	; (800694c <MX_TIM6_Init+0x64>)
 800690a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800690e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006910:	4b0e      	ldr	r3, [pc, #56]	; (800694c <MX_TIM6_Init+0x64>)
 8006912:	2280      	movs	r2, #128	; 0x80
 8006914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006916:	480d      	ldr	r0, [pc, #52]	; (800694c <MX_TIM6_Init+0x64>)
 8006918:	f008 fc28 	bl	800f16c <HAL_TIM_Base_Init>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006922:	f000 faff 	bl	8006f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006926:	2300      	movs	r3, #0
 8006928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800692a:	2300      	movs	r3, #0
 800692c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800692e:	463b      	mov	r3, r7
 8006930:	4619      	mov	r1, r3
 8006932:	4806      	ldr	r0, [pc, #24]	; (800694c <MX_TIM6_Init+0x64>)
 8006934:	f009 fa08 	bl	800fd48 <HAL_TIMEx_MasterConfigSynchronization>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800693e:	f000 faf1 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	2004a8ec 	.word	0x2004a8ec
 8006950:	40001000 	.word	0x40001000

08006954 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800695a:	463b      	mov	r3, r7
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006962:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <MX_TIM7_Init+0x60>)
 8006964:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <MX_TIM7_Init+0x64>)
 8006966:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006968:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <MX_TIM7_Init+0x60>)
 800696a:	22b3      	movs	r2, #179	; 0xb3
 800696c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <MX_TIM7_Init+0x60>)
 8006970:	2200      	movs	r2, #0
 8006972:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006974:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <MX_TIM7_Init+0x60>)
 8006976:	2231      	movs	r2, #49	; 0x31
 8006978:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <MX_TIM7_Init+0x60>)
 800697c:	2280      	movs	r2, #128	; 0x80
 800697e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006980:	480c      	ldr	r0, [pc, #48]	; (80069b4 <MX_TIM7_Init+0x60>)
 8006982:	f008 fbf3 	bl	800f16c <HAL_TIM_Base_Init>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800698c:	f000 faca 	bl	8006f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006990:	2300      	movs	r3, #0
 8006992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006994:	2300      	movs	r3, #0
 8006996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006998:	463b      	mov	r3, r7
 800699a:	4619      	mov	r1, r3
 800699c:	4805      	ldr	r0, [pc, #20]	; (80069b4 <MX_TIM7_Init+0x60>)
 800699e:	f009 f9d3 	bl	800fd48 <HAL_TIMEx_MasterConfigSynchronization>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80069a8:	f000 fabc 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	2004aa90 	.word	0x2004aa90
 80069b8:	40001400 	.word	0x40001400

080069bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80069c2:	f107 030c 	add.w	r3, r7, #12
 80069c6:	2224      	movs	r2, #36	; 0x24
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f00f f80c 	bl	80159e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80069d8:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <MX_TIM8_Init+0xa8>)
 80069da:	4a23      	ldr	r2, [pc, #140]	; (8006a68 <MX_TIM8_Init+0xac>)
 80069dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80069de:	4b21      	ldr	r3, [pc, #132]	; (8006a64 <MX_TIM8_Init+0xa8>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80069e4:	4b1f      	ldr	r3, [pc, #124]	; (8006a64 <MX_TIM8_Init+0xa8>)
 80069e6:	2210      	movs	r2, #16
 80069e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80069ea:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <MX_TIM8_Init+0xa8>)
 80069ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <MX_TIM8_Init+0xa8>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80069f8:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <MX_TIM8_Init+0xa8>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069fe:	4b19      	ldr	r3, [pc, #100]	; (8006a64 <MX_TIM8_Init+0xa8>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006a04:	2303      	movs	r3, #3
 8006a06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a20:	2300      	movs	r3, #0
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006a28:	f107 030c 	add.w	r3, r7, #12
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	480d      	ldr	r0, [pc, #52]	; (8006a64 <MX_TIM8_Init+0xa8>)
 8006a30:	f008 fc54 	bl	800f2dc <HAL_TIM_Encoder_Init>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006a3a:	f000 fa73 	bl	8006f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006a46:	1d3b      	adds	r3, r7, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4806      	ldr	r0, [pc, #24]	; (8006a64 <MX_TIM8_Init+0xa8>)
 8006a4c:	f009 f97c 	bl	800fd48 <HAL_TIMEx_MasterConfigSynchronization>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006a56:	f000 fa65 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006a5a:	bf00      	nop
 8006a5c:	3730      	adds	r7, #48	; 0x30
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	2004a610 	.word	0x2004a610
 8006a68:	40010400 	.word	0x40010400

08006a6c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	605a      	str	r2, [r3, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
 8006a7e:	611a      	str	r2, [r3, #16]
 8006a80:	615a      	str	r2, [r3, #20]
 8006a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006a86:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <MX_TIM10_Init+0x98>)
 8006a88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a90:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006a96:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006a98:	f242 3227 	movw	r2, #8999	; 0x2327
 8006a9c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a9e:	4b18      	ldr	r3, [pc, #96]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aa4:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006aaa:	4815      	ldr	r0, [pc, #84]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006aac:	f008 fb5e 	bl	800f16c <HAL_TIM_Base_Init>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006ab6:	f000 fa35 	bl	8006f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006aba:	4811      	ldr	r0, [pc, #68]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006abc:	f008 fba5 	bl	800f20a <HAL_TIM_PWM_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006ac6:	f000 fa2d 	bl	8006f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006aca:	2360      	movs	r3, #96	; 0x60
 8006acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	2200      	movs	r2, #0
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4807      	ldr	r0, [pc, #28]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006ae2:	f008 fdcd 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006aec:	f000 fa1a 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006af0:	4803      	ldr	r0, [pc, #12]	; (8006b00 <MX_TIM10_Init+0x94>)
 8006af2:	f000 fe07 	bl	8007704 <HAL_TIM_MspPostInit>

}
 8006af6:	bf00      	nop
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	2004a72c 	.word	0x2004a72c
 8006b04:	40014400 	.word	0x40014400

08006b08 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	609a      	str	r2, [r3, #8]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	611a      	str	r2, [r3, #16]
 8006b1c:	615a      	str	r2, [r3, #20]
 8006b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006b20:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b22:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <MX_TIM11_Init+0x98>)
 8006b24:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006b26:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006b32:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b34:	f242 3227 	movw	r2, #8999	; 0x2327
 8006b38:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b40:	4b16      	ldr	r3, [pc, #88]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006b46:	4815      	ldr	r0, [pc, #84]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b48:	f008 fb10 	bl	800f16c <HAL_TIM_Base_Init>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006b52:	f000 f9e7 	bl	8006f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006b56:	4811      	ldr	r0, [pc, #68]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b58:	f008 fb57 	bl	800f20a <HAL_TIM_PWM_Init>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006b62:	f000 f9df 	bl	8006f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b66:	2360      	movs	r3, #96	; 0x60
 8006b68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4807      	ldr	r0, [pc, #28]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b7e:	f008 fd7f 	bl	800f680 <HAL_TIM_PWM_ConfigChannel>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006b88:	f000 f9cc 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006b8c:	4803      	ldr	r0, [pc, #12]	; (8006b9c <MX_TIM11_Init+0x94>)
 8006b8e:	f000 fdb9 	bl	8007704 <HAL_TIM_MspPostInit>

}
 8006b92:	bf00      	nop
 8006b94:	3720      	adds	r7, #32
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2004a84c 	.word	0x2004a84c
 8006ba0:	40014800 	.word	0x40014800

08006ba4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006baa:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <MX_TIM13_Init+0x44>)
 8006bac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006bae:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006bb0:	2259      	movs	r2, #89	; 0x59
 8006bb2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006bba:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006bbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8006bc0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bc2:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006bc8:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006bca:	2280      	movs	r2, #128	; 0x80
 8006bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006bce:	4805      	ldr	r0, [pc, #20]	; (8006be4 <MX_TIM13_Init+0x40>)
 8006bd0:	f008 facc 	bl	800f16c <HAL_TIM_Base_Init>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006bda:	f000 f9a3 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	2004a80c 	.word	0x2004a80c
 8006be8:	40001c00 	.word	0x40001c00

08006bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006bf0:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006bf2:	4a12      	ldr	r2, [pc, #72]	; (8006c3c <MX_USART2_UART_Init+0x50>)
 8006bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c04:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c12:	220c      	movs	r2, #12
 8006c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c16:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c22:	4805      	ldr	r0, [pc, #20]	; (8006c38 <MX_USART2_UART_Init+0x4c>)
 8006c24:	f009 f972 	bl	800ff0c <HAL_UART_Init>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006c2e:	f000 f979 	bl	8006f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2004a9f0 	.word	0x2004a9f0
 8006c3c:	40004400 	.word	0x40004400

08006c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <MX_DMA_Init+0x5c>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <MX_DMA_Init+0x5c>)
 8006c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c54:	6313      	str	r3, [r2, #48]	; 0x30
 8006c56:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <MX_DMA_Init+0x5c>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	203a      	movs	r0, #58	; 0x3a
 8006c68:	f003 fe4b 	bl	800a902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006c6c:	203a      	movs	r0, #58	; 0x3a
 8006c6e:	f003 fe64 	bl	800a93a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2100      	movs	r1, #0
 8006c76:	203b      	movs	r0, #59	; 0x3b
 8006c78:	f003 fe43 	bl	800a902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006c7c:	203b      	movs	r0, #59	; 0x3b
 8006c7e:	f003 fe5c 	bl	800a93a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006c82:	2200      	movs	r2, #0
 8006c84:	2100      	movs	r1, #0
 8006c86:	2045      	movs	r0, #69	; 0x45
 8006c88:	f003 fe3b 	bl	800a902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006c8c:	2045      	movs	r0, #69	; 0x45
 8006c8e:	f003 fe54 	bl	800a93a <HAL_NVIC_EnableIRQ>

}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40023800 	.word	0x40023800

08006ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08c      	sub	sp, #48	; 0x30
 8006ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca6:	f107 031c 	add.w	r3, r7, #28
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	4b94      	ldr	r3, [pc, #592]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	4a93      	ldr	r2, [pc, #588]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cc0:	f043 0310 	orr.w	r3, r3, #16
 8006cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc6:	4b91      	ldr	r3, [pc, #580]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	4b8d      	ldr	r3, [pc, #564]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	4a8c      	ldr	r2, [pc, #560]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce2:	4b8a      	ldr	r3, [pc, #552]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	4b86      	ldr	r3, [pc, #536]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	4a85      	ldr	r2, [pc, #532]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006cf8:	f043 0304 	orr.w	r3, r3, #4
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfe:	4b83      	ldr	r3, [pc, #524]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	4b7f      	ldr	r3, [pc, #508]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	4a7e      	ldr	r2, [pc, #504]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1a:	4b7c      	ldr	r3, [pc, #496]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
 8006d2a:	4b78      	ldr	r3, [pc, #480]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	4a77      	ldr	r2, [pc, #476]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d30:	f043 0302 	orr.w	r3, r3, #2
 8006d34:	6313      	str	r3, [r2, #48]	; 0x30
 8006d36:	4b75      	ldr	r3, [pc, #468]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	4b71      	ldr	r3, [pc, #452]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	4a70      	ldr	r2, [pc, #448]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d4c:	f043 0308 	orr.w	r3, r3, #8
 8006d50:	6313      	str	r3, [r2, #48]	; 0x30
 8006d52:	4b6e      	ldr	r3, [pc, #440]	; (8006f0c <MX_GPIO_Init+0x26c>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d64:	486a      	ldr	r0, [pc, #424]	; (8006f10 <MX_GPIO_Init+0x270>)
 8006d66:	f004 fb61 	bl	800b42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d70:	4868      	ldr	r0, [pc, #416]	; (8006f14 <MX_GPIO_Init+0x274>)
 8006d72:	f004 fb5b 	bl	800b42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006d76:	2200      	movs	r2, #0
 8006d78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d7c:	4866      	ldr	r0, [pc, #408]	; (8006f18 <MX_GPIO_Init+0x278>)
 8006d7e:	f004 fb55 	bl	800b42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d82:	2200      	movs	r2, #0
 8006d84:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006d88:	4864      	ldr	r0, [pc, #400]	; (8006f1c <MX_GPIO_Init+0x27c>)
 8006d8a:	f004 fb4f 	bl	800b42c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d8e:	2304      	movs	r3, #4
 8006d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d92:	2300      	movs	r3, #0
 8006d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d9a:	f107 031c 	add.w	r3, r7, #28
 8006d9e:	4619      	mov	r1, r3
 8006da0:	485b      	ldr	r0, [pc, #364]	; (8006f10 <MX_GPIO_Init+0x270>)
 8006da2:	f004 f981 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006da6:	230f      	movs	r3, #15
 8006da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006daa:	2303      	movs	r3, #3
 8006dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006db2:	f107 031c 	add.w	r3, r7, #28
 8006db6:	4619      	mov	r1, r3
 8006db8:	4859      	ldr	r0, [pc, #356]	; (8006f20 <MX_GPIO_Init+0x280>)
 8006dba:	f004 f975 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006dbe:	23e1      	movs	r3, #225	; 0xe1
 8006dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dca:	f107 031c 	add.w	r3, r7, #28
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4852      	ldr	r0, [pc, #328]	; (8006f1c <MX_GPIO_Init+0x27c>)
 8006dd2:	f004 f969 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de2:	f107 031c 	add.w	r3, r7, #28
 8006de6:	4619      	mov	r1, r3
 8006de8:	484a      	ldr	r0, [pc, #296]	; (8006f14 <MX_GPIO_Init+0x274>)
 8006dea:	f004 f95d 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006dee:	2304      	movs	r3, #4
 8006df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006df2:	2300      	movs	r3, #0
 8006df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006df6:	2301      	movs	r3, #1
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dfa:	f107 031c 	add.w	r3, r7, #28
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4844      	ldr	r0, [pc, #272]	; (8006f14 <MX_GPIO_Init+0x274>)
 8006e02:	f004 f951 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006e06:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e10:	2301      	movs	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e14:	f107 031c 	add.w	r3, r7, #28
 8006e18:	4619      	mov	r1, r3
 8006e1a:	483d      	ldr	r0, [pc, #244]	; (8006f10 <MX_GPIO_Init+0x270>)
 8006e1c:	f004 f944 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e26:	2301      	movs	r3, #1
 8006e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e32:	f107 031c 	add.w	r3, r7, #28
 8006e36:	4619      	mov	r1, r3
 8006e38:	4835      	ldr	r0, [pc, #212]	; (8006f10 <MX_GPIO_Init+0x270>)
 8006e3a:	f004 f935 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e44:	2301      	movs	r3, #1
 8006e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e50:	f107 031c 	add.w	r3, r7, #28
 8006e54:	4619      	mov	r1, r3
 8006e56:	482f      	ldr	r0, [pc, #188]	; (8006f14 <MX_GPIO_Init+0x274>)
 8006e58:	f004 f926 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e62:	2300      	movs	r3, #0
 8006e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e6a:	f107 031c 	add.w	r3, r7, #28
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4829      	ldr	r0, [pc, #164]	; (8006f18 <MX_GPIO_Init+0x278>)
 8006e72:	f004 f919 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e84:	2300      	movs	r3, #0
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e88:	f107 031c 	add.w	r3, r7, #28
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4822      	ldr	r0, [pc, #136]	; (8006f18 <MX_GPIO_Init+0x278>)
 8006e90:	f004 f90a 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ea6:	f107 031c 	add.w	r3, r7, #28
 8006eaa:	4619      	mov	r1, r3
 8006eac:	481a      	ldr	r0, [pc, #104]	; (8006f18 <MX_GPIO_Init+0x278>)
 8006eae:	f004 f8fb 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006eb2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006eb6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ec4:	f107 031c 	add.w	r3, r7, #28
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4814      	ldr	r0, [pc, #80]	; (8006f1c <MX_GPIO_Init+0x27c>)
 8006ecc:	f004 f8ec 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ede:	f107 031c 	add.w	r3, r7, #28
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	480d      	ldr	r0, [pc, #52]	; (8006f1c <MX_GPIO_Init+0x27c>)
 8006ee6:	f004 f8df 	bl	800b0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006eea:	239b      	movs	r3, #155	; 0x9b
 8006eec:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ef6:	f107 031c 	add.w	r3, r7, #28
 8006efa:	4619      	mov	r1, r3
 8006efc:	4806      	ldr	r0, [pc, #24]	; (8006f18 <MX_GPIO_Init+0x278>)
 8006efe:	f004 f8d3 	bl	800b0a8 <HAL_GPIO_Init>

}
 8006f02:	bf00      	nop
 8006f04:	3730      	adds	r7, #48	; 0x30
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40021000 	.word	0x40021000
 8006f14:	40020400 	.word	0x40020400
 8006f18:	40020c00 	.word	0x40020c00
 8006f1c:	40020000 	.word	0x40020000
 8006f20:	40020800 	.word	0x40020800

08006f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f2a:	e7fe      	b.n	8006f2a <Error_Handler+0x6>

08006f2c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_MspInit+0x4c>)
 8006f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4a:	4a0f      	ldr	r2, [pc, #60]	; (8006f88 <HAL_MspInit+0x4c>)
 8006f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f50:	6453      	str	r3, [r2, #68]	; 0x44
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <HAL_MspInit+0x4c>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <HAL_MspInit+0x4c>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <HAL_MspInit+0x4c>)
 8006f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6e:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <HAL_MspInit+0x4c>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800

08006f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08c      	sub	sp, #48	; 0x30
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f94:	f107 031c 	add.w	r3, r7, #28
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a4a      	ldr	r2, [pc, #296]	; (80070d4 <HAL_ADC_MspInit+0x148>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f040 808e 	bne.w	80070cc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	4b48      	ldr	r3, [pc, #288]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	4a47      	ldr	r2, [pc, #284]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8006fc0:	4b45      	ldr	r3, [pc, #276]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	4a40      	ldr	r2, [pc, #256]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fd6:	f043 0304 	orr.w	r3, r3, #4
 8006fda:	6313      	str	r3, [r2, #48]	; 0x30
 8006fdc:	4b3e      	ldr	r3, [pc, #248]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe8:	2300      	movs	r3, #0
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	4b3a      	ldr	r3, [pc, #232]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	4a39      	ldr	r2, [pc, #228]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff8:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	4b33      	ldr	r3, [pc, #204]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	4a32      	ldr	r2, [pc, #200]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 800700e:	f043 0302 	orr.w	r3, r3, #2
 8007012:	6313      	str	r3, [r2, #48]	; 0x30
 8007014:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <HAL_ADC_MspInit+0x14c>)
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007020:	230f      	movs	r3, #15
 8007022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007024:	2303      	movs	r3, #3
 8007026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007028:	2300      	movs	r3, #0
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800702c:	f107 031c 	add.w	r3, r7, #28
 8007030:	4619      	mov	r1, r3
 8007032:	482a      	ldr	r0, [pc, #168]	; (80070dc <HAL_ADC_MspInit+0x150>)
 8007034:	f004 f838 	bl	800b0a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007038:	23ff      	movs	r3, #255	; 0xff
 800703a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800703c:	2303      	movs	r3, #3
 800703e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007044:	f107 031c 	add.w	r3, r7, #28
 8007048:	4619      	mov	r1, r3
 800704a:	4825      	ldr	r0, [pc, #148]	; (80070e0 <HAL_ADC_MspInit+0x154>)
 800704c:	f004 f82c 	bl	800b0a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007050:	2303      	movs	r3, #3
 8007052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007054:	2303      	movs	r3, #3
 8007056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007058:	2300      	movs	r3, #0
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800705c:	f107 031c 	add.w	r3, r7, #28
 8007060:	4619      	mov	r1, r3
 8007062:	4820      	ldr	r0, [pc, #128]	; (80070e4 <HAL_ADC_MspInit+0x158>)
 8007064:	f004 f820 	bl	800b0a8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8007068:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 800706a:	4a20      	ldr	r2, [pc, #128]	; (80070ec <HAL_ADC_MspInit+0x160>)
 800706c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800706e:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 8007070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007074:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 8007078:	2200      	movs	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800707c:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 800707e:	2200      	movs	r2, #0
 8007080:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007082:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 8007084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007088:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800708a:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 800708c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007090:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 8007094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007098:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800709a:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 800709c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 80070a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80070a8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80070b0:	480d      	ldr	r0, [pc, #52]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 80070b2:	f003 fc5d 	bl	800a970 <HAL_DMA_Init>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80070bc:	f7ff ff32 	bl	8006f24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
 80070c6:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <HAL_ADC_MspInit+0x15c>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80070cc:	bf00      	nop
 80070ce:	3730      	adds	r7, #48	; 0x30
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40012100 	.word	0x40012100
 80070d8:	40023800 	.word	0x40023800
 80070dc:	40020800 	.word	0x40020800
 80070e0:	40020000 	.word	0x40020000
 80070e4:	40020400 	.word	0x40020400
 80070e8:	2004aa30 	.word	0x2004aa30
 80070ec:	40026440 	.word	0x40026440

080070f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08c      	sub	sp, #48	; 0x30
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070f8:	f107 031c 	add.w	r3, r7, #28
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	605a      	str	r2, [r3, #4]
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	60da      	str	r2, [r3, #12]
 8007106:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a32      	ldr	r2, [pc, #200]	; (80071d8 <HAL_I2C_MspInit+0xe8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d12c      	bne.n	800716c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	4b31      	ldr	r3, [pc, #196]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	4a30      	ldr	r2, [pc, #192]	; (80071dc <HAL_I2C_MspInit+0xec>)
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	6313      	str	r3, [r2, #48]	; 0x30
 8007122:	4b2e      	ldr	r3, [pc, #184]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800712e:	23c0      	movs	r3, #192	; 0xc0
 8007130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007132:	2312      	movs	r3, #18
 8007134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007136:	2301      	movs	r3, #1
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713a:	2303      	movs	r3, #3
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800713e:	2304      	movs	r3, #4
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007142:	f107 031c 	add.w	r3, r7, #28
 8007146:	4619      	mov	r1, r3
 8007148:	4825      	ldr	r0, [pc, #148]	; (80071e0 <HAL_I2C_MspInit+0xf0>)
 800714a:	f003 ffad 	bl	800b0a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	4b22      	ldr	r3, [pc, #136]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	4a21      	ldr	r2, [pc, #132]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800715c:	6413      	str	r3, [r2, #64]	; 0x40
 800715e:	4b1f      	ldr	r3, [pc, #124]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800716a:	e031      	b.n	80071d0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1c      	ldr	r2, [pc, #112]	; (80071e4 <HAL_I2C_MspInit+0xf4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d12c      	bne.n	80071d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <HAL_I2C_MspInit+0xec>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	4a17      	ldr	r2, [pc, #92]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007180:	f043 0302 	orr.w	r3, r3, #2
 8007184:	6313      	str	r3, [r2, #48]	; 0x30
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <HAL_I2C_MspInit+0xec>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007198:	2312      	movs	r3, #18
 800719a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800719c:	2301      	movs	r3, #1
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a0:	2303      	movs	r3, #3
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80071a4:	2304      	movs	r3, #4
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071a8:	f107 031c 	add.w	r3, r7, #28
 80071ac:	4619      	mov	r1, r3
 80071ae:	480c      	ldr	r0, [pc, #48]	; (80071e0 <HAL_I2C_MspInit+0xf0>)
 80071b0:	f003 ff7a 	bl	800b0a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	4b08      	ldr	r3, [pc, #32]	; (80071dc <HAL_I2C_MspInit+0xec>)
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	4a07      	ldr	r2, [pc, #28]	; (80071dc <HAL_I2C_MspInit+0xec>)
 80071be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071c2:	6413      	str	r3, [r2, #64]	; 0x40
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_I2C_MspInit+0xec>)
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	bf00      	nop
 80071d2:	3730      	adds	r7, #48	; 0x30
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40005400 	.word	0x40005400
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40020400 	.word	0x40020400
 80071e4:	40005800 	.word	0x40005800

080071e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f0:	f107 0314 	add.w	r3, r7, #20
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a69      	ldr	r2, [pc, #420]	; (80073ac <HAL_SD_MspInit+0x1c4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	f040 80cb 	bne.w	80073a2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	4b67      	ldr	r3, [pc, #412]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	4a66      	ldr	r2, [pc, #408]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 8007216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800721a:	6453      	str	r3, [r2, #68]	; 0x44
 800721c:	4b64      	ldr	r3, [pc, #400]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	4b60      	ldr	r3, [pc, #384]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	4a5f      	ldr	r2, [pc, #380]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 8007232:	f043 0304 	orr.w	r3, r3, #4
 8007236:	6313      	str	r3, [r2, #48]	; 0x30
 8007238:	4b5d      	ldr	r3, [pc, #372]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007244:	2300      	movs	r3, #0
 8007246:	60bb      	str	r3, [r7, #8]
 8007248:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 800724e:	f043 0308 	orr.w	r3, r3, #8
 8007252:	6313      	str	r3, [r2, #48]	; 0x30
 8007254:	4b56      	ldr	r3, [pc, #344]	; (80073b0 <HAL_SD_MspInit+0x1c8>)
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007260:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007264:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007266:	2302      	movs	r3, #2
 8007268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800726e:	2303      	movs	r3, #3
 8007270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007272:	230c      	movs	r3, #12
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007276:	f107 0314 	add.w	r3, r7, #20
 800727a:	4619      	mov	r1, r3
 800727c:	484d      	ldr	r0, [pc, #308]	; (80073b4 <HAL_SD_MspInit+0x1cc>)
 800727e:	f003 ff13 	bl	800b0a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007282:	2304      	movs	r3, #4
 8007284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007286:	2302      	movs	r3, #2
 8007288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800728e:	2303      	movs	r3, #3
 8007290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007292:	230c      	movs	r3, #12
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007296:	f107 0314 	add.w	r3, r7, #20
 800729a:	4619      	mov	r1, r3
 800729c:	4846      	ldr	r0, [pc, #280]	; (80073b8 <HAL_SD_MspInit+0x1d0>)
 800729e:	f003 ff03 	bl	800b0a8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80072a2:	4b46      	ldr	r3, [pc, #280]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072a4:	4a46      	ldr	r2, [pc, #280]	; (80073c0 <HAL_SD_MspInit+0x1d8>)
 80072a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80072a8:	4b44      	ldr	r3, [pc, #272]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072b0:	4b42      	ldr	r3, [pc, #264]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072b6:	4b41      	ldr	r3, [pc, #260]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072bc:	4b3f      	ldr	r3, [pc, #252]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80072c4:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072cc:	4b3b      	ldr	r3, [pc, #236]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80072d4:	4b39      	ldr	r3, [pc, #228]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072d6:	2220      	movs	r2, #32
 80072d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80072da:	4b38      	ldr	r3, [pc, #224]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072e0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80072e2:	4b36      	ldr	r3, [pc, #216]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072e4:	2204      	movs	r2, #4
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80072e8:	4b34      	ldr	r3, [pc, #208]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072ea:	2203      	movs	r2, #3
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80072ee:	4b33      	ldr	r3, [pc, #204]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072f6:	4b31      	ldr	r3, [pc, #196]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 80072f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80072fe:	482f      	ldr	r0, [pc, #188]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 8007300:	f003 fb36 	bl	800a970 <HAL_DMA_Init>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800730a:	f7ff fe0b 	bl	8006f24 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a2a      	ldr	r2, [pc, #168]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 8007312:	641a      	str	r2, [r3, #64]	; 0x40
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <HAL_SD_MspInit+0x1d4>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800731a:	4b2a      	ldr	r3, [pc, #168]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800731c:	4a2a      	ldr	r2, [pc, #168]	; (80073c8 <HAL_SD_MspInit+0x1e0>)
 800731e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007320:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007326:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007328:	4b26      	ldr	r3, [pc, #152]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800732a:	2240      	movs	r2, #64	; 0x40
 800732c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800732e:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007330:	2200      	movs	r2, #0
 8007332:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007334:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800733a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800733c:	4b21      	ldr	r3, [pc, #132]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800733e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007342:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007344:	4b1f      	ldr	r3, [pc, #124]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800734a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800734c:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800734e:	2220      	movs	r2, #32
 8007350:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007354:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007358:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800735a:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800735c:	2204      	movs	r2, #4
 800735e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007360:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007362:	2203      	movs	r2, #3
 8007364:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007366:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007368:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007370:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007376:	4813      	ldr	r0, [pc, #76]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 8007378:	f003 fafa 	bl	800a970 <HAL_DMA_Init>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007382:	f7ff fdcf 	bl	8006f24 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a0e      	ldr	r2, [pc, #56]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800738a:	63da      	str	r2, [r3, #60]	; 0x3c
 800738c:	4a0d      	ldr	r2, [pc, #52]	; (80073c4 <HAL_SD_MspInit+0x1dc>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	2031      	movs	r0, #49	; 0x31
 8007398:	f003 fab3 	bl	800a902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800739c:	2031      	movs	r0, #49	; 0x31
 800739e:	f003 facc 	bl	800a93a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80073a2:	bf00      	nop
 80073a4:	3728      	adds	r7, #40	; 0x28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40023800 	.word	0x40023800
 80073b4:	40020800 	.word	0x40020800
 80073b8:	40020c00 	.word	0x40020c00
 80073bc:	2004a558 	.word	0x2004a558
 80073c0:	40026458 	.word	0x40026458
 80073c4:	2004a88c 	.word	0x2004a88c
 80073c8:	400264a0 	.word	0x400264a0

080073cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	; 0x28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	60da      	str	r2, [r3, #12]
 80073e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a19      	ldr	r2, [pc, #100]	; (8007450 <HAL_SPI_MspInit+0x84>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d12c      	bne.n	8007448 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
 80073f2:	4b18      	ldr	r3, [pc, #96]	; (8007454 <HAL_SPI_MspInit+0x88>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	4a17      	ldr	r2, [pc, #92]	; (8007454 <HAL_SPI_MspInit+0x88>)
 80073f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073fc:	6413      	str	r3, [r2, #64]	; 0x40
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <HAL_SPI_MspInit+0x88>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <HAL_SPI_MspInit+0x88>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <HAL_SPI_MspInit+0x88>)
 8007414:	f043 0302 	orr.w	r3, r3, #2
 8007418:	6313      	str	r3, [r2, #48]	; 0x30
 800741a:	4b0e      	ldr	r3, [pc, #56]	; (8007454 <HAL_SPI_MspInit+0x88>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007426:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800742a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800742c:	2302      	movs	r3, #2
 800742e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007430:	2300      	movs	r3, #0
 8007432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007434:	2303      	movs	r3, #3
 8007436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007438:	2305      	movs	r3, #5
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	4619      	mov	r1, r3
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <HAL_SPI_MspInit+0x8c>)
 8007444:	f003 fe30 	bl	800b0a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007448:	bf00      	nop
 800744a:	3728      	adds	r7, #40	; 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40003800 	.word	0x40003800
 8007454:	40023800 	.word	0x40023800
 8007458:	40020400 	.word	0x40020400

0800745c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007464:	f107 031c 	add.w	r3, r7, #28
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2d      	ldr	r2, [pc, #180]	; (8007530 <HAL_TIM_PWM_MspInit+0xd4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d12d      	bne.n	80074da <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 8007484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007486:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6453      	str	r3, [r2, #68]	; 0x44
 800748e:	4b29      	ldr	r3, [pc, #164]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 8007490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	4b25      	ldr	r3, [pc, #148]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	4a24      	ldr	r2, [pc, #144]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 80074a4:	f043 0310 	orr.w	r3, r3, #16
 80074a8:	6313      	str	r3, [r2, #48]	; 0x30
 80074aa:	4b22      	ldr	r3, [pc, #136]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 80074ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80074b6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80074ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074bc:	2302      	movs	r3, #2
 80074be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074c4:	2300      	movs	r3, #0
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80074c8:	2301      	movs	r3, #1
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074cc:	f107 031c 	add.w	r3, r7, #28
 80074d0:	4619      	mov	r1, r3
 80074d2:	4819      	ldr	r0, [pc, #100]	; (8007538 <HAL_TIM_PWM_MspInit+0xdc>)
 80074d4:	f003 fde8 	bl	800b0a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80074d8:	e026      	b.n	8007528 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <HAL_TIM_PWM_MspInit+0xe0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d10e      	bne.n	8007502 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	4a11      	ldr	r2, [pc, #68]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 80074ee:	f043 0302 	orr.w	r3, r3, #2
 80074f2:	6413      	str	r3, [r2, #64]	; 0x40
 80074f4:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	693b      	ldr	r3, [r7, #16]
}
 8007500:	e012      	b.n	8007528 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a0e      	ldr	r2, [pc, #56]	; (8007540 <HAL_TIM_PWM_MspInit+0xe4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d10d      	bne.n	8007528 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	4a07      	ldr	r2, [pc, #28]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 8007516:	f043 0304 	orr.w	r3, r3, #4
 800751a:	6413      	str	r3, [r2, #64]	; 0x40
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <HAL_TIM_PWM_MspInit+0xd8>)
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	68fb      	ldr	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	3730      	adds	r7, #48	; 0x30
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40010000 	.word	0x40010000
 8007534:	40023800 	.word	0x40023800
 8007538:	40021000 	.word	0x40021000
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800

08007544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a3e      	ldr	r2, [pc, #248]	; (800764c <HAL_TIM_Base_MspInit+0x108>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d116      	bne.n	8007584 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	4b3d      	ldr	r3, [pc, #244]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	4a3c      	ldr	r2, [pc, #240]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007560:	f043 0310 	orr.w	r3, r3, #16
 8007564:	6413      	str	r3, [r2, #64]	; 0x40
 8007566:	4b3a      	ldr	r3, [pc, #232]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007572:	2200      	movs	r2, #0
 8007574:	2101      	movs	r1, #1
 8007576:	2036      	movs	r0, #54	; 0x36
 8007578:	f003 f9c3 	bl	800a902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800757c:	2036      	movs	r0, #54	; 0x36
 800757e:	f003 f9dc 	bl	800a93a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007582:	e05e      	b.n	8007642 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a32      	ldr	r2, [pc, #200]	; (8007654 <HAL_TIM_Base_MspInit+0x110>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d116      	bne.n	80075bc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	4b2f      	ldr	r3, [pc, #188]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	4a2e      	ldr	r2, [pc, #184]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007598:	f043 0320 	orr.w	r3, r3, #32
 800759c:	6413      	str	r3, [r2, #64]	; 0x40
 800759e:	4b2c      	ldr	r3, [pc, #176]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	2037      	movs	r0, #55	; 0x37
 80075b0:	f003 f9a7 	bl	800a902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80075b4:	2037      	movs	r0, #55	; 0x37
 80075b6:	f003 f9c0 	bl	800a93a <HAL_NVIC_EnableIRQ>
}
 80075ba:	e042      	b.n	8007642 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a25      	ldr	r2, [pc, #148]	; (8007658 <HAL_TIM_Base_MspInit+0x114>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	4b21      	ldr	r3, [pc, #132]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	4a20      	ldr	r2, [pc, #128]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 80075d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d4:	6453      	str	r3, [r2, #68]	; 0x44
 80075d6:	4b1e      	ldr	r3, [pc, #120]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	697b      	ldr	r3, [r7, #20]
}
 80075e2:	e02e      	b.n	8007642 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1c      	ldr	r2, [pc, #112]	; (800765c <HAL_TIM_Base_MspInit+0x118>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d10e      	bne.n	800760c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	4a16      	ldr	r2, [pc, #88]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 80075f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075fc:	6453      	str	r3, [r2, #68]	; 0x44
 80075fe:	4b14      	ldr	r3, [pc, #80]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	693b      	ldr	r3, [r7, #16]
}
 800760a:	e01a      	b.n	8007642 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a13      	ldr	r2, [pc, #76]	; (8007660 <HAL_TIM_Base_MspInit+0x11c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d115      	bne.n	8007642 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	4a0c      	ldr	r2, [pc, #48]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	6413      	str	r3, [r2, #64]	; 0x40
 8007626:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <HAL_TIM_Base_MspInit+0x10c>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007632:	2200      	movs	r2, #0
 8007634:	2100      	movs	r1, #0
 8007636:	202c      	movs	r0, #44	; 0x2c
 8007638:	f003 f963 	bl	800a902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800763c:	202c      	movs	r0, #44	; 0x2c
 800763e:	f003 f97c 	bl	800a93a <HAL_NVIC_EnableIRQ>
}
 8007642:	bf00      	nop
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40001000 	.word	0x40001000
 8007650:	40023800 	.word	0x40023800
 8007654:	40001400 	.word	0x40001400
 8007658:	40014400 	.word	0x40014400
 800765c:	40014800 	.word	0x40014800
 8007660:	40001c00 	.word	0x40001c00

08007664 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d133      	bne.n	80076ee <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <HAL_TIM_Encoder_MspInit+0x98>)
 800768c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768e:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <HAL_TIM_Encoder_MspInit+0x98>)
 8007690:	f043 0302 	orr.w	r3, r3, #2
 8007694:	6453      	str	r3, [r2, #68]	; 0x44
 8007696:	4b19      	ldr	r3, [pc, #100]	; (80076fc <HAL_TIM_Encoder_MspInit+0x98>)
 8007698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <HAL_TIM_Encoder_MspInit+0x98>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	4a14      	ldr	r2, [pc, #80]	; (80076fc <HAL_TIM_Encoder_MspInit+0x98>)
 80076ac:	f043 0304 	orr.w	r3, r3, #4
 80076b0:	6313      	str	r3, [r2, #48]	; 0x30
 80076b2:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_TIM_Encoder_MspInit+0x98>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076be:	23c0      	movs	r3, #192	; 0xc0
 80076c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c2:	2302      	movs	r3, #2
 80076c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ca:	2300      	movs	r3, #0
 80076cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80076ce:	2303      	movs	r3, #3
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076d2:	f107 0314 	add.w	r3, r7, #20
 80076d6:	4619      	mov	r1, r3
 80076d8:	4809      	ldr	r0, [pc, #36]	; (8007700 <HAL_TIM_Encoder_MspInit+0x9c>)
 80076da:	f003 fce5 	bl	800b0a8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	202c      	movs	r0, #44	; 0x2c
 80076e4:	f003 f90d 	bl	800a902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80076e8:	202c      	movs	r0, #44	; 0x2c
 80076ea:	f003 f926 	bl	800a93a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80076ee:	bf00      	nop
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40010400 	.word	0x40010400
 80076fc:	40023800 	.word	0x40023800
 8007700:	40020800 	.word	0x40020800

08007704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08c      	sub	sp, #48	; 0x30
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770c:	f107 031c 	add.w	r3, r7, #28
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a5c      	ldr	r2, [pc, #368]	; (8007894 <HAL_TIM_MspPostInit+0x190>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d11f      	bne.n	8007766 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007726:	2300      	movs	r3, #0
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	4b5b      	ldr	r3, [pc, #364]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	4a5a      	ldr	r2, [pc, #360]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007730:	f043 0310 	orr.w	r3, r3, #16
 8007734:	6313      	str	r3, [r2, #48]	; 0x30
 8007736:	4b58      	ldr	r3, [pc, #352]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	61bb      	str	r3, [r7, #24]
 8007740:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007748:	2302      	movs	r3, #2
 800774a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774c:	2300      	movs	r3, #0
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007750:	2300      	movs	r3, #0
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007754:	2301      	movs	r3, #1
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007758:	f107 031c 	add.w	r3, r7, #28
 800775c:	4619      	mov	r1, r3
 800775e:	484f      	ldr	r0, [pc, #316]	; (800789c <HAL_TIM_MspPostInit+0x198>)
 8007760:	f003 fca2 	bl	800b0a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007764:	e091      	b.n	800788a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4d      	ldr	r2, [pc, #308]	; (80078a0 <HAL_TIM_MspPostInit+0x19c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d11e      	bne.n	80077ae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	4b48      	ldr	r3, [pc, #288]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	4a47      	ldr	r2, [pc, #284]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 800777a:	f043 0302 	orr.w	r3, r3, #2
 800777e:	6313      	str	r3, [r2, #48]	; 0x30
 8007780:	4b45      	ldr	r3, [pc, #276]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800778c:	2330      	movs	r3, #48	; 0x30
 800778e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007790:	2302      	movs	r3, #2
 8007792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007794:	2300      	movs	r3, #0
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007798:	2300      	movs	r3, #0
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800779c:	2302      	movs	r3, #2
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077a0:	f107 031c 	add.w	r3, r7, #28
 80077a4:	4619      	mov	r1, r3
 80077a6:	483f      	ldr	r0, [pc, #252]	; (80078a4 <HAL_TIM_MspPostInit+0x1a0>)
 80077a8:	f003 fc7e 	bl	800b0a8 <HAL_GPIO_Init>
}
 80077ac:	e06d      	b.n	800788a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a3d      	ldr	r2, [pc, #244]	; (80078a8 <HAL_TIM_MspPostInit+0x1a4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d11f      	bne.n	80077f8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	4b36      	ldr	r3, [pc, #216]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	4a35      	ldr	r2, [pc, #212]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 80077c2:	f043 0308 	orr.w	r3, r3, #8
 80077c6:	6313      	str	r3, [r2, #48]	; 0x30
 80077c8:	4b33      	ldr	r3, [pc, #204]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80077d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80077d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077da:	2302      	movs	r3, #2
 80077dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e2:	2300      	movs	r3, #0
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80077e6:	2302      	movs	r3, #2
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077ea:	f107 031c 	add.w	r3, r7, #28
 80077ee:	4619      	mov	r1, r3
 80077f0:	482e      	ldr	r0, [pc, #184]	; (80078ac <HAL_TIM_MspPostInit+0x1a8>)
 80077f2:	f003 fc59 	bl	800b0a8 <HAL_GPIO_Init>
}
 80077f6:	e048      	b.n	800788a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a2c      	ldr	r2, [pc, #176]	; (80078b0 <HAL_TIM_MspPostInit+0x1ac>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d11f      	bne.n	8007842 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	4b24      	ldr	r3, [pc, #144]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	4a23      	ldr	r2, [pc, #140]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	6313      	str	r3, [r2, #48]	; 0x30
 8007812:	4b21      	ldr	r3, [pc, #132]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800781e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007824:	2302      	movs	r3, #2
 8007826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007828:	2300      	movs	r3, #0
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800782c:	2300      	movs	r3, #0
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007830:	2303      	movs	r3, #3
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007834:	f107 031c 	add.w	r3, r7, #28
 8007838:	4619      	mov	r1, r3
 800783a:	481a      	ldr	r0, [pc, #104]	; (80078a4 <HAL_TIM_MspPostInit+0x1a0>)
 800783c:	f003 fc34 	bl	800b0a8 <HAL_GPIO_Init>
}
 8007840:	e023      	b.n	800788a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <HAL_TIM_MspPostInit+0x1b0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d11e      	bne.n	800788a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4a10      	ldr	r2, [pc, #64]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 8007856:	f043 0302 	orr.w	r3, r3, #2
 800785a:	6313      	str	r3, [r2, #48]	; 0x30
 800785c:	4b0e      	ldr	r3, [pc, #56]	; (8007898 <HAL_TIM_MspPostInit+0x194>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	60bb      	str	r3, [r7, #8]
 8007866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800786e:	2302      	movs	r3, #2
 8007870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007872:	2300      	movs	r3, #0
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007876:	2300      	movs	r3, #0
 8007878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800787a:	2303      	movs	r3, #3
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800787e:	f107 031c 	add.w	r3, r7, #28
 8007882:	4619      	mov	r1, r3
 8007884:	4807      	ldr	r0, [pc, #28]	; (80078a4 <HAL_TIM_MspPostInit+0x1a0>)
 8007886:	f003 fc0f 	bl	800b0a8 <HAL_GPIO_Init>
}
 800788a:	bf00      	nop
 800788c:	3730      	adds	r7, #48	; 0x30
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	40010000 	.word	0x40010000
 8007898:	40023800 	.word	0x40023800
 800789c:	40021000 	.word	0x40021000
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40020400 	.word	0x40020400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40020c00 	.word	0x40020c00
 80078b0:	40014400 	.word	0x40014400
 80078b4:	40014800 	.word	0x40014800

080078b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c0:	f107 0314 	add.w	r3, r7, #20
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a19      	ldr	r2, [pc, #100]	; (800793c <HAL_UART_MspInit+0x84>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d12b      	bne.n	8007932 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	4b18      	ldr	r3, [pc, #96]	; (8007940 <HAL_UART_MspInit+0x88>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	4a17      	ldr	r2, [pc, #92]	; (8007940 <HAL_UART_MspInit+0x88>)
 80078e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e8:	6413      	str	r3, [r2, #64]	; 0x40
 80078ea:	4b15      	ldr	r3, [pc, #84]	; (8007940 <HAL_UART_MspInit+0x88>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	4b11      	ldr	r3, [pc, #68]	; (8007940 <HAL_UART_MspInit+0x88>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	4a10      	ldr	r2, [pc, #64]	; (8007940 <HAL_UART_MspInit+0x88>)
 8007900:	f043 0308 	orr.w	r3, r3, #8
 8007904:	6313      	str	r3, [r2, #48]	; 0x30
 8007906:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <HAL_UART_MspInit+0x88>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007912:	2360      	movs	r3, #96	; 0x60
 8007914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007916:	2302      	movs	r3, #2
 8007918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800791e:	2303      	movs	r3, #3
 8007920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007922:	2307      	movs	r3, #7
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007926:	f107 0314 	add.w	r3, r7, #20
 800792a:	4619      	mov	r1, r3
 800792c:	4805      	ldr	r0, [pc, #20]	; (8007944 <HAL_UART_MspInit+0x8c>)
 800792e:	f003 fbbb 	bl	800b0a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007932:	bf00      	nop
 8007934:	3728      	adds	r7, #40	; 0x28
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40004400 	.word	0x40004400
 8007940:	40023800 	.word	0x40023800
 8007944:	40020c00 	.word	0x40020c00

08007948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800794c:	e7fe      	b.n	800794c <NMI_Handler+0x4>

0800794e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800794e:	b480      	push	{r7}
 8007950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007952:	e7fe      	b.n	8007952 <HardFault_Handler+0x4>

08007954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007958:	e7fe      	b.n	8007958 <MemManage_Handler+0x4>

0800795a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800795a:	b480      	push	{r7}
 800795c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800795e:	e7fe      	b.n	800795e <BusFault_Handler+0x4>

08007960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007964:	e7fe      	b.n	8007964 <UsageFault_Handler+0x4>

08007966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007966:	b480      	push	{r7}
 8007968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800796a:	bf00      	nop
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007982:	b480      	push	{r7}
 8007984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007986:	bf00      	nop
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007994:	f002 fa94 	bl	8009ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007998:	bf00      	nop
 800799a:	bd80      	pop	{r7, pc}

0800799c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80079a2:	f007 fd64 	bl	800f46e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80079a6:	4803      	ldr	r0, [pc, #12]	; (80079b4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80079a8:	f007 fd61 	bl	800f46e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80079ac:	bf00      	nop
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	2004a610 	.word	0x2004a610
 80079b4:	2004a80c 	.word	0x2004a80c

080079b8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80079bc:	4802      	ldr	r0, [pc, #8]	; (80079c8 <SDIO_IRQHandler+0x10>)
 80079be:	f005 fdfd 	bl	800d5bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	2004a96c 	.word	0x2004a96c

080079cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80079d0:	4802      	ldr	r0, [pc, #8]	; (80079dc <TIM6_DAC_IRQHandler+0x10>)
 80079d2:	f007 fd4c 	bl	800f46e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80079d6:	bf00      	nop
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	2004a8ec 	.word	0x2004a8ec

080079e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80079e4:	4802      	ldr	r0, [pc, #8]	; (80079f0 <TIM7_IRQHandler+0x10>)
 80079e6:	f007 fd42 	bl	800f46e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80079ea:	bf00      	nop
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	2004aa90 	.word	0x2004aa90

080079f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80079f8:	4802      	ldr	r0, [pc, #8]	; (8007a04 <DMA2_Stream2_IRQHandler+0x10>)
 80079fa:	f003 f8e1 	bl	800abc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	2004aa30 	.word	0x2004aa30

08007a08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007a0c:	4802      	ldr	r0, [pc, #8]	; (8007a18 <DMA2_Stream3_IRQHandler+0x10>)
 8007a0e:	f003 f8d7 	bl	800abc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	2004a558 	.word	0x2004a558

08007a1c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007a20:	4802      	ldr	r0, [pc, #8]	; (8007a2c <DMA2_Stream6_IRQHandler+0x10>)
 8007a22:	f003 f8cd 	bl	800abc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007a26:	bf00      	nop
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2004a88c 	.word	0x2004a88c

08007a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <_sbrk+0x5c>)
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <_sbrk+0x60>)
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a44:	4b13      	ldr	r3, [pc, #76]	; (8007a94 <_sbrk+0x64>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a4c:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <_sbrk+0x64>)
 8007a4e:	4a12      	ldr	r2, [pc, #72]	; (8007a98 <_sbrk+0x68>)
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a52:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <_sbrk+0x64>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d207      	bcs.n	8007a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a60:	f00d ff98 	bl	8015994 <__errno>
 8007a64:	4602      	mov	r2, r0
 8007a66:	230c      	movs	r3, #12
 8007a68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	e009      	b.n	8007a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a70:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <_sbrk+0x64>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a76:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <_sbrk+0x64>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	4a05      	ldr	r2, [pc, #20]	; (8007a94 <_sbrk+0x64>)
 8007a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20050000 	.word	0x20050000
 8007a90:	00000800 	.word	0x00000800
 8007a94:	200002a8 	.word	0x200002a8
 8007a98:	2004cbe0 	.word	0x2004cbe0

08007a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007aa0:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <SystemInit+0x28>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa6:	4a07      	ldr	r2, [pc, #28]	; (8007ac4 <SystemInit+0x28>)
 8007aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <SystemInit+0x28>)
 8007ab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	e000ed00 	.word	0xe000ed00

08007ac8 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007ac8:	b598      	push	{r3, r4, r7, lr}
 8007aca:	af00      	add	r7, sp, #0
	lcd_init();
 8007acc:	f7f9 faa4 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007ad0:	483b      	ldr	r0, [pc, #236]	; (8007bc0 <cppInit+0xf8>)
 8007ad2:	f7fd fcf7 	bl	80054c4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007ad6:	2064      	movs	r0, #100	; 0x64
 8007ad8:	f002 fa12 	bl	8009f00 <HAL_Delay>
	power_sensor.updateValues();
 8007adc:	4838      	ldr	r0, [pc, #224]	; (8007bc0 <cppInit+0xf8>)
 8007ade:	f7fd fcff 	bl	80054e0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007ae2:	f7f9 fadd 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f7f9 fae9 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007aee:	4835      	ldr	r0, [pc, #212]	; (8007bc4 <cppInit+0xfc>)
 8007af0:	f7f9 fb10 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007af4:	2101      	movs	r1, #1
 8007af6:	2000      	movs	r0, #0
 8007af8:	f7f9 fae2 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007afc:	4830      	ldr	r0, [pc, #192]	; (8007bc0 <cppInit+0xf8>)
 8007afe:	f7fd fd19 	bl	8005534 <_ZN11PowerSensor17getButteryVoltageEv>
 8007b02:	ee10 3a10 	vmov	r3, s0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7f8 fd36 	bl	8000578 <__aeabi_f2d>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	461a      	mov	r2, r3
 8007b12:	4623      	mov	r3, r4
 8007b14:	482c      	ldr	r0, [pc, #176]	; (8007bc8 <cppInit+0x100>)
 8007b16:	f7f9 fafd 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b1e:	f002 f9ef 	bl	8009f00 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007b22:	482a      	ldr	r0, [pc, #168]	; (8007bcc <cppInit+0x104>)
 8007b24:	f7fc fee8 	bl	80048f8 <_ZN6Logger10sdCardInitEv>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <cppInit+0x76>
		led.fullColor('G');
 8007b2e:	2147      	movs	r1, #71	; 0x47
 8007b30:	4827      	ldr	r0, [pc, #156]	; (8007bd0 <cppInit+0x108>)
 8007b32:	f7fa fb2f 	bl	8002194 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007b36:	2064      	movs	r0, #100	; 0x64
 8007b38:	f002 f9e2 	bl	8009f00 <HAL_Delay>
 8007b3c:	e006      	b.n	8007b4c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007b3e:	2152      	movs	r1, #82	; 0x52
 8007b40:	4823      	ldr	r0, [pc, #140]	; (8007bd0 <cppInit+0x108>)
 8007b42:	f7fa fb27 	bl	8002194 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007b46:	2064      	movs	r0, #100	; 0x64
 8007b48:	f002 f9da 	bl	8009f00 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007b4c:	4821      	ldr	r0, [pc, #132]	; (8007bd4 <cppInit+0x10c>)
 8007b4e:	f7fa fc7d 	bl	800244c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007b52:	4821      	ldr	r0, [pc, #132]	; (8007bd8 <cppInit+0x110>)
 8007b54:	f7fd f98a 	bl	8004e6c <_ZN5Motor4initEv>
	encoder.init();
 8007b58:	4820      	ldr	r0, [pc, #128]	; (8007bdc <cppInit+0x114>)
 8007b5a:	f7f9 fc63 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007b5e:	4820      	ldr	r0, [pc, #128]	; (8007be0 <cppInit+0x118>)
 8007b60:	f7fa f8c6 	bl	8001cf0 <_ZN3IMU4initEv>
	line_trace.init();
 8007b64:	481f      	ldr	r0, [pc, #124]	; (8007be4 <cppInit+0x11c>)
 8007b66:	f7fb ffbb 	bl	8003ae0 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007b6a:	481a      	ldr	r0, [pc, #104]	; (8007bd4 <cppInit+0x10c>)
 8007b6c:	f7fa fdce 	bl	800270c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b74:	f002 f9c4 	bl	8009f00 <HAL_Delay>

	led.fullColor('M');
 8007b78:	214d      	movs	r1, #77	; 0x4d
 8007b7a:	4815      	ldr	r0, [pc, #84]	; (8007bd0 <cppInit+0x108>)
 8007b7c:	f7fa fb0a 	bl	8002194 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007b80:	4817      	ldr	r0, [pc, #92]	; (8007be0 <cppInit+0x118>)
 8007b82:	f7fa f98f 	bl	8001ea4 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007b86:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007be8 <cppInit+0x120>
 8007b8a:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007bec <cppInit+0x124>
 8007b8e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007bf0 <cppInit+0x128>
 8007b92:	4818      	ldr	r0, [pc, #96]	; (8007bf4 <cppInit+0x12c>)
 8007b94:	f7fe f9cc 	bl	8005f30 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007b98:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007be8 <cppInit+0x120>
 8007b9c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007bf8 <cppInit+0x130>
 8007ba0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007bfc <cppInit+0x134>
 8007ba4:	4813      	ldr	r0, [pc, #76]	; (8007bf4 <cppInit+0x12c>)
 8007ba6:	f7fe f9dc 	bl	8005f62 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007baa:	4815      	ldr	r0, [pc, #84]	; (8007c00 <cppInit+0x138>)
 8007bac:	f7fd fb94 	bl	80052d8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007bb0:	4814      	ldr	r0, [pc, #80]	; (8007c04 <cppInit+0x13c>)
 8007bb2:	f7fd fc2b 	bl	800540c <_ZN13PathFollowing4initEv>

	esc.init();
 8007bb6:	4814      	ldr	r0, [pc, #80]	; (8007c08 <cppInit+0x140>)
 8007bb8:	f7f9 fb18 	bl	80011ec <_ZN3ESC4initEv>

}
 8007bbc:	bf00      	nop
 8007bbe:	bd98      	pop	{r3, r4, r7, pc}
 8007bc0:	200005c0 	.word	0x200005c0
 8007bc4:	08019fdc 	.word	0x08019fdc
 8007bc8:	08019fe4 	.word	0x08019fe4
 8007bcc:	200005e0 	.word	0x200005e0
 8007bd0:	200005bc 	.word	0x200005bc
 8007bd4:	200002ac 	.word	0x200002ac
 8007bd8:	200005b8 	.word	0x200005b8
 8007bdc:	2002386c 	.word	0x2002386c
 8007be0:	200005cc 	.word	0x200005cc
 8007be4:	2002390c 	.word	0x2002390c
 8007be8:	00000000 	.word	0x00000000
 8007bec:	4129999a 	.word	0x4129999a
 8007bf0:	3f99999a 	.word	0x3f99999a
 8007bf4:	2002388c 	.word	0x2002388c
 8007bf8:	3f5e3fbc 	.word	0x3f5e3fbc
 8007bfc:	3d75c28f 	.word	0x3d75c28f
 8007c00:	200238c8 	.word	0x200238c8
 8007c04:	20030a58 	.word	0x20030a58
 8007c08:	20023908 	.word	0x20023908

08007c0c <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007c10:	480e      	ldr	r0, [pc, #56]	; (8007c4c <cppFlip1ms+0x40>)
 8007c12:	f7fa fc79 	bl	8002508 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007c16:	480e      	ldr	r0, [pc, #56]	; (8007c50 <cppFlip1ms+0x44>)
 8007c18:	f7fa f892 	bl	8001d40 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007c1c:	480d      	ldr	r0, [pc, #52]	; (8007c54 <cppFlip1ms+0x48>)
 8007c1e:	f7f9 fc23 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007c22:	480d      	ldr	r0, [pc, #52]	; (8007c58 <cppFlip1ms+0x4c>)
 8007c24:	f7fc fa02 	bl	800402c <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007c28:	480c      	ldr	r0, [pc, #48]	; (8007c5c <cppFlip1ms+0x50>)
 8007c2a:	f7fe f9b3 	bl	8005f94 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007c2e:	480c      	ldr	r0, [pc, #48]	; (8007c60 <cppFlip1ms+0x54>)
 8007c30:	f7fd fb36 	bl	80052a0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007c34:	480b      	ldr	r0, [pc, #44]	; (8007c64 <cppFlip1ms+0x58>)
 8007c36:	f7fd fcf9 	bl	800562c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007c3a:	480b      	ldr	r0, [pc, #44]	; (8007c68 <cppFlip1ms+0x5c>)
 8007c3c:	f7fd f928 	bl	8004e90 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007c40:	4804      	ldr	r0, [pc, #16]	; (8007c54 <cppFlip1ms+0x48>)
 8007c42:	f7f9 fcfb 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007c46:	bf00      	nop
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	200002ac 	.word	0x200002ac
 8007c50:	200005cc 	.word	0x200005cc
 8007c54:	2002386c 	.word	0x2002386c
 8007c58:	2002390c 	.word	0x2002390c
 8007c5c:	2002388c 	.word	0x2002388c
 8007c60:	200238c8 	.word	0x200238c8
 8007c64:	200005a4 	.word	0x200005a4
 8007c68:	200005b8 	.word	0x200005b8

08007c6c <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007c70:	4802      	ldr	r0, [pc, #8]	; (8007c7c <cppFlip100ns+0x10>)
 8007c72:	f7fa fbfb 	bl	800246c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007c76:	bf00      	nop
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200002ac 	.word	0x200002ac

08007c80 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007c84:	480a      	ldr	r0, [pc, #40]	; (8007cb0 <cppFlip10ms+0x30>)
 8007c86:	f7fc f904 	bl	8003e92 <_ZN9LineTrace17getTargetVelocityEv>
 8007c8a:	eef0 7a40 	vmov.f32	s15, s0
 8007c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <cppFlip10ms+0x34>)
 8007c94:	f7fc fe78 	bl	8004988 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007c98:	4807      	ldr	r0, [pc, #28]	; (8007cb8 <cppFlip10ms+0x38>)
 8007c9a:	f7fe f9bd 	bl	8006018 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007c9e:	eef0 7a40 	vmov.f32	s15, s0
 8007ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca6:	4803      	ldr	r0, [pc, #12]	; (8007cb4 <cppFlip10ms+0x34>)
 8007ca8:	f7fc feab 	bl	8004a02 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007cac:	bf00      	nop
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	2002390c 	.word	0x2002390c
 8007cb4:	200005e0 	.word	0x200005e0
 8007cb8:	2002388c 	.word	0x2002388c
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007cc6:	4baf      	ldr	r3, [pc, #700]	; (8007f84 <cppLoop+0x2c4>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f3bf 8f5b 	dmb	ish
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bf0c      	ite	eq
 8007cd8:	2301      	moveq	r3, #1
 8007cda:	2300      	movne	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d015      	beq.n	8007d0e <cppLoop+0x4e>
 8007ce2:	48a8      	ldr	r0, [pc, #672]	; (8007f84 <cppLoop+0x2c4>)
 8007ce4:	f00c fdf1 	bl	80148ca <__cxa_guard_acquire>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	bf14      	ite	ne
 8007cee:	2301      	movne	r3, #1
 8007cf0:	2300      	moveq	r3, #0
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <cppLoop+0x4e>
 8007cf8:	48a3      	ldr	r0, [pc, #652]	; (8007f88 <cppLoop+0x2c8>)
 8007cfa:	f7fb fff8 	bl	8003cee <_ZN9LineTrace5getKpEv>
 8007cfe:	eef0 7a40 	vmov.f32	s15, s0
 8007d02:	4ba2      	ldr	r3, [pc, #648]	; (8007f8c <cppLoop+0x2cc>)
 8007d04:	edc3 7a00 	vstr	s15, [r3]
 8007d08:	489e      	ldr	r0, [pc, #632]	; (8007f84 <cppLoop+0x2c4>)
 8007d0a:	f00c fdea 	bl	80148e2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007d0e:	4ba0      	ldr	r3, [pc, #640]	; (8007f90 <cppLoop+0x2d0>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f3bf 8f5b 	dmb	ish
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d015      	beq.n	8007d56 <cppLoop+0x96>
 8007d2a:	4899      	ldr	r0, [pc, #612]	; (8007f90 <cppLoop+0x2d0>)
 8007d2c:	f00c fdcd 	bl	80148ca <__cxa_guard_acquire>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bf14      	ite	ne
 8007d36:	2301      	movne	r3, #1
 8007d38:	2300      	moveq	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <cppLoop+0x96>
 8007d40:	4891      	ldr	r0, [pc, #580]	; (8007f88 <cppLoop+0x2c8>)
 8007d42:	f7fb ffe3 	bl	8003d0c <_ZN9LineTrace5getKiEv>
 8007d46:	eef0 7a40 	vmov.f32	s15, s0
 8007d4a:	4b92      	ldr	r3, [pc, #584]	; (8007f94 <cppLoop+0x2d4>)
 8007d4c:	edc3 7a00 	vstr	s15, [r3]
 8007d50:	488f      	ldr	r0, [pc, #572]	; (8007f90 <cppLoop+0x2d0>)
 8007d52:	f00c fdc6 	bl	80148e2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007d56:	4b90      	ldr	r3, [pc, #576]	; (8007f98 <cppLoop+0x2d8>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f3bf 8f5b 	dmb	ish
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d015      	beq.n	8007d9e <cppLoop+0xde>
 8007d72:	4889      	ldr	r0, [pc, #548]	; (8007f98 <cppLoop+0x2d8>)
 8007d74:	f00c fda9 	bl	80148ca <__cxa_guard_acquire>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf14      	ite	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	2300      	moveq	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00a      	beq.n	8007d9e <cppLoop+0xde>
 8007d88:	487f      	ldr	r0, [pc, #508]	; (8007f88 <cppLoop+0x2c8>)
 8007d8a:	f7fb ffce 	bl	8003d2a <_ZN9LineTrace5getKdEv>
 8007d8e:	eef0 7a40 	vmov.f32	s15, s0
 8007d92:	4b82      	ldr	r3, [pc, #520]	; (8007f9c <cppLoop+0x2dc>)
 8007d94:	edc3 7a00 	vstr	s15, [r3]
 8007d98:	487f      	ldr	r0, [pc, #508]	; (8007f98 <cppLoop+0x2d8>)
 8007d9a:	f00c fda2 	bl	80148e2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007d9e:	4b80      	ldr	r3, [pc, #512]	; (8007fa0 <cppLoop+0x2e0>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	f3bf 8f5b 	dmb	ish
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf0c      	ite	eq
 8007db0:	2301      	moveq	r3, #1
 8007db2:	2300      	movne	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d015      	beq.n	8007de6 <cppLoop+0x126>
 8007dba:	4879      	ldr	r0, [pc, #484]	; (8007fa0 <cppLoop+0x2e0>)
 8007dbc:	f00c fd85 	bl	80148ca <__cxa_guard_acquire>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <cppLoop+0x126>
 8007dd0:	486d      	ldr	r0, [pc, #436]	; (8007f88 <cppLoop+0x2c8>)
 8007dd2:	f7fb ffd2 	bl	8003d7a <_ZN9LineTrace9getKpSlowEv>
 8007dd6:	eef0 7a40 	vmov.f32	s15, s0
 8007dda:	4b72      	ldr	r3, [pc, #456]	; (8007fa4 <cppLoop+0x2e4>)
 8007ddc:	edc3 7a00 	vstr	s15, [r3]
 8007de0:	486f      	ldr	r0, [pc, #444]	; (8007fa0 <cppLoop+0x2e0>)
 8007de2:	f00c fd7e 	bl	80148e2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007de6:	4b70      	ldr	r3, [pc, #448]	; (8007fa8 <cppLoop+0x2e8>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f3bf 8f5b 	dmb	ish
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d015      	beq.n	8007e2e <cppLoop+0x16e>
 8007e02:	4869      	ldr	r0, [pc, #420]	; (8007fa8 <cppLoop+0x2e8>)
 8007e04:	f00c fd61 	bl	80148ca <__cxa_guard_acquire>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	2300      	moveq	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <cppLoop+0x16e>
 8007e18:	485b      	ldr	r0, [pc, #364]	; (8007f88 <cppLoop+0x2c8>)
 8007e1a:	f7fb ffbd 	bl	8003d98 <_ZN9LineTrace9getKiSlowEv>
 8007e1e:	eef0 7a40 	vmov.f32	s15, s0
 8007e22:	4b62      	ldr	r3, [pc, #392]	; (8007fac <cppLoop+0x2ec>)
 8007e24:	edc3 7a00 	vstr	s15, [r3]
 8007e28:	485f      	ldr	r0, [pc, #380]	; (8007fa8 <cppLoop+0x2e8>)
 8007e2a:	f00c fd5a 	bl	80148e2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007e2e:	4b60      	ldr	r3, [pc, #384]	; (8007fb0 <cppLoop+0x2f0>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	f3bf 8f5b 	dmb	ish
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bf0c      	ite	eq
 8007e40:	2301      	moveq	r3, #1
 8007e42:	2300      	movne	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d015      	beq.n	8007e76 <cppLoop+0x1b6>
 8007e4a:	4859      	ldr	r0, [pc, #356]	; (8007fb0 <cppLoop+0x2f0>)
 8007e4c:	f00c fd3d 	bl	80148ca <__cxa_guard_acquire>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bf14      	ite	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	2300      	moveq	r3, #0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <cppLoop+0x1b6>
 8007e60:	4849      	ldr	r0, [pc, #292]	; (8007f88 <cppLoop+0x2c8>)
 8007e62:	f7fb ffa8 	bl	8003db6 <_ZN9LineTrace9getKdSlowEv>
 8007e66:	eef0 7a40 	vmov.f32	s15, s0
 8007e6a:	4b52      	ldr	r3, [pc, #328]	; (8007fb4 <cppLoop+0x2f4>)
 8007e6c:	edc3 7a00 	vstr	s15, [r3]
 8007e70:	484f      	ldr	r0, [pc, #316]	; (8007fb0 <cppLoop+0x2f0>)
 8007e72:	f00c fd36 	bl	80148e2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007e76:	4b50      	ldr	r3, [pc, #320]	; (8007fb8 <cppLoop+0x2f8>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f3bf 8f5b 	dmb	ish
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bf0c      	ite	eq
 8007e88:	2301      	moveq	r3, #1
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d015      	beq.n	8007ebe <cppLoop+0x1fe>
 8007e92:	4849      	ldr	r0, [pc, #292]	; (8007fb8 <cppLoop+0x2f8>)
 8007e94:	f00c fd19 	bl	80148ca <__cxa_guard_acquire>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <cppLoop+0x1fe>
 8007ea8:	4837      	ldr	r0, [pc, #220]	; (8007f88 <cppLoop+0x2c8>)
 8007eaa:	f7fb fff2 	bl	8003e92 <_ZN9LineTrace17getTargetVelocityEv>
 8007eae:	eef0 7a40 	vmov.f32	s15, s0
 8007eb2:	4b42      	ldr	r3, [pc, #264]	; (8007fbc <cppLoop+0x2fc>)
 8007eb4:	edc3 7a00 	vstr	s15, [r3]
 8007eb8:	483f      	ldr	r0, [pc, #252]	; (8007fb8 <cppLoop+0x2f8>)
 8007eba:	f00c fd12 	bl	80148e2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007ebe:	4b40      	ldr	r3, [pc, #256]	; (8007fc0 <cppLoop+0x300>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f3bf 8f5b 	dmb	ish
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bf0c      	ite	eq
 8007ed0:	2301      	moveq	r3, #1
 8007ed2:	2300      	movne	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d015      	beq.n	8007f06 <cppLoop+0x246>
 8007eda:	4839      	ldr	r0, [pc, #228]	; (8007fc0 <cppLoop+0x300>)
 8007edc:	f00c fcf5 	bl	80148ca <__cxa_guard_acquire>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bf14      	ite	ne
 8007ee6:	2301      	movne	r3, #1
 8007ee8:	2300      	moveq	r3, #0
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <cppLoop+0x246>
 8007ef0:	4825      	ldr	r0, [pc, #148]	; (8007f88 <cppLoop+0x2c8>)
 8007ef2:	f7fb ffde 	bl	8003eb2 <_ZN9LineTrace14getMaxVelocityEv>
 8007ef6:	eef0 7a40 	vmov.f32	s15, s0
 8007efa:	4b32      	ldr	r3, [pc, #200]	; (8007fc4 <cppLoop+0x304>)
 8007efc:	edc3 7a00 	vstr	s15, [r3]
 8007f00:	482f      	ldr	r0, [pc, #188]	; (8007fc0 <cppLoop+0x300>)
 8007f02:	f00c fcee 	bl	80148e2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007f06:	4b30      	ldr	r3, [pc, #192]	; (8007fc8 <cppLoop+0x308>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f3bf 8f5b 	dmb	ish
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d015      	beq.n	8007f4e <cppLoop+0x28e>
 8007f22:	4829      	ldr	r0, [pc, #164]	; (8007fc8 <cppLoop+0x308>)
 8007f24:	f00c fcd1 	bl	80148ca <__cxa_guard_acquire>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <cppLoop+0x28e>
 8007f38:	4813      	ldr	r0, [pc, #76]	; (8007f88 <cppLoop+0x2c8>)
 8007f3a:	f7fb ffca 	bl	8003ed2 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007f3e:	eef0 7a40 	vmov.f32	s15, s0
 8007f42:	4b22      	ldr	r3, [pc, #136]	; (8007fcc <cppLoop+0x30c>)
 8007f44:	edc3 7a00 	vstr	s15, [r3]
 8007f48:	481f      	ldr	r0, [pc, #124]	; (8007fc8 <cppLoop+0x308>)
 8007f4a:	f00c fcca 	bl	80148e2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007f4e:	4b20      	ldr	r3, [pc, #128]	; (8007fd0 <cppLoop+0x310>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f3bf 8f5b 	dmb	ish
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03f      	beq.n	8007fea <cppLoop+0x32a>
 8007f6a:	4819      	ldr	r0, [pc, #100]	; (8007fd0 <cppLoop+0x310>)
 8007f6c:	f00c fcad 	bl	80148ca <__cxa_guard_acquire>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bf14      	ite	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	2300      	moveq	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d034      	beq.n	8007fea <cppLoop+0x32a>
 8007f80:	e028      	b.n	8007fd4 <cppLoop+0x314>
 8007f82:	bf00      	nop
 8007f84:	20048190 	.word	0x20048190
 8007f88:	2002390c 	.word	0x2002390c
 8007f8c:	2004818c 	.word	0x2004818c
 8007f90:	20048198 	.word	0x20048198
 8007f94:	20048194 	.word	0x20048194
 8007f98:	200481a0 	.word	0x200481a0
 8007f9c:	2004819c 	.word	0x2004819c
 8007fa0:	200481a8 	.word	0x200481a8
 8007fa4:	200481a4 	.word	0x200481a4
 8007fa8:	200481b0 	.word	0x200481b0
 8007fac:	200481ac 	.word	0x200481ac
 8007fb0:	200481b8 	.word	0x200481b8
 8007fb4:	200481b4 	.word	0x200481b4
 8007fb8:	200481c0 	.word	0x200481c0
 8007fbc:	200481bc 	.word	0x200481bc
 8007fc0:	200481c8 	.word	0x200481c8
 8007fc4:	200481c4 	.word	0x200481c4
 8007fc8:	200481d0 	.word	0x200481d0
 8007fcc:	200481cc 	.word	0x200481cc
 8007fd0:	200481d8 	.word	0x200481d8
 8007fd4:	48b6      	ldr	r0, [pc, #728]	; (80082b0 <cppLoop+0x5f0>)
 8007fd6:	f7fb ff8c 	bl	8003ef2 <_ZN9LineTrace14getMinVelocityEv>
 8007fda:	eef0 7a40 	vmov.f32	s15, s0
 8007fde:	4bb5      	ldr	r3, [pc, #724]	; (80082b4 <cppLoop+0x5f4>)
 8007fe0:	edc3 7a00 	vstr	s15, [r3]
 8007fe4:	48b4      	ldr	r0, [pc, #720]	; (80082b8 <cppLoop+0x5f8>)
 8007fe6:	f00c fc7c 	bl	80148e2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007fea:	4bb4      	ldr	r3, [pc, #720]	; (80082bc <cppLoop+0x5fc>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f3bf 8f5b 	dmb	ish
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bf0c      	ite	eq
 8007ffc:	2301      	moveq	r3, #1
 8007ffe:	2300      	movne	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d015      	beq.n	8008032 <cppLoop+0x372>
 8008006:	48ad      	ldr	r0, [pc, #692]	; (80082bc <cppLoop+0x5fc>)
 8008008:	f00c fc5f 	bl	80148ca <__cxa_guard_acquire>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	bf14      	ite	ne
 8008012:	2301      	movne	r3, #1
 8008014:	2300      	moveq	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <cppLoop+0x372>
 800801c:	48a4      	ldr	r0, [pc, #656]	; (80082b0 <cppLoop+0x5f0>)
 800801e:	f7fb ff78 	bl	8003f12 <_ZN9LineTrace15getMinVelocity2Ev>
 8008022:	eef0 7a40 	vmov.f32	s15, s0
 8008026:	4ba6      	ldr	r3, [pc, #664]	; (80082c0 <cppLoop+0x600>)
 8008028:	edc3 7a00 	vstr	s15, [r3]
 800802c:	48a3      	ldr	r0, [pc, #652]	; (80082bc <cppLoop+0x5fc>)
 800802e:	f00c fc58 	bl	80148e2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8008032:	4ba4      	ldr	r3, [pc, #656]	; (80082c4 <cppLoop+0x604>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	f3bf 8f5b 	dmb	ish
 800803a:	b2db      	uxtb	r3, r3
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d015      	beq.n	800807a <cppLoop+0x3ba>
 800804e:	489d      	ldr	r0, [pc, #628]	; (80082c4 <cppLoop+0x604>)
 8008050:	f00c fc3b 	bl	80148ca <__cxa_guard_acquire>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	bf14      	ite	ne
 800805a:	2301      	movne	r3, #1
 800805c:	2300      	moveq	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <cppLoop+0x3ba>
 8008064:	4892      	ldr	r0, [pc, #584]	; (80082b0 <cppLoop+0x5f0>)
 8008066:	f7fb ff98 	bl	8003f9a <_ZN9LineTrace9getMaxAccEv>
 800806a:	eef0 7a40 	vmov.f32	s15, s0
 800806e:	4b96      	ldr	r3, [pc, #600]	; (80082c8 <cppLoop+0x608>)
 8008070:	edc3 7a00 	vstr	s15, [r3]
 8008074:	4893      	ldr	r0, [pc, #588]	; (80082c4 <cppLoop+0x604>)
 8008076:	f00c fc34 	bl	80148e2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800807a:	4b94      	ldr	r3, [pc, #592]	; (80082cc <cppLoop+0x60c>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f3bf 8f5b 	dmb	ish
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d015      	beq.n	80080c2 <cppLoop+0x402>
 8008096:	488d      	ldr	r0, [pc, #564]	; (80082cc <cppLoop+0x60c>)
 8008098:	f00c fc17 	bl	80148ca <__cxa_guard_acquire>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <cppLoop+0x402>
 80080ac:	4880      	ldr	r0, [pc, #512]	; (80082b0 <cppLoop+0x5f0>)
 80080ae:	f7fb ffaa 	bl	8004006 <_ZN9LineTrace9getMaxDecEv>
 80080b2:	eef0 7a40 	vmov.f32	s15, s0
 80080b6:	4b86      	ldr	r3, [pc, #536]	; (80082d0 <cppLoop+0x610>)
 80080b8:	edc3 7a00 	vstr	s15, [r3]
 80080bc:	4883      	ldr	r0, [pc, #524]	; (80082cc <cppLoop+0x60c>)
 80080be:	f00c fc10 	bl	80148e2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 80080c2:	4b84      	ldr	r3, [pc, #528]	; (80082d4 <cppLoop+0x614>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	f3bf 8f5b 	dmb	ish
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bf0c      	ite	eq
 80080d4:	2301      	moveq	r3, #1
 80080d6:	2300      	movne	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d015      	beq.n	800810a <cppLoop+0x44a>
 80080de:	487d      	ldr	r0, [pc, #500]	; (80082d4 <cppLoop+0x614>)
 80080e0:	f00c fbf3 	bl	80148ca <__cxa_guard_acquire>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bf14      	ite	ne
 80080ea:	2301      	movne	r3, #1
 80080ec:	2300      	moveq	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <cppLoop+0x44a>
 80080f4:	486e      	ldr	r0, [pc, #440]	; (80082b0 <cppLoop+0x5f0>)
 80080f6:	f7fb ff74 	bl	8003fe2 <_ZN9LineTrace10getMaxAcc2Ev>
 80080fa:	eef0 7a40 	vmov.f32	s15, s0
 80080fe:	4b76      	ldr	r3, [pc, #472]	; (80082d8 <cppLoop+0x618>)
 8008100:	edc3 7a00 	vstr	s15, [r3]
 8008104:	4873      	ldr	r0, [pc, #460]	; (80082d4 <cppLoop+0x614>)
 8008106:	f00c fbec 	bl	80148e2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 800810a:	4b74      	ldr	r3, [pc, #464]	; (80082dc <cppLoop+0x61c>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	f3bf 8f5b 	dmb	ish
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	bf0c      	ite	eq
 800811c:	2301      	moveq	r3, #1
 800811e:	2300      	movne	r3, #0
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d015      	beq.n	8008152 <cppLoop+0x492>
 8008126:	486d      	ldr	r0, [pc, #436]	; (80082dc <cppLoop+0x61c>)
 8008128:	f00c fbcf 	bl	80148ca <__cxa_guard_acquire>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	bf14      	ite	ne
 8008132:	2301      	movne	r3, #1
 8008134:	2300      	moveq	r3, #0
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <cppLoop+0x492>
 800813c:	485c      	ldr	r0, [pc, #368]	; (80082b0 <cppLoop+0x5f0>)
 800813e:	f7fb ff3e 	bl	8003fbe <_ZN9LineTrace10getMaxDec2Ev>
 8008142:	eef0 7a40 	vmov.f32	s15, s0
 8008146:	4b66      	ldr	r3, [pc, #408]	; (80082e0 <cppLoop+0x620>)
 8008148:	edc3 7a00 	vstr	s15, [r3]
 800814c:	4863      	ldr	r0, [pc, #396]	; (80082dc <cppLoop+0x61c>)
 800814e:	f00c fbc8 	bl	80148e2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8008152:	4864      	ldr	r0, [pc, #400]	; (80082e4 <cppLoop+0x624>)
 8008154:	f7fd f9fe 	bl	8005554 <_ZN12RotarySwitch8getValueEv>
 8008158:	4603      	mov	r3, r0
 800815a:	2b0f      	cmp	r3, #15
 800815c:	f201 8586 	bhi.w	8009c6c <cppLoop+0x1fac>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <cppLoop+0x4a8>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	080081a9 	.word	0x080081a9
 800816c:	0800852d 	.word	0x0800852d
 8008170:	08008649 	.word	0x08008649
 8008174:	0800879b 	.word	0x0800879b
 8008178:	0800888f 	.word	0x0800888f
 800817c:	08008b31 	.word	0x08008b31
 8008180:	08008c99 	.word	0x08008c99
 8008184:	08008f1d 	.word	0x08008f1d
 8008188:	08009167 	.word	0x08009167
 800818c:	080093f7 	.word	0x080093f7
 8008190:	080094b3 	.word	0x080094b3
 8008194:	080095a9 	.word	0x080095a9
 8008198:	0800962f 	.word	0x0800962f
 800819c:	080096f5 	.word	0x080096f5
 80081a0:	080097bb 	.word	0x080097bb
 80081a4:	080098fd 	.word	0x080098fd
	case 0:
		led.fullColor('W');
 80081a8:	2157      	movs	r1, #87	; 0x57
 80081aa:	484f      	ldr	r0, [pc, #316]	; (80082e8 <cppLoop+0x628>)
 80081ac:	f7f9 fff2 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80081b0:	f7f8 ff76 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081b4:	2100      	movs	r1, #0
 80081b6:	2000      	movs	r0, #0
 80081b8:	f7f8 ff82 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 80081bc:	483c      	ldr	r0, [pc, #240]	; (80082b0 <cppLoop+0x5f0>)
 80081be:	f7fb fddc 	bl	8003d7a <_ZN9LineTrace9getKpSlowEv>
 80081c2:	eeb0 7a40 	vmov.f32	s14, s0
 80081c6:	eddf 7a49 	vldr	s15, [pc, #292]	; 80082ec <cppLoop+0x62c>
 80081ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ce:	eeb0 0a67 	vmov.f32	s0, s15
 80081d2:	f7fa fc0b 	bl	80029ec <_ZSt3absf>
 80081d6:	ee10 3a10 	vmov	r3, s0
 80081da:	4618      	mov	r0, r3
 80081dc:	f7f8 f9cc 	bl	8000578 <__aeabi_f2d>
 80081e0:	4603      	mov	r3, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	461a      	mov	r2, r3
 80081e6:	4623      	mov	r3, r4
 80081e8:	4841      	ldr	r0, [pc, #260]	; (80082f0 <cppLoop+0x630>)
 80081ea:	f7f8 ff93 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081ee:	2101      	movs	r1, #1
 80081f0:	2000      	movs	r0, #0
 80081f2:	f7f8 ff65 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 80081f6:	482e      	ldr	r0, [pc, #184]	; (80082b0 <cppLoop+0x5f0>)
 80081f8:	f7fb fdce 	bl	8003d98 <_ZN9LineTrace9getKiSlowEv>
 80081fc:	eeb0 7a40 	vmov.f32	s14, s0
 8008200:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80082f4 <cppLoop+0x634>
 8008204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008208:	eeb0 0a67 	vmov.f32	s0, s15
 800820c:	f7fa fbee 	bl	80029ec <_ZSt3absf>
 8008210:	ee10 3a10 	vmov	r3, s0
 8008214:	4618      	mov	r0, r3
 8008216:	f7f8 f9af 	bl	8000578 <__aeabi_f2d>
 800821a:	4605      	mov	r5, r0
 800821c:	460e      	mov	r6, r1
 800821e:	4824      	ldr	r0, [pc, #144]	; (80082b0 <cppLoop+0x5f0>)
 8008220:	f7fb fdc9 	bl	8003db6 <_ZN9LineTrace9getKdSlowEv>
 8008224:	eeb0 7a40 	vmov.f32	s14, s0
 8008228:	eddf 7a33 	vldr	s15, [pc, #204]	; 80082f8 <cppLoop+0x638>
 800822c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008230:	eeb0 0a67 	vmov.f32	s0, s15
 8008234:	f7fa fbda 	bl	80029ec <_ZSt3absf>
 8008238:	ee10 3a10 	vmov	r3, s0
 800823c:	4618      	mov	r0, r3
 800823e:	f7f8 f99b 	bl	8000578 <__aeabi_f2d>
 8008242:	4603      	mov	r3, r0
 8008244:	460c      	mov	r4, r1
 8008246:	e9cd 3400 	strd	r3, r4, [sp]
 800824a:	462a      	mov	r2, r5
 800824c:	4633      	mov	r3, r6
 800824e:	482b      	ldr	r0, [pc, #172]	; (80082fc <cppLoop+0x63c>)
 8008250:	f7f8 ff60 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008254:	482a      	ldr	r0, [pc, #168]	; (8008300 <cppLoop+0x640>)
 8008256:	f7f9 ff39 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800825a:	4603      	mov	r3, r0
 800825c:	2b08      	cmp	r3, #8
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d04e      	beq.n	8008308 <cppLoop+0x648>
			led.LR(-1, 1);
 800826a:	2201      	movs	r2, #1
 800826c:	f04f 31ff 	mov.w	r1, #4294967295
 8008270:	481d      	ldr	r0, [pc, #116]	; (80082e8 <cppLoop+0x628>)
 8008272:	f7fa f84b 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008276:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800827a:	f001 fe41 	bl	8009f00 <HAL_Delay>

			selector++;
 800827e:	4b21      	ldr	r3, [pc, #132]	; (8008304 <cppLoop+0x644>)
 8008280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008284:	b29b      	uxth	r3, r3
 8008286:	3301      	adds	r3, #1
 8008288:	b29b      	uxth	r3, r3
 800828a:	b21a      	sxth	r2, r3
 800828c:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <cppLoop+0x644>)
 800828e:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008290:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <cppLoop+0x644>)
 8008292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008296:	2b02      	cmp	r3, #2
 8008298:	dd02      	ble.n	80082a0 <cppLoop+0x5e0>
 800829a:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <cppLoop+0x644>)
 800829c:	2200      	movs	r2, #0
 800829e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80082a0:	2200      	movs	r2, #0
 80082a2:	f04f 31ff 	mov.w	r1, #4294967295
 80082a6:	4810      	ldr	r0, [pc, #64]	; (80082e8 <cppLoop+0x628>)
 80082a8:	f7fa f830 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 80082ac:	f001 bce0 	b.w	8009c70 <cppLoop+0x1fb0>
 80082b0:	2002390c 	.word	0x2002390c
 80082b4:	200481d4 	.word	0x200481d4
 80082b8:	200481d8 	.word	0x200481d8
 80082bc:	200481e0 	.word	0x200481e0
 80082c0:	200481dc 	.word	0x200481dc
 80082c4:	200481e8 	.word	0x200481e8
 80082c8:	200481e4 	.word	0x200481e4
 80082cc:	200481f0 	.word	0x200481f0
 80082d0:	200481ec 	.word	0x200481ec
 80082d4:	200481f8 	.word	0x200481f8
 80082d8:	200481f4 	.word	0x200481f4
 80082dc:	20048200 	.word	0x20048200
 80082e0:	200481fc 	.word	0x200481fc
 80082e4:	200005b4 	.word	0x200005b4
 80082e8:	200005bc 	.word	0x200005bc
 80082ec:	447a0000 	.word	0x447a0000
 80082f0:	08019fe8 	.word	0x08019fe8
 80082f4:	42c80000 	.word	0x42c80000
 80082f8:	461c4000 	.word	0x461c4000
 80082fc:	08019ff4 	.word	0x08019ff4
 8008300:	200005b0 	.word	0x200005b0
 8008304:	20048180 	.word	0x20048180
		else if(joy_stick.getValue() == JOY_R){
 8008308:	48bd      	ldr	r0, [pc, #756]	; (8008600 <cppLoop+0x940>)
 800830a:	f7f9 fedf 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800830e:	4603      	mov	r3, r0
 8008310:	2b10      	cmp	r3, #16
 8008312:	bf0c      	ite	eq
 8008314:	2301      	moveq	r3, #1
 8008316:	2300      	movne	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d059      	beq.n	80083d2 <cppLoop+0x712>
			led.LR(-1, 1);
 800831e:	2201      	movs	r2, #1
 8008320:	f04f 31ff 	mov.w	r1, #4294967295
 8008324:	48b7      	ldr	r0, [pc, #732]	; (8008604 <cppLoop+0x944>)
 8008326:	f7f9 fff1 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800832a:	2064      	movs	r0, #100	; 0x64
 800832c:	f001 fde8 	bl	8009f00 <HAL_Delay>
			if(selector == 0){
 8008330:	4bb5      	ldr	r3, [pc, #724]	; (8008608 <cppLoop+0x948>)
 8008332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d113      	bne.n	8008362 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 800833a:	4bb4      	ldr	r3, [pc, #720]	; (800860c <cppLoop+0x94c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7f8 f91a 	bl	8000578 <__aeabi_f2d>
 8008344:	a3a8      	add	r3, pc, #672	; (adr r3, 80085e8 <cppLoop+0x928>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ffb7 	bl	80002bc <__adddf3>
 800834e:	4603      	mov	r3, r0
 8008350:	460c      	mov	r4, r1
 8008352:	4618      	mov	r0, r3
 8008354:	4621      	mov	r1, r4
 8008356:	f7f8 fc5f 	bl	8000c18 <__aeabi_d2f>
 800835a:	4602      	mov	r2, r0
 800835c:	4bab      	ldr	r3, [pc, #684]	; (800860c <cppLoop+0x94c>)
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e02b      	b.n	80083ba <cppLoop+0x6fa>
			else if(selector == 1){
 8008362:	4ba9      	ldr	r3, [pc, #676]	; (8008608 <cppLoop+0x948>)
 8008364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d113      	bne.n	8008394 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 800836c:	4ba8      	ldr	r3, [pc, #672]	; (8008610 <cppLoop+0x950>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7f8 f901 	bl	8000578 <__aeabi_f2d>
 8008376:	a39e      	add	r3, pc, #632	; (adr r3, 80085f0 <cppLoop+0x930>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 ff9e 	bl	80002bc <__adddf3>
 8008380:	4603      	mov	r3, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4618      	mov	r0, r3
 8008386:	4621      	mov	r1, r4
 8008388:	f7f8 fc46 	bl	8000c18 <__aeabi_d2f>
 800838c:	4602      	mov	r2, r0
 800838e:	4ba0      	ldr	r3, [pc, #640]	; (8008610 <cppLoop+0x950>)
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e012      	b.n	80083ba <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008394:	4b9f      	ldr	r3, [pc, #636]	; (8008614 <cppLoop+0x954>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7f8 f8ed 	bl	8000578 <__aeabi_f2d>
 800839e:	a396      	add	r3, pc, #600	; (adr r3, 80085f8 <cppLoop+0x938>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f7 ff8a 	bl	80002bc <__adddf3>
 80083a8:	4603      	mov	r3, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	4618      	mov	r0, r3
 80083ae:	4621      	mov	r1, r4
 80083b0:	f7f8 fc32 	bl	8000c18 <__aeabi_d2f>
 80083b4:	4602      	mov	r2, r0
 80083b6:	4b97      	ldr	r3, [pc, #604]	; (8008614 <cppLoop+0x954>)
 80083b8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80083ba:	2152      	movs	r1, #82	; 0x52
 80083bc:	4891      	ldr	r0, [pc, #580]	; (8008604 <cppLoop+0x944>)
 80083be:	f7f9 fee9 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80083c2:	2200      	movs	r2, #0
 80083c4:	f04f 31ff 	mov.w	r1, #4294967295
 80083c8:	488e      	ldr	r0, [pc, #568]	; (8008604 <cppLoop+0x944>)
 80083ca:	f7f9 ff9f 	bl	800230c <_ZN3LED2LREaa>
		break;
 80083ce:	f001 bc4f 	b.w	8009c70 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_L){
 80083d2:	488b      	ldr	r0, [pc, #556]	; (8008600 <cppLoop+0x940>)
 80083d4:	f7f9 fe7a 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b01      	cmp	r3, #1
 80083dc:	bf0c      	ite	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	2300      	movne	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d059      	beq.n	800849c <cppLoop+0x7dc>
			led.LR(-1, 1);
 80083e8:	2201      	movs	r2, #1
 80083ea:	f04f 31ff 	mov.w	r1, #4294967295
 80083ee:	4885      	ldr	r0, [pc, #532]	; (8008604 <cppLoop+0x944>)
 80083f0:	f7f9 ff8c 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083f4:	2064      	movs	r0, #100	; 0x64
 80083f6:	f001 fd83 	bl	8009f00 <HAL_Delay>
			if(selector == 0){
 80083fa:	4b83      	ldr	r3, [pc, #524]	; (8008608 <cppLoop+0x948>)
 80083fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d113      	bne.n	800842c <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 8008404:	4b81      	ldr	r3, [pc, #516]	; (800860c <cppLoop+0x94c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f7f8 f8b5 	bl	8000578 <__aeabi_f2d>
 800840e:	a376      	add	r3, pc, #472	; (adr r3, 80085e8 <cppLoop+0x928>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f7 ff50 	bl	80002b8 <__aeabi_dsub>
 8008418:	4603      	mov	r3, r0
 800841a:	460c      	mov	r4, r1
 800841c:	4618      	mov	r0, r3
 800841e:	4621      	mov	r1, r4
 8008420:	f7f8 fbfa 	bl	8000c18 <__aeabi_d2f>
 8008424:	4602      	mov	r2, r0
 8008426:	4b79      	ldr	r3, [pc, #484]	; (800860c <cppLoop+0x94c>)
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e02b      	b.n	8008484 <cppLoop+0x7c4>
			else if(selector == 1){
 800842c:	4b76      	ldr	r3, [pc, #472]	; (8008608 <cppLoop+0x948>)
 800842e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d113      	bne.n	800845e <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 8008436:	4b76      	ldr	r3, [pc, #472]	; (8008610 <cppLoop+0x950>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7f8 f89c 	bl	8000578 <__aeabi_f2d>
 8008440:	a36b      	add	r3, pc, #428	; (adr r3, 80085f0 <cppLoop+0x930>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f7 ff37 	bl	80002b8 <__aeabi_dsub>
 800844a:	4603      	mov	r3, r0
 800844c:	460c      	mov	r4, r1
 800844e:	4618      	mov	r0, r3
 8008450:	4621      	mov	r1, r4
 8008452:	f7f8 fbe1 	bl	8000c18 <__aeabi_d2f>
 8008456:	4602      	mov	r2, r0
 8008458:	4b6d      	ldr	r3, [pc, #436]	; (8008610 <cppLoop+0x950>)
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e012      	b.n	8008484 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 800845e:	4b6d      	ldr	r3, [pc, #436]	; (8008614 <cppLoop+0x954>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f7f8 f888 	bl	8000578 <__aeabi_f2d>
 8008468:	a363      	add	r3, pc, #396	; (adr r3, 80085f8 <cppLoop+0x938>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f7 ff23 	bl	80002b8 <__aeabi_dsub>
 8008472:	4603      	mov	r3, r0
 8008474:	460c      	mov	r4, r1
 8008476:	4618      	mov	r0, r3
 8008478:	4621      	mov	r1, r4
 800847a:	f7f8 fbcd 	bl	8000c18 <__aeabi_d2f>
 800847e:	4602      	mov	r2, r0
 8008480:	4b64      	ldr	r3, [pc, #400]	; (8008614 <cppLoop+0x954>)
 8008482:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008484:	2152      	movs	r1, #82	; 0x52
 8008486:	485f      	ldr	r0, [pc, #380]	; (8008604 <cppLoop+0x944>)
 8008488:	f7f9 fe84 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800848c:	2200      	movs	r2, #0
 800848e:	f04f 31ff 	mov.w	r1, #4294967295
 8008492:	485c      	ldr	r0, [pc, #368]	; (8008604 <cppLoop+0x944>)
 8008494:	f7f9 ff3a 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008498:	f001 bbea 	b.w	8009c70 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_C){
 800849c:	4858      	ldr	r0, [pc, #352]	; (8008600 <cppLoop+0x940>)
 800849e:	f7f9 fe15 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	bf0c      	ite	eq
 80084a8:	2301      	moveq	r3, #1
 80084aa:	2300      	movne	r3, #0
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f001 83de 	beq.w	8009c70 <cppLoop+0x1fb0>
			led.LR(-1, 1);
 80084b4:	2201      	movs	r2, #1
 80084b6:	f04f 31ff 	mov.w	r1, #4294967295
 80084ba:	4852      	ldr	r0, [pc, #328]	; (8008604 <cppLoop+0x944>)
 80084bc:	f7f9 ff26 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084c4:	f001 fd1c 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80084c8:	2300      	movs	r3, #0
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4b4f      	ldr	r3, [pc, #316]	; (800860c <cppLoop+0x94c>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	4951      	ldr	r1, [pc, #324]	; (8008618 <cppLoop+0x958>)
 80084d2:	4852      	ldr	r0, [pc, #328]	; (800861c <cppLoop+0x95c>)
 80084d4:	f7f9 f9d2 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80084d8:	2300      	movs	r3, #0
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4b4c      	ldr	r3, [pc, #304]	; (8008610 <cppLoop+0x950>)
 80084de:	2201      	movs	r2, #1
 80084e0:	494f      	ldr	r1, [pc, #316]	; (8008620 <cppLoop+0x960>)
 80084e2:	484e      	ldr	r0, [pc, #312]	; (800861c <cppLoop+0x95c>)
 80084e4:	f7f9 f9ca 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80084e8:	2300      	movs	r3, #0
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	4b49      	ldr	r3, [pc, #292]	; (8008614 <cppLoop+0x954>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	494c      	ldr	r1, [pc, #304]	; (8008624 <cppLoop+0x964>)
 80084f2:	484a      	ldr	r0, [pc, #296]	; (800861c <cppLoop+0x95c>)
 80084f4:	f7f9 f9c2 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 80084f8:	4b44      	ldr	r3, [pc, #272]	; (800860c <cppLoop+0x94c>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	4b44      	ldr	r3, [pc, #272]	; (8008610 <cppLoop+0x950>)
 8008500:	ed93 7a00 	vldr	s14, [r3]
 8008504:	4b43      	ldr	r3, [pc, #268]	; (8008614 <cppLoop+0x954>)
 8008506:	edd3 6a00 	vldr	s13, [r3]
 800850a:	eeb0 1a66 	vmov.f32	s2, s13
 800850e:	eef0 0a47 	vmov.f32	s1, s14
 8008512:	eeb0 0a67 	vmov.f32	s0, s15
 8008516:	4844      	ldr	r0, [pc, #272]	; (8008628 <cppLoop+0x968>)
 8008518:	f7fb fc16 	bl	8003d48 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 800851c:	2200      	movs	r2, #0
 800851e:	f04f 31ff 	mov.w	r1, #4294967295
 8008522:	4838      	ldr	r0, [pc, #224]	; (8008604 <cppLoop+0x944>)
 8008524:	f7f9 fef2 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008528:	f001 bba2 	b.w	8009c70 <cppLoop+0x1fb0>

	case 1:
		led.fullColor('C');
 800852c:	2143      	movs	r1, #67	; 0x43
 800852e:	4835      	ldr	r0, [pc, #212]	; (8008604 <cppLoop+0x944>)
 8008530:	f7f9 fe30 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008534:	f7f8 fdb4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008538:	2100      	movs	r1, #0
 800853a:	2000      	movs	r0, #0
 800853c:	f7f8 fdc0 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008540:	483a      	ldr	r0, [pc, #232]	; (800862c <cppLoop+0x96c>)
 8008542:	f7f8 fde7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008546:	2101      	movs	r1, #1
 8008548:	2000      	movs	r0, #0
 800854a:	f7f8 fdb9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800854e:	4b38      	ldr	r3, [pc, #224]	; (8008630 <cppLoop+0x970>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f7f8 f810 	bl	8000578 <__aeabi_f2d>
 8008558:	4603      	mov	r3, r0
 800855a:	460c      	mov	r4, r1
 800855c:	461a      	mov	r2, r3
 800855e:	4623      	mov	r3, r4
 8008560:	4834      	ldr	r0, [pc, #208]	; (8008634 <cppLoop+0x974>)
 8008562:	f7f8 fdd7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008566:	4826      	ldr	r0, [pc, #152]	; (8008600 <cppLoop+0x940>)
 8008568:	f7f9 fdb0 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800856c:	4603      	mov	r3, r0
 800856e:	2b02      	cmp	r3, #2
 8008570:	bf0c      	ite	eq
 8008572:	2301      	moveq	r3, #1
 8008574:	2300      	movne	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	f001 837b 	beq.w	8009c74 <cppLoop+0x1fb4>
			HAL_Delay(500);
 800857e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008582:	f001 fcbd 	bl	8009f00 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008586:	4b2a      	ldr	r3, [pc, #168]	; (8008630 <cppLoop+0x970>)
 8008588:	edd3 7a00 	vldr	s15, [r3]
 800858c:	eeb0 0a67 	vmov.f32	s0, s15
 8008590:	4825      	ldr	r0, [pc, #148]	; (8008628 <cppLoop+0x968>)
 8008592:	f7fb fc2e 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008596:	f04f 32ff 	mov.w	r2, #4294967295
 800859a:	2101      	movs	r1, #1
 800859c:	4819      	ldr	r0, [pc, #100]	; (8008604 <cppLoop+0x944>)
 800859e:	f7f9 feb5 	bl	800230c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 80085a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085a6:	f001 fcab 	bl	8009f00 <HAL_Delay>
			//logger.start();

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80085aa:	2100      	movs	r1, #0
 80085ac:	481e      	ldr	r0, [pc, #120]	; (8008628 <cppLoop+0x968>)
 80085ae:	f7fb fe6f 	bl	8004290 <_ZN9LineTrace7setModeEs>

			logger.start();
 80085b2:	4821      	ldr	r0, [pc, #132]	; (8008638 <cppLoop+0x978>)
 80085b4:	f7fc fc18 	bl	8004de8 <_ZN6Logger5startEv>

			line_trace.running();
 80085b8:	481b      	ldr	r0, [pc, #108]	; (8008628 <cppLoop+0x968>)
 80085ba:	f7fb fead 	bl	8004318 <_ZN9LineTrace7runningEv>

			logger.stop();
 80085be:	481e      	ldr	r0, [pc, #120]	; (8008638 <cppLoop+0x978>)
 80085c0:	f7fc fc31 	bl	8004e26 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80085c4:	4a1d      	ldr	r2, [pc, #116]	; (800863c <cppLoop+0x97c>)
 80085c6:	491e      	ldr	r1, [pc, #120]	; (8008640 <cppLoop+0x980>)
 80085c8:	481b      	ldr	r0, [pc, #108]	; (8008638 <cppLoop+0x978>)
 80085ca:	f7fc fb08 	bl	8004bde <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80085ce:	4a1d      	ldr	r2, [pc, #116]	; (8008644 <cppLoop+0x984>)
 80085d0:	491b      	ldr	r1, [pc, #108]	; (8008640 <cppLoop+0x980>)
 80085d2:	4819      	ldr	r0, [pc, #100]	; (8008638 <cppLoop+0x978>)
 80085d4:	f7fc fb17 	bl	8004c06 <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	2100      	movs	r1, #0
 80085de:	4809      	ldr	r0, [pc, #36]	; (8008604 <cppLoop+0x944>)
 80085e0:	f7f9 fe94 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 80085e4:	f001 bb46 	b.w	8009c74 <cppLoop+0x1fb4>
 80085e8:	88e368f1 	.word	0x88e368f1
 80085ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80085f0:	eb1c432d 	.word	0xeb1c432d
 80085f4:	3f1a36e2 	.word	0x3f1a36e2
 80085f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80085fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8008600:	200005b0 	.word	0x200005b0
 8008604:	200005bc 	.word	0x200005bc
 8008608:	20048180 	.word	0x20048180
 800860c:	200481a4 	.word	0x200481a4
 8008610:	200481ac 	.word	0x200481ac
 8008614:	200481b4 	.word	0x200481b4
 8008618:	0801a004 	.word	0x0801a004
 800861c:	0801a010 	.word	0x0801a010
 8008620:	0801a018 	.word	0x0801a018
 8008624:	0801a024 	.word	0x0801a024
 8008628:	2002390c 	.word	0x2002390c
 800862c:	0801a030 	.word	0x0801a030
 8008630:	200481bc 	.word	0x200481bc
 8008634:	0801a03c 	.word	0x0801a03c
 8008638:	200005e0 	.word	0x200005e0
 800863c:	0801a048 	.word	0x0801a048
 8008640:	0801a054 	.word	0x0801a054
 8008644:	0801a060 	.word	0x0801a060

	case 2:
		led.fullColor('B');
 8008648:	2142      	movs	r1, #66	; 0x42
 800864a:	48c1      	ldr	r0, [pc, #772]	; (8008950 <cppLoop+0xc90>)
 800864c:	f7f9 fda2 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008650:	f7f8 fd26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008654:	2100      	movs	r1, #0
 8008656:	2000      	movs	r0, #0
 8008658:	f7f8 fd32 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800865c:	48bd      	ldr	r0, [pc, #756]	; (8008954 <cppLoop+0xc94>)
 800865e:	f7f8 fd59 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008662:	2101      	movs	r1, #1
 8008664:	2000      	movs	r0, #0
 8008666:	f7f8 fd2b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 800866a:	4bbb      	ldr	r3, [pc, #748]	; (8008958 <cppLoop+0xc98>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f7f7 ff82 	bl	8000578 <__aeabi_f2d>
 8008674:	4603      	mov	r3, r0
 8008676:	460c      	mov	r4, r1
 8008678:	461a      	mov	r2, r3
 800867a:	4623      	mov	r3, r4
 800867c:	48b7      	ldr	r0, [pc, #732]	; (800895c <cppLoop+0xc9c>)
 800867e:	f7f8 fd49 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008682:	48b7      	ldr	r0, [pc, #732]	; (8008960 <cppLoop+0xca0>)
 8008684:	f7f9 fd22 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008688:	4603      	mov	r3, r0
 800868a:	2b10      	cmp	r3, #16
 800868c:	bf0c      	ite	eq
 800868e:	2301      	moveq	r3, #1
 8008690:	2300      	movne	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d023      	beq.n	80086e0 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008698:	2201      	movs	r2, #1
 800869a:	f04f 31ff 	mov.w	r1, #4294967295
 800869e:	48ac      	ldr	r0, [pc, #688]	; (8008950 <cppLoop+0xc90>)
 80086a0:	f7f9 fe34 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086a4:	2064      	movs	r0, #100	; 0x64
 80086a6:	f001 fc2b 	bl	8009f00 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80086aa:	4bab      	ldr	r3, [pc, #684]	; (8008958 <cppLoop+0xc98>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f7 ff62 	bl	8000578 <__aeabi_f2d>
 80086b4:	a3a4      	add	r3, pc, #656	; (adr r3, 8008948 <cppLoop+0xc88>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fdff 	bl	80002bc <__adddf3>
 80086be:	4603      	mov	r3, r0
 80086c0:	460c      	mov	r4, r1
 80086c2:	4618      	mov	r0, r3
 80086c4:	4621      	mov	r1, r4
 80086c6:	f7f8 faa7 	bl	8000c18 <__aeabi_d2f>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4ba2      	ldr	r3, [pc, #648]	; (8008958 <cppLoop+0xc98>)
 80086ce:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80086d0:	2200      	movs	r2, #0
 80086d2:	f04f 31ff 	mov.w	r1, #4294967295
 80086d6:	489e      	ldr	r0, [pc, #632]	; (8008950 <cppLoop+0xc90>)
 80086d8:	f7f9 fe18 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80086dc:	f001 bacc 	b.w	8009c78 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_L){
 80086e0:	489f      	ldr	r0, [pc, #636]	; (8008960 <cppLoop+0xca0>)
 80086e2:	f7f9 fcf3 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d023      	beq.n	800873e <cppLoop+0xa7e>
			led.LR(-1, 1);
 80086f6:	2201      	movs	r2, #1
 80086f8:	f04f 31ff 	mov.w	r1, #4294967295
 80086fc:	4894      	ldr	r0, [pc, #592]	; (8008950 <cppLoop+0xc90>)
 80086fe:	f7f9 fe05 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008702:	2064      	movs	r0, #100	; 0x64
 8008704:	f001 fbfc 	bl	8009f00 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008708:	4b93      	ldr	r3, [pc, #588]	; (8008958 <cppLoop+0xc98>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f7f7 ff33 	bl	8000578 <__aeabi_f2d>
 8008712:	a38d      	add	r3, pc, #564	; (adr r3, 8008948 <cppLoop+0xc88>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 fdce 	bl	80002b8 <__aeabi_dsub>
 800871c:	4603      	mov	r3, r0
 800871e:	460c      	mov	r4, r1
 8008720:	4618      	mov	r0, r3
 8008722:	4621      	mov	r1, r4
 8008724:	f7f8 fa78 	bl	8000c18 <__aeabi_d2f>
 8008728:	4602      	mov	r2, r0
 800872a:	4b8b      	ldr	r3, [pc, #556]	; (8008958 <cppLoop+0xc98>)
 800872c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800872e:	2200      	movs	r2, #0
 8008730:	f04f 31ff 	mov.w	r1, #4294967295
 8008734:	4886      	ldr	r0, [pc, #536]	; (8008950 <cppLoop+0xc90>)
 8008736:	f7f9 fde9 	bl	800230c <_ZN3LED2LREaa>
		break;
 800873a:	f001 ba9d 	b.w	8009c78 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_C){
 800873e:	4888      	ldr	r0, [pc, #544]	; (8008960 <cppLoop+0xca0>)
 8008740:	f7f9 fcc4 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008744:	4603      	mov	r3, r0
 8008746:	2b02      	cmp	r3, #2
 8008748:	bf0c      	ite	eq
 800874a:	2301      	moveq	r3, #1
 800874c:	2300      	movne	r3, #0
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	f001 8291 	beq.w	8009c78 <cppLoop+0x1fb8>
			led.LR(-1, 1);
 8008756:	2201      	movs	r2, #1
 8008758:	f04f 31ff 	mov.w	r1, #4294967295
 800875c:	487c      	ldr	r0, [pc, #496]	; (8008950 <cppLoop+0xc90>)
 800875e:	f7f9 fdd5 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008762:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008766:	f001 fbcb 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800876a:	2300      	movs	r3, #0
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4b7a      	ldr	r3, [pc, #488]	; (8008958 <cppLoop+0xc98>)
 8008770:	2201      	movs	r2, #1
 8008772:	497c      	ldr	r1, [pc, #496]	; (8008964 <cppLoop+0xca4>)
 8008774:	487c      	ldr	r0, [pc, #496]	; (8008968 <cppLoop+0xca8>)
 8008776:	f7f9 f881 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800877a:	4b77      	ldr	r3, [pc, #476]	; (8008958 <cppLoop+0xc98>)
 800877c:	edd3 7a00 	vldr	s15, [r3]
 8008780:	eeb0 0a67 	vmov.f32	s0, s15
 8008784:	4879      	ldr	r0, [pc, #484]	; (800896c <cppLoop+0xcac>)
 8008786:	f7fb fb34 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800878a:	2200      	movs	r2, #0
 800878c:	f04f 31ff 	mov.w	r1, #4294967295
 8008790:	486f      	ldr	r0, [pc, #444]	; (8008950 <cppLoop+0xc90>)
 8008792:	f7f9 fdbb 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008796:	f001 ba6f 	b.w	8009c78 <cppLoop+0x1fb8>

	case 3:
		led.fullColor('Y');
 800879a:	2159      	movs	r1, #89	; 0x59
 800879c:	486c      	ldr	r0, [pc, #432]	; (8008950 <cppLoop+0xc90>)
 800879e:	f7f9 fcf9 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80087a2:	f7f8 fc7d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087a6:	2100      	movs	r1, #0
 80087a8:	2000      	movs	r0, #0
 80087aa:	f7f8 fc89 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80087ae:	4b70      	ldr	r3, [pc, #448]	; (8008970 <cppLoop+0xcb0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f7 fee0 	bl	8000578 <__aeabi_f2d>
 80087b8:	4603      	mov	r3, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	461a      	mov	r2, r3
 80087be:	4623      	mov	r3, r4
 80087c0:	486c      	ldr	r0, [pc, #432]	; (8008974 <cppLoop+0xcb4>)
 80087c2:	f7f8 fca7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80087c6:	2101      	movs	r1, #1
 80087c8:	2000      	movs	r0, #0
 80087ca:	f7f8 fc79 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80087ce:	4b6a      	ldr	r3, [pc, #424]	; (8008978 <cppLoop+0xcb8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7f7 fed0 	bl	8000578 <__aeabi_f2d>
 80087d8:	4603      	mov	r3, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	461a      	mov	r2, r3
 80087de:	4623      	mov	r3, r4
 80087e0:	4866      	ldr	r0, [pc, #408]	; (800897c <cppLoop+0xcbc>)
 80087e2:	f7f8 fc97 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087e6:	485e      	ldr	r0, [pc, #376]	; (8008960 <cppLoop+0xca0>)
 80087e8:	f7f9 fc70 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	bf0c      	ite	eq
 80087f2:	2301      	moveq	r3, #1
 80087f4:	2300      	movne	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f001 823f 	beq.w	8009c7c <cppLoop+0x1fbc>
			HAL_Delay(500);
 80087fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008802:	f001 fb7d 	bl	8009f00 <HAL_Delay>

			led.LR(1, -1);
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	2101      	movs	r1, #1
 800880c:	4850      	ldr	r0, [pc, #320]	; (8008950 <cppLoop+0xc90>)
 800880e:	f7f9 fd7d 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008812:	2101      	movs	r1, #1
 8008814:	4855      	ldr	r0, [pc, #340]	; (800896c <cppLoop+0xcac>)
 8008816:	f7fb fd3b 	bl	8004290 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800881a:	4b57      	ldr	r3, [pc, #348]	; (8008978 <cppLoop+0xcb8>)
 800881c:	edd3 7a00 	vldr	s15, [r3]
 8008820:	eeb0 0a67 	vmov.f32	s0, s15
 8008824:	4851      	ldr	r0, [pc, #324]	; (800896c <cppLoop+0xcac>)
 8008826:	f7fb fae4 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800882a:	4b51      	ldr	r3, [pc, #324]	; (8008970 <cppLoop+0xcb0>)
 800882c:	edd3 7a00 	vldr	s15, [r3]
 8008830:	eeb0 0a67 	vmov.f32	s0, s15
 8008834:	484d      	ldr	r0, [pc, #308]	; (800896c <cppLoop+0xcac>)
 8008836:	f7fb faec 	bl	8003e12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800883a:	4b4f      	ldr	r3, [pc, #316]	; (8008978 <cppLoop+0xcb8>)
 800883c:	edd3 7a00 	vldr	s15, [r3]
 8008840:	eeb0 0a67 	vmov.f32	s0, s15
 8008844:	4849      	ldr	r0, [pc, #292]	; (800896c <cppLoop+0xcac>)
 8008846:	f7fb fb04 	bl	8003e52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 800884a:	4848      	ldr	r0, [pc, #288]	; (800896c <cppLoop+0xcac>)
 800884c:	f7fb fe60 	bl	8004510 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 8008850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008854:	f001 fb54 	bl	8009f00 <HAL_Delay>

			logger.start();
 8008858:	4849      	ldr	r0, [pc, #292]	; (8008980 <cppLoop+0xcc0>)
 800885a:	f7fc fac5 	bl	8004de8 <_ZN6Logger5startEv>

			line_trace.running();
 800885e:	4843      	ldr	r0, [pc, #268]	; (800896c <cppLoop+0xcac>)
 8008860:	f7fb fd5a 	bl	8004318 <_ZN9LineTrace7runningEv>

			logger.stop();
 8008864:	4846      	ldr	r0, [pc, #280]	; (8008980 <cppLoop+0xcc0>)
 8008866:	f7fc fade 	bl	8004e26 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800886a:	4a46      	ldr	r2, [pc, #280]	; (8008984 <cppLoop+0xcc4>)
 800886c:	4946      	ldr	r1, [pc, #280]	; (8008988 <cppLoop+0xcc8>)
 800886e:	4844      	ldr	r0, [pc, #272]	; (8008980 <cppLoop+0xcc0>)
 8008870:	f7fc f9b5 	bl	8004bde <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008874:	4a45      	ldr	r2, [pc, #276]	; (800898c <cppLoop+0xccc>)
 8008876:	4944      	ldr	r1, [pc, #272]	; (8008988 <cppLoop+0xcc8>)
 8008878:	4841      	ldr	r0, [pc, #260]	; (8008980 <cppLoop+0xcc0>)
 800887a:	f7fc f9c4 	bl	8004c06 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	2100      	movs	r1, #0
 8008884:	4832      	ldr	r0, [pc, #200]	; (8008950 <cppLoop+0xc90>)
 8008886:	f7f9 fd41 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 800888a:	f001 b9f7 	b.w	8009c7c <cppLoop+0x1fbc>

	case 4:
		led.fullColor('G');
 800888e:	2147      	movs	r1, #71	; 0x47
 8008890:	482f      	ldr	r0, [pc, #188]	; (8008950 <cppLoop+0xc90>)
 8008892:	f7f9 fc7f 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008896:	f7f8 fc03 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800889a:	2100      	movs	r1, #0
 800889c:	2000      	movs	r0, #0
 800889e:	f7f8 fc0f 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80088a2:	4832      	ldr	r0, [pc, #200]	; (800896c <cppLoop+0xcac>)
 80088a4:	f7fb fb05 	bl	8003eb2 <_ZN9LineTrace14getMaxVelocityEv>
 80088a8:	ee10 3a10 	vmov	r3, s0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f7 fe63 	bl	8000578 <__aeabi_f2d>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	461a      	mov	r2, r3
 80088b8:	4623      	mov	r3, r4
 80088ba:	482e      	ldr	r0, [pc, #184]	; (8008974 <cppLoop+0xcb4>)
 80088bc:	f7f8 fc2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088c0:	2101      	movs	r1, #1
 80088c2:	2000      	movs	r0, #0
 80088c4:	f7f8 fbfc 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80088c8:	4828      	ldr	r0, [pc, #160]	; (800896c <cppLoop+0xcac>)
 80088ca:	f7fb fb12 	bl	8003ef2 <_ZN9LineTrace14getMinVelocityEv>
 80088ce:	ee10 3a10 	vmov	r3, s0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f7 fe50 	bl	8000578 <__aeabi_f2d>
 80088d8:	4603      	mov	r3, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	461a      	mov	r2, r3
 80088de:	4623      	mov	r3, r4
 80088e0:	481e      	ldr	r0, [pc, #120]	; (800895c <cppLoop+0xc9c>)
 80088e2:	f7f8 fc17 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80088e6:	481e      	ldr	r0, [pc, #120]	; (8008960 <cppLoop+0xca0>)
 80088e8:	f7f9 fbf0 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	bf0c      	ite	eq
 80088f2:	2301      	moveq	r3, #1
 80088f4:	2300      	movne	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d04b      	beq.n	8008994 <cppLoop+0xcd4>
			led.LR(-1, 1);
 80088fc:	2201      	movs	r2, #1
 80088fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008902:	4813      	ldr	r0, [pc, #76]	; (8008950 <cppLoop+0xc90>)
 8008904:	f7f9 fd02 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008908:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800890c:	f001 faf8 	bl	8009f00 <HAL_Delay>

			selector_vel++;
 8008910:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <cppLoop+0xcd0>)
 8008912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008916:	b29b      	uxth	r3, r3
 8008918:	3301      	adds	r3, #1
 800891a:	b29b      	uxth	r3, r3
 800891c:	b21a      	sxth	r2, r3
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <cppLoop+0xcd0>)
 8008920:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008922:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <cppLoop+0xcd0>)
 8008924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008928:	2b01      	cmp	r3, #1
 800892a:	dd02      	ble.n	8008932 <cppLoop+0xc72>
 800892c:	4b18      	ldr	r3, [pc, #96]	; (8008990 <cppLoop+0xcd0>)
 800892e:	2200      	movs	r2, #0
 8008930:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008932:	2200      	movs	r2, #0
 8008934:	f04f 31ff 	mov.w	r1, #4294967295
 8008938:	4805      	ldr	r0, [pc, #20]	; (8008950 <cppLoop+0xc90>)
 800893a:	f7f9 fce7 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800893e:	f001 b99f 	b.w	8009c80 <cppLoop+0x1fc0>
 8008942:	bf00      	nop
 8008944:	f3af 8000 	nop.w
 8008948:	9999999a 	.word	0x9999999a
 800894c:	3fb99999 	.word	0x3fb99999
 8008950:	200005bc 	.word	0x200005bc
 8008954:	0801a030 	.word	0x0801a030
 8008958:	200481bc 	.word	0x200481bc
 800895c:	0801a06c 	.word	0x0801a06c
 8008960:	200005b0 	.word	0x200005b0
 8008964:	0801a078 	.word	0x0801a078
 8008968:	0801a010 	.word	0x0801a010
 800896c:	2002390c 	.word	0x2002390c
 8008970:	200481c4 	.word	0x200481c4
 8008974:	0801a084 	.word	0x0801a084
 8008978:	200481d4 	.word	0x200481d4
 800897c:	0801a03c 	.word	0x0801a03c
 8008980:	200005e0 	.word	0x200005e0
 8008984:	0801a048 	.word	0x0801a048
 8008988:	0801a054 	.word	0x0801a054
 800898c:	0801a060 	.word	0x0801a060
 8008990:	20048186 	.word	0x20048186
		else if(joy_stick.getValue() == JOY_R){
 8008994:	48ac      	ldr	r0, [pc, #688]	; (8008c48 <cppLoop+0xf88>)
 8008996:	f7f9 fb99 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800899a:	4603      	mov	r3, r0
 800899c:	2b10      	cmp	r3, #16
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d03c      	beq.n	8008a24 <cppLoop+0xd64>
			led.LR(-1, 1);
 80089aa:	2201      	movs	r2, #1
 80089ac:	f04f 31ff 	mov.w	r1, #4294967295
 80089b0:	48a6      	ldr	r0, [pc, #664]	; (8008c4c <cppLoop+0xf8c>)
 80089b2:	f7f9 fcab 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089b6:	2064      	movs	r0, #100	; 0x64
 80089b8:	f001 faa2 	bl	8009f00 <HAL_Delay>
			if(selector_vel == 0)
 80089bc:	4ba4      	ldr	r3, [pc, #656]	; (8008c50 <cppLoop+0xf90>)
 80089be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d113      	bne.n	80089ee <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80089c6:	4ba3      	ldr	r3, [pc, #652]	; (8008c54 <cppLoop+0xf94>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f7 fdd4 	bl	8000578 <__aeabi_f2d>
 80089d0:	a39b      	add	r3, pc, #620	; (adr r3, 8008c40 <cppLoop+0xf80>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc71 	bl	80002bc <__adddf3>
 80089da:	4603      	mov	r3, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	4618      	mov	r0, r3
 80089e0:	4621      	mov	r1, r4
 80089e2:	f7f8 f919 	bl	8000c18 <__aeabi_d2f>
 80089e6:	4602      	mov	r2, r0
 80089e8:	4b9a      	ldr	r3, [pc, #616]	; (8008c54 <cppLoop+0xf94>)
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	e012      	b.n	8008a14 <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 80089ee:	4b9a      	ldr	r3, [pc, #616]	; (8008c58 <cppLoop+0xf98>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7f7 fdc0 	bl	8000578 <__aeabi_f2d>
 80089f8:	a391      	add	r3, pc, #580	; (adr r3, 8008c40 <cppLoop+0xf80>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fc5d 	bl	80002bc <__adddf3>
 8008a02:	4603      	mov	r3, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	4618      	mov	r0, r3
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f7f8 f905 	bl	8000c18 <__aeabi_d2f>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	4b91      	ldr	r3, [pc, #580]	; (8008c58 <cppLoop+0xf98>)
 8008a12:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	f04f 31ff 	mov.w	r1, #4294967295
 8008a1a:	488c      	ldr	r0, [pc, #560]	; (8008c4c <cppLoop+0xf8c>)
 8008a1c:	f7f9 fc76 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008a20:	f001 b92e 	b.w	8009c80 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_L){
 8008a24:	4888      	ldr	r0, [pc, #544]	; (8008c48 <cppLoop+0xf88>)
 8008a26:	f7f9 fb51 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d03c      	beq.n	8008ab4 <cppLoop+0xdf4>
			led.LR(-1, 1);
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a40:	4882      	ldr	r0, [pc, #520]	; (8008c4c <cppLoop+0xf8c>)
 8008a42:	f7f9 fc63 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a46:	2064      	movs	r0, #100	; 0x64
 8008a48:	f001 fa5a 	bl	8009f00 <HAL_Delay>
			if(selector_vel == 0)
 8008a4c:	4b80      	ldr	r3, [pc, #512]	; (8008c50 <cppLoop+0xf90>)
 8008a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d113      	bne.n	8008a7e <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008a56:	4b7f      	ldr	r3, [pc, #508]	; (8008c54 <cppLoop+0xf94>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f7 fd8c 	bl	8000578 <__aeabi_f2d>
 8008a60:	a377      	add	r3, pc, #476	; (adr r3, 8008c40 <cppLoop+0xf80>)
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f7f7 fc27 	bl	80002b8 <__aeabi_dsub>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	4621      	mov	r1, r4
 8008a72:	f7f8 f8d1 	bl	8000c18 <__aeabi_d2f>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b76      	ldr	r3, [pc, #472]	; (8008c54 <cppLoop+0xf94>)
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	e012      	b.n	8008aa4 <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008a7e:	4b76      	ldr	r3, [pc, #472]	; (8008c58 <cppLoop+0xf98>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f7 fd78 	bl	8000578 <__aeabi_f2d>
 8008a88:	a36d      	add	r3, pc, #436	; (adr r3, 8008c40 <cppLoop+0xf80>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fc13 	bl	80002b8 <__aeabi_dsub>
 8008a92:	4603      	mov	r3, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	4618      	mov	r0, r3
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f7f8 f8bd 	bl	8000c18 <__aeabi_d2f>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b6d      	ldr	r3, [pc, #436]	; (8008c58 <cppLoop+0xf98>)
 8008aa2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f04f 31ff 	mov.w	r1, #4294967295
 8008aaa:	4868      	ldr	r0, [pc, #416]	; (8008c4c <cppLoop+0xf8c>)
 8008aac:	f7f9 fc2e 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008ab0:	f001 b8e6 	b.w	8009c80 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_C){
 8008ab4:	4864      	ldr	r0, [pc, #400]	; (8008c48 <cppLoop+0xf88>)
 8008ab6:	f7f9 fb09 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f001 80da 	beq.w	8009c80 <cppLoop+0x1fc0>
			led.LR(-1, 1);
 8008acc:	2201      	movs	r2, #1
 8008ace:	f04f 31ff 	mov.w	r1, #4294967295
 8008ad2:	485e      	ldr	r0, [pc, #376]	; (8008c4c <cppLoop+0xf8c>)
 8008ad4:	f7f9 fc1a 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008adc:	f001 fa10 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	4b5b      	ldr	r3, [pc, #364]	; (8008c54 <cppLoop+0xf94>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	495c      	ldr	r1, [pc, #368]	; (8008c5c <cppLoop+0xf9c>)
 8008aea:	485d      	ldr	r0, [pc, #372]	; (8008c60 <cppLoop+0xfa0>)
 8008aec:	f7f8 fec6 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008af0:	2300      	movs	r3, #0
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	4b58      	ldr	r3, [pc, #352]	; (8008c58 <cppLoop+0xf98>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	495a      	ldr	r1, [pc, #360]	; (8008c64 <cppLoop+0xfa4>)
 8008afa:	4859      	ldr	r0, [pc, #356]	; (8008c60 <cppLoop+0xfa0>)
 8008afc:	f7f8 febe 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008b00:	4b54      	ldr	r3, [pc, #336]	; (8008c54 <cppLoop+0xf94>)
 8008b02:	edd3 7a00 	vldr	s15, [r3]
 8008b06:	eeb0 0a67 	vmov.f32	s0, s15
 8008b0a:	4857      	ldr	r0, [pc, #348]	; (8008c68 <cppLoop+0xfa8>)
 8008b0c:	f7fb f981 	bl	8003e12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008b10:	4b51      	ldr	r3, [pc, #324]	; (8008c58 <cppLoop+0xf98>)
 8008b12:	edd3 7a00 	vldr	s15, [r3]
 8008b16:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1a:	4853      	ldr	r0, [pc, #332]	; (8008c68 <cppLoop+0xfa8>)
 8008b1c:	f7fb f999 	bl	8003e52 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008b20:	2200      	movs	r2, #0
 8008b22:	f04f 31ff 	mov.w	r1, #4294967295
 8008b26:	4849      	ldr	r0, [pc, #292]	; (8008c4c <cppLoop+0xf8c>)
 8008b28:	f7f9 fbf0 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008b2c:	f001 b8a8 	b.w	8009c80 <cppLoop+0x1fc0>

	case 5:
		led.fullColor('M');
 8008b30:	214d      	movs	r1, #77	; 0x4d
 8008b32:	4846      	ldr	r0, [pc, #280]	; (8008c4c <cppLoop+0xf8c>)
 8008b34:	f7f9 fb2e 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b38:	f7f8 fab2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f7f8 fabe 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008b44:	4b49      	ldr	r3, [pc, #292]	; (8008c6c <cppLoop+0xfac>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f7 fd15 	bl	8000578 <__aeabi_f2d>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	461a      	mov	r2, r3
 8008b54:	4623      	mov	r3, r4
 8008b56:	4846      	ldr	r0, [pc, #280]	; (8008c70 <cppLoop+0xfb0>)
 8008b58:	f7f8 fadc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f7f8 faae 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008b64:	4b43      	ldr	r3, [pc, #268]	; (8008c74 <cppLoop+0xfb4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f7 fd05 	bl	8000578 <__aeabi_f2d>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	461a      	mov	r2, r3
 8008b74:	4623      	mov	r3, r4
 8008b76:	4840      	ldr	r0, [pc, #256]	; (8008c78 <cppLoop+0xfb8>)
 8008b78:	f7f8 facc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008b7c:	4832      	ldr	r0, [pc, #200]	; (8008c48 <cppLoop+0xf88>)
 8008b7e:	f7f9 faa5 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	bf0c      	ite	eq
 8008b88:	2301      	moveq	r3, #1
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f001 8078 	beq.w	8009c84 <cppLoop+0x1fc4>
			HAL_Delay(500);
 8008b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b98:	f001 f9b2 	bl	8009f00 <HAL_Delay>

			led.LR(1, -1);
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	482a      	ldr	r0, [pc, #168]	; (8008c4c <cppLoop+0xf8c>)
 8008ba4:	f7f9 fbb2 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008ba8:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <cppLoop+0xfbc>)
 8008baa:	edd3 7a00 	vldr	s15, [r3]
 8008bae:	4b34      	ldr	r3, [pc, #208]	; (8008c80 <cppLoop+0xfc0>)
 8008bb0:	ed93 7a00 	vldr	s14, [r3]
 8008bb4:	4b33      	ldr	r3, [pc, #204]	; (8008c84 <cppLoop+0xfc4>)
 8008bb6:	edd3 6a00 	vldr	s13, [r3]
 8008bba:	eeb0 1a66 	vmov.f32	s2, s13
 8008bbe:	eef0 0a47 	vmov.f32	s1, s14
 8008bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc6:	4828      	ldr	r0, [pc, #160]	; (8008c68 <cppLoop+0xfa8>)
 8008bc8:	f7fb f878 	bl	8003cbc <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008bcc:	2102      	movs	r1, #2
 8008bce:	4826      	ldr	r0, [pc, #152]	; (8008c68 <cppLoop+0xfa8>)
 8008bd0:	f7fb fb5e 	bl	8004290 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008bd4:	4b27      	ldr	r3, [pc, #156]	; (8008c74 <cppLoop+0xfb4>)
 8008bd6:	edd3 7a00 	vldr	s15, [r3]
 8008bda:	eeb0 0a67 	vmov.f32	s0, s15
 8008bde:	4822      	ldr	r0, [pc, #136]	; (8008c68 <cppLoop+0xfa8>)
 8008be0:	f7fb f907 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008be4:	4b21      	ldr	r3, [pc, #132]	; (8008c6c <cppLoop+0xfac>)
 8008be6:	edd3 7a00 	vldr	s15, [r3]
 8008bea:	eeb0 0a67 	vmov.f32	s0, s15
 8008bee:	481e      	ldr	r0, [pc, #120]	; (8008c68 <cppLoop+0xfa8>)
 8008bf0:	f7fb f91f 	bl	8003e32 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008bf4:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <cppLoop+0xfb4>)
 8008bf6:	edd3 7a00 	vldr	s15, [r3]
 8008bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8008bfe:	481a      	ldr	r0, [pc, #104]	; (8008c68 <cppLoop+0xfa8>)
 8008c00:	f7fb f937 	bl	8003e72 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008c04:	4818      	ldr	r0, [pc, #96]	; (8008c68 <cppLoop+0xfa8>)
 8008c06:	f7fb fc83 	bl	8004510 <_ZN9LineTrace20createVelocityTabeleEv>

			logger.start();
 8008c0a:	481f      	ldr	r0, [pc, #124]	; (8008c88 <cppLoop+0xfc8>)
 8008c0c:	f7fc f8ec 	bl	8004de8 <_ZN6Logger5startEv>

			line_trace.running();
 8008c10:	4815      	ldr	r0, [pc, #84]	; (8008c68 <cppLoop+0xfa8>)
 8008c12:	f7fb fb81 	bl	8004318 <_ZN9LineTrace7runningEv>

			logger.stop();
 8008c16:	481c      	ldr	r0, [pc, #112]	; (8008c88 <cppLoop+0xfc8>)
 8008c18:	f7fc f905 	bl	8004e26 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008c1c:	4a1b      	ldr	r2, [pc, #108]	; (8008c8c <cppLoop+0xfcc>)
 8008c1e:	491c      	ldr	r1, [pc, #112]	; (8008c90 <cppLoop+0xfd0>)
 8008c20:	4819      	ldr	r0, [pc, #100]	; (8008c88 <cppLoop+0xfc8>)
 8008c22:	f7fb ffdc 	bl	8004bde <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008c26:	4a1b      	ldr	r2, [pc, #108]	; (8008c94 <cppLoop+0xfd4>)
 8008c28:	4919      	ldr	r1, [pc, #100]	; (8008c90 <cppLoop+0xfd0>)
 8008c2a:	4817      	ldr	r0, [pc, #92]	; (8008c88 <cppLoop+0xfc8>)
 8008c2c:	f7fb ffeb 	bl	8004c06 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	2100      	movs	r1, #0
 8008c36:	4805      	ldr	r0, [pc, #20]	; (8008c4c <cppLoop+0xf8c>)
 8008c38:	f7f9 fb68 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 8008c3c:	f001 b822 	b.w	8009c84 <cppLoop+0x1fc4>
 8008c40:	9999999a 	.word	0x9999999a
 8008c44:	3fb99999 	.word	0x3fb99999
 8008c48:	200005b0 	.word	0x200005b0
 8008c4c:	200005bc 	.word	0x200005bc
 8008c50:	20048186 	.word	0x20048186
 8008c54:	200481c4 	.word	0x200481c4
 8008c58:	200481d4 	.word	0x200481d4
 8008c5c:	0801a090 	.word	0x0801a090
 8008c60:	0801a010 	.word	0x0801a010
 8008c64:	0801a09c 	.word	0x0801a09c
 8008c68:	2002390c 	.word	0x2002390c
 8008c6c:	200481cc 	.word	0x200481cc
 8008c70:	0801a0a8 	.word	0x0801a0a8
 8008c74:	200481dc 	.word	0x200481dc
 8008c78:	0801a03c 	.word	0x0801a03c
 8008c7c:	2004818c 	.word	0x2004818c
 8008c80:	20048194 	.word	0x20048194
 8008c84:	2004819c 	.word	0x2004819c
 8008c88:	200005e0 	.word	0x200005e0
 8008c8c:	0801a048 	.word	0x0801a048
 8008c90:	0801a054 	.word	0x0801a054
 8008c94:	0801a060 	.word	0x0801a060

	case 6:
		led.fullColor('R');
 8008c98:	2152      	movs	r1, #82	; 0x52
 8008c9a:	4895      	ldr	r0, [pc, #596]	; (8008ef0 <cppLoop+0x1230>)
 8008c9c:	f7f9 fa7a 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ca0:	f7f8 f9fe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f7f8 fa0a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008cac:	4891      	ldr	r0, [pc, #580]	; (8008ef4 <cppLoop+0x1234>)
 8008cae:	f7fb f910 	bl	8003ed2 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008cb2:	ee10 3a10 	vmov	r3, s0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7f7 fc5e 	bl	8000578 <__aeabi_f2d>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	488c      	ldr	r0, [pc, #560]	; (8008ef8 <cppLoop+0x1238>)
 8008cc6:	f7f8 fa25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008cca:	2101      	movs	r1, #1
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f7f8 f9f7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008cd2:	4888      	ldr	r0, [pc, #544]	; (8008ef4 <cppLoop+0x1234>)
 8008cd4:	f7fb f91d 	bl	8003f12 <_ZN9LineTrace15getMinVelocity2Ev>
 8008cd8:	ee10 3a10 	vmov	r3, s0
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7f7 fc4b 	bl	8000578 <__aeabi_f2d>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	4623      	mov	r3, r4
 8008cea:	4884      	ldr	r0, [pc, #528]	; (8008efc <cppLoop+0x123c>)
 8008cec:	f7f8 fa12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008cf0:	4883      	ldr	r0, [pc, #524]	; (8008f00 <cppLoop+0x1240>)
 8008cf2:	f7f9 f9eb 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d022      	beq.n	8008d4c <cppLoop+0x108c>
			led.LR(-1, 1);
 8008d06:	2201      	movs	r2, #1
 8008d08:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0c:	4878      	ldr	r0, [pc, #480]	; (8008ef0 <cppLoop+0x1230>)
 8008d0e:	f7f9 fafd 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d16:	f001 f8f3 	bl	8009f00 <HAL_Delay>

			selector_vel2++;
 8008d1a:	4b7a      	ldr	r3, [pc, #488]	; (8008f04 <cppLoop+0x1244>)
 8008d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3301      	adds	r3, #1
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	b21a      	sxth	r2, r3
 8008d28:	4b76      	ldr	r3, [pc, #472]	; (8008f04 <cppLoop+0x1244>)
 8008d2a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008d2c:	4b75      	ldr	r3, [pc, #468]	; (8008f04 <cppLoop+0x1244>)
 8008d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	dd02      	ble.n	8008d3c <cppLoop+0x107c>
 8008d36:	4b73      	ldr	r3, [pc, #460]	; (8008f04 <cppLoop+0x1244>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d42:	486b      	ldr	r0, [pc, #428]	; (8008ef0 <cppLoop+0x1230>)
 8008d44:	f7f9 fae2 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008d48:	f000 bf9e 	b.w	8009c88 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_R){
 8008d4c:	486c      	ldr	r0, [pc, #432]	; (8008f00 <cppLoop+0x1240>)
 8008d4e:	f7f9 f9bd 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b10      	cmp	r3, #16
 8008d56:	bf0c      	ite	eq
 8008d58:	2301      	moveq	r3, #1
 8008d5a:	2300      	movne	r3, #0
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d03c      	beq.n	8008ddc <cppLoop+0x111c>
			led.LR(-1, 1);
 8008d62:	2201      	movs	r2, #1
 8008d64:	f04f 31ff 	mov.w	r1, #4294967295
 8008d68:	4861      	ldr	r0, [pc, #388]	; (8008ef0 <cppLoop+0x1230>)
 8008d6a:	f7f9 facf 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d6e:	2064      	movs	r0, #100	; 0x64
 8008d70:	f001 f8c6 	bl	8009f00 <HAL_Delay>
			if(selector_vel2 == 0)
 8008d74:	4b63      	ldr	r3, [pc, #396]	; (8008f04 <cppLoop+0x1244>)
 8008d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d113      	bne.n	8008da6 <cppLoop+0x10e6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008d7e:	4b62      	ldr	r3, [pc, #392]	; (8008f08 <cppLoop+0x1248>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7f7 fbf8 	bl	8000578 <__aeabi_f2d>
 8008d88:	a357      	add	r3, pc, #348	; (adr r3, 8008ee8 <cppLoop+0x1228>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fa95 	bl	80002bc <__adddf3>
 8008d92:	4603      	mov	r3, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	4618      	mov	r0, r3
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f7f7 ff3d 	bl	8000c18 <__aeabi_d2f>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	4b59      	ldr	r3, [pc, #356]	; (8008f08 <cppLoop+0x1248>)
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e012      	b.n	8008dcc <cppLoop+0x110c>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008da6:	4b59      	ldr	r3, [pc, #356]	; (8008f0c <cppLoop+0x124c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f7 fbe4 	bl	8000578 <__aeabi_f2d>
 8008db0:	a34d      	add	r3, pc, #308	; (adr r3, 8008ee8 <cppLoop+0x1228>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 fa81 	bl	80002bc <__adddf3>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	f7f7 ff29 	bl	8000c18 <__aeabi_d2f>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	4b50      	ldr	r3, [pc, #320]	; (8008f0c <cppLoop+0x124c>)
 8008dca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f04f 31ff 	mov.w	r1, #4294967295
 8008dd2:	4847      	ldr	r0, [pc, #284]	; (8008ef0 <cppLoop+0x1230>)
 8008dd4:	f7f9 fa9a 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008dd8:	f000 bf56 	b.w	8009c88 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_L){
 8008ddc:	4848      	ldr	r0, [pc, #288]	; (8008f00 <cppLoop+0x1240>)
 8008dde:	f7f9 f975 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	bf0c      	ite	eq
 8008de8:	2301      	moveq	r3, #1
 8008dea:	2300      	movne	r3, #0
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d03c      	beq.n	8008e6c <cppLoop+0x11ac>
			led.LR(-1, 1);
 8008df2:	2201      	movs	r2, #1
 8008df4:	f04f 31ff 	mov.w	r1, #4294967295
 8008df8:	483d      	ldr	r0, [pc, #244]	; (8008ef0 <cppLoop+0x1230>)
 8008dfa:	f7f9 fa87 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008dfe:	2064      	movs	r0, #100	; 0x64
 8008e00:	f001 f87e 	bl	8009f00 <HAL_Delay>
			if(selector_vel2 == 0)
 8008e04:	4b3f      	ldr	r3, [pc, #252]	; (8008f04 <cppLoop+0x1244>)
 8008e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d113      	bne.n	8008e36 <cppLoop+0x1176>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008e0e:	4b3e      	ldr	r3, [pc, #248]	; (8008f08 <cppLoop+0x1248>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7f7 fbb0 	bl	8000578 <__aeabi_f2d>
 8008e18:	a333      	add	r3, pc, #204	; (adr r3, 8008ee8 <cppLoop+0x1228>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fa4b 	bl	80002b8 <__aeabi_dsub>
 8008e22:	4603      	mov	r3, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	4618      	mov	r0, r3
 8008e28:	4621      	mov	r1, r4
 8008e2a:	f7f7 fef5 	bl	8000c18 <__aeabi_d2f>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	4b35      	ldr	r3, [pc, #212]	; (8008f08 <cppLoop+0x1248>)
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e012      	b.n	8008e5c <cppLoop+0x119c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008e36:	4b35      	ldr	r3, [pc, #212]	; (8008f0c <cppLoop+0x124c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f7 fb9c 	bl	8000578 <__aeabi_f2d>
 8008e40:	a329      	add	r3, pc, #164	; (adr r3, 8008ee8 <cppLoop+0x1228>)
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f7f7 fa37 	bl	80002b8 <__aeabi_dsub>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	4618      	mov	r0, r3
 8008e50:	4621      	mov	r1, r4
 8008e52:	f7f7 fee1 	bl	8000c18 <__aeabi_d2f>
 8008e56:	4602      	mov	r2, r0
 8008e58:	4b2c      	ldr	r3, [pc, #176]	; (8008f0c <cppLoop+0x124c>)
 8008e5a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e62:	4823      	ldr	r0, [pc, #140]	; (8008ef0 <cppLoop+0x1230>)
 8008e64:	f7f9 fa52 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008e68:	f000 bf0e 	b.w	8009c88 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_C){
 8008e6c:	4824      	ldr	r0, [pc, #144]	; (8008f00 <cppLoop+0x1240>)
 8008e6e:	f7f9 f92d 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	bf0c      	ite	eq
 8008e78:	2301      	moveq	r3, #1
 8008e7a:	2300      	movne	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 8702 	beq.w	8009c88 <cppLoop+0x1fc8>
			led.LR(-1, 1);
 8008e84:	2201      	movs	r2, #1
 8008e86:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8a:	4819      	ldr	r0, [pc, #100]	; (8008ef0 <cppLoop+0x1230>)
 8008e8c:	f7f9 fa3e 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e94:	f001 f834 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <cppLoop+0x1248>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	491b      	ldr	r1, [pc, #108]	; (8008f10 <cppLoop+0x1250>)
 8008ea2:	481c      	ldr	r0, [pc, #112]	; (8008f14 <cppLoop+0x1254>)
 8008ea4:	f7f8 fcea 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <cppLoop+0x124c>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4919      	ldr	r1, [pc, #100]	; (8008f18 <cppLoop+0x1258>)
 8008eb2:	4818      	ldr	r0, [pc, #96]	; (8008f14 <cppLoop+0x1254>)
 8008eb4:	f7f8 fce2 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008eb8:	4b13      	ldr	r3, [pc, #76]	; (8008f08 <cppLoop+0x1248>)
 8008eba:	edd3 7a00 	vldr	s15, [r3]
 8008ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8008ec2:	480c      	ldr	r0, [pc, #48]	; (8008ef4 <cppLoop+0x1234>)
 8008ec4:	f7fa ffb5 	bl	8003e32 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008ec8:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <cppLoop+0x124c>)
 8008eca:	edd3 7a00 	vldr	s15, [r3]
 8008ece:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed2:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <cppLoop+0x1234>)
 8008ed4:	f7fa ffcd 	bl	8003e72 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f04f 31ff 	mov.w	r1, #4294967295
 8008ede:	4804      	ldr	r0, [pc, #16]	; (8008ef0 <cppLoop+0x1230>)
 8008ee0:	f7f9 fa14 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008ee4:	f000 bed0 	b.w	8009c88 <cppLoop+0x1fc8>
 8008ee8:	9999999a 	.word	0x9999999a
 8008eec:	3fb99999 	.word	0x3fb99999
 8008ef0:	200005bc 	.word	0x200005bc
 8008ef4:	2002390c 	.word	0x2002390c
 8008ef8:	0801a0a8 	.word	0x0801a0a8
 8008efc:	0801a06c 	.word	0x0801a06c
 8008f00:	200005b0 	.word	0x200005b0
 8008f04:	20048188 	.word	0x20048188
 8008f08:	200481cc 	.word	0x200481cc
 8008f0c:	200481dc 	.word	0x200481dc
 8008f10:	0801a0b4 	.word	0x0801a0b4
 8008f14:	0801a010 	.word	0x0801a010
 8008f18:	0801a0c0 	.word	0x0801a0c0

	case 7:
		led.fullColor('W');
 8008f1c:	2157      	movs	r1, #87	; 0x57
 8008f1e:	48c2      	ldr	r0, [pc, #776]	; (8009228 <cppLoop+0x1568>)
 8008f20:	f7f9 f938 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f24:	f7f8 f8bc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f28:	2100      	movs	r1, #0
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f7f8 f8c8 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008f30:	48be      	ldr	r0, [pc, #760]	; (800922c <cppLoop+0x156c>)
 8008f32:	f7fb f832 	bl	8003f9a <_ZN9LineTrace9getMaxAccEv>
 8008f36:	ee10 3a10 	vmov	r3, s0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f7 fb1c 	bl	8000578 <__aeabi_f2d>
 8008f40:	4603      	mov	r3, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	461a      	mov	r2, r3
 8008f46:	4623      	mov	r3, r4
 8008f48:	48b9      	ldr	r0, [pc, #740]	; (8009230 <cppLoop+0x1570>)
 8008f4a:	f7f8 f8e3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f4e:	2101      	movs	r1, #1
 8008f50:	2000      	movs	r0, #0
 8008f52:	f7f8 f8b5 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008f56:	48b5      	ldr	r0, [pc, #724]	; (800922c <cppLoop+0x156c>)
 8008f58:	f7fb f855 	bl	8004006 <_ZN9LineTrace9getMaxDecEv>
 8008f5c:	ee10 3a10 	vmov	r3, s0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f7 fb09 	bl	8000578 <__aeabi_f2d>
 8008f66:	4603      	mov	r3, r0
 8008f68:	460c      	mov	r4, r1
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	4623      	mov	r3, r4
 8008f6e:	48b1      	ldr	r0, [pc, #708]	; (8009234 <cppLoop+0x1574>)
 8008f70:	f7f8 f8d0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008f74:	48b0      	ldr	r0, [pc, #704]	; (8009238 <cppLoop+0x1578>)
 8008f76:	f7f9 f8a9 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	bf0c      	ite	eq
 8008f80:	2301      	moveq	r3, #1
 8008f82:	2300      	movne	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d022      	beq.n	8008fd0 <cppLoop+0x1310>
			led.LR(-1, 1);
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f90:	48a5      	ldr	r0, [pc, #660]	; (8009228 <cppLoop+0x1568>)
 8008f92:	f7f9 f9bb 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f9a:	f000 ffb1 	bl	8009f00 <HAL_Delay>

			selector_acc++;
 8008f9e:	4ba7      	ldr	r3, [pc, #668]	; (800923c <cppLoop+0x157c>)
 8008fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	b21a      	sxth	r2, r3
 8008fac:	4ba3      	ldr	r3, [pc, #652]	; (800923c <cppLoop+0x157c>)
 8008fae:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008fb0:	4ba2      	ldr	r3, [pc, #648]	; (800923c <cppLoop+0x157c>)
 8008fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	dd02      	ble.n	8008fc0 <cppLoop+0x1300>
 8008fba:	4ba0      	ldr	r3, [pc, #640]	; (800923c <cppLoop+0x157c>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8008fc6:	4898      	ldr	r0, [pc, #608]	; (8009228 <cppLoop+0x1568>)
 8008fc8:	f7f9 f9a0 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008fcc:	f000 be5e 	b.w	8009c8c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_R){
 8008fd0:	4899      	ldr	r0, [pc, #612]	; (8009238 <cppLoop+0x1578>)
 8008fd2:	f7f9 f87b 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d03c      	beq.n	8009060 <cppLoop+0x13a0>
			led.LR(-1, 1);
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8008fec:	488e      	ldr	r0, [pc, #568]	; (8009228 <cppLoop+0x1568>)
 8008fee:	f7f9 f98d 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ff2:	2064      	movs	r0, #100	; 0x64
 8008ff4:	f000 ff84 	bl	8009f00 <HAL_Delay>
			if(selector_acc == 0){
 8008ff8:	4b90      	ldr	r3, [pc, #576]	; (800923c <cppLoop+0x157c>)
 8008ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d113      	bne.n	800902a <cppLoop+0x136a>
				adj_acc = adj_acc + 0.1;
 8009002:	4b8f      	ldr	r3, [pc, #572]	; (8009240 <cppLoop+0x1580>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4618      	mov	r0, r3
 8009008:	f7f7 fab6 	bl	8000578 <__aeabi_f2d>
 800900c:	a384      	add	r3, pc, #528	; (adr r3, 8009220 <cppLoop+0x1560>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 f953 	bl	80002bc <__adddf3>
 8009016:	4603      	mov	r3, r0
 8009018:	460c      	mov	r4, r1
 800901a:	4618      	mov	r0, r3
 800901c:	4621      	mov	r1, r4
 800901e:	f7f7 fdfb 	bl	8000c18 <__aeabi_d2f>
 8009022:	4602      	mov	r2, r0
 8009024:	4b86      	ldr	r3, [pc, #536]	; (8009240 <cppLoop+0x1580>)
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	e012      	b.n	8009050 <cppLoop+0x1390>
				adj_dec = adj_dec + 0.1;
 800902a:	4b86      	ldr	r3, [pc, #536]	; (8009244 <cppLoop+0x1584>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f7f7 faa2 	bl	8000578 <__aeabi_f2d>
 8009034:	a37a      	add	r3, pc, #488	; (adr r3, 8009220 <cppLoop+0x1560>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f93f 	bl	80002bc <__adddf3>
 800903e:	4603      	mov	r3, r0
 8009040:	460c      	mov	r4, r1
 8009042:	4618      	mov	r0, r3
 8009044:	4621      	mov	r1, r4
 8009046:	f7f7 fde7 	bl	8000c18 <__aeabi_d2f>
 800904a:	4602      	mov	r2, r0
 800904c:	4b7d      	ldr	r3, [pc, #500]	; (8009244 <cppLoop+0x1584>)
 800904e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009050:	2200      	movs	r2, #0
 8009052:	f04f 31ff 	mov.w	r1, #4294967295
 8009056:	4874      	ldr	r0, [pc, #464]	; (8009228 <cppLoop+0x1568>)
 8009058:	f7f9 f958 	bl	800230c <_ZN3LED2LREaa>
		break;
 800905c:	f000 be16 	b.w	8009c8c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_L){
 8009060:	4875      	ldr	r0, [pc, #468]	; (8009238 <cppLoop+0x1578>)
 8009062:	f7f9 f833 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009066:	4603      	mov	r3, r0
 8009068:	2b01      	cmp	r3, #1
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d03c      	beq.n	80090f0 <cppLoop+0x1430>
			led.LR(-1, 1);
 8009076:	2201      	movs	r2, #1
 8009078:	f04f 31ff 	mov.w	r1, #4294967295
 800907c:	486a      	ldr	r0, [pc, #424]	; (8009228 <cppLoop+0x1568>)
 800907e:	f7f9 f945 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009082:	2064      	movs	r0, #100	; 0x64
 8009084:	f000 ff3c 	bl	8009f00 <HAL_Delay>
			if(selector_acc == 0){
 8009088:	4b6c      	ldr	r3, [pc, #432]	; (800923c <cppLoop+0x157c>)
 800908a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d113      	bne.n	80090ba <cppLoop+0x13fa>
				adj_acc = adj_acc - 0.1;
 8009092:	4b6b      	ldr	r3, [pc, #428]	; (8009240 <cppLoop+0x1580>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f7f7 fa6e 	bl	8000578 <__aeabi_f2d>
 800909c:	a360      	add	r3, pc, #384	; (adr r3, 8009220 <cppLoop+0x1560>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f909 	bl	80002b8 <__aeabi_dsub>
 80090a6:	4603      	mov	r3, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	4618      	mov	r0, r3
 80090ac:	4621      	mov	r1, r4
 80090ae:	f7f7 fdb3 	bl	8000c18 <__aeabi_d2f>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b62      	ldr	r3, [pc, #392]	; (8009240 <cppLoop+0x1580>)
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	e012      	b.n	80090e0 <cppLoop+0x1420>
				adj_dec = adj_dec - 0.1;
 80090ba:	4b62      	ldr	r3, [pc, #392]	; (8009244 <cppLoop+0x1584>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f7 fa5a 	bl	8000578 <__aeabi_f2d>
 80090c4:	a356      	add	r3, pc, #344	; (adr r3, 8009220 <cppLoop+0x1560>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f8f5 	bl	80002b8 <__aeabi_dsub>
 80090ce:	4603      	mov	r3, r0
 80090d0:	460c      	mov	r4, r1
 80090d2:	4618      	mov	r0, r3
 80090d4:	4621      	mov	r1, r4
 80090d6:	f7f7 fd9f 	bl	8000c18 <__aeabi_d2f>
 80090da:	4602      	mov	r2, r0
 80090dc:	4b59      	ldr	r3, [pc, #356]	; (8009244 <cppLoop+0x1584>)
 80090de:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80090e0:	2200      	movs	r2, #0
 80090e2:	f04f 31ff 	mov.w	r1, #4294967295
 80090e6:	4850      	ldr	r0, [pc, #320]	; (8009228 <cppLoop+0x1568>)
 80090e8:	f7f9 f910 	bl	800230c <_ZN3LED2LREaa>
		break;
 80090ec:	f000 bdce 	b.w	8009c8c <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_C){
 80090f0:	4851      	ldr	r0, [pc, #324]	; (8009238 <cppLoop+0x1578>)
 80090f2:	f7f8 ffeb 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 85c2 	beq.w	8009c8c <cppLoop+0x1fcc>
			led.LR(-1, 1);
 8009108:	2201      	movs	r2, #1
 800910a:	f04f 31ff 	mov.w	r1, #4294967295
 800910e:	4846      	ldr	r0, [pc, #280]	; (8009228 <cppLoop+0x1568>)
 8009110:	f7f9 f8fc 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009114:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009118:	f000 fef2 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800911c:	2300      	movs	r3, #0
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4b47      	ldr	r3, [pc, #284]	; (8009240 <cppLoop+0x1580>)
 8009122:	2201      	movs	r2, #1
 8009124:	4948      	ldr	r1, [pc, #288]	; (8009248 <cppLoop+0x1588>)
 8009126:	4849      	ldr	r0, [pc, #292]	; (800924c <cppLoop+0x158c>)
 8009128:	f7f8 fba8 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800912c:	2300      	movs	r3, #0
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	4b44      	ldr	r3, [pc, #272]	; (8009244 <cppLoop+0x1584>)
 8009132:	2201      	movs	r2, #1
 8009134:	4946      	ldr	r1, [pc, #280]	; (8009250 <cppLoop+0x1590>)
 8009136:	4845      	ldr	r0, [pc, #276]	; (800924c <cppLoop+0x158c>)
 8009138:	f7f8 fba0 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800913c:	4b40      	ldr	r3, [pc, #256]	; (8009240 <cppLoop+0x1580>)
 800913e:	edd3 7a00 	vldr	s15, [r3]
 8009142:	4b40      	ldr	r3, [pc, #256]	; (8009244 <cppLoop+0x1584>)
 8009144:	ed93 7a00 	vldr	s14, [r3]
 8009148:	eef0 0a47 	vmov.f32	s1, s14
 800914c:	eeb0 0a67 	vmov.f32	s0, s15
 8009150:	4836      	ldr	r0, [pc, #216]	; (800922c <cppLoop+0x156c>)
 8009152:	f7fa feee 	bl	8003f32 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8009156:	2200      	movs	r2, #0
 8009158:	f04f 31ff 	mov.w	r1, #4294967295
 800915c:	4832      	ldr	r0, [pc, #200]	; (8009228 <cppLoop+0x1568>)
 800915e:	f7f9 f8d5 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009162:	f000 bd93 	b.w	8009c8c <cppLoop+0x1fcc>

	case 8:
		led.fullColor('W');
 8009166:	2157      	movs	r1, #87	; 0x57
 8009168:	482f      	ldr	r0, [pc, #188]	; (8009228 <cppLoop+0x1568>)
 800916a:	f7f9 f813 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 800916e:	f7f7 ff97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009172:	2100      	movs	r1, #0
 8009174:	2000      	movs	r0, #0
 8009176:	f7f7 ffa3 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800917a:	482c      	ldr	r0, [pc, #176]	; (800922c <cppLoop+0x156c>)
 800917c:	f7fa ff31 	bl	8003fe2 <_ZN9LineTrace10getMaxAcc2Ev>
 8009180:	ee10 3a10 	vmov	r3, s0
 8009184:	4618      	mov	r0, r3
 8009186:	f7f7 f9f7 	bl	8000578 <__aeabi_f2d>
 800918a:	4603      	mov	r3, r0
 800918c:	460c      	mov	r4, r1
 800918e:	461a      	mov	r2, r3
 8009190:	4623      	mov	r3, r4
 8009192:	4830      	ldr	r0, [pc, #192]	; (8009254 <cppLoop+0x1594>)
 8009194:	f7f7 ffbe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009198:	2101      	movs	r1, #1
 800919a:	2000      	movs	r0, #0
 800919c:	f7f7 ff90 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80091a0:	4822      	ldr	r0, [pc, #136]	; (800922c <cppLoop+0x156c>)
 80091a2:	f7fa ff0c 	bl	8003fbe <_ZN9LineTrace10getMaxDec2Ev>
 80091a6:	ee10 3a10 	vmov	r3, s0
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f7 f9e4 	bl	8000578 <__aeabi_f2d>
 80091b0:	4603      	mov	r3, r0
 80091b2:	460c      	mov	r4, r1
 80091b4:	461a      	mov	r2, r3
 80091b6:	4623      	mov	r3, r4
 80091b8:	4827      	ldr	r0, [pc, #156]	; (8009258 <cppLoop+0x1598>)
 80091ba:	f7f7 ffab 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80091be:	481e      	ldr	r0, [pc, #120]	; (8009238 <cppLoop+0x1578>)
 80091c0:	f7f8 ff84 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b08      	cmp	r3, #8
 80091c8:	bf0c      	ite	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	2300      	movne	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d045      	beq.n	8009260 <cppLoop+0x15a0>
			led.LR(-1, 1);
 80091d4:	2201      	movs	r2, #1
 80091d6:	f04f 31ff 	mov.w	r1, #4294967295
 80091da:	4813      	ldr	r0, [pc, #76]	; (8009228 <cppLoop+0x1568>)
 80091dc:	f7f9 f896 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091e4:	f000 fe8c 	bl	8009f00 <HAL_Delay>

			selector_acc2++;
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <cppLoop+0x159c>)
 80091ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3301      	adds	r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	b21a      	sxth	r2, r3
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <cppLoop+0x159c>)
 80091f8:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 80091fa:	4b18      	ldr	r3, [pc, #96]	; (800925c <cppLoop+0x159c>)
 80091fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009200:	2b01      	cmp	r3, #1
 8009202:	dd02      	ble.n	800920a <cppLoop+0x154a>
 8009204:	4b15      	ldr	r3, [pc, #84]	; (800925c <cppLoop+0x159c>)
 8009206:	2200      	movs	r2, #0
 8009208:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800920a:	2200      	movs	r2, #0
 800920c:	f04f 31ff 	mov.w	r1, #4294967295
 8009210:	4805      	ldr	r0, [pc, #20]	; (8009228 <cppLoop+0x1568>)
 8009212:	f7f9 f87b 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009216:	f000 bd3b 	b.w	8009c90 <cppLoop+0x1fd0>
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w
 8009220:	9999999a 	.word	0x9999999a
 8009224:	3fb99999 	.word	0x3fb99999
 8009228:	200005bc 	.word	0x200005bc
 800922c:	2002390c 	.word	0x2002390c
 8009230:	0801a0cc 	.word	0x0801a0cc
 8009234:	0801a0d8 	.word	0x0801a0d8
 8009238:	200005b0 	.word	0x200005b0
 800923c:	20048182 	.word	0x20048182
 8009240:	200481e4 	.word	0x200481e4
 8009244:	200481ec 	.word	0x200481ec
 8009248:	0801a0e4 	.word	0x0801a0e4
 800924c:	0801a010 	.word	0x0801a010
 8009250:	0801a0ec 	.word	0x0801a0ec
 8009254:	0801a0f4 	.word	0x0801a0f4
 8009258:	0801a100 	.word	0x0801a100
 800925c:	20048184 	.word	0x20048184
		else if(joy_stick.getValue() == JOY_R){
 8009260:	48bf      	ldr	r0, [pc, #764]	; (8009560 <cppLoop+0x18a0>)
 8009262:	f7f8 ff33 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009266:	4603      	mov	r3, r0
 8009268:	2b10      	cmp	r3, #16
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d03c      	beq.n	80092f0 <cppLoop+0x1630>
			led.LR(-1, 1);
 8009276:	2201      	movs	r2, #1
 8009278:	f04f 31ff 	mov.w	r1, #4294967295
 800927c:	48b9      	ldr	r0, [pc, #740]	; (8009564 <cppLoop+0x18a4>)
 800927e:	f7f9 f845 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009282:	2064      	movs	r0, #100	; 0x64
 8009284:	f000 fe3c 	bl	8009f00 <HAL_Delay>
			if(selector_acc2 == 0){
 8009288:	4bb7      	ldr	r3, [pc, #732]	; (8009568 <cppLoop+0x18a8>)
 800928a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d113      	bne.n	80092ba <cppLoop+0x15fa>
				adj_acc2 = adj_acc2 + 0.1;
 8009292:	4bb6      	ldr	r3, [pc, #728]	; (800956c <cppLoop+0x18ac>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f7f7 f96e 	bl	8000578 <__aeabi_f2d>
 800929c:	a3ae      	add	r3, pc, #696	; (adr r3, 8009558 <cppLoop+0x1898>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f7 f80b 	bl	80002bc <__adddf3>
 80092a6:	4603      	mov	r3, r0
 80092a8:	460c      	mov	r4, r1
 80092aa:	4618      	mov	r0, r3
 80092ac:	4621      	mov	r1, r4
 80092ae:	f7f7 fcb3 	bl	8000c18 <__aeabi_d2f>
 80092b2:	4602      	mov	r2, r0
 80092b4:	4bad      	ldr	r3, [pc, #692]	; (800956c <cppLoop+0x18ac>)
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	e012      	b.n	80092e0 <cppLoop+0x1620>
				adj_dec2 = adj_dec2 + 0.1;
 80092ba:	4bad      	ldr	r3, [pc, #692]	; (8009570 <cppLoop+0x18b0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7f7 f95a 	bl	8000578 <__aeabi_f2d>
 80092c4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009558 <cppLoop+0x1898>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f6 fff7 	bl	80002bc <__adddf3>
 80092ce:	4603      	mov	r3, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	4618      	mov	r0, r3
 80092d4:	4621      	mov	r1, r4
 80092d6:	f7f7 fc9f 	bl	8000c18 <__aeabi_d2f>
 80092da:	4602      	mov	r2, r0
 80092dc:	4ba4      	ldr	r3, [pc, #656]	; (8009570 <cppLoop+0x18b0>)
 80092de:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80092e0:	2200      	movs	r2, #0
 80092e2:	f04f 31ff 	mov.w	r1, #4294967295
 80092e6:	489f      	ldr	r0, [pc, #636]	; (8009564 <cppLoop+0x18a4>)
 80092e8:	f7f9 f810 	bl	800230c <_ZN3LED2LREaa>
		break;
 80092ec:	f000 bcd0 	b.w	8009c90 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_L){
 80092f0:	489b      	ldr	r0, [pc, #620]	; (8009560 <cppLoop+0x18a0>)
 80092f2:	f7f8 feeb 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	bf0c      	ite	eq
 80092fc:	2301      	moveq	r3, #1
 80092fe:	2300      	movne	r3, #0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d03c      	beq.n	8009380 <cppLoop+0x16c0>
			led.LR(-1, 1);
 8009306:	2201      	movs	r2, #1
 8009308:	f04f 31ff 	mov.w	r1, #4294967295
 800930c:	4895      	ldr	r0, [pc, #596]	; (8009564 <cppLoop+0x18a4>)
 800930e:	f7f8 fffd 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009312:	2064      	movs	r0, #100	; 0x64
 8009314:	f000 fdf4 	bl	8009f00 <HAL_Delay>
			if(selector_acc2 == 0){
 8009318:	4b93      	ldr	r3, [pc, #588]	; (8009568 <cppLoop+0x18a8>)
 800931a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d113      	bne.n	800934a <cppLoop+0x168a>
				adj_acc2 = adj_acc2 - 0.1;
 8009322:	4b92      	ldr	r3, [pc, #584]	; (800956c <cppLoop+0x18ac>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f7f7 f926 	bl	8000578 <__aeabi_f2d>
 800932c:	a38a      	add	r3, pc, #552	; (adr r3, 8009558 <cppLoop+0x1898>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f6 ffc1 	bl	80002b8 <__aeabi_dsub>
 8009336:	4603      	mov	r3, r0
 8009338:	460c      	mov	r4, r1
 800933a:	4618      	mov	r0, r3
 800933c:	4621      	mov	r1, r4
 800933e:	f7f7 fc6b 	bl	8000c18 <__aeabi_d2f>
 8009342:	4602      	mov	r2, r0
 8009344:	4b89      	ldr	r3, [pc, #548]	; (800956c <cppLoop+0x18ac>)
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e012      	b.n	8009370 <cppLoop+0x16b0>
				adj_dec2 = adj_dec2 - 0.1;
 800934a:	4b89      	ldr	r3, [pc, #548]	; (8009570 <cppLoop+0x18b0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7f7 f912 	bl	8000578 <__aeabi_f2d>
 8009354:	a380      	add	r3, pc, #512	; (adr r3, 8009558 <cppLoop+0x1898>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f7f6 ffad 	bl	80002b8 <__aeabi_dsub>
 800935e:	4603      	mov	r3, r0
 8009360:	460c      	mov	r4, r1
 8009362:	4618      	mov	r0, r3
 8009364:	4621      	mov	r1, r4
 8009366:	f7f7 fc57 	bl	8000c18 <__aeabi_d2f>
 800936a:	4602      	mov	r2, r0
 800936c:	4b80      	ldr	r3, [pc, #512]	; (8009570 <cppLoop+0x18b0>)
 800936e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009370:	2200      	movs	r2, #0
 8009372:	f04f 31ff 	mov.w	r1, #4294967295
 8009376:	487b      	ldr	r0, [pc, #492]	; (8009564 <cppLoop+0x18a4>)
 8009378:	f7f8 ffc8 	bl	800230c <_ZN3LED2LREaa>
		break;
 800937c:	f000 bc88 	b.w	8009c90 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_C){
 8009380:	4877      	ldr	r0, [pc, #476]	; (8009560 <cppLoop+0x18a0>)
 8009382:	f7f8 fea3 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009386:	4603      	mov	r3, r0
 8009388:	2b02      	cmp	r3, #2
 800938a:	bf0c      	ite	eq
 800938c:	2301      	moveq	r3, #1
 800938e:	2300      	movne	r3, #0
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 847c 	beq.w	8009c90 <cppLoop+0x1fd0>
			led.LR(-1, 1);
 8009398:	2201      	movs	r2, #1
 800939a:	f04f 31ff 	mov.w	r1, #4294967295
 800939e:	4871      	ldr	r0, [pc, #452]	; (8009564 <cppLoop+0x18a4>)
 80093a0:	f7f8 ffb4 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093a8:	f000 fdaa 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80093ac:	2300      	movs	r3, #0
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4b6e      	ldr	r3, [pc, #440]	; (800956c <cppLoop+0x18ac>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	496f      	ldr	r1, [pc, #444]	; (8009574 <cppLoop+0x18b4>)
 80093b6:	4870      	ldr	r0, [pc, #448]	; (8009578 <cppLoop+0x18b8>)
 80093b8:	f7f8 fa60 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80093bc:	2300      	movs	r3, #0
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4b6b      	ldr	r3, [pc, #428]	; (8009570 <cppLoop+0x18b0>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	496d      	ldr	r1, [pc, #436]	; (800957c <cppLoop+0x18bc>)
 80093c6:	486c      	ldr	r0, [pc, #432]	; (8009578 <cppLoop+0x18b8>)
 80093c8:	f7f8 fa58 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80093cc:	4b67      	ldr	r3, [pc, #412]	; (800956c <cppLoop+0x18ac>)
 80093ce:	edd3 7a00 	vldr	s15, [r3]
 80093d2:	4b67      	ldr	r3, [pc, #412]	; (8009570 <cppLoop+0x18b0>)
 80093d4:	ed93 7a00 	vldr	s14, [r3]
 80093d8:	eef0 0a47 	vmov.f32	s1, s14
 80093dc:	eeb0 0a67 	vmov.f32	s0, s15
 80093e0:	4867      	ldr	r0, [pc, #412]	; (8009580 <cppLoop+0x18c0>)
 80093e2:	f7fa fdc0 	bl	8003f66 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 80093e6:	2200      	movs	r2, #0
 80093e8:	f04f 31ff 	mov.w	r1, #4294967295
 80093ec:	485d      	ldr	r0, [pc, #372]	; (8009564 <cppLoop+0x18a4>)
 80093ee:	f7f8 ff8d 	bl	800230c <_ZN3LED2LREaa>
		break;
 80093f2:	f000 bc4d 	b.w	8009c90 <cppLoop+0x1fd0>

	case 9:
		led.fullColor('~');
 80093f6:	217e      	movs	r1, #126	; 0x7e
 80093f8:	485a      	ldr	r0, [pc, #360]	; (8009564 <cppLoop+0x18a4>)
 80093fa:	f7f8 fecb 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80093fe:	f7f7 fe4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009402:	2100      	movs	r1, #0
 8009404:	2000      	movs	r0, #0
 8009406:	f7f7 fe5b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800940a:	485e      	ldr	r0, [pc, #376]	; (8009584 <cppLoop+0x18c4>)
 800940c:	f7f7 fe82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009410:	2101      	movs	r1, #1
 8009412:	2000      	movs	r0, #0
 8009414:	f7f7 fe54 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009418:	485b      	ldr	r0, [pc, #364]	; (8009588 <cppLoop+0x18c8>)
 800941a:	f7f7 fe7b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800941e:	4850      	ldr	r0, [pc, #320]	; (8009560 <cppLoop+0x18a0>)
 8009420:	f7f8 fe54 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009424:	4603      	mov	r3, r0
 8009426:	2b02      	cmp	r3, #2
 8009428:	bf0c      	ite	eq
 800942a:	2301      	moveq	r3, #1
 800942c:	2300      	movne	r3, #0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 842f 	beq.w	8009c94 <cppLoop+0x1fd4>
			led.LR(-1, 1);
 8009436:	2201      	movs	r2, #1
 8009438:	f04f 31ff 	mov.w	r1, #4294967295
 800943c:	4849      	ldr	r0, [pc, #292]	; (8009564 <cppLoop+0x18a4>)
 800943e:	f7f8 ff65 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009446:	f000 fd5b 	bl	8009f00 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800944a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800958c <cppLoop+0x18cc>
 800944e:	484c      	ldr	r0, [pc, #304]	; (8009580 <cppLoop+0x18c0>)
 8009450:	f7fa fcc0 	bl	8003dd4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009454:	484a      	ldr	r0, [pc, #296]	; (8009580 <cppLoop+0x18c0>)
 8009456:	f7fa ff2d 	bl	80042b4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800945a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800945e:	f000 fd4f 	bl	8009f00 <HAL_Delay>

			led.fullColor('R');
 8009462:	2152      	movs	r1, #82	; 0x52
 8009464:	483f      	ldr	r0, [pc, #252]	; (8009564 <cppLoop+0x18a4>)
 8009466:	f7f8 fe95 	bl	8002194 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800946a:	4849      	ldr	r0, [pc, #292]	; (8009590 <cppLoop+0x18d0>)
 800946c:	f7f8 f958 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009470:	f242 7010 	movw	r0, #10000	; 0x2710
 8009474:	f000 fd44 	bl	8009f00 <HAL_Delay>

			line_trace.stop();
 8009478:	4841      	ldr	r0, [pc, #260]	; (8009580 <cppLoop+0x18c0>)
 800947a:	f7fa ffc7 	bl	800440c <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800947e:	4945      	ldr	r1, [pc, #276]	; (8009594 <cppLoop+0x18d4>)
 8009480:	4845      	ldr	r0, [pc, #276]	; (8009598 <cppLoop+0x18d8>)
 8009482:	f7f8 f986 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8009486:	4842      	ldr	r0, [pc, #264]	; (8009590 <cppLoop+0x18d0>)
 8009488:	f7f8 f90e 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 800948c:	eef0 7a40 	vmov.f32	s15, s0
 8009490:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009494:	1d3b      	adds	r3, r7, #4
 8009496:	2201      	movs	r2, #1
 8009498:	4619      	mov	r1, r3
 800949a:	2001      	movs	r0, #1
 800949c:	f7f8 f99c 	bl	80017d8 <sd_write_float>
			user_fclose();
 80094a0:	f7f8 f98a 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80094a4:	2200      	movs	r2, #0
 80094a6:	f04f 31ff 	mov.w	r1, #4294967295
 80094aa:	482e      	ldr	r0, [pc, #184]	; (8009564 <cppLoop+0x18a4>)
 80094ac:	f7f8 ff2e 	bl	800230c <_ZN3LED2LREaa>
		}
		break;
 80094b0:	e3f0      	b.n	8009c94 <cppLoop+0x1fd4>

	case 10:
		led.fullColor('~');
 80094b2:	217e      	movs	r1, #126	; 0x7e
 80094b4:	482b      	ldr	r0, [pc, #172]	; (8009564 <cppLoop+0x18a4>)
 80094b6:	f7f8 fe6d 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ba:	f7f7 fdf1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094be:	2100      	movs	r1, #0
 80094c0:	2000      	movs	r0, #0
 80094c2:	f7f7 fdfd 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80094c6:	4835      	ldr	r0, [pc, #212]	; (800959c <cppLoop+0x18dc>)
 80094c8:	f7f7 fe24 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094cc:	2101      	movs	r1, #1
 80094ce:	2000      	movs	r0, #0
 80094d0:	f7f7 fdf6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80094d4:	4832      	ldr	r0, [pc, #200]	; (80095a0 <cppLoop+0x18e0>)
 80094d6:	f7f7 fe1d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80094da:	4821      	ldr	r0, [pc, #132]	; (8009560 <cppLoop+0x18a0>)
 80094dc:	f7f8 fdf6 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	bf0c      	ite	eq
 80094e6:	2301      	moveq	r3, #1
 80094e8:	2300      	movne	r3, #0
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 83d3 	beq.w	8009c98 <cppLoop+0x1fd8>
			HAL_Delay(500);
 80094f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094f6:	f000 fd03 	bl	8009f00 <HAL_Delay>
			led.LR(-1, 1);
 80094fa:	2201      	movs	r2, #1
 80094fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009500:	4818      	ldr	r0, [pc, #96]	; (8009564 <cppLoop+0x18a4>)
 8009502:	f7f8 ff03 	bl	800230c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009506:	2102      	movs	r1, #2
 8009508:	481d      	ldr	r0, [pc, #116]	; (8009580 <cppLoop+0x18c0>)
 800950a:	f7fa fec1 	bl	8004290 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800950e:	4b25      	ldr	r3, [pc, #148]	; (80095a4 <cppLoop+0x18e4>)
 8009510:	edd3 7a00 	vldr	s15, [r3]
 8009514:	eeb0 0a67 	vmov.f32	s0, s15
 8009518:	4819      	ldr	r0, [pc, #100]	; (8009580 <cppLoop+0x18c0>)
 800951a:	f7fa fc6a 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800951e:	4b21      	ldr	r3, [pc, #132]	; (80095a4 <cppLoop+0x18e4>)
 8009520:	edd3 7a00 	vldr	s15, [r3]
 8009524:	eeb0 0a67 	vmov.f32	s0, s15
 8009528:	4815      	ldr	r0, [pc, #84]	; (8009580 <cppLoop+0x18c0>)
 800952a:	f7fa fc72 	bl	8003e12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800952e:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <cppLoop+0x18e4>)
 8009530:	edd3 7a00 	vldr	s15, [r3]
 8009534:	eeb0 0a67 	vmov.f32	s0, s15
 8009538:	4811      	ldr	r0, [pc, #68]	; (8009580 <cppLoop+0x18c0>)
 800953a:	f7fa fc8a 	bl	8003e52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800953e:	4810      	ldr	r0, [pc, #64]	; (8009580 <cppLoop+0x18c0>)
 8009540:	f7fb f8b4 	bl	80046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009544:	2200      	movs	r2, #0
 8009546:	f04f 31ff 	mov.w	r1, #4294967295
 800954a:	4806      	ldr	r0, [pc, #24]	; (8009564 <cppLoop+0x18a4>)
 800954c:	f7f8 fede 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 8009550:	e3a2      	b.n	8009c98 <cppLoop+0x1fd8>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	9999999a 	.word	0x9999999a
 800955c:	3fb99999 	.word	0x3fb99999
 8009560:	200005b0 	.word	0x200005b0
 8009564:	200005bc 	.word	0x200005bc
 8009568:	20048184 	.word	0x20048184
 800956c:	200481f4 	.word	0x200481f4
 8009570:	200481fc 	.word	0x200481fc
 8009574:	0801a10c 	.word	0x0801a10c
 8009578:	0801a010 	.word	0x0801a010
 800957c:	0801a118 	.word	0x0801a118
 8009580:	2002390c 	.word	0x2002390c
 8009584:	0801a124 	.word	0x0801a124
 8009588:	0801a12c 	.word	0x0801a12c
 800958c:	00000000 	.word	0x00000000
 8009590:	2002386c 	.word	0x2002386c
 8009594:	0801a138 	.word	0x0801a138
 8009598:	0801a140 	.word	0x0801a140
 800959c:	0801a14c 	.word	0x0801a14c
 80095a0:	0801a158 	.word	0x0801a158
 80095a4:	200481cc 	.word	0x200481cc

	case 11:
		led.fullColor('~');
 80095a8:	217e      	movs	r1, #126	; 0x7e
 80095aa:	48bc      	ldr	r0, [pc, #752]	; (800989c <cppLoop+0x1bdc>)
 80095ac:	f7f8 fdf2 	bl	8002194 <_ZN3LED9fullColorEc>

lcd_clear();
 80095b0:	f7f7 fd76 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095b4:	2100      	movs	r1, #0
 80095b6:	2000      	movs	r0, #0
 80095b8:	f7f7 fd82 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80095bc:	48b8      	ldr	r0, [pc, #736]	; (80098a0 <cppLoop+0x1be0>)
 80095be:	f7f7 fda9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095c2:	2101      	movs	r1, #1
 80095c4:	2000      	movs	r0, #0
 80095c6:	f7f7 fd7b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80095ca:	48b6      	ldr	r0, [pc, #728]	; (80098a4 <cppLoop+0x1be4>)
 80095cc:	f7f7 fda2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095d0:	48b5      	ldr	r0, [pc, #724]	; (80098a8 <cppLoop+0x1be8>)
 80095d2:	f7f8 fd7b 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b02      	cmp	r3, #2
 80095da:	bf0c      	ite	eq
 80095dc:	2301      	moveq	r3, #1
 80095de:	2300      	movne	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 835a 	beq.w	8009c9c <cppLoop+0x1fdc>
			HAL_Delay(1000);
 80095e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095ec:	f000 fc88 	bl	8009f00 <HAL_Delay>
			led.LR(-1, 1);
 80095f0:	2201      	movs	r2, #1
 80095f2:	f04f 31ff 	mov.w	r1, #4294967295
 80095f6:	48a9      	ldr	r0, [pc, #676]	; (800989c <cppLoop+0x1bdc>)
 80095f8:	f7f8 fe88 	bl	800230c <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80095fc:	eddf 1aab 	vldr	s3, [pc, #684]	; 80098ac <cppLoop+0x1bec>
 8009600:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 80098ac <cppLoop+0x1bec>
 8009604:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80098ac <cppLoop+0x1bec>
 8009608:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80098ac <cppLoop+0x1bec>
 800960c:	48a8      	ldr	r0, [pc, #672]	; (80098b0 <cppLoop+0x1bf0>)
 800960e:	f7f7 fe1f 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009612:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009616:	f000 fc73 	bl	8009f00 <HAL_Delay>
			esc.off();
 800961a:	48a5      	ldr	r0, [pc, #660]	; (80098b0 <cppLoop+0x1bf0>)
 800961c:	f7f7 feb2 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009620:	2200      	movs	r2, #0
 8009622:	f04f 31ff 	mov.w	r1, #4294967295
 8009626:	489d      	ldr	r0, [pc, #628]	; (800989c <cppLoop+0x1bdc>)
 8009628:	f7f8 fe70 	bl	800230c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800962c:	e336      	b.n	8009c9c <cppLoop+0x1fdc>

	case 12:
		led.fullColor('~');
 800962e:	217e      	movs	r1, #126	; 0x7e
 8009630:	489a      	ldr	r0, [pc, #616]	; (800989c <cppLoop+0x1bdc>)
 8009632:	f7f8 fdaf 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009636:	f7f7 fd33 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800963a:	2100      	movs	r1, #0
 800963c:	2000      	movs	r0, #0
 800963e:	f7f7 fd3f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009642:	489c      	ldr	r0, [pc, #624]	; (80098b4 <cppLoop+0x1bf4>)
 8009644:	f7f7 fd66 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009648:	2101      	movs	r1, #1
 800964a:	2000      	movs	r0, #0
 800964c:	f7f7 fd38 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009650:	4899      	ldr	r0, [pc, #612]	; (80098b8 <cppLoop+0x1bf8>)
 8009652:	f7f7 fd5f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009656:	4894      	ldr	r0, [pc, #592]	; (80098a8 <cppLoop+0x1be8>)
 8009658:	f7f8 fd38 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800965c:	4603      	mov	r3, r0
 800965e:	2b02      	cmp	r3, #2
 8009660:	bf0c      	ite	eq
 8009662:	2301      	moveq	r3, #1
 8009664:	2300      	movne	r3, #0
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 8319 	beq.w	8009ca0 <cppLoop+0x1fe0>
			HAL_Delay(1500);
 800966e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009672:	f000 fc45 	bl	8009f00 <HAL_Delay>
			led.LR(-1, 1);
 8009676:	2201      	movs	r2, #1
 8009678:	f04f 31ff 	mov.w	r1, #4294967295
 800967c:	4887      	ldr	r0, [pc, #540]	; (800989c <cppLoop+0x1bdc>)
 800967e:	f7f8 fe45 	bl	800230c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009682:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009686:	f000 fc3b 	bl	8009f00 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800968a:	eddf 1a88 	vldr	s3, [pc, #544]	; 80098ac <cppLoop+0x1bec>
 800968e:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80098ac <cppLoop+0x1bec>
 8009692:	eddf 0a86 	vldr	s1, [pc, #536]	; 80098ac <cppLoop+0x1bec>
 8009696:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80098ac <cppLoop+0x1bec>
 800969a:	4885      	ldr	r0, [pc, #532]	; (80098b0 <cppLoop+0x1bf0>)
 800969c:	f7f7 fdd8 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80096a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096a4:	f000 fc2c 	bl	8009f00 <HAL_Delay>

			logger.start();
 80096a8:	4884      	ldr	r0, [pc, #528]	; (80098bc <cppLoop+0x1bfc>)
 80096aa:	f7fb fb9d 	bl	8004de8 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80096ae:	4884      	ldr	r0, [pc, #528]	; (80098c0 <cppLoop+0x1c00>)
 80096b0:	f7fc fc83 	bl	8005fba <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80096b4:	eddf 0a83 	vldr	s1, [pc, #524]	; 80098c4 <cppLoop+0x1c04>
 80096b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096bc:	4880      	ldr	r0, [pc, #512]	; (80098c0 <cppLoop+0x1c00>)
 80096be:	f7fc fc0f 	bl	8005ee0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80096c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096c6:	f000 fc1b 	bl	8009f00 <HAL_Delay>

			logger.stop();
 80096ca:	487c      	ldr	r0, [pc, #496]	; (80098bc <cppLoop+0x1bfc>)
 80096cc:	f7fb fbab 	bl	8004e26 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80096d0:	487b      	ldr	r0, [pc, #492]	; (80098c0 <cppLoop+0x1c00>)
 80096d2:	f7fc fc85 	bl	8005fe0 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80096d6:	4876      	ldr	r0, [pc, #472]	; (80098b0 <cppLoop+0x1bf0>)
 80096d8:	f7f7 fe54 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80096dc:	4a7a      	ldr	r2, [pc, #488]	; (80098c8 <cppLoop+0x1c08>)
 80096de:	497b      	ldr	r1, [pc, #492]	; (80098cc <cppLoop+0x1c0c>)
 80096e0:	4876      	ldr	r0, [pc, #472]	; (80098bc <cppLoop+0x1bfc>)
 80096e2:	f7fb fa7c 	bl	8004bde <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80096e6:	2200      	movs	r2, #0
 80096e8:	f04f 31ff 	mov.w	r1, #4294967295
 80096ec:	486b      	ldr	r0, [pc, #428]	; (800989c <cppLoop+0x1bdc>)
 80096ee:	f7f8 fe0d 	bl	800230c <_ZN3LED2LREaa>
		}
		break;
 80096f2:	e2d5      	b.n	8009ca0 <cppLoop+0x1fe0>

	case 13:

		led.fullColor('W');
 80096f4:	2157      	movs	r1, #87	; 0x57
 80096f6:	4869      	ldr	r0, [pc, #420]	; (800989c <cppLoop+0x1bdc>)
 80096f8:	f7f8 fd4c 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80096fc:	f7f7 fcd0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009700:	2100      	movs	r1, #0
 8009702:	2000      	movs	r0, #0
 8009704:	f7f7 fcdc 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009708:	4871      	ldr	r0, [pc, #452]	; (80098d0 <cppLoop+0x1c10>)
 800970a:	f7f7 fd03 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800970e:	2101      	movs	r1, #1
 8009710:	2000      	movs	r0, #0
 8009712:	f7f7 fcd5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009716:	4b6f      	ldr	r3, [pc, #444]	; (80098d4 <cppLoop+0x1c14>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f7f6 ff2c 	bl	8000578 <__aeabi_f2d>
 8009720:	4603      	mov	r3, r0
 8009722:	460c      	mov	r4, r1
 8009724:	461a      	mov	r2, r3
 8009726:	4623      	mov	r3, r4
 8009728:	486b      	ldr	r0, [pc, #428]	; (80098d8 <cppLoop+0x1c18>)
 800972a:	f7f7 fcf3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800972e:	485e      	ldr	r0, [pc, #376]	; (80098a8 <cppLoop+0x1be8>)
 8009730:	f7f8 fccc 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009734:	4603      	mov	r3, r0
 8009736:	2b02      	cmp	r3, #2
 8009738:	bf0c      	ite	eq
 800973a:	2301      	moveq	r3, #1
 800973c:	2300      	movne	r3, #0
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 82af 	beq.w	8009ca4 <cppLoop+0x1fe4>
			HAL_Delay(500);
 8009746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800974a:	f000 fbd9 	bl	8009f00 <HAL_Delay>

			led.LR(1, -1);
 800974e:	f04f 32ff 	mov.w	r2, #4294967295
 8009752:	2101      	movs	r1, #1
 8009754:	4851      	ldr	r0, [pc, #324]	; (800989c <cppLoop+0x1bdc>)
 8009756:	f7f8 fdd9 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800975a:	2102      	movs	r1, #2
 800975c:	485f      	ldr	r0, [pc, #380]	; (80098dc <cppLoop+0x1c1c>)
 800975e:	f7fa fd97 	bl	8004290 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009762:	4b5f      	ldr	r3, [pc, #380]	; (80098e0 <cppLoop+0x1c20>)
 8009764:	edd3 7a00 	vldr	s15, [r3]
 8009768:	eeb0 0a67 	vmov.f32	s0, s15
 800976c:	485b      	ldr	r0, [pc, #364]	; (80098dc <cppLoop+0x1c1c>)
 800976e:	f7fa fb40 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009772:	4b58      	ldr	r3, [pc, #352]	; (80098d4 <cppLoop+0x1c14>)
 8009774:	edd3 7a00 	vldr	s15, [r3]
 8009778:	eeb0 0a67 	vmov.f32	s0, s15
 800977c:	4857      	ldr	r0, [pc, #348]	; (80098dc <cppLoop+0x1c1c>)
 800977e:	f7fa fb48 	bl	8003e12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009782:	4b54      	ldr	r3, [pc, #336]	; (80098d4 <cppLoop+0x1c14>)
 8009784:	edd3 7a00 	vldr	s15, [r3]
 8009788:	eeb0 0a67 	vmov.f32	s0, s15
 800978c:	4853      	ldr	r0, [pc, #332]	; (80098dc <cppLoop+0x1c1c>)
 800978e:	f7fa fb60 	bl	8003e52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009792:	4852      	ldr	r0, [pc, #328]	; (80098dc <cppLoop+0x1c1c>)
 8009794:	f7fa ff8a 	bl	80046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800979c:	f000 fbb0 	bl	8009f00 <HAL_Delay>

			line_trace.running();
 80097a0:	484e      	ldr	r0, [pc, #312]	; (80098dc <cppLoop+0x1c1c>)
 80097a2:	f7fa fdb9 	bl	8004318 <_ZN9LineTrace7runningEv>

			esc.off();
 80097a6:	4842      	ldr	r0, [pc, #264]	; (80098b0 <cppLoop+0x1bf0>)
 80097a8:	f7f7 fdec 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295
 80097b0:	2100      	movs	r1, #0
 80097b2:	483a      	ldr	r0, [pc, #232]	; (800989c <cppLoop+0x1bdc>)
 80097b4:	f7f8 fdaa 	bl	800230c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80097b8:	e274      	b.n	8009ca4 <cppLoop+0x1fe4>

	case 14:
		led.fullColor('W');
 80097ba:	2157      	movs	r1, #87	; 0x57
 80097bc:	4837      	ldr	r0, [pc, #220]	; (800989c <cppLoop+0x1bdc>)
 80097be:	f7f8 fce9 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80097c2:	f7f7 fc6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80097c6:	2100      	movs	r1, #0
 80097c8:	2000      	movs	r0, #0
 80097ca:	f7f7 fc79 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80097ce:	4845      	ldr	r0, [pc, #276]	; (80098e4 <cppLoop+0x1c24>)
 80097d0:	f7f7 fca0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097d4:	2101      	movs	r1, #1
 80097d6:	2000      	movs	r0, #0
 80097d8:	f7f7 fc72 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80097dc:	4b42      	ldr	r3, [pc, #264]	; (80098e8 <cppLoop+0x1c28>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f6 fec9 	bl	8000578 <__aeabi_f2d>
 80097e6:	4603      	mov	r3, r0
 80097e8:	460c      	mov	r4, r1
 80097ea:	461a      	mov	r2, r3
 80097ec:	4623      	mov	r3, r4
 80097ee:	483a      	ldr	r0, [pc, #232]	; (80098d8 <cppLoop+0x1c18>)
 80097f0:	f7f7 fc90 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80097f4:	482c      	ldr	r0, [pc, #176]	; (80098a8 <cppLoop+0x1be8>)
 80097f6:	f7f8 fc69 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	bf0c      	ite	eq
 8009800:	2301      	moveq	r3, #1
 8009802:	2300      	movne	r3, #0
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 824e 	beq.w	8009ca8 <cppLoop+0x1fe8>
			HAL_Delay(500);
 800980c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009810:	f000 fb76 	bl	8009f00 <HAL_Delay>

			led.LR(1, -1);
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	2101      	movs	r1, #1
 800981a:	4820      	ldr	r0, [pc, #128]	; (800989c <cppLoop+0x1bdc>)
 800981c:	f7f8 fd76 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009820:	2101      	movs	r1, #1
 8009822:	482e      	ldr	r0, [pc, #184]	; (80098dc <cppLoop+0x1c1c>)
 8009824:	f7fa fd34 	bl	8004290 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009828:	4b30      	ldr	r3, [pc, #192]	; (80098ec <cppLoop+0x1c2c>)
 800982a:	edd3 7a00 	vldr	s15, [r3]
 800982e:	eeb0 0a67 	vmov.f32	s0, s15
 8009832:	482a      	ldr	r0, [pc, #168]	; (80098dc <cppLoop+0x1c1c>)
 8009834:	f7fa fadd 	bl	8003df2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009838:	4b2b      	ldr	r3, [pc, #172]	; (80098e8 <cppLoop+0x1c28>)
 800983a:	edd3 7a00 	vldr	s15, [r3]
 800983e:	eeb0 0a67 	vmov.f32	s0, s15
 8009842:	4826      	ldr	r0, [pc, #152]	; (80098dc <cppLoop+0x1c1c>)
 8009844:	f7fa fae5 	bl	8003e12 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009848:	4b28      	ldr	r3, [pc, #160]	; (80098ec <cppLoop+0x1c2c>)
 800984a:	edd3 7a00 	vldr	s15, [r3]
 800984e:	eeb0 0a67 	vmov.f32	s0, s15
 8009852:	4822      	ldr	r0, [pc, #136]	; (80098dc <cppLoop+0x1c1c>)
 8009854:	f7fa fafd 	bl	8003e52 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009858:	4820      	ldr	r0, [pc, #128]	; (80098dc <cppLoop+0x1c1c>)
 800985a:	f7fa ff27 	bl	80046ac <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800985e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009862:	f000 fb4d 	bl	8009f00 <HAL_Delay>

			logger.start();
 8009866:	4815      	ldr	r0, [pc, #84]	; (80098bc <cppLoop+0x1bfc>)
 8009868:	f7fb fabe 	bl	8004de8 <_ZN6Logger5startEv>

			line_trace.running();
 800986c:	481b      	ldr	r0, [pc, #108]	; (80098dc <cppLoop+0x1c1c>)
 800986e:	f7fa fd53 	bl	8004318 <_ZN9LineTrace7runningEv>

			logger.stop();
 8009872:	4812      	ldr	r0, [pc, #72]	; (80098bc <cppLoop+0x1bfc>)
 8009874:	f7fb fad7 	bl	8004e26 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 8009878:	4a1d      	ldr	r2, [pc, #116]	; (80098f0 <cppLoop+0x1c30>)
 800987a:	491e      	ldr	r1, [pc, #120]	; (80098f4 <cppLoop+0x1c34>)
 800987c:	480f      	ldr	r0, [pc, #60]	; (80098bc <cppLoop+0x1bfc>)
 800987e:	f7fb f9ae 	bl	8004bde <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 8009882:	4a1d      	ldr	r2, [pc, #116]	; (80098f8 <cppLoop+0x1c38>)
 8009884:	491b      	ldr	r1, [pc, #108]	; (80098f4 <cppLoop+0x1c34>)
 8009886:	480d      	ldr	r0, [pc, #52]	; (80098bc <cppLoop+0x1bfc>)
 8009888:	f7fb f9bd 	bl	8004c06 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800988c:	f04f 32ff 	mov.w	r2, #4294967295
 8009890:	2100      	movs	r1, #0
 8009892:	4802      	ldr	r0, [pc, #8]	; (800989c <cppLoop+0x1bdc>)
 8009894:	f7f8 fd3a 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 8009898:	e206      	b.n	8009ca8 <cppLoop+0x1fe8>
 800989a:	bf00      	nop
 800989c:	200005bc 	.word	0x200005bc
 80098a0:	0801a164 	.word	0x0801a164
 80098a4:	0801a168 	.word	0x0801a168
 80098a8:	200005b0 	.word	0x200005b0
 80098ac:	3ea3d70a 	.word	0x3ea3d70a
 80098b0:	20023908 	.word	0x20023908
 80098b4:	0801a170 	.word	0x0801a170
 80098b8:	0801a174 	.word	0x0801a174
 80098bc:	200005e0 	.word	0x200005e0
 80098c0:	2002388c 	.word	0x2002388c
 80098c4:	00000000 	.word	0x00000000
 80098c8:	0801a180 	.word	0x0801a180
 80098cc:	0801a18c 	.word	0x0801a18c
 80098d0:	0801a198 	.word	0x0801a198
 80098d4:	200481cc 	.word	0x200481cc
 80098d8:	0801a03c 	.word	0x0801a03c
 80098dc:	2002390c 	.word	0x2002390c
 80098e0:	200481dc 	.word	0x200481dc
 80098e4:	0801a1a4 	.word	0x0801a1a4
 80098e8:	200481c4 	.word	0x200481c4
 80098ec:	200481d4 	.word	0x200481d4
 80098f0:	0801a060 	.word	0x0801a060
 80098f4:	0801a054 	.word	0x0801a054
 80098f8:	0801a048 	.word	0x0801a048

	case 15:
		led.fullColor('W');
 80098fc:	2157      	movs	r1, #87	; 0x57
 80098fe:	48ac      	ldr	r0, [pc, #688]	; (8009bb0 <cppLoop+0x1ef0>)
 8009900:	f7f8 fc48 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009904:	f7f7 fbcc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009908:	2100      	movs	r1, #0
 800990a:	2000      	movs	r0, #0
 800990c:	f7f7 fbd8 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009910:	48a8      	ldr	r0, [pc, #672]	; (8009bb4 <cppLoop+0x1ef4>)
 8009912:	f7fa f9ec 	bl	8003cee <_ZN9LineTrace5getKpEv>
 8009916:	eeb0 7a40 	vmov.f32	s14, s0
 800991a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009bb8 <cppLoop+0x1ef8>
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	eeb0 0a67 	vmov.f32	s0, s15
 8009926:	f7f9 f861 	bl	80029ec <_ZSt3absf>
 800992a:	ee10 3a10 	vmov	r3, s0
 800992e:	4618      	mov	r0, r3
 8009930:	f7f6 fe22 	bl	8000578 <__aeabi_f2d>
 8009934:	4603      	mov	r3, r0
 8009936:	460c      	mov	r4, r1
 8009938:	461a      	mov	r2, r3
 800993a:	4623      	mov	r3, r4
 800993c:	489f      	ldr	r0, [pc, #636]	; (8009bbc <cppLoop+0x1efc>)
 800993e:	f7f7 fbe9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009942:	2101      	movs	r1, #1
 8009944:	2000      	movs	r0, #0
 8009946:	f7f7 fbbb 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800994a:	489a      	ldr	r0, [pc, #616]	; (8009bb4 <cppLoop+0x1ef4>)
 800994c:	f7fa f9de 	bl	8003d0c <_ZN9LineTrace5getKiEv>
 8009950:	eeb0 7a40 	vmov.f32	s14, s0
 8009954:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009bc0 <cppLoop+0x1f00>
 8009958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995c:	eeb0 0a67 	vmov.f32	s0, s15
 8009960:	f7f9 f844 	bl	80029ec <_ZSt3absf>
 8009964:	ee10 3a10 	vmov	r3, s0
 8009968:	4618      	mov	r0, r3
 800996a:	f7f6 fe05 	bl	8000578 <__aeabi_f2d>
 800996e:	4605      	mov	r5, r0
 8009970:	460e      	mov	r6, r1
 8009972:	4890      	ldr	r0, [pc, #576]	; (8009bb4 <cppLoop+0x1ef4>)
 8009974:	f7fa f9d9 	bl	8003d2a <_ZN9LineTrace5getKdEv>
 8009978:	eeb0 7a40 	vmov.f32	s14, s0
 800997c:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009bc4 <cppLoop+0x1f04>
 8009980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009984:	eeb0 0a67 	vmov.f32	s0, s15
 8009988:	f7f9 f830 	bl	80029ec <_ZSt3absf>
 800998c:	ee10 3a10 	vmov	r3, s0
 8009990:	4618      	mov	r0, r3
 8009992:	f7f6 fdf1 	bl	8000578 <__aeabi_f2d>
 8009996:	4603      	mov	r3, r0
 8009998:	460c      	mov	r4, r1
 800999a:	e9cd 3400 	strd	r3, r4, [sp]
 800999e:	462a      	mov	r2, r5
 80099a0:	4633      	mov	r3, r6
 80099a2:	4889      	ldr	r0, [pc, #548]	; (8009bc8 <cppLoop+0x1f08>)
 80099a4:	f7f7 fbb6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80099a8:	4888      	ldr	r0, [pc, #544]	; (8009bcc <cppLoop+0x1f0c>)
 80099aa:	f7f8 fb8f 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b08      	cmp	r3, #8
 80099b2:	bf0c      	ite	eq
 80099b4:	2301      	moveq	r3, #1
 80099b6:	2300      	movne	r3, #0
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d021      	beq.n	8009a02 <cppLoop+0x1d42>
			led.LR(-1, 1);
 80099be:	2201      	movs	r2, #1
 80099c0:	f04f 31ff 	mov.w	r1, #4294967295
 80099c4:	487a      	ldr	r0, [pc, #488]	; (8009bb0 <cppLoop+0x1ef0>)
 80099c6:	f7f8 fca1 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80099ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099ce:	f000 fa97 	bl	8009f00 <HAL_Delay>

			selector++;
 80099d2:	4b7f      	ldr	r3, [pc, #508]	; (8009bd0 <cppLoop+0x1f10>)
 80099d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3301      	adds	r3, #1
 80099dc:	b29b      	uxth	r3, r3
 80099de:	b21a      	sxth	r2, r3
 80099e0:	4b7b      	ldr	r3, [pc, #492]	; (8009bd0 <cppLoop+0x1f10>)
 80099e2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80099e4:	4b7a      	ldr	r3, [pc, #488]	; (8009bd0 <cppLoop+0x1f10>)
 80099e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	dd02      	ble.n	80099f4 <cppLoop+0x1d34>
 80099ee:	4b78      	ldr	r3, [pc, #480]	; (8009bd0 <cppLoop+0x1f10>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80099f4:	2200      	movs	r2, #0
 80099f6:	f04f 31ff 	mov.w	r1, #4294967295
 80099fa:	486d      	ldr	r0, [pc, #436]	; (8009bb0 <cppLoop+0x1ef0>)
 80099fc:	f7f8 fc86 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009a00:	e154      	b.n	8009cac <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_R){
 8009a02:	4872      	ldr	r0, [pc, #456]	; (8009bcc <cppLoop+0x1f0c>)
 8009a04:	f7f8 fb62 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b10      	cmp	r3, #16
 8009a0c:	bf0c      	ite	eq
 8009a0e:	2301      	moveq	r3, #1
 8009a10:	2300      	movne	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d058      	beq.n	8009aca <cppLoop+0x1e0a>
			led.LR(-1, 1);
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a1e:	4864      	ldr	r0, [pc, #400]	; (8009bb0 <cppLoop+0x1ef0>)
 8009a20:	f7f8 fc74 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009a24:	2064      	movs	r0, #100	; 0x64
 8009a26:	f000 fa6b 	bl	8009f00 <HAL_Delay>
			if(selector == 0){
 8009a2a:	4b69      	ldr	r3, [pc, #420]	; (8009bd0 <cppLoop+0x1f10>)
 8009a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d113      	bne.n	8009a5c <cppLoop+0x1d9c>
				adj_kp = adj_kp + 0.00001;
 8009a34:	4b67      	ldr	r3, [pc, #412]	; (8009bd4 <cppLoop+0x1f14>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f6 fd9d 	bl	8000578 <__aeabi_f2d>
 8009a3e:	a356      	add	r3, pc, #344	; (adr r3, 8009b98 <cppLoop+0x1ed8>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fc3a 	bl	80002bc <__adddf3>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	4621      	mov	r1, r4
 8009a50:	f7f7 f8e2 	bl	8000c18 <__aeabi_d2f>
 8009a54:	4602      	mov	r2, r0
 8009a56:	4b5f      	ldr	r3, [pc, #380]	; (8009bd4 <cppLoop+0x1f14>)
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	e02b      	b.n	8009ab4 <cppLoop+0x1df4>
			else if(selector == 1){
 8009a5c:	4b5c      	ldr	r3, [pc, #368]	; (8009bd0 <cppLoop+0x1f10>)
 8009a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d113      	bne.n	8009a8e <cppLoop+0x1dce>
				adj_ki = adj_ki + 0.0001;
 8009a66:	4b5c      	ldr	r3, [pc, #368]	; (8009bd8 <cppLoop+0x1f18>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fd84 	bl	8000578 <__aeabi_f2d>
 8009a70:	a34b      	add	r3, pc, #300	; (adr r3, 8009ba0 <cppLoop+0x1ee0>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fc21 	bl	80002bc <__adddf3>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	4618      	mov	r0, r3
 8009a80:	4621      	mov	r1, r4
 8009a82:	f7f7 f8c9 	bl	8000c18 <__aeabi_d2f>
 8009a86:	4602      	mov	r2, r0
 8009a88:	4b53      	ldr	r3, [pc, #332]	; (8009bd8 <cppLoop+0x1f18>)
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e012      	b.n	8009ab4 <cppLoop+0x1df4>
				adj_kd = adj_kd + 0.000001;
 8009a8e:	4b53      	ldr	r3, [pc, #332]	; (8009bdc <cppLoop+0x1f1c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f6 fd70 	bl	8000578 <__aeabi_f2d>
 8009a98:	a343      	add	r3, pc, #268	; (adr r3, 8009ba8 <cppLoop+0x1ee8>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f6 fc0d 	bl	80002bc <__adddf3>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	f7f7 f8b5 	bl	8000c18 <__aeabi_d2f>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b4a      	ldr	r3, [pc, #296]	; (8009bdc <cppLoop+0x1f1c>)
 8009ab2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009ab4:	2152      	movs	r1, #82	; 0x52
 8009ab6:	483e      	ldr	r0, [pc, #248]	; (8009bb0 <cppLoop+0x1ef0>)
 8009ab8:	f7f8 fb6c 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac2:	483b      	ldr	r0, [pc, #236]	; (8009bb0 <cppLoop+0x1ef0>)
 8009ac4:	f7f8 fc22 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009ac8:	e0f0      	b.n	8009cac <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_L){
 8009aca:	4840      	ldr	r0, [pc, #256]	; (8009bcc <cppLoop+0x1f0c>)
 8009acc:	f7f8 fafe 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	2300      	movne	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d07f      	beq.n	8009be0 <cppLoop+0x1f20>
			led.LR(-1, 1);
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ae6:	4832      	ldr	r0, [pc, #200]	; (8009bb0 <cppLoop+0x1ef0>)
 8009ae8:	f7f8 fc10 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009aec:	2064      	movs	r0, #100	; 0x64
 8009aee:	f000 fa07 	bl	8009f00 <HAL_Delay>
			if(selector == 0){
 8009af2:	4b37      	ldr	r3, [pc, #220]	; (8009bd0 <cppLoop+0x1f10>)
 8009af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d113      	bne.n	8009b24 <cppLoop+0x1e64>
				adj_kp = adj_kp - 0.00001;
 8009afc:	4b35      	ldr	r3, [pc, #212]	; (8009bd4 <cppLoop+0x1f14>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f6 fd39 	bl	8000578 <__aeabi_f2d>
 8009b06:	a324      	add	r3, pc, #144	; (adr r3, 8009b98 <cppLoop+0x1ed8>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fbd4 	bl	80002b8 <__aeabi_dsub>
 8009b10:	4603      	mov	r3, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4618      	mov	r0, r3
 8009b16:	4621      	mov	r1, r4
 8009b18:	f7f7 f87e 	bl	8000c18 <__aeabi_d2f>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	4b2d      	ldr	r3, [pc, #180]	; (8009bd4 <cppLoop+0x1f14>)
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e02b      	b.n	8009b7c <cppLoop+0x1ebc>
			else if(selector == 1){
 8009b24:	4b2a      	ldr	r3, [pc, #168]	; (8009bd0 <cppLoop+0x1f10>)
 8009b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d113      	bne.n	8009b56 <cppLoop+0x1e96>
				adj_ki = adj_ki - 0.0001;
 8009b2e:	4b2a      	ldr	r3, [pc, #168]	; (8009bd8 <cppLoop+0x1f18>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f6 fd20 	bl	8000578 <__aeabi_f2d>
 8009b38:	a319      	add	r3, pc, #100	; (adr r3, 8009ba0 <cppLoop+0x1ee0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fbbb 	bl	80002b8 <__aeabi_dsub>
 8009b42:	4603      	mov	r3, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	4618      	mov	r0, r3
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f7f7 f865 	bl	8000c18 <__aeabi_d2f>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <cppLoop+0x1f18>)
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e012      	b.n	8009b7c <cppLoop+0x1ebc>
				adj_kd = adj_kd - 0.000001;
 8009b56:	4b21      	ldr	r3, [pc, #132]	; (8009bdc <cppLoop+0x1f1c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7f6 fd0c 	bl	8000578 <__aeabi_f2d>
 8009b60:	a311      	add	r3, pc, #68	; (adr r3, 8009ba8 <cppLoop+0x1ee8>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fba7 	bl	80002b8 <__aeabi_dsub>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	4621      	mov	r1, r4
 8009b72:	f7f7 f851 	bl	8000c18 <__aeabi_d2f>
 8009b76:	4602      	mov	r2, r0
 8009b78:	4b18      	ldr	r3, [pc, #96]	; (8009bdc <cppLoop+0x1f1c>)
 8009b7a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009b7c:	2152      	movs	r1, #82	; 0x52
 8009b7e:	480c      	ldr	r0, [pc, #48]	; (8009bb0 <cppLoop+0x1ef0>)
 8009b80:	f7f8 fb08 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009b84:	2200      	movs	r2, #0
 8009b86:	f04f 31ff 	mov.w	r1, #4294967295
 8009b8a:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <cppLoop+0x1ef0>)
 8009b8c:	f7f8 fbbe 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009b90:	e08c      	b.n	8009cac <cppLoop+0x1fec>
 8009b92:	bf00      	nop
 8009b94:	f3af 8000 	nop.w
 8009b98:	88e368f1 	.word	0x88e368f1
 8009b9c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009ba0:	eb1c432d 	.word	0xeb1c432d
 8009ba4:	3f1a36e2 	.word	0x3f1a36e2
 8009ba8:	a0b5ed8d 	.word	0xa0b5ed8d
 8009bac:	3eb0c6f7 	.word	0x3eb0c6f7
 8009bb0:	200005bc 	.word	0x200005bc
 8009bb4:	2002390c 	.word	0x2002390c
 8009bb8:	447a0000 	.word	0x447a0000
 8009bbc:	0801a1b0 	.word	0x0801a1b0
 8009bc0:	42c80000 	.word	0x42c80000
 8009bc4:	461c4000 	.word	0x461c4000
 8009bc8:	08019ff4 	.word	0x08019ff4
 8009bcc:	200005b0 	.word	0x200005b0
 8009bd0:	20048180 	.word	0x20048180
 8009bd4:	2004818c 	.word	0x2004818c
 8009bd8:	20048194 	.word	0x20048194
 8009bdc:	2004819c 	.word	0x2004819c
		else if(joy_stick.getValue() == JOY_C){
 8009be0:	4836      	ldr	r0, [pc, #216]	; (8009cbc <cppLoop+0x1ffc>)
 8009be2:	f7f8 fa73 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	bf0c      	ite	eq
 8009bec:	2301      	moveq	r3, #1
 8009bee:	2300      	movne	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d05a      	beq.n	8009cac <cppLoop+0x1fec>
			led.LR(-1, 1);
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8009bfc:	4830      	ldr	r0, [pc, #192]	; (8009cc0 <cppLoop+0x2000>)
 8009bfe:	f7f8 fb85 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009c02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c06:	f000 f97b 	bl	8009f00 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	4b2d      	ldr	r3, [pc, #180]	; (8009cc4 <cppLoop+0x2004>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	492d      	ldr	r1, [pc, #180]	; (8009cc8 <cppLoop+0x2008>)
 8009c14:	482d      	ldr	r0, [pc, #180]	; (8009ccc <cppLoop+0x200c>)
 8009c16:	f7f7 fe31 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	4b2c      	ldr	r3, [pc, #176]	; (8009cd0 <cppLoop+0x2010>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	492c      	ldr	r1, [pc, #176]	; (8009cd4 <cppLoop+0x2014>)
 8009c24:	4829      	ldr	r0, [pc, #164]	; (8009ccc <cppLoop+0x200c>)
 8009c26:	f7f7 fe29 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4b2a      	ldr	r3, [pc, #168]	; (8009cd8 <cppLoop+0x2018>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	492a      	ldr	r1, [pc, #168]	; (8009cdc <cppLoop+0x201c>)
 8009c34:	4825      	ldr	r0, [pc, #148]	; (8009ccc <cppLoop+0x200c>)
 8009c36:	f7f7 fe21 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009c3a:	4b22      	ldr	r3, [pc, #136]	; (8009cc4 <cppLoop+0x2004>)
 8009c3c:	edd3 7a00 	vldr	s15, [r3]
 8009c40:	4b23      	ldr	r3, [pc, #140]	; (8009cd0 <cppLoop+0x2010>)
 8009c42:	ed93 7a00 	vldr	s14, [r3]
 8009c46:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <cppLoop+0x2018>)
 8009c48:	edd3 6a00 	vldr	s13, [r3]
 8009c4c:	eeb0 1a66 	vmov.f32	s2, s13
 8009c50:	eef0 0a47 	vmov.f32	s1, s14
 8009c54:	eeb0 0a67 	vmov.f32	s0, s15
 8009c58:	4821      	ldr	r0, [pc, #132]	; (8009ce0 <cppLoop+0x2020>)
 8009c5a:	f7fa f82f 	bl	8003cbc <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f04f 31ff 	mov.w	r1, #4294967295
 8009c64:	4816      	ldr	r0, [pc, #88]	; (8009cc0 <cppLoop+0x2000>)
 8009c66:	f7f8 fb51 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009c6a:	e01f      	b.n	8009cac <cppLoop+0x1fec>

	default:
		break;
 8009c6c:	bf00      	nop
 8009c6e:	e01e      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c70:	bf00      	nop
 8009c72:	e01c      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c74:	bf00      	nop
 8009c76:	e01a      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c78:	bf00      	nop
 8009c7a:	e018      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c7c:	bf00      	nop
 8009c7e:	e016      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c80:	bf00      	nop
 8009c82:	e014      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c84:	bf00      	nop
 8009c86:	e012      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c88:	bf00      	nop
 8009c8a:	e010      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c8c:	bf00      	nop
 8009c8e:	e00e      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c90:	bf00      	nop
 8009c92:	e00c      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c94:	bf00      	nop
 8009c96:	e00a      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c98:	bf00      	nop
 8009c9a:	e008      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009c9c:	bf00      	nop
 8009c9e:	e006      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009ca0:	bf00      	nop
 8009ca2:	e004      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009ca4:	bf00      	nop
 8009ca6:	e002      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009ca8:	bf00      	nop
 8009caa:	e000      	b.n	8009cae <cppLoop+0x1fee>
		break;
 8009cac:	bf00      	nop

	}

	HAL_Delay(30);
 8009cae:	201e      	movs	r0, #30
 8009cb0:	f000 f926 	bl	8009f00 <HAL_Delay>

}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cbc:	200005b0 	.word	0x200005b0
 8009cc0:	200005bc 	.word	0x200005bc
 8009cc4:	2004818c 	.word	0x2004818c
 8009cc8:	0801a1bc 	.word	0x0801a1bc
 8009ccc:	0801a010 	.word	0x0801a010
 8009cd0:	20048194 	.word	0x20048194
 8009cd4:	0801a1c4 	.word	0x0801a1c4
 8009cd8:	2004819c 	.word	0x2004819c
 8009cdc:	0801a1cc 	.word	0x0801a1cc
 8009ce0:	2002390c 	.word	0x2002390c

08009ce4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af06      	add	r7, sp, #24
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d142      	bne.n	8009d7a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d13d      	bne.n	8009d7a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009cfe:	4821      	ldr	r0, [pc, #132]	; (8009d84 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d00:	f7f8 fb3c 	bl	800237c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009d04:	4820      	ldr	r0, [pc, #128]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d06:	f7fb fc73 	bl	80055f0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009d0a:	4820      	ldr	r0, [pc, #128]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009d0c:	f7f8 f9d2 	bl	80020b4 <_ZN8JoyStickC1Ev>
Motor motor;
 8009d10:	481f      	ldr	r0, [pc, #124]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d12:	f7fb f899 	bl	8004e48 <_ZN5MotorC1Ev>
IMU imu;
 8009d16:	481f      	ldr	r0, [pc, #124]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d18:	f7f7 ffc8 	bl	8001cac <_ZN3IMUC1Ev>
Logger logger;
 8009d1c:	481e      	ldr	r0, [pc, #120]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d1e:	f7fa fdb5 	bl	800488c <_ZN6LoggerC1Ev>
Encoder encoder;
 8009d22:	481e      	ldr	r0, [pc, #120]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d24:	f7f7 fb52 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009d28:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d2a:	4a1c      	ldr	r2, [pc, #112]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d2c:	4918      	ldr	r1, [pc, #96]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d2e:	481c      	ldr	r0, [pc, #112]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d30:	f7fb ffa2 	bl	8005c78 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009d34:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d36:	4a17      	ldr	r2, [pc, #92]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d38:	4918      	ldr	r1, [pc, #96]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d3a:	481a      	ldr	r0, [pc, #104]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d3c:	f7fb f96a 	bl	8005014 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009d40:	4819      	ldr	r0, [pc, #100]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d42:	f7f7 fa47 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009d46:	4b18      	ldr	r3, [pc, #96]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d48:	9305      	str	r3, [sp, #20]
 8009d4a:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d54:	9302      	str	r3, [sp, #8]
 8009d56:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d60:	4a08      	ldr	r2, [pc, #32]	; (8009d84 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d62:	490b      	ldr	r1, [pc, #44]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d64:	4811      	ldr	r0, [pc, #68]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009d66:	f7f8 fe51 	bl	8002a0c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009d6a:	4a09      	ldr	r2, [pc, #36]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d6c:	490a      	ldr	r1, [pc, #40]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d6e:	4810      	ldr	r0, [pc, #64]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d70:	f7fb fdba 	bl	80058e8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009d74:	480f      	ldr	r0, [pc, #60]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009d76:	f7fb facd 	bl	8005314 <_ZN13PathFollowingC1Ev>
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	200002ac 	.word	0x200002ac
 8009d88:	200005a4 	.word	0x200005a4
 8009d8c:	200005b0 	.word	0x200005b0
 8009d90:	200005b8 	.word	0x200005b8
 8009d94:	200005cc 	.word	0x200005cc
 8009d98:	200005e0 	.word	0x200005e0
 8009d9c:	2002386c 	.word	0x2002386c
 8009da0:	2002388c 	.word	0x2002388c
 8009da4:	200238c8 	.word	0x200238c8
 8009da8:	20023908 	.word	0x20023908
 8009dac:	2002390c 	.word	0x2002390c
 8009db0:	2003084c 	.word	0x2003084c
 8009db4:	20030a58 	.word	0x20030a58

08009db8 <_GLOBAL__sub_I_line_sensor>:
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	f7ff ff8f 	bl	8009ce4 <_Z41__static_initialization_and_destruction_0ii>
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dce:	e003      	b.n	8009dd8 <LoopCopyDataInit>

08009dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009dd6:	3104      	adds	r1, #4

08009dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009dd8:	480b      	ldr	r0, [pc, #44]	; (8009e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dda:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009de0:	d3f6      	bcc.n	8009dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8009de2:	4a0b      	ldr	r2, [pc, #44]	; (8009e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009de4:	e002      	b.n	8009dec <LoopFillZerobss>

08009de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009de8:	f842 3b04 	str.w	r3, [r2], #4

08009dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009df0:	d3f9      	bcc.n	8009de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009df2:	f7fd fe53 	bl	8007a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009df6:	f00b fdd3 	bl	80159a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009dfa:	f7fc f98d 	bl	8006118 <main>
  bx  lr    
 8009dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009e00:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009e04:	0801a7c0 	.word	0x0801a7c0
  ldr  r0, =_sdata
 8009e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e0c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009e10:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009e14:	2004cbe0 	.word	0x2004cbe0

08009e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e18:	e7fe      	b.n	8009e18 <ADC_IRQHandler>
	...

08009e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <HAL_Init+0x40>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a0d      	ldr	r2, [pc, #52]	; (8009e5c <HAL_Init+0x40>)
 8009e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <HAL_Init+0x40>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <HAL_Init+0x40>)
 8009e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e38:	4b08      	ldr	r3, [pc, #32]	; (8009e5c <HAL_Init+0x40>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a07      	ldr	r2, [pc, #28]	; (8009e5c <HAL_Init+0x40>)
 8009e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e44:	2003      	movs	r0, #3
 8009e46:	f000 fd51 	bl	800a8ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f000 f808 	bl	8009e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e50:	f7fd f874 	bl	8006f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40023c00 	.word	0x40023c00

08009e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e68:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <HAL_InitTick+0x54>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <HAL_InitTick+0x58>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	4619      	mov	r1, r3
 8009e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 fd69 	bl	800a956 <HAL_SYSTICK_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e00e      	b.n	8009eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b0f      	cmp	r3, #15
 8009e92:	d80a      	bhi.n	8009eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e94:	2200      	movs	r2, #0
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9c:	f000 fd31 	bl	800a902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ea0:	4a06      	ldr	r2, [pc, #24]	; (8009ebc <HAL_InitTick+0x5c>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	e000      	b.n	8009eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20000000 	.word	0x20000000
 8009eb8:	20000008 	.word	0x20000008
 8009ebc:	20000004 	.word	0x20000004

08009ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ec4:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <HAL_IncTick+0x20>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <HAL_IncTick+0x24>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4413      	add	r3, r2
 8009ed0:	4a04      	ldr	r2, [pc, #16]	; (8009ee4 <HAL_IncTick+0x24>)
 8009ed2:	6013      	str	r3, [r2, #0]
}
 8009ed4:	bf00      	nop
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	20000008 	.word	0x20000008
 8009ee4:	2004ab68 	.word	0x2004ab68

08009ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  return uwTick;
 8009eec:	4b03      	ldr	r3, [pc, #12]	; (8009efc <HAL_GetTick+0x14>)
 8009eee:	681b      	ldr	r3, [r3, #0]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	2004ab68 	.word	0x2004ab68

08009f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f08:	f7ff ffee 	bl	8009ee8 <HAL_GetTick>
 8009f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f18:	d005      	beq.n	8009f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <HAL_Delay+0x40>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f26:	bf00      	nop
 8009f28:	f7ff ffde 	bl	8009ee8 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d8f7      	bhi.n	8009f28 <HAL_Delay+0x28>
  {
  }
}
 8009f38:	bf00      	nop
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000008 	.word	0x20000008

08009f44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e033      	b.n	8009fc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7fd f812 	bl	8006f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d118      	bne.n	8009fb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009f8a:	f023 0302 	bic.w	r3, r3, #2
 8009f8e:	f043 0202 	orr.w	r2, r3, #2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fa5a 	bl	800a450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	f023 0303 	bic.w	r3, r3, #3
 8009faa:	f043 0201 	orr.w	r2, r3, #1
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8009fb2:	e001      	b.n	8009fb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_ADC_Start_DMA+0x1e>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e0cc      	b.n	800a184 <HAL_ADC_Start_DMA+0x1b8>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d018      	beq.n	800a032 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0201 	orr.w	r2, r2, #1
 800a00e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a010:	4b5e      	ldr	r3, [pc, #376]	; (800a18c <HAL_ADC_Start_DMA+0x1c0>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a5e      	ldr	r2, [pc, #376]	; (800a190 <HAL_ADC_Start_DMA+0x1c4>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	0c9a      	lsrs	r2, r3, #18
 800a01c:	4613      	mov	r3, r2
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	4413      	add	r3, r2
 800a022:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a024:	e002      	b.n	800a02c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	3b01      	subs	r3, #1
 800a02a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1f9      	bne.n	800a026 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	f040 80a0 	bne.w	800a182 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a04a:	f023 0301 	bic.w	r3, r3, #1
 800a04e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a068:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a06c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a080:	d106      	bne.n	800a090 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a086:	f023 0206 	bic.w	r2, r3, #6
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	645a      	str	r2, [r3, #68]	; 0x44
 800a08e:	e002      	b.n	800a096 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a09e:	4b3d      	ldr	r3, [pc, #244]	; (800a194 <HAL_ADC_Start_DMA+0x1c8>)
 800a0a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	4a3c      	ldr	r2, [pc, #240]	; (800a198 <HAL_ADC_Start_DMA+0x1cc>)
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	4a3b      	ldr	r2, [pc, #236]	; (800a19c <HAL_ADC_Start_DMA+0x1d0>)
 800a0b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	4a3a      	ldr	r2, [pc, #232]	; (800a1a0 <HAL_ADC_Start_DMA+0x1d4>)
 800a0b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	334c      	adds	r3, #76	; 0x4c
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f000 fcea 	bl	800aacc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f003 031f 	and.w	r3, r3, #31
 800a100:	2b00      	cmp	r3, #0
 800a102:	d12a      	bne.n	800a15a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a26      	ldr	r2, [pc, #152]	; (800a1a4 <HAL_ADC_Start_DMA+0x1d8>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d015      	beq.n	800a13a <HAL_ADC_Start_DMA+0x16e>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a25      	ldr	r2, [pc, #148]	; (800a1a8 <HAL_ADC_Start_DMA+0x1dc>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d105      	bne.n	800a124 <HAL_ADC_Start_DMA+0x158>
 800a118:	4b1e      	ldr	r3, [pc, #120]	; (800a194 <HAL_ADC_Start_DMA+0x1c8>)
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f003 031f 	and.w	r3, r3, #31
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00a      	beq.n	800a13a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a20      	ldr	r2, [pc, #128]	; (800a1ac <HAL_ADC_Start_DMA+0x1e0>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d129      	bne.n	800a182 <HAL_ADC_Start_DMA+0x1b6>
 800a12e:	4b19      	ldr	r3, [pc, #100]	; (800a194 <HAL_ADC_Start_DMA+0x1c8>)
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f003 031f 	and.w	r3, r3, #31
 800a136:	2b0f      	cmp	r3, #15
 800a138:	d823      	bhi.n	800a182 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d11c      	bne.n	800a182 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a156:	609a      	str	r2, [r3, #8]
 800a158:	e013      	b.n	800a182 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a11      	ldr	r2, [pc, #68]	; (800a1a4 <HAL_ADC_Start_DMA+0x1d8>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d10e      	bne.n	800a182 <HAL_ADC_Start_DMA+0x1b6>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d107      	bne.n	800a182 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a180:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000000 	.word	0x20000000
 800a190:	431bde83 	.word	0x431bde83
 800a194:	40012300 	.word	0x40012300
 800a198:	0800a649 	.word	0x0800a649
 800a19c:	0800a703 	.word	0x0800a703
 800a1a0:	0800a71f 	.word	0x0800a71f
 800a1a4:	40012000 	.word	0x40012000
 800a1a8:	40012100 	.word	0x40012100
 800a1ac:	40012200 	.word	0x40012200

0800a1b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a200:	2b01      	cmp	r3, #1
 800a202:	d101      	bne.n	800a208 <HAL_ADC_ConfigChannel+0x1c>
 800a204:	2302      	movs	r3, #2
 800a206:	e113      	b.n	800a430 <HAL_ADC_ConfigChannel+0x244>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b09      	cmp	r3, #9
 800a216:	d925      	bls.n	800a264 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68d9      	ldr	r1, [r3, #12]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	b29b      	uxth	r3, r3
 800a224:	461a      	mov	r2, r3
 800a226:	4613      	mov	r3, r2
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	4413      	add	r3, r2
 800a22c:	3b1e      	subs	r3, #30
 800a22e:	2207      	movs	r2, #7
 800a230:	fa02 f303 	lsl.w	r3, r2, r3
 800a234:	43da      	mvns	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	400a      	ands	r2, r1
 800a23c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68d9      	ldr	r1, [r3, #12]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4618      	mov	r0, r3
 800a250:	4603      	mov	r3, r0
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	4403      	add	r3, r0
 800a256:	3b1e      	subs	r3, #30
 800a258:	409a      	lsls	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	60da      	str	r2, [r3, #12]
 800a262:	e022      	b.n	800a2aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6919      	ldr	r1, [r3, #16]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	461a      	mov	r2, r3
 800a272:	4613      	mov	r3, r2
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	4413      	add	r3, r2
 800a278:	2207      	movs	r2, #7
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	43da      	mvns	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	400a      	ands	r2, r1
 800a286:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6919      	ldr	r1, [r3, #16]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	4618      	mov	r0, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	4403      	add	r3, r0
 800a2a0:	409a      	lsls	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b06      	cmp	r3, #6
 800a2b0:	d824      	bhi.n	800a2fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3b05      	subs	r3, #5
 800a2c4:	221f      	movs	r2, #31
 800a2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ca:	43da      	mvns	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	400a      	ands	r2, r1
 800a2d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3b05      	subs	r3, #5
 800a2ee:	fa00 f203 	lsl.w	r2, r0, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	635a      	str	r2, [r3, #52]	; 0x34
 800a2fa:	e04c      	b.n	800a396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	2b0c      	cmp	r3, #12
 800a302:	d824      	bhi.n	800a34e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	3b23      	subs	r3, #35	; 0x23
 800a316:	221f      	movs	r2, #31
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	43da      	mvns	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	400a      	ands	r2, r1
 800a324:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	4618      	mov	r0, r3
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	3b23      	subs	r3, #35	; 0x23
 800a340:	fa00 f203 	lsl.w	r2, r0, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	631a      	str	r2, [r3, #48]	; 0x30
 800a34c:	e023      	b.n	800a396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	3b41      	subs	r3, #65	; 0x41
 800a360:	221f      	movs	r2, #31
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	43da      	mvns	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	400a      	ands	r2, r1
 800a36e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	4618      	mov	r0, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	3b41      	subs	r3, #65	; 0x41
 800a38a:	fa00 f203 	lsl.w	r2, r0, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a396:	4b29      	ldr	r3, [pc, #164]	; (800a43c <HAL_ADC_ConfigChannel+0x250>)
 800a398:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a28      	ldr	r2, [pc, #160]	; (800a440 <HAL_ADC_ConfigChannel+0x254>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d10f      	bne.n	800a3c4 <HAL_ADC_ConfigChannel+0x1d8>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b12      	cmp	r3, #18
 800a3aa:	d10b      	bne.n	800a3c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a1d      	ldr	r2, [pc, #116]	; (800a440 <HAL_ADC_ConfigChannel+0x254>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d12b      	bne.n	800a426 <HAL_ADC_ConfigChannel+0x23a>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1c      	ldr	r2, [pc, #112]	; (800a444 <HAL_ADC_ConfigChannel+0x258>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d003      	beq.n	800a3e0 <HAL_ADC_ConfigChannel+0x1f4>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b11      	cmp	r3, #17
 800a3de:	d122      	bne.n	800a426 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a11      	ldr	r2, [pc, #68]	; (800a444 <HAL_ADC_ConfigChannel+0x258>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d111      	bne.n	800a426 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a402:	4b11      	ldr	r3, [pc, #68]	; (800a448 <HAL_ADC_ConfigChannel+0x25c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a11      	ldr	r2, [pc, #68]	; (800a44c <HAL_ADC_ConfigChannel+0x260>)
 800a408:	fba2 2303 	umull	r2, r3, r2, r3
 800a40c:	0c9a      	lsrs	r2, r3, #18
 800a40e:	4613      	mov	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a418:	e002      	b.n	800a420 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f9      	bne.n	800a41a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	40012300 	.word	0x40012300
 800a440:	40012000 	.word	0x40012000
 800a444:	10000012 	.word	0x10000012
 800a448:	20000000 	.word	0x20000000
 800a44c:	431bde83 	.word	0x431bde83

0800a450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a458:	4b79      	ldr	r3, [pc, #484]	; (800a640 <ADC_Init+0x1f0>)
 800a45a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	431a      	orrs	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6859      	ldr	r1, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	021a      	lsls	r2, r3, #8
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	430a      	orrs	r2, r1
 800a498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6859      	ldr	r1, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689a      	ldr	r2, [r3, #8]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6899      	ldr	r1, [r3, #8]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e2:	4a58      	ldr	r2, [pc, #352]	; (800a644 <ADC_Init+0x1f4>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d022      	beq.n	800a52e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689a      	ldr	r2, [r3, #8]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a4f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6899      	ldr	r1, [r3, #8]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6899      	ldr	r1, [r3, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	609a      	str	r2, [r3, #8]
 800a52c:	e00f      	b.n	800a54e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	689a      	ldr	r2, [r3, #8]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a53c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a54c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0202 	bic.w	r2, r2, #2
 800a55c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6899      	ldr	r1, [r3, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	7e1b      	ldrb	r3, [r3, #24]
 800a568:	005a      	lsls	r2, r3, #1
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d01b      	beq.n	800a5b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a58a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a59a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6859      	ldr	r1, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	035a      	lsls	r2, r3, #13
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	605a      	str	r2, [r3, #4]
 800a5b2:	e007      	b.n	800a5c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	051a      	lsls	r2, r3, #20
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a5f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6899      	ldr	r1, [r3, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a606:	025a      	lsls	r2, r3, #9
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6899      	ldr	r1, [r3, #8]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	029a      	lsls	r2, r3, #10
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	609a      	str	r2, [r3, #8]
}
 800a634:	bf00      	nop
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	40012300 	.word	0x40012300
 800a644:	0f000001 	.word	0x0f000001

0800a648 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d13c      	bne.n	800a6dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d12b      	bne.n	800a6d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a680:	2b00      	cmp	r3, #0
 800a682:	d127      	bne.n	800a6d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d006      	beq.n	800a6a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d119      	bne.n	800a6d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0220 	bic.w	r2, r2, #32
 800a6ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d105      	bne.n	800a6d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	f043 0201 	orr.w	r2, r3, #1
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff fd6b 	bl	800a1b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a6da:	e00e      	b.n	800a6fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7ff fd75 	bl	800a1d8 <HAL_ADC_ErrorCallback>
}
 800a6ee:	e004      	b.n	800a6fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	4798      	blx	r3
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff fd57 	bl	800a1c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2240      	movs	r2, #64	; 0x40
 800a730:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a736:	f043 0204 	orr.w	r2, r3, #4
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f7ff fd4a 	bl	800a1d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a744:	bf00      	nop
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a75c:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <__NVIC_SetPriorityGrouping+0x44>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a768:	4013      	ands	r3, r2
 800a76a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a77c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a77e:	4a04      	ldr	r2, [pc, #16]	; (800a790 <__NVIC_SetPriorityGrouping+0x44>)
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	60d3      	str	r3, [r2, #12]
}
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	e000ed00 	.word	0xe000ed00

0800a794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <__NVIC_GetPriorityGrouping+0x18>)
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	0a1b      	lsrs	r3, r3, #8
 800a79e:	f003 0307 	and.w	r3, r3, #7
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	e000ed00 	.word	0xe000ed00

0800a7b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	db0b      	blt.n	800a7da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	f003 021f 	and.w	r2, r3, #31
 800a7c8:	4907      	ldr	r1, [pc, #28]	; (800a7e8 <__NVIC_EnableIRQ+0x38>)
 800a7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ce:	095b      	lsrs	r3, r3, #5
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	fa00 f202 	lsl.w	r2, r0, r2
 800a7d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	e000e100 	.word	0xe000e100

0800a7ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6039      	str	r1, [r7, #0]
 800a7f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	db0a      	blt.n	800a816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	b2da      	uxtb	r2, r3
 800a804:	490c      	ldr	r1, [pc, #48]	; (800a838 <__NVIC_SetPriority+0x4c>)
 800a806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a80a:	0112      	lsls	r2, r2, #4
 800a80c:	b2d2      	uxtb	r2, r2
 800a80e:	440b      	add	r3, r1
 800a810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a814:	e00a      	b.n	800a82c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	4908      	ldr	r1, [pc, #32]	; (800a83c <__NVIC_SetPriority+0x50>)
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	3b04      	subs	r3, #4
 800a824:	0112      	lsls	r2, r2, #4
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	440b      	add	r3, r1
 800a82a:	761a      	strb	r2, [r3, #24]
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	e000e100 	.word	0xe000e100
 800a83c:	e000ed00 	.word	0xe000ed00

0800a840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a840:	b480      	push	{r7}
 800a842:	b089      	sub	sp, #36	; 0x24
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f003 0307 	and.w	r3, r3, #7
 800a852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f1c3 0307 	rsb	r3, r3, #7
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	bf28      	it	cs
 800a85e:	2304      	movcs	r3, #4
 800a860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	3304      	adds	r3, #4
 800a866:	2b06      	cmp	r3, #6
 800a868:	d902      	bls.n	800a870 <NVIC_EncodePriority+0x30>
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	3b03      	subs	r3, #3
 800a86e:	e000      	b.n	800a872 <NVIC_EncodePriority+0x32>
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a874:	f04f 32ff 	mov.w	r2, #4294967295
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	fa02 f303 	lsl.w	r3, r2, r3
 800a87e:	43da      	mvns	r2, r3
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	401a      	ands	r2, r3
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a888:	f04f 31ff 	mov.w	r1, #4294967295
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	fa01 f303 	lsl.w	r3, r1, r3
 800a892:	43d9      	mvns	r1, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a898:	4313      	orrs	r3, r2
         );
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3724      	adds	r7, #36	; 0x24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
	...

0800a8a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8b8:	d301      	bcc.n	800a8be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e00f      	b.n	800a8de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a8be:	4a0a      	ldr	r2, [pc, #40]	; (800a8e8 <SysTick_Config+0x40>)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8c6:	210f      	movs	r1, #15
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	f7ff ff8e 	bl	800a7ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <SysTick_Config+0x40>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8d6:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <SysTick_Config+0x40>)
 800a8d8:	2207      	movs	r2, #7
 800a8da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	e000e010 	.word	0xe000e010

0800a8ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7ff ff29 	bl	800a74c <__NVIC_SetPriorityGrouping>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a902:	b580      	push	{r7, lr}
 800a904:	b086      	sub	sp, #24
 800a906:	af00      	add	r7, sp, #0
 800a908:	4603      	mov	r3, r0
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a910:	2300      	movs	r3, #0
 800a912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a914:	f7ff ff3e 	bl	800a794 <__NVIC_GetPriorityGrouping>
 800a918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	6978      	ldr	r0, [r7, #20]
 800a920:	f7ff ff8e 	bl	800a840 <NVIC_EncodePriority>
 800a924:	4602      	mov	r2, r0
 800a926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a92a:	4611      	mov	r1, r2
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff ff5d 	bl	800a7ec <__NVIC_SetPriority>
}
 800a932:	bf00      	nop
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	4603      	mov	r3, r0
 800a942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a948:	4618      	mov	r0, r3
 800a94a:	f7ff ff31 	bl	800a7b0 <__NVIC_EnableIRQ>
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff ffa2 	bl	800a8a8 <SysTick_Config>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a978:	2300      	movs	r3, #0
 800a97a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a97c:	f7ff fab4 	bl	8009ee8 <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e099      	b.n	800aac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9ac:	e00f      	b.n	800a9ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9ae:	f7ff fa9b 	bl	8009ee8 <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	2b05      	cmp	r3, #5
 800a9ba:	d908      	bls.n	800a9ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2203      	movs	r2, #3
 800a9c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e078      	b.n	800aac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e8      	bne.n	800a9ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	4b38      	ldr	r3, [pc, #224]	; (800aac8 <HAL_DMA_Init+0x158>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d107      	bne.n	800aa38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	4313      	orrs	r3, r2
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f023 0307 	bic.w	r3, r3, #7
 800aa4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d117      	bne.n	800aa92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00e      	beq.n	800aa92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fa9d 	bl	800afb4 <DMA_CheckFifoParam>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d008      	beq.n	800aa92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2240      	movs	r2, #64	; 0x40
 800aa84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e016      	b.n	800aac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa54 	bl	800af48 <DMA_CalcBaseAndBitshift>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa8:	223f      	movs	r2, #63	; 0x3f
 800aaaa:	409a      	lsls	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	f010803f 	.word	0xf010803f

0800aacc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d101      	bne.n	800aaf2 <HAL_DMA_Start_IT+0x26>
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e040      	b.n	800ab74 <HAL_DMA_Start_IT+0xa8>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d12f      	bne.n	800ab66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2202      	movs	r2, #2
 800ab0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	68b9      	ldr	r1, [r7, #8]
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 f9e6 	bl	800aeec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	223f      	movs	r2, #63	; 0x3f
 800ab26:	409a      	lsls	r2, r3
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0216 	orr.w	r2, r2, #22
 800ab3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d007      	beq.n	800ab54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0208 	orr.w	r2, r2, #8
 800ab52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0201 	orr.w	r2, r2, #1
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	e005      	b.n	800ab72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab6e:	2302      	movs	r3, #2
 800ab70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3718      	adds	r7, #24
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d004      	beq.n	800ab9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2280      	movs	r2, #128	; 0x80
 800ab94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e00c      	b.n	800abb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f022 0201 	bic.w	r2, r2, #1
 800abb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abcc:	4b92      	ldr	r3, [pc, #584]	; (800ae18 <HAL_DMA_IRQHandler+0x258>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a92      	ldr	r2, [pc, #584]	; (800ae1c <HAL_DMA_IRQHandler+0x25c>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	0a9b      	lsrs	r3, r3, #10
 800abd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abea:	2208      	movs	r2, #8
 800abec:	409a      	lsls	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	4013      	ands	r3, r2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01a      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d013      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f022 0204 	bic.w	r2, r2, #4
 800ac12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac18:	2208      	movs	r2, #8
 800ac1a:	409a      	lsls	r2, r3
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac24:	f043 0201 	orr.w	r2, r3, #1
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac30:	2201      	movs	r2, #1
 800ac32:	409a      	lsls	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d012      	beq.n	800ac62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00b      	beq.n	800ac62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4e:	2201      	movs	r2, #1
 800ac50:	409a      	lsls	r2, r3
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5a:	f043 0202 	orr.w	r2, r3, #2
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac66:	2204      	movs	r2, #4
 800ac68:	409a      	lsls	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d012      	beq.n	800ac98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac84:	2204      	movs	r2, #4
 800ac86:	409a      	lsls	r2, r3
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac90:	f043 0204 	orr.w	r2, r3, #4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9c:	2210      	movs	r2, #16
 800ac9e:	409a      	lsls	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4013      	ands	r3, r2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d043      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0308 	and.w	r3, r3, #8
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d03c      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acba:	2210      	movs	r2, #16
 800acbc:	409a      	lsls	r2, r3
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d018      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d108      	bne.n	800acf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d024      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
 800acee:	e01f      	b.n	800ad30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01b      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
 800ad00:	e016      	b.n	800ad30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d107      	bne.n	800ad20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0208 	bic.w	r2, r2, #8
 800ad1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad34:	2220      	movs	r2, #32
 800ad36:	409a      	lsls	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 808e 	beq.w	800ae5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8086 	beq.w	800ae5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad56:	2220      	movs	r2, #32
 800ad58:	409a      	lsls	r2, r3
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d136      	bne.n	800add8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0216 	bic.w	r2, r2, #22
 800ad78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	695a      	ldr	r2, [r3, #20]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d103      	bne.n	800ad9a <HAL_DMA_IRQHandler+0x1da>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d007      	beq.n	800adaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f022 0208 	bic.w	r2, r2, #8
 800ada8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adae:	223f      	movs	r2, #63	; 0x3f
 800adb0:	409a      	lsls	r2, r3
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d07d      	beq.n	800aeca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
        }
        return;
 800add6:	e078      	b.n	800aeca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d01c      	beq.n	800ae20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d108      	bne.n	800ae06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d030      	beq.n	800ae5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
 800ae04:	e02b      	b.n	800ae5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d027      	beq.n	800ae5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	4798      	blx	r3
 800ae16:	e022      	b.n	800ae5e <HAL_DMA_IRQHandler+0x29e>
 800ae18:	20000000 	.word	0x20000000
 800ae1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10f      	bne.n	800ae4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 0210 	bic.w	r2, r2, #16
 800ae3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d032      	beq.n	800aecc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d022      	beq.n	800aeb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2205      	movs	r2, #5
 800ae76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f022 0201 	bic.w	r2, r2, #1
 800ae88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	60bb      	str	r3, [r7, #8]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d307      	bcc.n	800aea6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1f2      	bne.n	800ae8a <HAL_DMA_IRQHandler+0x2ca>
 800aea4:	e000      	b.n	800aea8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800aea6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	4798      	blx	r3
 800aec8:	e000      	b.n	800aecc <HAL_DMA_IRQHandler+0x30c>
        return;
 800aeca:	bf00      	nop
    }
  }
}
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop

0800aed4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b40      	cmp	r3, #64	; 0x40
 800af18:	d108      	bne.n	800af2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af2a:	e007      	b.n	800af3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	60da      	str	r2, [r3, #12]
}
 800af3c:	bf00      	nop
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	3b10      	subs	r3, #16
 800af58:	4a14      	ldr	r2, [pc, #80]	; (800afac <DMA_CalcBaseAndBitshift+0x64>)
 800af5a:	fba2 2303 	umull	r2, r3, r2, r3
 800af5e:	091b      	lsrs	r3, r3, #4
 800af60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af62:	4a13      	ldr	r2, [pc, #76]	; (800afb0 <DMA_CalcBaseAndBitshift+0x68>)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b03      	cmp	r3, #3
 800af74:	d909      	bls.n	800af8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af7e:	f023 0303 	bic.w	r3, r3, #3
 800af82:	1d1a      	adds	r2, r3, #4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	659a      	str	r2, [r3, #88]	; 0x58
 800af88:	e007      	b.n	800af9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af92:	f023 0303 	bic.w	r3, r3, #3
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	aaaaaaab 	.word	0xaaaaaaab
 800afb0:	0801a208 	.word	0x0801a208

0800afb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d11f      	bne.n	800b00e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d855      	bhi.n	800b080 <DMA_CheckFifoParam+0xcc>
 800afd4:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <DMA_CheckFifoParam+0x28>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800afed 	.word	0x0800afed
 800afe0:	0800afff 	.word	0x0800afff
 800afe4:	0800afed 	.word	0x0800afed
 800afe8:	0800b081 	.word	0x0800b081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d045      	beq.n	800b084 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800affc:	e042      	b.n	800b084 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b006:	d13f      	bne.n	800b088 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b00c:	e03c      	b.n	800b088 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b016:	d121      	bne.n	800b05c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d836      	bhi.n	800b08c <DMA_CheckFifoParam+0xd8>
 800b01e:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <DMA_CheckFifoParam+0x70>)
 800b020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b024:	0800b035 	.word	0x0800b035
 800b028:	0800b03b 	.word	0x0800b03b
 800b02c:	0800b035 	.word	0x0800b035
 800b030:	0800b04d 	.word	0x0800b04d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	73fb      	strb	r3, [r7, #15]
      break;
 800b038:	e02f      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d024      	beq.n	800b090 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b04a:	e021      	b.n	800b090 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b054:	d11e      	bne.n	800b094 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b05a:	e01b      	b.n	800b094 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d902      	bls.n	800b068 <DMA_CheckFifoParam+0xb4>
 800b062:	2b03      	cmp	r3, #3
 800b064:	d003      	beq.n	800b06e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b066:	e018      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	73fb      	strb	r3, [r7, #15]
      break;
 800b06c:	e015      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00e      	beq.n	800b098 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	73fb      	strb	r3, [r7, #15]
      break;
 800b07e:	e00b      	b.n	800b098 <DMA_CheckFifoParam+0xe4>
      break;
 800b080:	bf00      	nop
 800b082:	e00a      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      break;
 800b084:	bf00      	nop
 800b086:	e008      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      break;
 800b088:	bf00      	nop
 800b08a:	e006      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      break;
 800b08c:	bf00      	nop
 800b08e:	e004      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      break;
 800b090:	bf00      	nop
 800b092:	e002      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      break;   
 800b094:	bf00      	nop
 800b096:	e000      	b.n	800b09a <DMA_CheckFifoParam+0xe6>
      break;
 800b098:	bf00      	nop
    }
  } 
  
  return status; 
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b089      	sub	sp, #36	; 0x24
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0be:	2300      	movs	r3, #0
 800b0c0:	61fb      	str	r3, [r7, #28]
 800b0c2:	e177      	b.n	800b3b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	f040 8166 	bne.w	800b3ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d00b      	beq.n	800b102 <HAL_GPIO_Init+0x5a>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d007      	beq.n	800b102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0f6:	2b11      	cmp	r3, #17
 800b0f8:	d003      	beq.n	800b102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b12      	cmp	r3, #18
 800b100:	d130      	bne.n	800b164 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	2203      	movs	r2, #3
 800b10e:	fa02 f303 	lsl.w	r3, r2, r3
 800b112:	43db      	mvns	r3, r3
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	4013      	ands	r3, r2
 800b118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	fa02 f303 	lsl.w	r3, r2, r3
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	4313      	orrs	r3, r2
 800b12a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b138:	2201      	movs	r2, #1
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	fa02 f303 	lsl.w	r3, r2, r3
 800b140:	43db      	mvns	r3, r3
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	4013      	ands	r3, r2
 800b146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	091b      	lsrs	r3, r3, #4
 800b14e:	f003 0201 	and.w	r2, r3, #1
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	fa02 f303 	lsl.w	r3, r2, r3
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	2203      	movs	r2, #3
 800b170:	fa02 f303 	lsl.w	r3, r2, r3
 800b174:	43db      	mvns	r3, r3
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	4013      	ands	r3, r2
 800b17a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	689a      	ldr	r2, [r3, #8]
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	fa02 f303 	lsl.w	r3, r2, r3
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d003      	beq.n	800b1a4 <HAL_GPIO_Init+0xfc>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	2b12      	cmp	r3, #18
 800b1a2:	d123      	bne.n	800b1ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	08da      	lsrs	r2, r3, #3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3208      	adds	r2, #8
 800b1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f003 0307 	and.w	r3, r3, #7
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	220f      	movs	r2, #15
 800b1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c0:	43db      	mvns	r3, r3
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	08da      	lsrs	r2, r3, #3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3208      	adds	r2, #8
 800b1e6:	69b9      	ldr	r1, [r7, #24]
 800b1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fc:	43db      	mvns	r3, r3
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	4013      	ands	r3, r2
 800b202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f003 0203 	and.w	r2, r3, #3
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	fa02 f303 	lsl.w	r3, r2, r3
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	4313      	orrs	r3, r2
 800b218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80c0 	beq.w	800b3ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	4b65      	ldr	r3, [pc, #404]	; (800b3c8 <HAL_GPIO_Init+0x320>)
 800b234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b236:	4a64      	ldr	r2, [pc, #400]	; (800b3c8 <HAL_GPIO_Init+0x320>)
 800b238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b23c:	6453      	str	r3, [r2, #68]	; 0x44
 800b23e:	4b62      	ldr	r3, [pc, #392]	; (800b3c8 <HAL_GPIO_Init+0x320>)
 800b240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b246:	60fb      	str	r3, [r7, #12]
 800b248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b24a:	4a60      	ldr	r2, [pc, #384]	; (800b3cc <HAL_GPIO_Init+0x324>)
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	089b      	lsrs	r3, r3, #2
 800b250:	3302      	adds	r3, #2
 800b252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	f003 0303 	and.w	r3, r3, #3
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	220f      	movs	r2, #15
 800b262:	fa02 f303 	lsl.w	r3, r2, r3
 800b266:	43db      	mvns	r3, r3
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	4013      	ands	r3, r2
 800b26c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a57      	ldr	r2, [pc, #348]	; (800b3d0 <HAL_GPIO_Init+0x328>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d037      	beq.n	800b2e6 <HAL_GPIO_Init+0x23e>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a56      	ldr	r2, [pc, #344]	; (800b3d4 <HAL_GPIO_Init+0x32c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d031      	beq.n	800b2e2 <HAL_GPIO_Init+0x23a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a55      	ldr	r2, [pc, #340]	; (800b3d8 <HAL_GPIO_Init+0x330>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d02b      	beq.n	800b2de <HAL_GPIO_Init+0x236>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a54      	ldr	r2, [pc, #336]	; (800b3dc <HAL_GPIO_Init+0x334>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d025      	beq.n	800b2da <HAL_GPIO_Init+0x232>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a53      	ldr	r2, [pc, #332]	; (800b3e0 <HAL_GPIO_Init+0x338>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d01f      	beq.n	800b2d6 <HAL_GPIO_Init+0x22e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a52      	ldr	r2, [pc, #328]	; (800b3e4 <HAL_GPIO_Init+0x33c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d019      	beq.n	800b2d2 <HAL_GPIO_Init+0x22a>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a51      	ldr	r2, [pc, #324]	; (800b3e8 <HAL_GPIO_Init+0x340>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d013      	beq.n	800b2ce <HAL_GPIO_Init+0x226>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a50      	ldr	r2, [pc, #320]	; (800b3ec <HAL_GPIO_Init+0x344>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d00d      	beq.n	800b2ca <HAL_GPIO_Init+0x222>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a4f      	ldr	r2, [pc, #316]	; (800b3f0 <HAL_GPIO_Init+0x348>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d007      	beq.n	800b2c6 <HAL_GPIO_Init+0x21e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a4e      	ldr	r2, [pc, #312]	; (800b3f4 <HAL_GPIO_Init+0x34c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d101      	bne.n	800b2c2 <HAL_GPIO_Init+0x21a>
 800b2be:	2309      	movs	r3, #9
 800b2c0:	e012      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2c2:	230a      	movs	r3, #10
 800b2c4:	e010      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	e00e      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2ca:	2307      	movs	r3, #7
 800b2cc:	e00c      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2ce:	2306      	movs	r3, #6
 800b2d0:	e00a      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2d2:	2305      	movs	r3, #5
 800b2d4:	e008      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2d6:	2304      	movs	r3, #4
 800b2d8:	e006      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e004      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e002      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <HAL_GPIO_Init+0x240>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	f002 0203 	and.w	r2, r2, #3
 800b2ee:	0092      	lsls	r2, r2, #2
 800b2f0:	4093      	lsls	r3, r2
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2f8:	4934      	ldr	r1, [pc, #208]	; (800b3cc <HAL_GPIO_Init+0x324>)
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	089b      	lsrs	r3, r3, #2
 800b2fe:	3302      	adds	r3, #2
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b306:	4b3c      	ldr	r3, [pc, #240]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	43db      	mvns	r3, r3
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	4013      	ands	r3, r2
 800b314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b32a:	4a33      	ldr	r2, [pc, #204]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b330:	4b31      	ldr	r3, [pc, #196]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	43db      	mvns	r3, r3
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	4013      	ands	r3, r2
 800b33e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b354:	4a28      	ldr	r2, [pc, #160]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b35a:	4b27      	ldr	r3, [pc, #156]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	43db      	mvns	r3, r3
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	4013      	ands	r3, r2
 800b368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b37e:	4a1e      	ldr	r2, [pc, #120]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b384:	4b1c      	ldr	r3, [pc, #112]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	43db      	mvns	r3, r3
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	4013      	ands	r3, r2
 800b392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d003      	beq.n	800b3a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3a8:	4a13      	ldr	r2, [pc, #76]	; (800b3f8 <HAL_GPIO_Init+0x350>)
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	61fb      	str	r3, [r7, #28]
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	2b0f      	cmp	r3, #15
 800b3b8:	f67f ae84 	bls.w	800b0c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3bc:	bf00      	nop
 800b3be:	3724      	adds	r7, #36	; 0x24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	40023800 	.word	0x40023800
 800b3cc:	40013800 	.word	0x40013800
 800b3d0:	40020000 	.word	0x40020000
 800b3d4:	40020400 	.word	0x40020400
 800b3d8:	40020800 	.word	0x40020800
 800b3dc:	40020c00 	.word	0x40020c00
 800b3e0:	40021000 	.word	0x40021000
 800b3e4:	40021400 	.word	0x40021400
 800b3e8:	40021800 	.word	0x40021800
 800b3ec:	40021c00 	.word	0x40021c00
 800b3f0:	40022000 	.word	0x40022000
 800b3f4:	40022400 	.word	0x40022400
 800b3f8:	40013c00 	.word	0x40013c00

0800b3fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	691a      	ldr	r2, [r3, #16]
 800b40c:	887b      	ldrh	r3, [r7, #2]
 800b40e:	4013      	ands	r3, r2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b414:	2301      	movs	r3, #1
 800b416:	73fb      	strb	r3, [r7, #15]
 800b418:	e001      	b.n	800b41e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b41a:	2300      	movs	r3, #0
 800b41c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	807b      	strh	r3, [r7, #2]
 800b438:	4613      	mov	r3, r2
 800b43a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b43c:	787b      	ldrb	r3, [r7, #1]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b442:	887a      	ldrh	r2, [r7, #2]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b448:	e003      	b.n	800b452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b44a:	887b      	ldrh	r3, [r7, #2]
 800b44c:	041a      	lsls	r2, r3, #16
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	619a      	str	r2, [r3, #24]
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
	...

0800b460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e11f      	b.n	800b6b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d106      	bne.n	800b48c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7fb fe32 	bl	80070f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2224      	movs	r2, #36	; 0x24
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 0201 	bic.w	r2, r2, #1
 800b4a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4c4:	f001 f96e 	bl	800c7a4 <HAL_RCC_GetPCLK1Freq>
 800b4c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	4a7b      	ldr	r2, [pc, #492]	; (800b6bc <HAL_I2C_Init+0x25c>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d807      	bhi.n	800b4e4 <HAL_I2C_Init+0x84>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4a7a      	ldr	r2, [pc, #488]	; (800b6c0 <HAL_I2C_Init+0x260>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	bf94      	ite	ls
 800b4dc:	2301      	movls	r3, #1
 800b4de:	2300      	movhi	r3, #0
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	e006      	b.n	800b4f2 <HAL_I2C_Init+0x92>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4a77      	ldr	r2, [pc, #476]	; (800b6c4 <HAL_I2C_Init+0x264>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	bf94      	ite	ls
 800b4ec:	2301      	movls	r3, #1
 800b4ee:	2300      	movhi	r3, #0
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e0db      	b.n	800b6b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	4a72      	ldr	r2, [pc, #456]	; (800b6c8 <HAL_I2C_Init+0x268>)
 800b4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b502:	0c9b      	lsrs	r3, r3, #18
 800b504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	430a      	orrs	r2, r1
 800b518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	4a64      	ldr	r2, [pc, #400]	; (800b6bc <HAL_I2C_Init+0x25c>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d802      	bhi.n	800b534 <HAL_I2C_Init+0xd4>
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	3301      	adds	r3, #1
 800b532:	e009      	b.n	800b548 <HAL_I2C_Init+0xe8>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b53a:	fb02 f303 	mul.w	r3, r2, r3
 800b53e:	4a63      	ldr	r2, [pc, #396]	; (800b6cc <HAL_I2C_Init+0x26c>)
 800b540:	fba2 2303 	umull	r2, r3, r2, r3
 800b544:	099b      	lsrs	r3, r3, #6
 800b546:	3301      	adds	r3, #1
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	430b      	orrs	r3, r1
 800b54e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b55a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	4956      	ldr	r1, [pc, #344]	; (800b6bc <HAL_I2C_Init+0x25c>)
 800b564:	428b      	cmp	r3, r1
 800b566:	d80d      	bhi.n	800b584 <HAL_I2C_Init+0x124>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	1e59      	subs	r1, r3, #1
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	fbb1 f3f3 	udiv	r3, r1, r3
 800b576:	3301      	adds	r3, #1
 800b578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b57c:	2b04      	cmp	r3, #4
 800b57e:	bf38      	it	cc
 800b580:	2304      	movcc	r3, #4
 800b582:	e04f      	b.n	800b624 <HAL_I2C_Init+0x1c4>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d111      	bne.n	800b5b0 <HAL_I2C_Init+0x150>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	1e58      	subs	r0, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6859      	ldr	r1, [r3, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	440b      	add	r3, r1
 800b59a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b59e:	3301      	adds	r3, #1
 800b5a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	bf0c      	ite	eq
 800b5a8:	2301      	moveq	r3, #1
 800b5aa:	2300      	movne	r3, #0
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	e012      	b.n	800b5d6 <HAL_I2C_Init+0x176>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	1e58      	subs	r0, r3, #1
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6859      	ldr	r1, [r3, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	440b      	add	r3, r1
 800b5be:	0099      	lsls	r1, r3, #2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	bf0c      	ite	eq
 800b5d0:	2301      	moveq	r3, #1
 800b5d2:	2300      	movne	r3, #0
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <HAL_I2C_Init+0x17e>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e022      	b.n	800b624 <HAL_I2C_Init+0x1c4>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10e      	bne.n	800b604 <HAL_I2C_Init+0x1a4>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	1e58      	subs	r0, r3, #1
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6859      	ldr	r1, [r3, #4]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	440b      	add	r3, r1
 800b5f4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b602:	e00f      	b.n	800b624 <HAL_I2C_Init+0x1c4>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	1e58      	subs	r0, r3, #1
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6859      	ldr	r1, [r3, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	440b      	add	r3, r1
 800b612:	0099      	lsls	r1, r3, #2
 800b614:	440b      	add	r3, r1
 800b616:	fbb0 f3f3 	udiv	r3, r0, r3
 800b61a:	3301      	adds	r3, #1
 800b61c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	6809      	ldr	r1, [r1, #0]
 800b628:	4313      	orrs	r3, r2
 800b62a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	69da      	ldr	r2, [r3, #28]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	431a      	orrs	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	6911      	ldr	r1, [r2, #16]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	68d2      	ldr	r2, [r2, #12]
 800b65e:	4311      	orrs	r1, r2
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	430b      	orrs	r3, r1
 800b666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	695a      	ldr	r2, [r3, #20]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	431a      	orrs	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f042 0201 	orr.w	r2, r2, #1
 800b692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	000186a0 	.word	0x000186a0
 800b6c0:	001e847f 	.word	0x001e847f
 800b6c4:	003d08ff 	.word	0x003d08ff
 800b6c8:	431bde83 	.word	0x431bde83
 800b6cc:	10624dd3 	.word	0x10624dd3

0800b6d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	607a      	str	r2, [r7, #4]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	460b      	mov	r3, r1
 800b6de:	817b      	strh	r3, [r7, #10]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6e4:	f7fe fc00 	bl	8009ee8 <HAL_GetTick>
 800b6e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b20      	cmp	r3, #32
 800b6f4:	f040 80e0 	bne.w	800b8b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	2319      	movs	r3, #25
 800b6fe:	2201      	movs	r2, #1
 800b700:	4970      	ldr	r1, [pc, #448]	; (800b8c4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f000 fc58 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b70e:	2302      	movs	r3, #2
 800b710:	e0d3      	b.n	800b8ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d101      	bne.n	800b720 <HAL_I2C_Master_Transmit+0x50>
 800b71c:	2302      	movs	r3, #2
 800b71e:	e0cc      	b.n	800b8ba <HAL_I2C_Master_Transmit+0x1ea>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b01      	cmp	r3, #1
 800b734:	d007      	beq.n	800b746 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0201 	orr.w	r2, r2, #1
 800b744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b754:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2221      	movs	r2, #33	; 0x21
 800b75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2210      	movs	r2, #16
 800b762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	893a      	ldrh	r2, [r7, #8]
 800b776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4a50      	ldr	r2, [pc, #320]	; (800b8c8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b786:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b788:	8979      	ldrh	r1, [r7, #10]
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	6a3a      	ldr	r2, [r7, #32]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fac2 	bl	800bd18 <I2C_MasterRequestWrite>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e08d      	b.n	800b8ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	613b      	str	r3, [r7, #16]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	613b      	str	r3, [r7, #16]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	613b      	str	r3, [r7, #16]
 800b7b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b7b4:	e066      	b.n	800b884 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	6a39      	ldr	r1, [r7, #32]
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f000 fcd2 	bl	800c164 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00d      	beq.n	800b7e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	d107      	bne.n	800b7de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e06b      	b.n	800b8ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	781a      	ldrb	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	3b01      	subs	r3, #1
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	695b      	ldr	r3, [r3, #20]
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d11b      	bne.n	800b858 <HAL_I2C_Master_Transmit+0x188>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b824:	2b00      	cmp	r3, #0
 800b826:	d017      	beq.n	800b858 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b842:	b29b      	uxth	r3, r3
 800b844:	3b01      	subs	r3, #1
 800b846:	b29a      	uxth	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b850:	3b01      	subs	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	6a39      	ldr	r1, [r7, #32]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fcc2 	bl	800c1e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00d      	beq.n	800b884 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	d107      	bne.n	800b880 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b87e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e01a      	b.n	800b8ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d194      	bne.n	800b7b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b89a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e000      	b.n	800b8ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b8b8:	2302      	movs	r3, #2
  }
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	00100002 	.word	0x00100002
 800b8c8:	ffff0000 	.word	0xffff0000

0800b8cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b08c      	sub	sp, #48	; 0x30
 800b8d0:	af02      	add	r7, sp, #8
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	607a      	str	r2, [r7, #4]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	460b      	mov	r3, r1
 800b8da:	817b      	strh	r3, [r7, #10]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8e0:	f7fe fb02 	bl	8009ee8 <HAL_GetTick>
 800b8e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b20      	cmp	r3, #32
 800b8f0:	f040 820b 	bne.w	800bd0a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	2319      	movs	r3, #25
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	497c      	ldr	r1, [pc, #496]	; (800baf0 <HAL_I2C_Master_Receive+0x224>)
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 fb5a 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b90a:	2302      	movs	r3, #2
 800b90c:	e1fe      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b914:	2b01      	cmp	r3, #1
 800b916:	d101      	bne.n	800b91c <HAL_I2C_Master_Receive+0x50>
 800b918:	2302      	movs	r3, #2
 800b91a:	e1f7      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d007      	beq.n	800b942 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f042 0201 	orr.w	r2, r2, #1
 800b940:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b950:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2222      	movs	r2, #34	; 0x22
 800b956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2210      	movs	r2, #16
 800b95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	893a      	ldrh	r2, [r7, #8]
 800b972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b978:	b29a      	uxth	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	4a5c      	ldr	r2, [pc, #368]	; (800baf4 <HAL_I2C_Master_Receive+0x228>)
 800b982:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b984:	8979      	ldrh	r1, [r7, #10]
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 fa46 	bl	800be1c <I2C_MasterRequestRead>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e1b8      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d113      	bne.n	800b9ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	623b      	str	r3, [r7, #32]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	623b      	str	r3, [r7, #32]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	623b      	str	r3, [r7, #32]
 800b9b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	e18c      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d11b      	bne.n	800ba0a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	61fb      	str	r3, [r7, #28]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	e16c      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d11b      	bne.n	800ba4a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba32:	2300      	movs	r3, #0
 800ba34:	61bb      	str	r3, [r7, #24]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	61bb      	str	r3, [r7, #24]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	61bb      	str	r3, [r7, #24]
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	e14c      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	617b      	str	r3, [r7, #20]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba70:	e138      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	f200 80f1 	bhi.w	800bc5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d123      	bne.n	800bacc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 fbed 	bl	800c268 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e139      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691a      	ldr	r2, [r3, #16]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab4:	3b01      	subs	r3, #1
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baca:	e10b      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d14e      	bne.n	800bb72 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	2200      	movs	r2, #0
 800badc:	4906      	ldr	r1, [pc, #24]	; (800baf8 <HAL_I2C_Master_Receive+0x22c>)
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 fa6a 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d008      	beq.n	800bafc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	e10e      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
 800baee:	bf00      	nop
 800baf0:	00100002 	.word	0x00100002
 800baf4:	ffff0000 	.word	0xffff0000
 800baf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691a      	ldr	r2, [r3, #16]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	b2d2      	uxtb	r2, r2
 800bb18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	b2d2      	uxtb	r2, r2
 800bb4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb70:	e0b8      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4966      	ldr	r1, [pc, #408]	; (800bd14 <HAL_I2C_Master_Receive+0x448>)
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f000 fa1b 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e0bf      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	691a      	ldr	r2, [r3, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	494f      	ldr	r1, [pc, #316]	; (800bd14 <HAL_I2C_Master_Receive+0x448>)
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f9ed 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e091      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	691a      	ldr	r2, [r3, #16]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	b2d2      	uxtb	r2, r2
 800bc04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc14:	3b01      	subs	r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	3b01      	subs	r3, #1
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	691a      	ldr	r2, [r3, #16]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	b2d2      	uxtb	r2, r2
 800bc36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc46:	3b01      	subs	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	3b01      	subs	r3, #1
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc5c:	e042      	b.n	800bce4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 fb00 	bl	800c268 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e04c      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	691a      	ldr	r2, [r3, #16]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	b2d2      	uxtb	r2, r2
 800bc7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	1c5a      	adds	r2, r3, #1
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d118      	bne.n	800bce4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	691a      	ldr	r2, [r3, #16]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	b2d2      	uxtb	r2, r2
 800bcbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f47f aec2 	bne.w	800ba72 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	e000      	b.n	800bd0c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd0a:	2302      	movs	r3, #2
  }
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3728      	adds	r7, #40	; 0x28
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	00010004 	.word	0x00010004

0800bd18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	607a      	str	r2, [r7, #4]
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	460b      	mov	r3, r1
 800bd26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d006      	beq.n	800bd42 <I2C_MasterRequestWrite+0x2a>
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d003      	beq.n	800bd42 <I2C_MasterRequestWrite+0x2a>
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd40:	d108      	bne.n	800bd54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	e00b      	b.n	800bd6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd58:	2b12      	cmp	r3, #18
 800bd5a:	d107      	bne.n	800bd6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 f91d 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00d      	beq.n	800bda0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd92:	d103      	bne.n	800bd9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e035      	b.n	800be0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bda8:	d108      	bne.n	800bdbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdaa:	897b      	ldrh	r3, [r7, #10]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bdb8:	611a      	str	r2, [r3, #16]
 800bdba:	e01b      	b.n	800bdf4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bdbc:	897b      	ldrh	r3, [r7, #10]
 800bdbe:	11db      	asrs	r3, r3, #7
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	f003 0306 	and.w	r3, r3, #6
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	f063 030f 	orn	r3, r3, #15
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	490e      	ldr	r1, [pc, #56]	; (800be14 <I2C_MasterRequestWrite+0xfc>)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f943 	bl	800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e010      	b.n	800be0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bdea:	897b      	ldrh	r3, [r7, #10]
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	4907      	ldr	r1, [pc, #28]	; (800be18 <I2C_MasterRequestWrite+0x100>)
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 f933 	bl	800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e000      	b.n	800be0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	00010008 	.word	0x00010008
 800be18:	00010002 	.word	0x00010002

0800be1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af02      	add	r7, sp, #8
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	607a      	str	r2, [r7, #4]
 800be26:	603b      	str	r3, [r7, #0]
 800be28:	460b      	mov	r3, r1
 800be2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2b08      	cmp	r3, #8
 800be46:	d006      	beq.n	800be56 <I2C_MasterRequestRead+0x3a>
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d003      	beq.n	800be56 <I2C_MasterRequestRead+0x3a>
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be54:	d108      	bne.n	800be68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	e00b      	b.n	800be80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6c:	2b11      	cmp	r3, #17
 800be6e:	d107      	bne.n	800be80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f893 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00d      	beq.n	800beb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea6:	d103      	bne.n	800beb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e079      	b.n	800bfa8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bebc:	d108      	bne.n	800bed0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bebe:	897b      	ldrh	r3, [r7, #10]
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f043 0301 	orr.w	r3, r3, #1
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	611a      	str	r2, [r3, #16]
 800bece:	e05f      	b.n	800bf90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bed0:	897b      	ldrh	r3, [r7, #10]
 800bed2:	11db      	asrs	r3, r3, #7
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	f003 0306 	and.w	r3, r3, #6
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	f063 030f 	orn	r3, r3, #15
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4930      	ldr	r1, [pc, #192]	; (800bfb0 <I2C_MasterRequestRead+0x194>)
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f8b9 	bl	800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e054      	b.n	800bfa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800befe:	897b      	ldrh	r3, [r7, #10]
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	4929      	ldr	r1, [pc, #164]	; (800bfb4 <I2C_MasterRequestRead+0x198>)
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 f8a9 	bl	800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e044      	b.n	800bfa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf1e:	2300      	movs	r3, #0
 800bf20:	613b      	str	r3, [r7, #16]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	695b      	ldr	r3, [r3, #20]
 800bf28:	613b      	str	r3, [r7, #16]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	613b      	str	r3, [r7, #16]
 800bf32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f000 f831 	bl	800bfb8 <I2C_WaitOnFlagUntilTimeout>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf6a:	d103      	bne.n	800bf74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf72:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e017      	b.n	800bfa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bf78:	897b      	ldrh	r3, [r7, #10]
 800bf7a:	11db      	asrs	r3, r3, #7
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0306 	and.w	r3, r3, #6
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	f063 030e 	orn	r3, r3, #14
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	4907      	ldr	r1, [pc, #28]	; (800bfb4 <I2C_MasterRequestRead+0x198>)
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 f865 	bl	800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	00010008 	.word	0x00010008
 800bfb4:	00010002 	.word	0x00010002

0800bfb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfc8:	e025      	b.n	800c016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd0:	d021      	beq.n	800c016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfd2:	f7fd ff89 	bl	8009ee8 <HAL_GetTick>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d302      	bcc.n	800bfe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d116      	bne.n	800c016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2220      	movs	r2, #32
 800bff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c002:	f043 0220 	orr.w	r2, r3, #32
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e023      	b.n	800c05e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	0c1b      	lsrs	r3, r3, #16
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d10d      	bne.n	800c03c <I2C_WaitOnFlagUntilTimeout+0x84>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	43da      	mvns	r2, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	4013      	ands	r3, r2
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	bf0c      	ite	eq
 800c032:	2301      	moveq	r3, #1
 800c034:	2300      	movne	r3, #0
 800c036:	b2db      	uxtb	r3, r3
 800c038:	461a      	mov	r2, r3
 800c03a:	e00c      	b.n	800c056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	43da      	mvns	r2, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	4013      	ands	r3, r2
 800c048:	b29b      	uxth	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	bf0c      	ite	eq
 800c04e:	2301      	moveq	r3, #1
 800c050:	2300      	movne	r3, #0
 800c052:	b2db      	uxtb	r3, r3
 800c054:	461a      	mov	r2, r3
 800c056:	79fb      	ldrb	r3, [r7, #7]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d0b6      	beq.n	800bfca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
 800c072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c074:	e051      	b.n	800c11a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c084:	d123      	bne.n	800c0ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c09e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	f043 0204 	orr.w	r2, r3, #4
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e046      	b.n	800c15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d4:	d021      	beq.n	800c11a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0d6:	f7fd ff07 	bl	8009ee8 <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d302      	bcc.n	800c0ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d116      	bne.n	800c11a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c106:	f043 0220 	orr.w	r2, r3, #32
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e020      	b.n	800c15c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	0c1b      	lsrs	r3, r3, #16
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b01      	cmp	r3, #1
 800c122:	d10c      	bne.n	800c13e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	43da      	mvns	r2, r3
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	4013      	ands	r3, r2
 800c130:	b29b      	uxth	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	bf14      	ite	ne
 800c136:	2301      	movne	r3, #1
 800c138:	2300      	moveq	r3, #0
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	e00b      	b.n	800c156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	699b      	ldr	r3, [r3, #24]
 800c144:	43da      	mvns	r2, r3
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	4013      	ands	r3, r2
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bf14      	ite	ne
 800c150:	2301      	movne	r3, #1
 800c152:	2300      	moveq	r3, #0
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d18d      	bne.n	800c076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c170:	e02d      	b.n	800c1ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 f8ce 	bl	800c314 <I2C_IsAcknowledgeFailed>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e02d      	b.n	800c1de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c188:	d021      	beq.n	800c1ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c18a:	f7fd fead 	bl	8009ee8 <HAL_GetTick>
 800c18e:	4602      	mov	r2, r0
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	429a      	cmp	r2, r3
 800c198:	d302      	bcc.n	800c1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d116      	bne.n	800c1ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2220      	movs	r2, #32
 800c1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	f043 0220 	orr.w	r2, r3, #32
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e007      	b.n	800c1de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d8:	2b80      	cmp	r3, #128	; 0x80
 800c1da:	d1ca      	bne.n	800c172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b084      	sub	sp, #16
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	60f8      	str	r0, [r7, #12]
 800c1ee:	60b9      	str	r1, [r7, #8]
 800c1f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c1f2:	e02d      	b.n	800c250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f88d 	bl	800c314 <I2C_IsAcknowledgeFailed>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	e02d      	b.n	800c260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20a:	d021      	beq.n	800c250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c20c:	f7fd fe6c 	bl	8009ee8 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d302      	bcc.n	800c222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d116      	bne.n	800c250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2220      	movs	r2, #32
 800c22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23c:	f043 0220 	orr.w	r2, r3, #32
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e007      	b.n	800c260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	f003 0304 	and.w	r3, r3, #4
 800c25a:	2b04      	cmp	r3, #4
 800c25c:	d1ca      	bne.n	800c1f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c274:	e042      	b.n	800c2fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	f003 0310 	and.w	r3, r3, #16
 800c280:	2b10      	cmp	r3, #16
 800c282:	d119      	bne.n	800c2b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f06f 0210 	mvn.w	r2, #16
 800c28c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2200      	movs	r2, #0
 800c292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2220      	movs	r2, #32
 800c298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e029      	b.n	800c30c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2b8:	f7fd fe16 	bl	8009ee8 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d302      	bcc.n	800c2ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d116      	bne.n	800c2fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e8:	f043 0220 	orr.w	r2, r3, #32
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e007      	b.n	800c30c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c306:	2b40      	cmp	r3, #64	; 0x40
 800c308:	d1b5      	bne.n	800c276 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c32a:	d11b      	bne.n	800c364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2220      	movs	r2, #32
 800c340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	f043 0204 	orr.w	r2, r3, #4
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e000      	b.n	800c366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
	...

0800c374 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c37e:	2300      	movs	r3, #0
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	4b20      	ldr	r3, [pc, #128]	; (800c404 <HAL_PWREx_EnableOverDrive+0x90>)
 800c384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c386:	4a1f      	ldr	r2, [pc, #124]	; (800c404 <HAL_PWREx_EnableOverDrive+0x90>)
 800c388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c38c:	6413      	str	r3, [r2, #64]	; 0x40
 800c38e:	4b1d      	ldr	r3, [pc, #116]	; (800c404 <HAL_PWREx_EnableOverDrive+0x90>)
 800c390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c39a:	4b1b      	ldr	r3, [pc, #108]	; (800c408 <HAL_PWREx_EnableOverDrive+0x94>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3a0:	f7fd fda2 	bl	8009ee8 <HAL_GetTick>
 800c3a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3a6:	e009      	b.n	800c3bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3a8:	f7fd fd9e 	bl	8009ee8 <HAL_GetTick>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3b6:	d901      	bls.n	800c3bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	e01f      	b.n	800c3fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3bc:	4b13      	ldr	r3, [pc, #76]	; (800c40c <HAL_PWREx_EnableOverDrive+0x98>)
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c8:	d1ee      	bne.n	800c3a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c3ca:	4b11      	ldr	r3, [pc, #68]	; (800c410 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3d0:	f7fd fd8a 	bl	8009ee8 <HAL_GetTick>
 800c3d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3d6:	e009      	b.n	800c3ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3d8:	f7fd fd86 	bl	8009ee8 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3e6:	d901      	bls.n	800c3ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e007      	b.n	800c3fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3ec:	4b07      	ldr	r3, [pc, #28]	; (800c40c <HAL_PWREx_EnableOverDrive+0x98>)
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3f8:	d1ee      	bne.n	800c3d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	40023800 	.word	0x40023800
 800c408:	420e0040 	.word	0x420e0040
 800c40c:	40007000 	.word	0x40007000
 800c410:	420e0044 	.word	0x420e0044

0800c414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d101      	bne.n	800c428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e0cc      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c428:	4b68      	ldr	r3, [pc, #416]	; (800c5cc <HAL_RCC_ClockConfig+0x1b8>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 030f 	and.w	r3, r3, #15
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d90c      	bls.n	800c450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c436:	4b65      	ldr	r3, [pc, #404]	; (800c5cc <HAL_RCC_ClockConfig+0x1b8>)
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	b2d2      	uxtb	r2, r2
 800c43c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c43e:	4b63      	ldr	r3, [pc, #396]	; (800c5cc <HAL_RCC_ClockConfig+0x1b8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f003 030f 	and.w	r3, r3, #15
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d001      	beq.n	800c450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e0b8      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d020      	beq.n	800c49e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 0304 	and.w	r3, r3, #4
 800c464:	2b00      	cmp	r3, #0
 800c466:	d005      	beq.n	800c474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c468:	4b59      	ldr	r3, [pc, #356]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4a58      	ldr	r2, [pc, #352]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c46e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0308 	and.w	r3, r3, #8
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c480:	4b53      	ldr	r3, [pc, #332]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	4a52      	ldr	r2, [pc, #328]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c48a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c48c:	4b50      	ldr	r3, [pc, #320]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	494d      	ldr	r1, [pc, #308]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d044      	beq.n	800c534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d107      	bne.n	800c4c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4b2:	4b47      	ldr	r3, [pc, #284]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d119      	bne.n	800c4f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e07f      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d003      	beq.n	800c4d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4d2:	4b3f      	ldr	r3, [pc, #252]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d109      	bne.n	800c4f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e06f      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4e2:	4b3b      	ldr	r3, [pc, #236]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f003 0302 	and.w	r3, r3, #2
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e067      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4f2:	4b37      	ldr	r3, [pc, #220]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	f023 0203 	bic.w	r2, r3, #3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	4934      	ldr	r1, [pc, #208]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c500:	4313      	orrs	r3, r2
 800c502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c504:	f7fd fcf0 	bl	8009ee8 <HAL_GetTick>
 800c508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c50a:	e00a      	b.n	800c522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c50c:	f7fd fcec 	bl	8009ee8 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d901      	bls.n	800c522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e04f      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c522:	4b2b      	ldr	r3, [pc, #172]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	f003 020c 	and.w	r2, r3, #12
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	429a      	cmp	r2, r3
 800c532:	d1eb      	bne.n	800c50c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c534:	4b25      	ldr	r3, [pc, #148]	; (800c5cc <HAL_RCC_ClockConfig+0x1b8>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d20c      	bcs.n	800c55c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c542:	4b22      	ldr	r3, [pc, #136]	; (800c5cc <HAL_RCC_ClockConfig+0x1b8>)
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c54a:	4b20      	ldr	r3, [pc, #128]	; (800c5cc <HAL_RCC_ClockConfig+0x1b8>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 030f 	and.w	r3, r3, #15
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	429a      	cmp	r2, r3
 800c556:	d001      	beq.n	800c55c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e032      	b.n	800c5c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 0304 	and.w	r3, r3, #4
 800c564:	2b00      	cmp	r3, #0
 800c566:	d008      	beq.n	800c57a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c568:	4b19      	ldr	r3, [pc, #100]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	4916      	ldr	r1, [pc, #88]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c576:	4313      	orrs	r3, r2
 800c578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0308 	and.w	r3, r3, #8
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c586:	4b12      	ldr	r3, [pc, #72]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	490e      	ldr	r1, [pc, #56]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c596:	4313      	orrs	r3, r2
 800c598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c59a:	f000 f821 	bl	800c5e0 <HAL_RCC_GetSysClockFreq>
 800c59e:	4601      	mov	r1, r0
 800c5a0:	4b0b      	ldr	r3, [pc, #44]	; (800c5d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	091b      	lsrs	r3, r3, #4
 800c5a6:	f003 030f 	and.w	r3, r3, #15
 800c5aa:	4a0a      	ldr	r2, [pc, #40]	; (800c5d4 <HAL_RCC_ClockConfig+0x1c0>)
 800c5ac:	5cd3      	ldrb	r3, [r2, r3]
 800c5ae:	fa21 f303 	lsr.w	r3, r1, r3
 800c5b2:	4a09      	ldr	r2, [pc, #36]	; (800c5d8 <HAL_RCC_ClockConfig+0x1c4>)
 800c5b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5b6:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <HAL_RCC_ClockConfig+0x1c8>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd fc50 	bl	8009e60 <HAL_InitTick>

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	40023c00 	.word	0x40023c00
 800c5d0:	40023800 	.word	0x40023800
 800c5d4:	0801a1f0 	.word	0x0801a1f0
 800c5d8:	20000000 	.word	0x20000000
 800c5dc:	20000004 	.word	0x20000004

0800c5e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	607b      	str	r3, [r7, #4]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5f6:	4b63      	ldr	r3, [pc, #396]	; (800c784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	f003 030c 	and.w	r3, r3, #12
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d007      	beq.n	800c612 <HAL_RCC_GetSysClockFreq+0x32>
 800c602:	2b08      	cmp	r3, #8
 800c604:	d008      	beq.n	800c618 <HAL_RCC_GetSysClockFreq+0x38>
 800c606:	2b00      	cmp	r3, #0
 800c608:	f040 80b4 	bne.w	800c774 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c60c:	4b5e      	ldr	r3, [pc, #376]	; (800c788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c60e:	60bb      	str	r3, [r7, #8]
       break;
 800c610:	e0b3      	b.n	800c77a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c612:	4b5d      	ldr	r3, [pc, #372]	; (800c788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c614:	60bb      	str	r3, [r7, #8]
      break;
 800c616:	e0b0      	b.n	800c77a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c618:	4b5a      	ldr	r3, [pc, #360]	; (800c784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c620:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c622:	4b58      	ldr	r3, [pc, #352]	; (800c784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d04a      	beq.n	800c6c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c62e:	4b55      	ldr	r3, [pc, #340]	; (800c784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	099b      	lsrs	r3, r3, #6
 800c634:	f04f 0400 	mov.w	r4, #0
 800c638:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c63c:	f04f 0200 	mov.w	r2, #0
 800c640:	ea03 0501 	and.w	r5, r3, r1
 800c644:	ea04 0602 	and.w	r6, r4, r2
 800c648:	4629      	mov	r1, r5
 800c64a:	4632      	mov	r2, r6
 800c64c:	f04f 0300 	mov.w	r3, #0
 800c650:	f04f 0400 	mov.w	r4, #0
 800c654:	0154      	lsls	r4, r2, #5
 800c656:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c65a:	014b      	lsls	r3, r1, #5
 800c65c:	4619      	mov	r1, r3
 800c65e:	4622      	mov	r2, r4
 800c660:	1b49      	subs	r1, r1, r5
 800c662:	eb62 0206 	sbc.w	r2, r2, r6
 800c666:	f04f 0300 	mov.w	r3, #0
 800c66a:	f04f 0400 	mov.w	r4, #0
 800c66e:	0194      	lsls	r4, r2, #6
 800c670:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c674:	018b      	lsls	r3, r1, #6
 800c676:	1a5b      	subs	r3, r3, r1
 800c678:	eb64 0402 	sbc.w	r4, r4, r2
 800c67c:	f04f 0100 	mov.w	r1, #0
 800c680:	f04f 0200 	mov.w	r2, #0
 800c684:	00e2      	lsls	r2, r4, #3
 800c686:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c68a:	00d9      	lsls	r1, r3, #3
 800c68c:	460b      	mov	r3, r1
 800c68e:	4614      	mov	r4, r2
 800c690:	195b      	adds	r3, r3, r5
 800c692:	eb44 0406 	adc.w	r4, r4, r6
 800c696:	f04f 0100 	mov.w	r1, #0
 800c69a:	f04f 0200 	mov.w	r2, #0
 800c69e:	02a2      	lsls	r2, r4, #10
 800c6a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c6a4:	0299      	lsls	r1, r3, #10
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f04f 0400 	mov.w	r4, #0
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	f7f4 fafe 	bl	8000cb8 <__aeabi_uldivmod>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	460c      	mov	r4, r1
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	e049      	b.n	800c758 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6c4:	4b2f      	ldr	r3, [pc, #188]	; (800c784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	099b      	lsrs	r3, r3, #6
 800c6ca:	f04f 0400 	mov.w	r4, #0
 800c6ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	ea03 0501 	and.w	r5, r3, r1
 800c6da:	ea04 0602 	and.w	r6, r4, r2
 800c6de:	4629      	mov	r1, r5
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	f04f 0300 	mov.w	r3, #0
 800c6e6:	f04f 0400 	mov.w	r4, #0
 800c6ea:	0154      	lsls	r4, r2, #5
 800c6ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c6f0:	014b      	lsls	r3, r1, #5
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	1b49      	subs	r1, r1, r5
 800c6f8:	eb62 0206 	sbc.w	r2, r2, r6
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	f04f 0400 	mov.w	r4, #0
 800c704:	0194      	lsls	r4, r2, #6
 800c706:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c70a:	018b      	lsls	r3, r1, #6
 800c70c:	1a5b      	subs	r3, r3, r1
 800c70e:	eb64 0402 	sbc.w	r4, r4, r2
 800c712:	f04f 0100 	mov.w	r1, #0
 800c716:	f04f 0200 	mov.w	r2, #0
 800c71a:	00e2      	lsls	r2, r4, #3
 800c71c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c720:	00d9      	lsls	r1, r3, #3
 800c722:	460b      	mov	r3, r1
 800c724:	4614      	mov	r4, r2
 800c726:	195b      	adds	r3, r3, r5
 800c728:	eb44 0406 	adc.w	r4, r4, r6
 800c72c:	f04f 0100 	mov.w	r1, #0
 800c730:	f04f 0200 	mov.w	r2, #0
 800c734:	02a2      	lsls	r2, r4, #10
 800c736:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c73a:	0299      	lsls	r1, r3, #10
 800c73c:	460b      	mov	r3, r1
 800c73e:	4614      	mov	r4, r2
 800c740:	4618      	mov	r0, r3
 800c742:	4621      	mov	r1, r4
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f04f 0400 	mov.w	r4, #0
 800c74a:	461a      	mov	r2, r3
 800c74c:	4623      	mov	r3, r4
 800c74e:	f7f4 fab3 	bl	8000cb8 <__aeabi_uldivmod>
 800c752:	4603      	mov	r3, r0
 800c754:	460c      	mov	r4, r1
 800c756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c758:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	0c1b      	lsrs	r3, r3, #16
 800c75e:	f003 0303 	and.w	r3, r3, #3
 800c762:	3301      	adds	r3, #1
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c770:	60bb      	str	r3, [r7, #8]
      break;
 800c772:	e002      	b.n	800c77a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c774:	4b04      	ldr	r3, [pc, #16]	; (800c788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c776:	60bb      	str	r3, [r7, #8]
      break;
 800c778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c77a:	68bb      	ldr	r3, [r7, #8]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c784:	40023800 	.word	0x40023800
 800c788:	00f42400 	.word	0x00f42400

0800c78c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c78c:	b480      	push	{r7}
 800c78e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c790:	4b03      	ldr	r3, [pc, #12]	; (800c7a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c792:	681b      	ldr	r3, [r3, #0]
}
 800c794:	4618      	mov	r0, r3
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20000000 	.word	0x20000000

0800c7a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7a8:	f7ff fff0 	bl	800c78c <HAL_RCC_GetHCLKFreq>
 800c7ac:	4601      	mov	r1, r0
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	0a9b      	lsrs	r3, r3, #10
 800c7b4:	f003 0307 	and.w	r3, r3, #7
 800c7b8:	4a03      	ldr	r2, [pc, #12]	; (800c7c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7ba:	5cd3      	ldrb	r3, [r2, r3]
 800c7bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	40023800 	.word	0x40023800
 800c7c8:	0801a200 	.word	0x0801a200

0800c7cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7d0:	f7ff ffdc 	bl	800c78c <HAL_RCC_GetHCLKFreq>
 800c7d4:	4601      	mov	r1, r0
 800c7d6:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	0b5b      	lsrs	r3, r3, #13
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	4a03      	ldr	r2, [pc, #12]	; (800c7f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7e2:	5cd3      	ldrb	r3, [r2, r3]
 800c7e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	40023800 	.word	0x40023800
 800c7f0:	0801a200 	.word	0x0801a200

0800c7f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00a      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c81c:	4b66      	ldr	r3, [pc, #408]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c822:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c82a:	4963      	ldr	r1, [pc, #396]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c83e:	4b5e      	ldr	r3, [pc, #376]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c844:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84c:	495a      	ldr	r1, [pc, #360]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10b      	bne.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d105      	bne.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c874:	2b00      	cmp	r3, #0
 800c876:	d075      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c878:	4b50      	ldr	r3, [pc, #320]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c87e:	f7fd fb33 	bl	8009ee8 <HAL_GetTick>
 800c882:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c884:	e008      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c886:	f7fd fb2f 	bl	8009ee8 <HAL_GetTick>
 800c88a:	4602      	mov	r2, r0
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	1ad3      	subs	r3, r2, r3
 800c890:	2b02      	cmp	r3, #2
 800c892:	d901      	bls.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c894:	2303      	movs	r3, #3
 800c896:	e1dc      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c898:	4b47      	ldr	r3, [pc, #284]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f0      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d009      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	019a      	lsls	r2, r3, #6
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	071b      	lsls	r3, r3, #28
 800c8bc:	493e      	ldr	r1, [pc, #248]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d01f      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8d0:	4b39      	ldr	r3, [pc, #228]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d6:	0f1b      	lsrs	r3, r3, #28
 800c8d8:	f003 0307 	and.w	r3, r3, #7
 800c8dc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	019a      	lsls	r2, r3, #6
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	061b      	lsls	r3, r3, #24
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	071b      	lsls	r3, r3, #28
 800c8f0:	4931      	ldr	r1, [pc, #196]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c8f8:	4b2f      	ldr	r3, [pc, #188]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8fe:	f023 021f 	bic.w	r2, r3, #31
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	3b01      	subs	r3, #1
 800c908:	492b      	ldr	r1, [pc, #172]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00d      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	019a      	lsls	r2, r3, #6
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	061b      	lsls	r3, r3, #24
 800c928:	431a      	orrs	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	071b      	lsls	r3, r3, #28
 800c930:	4921      	ldr	r1, [pc, #132]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c932:	4313      	orrs	r3, r2
 800c934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c938:	4b20      	ldr	r3, [pc, #128]	; (800c9bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c93a:	2201      	movs	r2, #1
 800c93c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c93e:	f7fd fad3 	bl	8009ee8 <HAL_GetTick>
 800c942:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c944:	e008      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c946:	f7fd facf 	bl	8009ee8 <HAL_GetTick>
 800c94a:	4602      	mov	r2, r0
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	2b02      	cmp	r3, #2
 800c952:	d901      	bls.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e17c      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c958:	4b17      	ldr	r3, [pc, #92]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0f0      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 0304 	and.w	r3, r3, #4
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d112      	bne.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10c      	bne.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 80ce 	beq.w	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c98e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c992:	f040 80c8 	bne.w	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c996:	4b0a      	ldr	r3, [pc, #40]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c99c:	f7fd faa4 	bl	8009ee8 <HAL_GetTick>
 800c9a0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9a2:	e00f      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c9a4:	f7fd faa0 	bl	8009ee8 <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d908      	bls.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e14d      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c9b6:	bf00      	nop
 800c9b8:	40023800 	.word	0x40023800
 800c9bc:	42470068 	.word	0x42470068
 800c9c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9c4:	4ba5      	ldr	r3, [pc, #660]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d0:	d0e8      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d02e      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c9de:	4b9f      	ldr	r3, [pc, #636]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9e4:	0c1b      	lsrs	r3, r3, #16
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9f0:	4b9a      	ldr	r3, [pc, #616]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9f6:	0f1b      	lsrs	r3, r3, #28
 800c9f8:	f003 0307 	and.w	r3, r3, #7
 800c9fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	019a      	lsls	r2, r3, #6
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	085b      	lsrs	r3, r3, #1
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	041b      	lsls	r3, r3, #16
 800ca0c:	431a      	orrs	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	061b      	lsls	r3, r3, #24
 800ca14:	431a      	orrs	r2, r3
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	071b      	lsls	r3, r3, #28
 800ca1a:	4990      	ldr	r1, [pc, #576]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca22:	4b8e      	ldr	r3, [pc, #568]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca30:	3b01      	subs	r3, #1
 800ca32:	021b      	lsls	r3, r3, #8
 800ca34:	4989      	ldr	r1, [pc, #548]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 0308 	and.w	r3, r3, #8
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d02c      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca48:	4b84      	ldr	r3, [pc, #528]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca4e:	0c1b      	lsrs	r3, r3, #16
 800ca50:	f003 0303 	and.w	r3, r3, #3
 800ca54:	3301      	adds	r3, #1
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca5a:	4b80      	ldr	r3, [pc, #512]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca60:	0e1b      	lsrs	r3, r3, #24
 800ca62:	f003 030f 	and.w	r3, r3, #15
 800ca66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	019a      	lsls	r2, r3, #6
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	085b      	lsrs	r3, r3, #1
 800ca72:	3b01      	subs	r3, #1
 800ca74:	041b      	lsls	r3, r3, #16
 800ca76:	431a      	orrs	r2, r3
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	061b      	lsls	r3, r3, #24
 800ca7c:	431a      	orrs	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	071b      	lsls	r3, r3, #28
 800ca84:	4975      	ldr	r1, [pc, #468]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca86:	4313      	orrs	r3, r2
 800ca88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ca8c:	4b73      	ldr	r3, [pc, #460]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	4970      	ldr	r1, [pc, #448]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d024      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cab6:	d11f      	bne.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cab8:	4b68      	ldr	r3, [pc, #416]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cabe:	0e1b      	lsrs	r3, r3, #24
 800cac0:	f003 030f 	and.w	r3, r3, #15
 800cac4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cac6:	4b65      	ldr	r3, [pc, #404]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cacc:	0f1b      	lsrs	r3, r3, #28
 800cace:	f003 0307 	and.w	r3, r3, #7
 800cad2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	019a      	lsls	r2, r3, #6
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	085b      	lsrs	r3, r3, #1
 800cae0:	3b01      	subs	r3, #1
 800cae2:	041b      	lsls	r3, r3, #16
 800cae4:	431a      	orrs	r2, r3
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	061b      	lsls	r3, r3, #24
 800caea:	431a      	orrs	r2, r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	071b      	lsls	r3, r3, #28
 800caf0:	495a      	ldr	r1, [pc, #360]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800caf8:	4b59      	ldr	r3, [pc, #356]	; (800cc60 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cafa:	2201      	movs	r2, #1
 800cafc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cafe:	f7fd f9f3 	bl	8009ee8 <HAL_GetTick>
 800cb02:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb04:	e008      	b.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cb06:	f7fd f9ef 	bl	8009ee8 <HAL_GetTick>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d901      	bls.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	e09c      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb18:	4b50      	ldr	r3, [pc, #320]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb24:	d1ef      	bne.n	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 0320 	and.w	r3, r3, #32
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 8083 	beq.w	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb34:	2300      	movs	r3, #0
 800cb36:	60bb      	str	r3, [r7, #8]
 800cb38:	4b48      	ldr	r3, [pc, #288]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3c:	4a47      	ldr	r2, [pc, #284]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb42:	6413      	str	r3, [r2, #64]	; 0x40
 800cb44:	4b45      	ldr	r3, [pc, #276]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb4c:	60bb      	str	r3, [r7, #8]
 800cb4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb50:	4b44      	ldr	r3, [pc, #272]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a43      	ldr	r2, [pc, #268]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb5a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb5c:	f7fd f9c4 	bl	8009ee8 <HAL_GetTick>
 800cb60:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb62:	e008      	b.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cb64:	f7fd f9c0 	bl	8009ee8 <HAL_GetTick>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d901      	bls.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e06d      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb76:	4b3b      	ldr	r3, [pc, #236]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0f0      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cb82:	4b36      	ldr	r3, [pc, #216]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb8a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d02f      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d028      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cba0:	4b2e      	ldr	r3, [pc, #184]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cba8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cbaa:	4b2f      	ldr	r3, [pc, #188]	; (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbac:	2201      	movs	r2, #1
 800cbae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cbb0:	4b2d      	ldr	r3, [pc, #180]	; (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cbb6:	4a29      	ldr	r2, [pc, #164]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cbbc:	4b27      	ldr	r3, [pc, #156]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d114      	bne.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cbc8:	f7fd f98e 	bl	8009ee8 <HAL_GetTick>
 800cbcc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbce:	e00a      	b.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbd0:	f7fd f98a 	bl	8009ee8 <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d901      	bls.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e035      	b.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbe6:	4b1d      	ldr	r3, [pc, #116]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0ee      	beq.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbfe:	d10d      	bne.n	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cc00:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc14:	4911      	ldr	r1, [pc, #68]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc16:	4313      	orrs	r3, r2
 800cc18:	608b      	str	r3, [r1, #8]
 800cc1a:	e005      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cc1c:	4b0f      	ldr	r3, [pc, #60]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	4a0e      	ldr	r2, [pc, #56]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc26:	6093      	str	r3, [r2, #8]
 800cc28:	4b0c      	ldr	r3, [pc, #48]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc34:	4909      	ldr	r1, [pc, #36]	; (800cc5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc36:	4313      	orrs	r3, r2
 800cc38:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0310 	and.w	r3, r3, #16
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cc4c:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cc4e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	40023800 	.word	0x40023800
 800cc60:	42470070 	.word	0x42470070
 800cc64:	40007000 	.word	0x40007000
 800cc68:	42470e40 	.word	0x42470e40
 800cc6c:	424711e0 	.word	0x424711e0

0800cc70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d075      	beq.n	800cd74 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cc88:	4ba2      	ldr	r3, [pc, #648]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	f003 030c 	and.w	r3, r3, #12
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d00c      	beq.n	800ccae <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc94:	4b9f      	ldr	r3, [pc, #636]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d112      	bne.n	800ccc6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cca0:	4b9c      	ldr	r3, [pc, #624]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccac:	d10b      	bne.n	800ccc6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccae:	4b99      	ldr	r3, [pc, #612]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d05b      	beq.n	800cd72 <HAL_RCC_OscConfig+0x102>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d157      	bne.n	800cd72 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e20b      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccce:	d106      	bne.n	800ccde <HAL_RCC_OscConfig+0x6e>
 800ccd0:	4b90      	ldr	r3, [pc, #576]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a8f      	ldr	r2, [pc, #572]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	e01d      	b.n	800cd1a <HAL_RCC_OscConfig+0xaa>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cce6:	d10c      	bne.n	800cd02 <HAL_RCC_OscConfig+0x92>
 800cce8:	4b8a      	ldr	r3, [pc, #552]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a89      	ldr	r2, [pc, #548]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	4b87      	ldr	r3, [pc, #540]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a86      	ldr	r2, [pc, #536]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ccfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	e00b      	b.n	800cd1a <HAL_RCC_OscConfig+0xaa>
 800cd02:	4b84      	ldr	r3, [pc, #528]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a83      	ldr	r2, [pc, #524]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	4b81      	ldr	r3, [pc, #516]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a80      	ldr	r2, [pc, #512]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d013      	beq.n	800cd4a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd22:	f7fd f8e1 	bl	8009ee8 <HAL_GetTick>
 800cd26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd28:	e008      	b.n	800cd3c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd2a:	f7fd f8dd 	bl	8009ee8 <HAL_GetTick>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	2b64      	cmp	r3, #100	; 0x64
 800cd36:	d901      	bls.n	800cd3c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	e1d0      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd3c:	4b75      	ldr	r3, [pc, #468]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0f0      	beq.n	800cd2a <HAL_RCC_OscConfig+0xba>
 800cd48:	e014      	b.n	800cd74 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd4a:	f7fd f8cd 	bl	8009ee8 <HAL_GetTick>
 800cd4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd50:	e008      	b.n	800cd64 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd52:	f7fd f8c9 	bl	8009ee8 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2b64      	cmp	r3, #100	; 0x64
 800cd5e:	d901      	bls.n	800cd64 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e1bc      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd64:	4b6b      	ldr	r3, [pc, #428]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1f0      	bne.n	800cd52 <HAL_RCC_OscConfig+0xe2>
 800cd70:	e000      	b.n	800cd74 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0302 	and.w	r3, r3, #2
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d063      	beq.n	800ce48 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cd80:	4b64      	ldr	r3, [pc, #400]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	f003 030c 	and.w	r3, r3, #12
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00b      	beq.n	800cda4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd8c:	4b61      	ldr	r3, [pc, #388]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cd94:	2b08      	cmp	r3, #8
 800cd96:	d11c      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd98:	4b5e      	ldr	r3, [pc, #376]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d116      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cda4:	4b5b      	ldr	r3, [pc, #364]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f003 0302 	and.w	r3, r3, #2
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d005      	beq.n	800cdbc <HAL_RCC_OscConfig+0x14c>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d001      	beq.n	800cdbc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e190      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdbc:	4b55      	ldr	r3, [pc, #340]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	4952      	ldr	r1, [pc, #328]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdd0:	e03a      	b.n	800ce48 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d020      	beq.n	800ce1c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cdda:	4b4f      	ldr	r3, [pc, #316]	; (800cf18 <HAL_RCC_OscConfig+0x2a8>)
 800cddc:	2201      	movs	r2, #1
 800cdde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde0:	f7fd f882 	bl	8009ee8 <HAL_GetTick>
 800cde4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cde6:	e008      	b.n	800cdfa <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cde8:	f7fd f87e 	bl	8009ee8 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e171      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdfa:	4b46      	ldr	r3, [pc, #280]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 0302 	and.w	r3, r3, #2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0f0      	beq.n	800cde8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce06:	4b43      	ldr	r3, [pc, #268]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	493f      	ldr	r1, [pc, #252]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ce16:	4313      	orrs	r3, r2
 800ce18:	600b      	str	r3, [r1, #0]
 800ce1a:	e015      	b.n	800ce48 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce1c:	4b3e      	ldr	r3, [pc, #248]	; (800cf18 <HAL_RCC_OscConfig+0x2a8>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce22:	f7fd f861 	bl	8009ee8 <HAL_GetTick>
 800ce26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce28:	e008      	b.n	800ce3c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce2a:	f7fd f85d 	bl	8009ee8 <HAL_GetTick>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d901      	bls.n	800ce3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	e150      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce3c:	4b35      	ldr	r3, [pc, #212]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 0302 	and.w	r3, r3, #2
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1f0      	bne.n	800ce2a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0308 	and.w	r3, r3, #8
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d030      	beq.n	800ceb6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d016      	beq.n	800ce8a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce5c:	4b2f      	ldr	r3, [pc, #188]	; (800cf1c <HAL_RCC_OscConfig+0x2ac>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce62:	f7fd f841 	bl	8009ee8 <HAL_GetTick>
 800ce66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce68:	e008      	b.n	800ce7c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce6a:	f7fd f83d 	bl	8009ee8 <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d901      	bls.n	800ce7c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e130      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce7c:	4b25      	ldr	r3, [pc, #148]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ce7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0f0      	beq.n	800ce6a <HAL_RCC_OscConfig+0x1fa>
 800ce88:	e015      	b.n	800ceb6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce8a:	4b24      	ldr	r3, [pc, #144]	; (800cf1c <HAL_RCC_OscConfig+0x2ac>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce90:	f7fd f82a 	bl	8009ee8 <HAL_GetTick>
 800ce94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce96:	e008      	b.n	800ceaa <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce98:	f7fd f826 	bl	8009ee8 <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d901      	bls.n	800ceaa <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e119      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ceaa:	4b1a      	ldr	r3, [pc, #104]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ceac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1f0      	bne.n	800ce98 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 809f 	beq.w	800d002 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cec4:	2300      	movs	r3, #0
 800cec6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cec8:	4b12      	ldr	r3, [pc, #72]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ceca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10f      	bne.n	800cef4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ced4:	2300      	movs	r3, #0
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	4b0e      	ldr	r3, [pc, #56]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800ceda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cedc:	4a0d      	ldr	r2, [pc, #52]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee2:	6413      	str	r3, [r2, #64]	; 0x40
 800cee4:	4b0b      	ldr	r3, [pc, #44]	; (800cf14 <HAL_RCC_OscConfig+0x2a4>)
 800cee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cef0:	2301      	movs	r3, #1
 800cef2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cef4:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <HAL_RCC_OscConfig+0x2b0>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d120      	bne.n	800cf42 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf00:	4b07      	ldr	r3, [pc, #28]	; (800cf20 <HAL_RCC_OscConfig+0x2b0>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a06      	ldr	r2, [pc, #24]	; (800cf20 <HAL_RCC_OscConfig+0x2b0>)
 800cf06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf0c:	f7fc ffec 	bl	8009ee8 <HAL_GetTick>
 800cf10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf12:	e010      	b.n	800cf36 <HAL_RCC_OscConfig+0x2c6>
 800cf14:	40023800 	.word	0x40023800
 800cf18:	42470000 	.word	0x42470000
 800cf1c:	42470e80 	.word	0x42470e80
 800cf20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf24:	f7fc ffe0 	bl	8009ee8 <HAL_GetTick>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d901      	bls.n	800cf36 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e0d3      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf36:	4b6c      	ldr	r3, [pc, #432]	; (800d0e8 <HAL_RCC_OscConfig+0x478>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0f0      	beq.n	800cf24 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d106      	bne.n	800cf58 <HAL_RCC_OscConfig+0x2e8>
 800cf4a:	4b68      	ldr	r3, [pc, #416]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4e:	4a67      	ldr	r2, [pc, #412]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf50:	f043 0301 	orr.w	r3, r3, #1
 800cf54:	6713      	str	r3, [r2, #112]	; 0x70
 800cf56:	e01c      	b.n	800cf92 <HAL_RCC_OscConfig+0x322>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	2b05      	cmp	r3, #5
 800cf5e:	d10c      	bne.n	800cf7a <HAL_RCC_OscConfig+0x30a>
 800cf60:	4b62      	ldr	r3, [pc, #392]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf64:	4a61      	ldr	r2, [pc, #388]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf66:	f043 0304 	orr.w	r3, r3, #4
 800cf6a:	6713      	str	r3, [r2, #112]	; 0x70
 800cf6c:	4b5f      	ldr	r3, [pc, #380]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf70:	4a5e      	ldr	r2, [pc, #376]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf72:	f043 0301 	orr.w	r3, r3, #1
 800cf76:	6713      	str	r3, [r2, #112]	; 0x70
 800cf78:	e00b      	b.n	800cf92 <HAL_RCC_OscConfig+0x322>
 800cf7a:	4b5c      	ldr	r3, [pc, #368]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf7e:	4a5b      	ldr	r2, [pc, #364]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf80:	f023 0301 	bic.w	r3, r3, #1
 800cf84:	6713      	str	r3, [r2, #112]	; 0x70
 800cf86:	4b59      	ldr	r3, [pc, #356]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8a:	4a58      	ldr	r2, [pc, #352]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cf8c:	f023 0304 	bic.w	r3, r3, #4
 800cf90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	689b      	ldr	r3, [r3, #8]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d015      	beq.n	800cfc6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf9a:	f7fc ffa5 	bl	8009ee8 <HAL_GetTick>
 800cf9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfa0:	e00a      	b.n	800cfb8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfa2:	f7fc ffa1 	bl	8009ee8 <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d901      	bls.n	800cfb8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e092      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfb8:	4b4c      	ldr	r3, [pc, #304]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d0ee      	beq.n	800cfa2 <HAL_RCC_OscConfig+0x332>
 800cfc4:	e014      	b.n	800cff0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfc6:	f7fc ff8f 	bl	8009ee8 <HAL_GetTick>
 800cfca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfcc:	e00a      	b.n	800cfe4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfce:	f7fc ff8b 	bl	8009ee8 <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d901      	bls.n	800cfe4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e07c      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfe4:	4b41      	ldr	r3, [pc, #260]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cfe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe8:	f003 0302 	and.w	r3, r3, #2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1ee      	bne.n	800cfce <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d105      	bne.n	800d002 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cff6:	4b3d      	ldr	r3, [pc, #244]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	4a3c      	ldr	r2, [pc, #240]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800cffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d000:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d068      	beq.n	800d0dc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d00a:	4b38      	ldr	r3, [pc, #224]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	f003 030c 	and.w	r3, r3, #12
 800d012:	2b08      	cmp	r3, #8
 800d014:	d060      	beq.n	800d0d8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d145      	bne.n	800d0aa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d01e:	4b34      	ldr	r3, [pc, #208]	; (800d0f0 <HAL_RCC_OscConfig+0x480>)
 800d020:	2200      	movs	r2, #0
 800d022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d024:	f7fc ff60 	bl	8009ee8 <HAL_GetTick>
 800d028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d02a:	e008      	b.n	800d03e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d02c:	f7fc ff5c 	bl	8009ee8 <HAL_GetTick>
 800d030:	4602      	mov	r2, r0
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	2b02      	cmp	r3, #2
 800d038:	d901      	bls.n	800d03e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d03a:	2303      	movs	r3, #3
 800d03c:	e04f      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d03e:	4b2b      	ldr	r3, [pc, #172]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1f0      	bne.n	800d02c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69da      	ldr	r2, [r3, #28]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	431a      	orrs	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d058:	019b      	lsls	r3, r3, #6
 800d05a:	431a      	orrs	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d060:	085b      	lsrs	r3, r3, #1
 800d062:	3b01      	subs	r3, #1
 800d064:	041b      	lsls	r3, r3, #16
 800d066:	431a      	orrs	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	061b      	lsls	r3, r3, #24
 800d06e:	431a      	orrs	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d074:	071b      	lsls	r3, r3, #28
 800d076:	491d      	ldr	r1, [pc, #116]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800d078:	4313      	orrs	r3, r2
 800d07a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d07c:	4b1c      	ldr	r3, [pc, #112]	; (800d0f0 <HAL_RCC_OscConfig+0x480>)
 800d07e:	2201      	movs	r2, #1
 800d080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d082:	f7fc ff31 	bl	8009ee8 <HAL_GetTick>
 800d086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d088:	e008      	b.n	800d09c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d08a:	f7fc ff2d 	bl	8009ee8 <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d901      	bls.n	800d09c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e020      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d09c:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0f0      	beq.n	800d08a <HAL_RCC_OscConfig+0x41a>
 800d0a8:	e018      	b.n	800d0dc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0aa:	4b11      	ldr	r3, [pc, #68]	; (800d0f0 <HAL_RCC_OscConfig+0x480>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0b0:	f7fc ff1a 	bl	8009ee8 <HAL_GetTick>
 800d0b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0b6:	e008      	b.n	800d0ca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0b8:	f7fc ff16 	bl	8009ee8 <HAL_GetTick>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b02      	cmp	r3, #2
 800d0c4:	d901      	bls.n	800d0ca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	e009      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0ca:	4b08      	ldr	r3, [pc, #32]	; (800d0ec <HAL_RCC_OscConfig+0x47c>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1f0      	bne.n	800d0b8 <HAL_RCC_OscConfig+0x448>
 800d0d6:	e001      	b.n	800d0dc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e000      	b.n	800d0de <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	40007000 	.word	0x40007000
 800d0ec:	40023800 	.word	0x40023800
 800d0f0:	42470060 	.word	0x42470060

0800d0f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	e022      	b.n	800d14c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d105      	bne.n	800d11e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2200      	movs	r2, #0
 800d116:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7fa f865 	bl	80071e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2203      	movs	r2, #3
 800d122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f814 	bl	800d154 <HAL_SD_InitCard>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e00a      	b.n	800d14c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d154:	b5b0      	push	{r4, r5, r7, lr}
 800d156:	b08e      	sub	sp, #56	; 0x38
 800d158:	af04      	add	r7, sp, #16
 800d15a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d15c:	2300      	movs	r3, #0
 800d15e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d160:	2300      	movs	r3, #0
 800d162:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d164:	2300      	movs	r3, #0
 800d166:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d168:	2300      	movs	r3, #0
 800d16a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d170:	2376      	movs	r3, #118	; 0x76
 800d172:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681d      	ldr	r5, [r3, #0]
 800d178:	466c      	mov	r4, sp
 800d17a:	f107 0314 	add.w	r3, r7, #20
 800d17e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d186:	f107 0308 	add.w	r3, r7, #8
 800d18a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d18c:	4628      	mov	r0, r5
 800d18e:	f003 fa87 	bl	80106a0 <SDIO_Init>
 800d192:	4603      	mov	r3, r0
 800d194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e031      	b.n	800d208 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d1a4:	4b1a      	ldr	r3, [pc, #104]	; (800d210 <HAL_SD_InitCard+0xbc>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f003 fabf 	bl	8010732 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d1b4:	4b16      	ldr	r3, [pc, #88]	; (800d210 <HAL_SD_InitCard+0xbc>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 ffc6 	bl	800e14c <SD_PowerON>
 800d1c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	431a      	orrs	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e013      	b.n	800d208 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fee5 	bl	800dfb0 <SD_InitCard>
 800d1e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00b      	beq.n	800d206 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	e000      	b.n	800d208 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3728      	adds	r7, #40	; 0x28
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bdb0      	pop	{r4, r5, r7, pc}
 800d210:	422580a0 	.word	0x422580a0

0800d214 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08c      	sub	sp, #48	; 0x30
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d107      	bne.n	800d23c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d230:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e0c7      	b.n	800d3cc <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b01      	cmp	r3, #1
 800d246:	f040 80c0 	bne.w	800d3ca <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	441a      	add	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d907      	bls.n	800d26e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	e0ae      	b.n	800d3cc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2203      	movs	r2, #3
 800d272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2200      	movs	r2, #0
 800d27c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d28c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d292:	4a50      	ldr	r2, [pc, #320]	; (800d3d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	4a4f      	ldr	r2, [pc, #316]	; (800d3d8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d29c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	3380      	adds	r3, #128	; 0x80
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	025b      	lsls	r3, r3, #9
 800d2b8:	089b      	lsrs	r3, r3, #2
 800d2ba:	f7fd fc07 	bl	800aacc <HAL_DMA_Start_IT>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d017      	beq.n	800d2f4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d2d2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a40      	ldr	r2, [pc, #256]	; (800d3dc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d2da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e06b      	b.n	800d3cc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d2f4:	4b3a      	ldr	r3, [pc, #232]	; (800d3e0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d002      	beq.n	800d308 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	025b      	lsls	r3, r3, #9
 800d306:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d310:	4618      	mov	r0, r3
 800d312:	f003 faa1 	bl	8010858 <SDMMC_CmdBlockLength>
 800d316:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00f      	beq.n	800d33e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a2e      	ldr	r2, [pc, #184]	; (800d3dc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d324:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	431a      	orrs	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2201      	movs	r2, #1
 800d336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e046      	b.n	800d3cc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d33e:	f04f 33ff 	mov.w	r3, #4294967295
 800d342:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	025b      	lsls	r3, r3, #9
 800d348:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d34a:	2390      	movs	r3, #144	; 0x90
 800d34c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d34e:	2302      	movs	r3, #2
 800d350:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d352:	2300      	movs	r3, #0
 800d354:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d356:	2301      	movs	r3, #1
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f107 0210 	add.w	r2, r7, #16
 800d362:	4611      	mov	r1, r2
 800d364:	4618      	mov	r0, r3
 800d366:	f003 fa4b 	bl	8010800 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d90a      	bls.n	800d386 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2282      	movs	r2, #130	; 0x82
 800d374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d37c:	4618      	mov	r0, r3
 800d37e:	f003 faaf 	bl	80108e0 <SDMMC_CmdReadMultiBlock>
 800d382:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d384:	e009      	b.n	800d39a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2281      	movs	r2, #129	; 0x81
 800d38a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d392:	4618      	mov	r0, r3
 800d394:	f003 fa82 	bl	801089c <SDMMC_CmdReadSingleBlock>
 800d398:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d012      	beq.n	800d3c6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a0d      	ldr	r2, [pc, #52]	; (800d3dc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e002      	b.n	800d3cc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e000      	b.n	800d3cc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3ca:	2302      	movs	r3, #2
  }
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3730      	adds	r7, #48	; 0x30
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	0800ddbf 	.word	0x0800ddbf
 800d3d8:	0800de31 	.word	0x0800de31
 800d3dc:	004005ff 	.word	0x004005ff
 800d3e0:	4225858c 	.word	0x4225858c

0800d3e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08c      	sub	sp, #48	; 0x30
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
 800d3f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d107      	bne.n	800d40c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	e0ca      	b.n	800d5a2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b01      	cmp	r3, #1
 800d416:	f040 80c3 	bne.w	800d5a0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	441a      	add	r2, r3
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d907      	bls.n	800d43e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d432:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e0b1      	b.n	800d5a2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2203      	movs	r2, #3
 800d442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2200      	movs	r2, #0
 800d44c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f042 021a 	orr.w	r2, r2, #26
 800d45c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d462:	4a52      	ldr	r2, [pc, #328]	; (800d5ac <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46a:	4a51      	ldr	r2, [pc, #324]	; (800d5b0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d46c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d472:	2200      	movs	r2, #0
 800d474:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d002      	beq.n	800d484 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	025b      	lsls	r3, r3, #9
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d48c:	4618      	mov	r0, r3
 800d48e:	f003 f9e3 	bl	8010858 <SDMMC_CmdBlockLength>
 800d492:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00f      	beq.n	800d4ba <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a45      	ldr	r2, [pc, #276]	; (800d5b4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e073      	b.n	800d5a2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d90a      	bls.n	800d4d6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	22a0      	movs	r2, #160	; 0xa0
 800d4c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f003 fa4b 	bl	8010968 <SDMMC_CmdWriteMultiBlock>
 800d4d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4d4:	e009      	b.n	800d4ea <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2290      	movs	r2, #144	; 0x90
 800d4da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f003 fa1e 	bl	8010924 <SDMMC_CmdWriteSingleBlock>
 800d4e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d012      	beq.n	800d516 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a2f      	ldr	r2, [pc, #188]	; (800d5b4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	431a      	orrs	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	e045      	b.n	800d5a2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d516:	4b28      	ldr	r3, [pc, #160]	; (800d5b8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d518:	2201      	movs	r2, #1
 800d51a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d520:	68b9      	ldr	r1, [r7, #8]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3380      	adds	r3, #128	; 0x80
 800d528:	461a      	mov	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	025b      	lsls	r3, r3, #9
 800d52e:	089b      	lsrs	r3, r3, #2
 800d530:	f7fd facc 	bl	800aacc <HAL_DMA_Start_IT>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d01a      	beq.n	800d570 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f022 021a 	bic.w	r2, r2, #26
 800d548:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a19      	ldr	r2, [pc, #100]	; (800d5b4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d56c:	2301      	movs	r3, #1
 800d56e:	e018      	b.n	800d5a2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d570:	f04f 33ff 	mov.w	r3, #4294967295
 800d574:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	025b      	lsls	r3, r3, #9
 800d57a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d57c:	2390      	movs	r3, #144	; 0x90
 800d57e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d580:	2300      	movs	r3, #0
 800d582:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d584:	2300      	movs	r3, #0
 800d586:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d588:	2301      	movs	r3, #1
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f107 0210 	add.w	r2, r7, #16
 800d594:	4611      	mov	r1, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f003 f932 	bl	8010800 <SDIO_ConfigData>

      return HAL_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e000      	b.n	800d5a2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5a0:	2302      	movs	r3, #2
  }
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3730      	adds	r7, #48	; 0x30
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	0800dd95 	.word	0x0800dd95
 800d5b0:	0800de31 	.word	0x0800de31
 800d5b4:	004005ff 	.word	0x004005ff
 800d5b8:	4225858c 	.word	0x4225858c

0800d5bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d008      	beq.n	800d5ea <HAL_SD_IRQHandler+0x2e>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f003 0308 	and.w	r3, r3, #8
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 ffc8 	bl	800e578 <SD_Read_IT>
 800d5e8:	e155      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f000 808f 	beq.w	800d718 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d602:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	6812      	ldr	r2, [r2, #0]
 800d60e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d612:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d616:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f022 0201 	bic.w	r2, r2, #1
 800d626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d039      	beq.n	800d6a6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f003 0302 	and.w	r3, r3, #2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d104      	bne.n	800d646 <HAL_SD_IRQHandler+0x8a>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f003 0320 	and.w	r3, r3, #32
 800d642:	2b00      	cmp	r3, #0
 800d644:	d011      	beq.n	800d66a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f003 f9ae 	bl	80109ac <SDMMC_CmdStopTransfer>
 800d650:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d008      	beq.n	800d66a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	431a      	orrs	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f91f 	bl	800d8a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d672:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <HAL_SD_IRQHandler+0xda>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f003 0302 	and.w	r3, r3, #2
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f003 fe04 	bl	80112a4 <HAL_SD_RxCpltCallback>
 800d69c:	e0fb      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f003 fdf6 	bl	8011290 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6a4:	e0f7      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 80f2 	beq.w	800d896 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d011      	beq.n	800d6e0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f003 f973 	bl	80109ac <SDMMC_CmdStopTransfer>
 800d6c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d008      	beq.n	800d6e0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	431a      	orrs	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 f8e4 	bl	800d8a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f040 80d5 	bne.w	800d896 <HAL_SD_IRQHandler+0x2da>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f003 0302 	and.w	r3, r3, #2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f040 80cf 	bne.w	800d896 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f022 0208 	bic.w	r2, r2, #8
 800d706:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f003 fdbd 	bl	8011290 <HAL_SD_TxCpltCallback>
}
 800d716:	e0be      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d008      	beq.n	800d738 <HAL_SD_IRQHandler+0x17c>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 ff72 	bl	800e61a <SD_Write_IT>
 800d736:	e0ae      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d742:	2b00      	cmp	r3, #0
 800d744:	f000 80a7 	beq.w	800d896 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74e:	f003 0302 	and.w	r3, r3, #2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d005      	beq.n	800d762 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	f043 0202 	orr.w	r2, r3, #2
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d768:	f003 0308 	and.w	r3, r3, #8
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d005      	beq.n	800d77c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d774:	f043 0208 	orr.w	r2, r3, #8
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d782:	f003 0320 	and.w	r3, r3, #32
 800d786:	2b00      	cmp	r3, #0
 800d788:	d005      	beq.n	800d796 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78e:	f043 0220 	orr.w	r2, r3, #32
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79c:	f003 0310 	and.w	r3, r3, #16
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	f043 0210 	orr.w	r2, r3, #16
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7c8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f003 f8ec 	bl	80109ac <SDMMC_CmdStopTransfer>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f003 0308 	and.w	r3, r3, #8
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f855 	bl	800d8a8 <HAL_SD_ErrorCallback>
}
 800d7fe:	e04a      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d806:	2b00      	cmp	r3, #0
 800d808:	d045      	beq.n	800d896 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f003 0310 	and.w	r3, r3, #16
 800d810:	2b00      	cmp	r3, #0
 800d812:	d104      	bne.n	800d81e <HAL_SD_IRQHandler+0x262>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f003 0320 	and.w	r3, r3, #32
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d011      	beq.n	800d842 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d822:	4a1f      	ldr	r2, [pc, #124]	; (800d8a0 <HAL_SD_IRQHandler+0x2e4>)
 800d824:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fd f9a6 	bl	800ab7c <HAL_DMA_Abort_IT>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d02f      	beq.n	800d896 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fb4a 	bl	800ded4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d840:	e029      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f003 0301 	and.w	r3, r3, #1
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d104      	bne.n	800d856 <HAL_SD_IRQHandler+0x29a>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d011      	beq.n	800d87a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85a:	4a12      	ldr	r2, [pc, #72]	; (800d8a4 <HAL_SD_IRQHandler+0x2e8>)
 800d85c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d862:	4618      	mov	r0, r3
 800d864:	f7fd f98a 	bl	800ab7c <HAL_DMA_Abort_IT>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d013      	beq.n	800d896 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	4618      	mov	r0, r3
 800d874:	f000 fb65 	bl	800df42 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d878:	e00d      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f003 fcf4 	bl	801127c <HAL_SD_AbortCallback>
}
 800d894:	e7ff      	b.n	800d896 <HAL_SD_IRQHandler+0x2da>
 800d896:	bf00      	nop
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	0800ded5 	.word	0x0800ded5
 800d8a4:	0800df43 	.word	0x0800df43

0800d8a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ca:	0f9b      	lsrs	r3, r3, #30
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8d6:	0e9b      	lsrs	r3, r3, #26
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f003 030f 	and.w	r3, r3, #15
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e8:	0e1b      	lsrs	r3, r3, #24
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8fa:	0c1b      	lsrs	r3, r3, #16
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d906:	0a1b      	lsrs	r3, r3, #8
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d912:	b2da      	uxtb	r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d91c:	0d1b      	lsrs	r3, r3, #20
 800d91e:	b29a      	uxth	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d928:	0c1b      	lsrs	r3, r3, #16
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f003 030f 	and.w	r3, r3, #15
 800d930:	b2da      	uxtb	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93a:	0bdb      	lsrs	r3, r3, #15
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d94c:	0b9b      	lsrs	r3, r3, #14
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	b2da      	uxtb	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d95e:	0b5b      	lsrs	r3, r3, #13
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	b2da      	uxtb	r2, r3
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d970:	0b1b      	lsrs	r3, r3, #12
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2200      	movs	r2, #0
 800d982:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d163      	bne.n	800da54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d990:	009a      	lsls	r2, r3, #2
 800d992:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d996:	4013      	ands	r3, r2
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d99c:	0f92      	lsrs	r2, r2, #30
 800d99e:	431a      	orrs	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a8:	0edb      	lsrs	r3, r3, #27
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0307 	and.w	r3, r3, #7
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ba:	0e1b      	lsrs	r3, r3, #24
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9cc:	0d5b      	lsrs	r3, r3, #21
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	f003 0307 	and.w	r3, r3, #7
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9de:	0c9b      	lsrs	r3, r3, #18
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f0:	0bdb      	lsrs	r3, r3, #15
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 0307 	and.w	r3, r3, #7
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	7e1b      	ldrb	r3, [r3, #24]
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 0307 	and.w	r3, r3, #7
 800da12:	3302      	adds	r3, #2
 800da14:	2201      	movs	r2, #1
 800da16:	fa02 f303 	lsl.w	r3, r2, r3
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da1e:	fb02 f203 	mul.w	r2, r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	7a1b      	ldrb	r3, [r3, #8]
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 030f 	and.w	r3, r3, #15
 800da30:	2201      	movs	r2, #1
 800da32:	409a      	lsls	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da40:	0a52      	lsrs	r2, r2, #9
 800da42:	fb02 f203 	mul.w	r2, r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da50:	661a      	str	r2, [r3, #96]	; 0x60
 800da52:	e031      	b.n	800dab8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d11d      	bne.n	800da98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da60:	041b      	lsls	r3, r3, #16
 800da62:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da6a:	0c1b      	lsrs	r3, r3, #16
 800da6c:	431a      	orrs	r2, r3
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	3301      	adds	r3, #1
 800da78:	029a      	lsls	r2, r3, #10
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da8c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	661a      	str	r2, [r3, #96]	; 0x60
 800da96:	e00f      	b.n	800dab8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a58      	ldr	r2, [pc, #352]	; (800dc00 <HAL_SD_GetCardCSD+0x344>)
 800da9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	e09d      	b.n	800dbf4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabc:	0b9b      	lsrs	r3, r3, #14
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dace:	09db      	lsrs	r3, r3, #7
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf0:	0fdb      	lsrs	r3, r3, #31
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafc:	0f5b      	lsrs	r3, r3, #29
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	f003 0303 	and.w	r3, r3, #3
 800db04:	b2da      	uxtb	r2, r3
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db0e:	0e9b      	lsrs	r3, r3, #26
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f003 0307 	and.w	r3, r3, #7
 800db16:	b2da      	uxtb	r2, r3
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db20:	0d9b      	lsrs	r3, r3, #22
 800db22:	b2db      	uxtb	r3, r3
 800db24:	f003 030f 	and.w	r3, r3, #15
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db32:	0d5b      	lsrs	r3, r3, #21
 800db34:	b2db      	uxtb	r3, r3
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db4e:	0c1b      	lsrs	r3, r3, #16
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db62:	0bdb      	lsrs	r3, r3, #15
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db76:	0b9b      	lsrs	r3, r3, #14
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8a:	0b5b      	lsrs	r3, r3, #13
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9e:	0b1b      	lsrs	r3, r3, #12
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb2:	0a9b      	lsrs	r3, r3, #10
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0303 	and.w	r3, r3, #3
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	0a1b      	lsrs	r3, r3, #8
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0303 	and.w	r3, r3, #3
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbda:	085b      	lsrs	r3, r3, #1
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	2201      	movs	r2, #1
 800dbee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr
 800dc00:	004005ff 	.word	0x004005ff

0800dc04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc5c:	b5b0      	push	{r4, r5, r7, lr}
 800dc5e:	b08e      	sub	sp, #56	; 0x38
 800dc60:	af04      	add	r7, sp, #16
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2203      	movs	r2, #3
 800dc6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d02e      	beq.n	800dcd4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc7c:	d106      	bne.n	800dc8c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	639a      	str	r2, [r3, #56]	; 0x38
 800dc8a:	e029      	b.n	800dce0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc92:	d10a      	bne.n	800dcaa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fb0f 	bl	800e2b8 <SD_WideBus_Enable>
 800dc9a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	431a      	orrs	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	639a      	str	r2, [r3, #56]	; 0x38
 800dca8:	e01a      	b.n	800dce0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10a      	bne.n	800dcc6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fb4c 	bl	800e34e <SD_WideBus_Disable>
 800dcb6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
 800dcc4:	e00c      	b.n	800dce0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	639a      	str	r2, [r3, #56]	; 0x38
 800dcd2:	e005      	b.n	800dce0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d009      	beq.n	800dcfc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a18      	ldr	r2, [pc, #96]	; (800dd50 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dcee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e024      	b.n	800dd46 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681d      	ldr	r5, [r3, #0]
 800dd22:	466c      	mov	r4, sp
 800dd24:	f107 0318 	add.w	r3, r7, #24
 800dd28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd30:	f107 030c 	add.w	r3, r7, #12
 800dd34:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd36:	4628      	mov	r0, r5
 800dd38:	f002 fcb2 	bl	80106a0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3728      	adds	r7, #40	; 0x28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	004005ff 	.word	0x004005ff

0800dd54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dd60:	f107 030c 	add.w	r3, r7, #12
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fa7e 	bl	800e268 <SD_SendStatus>
 800dd6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d005      	beq.n	800dd80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	431a      	orrs	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	0a5b      	lsrs	r3, r3, #9
 800dd84:	f003 030f 	and.w	r3, r3, #15
 800dd88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd8a:	693b      	ldr	r3, [r7, #16]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddb0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ddb2:	bf00      	nop
 800ddb4:	3714      	adds	r7, #20
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b084      	sub	sp, #16
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd0:	2b82      	cmp	r3, #130	; 0x82
 800ddd2:	d111      	bne.n	800ddf8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f002 fde7 	bl	80109ac <SDMMC_CmdStopTransfer>
 800ddde:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d008      	beq.n	800ddf8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	431a      	orrs	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7ff fd58 	bl	800d8a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f022 0208 	bic.w	r2, r2, #8
 800de06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f240 523a 	movw	r2, #1338	; 0x53a
 800de10:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2201      	movs	r2, #1
 800de16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2200      	movs	r2, #0
 800de1e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f003 fa3f 	bl	80112a4 <HAL_SD_RxCpltCallback>
#endif
}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
	...

0800de30 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7fd f848 	bl	800aed4 <HAL_DMA_GetError>
 800de44:	4603      	mov	r3, r0
 800de46:	2b02      	cmp	r3, #2
 800de48:	d03e      	beq.n	800dec8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de50:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de58:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d002      	beq.n	800de66 <SD_DMAError+0x36>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2b01      	cmp	r3, #1
 800de64:	d12d      	bne.n	800dec2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a19      	ldr	r2, [pc, #100]	; (800ded0 <SD_DMAError+0xa0>)
 800de6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800de7c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800de8a:	6978      	ldr	r0, [r7, #20]
 800de8c:	f7ff ff62 	bl	800dd54 <HAL_SD_GetCardState>
 800de90:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2b06      	cmp	r3, #6
 800de96:	d002      	beq.n	800de9e <SD_DMAError+0x6e>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b05      	cmp	r3, #5
 800de9c:	d10a      	bne.n	800deb4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f002 fd82 	bl	80109ac <SDMMC_CmdStopTransfer>
 800dea8:	4602      	mov	r2, r0
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deae:	431a      	orrs	r2, r3
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2200      	movs	r2, #0
 800dec0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dec2:	6978      	ldr	r0, [r7, #20]
 800dec4:	f7ff fcf0 	bl	800d8a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dec8:	bf00      	nop
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	004005ff 	.word	0x004005ff

0800ded4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f240 523a 	movw	r2, #1338	; 0x53a
 800deea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f7ff ff31 	bl	800dd54 <HAL_SD_GetCardState>
 800def2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2201      	movs	r2, #1
 800def8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b06      	cmp	r3, #6
 800df06:	d002      	beq.n	800df0e <SD_DMATxAbort+0x3a>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b05      	cmp	r3, #5
 800df0c:	d10a      	bne.n	800df24 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4618      	mov	r0, r3
 800df14:	f002 fd4a 	bl	80109ac <SDMMC_CmdStopTransfer>
 800df18:	4602      	mov	r2, r0
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1e:	431a      	orrs	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d103      	bne.n	800df34 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f003 f9a5 	bl	801127c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df32:	e002      	b.n	800df3a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7ff fcb7 	bl	800d8a8 <HAL_SD_ErrorCallback>
}
 800df3a:	bf00      	nop
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f240 523a 	movw	r2, #1338	; 0x53a
 800df58:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff fefa 	bl	800dd54 <HAL_SD_GetCardState>
 800df60:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2b06      	cmp	r3, #6
 800df74:	d002      	beq.n	800df7c <SD_DMARxAbort+0x3a>
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b05      	cmp	r3, #5
 800df7a:	d10a      	bne.n	800df92 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4618      	mov	r0, r3
 800df82:	f002 fd13 	bl	80109ac <SDMMC_CmdStopTransfer>
 800df86:	4602      	mov	r2, r0
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8c:	431a      	orrs	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df96:	2b00      	cmp	r3, #0
 800df98:	d103      	bne.n	800dfa2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f003 f96e 	bl	801127c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dfa0:	e002      	b.n	800dfa8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f7ff fc80 	bl	800d8a8 <HAL_SD_ErrorCallback>
}
 800dfa8:	bf00      	nop
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfb0:	b5b0      	push	{r4, r5, r7, lr}
 800dfb2:	b094      	sub	sp, #80	; 0x50
 800dfb4:	af04      	add	r7, sp, #16
 800dfb6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f002 fbc5 	bl	8010750 <SDIO_GetPowerState>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d102      	bne.n	800dfd2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dfd0:	e0b7      	b.n	800e142 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d02f      	beq.n	800e03a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f002 fdee 	bl	8010bc0 <SDMMC_CmdSendCID>
 800dfe4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <SD_InitCard+0x40>
    {
      return errorstate;
 800dfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfee:	e0a8      	b.n	800e142 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f002 fbef 	bl	80107da <SDIO_GetResponse>
 800dffc:	4602      	mov	r2, r0
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2104      	movs	r1, #4
 800e008:	4618      	mov	r0, r3
 800e00a:	f002 fbe6 	bl	80107da <SDIO_GetResponse>
 800e00e:	4602      	mov	r2, r0
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2108      	movs	r1, #8
 800e01a:	4618      	mov	r0, r3
 800e01c:	f002 fbdd 	bl	80107da <SDIO_GetResponse>
 800e020:	4602      	mov	r2, r0
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	210c      	movs	r1, #12
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 fbd4 	bl	80107da <SDIO_GetResponse>
 800e032:	4602      	mov	r2, r0
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d00d      	beq.n	800e05e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f107 020e 	add.w	r2, r7, #14
 800e04a:	4611      	mov	r1, r2
 800e04c:	4618      	mov	r0, r3
 800e04e:	f002 fdf4 	bl	8010c3a <SDMMC_CmdSetRelAdd>
 800e052:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <SD_InitCard+0xae>
    {
      return errorstate;
 800e05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05c:	e071      	b.n	800e142 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e062:	2b03      	cmp	r3, #3
 800e064:	d036      	beq.n	800e0d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e066:	89fb      	ldrh	r3, [r7, #14]
 800e068:	461a      	mov	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e076:	041b      	lsls	r3, r3, #16
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f002 fdbe 	bl	8010bfc <SDMMC_CmdSendCSD>
 800e080:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <SD_InitCard+0xdc>
    {
      return errorstate;
 800e088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08a:	e05a      	b.n	800e142 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2100      	movs	r1, #0
 800e092:	4618      	mov	r0, r3
 800e094:	f002 fba1 	bl	80107da <SDIO_GetResponse>
 800e098:	4602      	mov	r2, r0
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2104      	movs	r1, #4
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f002 fb98 	bl	80107da <SDIO_GetResponse>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2108      	movs	r1, #8
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f002 fb8f 	bl	80107da <SDIO_GetResponse>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	210c      	movs	r1, #12
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f002 fb86 	bl	80107da <SDIO_GetResponse>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2104      	movs	r1, #4
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f002 fb7d 	bl	80107da <SDIO_GetResponse>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	0d1a      	lsrs	r2, r3, #20
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0e8:	f107 0310 	add.w	r3, r7, #16
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff fbe4 	bl	800d8bc <HAL_SD_GetCardCSD>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d002      	beq.n	800e100 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0fe:	e020      	b.n	800e142 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6819      	ldr	r1, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e108:	041b      	lsls	r3, r3, #16
 800e10a:	f04f 0400 	mov.w	r4, #0
 800e10e:	461a      	mov	r2, r3
 800e110:	4623      	mov	r3, r4
 800e112:	4608      	mov	r0, r1
 800e114:	f002 fc6c 	bl	80109f0 <SDMMC_CmdSelDesel>
 800e118:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <SD_InitCard+0x174>
  {
    return errorstate;
 800e120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e122:	e00e      	b.n	800e142 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681d      	ldr	r5, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	466c      	mov	r4, sp
 800e12c:	f103 0210 	add.w	r2, r3, #16
 800e130:	ca07      	ldmia	r2, {r0, r1, r2}
 800e132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e136:	3304      	adds	r3, #4
 800e138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e13a:	4628      	mov	r0, r5
 800e13c:	f002 fab0 	bl	80106a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3740      	adds	r7, #64	; 0x40
 800e146:	46bd      	mov	sp, r7
 800e148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e14c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e154:	2300      	movs	r3, #0
 800e156:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e158:	2300      	movs	r3, #0
 800e15a:	617b      	str	r3, [r7, #20]
 800e15c:	2300      	movs	r3, #0
 800e15e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4618      	mov	r0, r3
 800e166:	f002 fc66 	bl	8010a36 <SDMMC_CmdGoIdleState>
 800e16a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	e072      	b.n	800e25c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f002 fc79 	bl	8010a72 <SDMMC_CmdOperCond>
 800e180:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00d      	beq.n	800e1a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4618      	mov	r0, r3
 800e194:	f002 fc4f 	bl	8010a36 <SDMMC_CmdGoIdleState>
 800e198:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d004      	beq.n	800e1aa <SD_PowerON+0x5e>
    {
      return errorstate;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	e05b      	b.n	800e25c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d137      	bne.n	800e222 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f002 fc79 	bl	8010ab0 <SDMMC_CmdAppCommand>
 800e1be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02d      	beq.n	800e222 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1ca:	e047      	b.n	800e25c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f002 fc6c 	bl	8010ab0 <SDMMC_CmdAppCommand>
 800e1d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d001      	beq.n	800e1e4 <SD_PowerON+0x98>
    {
      return errorstate;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	e03b      	b.n	800e25c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	491e      	ldr	r1, [pc, #120]	; (800e264 <SD_PowerON+0x118>)
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f002 fc82 	bl	8010af4 <SDMMC_CmdAppOperCommand>
 800e1f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1fc:	e02e      	b.n	800e25c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2100      	movs	r1, #0
 800e204:	4618      	mov	r0, r3
 800e206:	f002 fae8 	bl	80107da <SDIO_GetResponse>
 800e20a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	0fdb      	lsrs	r3, r3, #31
 800e210:	2b01      	cmp	r3, #1
 800e212:	d101      	bne.n	800e218 <SD_PowerON+0xcc>
 800e214:	2301      	movs	r3, #1
 800e216:	e000      	b.n	800e21a <SD_PowerON+0xce>
 800e218:	2300      	movs	r3, #0
 800e21a:	613b      	str	r3, [r7, #16]

    count++;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	3301      	adds	r3, #1
 800e220:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e228:	4293      	cmp	r3, r2
 800e22a:	d802      	bhi.n	800e232 <SD_PowerON+0xe6>
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d0cc      	beq.n	800e1cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e238:	4293      	cmp	r3, r2
 800e23a:	d902      	bls.n	800e242 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e23c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e240:	e00c      	b.n	800e25c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d003      	beq.n	800e254 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	645a      	str	r2, [r3, #68]	; 0x44
 800e252:	e002      	b.n	800e25a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e25a:	2300      	movs	r3, #0
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	c1100000 	.word	0xc1100000

0800e268 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d102      	bne.n	800e27e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e27c:	e018      	b.n	800e2b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e286:	041b      	lsls	r3, r3, #16
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f002 fcf6 	bl	8010c7c <SDMMC_CmdSendStatus>
 800e290:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d001      	beq.n	800e29c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	e009      	b.n	800e2b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f002 fa99 	bl	80107da <SDIO_GetResponse>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3710      	adds	r7, #16
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f002 fa83 	bl	80107da <SDIO_GetResponse>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2de:	d102      	bne.n	800e2e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2e4:	e02f      	b.n	800e346 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e2e6:	f107 030c 	add.w	r3, r7, #12
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f879 	bl	800e3e4 <SD_FindSCR>
 800e2f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	e023      	b.n	800e346 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e304:	2b00      	cmp	r3, #0
 800e306:	d01c      	beq.n	800e342 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e310:	041b      	lsls	r3, r3, #16
 800e312:	4619      	mov	r1, r3
 800e314:	4610      	mov	r0, r2
 800e316:	f002 fbcb 	bl	8010ab0 <SDMMC_CmdAppCommand>
 800e31a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	e00f      	b.n	800e346 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2102      	movs	r1, #2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f002 fc04 	bl	8010b3a <SDMMC_CmdBusWidth>
 800e332:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	e003      	b.n	800e346 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e33e:	2300      	movs	r3, #0
 800e340:	e001      	b.n	800e346 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e342:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b086      	sub	sp, #24
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e356:	2300      	movs	r3, #0
 800e358:	60fb      	str	r3, [r7, #12]
 800e35a:	2300      	movs	r3, #0
 800e35c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2100      	movs	r1, #0
 800e364:	4618      	mov	r0, r3
 800e366:	f002 fa38 	bl	80107da <SDIO_GetResponse>
 800e36a:	4603      	mov	r3, r0
 800e36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e374:	d102      	bne.n	800e37c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e37a:	e02f      	b.n	800e3dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e37c:	f107 030c 	add.w	r3, r7, #12
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 f82e 	bl	800e3e4 <SD_FindSCR>
 800e388:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d001      	beq.n	800e394 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	e023      	b.n	800e3dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d01c      	beq.n	800e3d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3a6:	041b      	lsls	r3, r3, #16
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	f002 fb80 	bl	8010ab0 <SDMMC_CmdAppCommand>
 800e3b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	e00f      	b.n	800e3dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f002 fbb9 	bl	8010b3a <SDMMC_CmdBusWidth>
 800e3c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	e003      	b.n	800e3dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e001      	b.n	800e3dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3718      	adds	r7, #24
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b08f      	sub	sp, #60	; 0x3c
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e3ee:	f7fb fd7b 	bl	8009ee8 <HAL_GetTick>
 800e3f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	60bb      	str	r3, [r7, #8]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2108      	movs	r1, #8
 800e40a:	4618      	mov	r0, r3
 800e40c:	f002 fa24 	bl	8010858 <SDMMC_CmdBlockLength>
 800e410:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e414:	2b00      	cmp	r3, #0
 800e416:	d001      	beq.n	800e41c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41a:	e0a9      	b.n	800e570 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e424:	041b      	lsls	r3, r3, #16
 800e426:	4619      	mov	r1, r3
 800e428:	4610      	mov	r0, r2
 800e42a:	f002 fb41 	bl	8010ab0 <SDMMC_CmdAppCommand>
 800e42e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e438:	e09a      	b.n	800e570 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e43a:	f04f 33ff 	mov.w	r3, #4294967295
 800e43e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e440:	2308      	movs	r3, #8
 800e442:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e444:	2330      	movs	r3, #48	; 0x30
 800e446:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e448:	2302      	movs	r3, #2
 800e44a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e450:	2301      	movs	r3, #1
 800e452:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f107 0210 	add.w	r2, r7, #16
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f002 f9ce 	bl	8010800 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4618      	mov	r0, r3
 800e46a:	f002 fb88 	bl	8010b7e <SDMMC_CmdSendSCR>
 800e46e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	2b00      	cmp	r3, #0
 800e474:	d022      	beq.n	800e4bc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	e07a      	b.n	800e570 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00e      	beq.n	800e4a6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6819      	ldr	r1, [r3, #0]
 800e48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	f107 0208 	add.w	r2, r7, #8
 800e494:	18d4      	adds	r4, r2, r3
 800e496:	4608      	mov	r0, r1
 800e498:	f002 f92d 	bl	80106f6 <SDIO_ReadFIFO>
 800e49c:	4603      	mov	r3, r0
 800e49e:	6023      	str	r3, [r4, #0]
      index++;
 800e4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4a6:	f7fb fd1f 	bl	8009ee8 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d102      	bne.n	800e4bc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4ba:	e059      	b.n	800e570 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4c2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d0d6      	beq.n	800e47a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d2:	f003 0308 	and.w	r3, r3, #8
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d005      	beq.n	800e4e6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2208      	movs	r2, #8
 800e4e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4e2:	2308      	movs	r3, #8
 800e4e4:	e044      	b.n	800e570 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ec:	f003 0302 	and.w	r3, r3, #2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d005      	beq.n	800e500 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2202      	movs	r2, #2
 800e4fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4fc:	2302      	movs	r3, #2
 800e4fe:	e037      	b.n	800e570 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e506:	f003 0320 	and.w	r3, r3, #32
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d005      	beq.n	800e51a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2220      	movs	r2, #32
 800e514:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e516:	2320      	movs	r3, #32
 800e518:	e02a      	b.n	800e570 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e522:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	061a      	lsls	r2, r3, #24
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	021b      	lsls	r3, r3, #8
 800e52c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e530:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	0a1b      	lsrs	r3, r3, #8
 800e536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e53a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	0e1b      	lsrs	r3, r3, #24
 800e540:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	601a      	str	r2, [r3, #0]
    scr++;
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	3304      	adds	r3, #4
 800e54a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	061a      	lsls	r2, r3, #24
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	021b      	lsls	r3, r3, #8
 800e554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e558:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	0a1b      	lsrs	r3, r3, #8
 800e55e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e562:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	0e1b      	lsrs	r3, r3, #24
 800e568:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	373c      	adds	r7, #60	; 0x3c
 800e574:	46bd      	mov	sp, r7
 800e576:	bd90      	pop	{r4, r7, pc}

0800e578 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e584:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d03f      	beq.n	800e612 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e592:	2300      	movs	r3, #0
 800e594:	617b      	str	r3, [r7, #20]
 800e596:	e033      	b.n	800e600 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f002 f8aa 	bl	80106f6 <SDIO_ReadFIFO>
 800e5a2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	b2da      	uxtb	r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	0a1b      	lsrs	r3, r3, #8
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	0c1b      	lsrs	r3, r3, #16
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	0e1b      	lsrs	r3, r3, #24
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	617b      	str	r3, [r7, #20]
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	2b07      	cmp	r3, #7
 800e604:	d9c8      	bls.n	800e598 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e612:	bf00      	nop
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b086      	sub	sp, #24
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d043      	beq.n	800e6bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e634:	2300      	movs	r3, #0
 800e636:	617b      	str	r3, [r7, #20]
 800e638:	e037      	b.n	800e6aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	3301      	adds	r3, #1
 800e644:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	3b01      	subs	r3, #1
 800e64a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	021a      	lsls	r2, r3, #8
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	4313      	orrs	r3, r2
 800e656:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3301      	adds	r3, #1
 800e65c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	3b01      	subs	r3, #1
 800e662:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	041a      	lsls	r2, r3, #16
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	3301      	adds	r3, #1
 800e674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	3b01      	subs	r3, #1
 800e67a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	061a      	lsls	r2, r3, #24
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	4313      	orrs	r3, r2
 800e686:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3301      	adds	r3, #1
 800e68c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	3b01      	subs	r3, #1
 800e692:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f107 0208 	add.w	r2, r7, #8
 800e69c:	4611      	mov	r1, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f002 f836 	bl	8010710 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	617b      	str	r3, [r7, #20]
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	2b07      	cmp	r3, #7
 800e6ae:	d9c4      	bls.n	800e63a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e6bc:	bf00      	nop
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e056      	b.n	800e784 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d106      	bne.n	800e6f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7f8 fe6b 	bl	80073cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e70c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	431a      	orrs	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	431a      	orrs	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	431a      	orrs	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	695b      	ldr	r3, [r3, #20]
 800e728:	431a      	orrs	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e732:	431a      	orrs	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	69db      	ldr	r3, [r3, #28]
 800e738:	431a      	orrs	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a1b      	ldr	r3, [r3, #32]
 800e73e:	ea42 0103 	orr.w	r1, r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	430a      	orrs	r2, r1
 800e74c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	0c1b      	lsrs	r3, r3, #16
 800e754:	f003 0104 	and.w	r1, r3, #4
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	430a      	orrs	r2, r1
 800e762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	69da      	ldr	r2, [r3, #28]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b088      	sub	sp, #32
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	4613      	mov	r3, r2
 800e79a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d101      	bne.n	800e7ae <HAL_SPI_Transmit+0x22>
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	e11e      	b.n	800e9ec <HAL_SPI_Transmit+0x260>
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7b6:	f7fb fb97 	bl	8009ee8 <HAL_GetTick>
 800e7ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e7bc:	88fb      	ldrh	r3, [r7, #6]
 800e7be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d002      	beq.n	800e7d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7d0:	e103      	b.n	800e9da <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <HAL_SPI_Transmit+0x52>
 800e7d8:	88fb      	ldrh	r3, [r7, #6]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d102      	bne.n	800e7e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7e2:	e0fa      	b.n	800e9da <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2203      	movs	r2, #3
 800e7e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	88fa      	ldrh	r2, [r7, #6]
 800e7fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	88fa      	ldrh	r2, [r7, #6]
 800e802:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2200      	movs	r2, #0
 800e80e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2200      	movs	r2, #0
 800e81a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2200      	movs	r2, #0
 800e820:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e82a:	d107      	bne.n	800e83c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e83a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e846:	2b40      	cmp	r3, #64	; 0x40
 800e848:	d007      	beq.n	800e85a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e862:	d14b      	bne.n	800e8fc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d002      	beq.n	800e872 <HAL_SPI_Transmit+0xe6>
 800e86c:	8afb      	ldrh	r3, [r7, #22]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d13e      	bne.n	800e8f0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e876:	881a      	ldrh	r2, [r3, #0]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e882:	1c9a      	adds	r2, r3, #2
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	3b01      	subs	r3, #1
 800e890:	b29a      	uxth	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e896:	e02b      	b.n	800e8f0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f003 0302 	and.w	r3, r3, #2
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d112      	bne.n	800e8cc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	881a      	ldrh	r2, [r3, #0]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b6:	1c9a      	adds	r2, r3, #2
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e8ca:	e011      	b.n	800e8f0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8cc:	f7fb fb0c 	bl	8009ee8 <HAL_GetTick>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	1ad3      	subs	r3, r2, r3
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d803      	bhi.n	800e8e4 <HAL_SPI_Transmit+0x158>
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e2:	d102      	bne.n	800e8ea <HAL_SPI_Transmit+0x15e>
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e8ee:	e074      	b.n	800e9da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1ce      	bne.n	800e898 <HAL_SPI_Transmit+0x10c>
 800e8fa:	e04c      	b.n	800e996 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <HAL_SPI_Transmit+0x17e>
 800e904:	8afb      	ldrh	r3, [r7, #22]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d140      	bne.n	800e98c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	330c      	adds	r3, #12
 800e914:	7812      	ldrb	r2, [r2, #0]
 800e916:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e926:	b29b      	uxth	r3, r3
 800e928:	3b01      	subs	r3, #1
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e930:	e02c      	b.n	800e98c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	f003 0302 	and.w	r3, r3, #2
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d113      	bne.n	800e968 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	330c      	adds	r3, #12
 800e94a:	7812      	ldrb	r2, [r2, #0]
 800e94c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e952:	1c5a      	adds	r2, r3, #1
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	3b01      	subs	r3, #1
 800e960:	b29a      	uxth	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	86da      	strh	r2, [r3, #54]	; 0x36
 800e966:	e011      	b.n	800e98c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e968:	f7fb fabe 	bl	8009ee8 <HAL_GetTick>
 800e96c:	4602      	mov	r2, r0
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d803      	bhi.n	800e980 <HAL_SPI_Transmit+0x1f4>
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97e:	d102      	bne.n	800e986 <HAL_SPI_Transmit+0x1fa>
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d102      	bne.n	800e98c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e986:	2303      	movs	r3, #3
 800e988:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e98a:	e026      	b.n	800e9da <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e990:	b29b      	uxth	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1cd      	bne.n	800e932 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	6839      	ldr	r1, [r7, #0]
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 fba4 	bl	800f0e8 <SPI_EndRxTxTransaction>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d002      	beq.n	800e9ac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2220      	movs	r2, #32
 800e9aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10a      	bne.n	800e9ca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	613b      	str	r3, [r7, #16]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	613b      	str	r3, [r7, #16]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	77fb      	strb	r3, [r7, #31]
 800e9d6:	e000      	b.n	800e9da <HAL_SPI_Transmit+0x24e>
  }

error:
 800e9d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3720      	adds	r7, #32
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b088      	sub	sp, #32
 800e9f8:	af02      	add	r7, sp, #8
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	603b      	str	r3, [r7, #0]
 800ea00:	4613      	mov	r3, r2
 800ea02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea10:	d112      	bne.n	800ea38 <HAL_SPI_Receive+0x44>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d10e      	bne.n	800ea38 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2204      	movs	r2, #4
 800ea1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea22:	88fa      	ldrh	r2, [r7, #6]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	68b9      	ldr	r1, [r7, #8]
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f000 f8e9 	bl	800ec06 <HAL_SPI_TransmitReceive>
 800ea34:	4603      	mov	r3, r0
 800ea36:	e0e2      	b.n	800ebfe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d101      	bne.n	800ea46 <HAL_SPI_Receive+0x52>
 800ea42:	2302      	movs	r3, #2
 800ea44:	e0db      	b.n	800ebfe <HAL_SPI_Receive+0x20a>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea4e:	f7fb fa4b 	bl	8009ee8 <HAL_GetTick>
 800ea52:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d002      	beq.n	800ea66 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ea60:	2302      	movs	r3, #2
 800ea62:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea64:	e0c2      	b.n	800ebec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <HAL_SPI_Receive+0x7e>
 800ea6c:	88fb      	ldrh	r3, [r7, #6]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d102      	bne.n	800ea78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ea72:	2301      	movs	r3, #1
 800ea74:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea76:	e0b9      	b.n	800ebec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2204      	movs	r2, #4
 800ea7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2200      	movs	r2, #0
 800ea84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	88fa      	ldrh	r2, [r7, #6]
 800ea90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	88fa      	ldrh	r2, [r7, #6]
 800ea96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eabe:	d107      	bne.n	800ead0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eace:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eada:	2b40      	cmp	r3, #64	; 0x40
 800eadc:	d007      	beq.n	800eaee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eaec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d162      	bne.n	800ebbc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eaf6:	e02e      	b.n	800eb56 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d115      	bne.n	800eb32 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f103 020c 	add.w	r2, r3, #12
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb12:	7812      	ldrb	r2, [r2, #0]
 800eb14:	b2d2      	uxtb	r2, r2
 800eb16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1c:	1c5a      	adds	r2, r3, #1
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb30:	e011      	b.n	800eb56 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb32:	f7fb f9d9 	bl	8009ee8 <HAL_GetTick>
 800eb36:	4602      	mov	r2, r0
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d803      	bhi.n	800eb4a <HAL_SPI_Receive+0x156>
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb48:	d102      	bne.n	800eb50 <HAL_SPI_Receive+0x15c>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d102      	bne.n	800eb56 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800eb50:	2303      	movs	r3, #3
 800eb52:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb54:	e04a      	b.n	800ebec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1cb      	bne.n	800eaf8 <HAL_SPI_Receive+0x104>
 800eb60:	e031      	b.n	800ebc6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	f003 0301 	and.w	r3, r3, #1
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d113      	bne.n	800eb98 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68da      	ldr	r2, [r3, #12]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb82:	1c9a      	adds	r2, r3, #2
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	3b01      	subs	r3, #1
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb96:	e011      	b.n	800ebbc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb98:	f7fb f9a6 	bl	8009ee8 <HAL_GetTick>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d803      	bhi.n	800ebb0 <HAL_SPI_Receive+0x1bc>
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebae:	d102      	bne.n	800ebb6 <HAL_SPI_Receive+0x1c2>
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d102      	bne.n	800ebbc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ebb6:	2303      	movs	r3, #3
 800ebb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ebba:	e017      	b.n	800ebec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1cd      	bne.n	800eb62 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f000 fa27 	bl	800f01e <SPI_EndRxTransaction>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2220      	movs	r2, #32
 800ebda:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	75fb      	strb	r3, [r7, #23]
 800ebe8:	e000      	b.n	800ebec <HAL_SPI_Receive+0x1f8>
  }

error :
 800ebea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b08c      	sub	sp, #48	; 0x30
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	60b9      	str	r1, [r7, #8]
 800ec10:	607a      	str	r2, [r7, #4]
 800ec12:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec14:	2301      	movs	r3, #1
 800ec16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d101      	bne.n	800ec2c <HAL_SPI_TransmitReceive+0x26>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e18a      	b.n	800ef42 <HAL_SPI_TransmitReceive+0x33c>
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec34:	f7fb f958 	bl	8009ee8 <HAL_GetTick>
 800ec38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ec4a:	887b      	ldrh	r3, [r7, #2]
 800ec4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d00f      	beq.n	800ec76 <HAL_SPI_TransmitReceive+0x70>
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec5c:	d107      	bne.n	800ec6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d103      	bne.n	800ec6e <HAL_SPI_TransmitReceive+0x68>
 800ec66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec6a:	2b04      	cmp	r3, #4
 800ec6c:	d003      	beq.n	800ec76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec74:	e15b      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d005      	beq.n	800ec88 <HAL_SPI_TransmitReceive+0x82>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <HAL_SPI_TransmitReceive+0x82>
 800ec82:	887b      	ldrh	r3, [r7, #2]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d103      	bne.n	800ec90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec8e:	e14e      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	2b04      	cmp	r3, #4
 800ec9a:	d003      	beq.n	800eca4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2205      	movs	r2, #5
 800eca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	887a      	ldrh	r2, [r7, #2]
 800ecb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	887a      	ldrh	r2, [r7, #2]
 800ecba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	887a      	ldrh	r2, [r7, #2]
 800ecc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	887a      	ldrh	r2, [r7, #2]
 800eccc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece4:	2b40      	cmp	r3, #64	; 0x40
 800ece6:	d007      	beq.n	800ecf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed00:	d178      	bne.n	800edf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d002      	beq.n	800ed10 <HAL_SPI_TransmitReceive+0x10a>
 800ed0a:	8b7b      	ldrh	r3, [r7, #26]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d166      	bne.n	800edde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed14:	881a      	ldrh	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed20:	1c9a      	adds	r2, r3, #2
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed34:	e053      	b.n	800edde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	f003 0302 	and.w	r3, r3, #2
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d11b      	bne.n	800ed7c <HAL_SPI_TransmitReceive+0x176>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d016      	beq.n	800ed7c <HAL_SPI_TransmitReceive+0x176>
 800ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d113      	bne.n	800ed7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed58:	881a      	ldrh	r2, [r3, #0]
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed64:	1c9a      	adds	r2, r3, #2
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	3b01      	subs	r3, #1
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d119      	bne.n	800edbe <HAL_SPI_TransmitReceive+0x1b8>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d014      	beq.n	800edbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68da      	ldr	r2, [r3, #12]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed9e:	b292      	uxth	r2, r2
 800eda0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda6:	1c9a      	adds	r2, r3, #2
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	3b01      	subs	r3, #1
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edba:	2301      	movs	r3, #1
 800edbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800edbe:	f7fb f893 	bl	8009ee8 <HAL_GetTick>
 800edc2:	4602      	mov	r2, r0
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edca:	429a      	cmp	r2, r3
 800edcc:	d807      	bhi.n	800edde <HAL_SPI_TransmitReceive+0x1d8>
 800edce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd4:	d003      	beq.n	800edde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800edd6:	2303      	movs	r3, #3
 800edd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eddc:	e0a7      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1a6      	bne.n	800ed36 <HAL_SPI_TransmitReceive+0x130>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edec:	b29b      	uxth	r3, r3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1a1      	bne.n	800ed36 <HAL_SPI_TransmitReceive+0x130>
 800edf2:	e07c      	b.n	800eeee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <HAL_SPI_TransmitReceive+0x1fc>
 800edfc:	8b7b      	ldrh	r3, [r7, #26]
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d16b      	bne.n	800eeda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	330c      	adds	r3, #12
 800ee0c:	7812      	ldrb	r2, [r2, #0]
 800ee0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	3b01      	subs	r3, #1
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee28:	e057      	b.n	800eeda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	f003 0302 	and.w	r3, r3, #2
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	d11c      	bne.n	800ee72 <HAL_SPI_TransmitReceive+0x26c>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d017      	beq.n	800ee72 <HAL_SPI_TransmitReceive+0x26c>
 800ee42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d114      	bne.n	800ee72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	330c      	adds	r3, #12
 800ee52:	7812      	ldrb	r2, [r2, #0]
 800ee54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	3b01      	subs	r3, #1
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d119      	bne.n	800eeb4 <HAL_SPI_TransmitReceive+0x2ae>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d014      	beq.n	800eeb4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68da      	ldr	r2, [r3, #12]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee94:	b2d2      	uxtb	r2, r2
 800ee96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eeb4:	f7fb f818 	bl	8009ee8 <HAL_GetTick>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d803      	bhi.n	800eecc <HAL_SPI_TransmitReceive+0x2c6>
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeca:	d102      	bne.n	800eed2 <HAL_SPI_TransmitReceive+0x2cc>
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d103      	bne.n	800eeda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eed2:	2303      	movs	r3, #3
 800eed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eed8:	e029      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eede:	b29b      	uxth	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1a2      	bne.n	800ee2a <HAL_SPI_TransmitReceive+0x224>
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d19d      	bne.n	800ee2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eeee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f000 f8f8 	bl	800f0e8 <SPI_EndRxTxTransaction>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d006      	beq.n	800ef0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800eefe:	2301      	movs	r3, #1
 800ef00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2220      	movs	r2, #32
 800ef08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ef0a:	e010      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d10b      	bne.n	800ef2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef14:	2300      	movs	r3, #0
 800ef16:	617b      	str	r3, [r7, #20]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	617b      	str	r3, [r7, #20]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	e000      	b.n	800ef2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ef2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2201      	movs	r2, #1
 800ef32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3730      	adds	r7, #48	; 0x30
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b084      	sub	sp, #16
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	60b9      	str	r1, [r7, #8]
 800ef54:	603b      	str	r3, [r7, #0]
 800ef56:	4613      	mov	r3, r2
 800ef58:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef5a:	e04c      	b.n	800eff6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef62:	d048      	beq.n	800eff6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ef64:	f7fa ffc0 	bl	8009ee8 <HAL_GetTick>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d902      	bls.n	800ef7a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d13d      	bne.n	800eff6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ef88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef92:	d111      	bne.n	800efb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef9c:	d004      	beq.n	800efa8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efa6:	d107      	bne.n	800efb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efc0:	d10f      	bne.n	800efe2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800efd0:	601a      	str	r2, [r3, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800efe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2201      	movs	r2, #1
 800efe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2200      	movs	r2, #0
 800efee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800eff2:	2303      	movs	r3, #3
 800eff4:	e00f      	b.n	800f016 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	689a      	ldr	r2, [r3, #8]
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	4013      	ands	r3, r2
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	429a      	cmp	r2, r3
 800f004:	bf0c      	ite	eq
 800f006:	2301      	moveq	r3, #1
 800f008:	2300      	movne	r3, #0
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	461a      	mov	r2, r3
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	429a      	cmp	r2, r3
 800f012:	d1a3      	bne.n	800ef5c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b086      	sub	sp, #24
 800f022:	af02      	add	r7, sp, #8
 800f024:	60f8      	str	r0, [r7, #12]
 800f026:	60b9      	str	r1, [r7, #8]
 800f028:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f032:	d111      	bne.n	800f058 <SPI_EndRxTransaction+0x3a>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f03c:	d004      	beq.n	800f048 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f046:	d107      	bne.n	800f058 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f056:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f060:	d12a      	bne.n	800f0b8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f06a:	d012      	beq.n	800f092 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	2200      	movs	r2, #0
 800f074:	2180      	movs	r1, #128	; 0x80
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f7ff ff67 	bl	800ef4a <SPI_WaitFlagStateUntilTimeout>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d02d      	beq.n	800f0de <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f086:	f043 0220 	orr.w	r2, r3, #32
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f08e:	2303      	movs	r3, #3
 800f090:	e026      	b.n	800f0e0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	2200      	movs	r2, #0
 800f09a:	2101      	movs	r1, #1
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f7ff ff54 	bl	800ef4a <SPI_WaitFlagStateUntilTimeout>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d01a      	beq.n	800f0de <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ac:	f043 0220 	orr.w	r2, r3, #32
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0b4:	2303      	movs	r3, #3
 800f0b6:	e013      	b.n	800f0e0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff ff41 	bl	800ef4a <SPI_WaitFlagStateUntilTimeout>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d007      	beq.n	800f0de <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d2:	f043 0220 	orr.w	r2, r3, #32
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f0da:	2303      	movs	r3, #3
 800f0dc:	e000      	b.n	800f0e0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af02      	add	r7, sp, #8
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f0f4:	4b1b      	ldr	r3, [pc, #108]	; (800f164 <SPI_EndRxTxTransaction+0x7c>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a1b      	ldr	r2, [pc, #108]	; (800f168 <SPI_EndRxTxTransaction+0x80>)
 800f0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f0fe:	0d5b      	lsrs	r3, r3, #21
 800f100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f104:	fb02 f303 	mul.w	r3, r2, r3
 800f108:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f112:	d112      	bne.n	800f13a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	9300      	str	r3, [sp, #0]
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	2200      	movs	r2, #0
 800f11c:	2180      	movs	r1, #128	; 0x80
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff ff13 	bl	800ef4a <SPI_WaitFlagStateUntilTimeout>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d016      	beq.n	800f158 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f12e:	f043 0220 	orr.w	r2, r3, #32
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f136:	2303      	movs	r3, #3
 800f138:	e00f      	b.n	800f15a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00a      	beq.n	800f156 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	3b01      	subs	r3, #1
 800f144:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f150:	2b80      	cmp	r3, #128	; 0x80
 800f152:	d0f2      	beq.n	800f13a <SPI_EndRxTxTransaction+0x52>
 800f154:	e000      	b.n	800f158 <SPI_EndRxTxTransaction+0x70>
        break;
 800f156:	bf00      	nop
  }

  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	20000000 	.word	0x20000000
 800f168:	165e9f81 	.word	0x165e9f81

0800f16c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e01d      	b.n	800f1ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f184:	b2db      	uxtb	r3, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d106      	bne.n	800f198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7f8 f9d6 	bl	8007544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2202      	movs	r2, #2
 800f19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	f000 fb56 	bl	800f85c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b085      	sub	sp, #20
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68da      	ldr	r2, [r3, #12]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f042 0201 	orr.w	r2, r2, #1
 800f1d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	f003 0307 	and.w	r3, r3, #7
 800f1e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2b06      	cmp	r3, #6
 800f1ea:	d007      	beq.n	800f1fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f042 0201 	orr.w	r2, r2, #1
 800f1fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3714      	adds	r7, #20
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d101      	bne.n	800f21c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f218:	2301      	movs	r3, #1
 800f21a:	e01d      	b.n	800f258 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	d106      	bne.n	800f236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7f8 f913 	bl	800745c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2202      	movs	r2, #2
 800f23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	3304      	adds	r3, #4
 800f246:	4619      	mov	r1, r3
 800f248:	4610      	mov	r0, r2
 800f24a:	f000 fb07 	bl	800f85c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2201      	movs	r2, #1
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	4618      	mov	r0, r3
 800f274:	f000 fd42 	bl	800fcfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a15      	ldr	r2, [pc, #84]	; (800f2d4 <HAL_TIM_PWM_Start+0x74>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d004      	beq.n	800f28c <HAL_TIM_PWM_Start+0x2c>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a14      	ldr	r2, [pc, #80]	; (800f2d8 <HAL_TIM_PWM_Start+0x78>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d101      	bne.n	800f290 <HAL_TIM_PWM_Start+0x30>
 800f28c:	2301      	movs	r3, #1
 800f28e:	e000      	b.n	800f292 <HAL_TIM_PWM_Start+0x32>
 800f290:	2300      	movs	r3, #0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d007      	beq.n	800f2a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f2a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	f003 0307 	and.w	r3, r3, #7
 800f2b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2b06      	cmp	r3, #6
 800f2b6:	d007      	beq.n	800f2c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f042 0201 	orr.w	r2, r2, #1
 800f2c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	40010000 	.word	0x40010000
 800f2d8:	40010400 	.word	0x40010400

0800f2dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b086      	sub	sp, #24
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d101      	bne.n	800f2f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e083      	b.n	800f3f8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d106      	bne.n	800f30a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f7f8 f9ad 	bl	8007664 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2202      	movs	r2, #2
 800f30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	6812      	ldr	r2, [r2, #0]
 800f31c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f320:	f023 0307 	bic.w	r3, r3, #7
 800f324:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3304      	adds	r3, #4
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f000 fa93 	bl	800f85c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6a1b      	ldr	r3, [r3, #32]
 800f34c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	697a      	ldr	r2, [r7, #20]
 800f354:	4313      	orrs	r3, r2
 800f356:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f35e:	f023 0303 	bic.w	r3, r3, #3
 800f362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	689a      	ldr	r2, [r3, #8]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	021b      	lsls	r3, r3, #8
 800f36e:	4313      	orrs	r3, r2
 800f370:	693a      	ldr	r2, [r7, #16]
 800f372:	4313      	orrs	r3, r2
 800f374:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f37c:	f023 030c 	bic.w	r3, r3, #12
 800f380:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f38c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	68da      	ldr	r2, [r3, #12]
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	69db      	ldr	r3, [r3, #28]
 800f396:	021b      	lsls	r3, r3, #8
 800f398:	4313      	orrs	r3, r2
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	011a      	lsls	r2, r3, #4
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	6a1b      	ldr	r3, [r3, #32]
 800f3aa:	031b      	lsls	r3, r3, #12
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	693a      	ldr	r2, [r7, #16]
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f3ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f3c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	011b      	lsls	r3, r3, #4
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3718      	adds	r7, #24
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <HAL_TIM_Encoder_Start+0x16>
 800f410:	2b04      	cmp	r3, #4
 800f412:	d008      	beq.n	800f426 <HAL_TIM_Encoder_Start+0x26>
 800f414:	e00f      	b.n	800f436 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2201      	movs	r2, #1
 800f41c:	2100      	movs	r1, #0
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fc6c 	bl	800fcfc <TIM_CCxChannelCmd>
      break;
 800f424:	e016      	b.n	800f454 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2201      	movs	r2, #1
 800f42c:	2104      	movs	r1, #4
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 fc64 	bl	800fcfc <TIM_CCxChannelCmd>
      break;
 800f434:	e00e      	b.n	800f454 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2201      	movs	r2, #1
 800f43c:	2100      	movs	r1, #0
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fc5c 	bl	800fcfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2201      	movs	r2, #1
 800f44a:	2104      	movs	r1, #4
 800f44c:	4618      	mov	r0, r3
 800f44e:	f000 fc55 	bl	800fcfc <TIM_CCxChannelCmd>
      break;
 800f452:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f042 0201 	orr.w	r2, r2, #1
 800f462:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b082      	sub	sp, #8
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b02      	cmp	r3, #2
 800f482:	d122      	bne.n	800f4ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	f003 0302 	and.w	r3, r3, #2
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d11b      	bne.n	800f4ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f06f 0202 	mvn.w	r2, #2
 800f49a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	699b      	ldr	r3, [r3, #24]
 800f4a8:	f003 0303 	and.w	r3, r3, #3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 f9b5 	bl	800f820 <HAL_TIM_IC_CaptureCallback>
 800f4b6:	e005      	b.n	800f4c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f9a7 	bl	800f80c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 f9b8 	bl	800f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	691b      	ldr	r3, [r3, #16]
 800f4d0:	f003 0304 	and.w	r3, r3, #4
 800f4d4:	2b04      	cmp	r3, #4
 800f4d6:	d122      	bne.n	800f51e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	f003 0304 	and.w	r3, r3, #4
 800f4e2:	2b04      	cmp	r3, #4
 800f4e4:	d11b      	bne.n	800f51e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f06f 0204 	mvn.w	r2, #4
 800f4ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	699b      	ldr	r3, [r3, #24]
 800f4fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f500:	2b00      	cmp	r3, #0
 800f502:	d003      	beq.n	800f50c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 f98b 	bl	800f820 <HAL_TIM_IC_CaptureCallback>
 800f50a:	e005      	b.n	800f518 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f97d 	bl	800f80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f98e 	bl	800f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	f003 0308 	and.w	r3, r3, #8
 800f528:	2b08      	cmp	r3, #8
 800f52a:	d122      	bne.n	800f572 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f003 0308 	and.w	r3, r3, #8
 800f536:	2b08      	cmp	r3, #8
 800f538:	d11b      	bne.n	800f572 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f06f 0208 	mvn.w	r2, #8
 800f542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2204      	movs	r2, #4
 800f548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	69db      	ldr	r3, [r3, #28]
 800f550:	f003 0303 	and.w	r3, r3, #3
 800f554:	2b00      	cmp	r3, #0
 800f556:	d003      	beq.n	800f560 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f961 	bl	800f820 <HAL_TIM_IC_CaptureCallback>
 800f55e:	e005      	b.n	800f56c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f953 	bl	800f80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 f964 	bl	800f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	f003 0310 	and.w	r3, r3, #16
 800f57c:	2b10      	cmp	r3, #16
 800f57e:	d122      	bne.n	800f5c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	f003 0310 	and.w	r3, r3, #16
 800f58a:	2b10      	cmp	r3, #16
 800f58c:	d11b      	bne.n	800f5c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f06f 0210 	mvn.w	r2, #16
 800f596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2208      	movs	r2, #8
 800f59c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d003      	beq.n	800f5b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 f937 	bl	800f820 <HAL_TIM_IC_CaptureCallback>
 800f5b2:	e005      	b.n	800f5c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f929 	bl	800f80c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f000 f93a 	bl	800f834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d10e      	bne.n	800f5f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d107      	bne.n	800f5f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f06f 0201 	mvn.w	r2, #1
 800f5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7f6 fd23 	bl	8006038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5fc:	2b80      	cmp	r3, #128	; 0x80
 800f5fe:	d10e      	bne.n	800f61e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f60a:	2b80      	cmp	r3, #128	; 0x80
 800f60c:	d107      	bne.n	800f61e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fc6d 	bl	800fef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f628:	2b40      	cmp	r3, #64	; 0x40
 800f62a:	d10e      	bne.n	800f64a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f636:	2b40      	cmp	r3, #64	; 0x40
 800f638:	d107      	bne.n	800f64a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 f8ff 	bl	800f848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	f003 0320 	and.w	r3, r3, #32
 800f654:	2b20      	cmp	r3, #32
 800f656:	d10e      	bne.n	800f676 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	f003 0320 	and.w	r3, r3, #32
 800f662:	2b20      	cmp	r3, #32
 800f664:	d107      	bne.n	800f676 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f06f 0220 	mvn.w	r2, #32
 800f66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fc37 	bl	800fee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f676:	bf00      	nop
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
	...

0800f680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f692:	2b01      	cmp	r3, #1
 800f694:	d101      	bne.n	800f69a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f696:	2302      	movs	r3, #2
 800f698:	e0b4      	b.n	800f804 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2201      	movs	r2, #1
 800f69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2202      	movs	r2, #2
 800f6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2b0c      	cmp	r3, #12
 800f6ae:	f200 809f 	bhi.w	800f7f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f6b2:	a201      	add	r2, pc, #4	; (adr r2, 800f6b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b8:	0800f6ed 	.word	0x0800f6ed
 800f6bc:	0800f7f1 	.word	0x0800f7f1
 800f6c0:	0800f7f1 	.word	0x0800f7f1
 800f6c4:	0800f7f1 	.word	0x0800f7f1
 800f6c8:	0800f72d 	.word	0x0800f72d
 800f6cc:	0800f7f1 	.word	0x0800f7f1
 800f6d0:	0800f7f1 	.word	0x0800f7f1
 800f6d4:	0800f7f1 	.word	0x0800f7f1
 800f6d8:	0800f76f 	.word	0x0800f76f
 800f6dc:	0800f7f1 	.word	0x0800f7f1
 800f6e0:	0800f7f1 	.word	0x0800f7f1
 800f6e4:	0800f7f1 	.word	0x0800f7f1
 800f6e8:	0800f7af 	.word	0x0800f7af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	68b9      	ldr	r1, [r7, #8]
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f000 f952 	bl	800f99c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	699a      	ldr	r2, [r3, #24]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f042 0208 	orr.w	r2, r2, #8
 800f706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	699a      	ldr	r2, [r3, #24]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f022 0204 	bic.w	r2, r2, #4
 800f716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	6999      	ldr	r1, [r3, #24]
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	691a      	ldr	r2, [r3, #16]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	430a      	orrs	r2, r1
 800f728:	619a      	str	r2, [r3, #24]
      break;
 800f72a:	e062      	b.n	800f7f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	4618      	mov	r0, r3
 800f734:	f000 f9a2 	bl	800fa7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	699a      	ldr	r2, [r3, #24]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	699a      	ldr	r2, [r3, #24]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6999      	ldr	r1, [r3, #24]
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	691b      	ldr	r3, [r3, #16]
 800f762:	021a      	lsls	r2, r3, #8
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	430a      	orrs	r2, r1
 800f76a:	619a      	str	r2, [r3, #24]
      break;
 800f76c:	e041      	b.n	800f7f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	68b9      	ldr	r1, [r7, #8]
 800f774:	4618      	mov	r0, r3
 800f776:	f000 f9f7 	bl	800fb68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	69da      	ldr	r2, [r3, #28]
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f042 0208 	orr.w	r2, r2, #8
 800f788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	69da      	ldr	r2, [r3, #28]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f022 0204 	bic.w	r2, r2, #4
 800f798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	69d9      	ldr	r1, [r3, #28]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	691a      	ldr	r2, [r3, #16]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	61da      	str	r2, [r3, #28]
      break;
 800f7ac:	e021      	b.n	800f7f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68b9      	ldr	r1, [r7, #8]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 fa4b 	bl	800fc50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	69da      	ldr	r2, [r3, #28]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	69da      	ldr	r2, [r3, #28]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69d9      	ldr	r1, [r3, #28]
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	691b      	ldr	r3, [r3, #16]
 800f7e4:	021a      	lsls	r2, r3, #8
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	430a      	orrs	r2, r1
 800f7ec:	61da      	str	r2, [r3, #28]
      break;
 800f7ee:	e000      	b.n	800f7f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f7f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f802:	2300      	movs	r3, #0
}
 800f804:	4618      	mov	r0, r3
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a40      	ldr	r2, [pc, #256]	; (800f970 <TIM_Base_SetConfig+0x114>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d013      	beq.n	800f89c <TIM_Base_SetConfig+0x40>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f87a:	d00f      	beq.n	800f89c <TIM_Base_SetConfig+0x40>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a3d      	ldr	r2, [pc, #244]	; (800f974 <TIM_Base_SetConfig+0x118>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d00b      	beq.n	800f89c <TIM_Base_SetConfig+0x40>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a3c      	ldr	r2, [pc, #240]	; (800f978 <TIM_Base_SetConfig+0x11c>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d007      	beq.n	800f89c <TIM_Base_SetConfig+0x40>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a3b      	ldr	r2, [pc, #236]	; (800f97c <TIM_Base_SetConfig+0x120>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d003      	beq.n	800f89c <TIM_Base_SetConfig+0x40>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a3a      	ldr	r2, [pc, #232]	; (800f980 <TIM_Base_SetConfig+0x124>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d108      	bne.n	800f8ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a2f      	ldr	r2, [pc, #188]	; (800f970 <TIM_Base_SetConfig+0x114>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d02b      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8bc:	d027      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a2c      	ldr	r2, [pc, #176]	; (800f974 <TIM_Base_SetConfig+0x118>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d023      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a2b      	ldr	r2, [pc, #172]	; (800f978 <TIM_Base_SetConfig+0x11c>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d01f      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a2a      	ldr	r2, [pc, #168]	; (800f97c <TIM_Base_SetConfig+0x120>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d01b      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a29      	ldr	r2, [pc, #164]	; (800f980 <TIM_Base_SetConfig+0x124>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d017      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a28      	ldr	r2, [pc, #160]	; (800f984 <TIM_Base_SetConfig+0x128>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d013      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a27      	ldr	r2, [pc, #156]	; (800f988 <TIM_Base_SetConfig+0x12c>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d00f      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a26      	ldr	r2, [pc, #152]	; (800f98c <TIM_Base_SetConfig+0x130>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d00b      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a25      	ldr	r2, [pc, #148]	; (800f990 <TIM_Base_SetConfig+0x134>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d007      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a24      	ldr	r2, [pc, #144]	; (800f994 <TIM_Base_SetConfig+0x138>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d003      	beq.n	800f90e <TIM_Base_SetConfig+0xb2>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a23      	ldr	r2, [pc, #140]	; (800f998 <TIM_Base_SetConfig+0x13c>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d108      	bne.n	800f920 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	689a      	ldr	r2, [r3, #8]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a0a      	ldr	r2, [pc, #40]	; (800f970 <TIM_Base_SetConfig+0x114>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d003      	beq.n	800f954 <TIM_Base_SetConfig+0xf8>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a0c      	ldr	r2, [pc, #48]	; (800f980 <TIM_Base_SetConfig+0x124>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d103      	bne.n	800f95c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	691a      	ldr	r2, [r3, #16]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	615a      	str	r2, [r3, #20]
}
 800f962:	bf00      	nop
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	40010000 	.word	0x40010000
 800f974:	40000400 	.word	0x40000400
 800f978:	40000800 	.word	0x40000800
 800f97c:	40000c00 	.word	0x40000c00
 800f980:	40010400 	.word	0x40010400
 800f984:	40014000 	.word	0x40014000
 800f988:	40014400 	.word	0x40014400
 800f98c:	40014800 	.word	0x40014800
 800f990:	40001800 	.word	0x40001800
 800f994:	40001c00 	.word	0x40001c00
 800f998:	40002000 	.word	0x40002000

0800f99c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b087      	sub	sp, #28
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	f023 0201 	bic.w	r2, r3, #1
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	699b      	ldr	r3, [r3, #24]
 800f9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f023 0303 	bic.w	r3, r3, #3
 800f9d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f023 0302 	bic.w	r3, r3, #2
 800f9e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a20      	ldr	r2, [pc, #128]	; (800fa74 <TIM_OC1_SetConfig+0xd8>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d003      	beq.n	800fa00 <TIM_OC1_SetConfig+0x64>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a1f      	ldr	r2, [pc, #124]	; (800fa78 <TIM_OC1_SetConfig+0xdc>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d10c      	bne.n	800fa1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f023 0308 	bic.w	r3, r3, #8
 800fa06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	f023 0304 	bic.w	r3, r3, #4
 800fa18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a15      	ldr	r2, [pc, #84]	; (800fa74 <TIM_OC1_SetConfig+0xd8>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d003      	beq.n	800fa2a <TIM_OC1_SetConfig+0x8e>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a14      	ldr	r2, [pc, #80]	; (800fa78 <TIM_OC1_SetConfig+0xdc>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d111      	bne.n	800fa4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	693a      	ldr	r2, [r7, #16]
 800fa40:	4313      	orrs	r3, r2
 800fa42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	699b      	ldr	r3, [r3, #24]
 800fa48:	693a      	ldr	r2, [r7, #16]
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	685a      	ldr	r2, [r3, #4]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	621a      	str	r2, [r3, #32]
}
 800fa68:	bf00      	nop
 800fa6a:	371c      	adds	r7, #28
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	40010000 	.word	0x40010000
 800fa78:	40010400 	.word	0x40010400

0800fa7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b087      	sub	sp, #28
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a1b      	ldr	r3, [r3, #32]
 800fa8a:	f023 0210 	bic.w	r2, r3, #16
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a1b      	ldr	r3, [r3, #32]
 800fa96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	021b      	lsls	r3, r3, #8
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	f023 0320 	bic.w	r3, r3, #32
 800fac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	011b      	lsls	r3, r3, #4
 800face:	697a      	ldr	r2, [r7, #20]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a22      	ldr	r2, [pc, #136]	; (800fb60 <TIM_OC2_SetConfig+0xe4>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d003      	beq.n	800fae4 <TIM_OC2_SetConfig+0x68>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4a21      	ldr	r2, [pc, #132]	; (800fb64 <TIM_OC2_SetConfig+0xe8>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d10d      	bne.n	800fb00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	011b      	lsls	r3, r3, #4
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	4313      	orrs	r3, r2
 800faf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fafe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a17      	ldr	r2, [pc, #92]	; (800fb60 <TIM_OC2_SetConfig+0xe4>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d003      	beq.n	800fb10 <TIM_OC2_SetConfig+0x94>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4a16      	ldr	r2, [pc, #88]	; (800fb64 <TIM_OC2_SetConfig+0xe8>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d113      	bne.n	800fb38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	695b      	ldr	r3, [r3, #20]
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	693a      	ldr	r2, [r7, #16]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	693a      	ldr	r2, [r7, #16]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	685a      	ldr	r2, [r3, #4]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	621a      	str	r2, [r3, #32]
}
 800fb52:	bf00      	nop
 800fb54:	371c      	adds	r7, #28
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	40010000 	.word	0x40010000
 800fb64:	40010400 	.word	0x40010400

0800fb68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	69db      	ldr	r3, [r3, #28]
 800fb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f023 0303 	bic.w	r3, r3, #3
 800fb9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	68fa      	ldr	r2, [r7, #12]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	021b      	lsls	r3, r3, #8
 800fbb8:	697a      	ldr	r2, [r7, #20]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a21      	ldr	r2, [pc, #132]	; (800fc48 <TIM_OC3_SetConfig+0xe0>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d003      	beq.n	800fbce <TIM_OC3_SetConfig+0x66>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a20      	ldr	r2, [pc, #128]	; (800fc4c <TIM_OC3_SetConfig+0xe4>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d10d      	bne.n	800fbea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	021b      	lsls	r3, r3, #8
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4a16      	ldr	r2, [pc, #88]	; (800fc48 <TIM_OC3_SetConfig+0xe0>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d003      	beq.n	800fbfa <TIM_OC3_SetConfig+0x92>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a15      	ldr	r2, [pc, #84]	; (800fc4c <TIM_OC3_SetConfig+0xe4>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d113      	bne.n	800fc22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	011b      	lsls	r3, r3, #4
 800fc10:	693a      	ldr	r2, [r7, #16]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	011b      	lsls	r3, r3, #4
 800fc1c:	693a      	ldr	r2, [r7, #16]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	621a      	str	r2, [r3, #32]
}
 800fc3c:	bf00      	nop
 800fc3e:	371c      	adds	r7, #28
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	40010000 	.word	0x40010000
 800fc4c:	40010400 	.word	0x40010400

0800fc50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a1b      	ldr	r3, [r3, #32]
 800fc6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	69db      	ldr	r3, [r3, #28]
 800fc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	021b      	lsls	r3, r3, #8
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	031b      	lsls	r3, r3, #12
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4a12      	ldr	r2, [pc, #72]	; (800fcf4 <TIM_OC4_SetConfig+0xa4>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d003      	beq.n	800fcb8 <TIM_OC4_SetConfig+0x68>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a11      	ldr	r2, [pc, #68]	; (800fcf8 <TIM_OC4_SetConfig+0xa8>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d109      	bne.n	800fccc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	019b      	lsls	r3, r3, #6
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	621a      	str	r2, [r3, #32]
}
 800fce6:	bf00      	nop
 800fce8:	371c      	adds	r7, #28
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	40010000 	.word	0x40010000
 800fcf8:	40010400 	.word	0x40010400

0800fcfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b087      	sub	sp, #28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	f003 031f 	and.w	r3, r3, #31
 800fd0e:	2201      	movs	r2, #1
 800fd10:	fa02 f303 	lsl.w	r3, r2, r3
 800fd14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6a1a      	ldr	r2, [r3, #32]
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	43db      	mvns	r3, r3
 800fd1e:	401a      	ands	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6a1a      	ldr	r2, [r3, #32]
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	f003 031f 	and.w	r3, r3, #31
 800fd2e:	6879      	ldr	r1, [r7, #4]
 800fd30:	fa01 f303 	lsl.w	r3, r1, r3
 800fd34:	431a      	orrs	r2, r3
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	621a      	str	r2, [r3, #32]
}
 800fd3a:	bf00      	nop
 800fd3c:	371c      	adds	r7, #28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr
	...

0800fd48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d101      	bne.n	800fd60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd5c:	2302      	movs	r3, #2
 800fd5e:	e05a      	b.n	800fe16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2201      	movs	r2, #1
 800fd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2202      	movs	r2, #2
 800fd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a21      	ldr	r2, [pc, #132]	; (800fe24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d022      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdac:	d01d      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	4a1d      	ldr	r2, [pc, #116]	; (800fe28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d018      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4a1b      	ldr	r2, [pc, #108]	; (800fe2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d013      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a1a      	ldr	r2, [pc, #104]	; (800fe30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d00e      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a18      	ldr	r2, [pc, #96]	; (800fe34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d009      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a17      	ldr	r2, [pc, #92]	; (800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d004      	beq.n	800fdea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a15      	ldr	r2, [pc, #84]	; (800fe3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d10c      	bne.n	800fe04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3714      	adds	r7, #20
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	40010000 	.word	0x40010000
 800fe28:	40000400 	.word	0x40000400
 800fe2c:	40000800 	.word	0x40000800
 800fe30:	40000c00 	.word	0x40000c00
 800fe34:	40010400 	.word	0x40010400
 800fe38:	40014000 	.word	0x40014000
 800fe3c:	40001800 	.word	0x40001800

0800fe40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d101      	bne.n	800fe5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe58:	2302      	movs	r3, #2
 800fe5a:	e03d      	b.n	800fed8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	695b      	ldr	r3, [r3, #20]
 800feb4:	4313      	orrs	r3, r2
 800feb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	4313      	orrs	r3, r2
 800fec4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3714      	adds	r7, #20
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff00:	bf00      	nop
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d101      	bne.n	800ff1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e03f      	b.n	800ff9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d106      	bne.n	800ff38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7f7 fcc0 	bl	80078b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2224      	movs	r2, #36	; 0x24
 800ff3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	68da      	ldr	r2, [r3, #12]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f829 	bl	800ffa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	691a      	ldr	r2, [r3, #16]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	695a      	ldr	r2, [r3, #20]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68da      	ldr	r2, [r3, #12]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2220      	movs	r2, #32
 800ff90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2220      	movs	r2, #32
 800ff98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
	...

0800ffa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffac:	b085      	sub	sp, #20
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68da      	ldr	r2, [r3, #12]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	430a      	orrs	r2, r1
 800ffc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	689a      	ldr	r2, [r3, #8]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	691b      	ldr	r3, [r3, #16]
 800ffd0:	431a      	orrs	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	695b      	ldr	r3, [r3, #20]
 800ffd6:	431a      	orrs	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	69db      	ldr	r3, [r3, #28]
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ffea:	f023 030c 	bic.w	r3, r3, #12
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	6812      	ldr	r2, [r2, #0]
 800fff2:	68f9      	ldr	r1, [r7, #12]
 800fff4:	430b      	orrs	r3, r1
 800fff6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	695b      	ldr	r3, [r3, #20]
 800fffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	699a      	ldr	r2, [r3, #24]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	430a      	orrs	r2, r1
 801000c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010016:	f040 818b 	bne.w	8010330 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4ac1      	ldr	r2, [pc, #772]	; (8010324 <UART_SetConfig+0x37c>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d005      	beq.n	8010030 <UART_SetConfig+0x88>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4abf      	ldr	r2, [pc, #764]	; (8010328 <UART_SetConfig+0x380>)
 801002a:	4293      	cmp	r3, r2
 801002c:	f040 80bd 	bne.w	80101aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010030:	f7fc fbcc 	bl	800c7cc <HAL_RCC_GetPCLK2Freq>
 8010034:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	461d      	mov	r5, r3
 801003a:	f04f 0600 	mov.w	r6, #0
 801003e:	46a8      	mov	r8, r5
 8010040:	46b1      	mov	r9, r6
 8010042:	eb18 0308 	adds.w	r3, r8, r8
 8010046:	eb49 0409 	adc.w	r4, r9, r9
 801004a:	4698      	mov	r8, r3
 801004c:	46a1      	mov	r9, r4
 801004e:	eb18 0805 	adds.w	r8, r8, r5
 8010052:	eb49 0906 	adc.w	r9, r9, r6
 8010056:	f04f 0100 	mov.w	r1, #0
 801005a:	f04f 0200 	mov.w	r2, #0
 801005e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010062:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010066:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801006a:	4688      	mov	r8, r1
 801006c:	4691      	mov	r9, r2
 801006e:	eb18 0005 	adds.w	r0, r8, r5
 8010072:	eb49 0106 	adc.w	r1, r9, r6
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	461d      	mov	r5, r3
 801007c:	f04f 0600 	mov.w	r6, #0
 8010080:	196b      	adds	r3, r5, r5
 8010082:	eb46 0406 	adc.w	r4, r6, r6
 8010086:	461a      	mov	r2, r3
 8010088:	4623      	mov	r3, r4
 801008a:	f7f0 fe15 	bl	8000cb8 <__aeabi_uldivmod>
 801008e:	4603      	mov	r3, r0
 8010090:	460c      	mov	r4, r1
 8010092:	461a      	mov	r2, r3
 8010094:	4ba5      	ldr	r3, [pc, #660]	; (801032c <UART_SetConfig+0x384>)
 8010096:	fba3 2302 	umull	r2, r3, r3, r2
 801009a:	095b      	lsrs	r3, r3, #5
 801009c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	461d      	mov	r5, r3
 80100a4:	f04f 0600 	mov.w	r6, #0
 80100a8:	46a9      	mov	r9, r5
 80100aa:	46b2      	mov	sl, r6
 80100ac:	eb19 0309 	adds.w	r3, r9, r9
 80100b0:	eb4a 040a 	adc.w	r4, sl, sl
 80100b4:	4699      	mov	r9, r3
 80100b6:	46a2      	mov	sl, r4
 80100b8:	eb19 0905 	adds.w	r9, r9, r5
 80100bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80100c0:	f04f 0100 	mov.w	r1, #0
 80100c4:	f04f 0200 	mov.w	r2, #0
 80100c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100d4:	4689      	mov	r9, r1
 80100d6:	4692      	mov	sl, r2
 80100d8:	eb19 0005 	adds.w	r0, r9, r5
 80100dc:	eb4a 0106 	adc.w	r1, sl, r6
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	461d      	mov	r5, r3
 80100e6:	f04f 0600 	mov.w	r6, #0
 80100ea:	196b      	adds	r3, r5, r5
 80100ec:	eb46 0406 	adc.w	r4, r6, r6
 80100f0:	461a      	mov	r2, r3
 80100f2:	4623      	mov	r3, r4
 80100f4:	f7f0 fde0 	bl	8000cb8 <__aeabi_uldivmod>
 80100f8:	4603      	mov	r3, r0
 80100fa:	460c      	mov	r4, r1
 80100fc:	461a      	mov	r2, r3
 80100fe:	4b8b      	ldr	r3, [pc, #556]	; (801032c <UART_SetConfig+0x384>)
 8010100:	fba3 1302 	umull	r1, r3, r3, r2
 8010104:	095b      	lsrs	r3, r3, #5
 8010106:	2164      	movs	r1, #100	; 0x64
 8010108:	fb01 f303 	mul.w	r3, r1, r3
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	00db      	lsls	r3, r3, #3
 8010110:	3332      	adds	r3, #50	; 0x32
 8010112:	4a86      	ldr	r2, [pc, #536]	; (801032c <UART_SetConfig+0x384>)
 8010114:	fba2 2303 	umull	r2, r3, r2, r3
 8010118:	095b      	lsrs	r3, r3, #5
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010120:	4498      	add	r8, r3
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	461d      	mov	r5, r3
 8010126:	f04f 0600 	mov.w	r6, #0
 801012a:	46a9      	mov	r9, r5
 801012c:	46b2      	mov	sl, r6
 801012e:	eb19 0309 	adds.w	r3, r9, r9
 8010132:	eb4a 040a 	adc.w	r4, sl, sl
 8010136:	4699      	mov	r9, r3
 8010138:	46a2      	mov	sl, r4
 801013a:	eb19 0905 	adds.w	r9, r9, r5
 801013e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010142:	f04f 0100 	mov.w	r1, #0
 8010146:	f04f 0200 	mov.w	r2, #0
 801014a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801014e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010156:	4689      	mov	r9, r1
 8010158:	4692      	mov	sl, r2
 801015a:	eb19 0005 	adds.w	r0, r9, r5
 801015e:	eb4a 0106 	adc.w	r1, sl, r6
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	461d      	mov	r5, r3
 8010168:	f04f 0600 	mov.w	r6, #0
 801016c:	196b      	adds	r3, r5, r5
 801016e:	eb46 0406 	adc.w	r4, r6, r6
 8010172:	461a      	mov	r2, r3
 8010174:	4623      	mov	r3, r4
 8010176:	f7f0 fd9f 	bl	8000cb8 <__aeabi_uldivmod>
 801017a:	4603      	mov	r3, r0
 801017c:	460c      	mov	r4, r1
 801017e:	461a      	mov	r2, r3
 8010180:	4b6a      	ldr	r3, [pc, #424]	; (801032c <UART_SetConfig+0x384>)
 8010182:	fba3 1302 	umull	r1, r3, r3, r2
 8010186:	095b      	lsrs	r3, r3, #5
 8010188:	2164      	movs	r1, #100	; 0x64
 801018a:	fb01 f303 	mul.w	r3, r1, r3
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	00db      	lsls	r3, r3, #3
 8010192:	3332      	adds	r3, #50	; 0x32
 8010194:	4a65      	ldr	r2, [pc, #404]	; (801032c <UART_SetConfig+0x384>)
 8010196:	fba2 2303 	umull	r2, r3, r2, r3
 801019a:	095b      	lsrs	r3, r3, #5
 801019c:	f003 0207 	and.w	r2, r3, #7
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4442      	add	r2, r8
 80101a6:	609a      	str	r2, [r3, #8]
 80101a8:	e26f      	b.n	801068a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101aa:	f7fc fafb 	bl	800c7a4 <HAL_RCC_GetPCLK1Freq>
 80101ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	461d      	mov	r5, r3
 80101b4:	f04f 0600 	mov.w	r6, #0
 80101b8:	46a8      	mov	r8, r5
 80101ba:	46b1      	mov	r9, r6
 80101bc:	eb18 0308 	adds.w	r3, r8, r8
 80101c0:	eb49 0409 	adc.w	r4, r9, r9
 80101c4:	4698      	mov	r8, r3
 80101c6:	46a1      	mov	r9, r4
 80101c8:	eb18 0805 	adds.w	r8, r8, r5
 80101cc:	eb49 0906 	adc.w	r9, r9, r6
 80101d0:	f04f 0100 	mov.w	r1, #0
 80101d4:	f04f 0200 	mov.w	r2, #0
 80101d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80101e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101e4:	4688      	mov	r8, r1
 80101e6:	4691      	mov	r9, r2
 80101e8:	eb18 0005 	adds.w	r0, r8, r5
 80101ec:	eb49 0106 	adc.w	r1, r9, r6
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	461d      	mov	r5, r3
 80101f6:	f04f 0600 	mov.w	r6, #0
 80101fa:	196b      	adds	r3, r5, r5
 80101fc:	eb46 0406 	adc.w	r4, r6, r6
 8010200:	461a      	mov	r2, r3
 8010202:	4623      	mov	r3, r4
 8010204:	f7f0 fd58 	bl	8000cb8 <__aeabi_uldivmod>
 8010208:	4603      	mov	r3, r0
 801020a:	460c      	mov	r4, r1
 801020c:	461a      	mov	r2, r3
 801020e:	4b47      	ldr	r3, [pc, #284]	; (801032c <UART_SetConfig+0x384>)
 8010210:	fba3 2302 	umull	r2, r3, r3, r2
 8010214:	095b      	lsrs	r3, r3, #5
 8010216:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	461d      	mov	r5, r3
 801021e:	f04f 0600 	mov.w	r6, #0
 8010222:	46a9      	mov	r9, r5
 8010224:	46b2      	mov	sl, r6
 8010226:	eb19 0309 	adds.w	r3, r9, r9
 801022a:	eb4a 040a 	adc.w	r4, sl, sl
 801022e:	4699      	mov	r9, r3
 8010230:	46a2      	mov	sl, r4
 8010232:	eb19 0905 	adds.w	r9, r9, r5
 8010236:	eb4a 0a06 	adc.w	sl, sl, r6
 801023a:	f04f 0100 	mov.w	r1, #0
 801023e:	f04f 0200 	mov.w	r2, #0
 8010242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801024a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801024e:	4689      	mov	r9, r1
 8010250:	4692      	mov	sl, r2
 8010252:	eb19 0005 	adds.w	r0, r9, r5
 8010256:	eb4a 0106 	adc.w	r1, sl, r6
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	461d      	mov	r5, r3
 8010260:	f04f 0600 	mov.w	r6, #0
 8010264:	196b      	adds	r3, r5, r5
 8010266:	eb46 0406 	adc.w	r4, r6, r6
 801026a:	461a      	mov	r2, r3
 801026c:	4623      	mov	r3, r4
 801026e:	f7f0 fd23 	bl	8000cb8 <__aeabi_uldivmod>
 8010272:	4603      	mov	r3, r0
 8010274:	460c      	mov	r4, r1
 8010276:	461a      	mov	r2, r3
 8010278:	4b2c      	ldr	r3, [pc, #176]	; (801032c <UART_SetConfig+0x384>)
 801027a:	fba3 1302 	umull	r1, r3, r3, r2
 801027e:	095b      	lsrs	r3, r3, #5
 8010280:	2164      	movs	r1, #100	; 0x64
 8010282:	fb01 f303 	mul.w	r3, r1, r3
 8010286:	1ad3      	subs	r3, r2, r3
 8010288:	00db      	lsls	r3, r3, #3
 801028a:	3332      	adds	r3, #50	; 0x32
 801028c:	4a27      	ldr	r2, [pc, #156]	; (801032c <UART_SetConfig+0x384>)
 801028e:	fba2 2303 	umull	r2, r3, r2, r3
 8010292:	095b      	lsrs	r3, r3, #5
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801029a:	4498      	add	r8, r3
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	461d      	mov	r5, r3
 80102a0:	f04f 0600 	mov.w	r6, #0
 80102a4:	46a9      	mov	r9, r5
 80102a6:	46b2      	mov	sl, r6
 80102a8:	eb19 0309 	adds.w	r3, r9, r9
 80102ac:	eb4a 040a 	adc.w	r4, sl, sl
 80102b0:	4699      	mov	r9, r3
 80102b2:	46a2      	mov	sl, r4
 80102b4:	eb19 0905 	adds.w	r9, r9, r5
 80102b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80102bc:	f04f 0100 	mov.w	r1, #0
 80102c0:	f04f 0200 	mov.w	r2, #0
 80102c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102d0:	4689      	mov	r9, r1
 80102d2:	4692      	mov	sl, r2
 80102d4:	eb19 0005 	adds.w	r0, r9, r5
 80102d8:	eb4a 0106 	adc.w	r1, sl, r6
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	461d      	mov	r5, r3
 80102e2:	f04f 0600 	mov.w	r6, #0
 80102e6:	196b      	adds	r3, r5, r5
 80102e8:	eb46 0406 	adc.w	r4, r6, r6
 80102ec:	461a      	mov	r2, r3
 80102ee:	4623      	mov	r3, r4
 80102f0:	f7f0 fce2 	bl	8000cb8 <__aeabi_uldivmod>
 80102f4:	4603      	mov	r3, r0
 80102f6:	460c      	mov	r4, r1
 80102f8:	461a      	mov	r2, r3
 80102fa:	4b0c      	ldr	r3, [pc, #48]	; (801032c <UART_SetConfig+0x384>)
 80102fc:	fba3 1302 	umull	r1, r3, r3, r2
 8010300:	095b      	lsrs	r3, r3, #5
 8010302:	2164      	movs	r1, #100	; 0x64
 8010304:	fb01 f303 	mul.w	r3, r1, r3
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	3332      	adds	r3, #50	; 0x32
 801030e:	4a07      	ldr	r2, [pc, #28]	; (801032c <UART_SetConfig+0x384>)
 8010310:	fba2 2303 	umull	r2, r3, r2, r3
 8010314:	095b      	lsrs	r3, r3, #5
 8010316:	f003 0207 	and.w	r2, r3, #7
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4442      	add	r2, r8
 8010320:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010322:	e1b2      	b.n	801068a <UART_SetConfig+0x6e2>
 8010324:	40011000 	.word	0x40011000
 8010328:	40011400 	.word	0x40011400
 801032c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4ad7      	ldr	r2, [pc, #860]	; (8010694 <UART_SetConfig+0x6ec>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d005      	beq.n	8010346 <UART_SetConfig+0x39e>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4ad6      	ldr	r2, [pc, #856]	; (8010698 <UART_SetConfig+0x6f0>)
 8010340:	4293      	cmp	r3, r2
 8010342:	f040 80d1 	bne.w	80104e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010346:	f7fc fa41 	bl	800c7cc <HAL_RCC_GetPCLK2Freq>
 801034a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	469a      	mov	sl, r3
 8010350:	f04f 0b00 	mov.w	fp, #0
 8010354:	46d0      	mov	r8, sl
 8010356:	46d9      	mov	r9, fp
 8010358:	eb18 0308 	adds.w	r3, r8, r8
 801035c:	eb49 0409 	adc.w	r4, r9, r9
 8010360:	4698      	mov	r8, r3
 8010362:	46a1      	mov	r9, r4
 8010364:	eb18 080a 	adds.w	r8, r8, sl
 8010368:	eb49 090b 	adc.w	r9, r9, fp
 801036c:	f04f 0100 	mov.w	r1, #0
 8010370:	f04f 0200 	mov.w	r2, #0
 8010374:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010378:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801037c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010380:	4688      	mov	r8, r1
 8010382:	4691      	mov	r9, r2
 8010384:	eb1a 0508 	adds.w	r5, sl, r8
 8010388:	eb4b 0609 	adc.w	r6, fp, r9
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	4619      	mov	r1, r3
 8010392:	f04f 0200 	mov.w	r2, #0
 8010396:	f04f 0300 	mov.w	r3, #0
 801039a:	f04f 0400 	mov.w	r4, #0
 801039e:	0094      	lsls	r4, r2, #2
 80103a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103a4:	008b      	lsls	r3, r1, #2
 80103a6:	461a      	mov	r2, r3
 80103a8:	4623      	mov	r3, r4
 80103aa:	4628      	mov	r0, r5
 80103ac:	4631      	mov	r1, r6
 80103ae:	f7f0 fc83 	bl	8000cb8 <__aeabi_uldivmod>
 80103b2:	4603      	mov	r3, r0
 80103b4:	460c      	mov	r4, r1
 80103b6:	461a      	mov	r2, r3
 80103b8:	4bb8      	ldr	r3, [pc, #736]	; (801069c <UART_SetConfig+0x6f4>)
 80103ba:	fba3 2302 	umull	r2, r3, r3, r2
 80103be:	095b      	lsrs	r3, r3, #5
 80103c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	469b      	mov	fp, r3
 80103c8:	f04f 0c00 	mov.w	ip, #0
 80103cc:	46d9      	mov	r9, fp
 80103ce:	46e2      	mov	sl, ip
 80103d0:	eb19 0309 	adds.w	r3, r9, r9
 80103d4:	eb4a 040a 	adc.w	r4, sl, sl
 80103d8:	4699      	mov	r9, r3
 80103da:	46a2      	mov	sl, r4
 80103dc:	eb19 090b 	adds.w	r9, r9, fp
 80103e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103e4:	f04f 0100 	mov.w	r1, #0
 80103e8:	f04f 0200 	mov.w	r2, #0
 80103ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103f8:	4689      	mov	r9, r1
 80103fa:	4692      	mov	sl, r2
 80103fc:	eb1b 0509 	adds.w	r5, fp, r9
 8010400:	eb4c 060a 	adc.w	r6, ip, sl
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4619      	mov	r1, r3
 801040a:	f04f 0200 	mov.w	r2, #0
 801040e:	f04f 0300 	mov.w	r3, #0
 8010412:	f04f 0400 	mov.w	r4, #0
 8010416:	0094      	lsls	r4, r2, #2
 8010418:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801041c:	008b      	lsls	r3, r1, #2
 801041e:	461a      	mov	r2, r3
 8010420:	4623      	mov	r3, r4
 8010422:	4628      	mov	r0, r5
 8010424:	4631      	mov	r1, r6
 8010426:	f7f0 fc47 	bl	8000cb8 <__aeabi_uldivmod>
 801042a:	4603      	mov	r3, r0
 801042c:	460c      	mov	r4, r1
 801042e:	461a      	mov	r2, r3
 8010430:	4b9a      	ldr	r3, [pc, #616]	; (801069c <UART_SetConfig+0x6f4>)
 8010432:	fba3 1302 	umull	r1, r3, r3, r2
 8010436:	095b      	lsrs	r3, r3, #5
 8010438:	2164      	movs	r1, #100	; 0x64
 801043a:	fb01 f303 	mul.w	r3, r1, r3
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	011b      	lsls	r3, r3, #4
 8010442:	3332      	adds	r3, #50	; 0x32
 8010444:	4a95      	ldr	r2, [pc, #596]	; (801069c <UART_SetConfig+0x6f4>)
 8010446:	fba2 2303 	umull	r2, r3, r2, r3
 801044a:	095b      	lsrs	r3, r3, #5
 801044c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010450:	4498      	add	r8, r3
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	469b      	mov	fp, r3
 8010456:	f04f 0c00 	mov.w	ip, #0
 801045a:	46d9      	mov	r9, fp
 801045c:	46e2      	mov	sl, ip
 801045e:	eb19 0309 	adds.w	r3, r9, r9
 8010462:	eb4a 040a 	adc.w	r4, sl, sl
 8010466:	4699      	mov	r9, r3
 8010468:	46a2      	mov	sl, r4
 801046a:	eb19 090b 	adds.w	r9, r9, fp
 801046e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010472:	f04f 0100 	mov.w	r1, #0
 8010476:	f04f 0200 	mov.w	r2, #0
 801047a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801047e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010482:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010486:	4689      	mov	r9, r1
 8010488:	4692      	mov	sl, r2
 801048a:	eb1b 0509 	adds.w	r5, fp, r9
 801048e:	eb4c 060a 	adc.w	r6, ip, sl
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	4619      	mov	r1, r3
 8010498:	f04f 0200 	mov.w	r2, #0
 801049c:	f04f 0300 	mov.w	r3, #0
 80104a0:	f04f 0400 	mov.w	r4, #0
 80104a4:	0094      	lsls	r4, r2, #2
 80104a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104aa:	008b      	lsls	r3, r1, #2
 80104ac:	461a      	mov	r2, r3
 80104ae:	4623      	mov	r3, r4
 80104b0:	4628      	mov	r0, r5
 80104b2:	4631      	mov	r1, r6
 80104b4:	f7f0 fc00 	bl	8000cb8 <__aeabi_uldivmod>
 80104b8:	4603      	mov	r3, r0
 80104ba:	460c      	mov	r4, r1
 80104bc:	461a      	mov	r2, r3
 80104be:	4b77      	ldr	r3, [pc, #476]	; (801069c <UART_SetConfig+0x6f4>)
 80104c0:	fba3 1302 	umull	r1, r3, r3, r2
 80104c4:	095b      	lsrs	r3, r3, #5
 80104c6:	2164      	movs	r1, #100	; 0x64
 80104c8:	fb01 f303 	mul.w	r3, r1, r3
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	011b      	lsls	r3, r3, #4
 80104d0:	3332      	adds	r3, #50	; 0x32
 80104d2:	4a72      	ldr	r2, [pc, #456]	; (801069c <UART_SetConfig+0x6f4>)
 80104d4:	fba2 2303 	umull	r2, r3, r2, r3
 80104d8:	095b      	lsrs	r3, r3, #5
 80104da:	f003 020f 	and.w	r2, r3, #15
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4442      	add	r2, r8
 80104e4:	609a      	str	r2, [r3, #8]
 80104e6:	e0d0      	b.n	801068a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80104e8:	f7fc f95c 	bl	800c7a4 <HAL_RCC_GetPCLK1Freq>
 80104ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	469a      	mov	sl, r3
 80104f2:	f04f 0b00 	mov.w	fp, #0
 80104f6:	46d0      	mov	r8, sl
 80104f8:	46d9      	mov	r9, fp
 80104fa:	eb18 0308 	adds.w	r3, r8, r8
 80104fe:	eb49 0409 	adc.w	r4, r9, r9
 8010502:	4698      	mov	r8, r3
 8010504:	46a1      	mov	r9, r4
 8010506:	eb18 080a 	adds.w	r8, r8, sl
 801050a:	eb49 090b 	adc.w	r9, r9, fp
 801050e:	f04f 0100 	mov.w	r1, #0
 8010512:	f04f 0200 	mov.w	r2, #0
 8010516:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801051a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801051e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010522:	4688      	mov	r8, r1
 8010524:	4691      	mov	r9, r2
 8010526:	eb1a 0508 	adds.w	r5, sl, r8
 801052a:	eb4b 0609 	adc.w	r6, fp, r9
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	4619      	mov	r1, r3
 8010534:	f04f 0200 	mov.w	r2, #0
 8010538:	f04f 0300 	mov.w	r3, #0
 801053c:	f04f 0400 	mov.w	r4, #0
 8010540:	0094      	lsls	r4, r2, #2
 8010542:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010546:	008b      	lsls	r3, r1, #2
 8010548:	461a      	mov	r2, r3
 801054a:	4623      	mov	r3, r4
 801054c:	4628      	mov	r0, r5
 801054e:	4631      	mov	r1, r6
 8010550:	f7f0 fbb2 	bl	8000cb8 <__aeabi_uldivmod>
 8010554:	4603      	mov	r3, r0
 8010556:	460c      	mov	r4, r1
 8010558:	461a      	mov	r2, r3
 801055a:	4b50      	ldr	r3, [pc, #320]	; (801069c <UART_SetConfig+0x6f4>)
 801055c:	fba3 2302 	umull	r2, r3, r3, r2
 8010560:	095b      	lsrs	r3, r3, #5
 8010562:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	469b      	mov	fp, r3
 801056a:	f04f 0c00 	mov.w	ip, #0
 801056e:	46d9      	mov	r9, fp
 8010570:	46e2      	mov	sl, ip
 8010572:	eb19 0309 	adds.w	r3, r9, r9
 8010576:	eb4a 040a 	adc.w	r4, sl, sl
 801057a:	4699      	mov	r9, r3
 801057c:	46a2      	mov	sl, r4
 801057e:	eb19 090b 	adds.w	r9, r9, fp
 8010582:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010586:	f04f 0100 	mov.w	r1, #0
 801058a:	f04f 0200 	mov.w	r2, #0
 801058e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801059a:	4689      	mov	r9, r1
 801059c:	4692      	mov	sl, r2
 801059e:	eb1b 0509 	adds.w	r5, fp, r9
 80105a2:	eb4c 060a 	adc.w	r6, ip, sl
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	4619      	mov	r1, r3
 80105ac:	f04f 0200 	mov.w	r2, #0
 80105b0:	f04f 0300 	mov.w	r3, #0
 80105b4:	f04f 0400 	mov.w	r4, #0
 80105b8:	0094      	lsls	r4, r2, #2
 80105ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80105be:	008b      	lsls	r3, r1, #2
 80105c0:	461a      	mov	r2, r3
 80105c2:	4623      	mov	r3, r4
 80105c4:	4628      	mov	r0, r5
 80105c6:	4631      	mov	r1, r6
 80105c8:	f7f0 fb76 	bl	8000cb8 <__aeabi_uldivmod>
 80105cc:	4603      	mov	r3, r0
 80105ce:	460c      	mov	r4, r1
 80105d0:	461a      	mov	r2, r3
 80105d2:	4b32      	ldr	r3, [pc, #200]	; (801069c <UART_SetConfig+0x6f4>)
 80105d4:	fba3 1302 	umull	r1, r3, r3, r2
 80105d8:	095b      	lsrs	r3, r3, #5
 80105da:	2164      	movs	r1, #100	; 0x64
 80105dc:	fb01 f303 	mul.w	r3, r1, r3
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	011b      	lsls	r3, r3, #4
 80105e4:	3332      	adds	r3, #50	; 0x32
 80105e6:	4a2d      	ldr	r2, [pc, #180]	; (801069c <UART_SetConfig+0x6f4>)
 80105e8:	fba2 2303 	umull	r2, r3, r2, r3
 80105ec:	095b      	lsrs	r3, r3, #5
 80105ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105f2:	4498      	add	r8, r3
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	469b      	mov	fp, r3
 80105f8:	f04f 0c00 	mov.w	ip, #0
 80105fc:	46d9      	mov	r9, fp
 80105fe:	46e2      	mov	sl, ip
 8010600:	eb19 0309 	adds.w	r3, r9, r9
 8010604:	eb4a 040a 	adc.w	r4, sl, sl
 8010608:	4699      	mov	r9, r3
 801060a:	46a2      	mov	sl, r4
 801060c:	eb19 090b 	adds.w	r9, r9, fp
 8010610:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010614:	f04f 0100 	mov.w	r1, #0
 8010618:	f04f 0200 	mov.w	r2, #0
 801061c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010620:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010624:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010628:	4689      	mov	r9, r1
 801062a:	4692      	mov	sl, r2
 801062c:	eb1b 0509 	adds.w	r5, fp, r9
 8010630:	eb4c 060a 	adc.w	r6, ip, sl
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	4619      	mov	r1, r3
 801063a:	f04f 0200 	mov.w	r2, #0
 801063e:	f04f 0300 	mov.w	r3, #0
 8010642:	f04f 0400 	mov.w	r4, #0
 8010646:	0094      	lsls	r4, r2, #2
 8010648:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801064c:	008b      	lsls	r3, r1, #2
 801064e:	461a      	mov	r2, r3
 8010650:	4623      	mov	r3, r4
 8010652:	4628      	mov	r0, r5
 8010654:	4631      	mov	r1, r6
 8010656:	f7f0 fb2f 	bl	8000cb8 <__aeabi_uldivmod>
 801065a:	4603      	mov	r3, r0
 801065c:	460c      	mov	r4, r1
 801065e:	461a      	mov	r2, r3
 8010660:	4b0e      	ldr	r3, [pc, #56]	; (801069c <UART_SetConfig+0x6f4>)
 8010662:	fba3 1302 	umull	r1, r3, r3, r2
 8010666:	095b      	lsrs	r3, r3, #5
 8010668:	2164      	movs	r1, #100	; 0x64
 801066a:	fb01 f303 	mul.w	r3, r1, r3
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	011b      	lsls	r3, r3, #4
 8010672:	3332      	adds	r3, #50	; 0x32
 8010674:	4a09      	ldr	r2, [pc, #36]	; (801069c <UART_SetConfig+0x6f4>)
 8010676:	fba2 2303 	umull	r2, r3, r2, r3
 801067a:	095b      	lsrs	r3, r3, #5
 801067c:	f003 020f 	and.w	r2, r3, #15
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4442      	add	r2, r8
 8010686:	609a      	str	r2, [r3, #8]
}
 8010688:	e7ff      	b.n	801068a <UART_SetConfig+0x6e2>
 801068a:	bf00      	nop
 801068c:	3714      	adds	r7, #20
 801068e:	46bd      	mov	sp, r7
 8010690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010694:	40011000 	.word	0x40011000
 8010698:	40011400 	.word	0x40011400
 801069c:	51eb851f 	.word	0x51eb851f

080106a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80106a0:	b084      	sub	sp, #16
 80106a2:	b480      	push	{r7}
 80106a4:	b085      	sub	sp, #20
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	f107 001c 	add.w	r0, r7, #28
 80106ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80106b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80106b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80106ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80106be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80106c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80106c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80106c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80106ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80106da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	431a      	orrs	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	b004      	add	sp, #16
 80106f4:	4770      	bx	lr

080106f6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80106f6:	b480      	push	{r7}
 80106f8:	b083      	sub	sp, #12
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010724:	2300      	movs	r3, #0
}
 8010726:	4618      	mov	r0, r3
 8010728:	370c      	adds	r7, #12
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr

08010732 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010732:	b580      	push	{r7, lr}
 8010734:	b082      	sub	sp, #8
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2203      	movs	r2, #3
 801073e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010740:	2002      	movs	r0, #2
 8010742:	f7f9 fbdd 	bl	8009f00 <HAL_Delay>
  
  return HAL_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	f003 0303 	and.w	r3, r3, #3
}
 8010760:	4618      	mov	r0, r3
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801076c:	b480      	push	{r7}
 801076e:	b085      	sub	sp, #20
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010776:	2300      	movs	r3, #0
 8010778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801078a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010790:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010796:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	4313      	orrs	r3, r2
 801079c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80107a6:	f023 030f 	bic.w	r3, r3, #15
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	431a      	orrs	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80107b2:	2300      	movs	r3, #0
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3714      	adds	r7, #20
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	691b      	ldr	r3, [r3, #16]
 80107cc:	b2db      	uxtb	r3, r3
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80107da:	b480      	push	{r7}
 80107dc:	b085      	sub	sp, #20
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
 80107e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	3314      	adds	r3, #20
 80107e8:	461a      	mov	r2, r3
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	4413      	add	r3, r2
 80107ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
}  
 80107f4:	4618      	mov	r0, r3
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	685a      	ldr	r2, [r3, #4]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010826:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801082c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010832:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010834:	68fa      	ldr	r2, [r7, #12]
 8010836:	4313      	orrs	r3, r2
 8010838:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801083e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	431a      	orrs	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801084a:	2300      	movs	r3, #0

}
 801084c:	4618      	mov	r0, r3
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b088      	sub	sp, #32
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010866:	2310      	movs	r3, #16
 8010868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801086a:	2340      	movs	r3, #64	; 0x40
 801086c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801086e:	2300      	movs	r3, #0
 8010870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010878:	f107 0308 	add.w	r3, r7, #8
 801087c:	4619      	mov	r1, r3
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f7ff ff74 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010884:	f241 3288 	movw	r2, #5000	; 0x1388
 8010888:	2110      	movs	r1, #16
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 fa40 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010892:	69fb      	ldr	r3, [r7, #28]
}
 8010894:	4618      	mov	r0, r3
 8010896:	3720      	adds	r7, #32
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b088      	sub	sp, #32
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80108aa:	2311      	movs	r3, #17
 80108ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108ae:	2340      	movs	r3, #64	; 0x40
 80108b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108b2:	2300      	movs	r3, #0
 80108b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108bc:	f107 0308 	add.w	r3, r7, #8
 80108c0:	4619      	mov	r1, r3
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f7ff ff52 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80108c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108cc:	2111      	movs	r1, #17
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 fa1e 	bl	8010d10 <SDMMC_GetCmdResp1>
 80108d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108d6:	69fb      	ldr	r3, [r7, #28]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3720      	adds	r7, #32
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b088      	sub	sp, #32
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80108ee:	2312      	movs	r3, #18
 80108f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108f2:	2340      	movs	r3, #64	; 0x40
 80108f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108f6:	2300      	movs	r3, #0
 80108f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010900:	f107 0308 	add.w	r3, r7, #8
 8010904:	4619      	mov	r1, r3
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff ff30 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801090c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010910:	2112      	movs	r1, #18
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f9fc 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801091a:	69fb      	ldr	r3, [r7, #28]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010932:	2318      	movs	r3, #24
 8010934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010936:	2340      	movs	r3, #64	; 0x40
 8010938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801093a:	2300      	movs	r3, #0
 801093c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010944:	f107 0308 	add.w	r3, r7, #8
 8010948:	4619      	mov	r1, r3
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff ff0e 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010950:	f241 3288 	movw	r2, #5000	; 0x1388
 8010954:	2118      	movs	r1, #24
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 f9da 	bl	8010d10 <SDMMC_GetCmdResp1>
 801095c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801095e:	69fb      	ldr	r3, [r7, #28]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3720      	adds	r7, #32
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b088      	sub	sp, #32
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010976:	2319      	movs	r3, #25
 8010978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801097a:	2340      	movs	r3, #64	; 0x40
 801097c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801097e:	2300      	movs	r3, #0
 8010980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010986:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010988:	f107 0308 	add.w	r3, r7, #8
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f7ff feec 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010994:	f241 3288 	movw	r2, #5000	; 0x1388
 8010998:	2119      	movs	r1, #25
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f000 f9b8 	bl	8010d10 <SDMMC_GetCmdResp1>
 80109a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a2:	69fb      	ldr	r3, [r7, #28]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3720      	adds	r7, #32
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b088      	sub	sp, #32
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109b4:	2300      	movs	r3, #0
 80109b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109b8:	230c      	movs	r3, #12
 80109ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109bc:	2340      	movs	r3, #64	; 0x40
 80109be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109c0:	2300      	movs	r3, #0
 80109c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109ca:	f107 0308 	add.w	r3, r7, #8
 80109ce:	4619      	mov	r1, r3
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff fecb 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80109d6:	4a05      	ldr	r2, [pc, #20]	; (80109ec <SDMMC_CmdStopTransfer+0x40>)
 80109d8:	210c      	movs	r1, #12
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f998 	bl	8010d10 <SDMMC_GetCmdResp1>
 80109e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e2:	69fb      	ldr	r3, [r7, #28]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3720      	adds	r7, #32
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	05f5e100 	.word	0x05f5e100

080109f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b08a      	sub	sp, #40	; 0x28
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a00:	2307      	movs	r3, #7
 8010a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a04:	2340      	movs	r3, #64	; 0x40
 8010a06:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a10:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a12:	f107 0310 	add.w	r3, r7, #16
 8010a16:	4619      	mov	r1, r3
 8010a18:	68f8      	ldr	r0, [r7, #12]
 8010a1a:	f7ff fea7 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a22:	2107      	movs	r1, #7
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f000 f973 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010a2a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3728      	adds	r7, #40	; 0x28
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b088      	sub	sp, #32
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a42:	2300      	movs	r3, #0
 8010a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010a46:	2300      	movs	r3, #0
 8010a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a54:	f107 0308 	add.w	r3, r7, #8
 8010a58:	4619      	mov	r1, r3
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff fe86 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 f92d 	bl	8010cc0 <SDMMC_GetCmdError>
 8010a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a68:	69fb      	ldr	r3, [r7, #28]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3720      	adds	r7, #32
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b088      	sub	sp, #32
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010a80:	2308      	movs	r3, #8
 8010a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a84:	2340      	movs	r3, #64	; 0x40
 8010a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a92:	f107 0308 	add.w	r3, r7, #8
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff fe67 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fb16 	bl	80110d0 <SDMMC_GetCmdResp7>
 8010aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa6:	69fb      	ldr	r3, [r7, #28]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3720      	adds	r7, #32
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010abe:	2337      	movs	r3, #55	; 0x37
 8010ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ac2:	2340      	movs	r3, #64	; 0x40
 8010ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ace:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ad0:	f107 0308 	add.w	r3, r7, #8
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7ff fe48 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ae0:	2137      	movs	r1, #55	; 0x37
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f914 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aea:	69fb      	ldr	r3, [r7, #28]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3720      	adds	r7, #32
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b088      	sub	sp, #32
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b0a:	2329      	movs	r3, #41	; 0x29
 8010b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b0e:	2340      	movs	r3, #64	; 0x40
 8010b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b12:	2300      	movs	r3, #0
 8010b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b1c:	f107 0308 	add.w	r3, r7, #8
 8010b20:	4619      	mov	r1, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff fe22 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 fa23 	bl	8010f74 <SDMMC_GetCmdResp3>
 8010b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b30:	69fb      	ldr	r3, [r7, #28]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b088      	sub	sp, #32
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
 8010b42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b48:	2306      	movs	r3, #6
 8010b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b4c:	2340      	movs	r3, #64	; 0x40
 8010b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b50:	2300      	movs	r3, #0
 8010b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff fe03 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b6a:	2106      	movs	r1, #6
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f8cf 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b74:	69fb      	ldr	r3, [r7, #28]
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3720      	adds	r7, #32
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b088      	sub	sp, #32
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b86:	2300      	movs	r3, #0
 8010b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b8a:	2333      	movs	r3, #51	; 0x33
 8010b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b8e:	2340      	movs	r3, #64	; 0x40
 8010b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b92:	2300      	movs	r3, #0
 8010b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b9c:	f107 0308 	add.w	r3, r7, #8
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff fde2 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bac:	2133      	movs	r1, #51	; 0x33
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f8ae 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb6:	69fb      	ldr	r3, [r7, #28]
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3720      	adds	r7, #32
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b088      	sub	sp, #32
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bcc:	2302      	movs	r3, #2
 8010bce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010bd0:	23c0      	movs	r3, #192	; 0xc0
 8010bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bde:	f107 0308 	add.w	r3, r7, #8
 8010be2:	4619      	mov	r1, r3
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7ff fdc1 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f97c 	bl	8010ee8 <SDMMC_GetCmdResp2>
 8010bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf2:	69fb      	ldr	r3, [r7, #28]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3720      	adds	r7, #32
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b088      	sub	sp, #32
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c0a:	2309      	movs	r3, #9
 8010c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c0e:	23c0      	movs	r3, #192	; 0xc0
 8010c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c12:	2300      	movs	r3, #0
 8010c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c1c:	f107 0308 	add.w	r3, r7, #8
 8010c20:	4619      	mov	r1, r3
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ff fda2 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f000 f95d 	bl	8010ee8 <SDMMC_GetCmdResp2>
 8010c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c30:	69fb      	ldr	r3, [r7, #28]
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3720      	adds	r7, #32
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}

08010c3a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b088      	sub	sp, #32
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
 8010c42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c44:	2300      	movs	r3, #0
 8010c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c4c:	2340      	movs	r3, #64	; 0x40
 8010c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c50:	2300      	movs	r3, #0
 8010c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c5a:	f107 0308 	add.w	r3, r7, #8
 8010c5e:	4619      	mov	r1, r3
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff fd83 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c66:	683a      	ldr	r2, [r7, #0]
 8010c68:	2103      	movs	r1, #3
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f9bc 	bl	8010fe8 <SDMMC_GetCmdResp6>
 8010c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c72:	69fb      	ldr	r3, [r7, #28]
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3720      	adds	r7, #32
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b088      	sub	sp, #32
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c8a:	230d      	movs	r3, #13
 8010c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c8e:	2340      	movs	r3, #64	; 0x40
 8010c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c9c:	f107 0308 	add.w	r3, r7, #8
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f7ff fd62 	bl	801076c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cac:	210d      	movs	r1, #13
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f82e 	bl	8010d10 <SDMMC_GetCmdResp1>
 8010cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3720      	adds	r7, #32
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010cc0:	b490      	push	{r4, r7}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cc8:	4b0f      	ldr	r3, [pc, #60]	; (8010d08 <SDMMC_GetCmdError+0x48>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a0f      	ldr	r2, [pc, #60]	; (8010d0c <SDMMC_GetCmdError+0x4c>)
 8010cce:	fba2 2303 	umull	r2, r3, r2, r3
 8010cd2:	0a5b      	lsrs	r3, r3, #9
 8010cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cdc:	4623      	mov	r3, r4
 8010cde:	1e5c      	subs	r4, r3, #1
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d102      	bne.n	8010cea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ce8:	e009      	b.n	8010cfe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d0f2      	beq.n	8010cdc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	22c5      	movs	r2, #197	; 0xc5
 8010cfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3708      	adds	r7, #8
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bc90      	pop	{r4, r7}
 8010d06:	4770      	bx	lr
 8010d08:	20000000 	.word	0x20000000
 8010d0c:	10624dd3 	.word	0x10624dd3

08010d10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b087      	sub	sp, #28
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	607a      	str	r2, [r7, #4]
 8010d1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010d1e:	4b6f      	ldr	r3, [pc, #444]	; (8010edc <SDMMC_GetCmdResp1+0x1cc>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a6f      	ldr	r2, [pc, #444]	; (8010ee0 <SDMMC_GetCmdResp1+0x1d0>)
 8010d24:	fba2 2303 	umull	r2, r3, r2, r3
 8010d28:	0a5b      	lsrs	r3, r3, #9
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d30:	4623      	mov	r3, r4
 8010d32:	1e5c      	subs	r4, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d102      	bne.n	8010d3e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d3c:	e0c9      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d42:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d0f0      	beq.n	8010d30 <SDMMC_GetCmdResp1+0x20>
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1eb      	bne.n	8010d30 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d5c:	f003 0304 	and.w	r3, r3, #4
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d004      	beq.n	8010d6e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2204      	movs	r2, #4
 8010d68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d6a:	2304      	movs	r3, #4
 8010d6c:	e0b1      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d72:	f003 0301 	and.w	r3, r3, #1
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d004      	beq.n	8010d84 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d80:	2301      	movs	r3, #1
 8010d82:	e0a6      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	22c5      	movs	r2, #197	; 0xc5
 8010d88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f7ff fd18 	bl	80107c0 <SDIO_GetCommandResponse>
 8010d90:	4603      	mov	r3, r0
 8010d92:	461a      	mov	r2, r3
 8010d94:	7afb      	ldrb	r3, [r7, #11]
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d001      	beq.n	8010d9e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e099      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010d9e:	2100      	movs	r1, #0
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f7ff fd1a 	bl	80107da <SDIO_GetResponse>
 8010da6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010da8:	693a      	ldr	r2, [r7, #16]
 8010daa:	4b4e      	ldr	r3, [pc, #312]	; (8010ee4 <SDMMC_GetCmdResp1+0x1d4>)
 8010dac:	4013      	ands	r3, r2
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010db2:	2300      	movs	r3, #0
 8010db4:	e08d      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	da02      	bge.n	8010dc2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010dc0:	e087      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d001      	beq.n	8010dd0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010dcc:	2340      	movs	r3, #64	; 0x40
 8010dce:	e080      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d001      	beq.n	8010dde <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010dda:	2380      	movs	r3, #128	; 0x80
 8010ddc:	e079      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d002      	beq.n	8010dee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dec:	e071      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dfc:	e069      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e0c:	e061      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e1c:	e059      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e2c:	e051      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e3c:	e049      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e4c:	e041      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e5c:	e039      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e6c:	e031      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e7c:	e029      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e8c:	e021      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010e9c:	e019      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010eac:	e011      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d002      	beq.n	8010ebe <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010eb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010ebc:	e009      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f003 0308 	and.w	r3, r3, #8
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ec8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ecc:	e001      	b.n	8010ed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	371c      	adds	r7, #28
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd90      	pop	{r4, r7, pc}
 8010eda:	bf00      	nop
 8010edc:	20000000 	.word	0x20000000
 8010ee0:	10624dd3 	.word	0x10624dd3
 8010ee4:	fdffe008 	.word	0xfdffe008

08010ee8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010ee8:	b490      	push	{r4, r7}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ef0:	4b1e      	ldr	r3, [pc, #120]	; (8010f6c <SDMMC_GetCmdResp2+0x84>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a1e      	ldr	r2, [pc, #120]	; (8010f70 <SDMMC_GetCmdResp2+0x88>)
 8010ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8010efa:	0a5b      	lsrs	r3, r3, #9
 8010efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f04:	4623      	mov	r3, r4
 8010f06:	1e5c      	subs	r4, r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f10:	e026      	b.n	8010f60 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f16:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d0f0      	beq.n	8010f04 <SDMMC_GetCmdResp2+0x1c>
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1eb      	bne.n	8010f04 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f30:	f003 0304 	and.w	r3, r3, #4
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d004      	beq.n	8010f42 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2204      	movs	r2, #4
 8010f3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f3e:	2304      	movs	r3, #4
 8010f40:	e00e      	b.n	8010f60 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f46:	f003 0301 	and.w	r3, r3, #1
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d004      	beq.n	8010f58 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2201      	movs	r2, #1
 8010f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f54:	2301      	movs	r3, #1
 8010f56:	e003      	b.n	8010f60 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	22c5      	movs	r2, #197	; 0xc5
 8010f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f5e:	2300      	movs	r3, #0
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bc90      	pop	{r4, r7}
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	20000000 	.word	0x20000000
 8010f70:	10624dd3 	.word	0x10624dd3

08010f74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010f74:	b490      	push	{r4, r7}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f7c:	4b18      	ldr	r3, [pc, #96]	; (8010fe0 <SDMMC_GetCmdResp3+0x6c>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4a18      	ldr	r2, [pc, #96]	; (8010fe4 <SDMMC_GetCmdResp3+0x70>)
 8010f82:	fba2 2303 	umull	r2, r3, r2, r3
 8010f86:	0a5b      	lsrs	r3, r3, #9
 8010f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f90:	4623      	mov	r3, r4
 8010f92:	1e5c      	subs	r4, r3, #1
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d102      	bne.n	8010f9e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f9c:	e01b      	b.n	8010fd6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fa2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d0f0      	beq.n	8010f90 <SDMMC_GetCmdResp3+0x1c>
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1eb      	bne.n	8010f90 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fbc:	f003 0304 	and.w	r3, r3, #4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d004      	beq.n	8010fce <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2204      	movs	r2, #4
 8010fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fca:	2304      	movs	r3, #4
 8010fcc:	e003      	b.n	8010fd6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	22c5      	movs	r2, #197	; 0xc5
 8010fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3710      	adds	r7, #16
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bc90      	pop	{r4, r7}
 8010fde:	4770      	bx	lr
 8010fe0:	20000000 	.word	0x20000000
 8010fe4:	10624dd3 	.word	0x10624dd3

08010fe8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010fe8:	b590      	push	{r4, r7, lr}
 8010fea:	b087      	sub	sp, #28
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	607a      	str	r2, [r7, #4]
 8010ff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ff6:	4b34      	ldr	r3, [pc, #208]	; (80110c8 <SDMMC_GetCmdResp6+0xe0>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4a34      	ldr	r2, [pc, #208]	; (80110cc <SDMMC_GetCmdResp6+0xe4>)
 8010ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8011000:	0a5b      	lsrs	r3, r3, #9
 8011002:	f241 3288 	movw	r2, #5000	; 0x1388
 8011006:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801100a:	4623      	mov	r3, r4
 801100c:	1e5c      	subs	r4, r3, #1
 801100e:	2b00      	cmp	r3, #0
 8011010:	d102      	bne.n	8011018 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011016:	e052      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801101c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011024:	2b00      	cmp	r3, #0
 8011026:	d0f0      	beq.n	801100a <SDMMC_GetCmdResp6+0x22>
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801102e:	2b00      	cmp	r3, #0
 8011030:	d1eb      	bne.n	801100a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011036:	f003 0304 	and.w	r3, r3, #4
 801103a:	2b00      	cmp	r3, #0
 801103c:	d004      	beq.n	8011048 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2204      	movs	r2, #4
 8011042:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011044:	2304      	movs	r3, #4
 8011046:	e03a      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801104c:	f003 0301 	and.w	r3, r3, #1
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2201      	movs	r2, #1
 8011058:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801105a:	2301      	movs	r3, #1
 801105c:	e02f      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f7ff fbae 	bl	80107c0 <SDIO_GetCommandResponse>
 8011064:	4603      	mov	r3, r0
 8011066:	461a      	mov	r2, r3
 8011068:	7afb      	ldrb	r3, [r7, #11]
 801106a:	4293      	cmp	r3, r2
 801106c:	d001      	beq.n	8011072 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801106e:	2301      	movs	r3, #1
 8011070:	e025      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	22c5      	movs	r2, #197	; 0xc5
 8011076:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011078:	2100      	movs	r1, #0
 801107a:	68f8      	ldr	r0, [r7, #12]
 801107c:	f7ff fbad 	bl	80107da <SDIO_GetResponse>
 8011080:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011088:	2b00      	cmp	r3, #0
 801108a:	d106      	bne.n	801109a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	0c1b      	lsrs	r3, r3, #16
 8011090:	b29a      	uxth	r2, r3
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011096:	2300      	movs	r3, #0
 8011098:	e011      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d002      	beq.n	80110aa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80110a8:	e009      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d002      	beq.n	80110ba <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80110b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110b8:	e001      	b.n	80110be <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110be:	4618      	mov	r0, r3
 80110c0:	371c      	adds	r7, #28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd90      	pop	{r4, r7, pc}
 80110c6:	bf00      	nop
 80110c8:	20000000 	.word	0x20000000
 80110cc:	10624dd3 	.word	0x10624dd3

080110d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80110d0:	b490      	push	{r4, r7}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110d8:	4b21      	ldr	r3, [pc, #132]	; (8011160 <SDMMC_GetCmdResp7+0x90>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a21      	ldr	r2, [pc, #132]	; (8011164 <SDMMC_GetCmdResp7+0x94>)
 80110de:	fba2 2303 	umull	r2, r3, r2, r3
 80110e2:	0a5b      	lsrs	r3, r3, #9
 80110e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110ec:	4623      	mov	r3, r4
 80110ee:	1e5c      	subs	r4, r3, #1
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d102      	bne.n	80110fa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110f8:	e02c      	b.n	8011154 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011106:	2b00      	cmp	r3, #0
 8011108:	d0f0      	beq.n	80110ec <SDMMC_GetCmdResp7+0x1c>
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1eb      	bne.n	80110ec <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011118:	f003 0304 	and.w	r3, r3, #4
 801111c:	2b00      	cmp	r3, #0
 801111e:	d004      	beq.n	801112a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2204      	movs	r2, #4
 8011124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011126:	2304      	movs	r3, #4
 8011128:	e014      	b.n	8011154 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801112e:	f003 0301 	and.w	r3, r3, #1
 8011132:	2b00      	cmp	r3, #0
 8011134:	d004      	beq.n	8011140 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2201      	movs	r2, #1
 801113a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801113c:	2301      	movs	r3, #1
 801113e:	e009      	b.n	8011154 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011148:	2b00      	cmp	r3, #0
 801114a:	d002      	beq.n	8011152 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2240      	movs	r2, #64	; 0x40
 8011150:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011152:	2300      	movs	r3, #0
  
}
 8011154:	4618      	mov	r0, r3
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bc90      	pop	{r4, r7}
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	20000000 	.word	0x20000000
 8011164:	10624dd3 	.word	0x10624dd3

08011168 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801116c:	4904      	ldr	r1, [pc, #16]	; (8011180 <MX_FATFS_Init+0x18>)
 801116e:	4805      	ldr	r0, [pc, #20]	; (8011184 <MX_FATFS_Init+0x1c>)
 8011170:	f003 fb9c 	bl	80148ac <FATFS_LinkDriver>
 8011174:	4603      	mov	r3, r0
 8011176:	461a      	mov	r2, r3
 8011178:	4b03      	ldr	r3, [pc, #12]	; (8011188 <MX_FATFS_Init+0x20>)
 801117a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801117c:	bf00      	nop
 801117e:	bd80      	pop	{r7, pc}
 8011180:	2004ab70 	.word	0x2004ab70
 8011184:	0801a210 	.word	0x0801a210
 8011188:	2004ab6c 	.word	0x2004ab6c

0801118c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011192:	2300      	movs	r3, #0
 8011194:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011196:	f000 f896 	bl	80112c6 <BSP_SD_IsDetected>
 801119a:	4603      	mov	r3, r0
 801119c:	2b01      	cmp	r3, #1
 801119e:	d001      	beq.n	80111a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e012      	b.n	80111ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80111a4:	480b      	ldr	r0, [pc, #44]	; (80111d4 <BSP_SD_Init+0x48>)
 80111a6:	f7fb ffa5 	bl	800d0f4 <HAL_SD_Init>
 80111aa:	4603      	mov	r3, r0
 80111ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80111ae:	79fb      	ldrb	r3, [r7, #7]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d109      	bne.n	80111c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80111b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80111b8:	4806      	ldr	r0, [pc, #24]	; (80111d4 <BSP_SD_Init+0x48>)
 80111ba:	f7fc fd4f 	bl	800dc5c <HAL_SD_ConfigWideBusOperation>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d001      	beq.n	80111c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111c4:	2301      	movs	r3, #1
 80111c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111c8:	79fb      	ldrb	r3, [r7, #7]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	2004a96c 	.word	0x2004a96c

080111d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b086      	sub	sp, #24
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	68f9      	ldr	r1, [r7, #12]
 80111ee:	4806      	ldr	r0, [pc, #24]	; (8011208 <BSP_SD_ReadBlocks_DMA+0x30>)
 80111f0:	f7fc f810 	bl	800d214 <HAL_SD_ReadBlocks_DMA>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d001      	beq.n	80111fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80111fa:	2301      	movs	r3, #1
 80111fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80111fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	2004a96c 	.word	0x2004a96c

0801120c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b086      	sub	sp, #24
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011218:	2300      	movs	r3, #0
 801121a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	68f9      	ldr	r1, [r7, #12]
 8011222:	4806      	ldr	r0, [pc, #24]	; (801123c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011224:	f7fc f8de 	bl	800d3e4 <HAL_SD_WriteBlocks_DMA>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d001      	beq.n	8011232 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801122e:	2301      	movs	r3, #1
 8011230:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011232:	7dfb      	ldrb	r3, [r7, #23]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3718      	adds	r7, #24
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	2004a96c 	.word	0x2004a96c

08011240 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011244:	4805      	ldr	r0, [pc, #20]	; (801125c <BSP_SD_GetCardState+0x1c>)
 8011246:	f7fc fd85 	bl	800dd54 <HAL_SD_GetCardState>
 801124a:	4603      	mov	r3, r0
 801124c:	2b04      	cmp	r3, #4
 801124e:	bf14      	ite	ne
 8011250:	2301      	movne	r3, #1
 8011252:	2300      	moveq	r3, #0
 8011254:	b2db      	uxtb	r3, r3
}
 8011256:	4618      	mov	r0, r3
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	2004a96c 	.word	0x2004a96c

08011260 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011268:	6879      	ldr	r1, [r7, #4]
 801126a:	4803      	ldr	r0, [pc, #12]	; (8011278 <BSP_SD_GetCardInfo+0x18>)
 801126c:	f7fc fcca 	bl	800dc04 <HAL_SD_GetCardInfo>
}
 8011270:	bf00      	nop
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	2004a96c 	.word	0x2004a96c

0801127c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011284:	f000 f818 	bl	80112b8 <BSP_SD_AbortCallback>
}
 8011288:	bf00      	nop
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011298:	f000 f9a8 	bl	80115ec <BSP_SD_WriteCpltCallback>
}
 801129c:	bf00      	nop
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80112ac:	f000 f9aa 	bl	8011604 <BSP_SD_ReadCpltCallback>
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80112b8:	b480      	push	{r7}
 80112ba:	af00      	add	r7, sp, #0

}
 80112bc:	bf00      	nop
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b082      	sub	sp, #8
 80112ca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112cc:	2301      	movs	r3, #1
 80112ce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80112d0:	f000 f80c 	bl	80112ec <BSP_PlatformIsDetected>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d101      	bne.n	80112de <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80112da:	2300      	movs	r3, #0
 80112dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80112de:	79fb      	ldrb	r3, [r7, #7]
 80112e0:	b2db      	uxtb	r3, r3
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
	...

080112ec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80112f2:	2301      	movs	r3, #1
 80112f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80112f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80112fa:	4806      	ldr	r0, [pc, #24]	; (8011314 <BSP_PlatformIsDetected+0x28>)
 80112fc:	f7fa f87e 	bl	800b3fc <HAL_GPIO_ReadPin>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011306:	2300      	movs	r3, #0
 8011308:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801130a:	79fb      	ldrb	r3, [r7, #7]
}
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	40020000 	.word	0x40020000

08011318 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011320:	f7f8 fde2 	bl	8009ee8 <HAL_GetTick>
 8011324:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011326:	e006      	b.n	8011336 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011328:	f7ff ff8a 	bl	8011240 <BSP_SD_GetCardState>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d101      	bne.n	8011336 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011332:	2300      	movs	r3, #0
 8011334:	e009      	b.n	801134a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011336:	f7f8 fdd7 	bl	8009ee8 <HAL_GetTick>
 801133a:	4602      	mov	r2, r0
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	429a      	cmp	r2, r3
 8011344:	d8f0      	bhi.n	8011328 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011346:	f04f 33ff 	mov.w	r3, #4294967295
}
 801134a:	4618      	mov	r0, r3
 801134c:	3710      	adds	r7, #16
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
	...

08011354 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801135e:	4b0b      	ldr	r3, [pc, #44]	; (801138c <SD_CheckStatus+0x38>)
 8011360:	2201      	movs	r2, #1
 8011362:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011364:	f7ff ff6c 	bl	8011240 <BSP_SD_GetCardState>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d107      	bne.n	801137e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801136e:	4b07      	ldr	r3, [pc, #28]	; (801138c <SD_CheckStatus+0x38>)
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f023 0301 	bic.w	r3, r3, #1
 8011378:	b2da      	uxtb	r2, r3
 801137a:	4b04      	ldr	r3, [pc, #16]	; (801138c <SD_CheckStatus+0x38>)
 801137c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801137e:	4b03      	ldr	r3, [pc, #12]	; (801138c <SD_CheckStatus+0x38>)
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	b2db      	uxtb	r3, r3
}
 8011384:	4618      	mov	r0, r3
 8011386:	3708      	adds	r7, #8
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}
 801138c:	20000009 	.word	0x20000009

08011390 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	4603      	mov	r3, r0
 8011398:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801139a:	f7ff fef7 	bl	801118c <BSP_SD_Init>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d107      	bne.n	80113b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80113a4:	79fb      	ldrb	r3, [r7, #7]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff ffd4 	bl	8011354 <SD_CheckStatus>
 80113ac:	4603      	mov	r3, r0
 80113ae:	461a      	mov	r2, r3
 80113b0:	4b04      	ldr	r3, [pc, #16]	; (80113c4 <SD_initialize+0x34>)
 80113b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80113b4:	4b03      	ldr	r3, [pc, #12]	; (80113c4 <SD_initialize+0x34>)
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	b2db      	uxtb	r3, r3
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20000009 	.word	0x20000009

080113c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	4603      	mov	r3, r0
 80113d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80113d2:	79fb      	ldrb	r3, [r7, #7]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7ff ffbd 	bl	8011354 <SD_CheckStatus>
 80113da:	4603      	mov	r3, r0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60b9      	str	r1, [r7, #8]
 80113ec:	607a      	str	r2, [r7, #4]
 80113ee:	603b      	str	r3, [r7, #0]
 80113f0:	4603      	mov	r3, r0
 80113f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113f4:	2301      	movs	r3, #1
 80113f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113f8:	f247 5030 	movw	r0, #30000	; 0x7530
 80113fc:	f7ff ff8c 	bl	8011318 <SD_CheckStatusWithTimeout>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	da01      	bge.n	801140a <SD_read+0x26>
  {
    return res;
 8011406:	7dfb      	ldrb	r3, [r7, #23]
 8011408:	e03b      	b.n	8011482 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	6879      	ldr	r1, [r7, #4]
 801140e:	68b8      	ldr	r0, [r7, #8]
 8011410:	f7ff fee2 	bl	80111d8 <BSP_SD_ReadBlocks_DMA>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d132      	bne.n	8011480 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801141a:	4b1c      	ldr	r3, [pc, #112]	; (801148c <SD_read+0xa8>)
 801141c:	2200      	movs	r2, #0
 801141e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011420:	f7f8 fd62 	bl	8009ee8 <HAL_GetTick>
 8011424:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011426:	bf00      	nop
 8011428:	4b18      	ldr	r3, [pc, #96]	; (801148c <SD_read+0xa8>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d108      	bne.n	8011442 <SD_read+0x5e>
 8011430:	f7f8 fd5a 	bl	8009ee8 <HAL_GetTick>
 8011434:	4602      	mov	r2, r0
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	f247 522f 	movw	r2, #29999	; 0x752f
 801143e:	4293      	cmp	r3, r2
 8011440:	d9f2      	bls.n	8011428 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011442:	4b12      	ldr	r3, [pc, #72]	; (801148c <SD_read+0xa8>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d102      	bne.n	8011450 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801144a:	2301      	movs	r3, #1
 801144c:	75fb      	strb	r3, [r7, #23]
 801144e:	e017      	b.n	8011480 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011450:	4b0e      	ldr	r3, [pc, #56]	; (801148c <SD_read+0xa8>)
 8011452:	2200      	movs	r2, #0
 8011454:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011456:	f7f8 fd47 	bl	8009ee8 <HAL_GetTick>
 801145a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801145c:	e007      	b.n	801146e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801145e:	f7ff feef 	bl	8011240 <BSP_SD_GetCardState>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d102      	bne.n	801146e <SD_read+0x8a>
          {
            res = RES_OK;
 8011468:	2300      	movs	r3, #0
 801146a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801146c:	e008      	b.n	8011480 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801146e:	f7f8 fd3b 	bl	8009ee8 <HAL_GetTick>
 8011472:	4602      	mov	r2, r0
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	f247 522f 	movw	r2, #29999	; 0x752f
 801147c:	4293      	cmp	r3, r2
 801147e:	d9ee      	bls.n	801145e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011480:	7dfb      	ldrb	r3, [r7, #23]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3718      	adds	r7, #24
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20048208 	.word	0x20048208

08011490 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	60b9      	str	r1, [r7, #8]
 8011498:	607a      	str	r2, [r7, #4]
 801149a:	603b      	str	r3, [r7, #0]
 801149c:	4603      	mov	r3, r0
 801149e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114a0:	2301      	movs	r3, #1
 80114a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80114a4:	4b24      	ldr	r3, [pc, #144]	; (8011538 <SD_write+0xa8>)
 80114a6:	2200      	movs	r2, #0
 80114a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80114ae:	f7ff ff33 	bl	8011318 <SD_CheckStatusWithTimeout>
 80114b2:	4603      	mov	r3, r0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	da01      	bge.n	80114bc <SD_write+0x2c>
  {
    return res;
 80114b8:	7dfb      	ldrb	r3, [r7, #23]
 80114ba:	e038      	b.n	801152e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80114bc:	683a      	ldr	r2, [r7, #0]
 80114be:	6879      	ldr	r1, [r7, #4]
 80114c0:	68b8      	ldr	r0, [r7, #8]
 80114c2:	f7ff fea3 	bl	801120c <BSP_SD_WriteBlocks_DMA>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d12f      	bne.n	801152c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80114cc:	f7f8 fd0c 	bl	8009ee8 <HAL_GetTick>
 80114d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114d2:	bf00      	nop
 80114d4:	4b18      	ldr	r3, [pc, #96]	; (8011538 <SD_write+0xa8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d108      	bne.n	80114ee <SD_write+0x5e>
 80114dc:	f7f8 fd04 	bl	8009ee8 <HAL_GetTick>
 80114e0:	4602      	mov	r2, r0
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	1ad3      	subs	r3, r2, r3
 80114e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d9f2      	bls.n	80114d4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80114ee:	4b12      	ldr	r3, [pc, #72]	; (8011538 <SD_write+0xa8>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d102      	bne.n	80114fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	75fb      	strb	r3, [r7, #23]
 80114fa:	e017      	b.n	801152c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80114fc:	4b0e      	ldr	r3, [pc, #56]	; (8011538 <SD_write+0xa8>)
 80114fe:	2200      	movs	r2, #0
 8011500:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011502:	f7f8 fcf1 	bl	8009ee8 <HAL_GetTick>
 8011506:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011508:	e007      	b.n	801151a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801150a:	f7ff fe99 	bl	8011240 <BSP_SD_GetCardState>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d102      	bne.n	801151a <SD_write+0x8a>
          {
            res = RES_OK;
 8011514:	2300      	movs	r3, #0
 8011516:	75fb      	strb	r3, [r7, #23]
            break;
 8011518:	e008      	b.n	801152c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801151a:	f7f8 fce5 	bl	8009ee8 <HAL_GetTick>
 801151e:	4602      	mov	r2, r0
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	f247 522f 	movw	r2, #29999	; 0x752f
 8011528:	4293      	cmp	r3, r2
 801152a:	d9ee      	bls.n	801150a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801152c:	7dfb      	ldrb	r3, [r7, #23]
}
 801152e:	4618      	mov	r0, r3
 8011530:	3718      	adds	r7, #24
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	20048204 	.word	0x20048204

0801153c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b08c      	sub	sp, #48	; 0x30
 8011540:	af00      	add	r7, sp, #0
 8011542:	4603      	mov	r3, r0
 8011544:	603a      	str	r2, [r7, #0]
 8011546:	71fb      	strb	r3, [r7, #7]
 8011548:	460b      	mov	r3, r1
 801154a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801154c:	2301      	movs	r3, #1
 801154e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011552:	4b25      	ldr	r3, [pc, #148]	; (80115e8 <SD_ioctl+0xac>)
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	b2db      	uxtb	r3, r3
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	d001      	beq.n	8011564 <SD_ioctl+0x28>
 8011560:	2303      	movs	r3, #3
 8011562:	e03c      	b.n	80115de <SD_ioctl+0xa2>

  switch (cmd)
 8011564:	79bb      	ldrb	r3, [r7, #6]
 8011566:	2b03      	cmp	r3, #3
 8011568:	d834      	bhi.n	80115d4 <SD_ioctl+0x98>
 801156a:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <SD_ioctl+0x34>)
 801156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011570:	08011581 	.word	0x08011581
 8011574:	08011589 	.word	0x08011589
 8011578:	080115a1 	.word	0x080115a1
 801157c:	080115bb 	.word	0x080115bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011580:	2300      	movs	r3, #0
 8011582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011586:	e028      	b.n	80115da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011588:	f107 030c 	add.w	r3, r7, #12
 801158c:	4618      	mov	r0, r3
 801158e:	f7ff fe67 	bl	8011260 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011598:	2300      	movs	r3, #0
 801159a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801159e:	e01c      	b.n	80115da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115a0:	f107 030c 	add.w	r3, r7, #12
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff fe5b 	bl	8011260 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80115b2:	2300      	movs	r3, #0
 80115b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115b8:	e00f      	b.n	80115da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115ba:	f107 030c 	add.w	r3, r7, #12
 80115be:	4618      	mov	r0, r3
 80115c0:	f7ff fe4e 	bl	8011260 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	0a5a      	lsrs	r2, r3, #9
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115d2:	e002      	b.n	80115da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80115d4:	2304      	movs	r3, #4
 80115d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80115da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3730      	adds	r7, #48	; 0x30
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	20000009 	.word	0x20000009

080115ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80115ec:	b480      	push	{r7}
 80115ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80115f0:	4b03      	ldr	r3, [pc, #12]	; (8011600 <BSP_SD_WriteCpltCallback+0x14>)
 80115f2:	2201      	movs	r2, #1
 80115f4:	601a      	str	r2, [r3, #0]
}
 80115f6:	bf00      	nop
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	20048204 	.word	0x20048204

08011604 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011604:	b480      	push	{r7}
 8011606:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011608:	4b03      	ldr	r3, [pc, #12]	; (8011618 <BSP_SD_ReadCpltCallback+0x14>)
 801160a:	2201      	movs	r2, #1
 801160c:	601a      	str	r2, [r3, #0]
}
 801160e:	bf00      	nop
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr
 8011618:	20048208 	.word	0x20048208

0801161c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	4603      	mov	r3, r0
 8011624:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011626:	79fb      	ldrb	r3, [r7, #7]
 8011628:	4a08      	ldr	r2, [pc, #32]	; (801164c <disk_status+0x30>)
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4413      	add	r3, r2
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	79fa      	ldrb	r2, [r7, #7]
 8011634:	4905      	ldr	r1, [pc, #20]	; (801164c <disk_status+0x30>)
 8011636:	440a      	add	r2, r1
 8011638:	7a12      	ldrb	r2, [r2, #8]
 801163a:	4610      	mov	r0, r2
 801163c:	4798      	blx	r3
 801163e:	4603      	mov	r3, r0
 8011640:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011642:	7bfb      	ldrb	r3, [r7, #15]
}
 8011644:	4618      	mov	r0, r3
 8011646:	3710      	adds	r7, #16
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	20048234 	.word	0x20048234

08011650 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801165a:	2300      	movs	r3, #0
 801165c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	4a0d      	ldr	r2, [pc, #52]	; (8011698 <disk_initialize+0x48>)
 8011662:	5cd3      	ldrb	r3, [r2, r3]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d111      	bne.n	801168c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011668:	79fb      	ldrb	r3, [r7, #7]
 801166a:	4a0b      	ldr	r2, [pc, #44]	; (8011698 <disk_initialize+0x48>)
 801166c:	2101      	movs	r1, #1
 801166e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011670:	79fb      	ldrb	r3, [r7, #7]
 8011672:	4a09      	ldr	r2, [pc, #36]	; (8011698 <disk_initialize+0x48>)
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	4413      	add	r3, r2
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	79fa      	ldrb	r2, [r7, #7]
 801167e:	4906      	ldr	r1, [pc, #24]	; (8011698 <disk_initialize+0x48>)
 8011680:	440a      	add	r2, r1
 8011682:	7a12      	ldrb	r2, [r2, #8]
 8011684:	4610      	mov	r0, r2
 8011686:	4798      	blx	r3
 8011688:	4603      	mov	r3, r0
 801168a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801168c:	7bfb      	ldrb	r3, [r7, #15]
}
 801168e:	4618      	mov	r0, r3
 8011690:	3710      	adds	r7, #16
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	20048234 	.word	0x20048234

0801169c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801169c:	b590      	push	{r4, r7, lr}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60b9      	str	r1, [r7, #8]
 80116a4:	607a      	str	r2, [r7, #4]
 80116a6:	603b      	str	r3, [r7, #0]
 80116a8:	4603      	mov	r3, r0
 80116aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
 80116ae:	4a0a      	ldr	r2, [pc, #40]	; (80116d8 <disk_read+0x3c>)
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	4413      	add	r3, r2
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	689c      	ldr	r4, [r3, #8]
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
 80116ba:	4a07      	ldr	r2, [pc, #28]	; (80116d8 <disk_read+0x3c>)
 80116bc:	4413      	add	r3, r2
 80116be:	7a18      	ldrb	r0, [r3, #8]
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	68b9      	ldr	r1, [r7, #8]
 80116c6:	47a0      	blx	r4
 80116c8:	4603      	mov	r3, r0
 80116ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	371c      	adds	r7, #28
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd90      	pop	{r4, r7, pc}
 80116d6:	bf00      	nop
 80116d8:	20048234 	.word	0x20048234

080116dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80116dc:	b590      	push	{r4, r7, lr}
 80116de:	b087      	sub	sp, #28
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60b9      	str	r1, [r7, #8]
 80116e4:	607a      	str	r2, [r7, #4]
 80116e6:	603b      	str	r3, [r7, #0]
 80116e8:	4603      	mov	r3, r0
 80116ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	4a0a      	ldr	r2, [pc, #40]	; (8011718 <disk_write+0x3c>)
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4413      	add	r3, r2
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	68dc      	ldr	r4, [r3, #12]
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
 80116fa:	4a07      	ldr	r2, [pc, #28]	; (8011718 <disk_write+0x3c>)
 80116fc:	4413      	add	r3, r2
 80116fe:	7a18      	ldrb	r0, [r3, #8]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	68b9      	ldr	r1, [r7, #8]
 8011706:	47a0      	blx	r4
 8011708:	4603      	mov	r3, r0
 801170a:	75fb      	strb	r3, [r7, #23]
  return res;
 801170c:	7dfb      	ldrb	r3, [r7, #23]
}
 801170e:	4618      	mov	r0, r3
 8011710:	371c      	adds	r7, #28
 8011712:	46bd      	mov	sp, r7
 8011714:	bd90      	pop	{r4, r7, pc}
 8011716:	bf00      	nop
 8011718:	20048234 	.word	0x20048234

0801171c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	4603      	mov	r3, r0
 8011724:	603a      	str	r2, [r7, #0]
 8011726:	71fb      	strb	r3, [r7, #7]
 8011728:	460b      	mov	r3, r1
 801172a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801172c:	79fb      	ldrb	r3, [r7, #7]
 801172e:	4a09      	ldr	r2, [pc, #36]	; (8011754 <disk_ioctl+0x38>)
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4413      	add	r3, r2
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	79fa      	ldrb	r2, [r7, #7]
 801173a:	4906      	ldr	r1, [pc, #24]	; (8011754 <disk_ioctl+0x38>)
 801173c:	440a      	add	r2, r1
 801173e:	7a10      	ldrb	r0, [r2, #8]
 8011740:	79b9      	ldrb	r1, [r7, #6]
 8011742:	683a      	ldr	r2, [r7, #0]
 8011744:	4798      	blx	r3
 8011746:	4603      	mov	r3, r0
 8011748:	73fb      	strb	r3, [r7, #15]
  return res;
 801174a:	7bfb      	ldrb	r3, [r7, #15]
}
 801174c:	4618      	mov	r0, r3
 801174e:	3710      	adds	r7, #16
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	20048234 	.word	0x20048234

08011758 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011758:	b480      	push	{r7}
 801175a:	b085      	sub	sp, #20
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	3301      	adds	r3, #1
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011768:	89fb      	ldrh	r3, [r7, #14]
 801176a:	021b      	lsls	r3, r3, #8
 801176c:	b21a      	sxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	b21b      	sxth	r3, r3
 8011774:	4313      	orrs	r3, r2
 8011776:	b21b      	sxth	r3, r3
 8011778:	81fb      	strh	r3, [r7, #14]
	return rv;
 801177a:	89fb      	ldrh	r3, [r7, #14]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3714      	adds	r7, #20
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	3303      	adds	r3, #3
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	021b      	lsls	r3, r3, #8
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	3202      	adds	r2, #2
 80117a0:	7812      	ldrb	r2, [r2, #0]
 80117a2:	4313      	orrs	r3, r2
 80117a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	021b      	lsls	r3, r3, #8
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	3201      	adds	r2, #1
 80117ae:	7812      	ldrb	r2, [r2, #0]
 80117b0:	4313      	orrs	r3, r2
 80117b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	021b      	lsls	r3, r3, #8
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	7812      	ldrb	r2, [r2, #0]
 80117bc:	4313      	orrs	r3, r2
 80117be:	60fb      	str	r3, [r7, #12]
	return rv;
 80117c0:	68fb      	ldr	r3, [r7, #12]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr

080117ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80117ce:	b480      	push	{r7}
 80117d0:	b083      	sub	sp, #12
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
 80117d6:	460b      	mov	r3, r1
 80117d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	1c5a      	adds	r2, r3, #1
 80117de:	607a      	str	r2, [r7, #4]
 80117e0:	887a      	ldrh	r2, [r7, #2]
 80117e2:	b2d2      	uxtb	r2, r2
 80117e4:	701a      	strb	r2, [r3, #0]
 80117e6:	887b      	ldrh	r3, [r7, #2]
 80117e8:	0a1b      	lsrs	r3, r3, #8
 80117ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	607a      	str	r2, [r7, #4]
 80117f2:	887a      	ldrh	r2, [r7, #2]
 80117f4:	b2d2      	uxtb	r2, r2
 80117f6:	701a      	strb	r2, [r3, #0]
}
 80117f8:	bf00      	nop
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011804:	b480      	push	{r7}
 8011806:	b083      	sub	sp, #12
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	1c5a      	adds	r2, r3, #1
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	b2d2      	uxtb	r2, r2
 8011818:	701a      	strb	r2, [r3, #0]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	0a1b      	lsrs	r3, r3, #8
 801181e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	607a      	str	r2, [r7, #4]
 8011826:	683a      	ldr	r2, [r7, #0]
 8011828:	b2d2      	uxtb	r2, r2
 801182a:	701a      	strb	r2, [r3, #0]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	0a1b      	lsrs	r3, r3, #8
 8011830:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	1c5a      	adds	r2, r3, #1
 8011836:	607a      	str	r2, [r7, #4]
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	b2d2      	uxtb	r2, r2
 801183c:	701a      	strb	r2, [r3, #0]
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	0a1b      	lsrs	r3, r3, #8
 8011842:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	1c5a      	adds	r2, r3, #1
 8011848:	607a      	str	r2, [r7, #4]
 801184a:	683a      	ldr	r2, [r7, #0]
 801184c:	b2d2      	uxtb	r2, r2
 801184e:	701a      	strb	r2, [r3, #0]
}
 8011850:	bf00      	nop
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801185c:	b480      	push	{r7}
 801185e:	b087      	sub	sp, #28
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00d      	beq.n	8011892 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011876:	693a      	ldr	r2, [r7, #16]
 8011878:	1c53      	adds	r3, r2, #1
 801187a:	613b      	str	r3, [r7, #16]
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	1c59      	adds	r1, r3, #1
 8011880:	6179      	str	r1, [r7, #20]
 8011882:	7812      	ldrb	r2, [r2, #0]
 8011884:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	3b01      	subs	r3, #1
 801188a:	607b      	str	r3, [r7, #4]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1f1      	bne.n	8011876 <mem_cpy+0x1a>
	}
}
 8011892:	bf00      	nop
 8011894:	371c      	adds	r7, #28
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr

0801189e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801189e:	b480      	push	{r7}
 80118a0:	b087      	sub	sp, #28
 80118a2:	af00      	add	r7, sp, #0
 80118a4:	60f8      	str	r0, [r7, #12]
 80118a6:	60b9      	str	r1, [r7, #8]
 80118a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	1c5a      	adds	r2, r3, #1
 80118b2:	617a      	str	r2, [r7, #20]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	b2d2      	uxtb	r2, r2
 80118b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	3b01      	subs	r3, #1
 80118be:	607b      	str	r3, [r7, #4]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d1f3      	bne.n	80118ae <mem_set+0x10>
}
 80118c6:	bf00      	nop
 80118c8:	371c      	adds	r7, #28
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr

080118d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80118d2:	b480      	push	{r7}
 80118d4:	b089      	sub	sp, #36	; 0x24
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	60f8      	str	r0, [r7, #12]
 80118da:	60b9      	str	r1, [r7, #8]
 80118dc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	61fb      	str	r3, [r7, #28]
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	1c5a      	adds	r2, r3, #1
 80118ee:	61fa      	str	r2, [r7, #28]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	4619      	mov	r1, r3
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	1c5a      	adds	r2, r3, #1
 80118f8:	61ba      	str	r2, [r7, #24]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	1acb      	subs	r3, r1, r3
 80118fe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	3b01      	subs	r3, #1
 8011904:	607b      	str	r3, [r7, #4]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <mem_cmp+0x40>
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0eb      	beq.n	80118ea <mem_cmp+0x18>

	return r;
 8011912:	697b      	ldr	r3, [r7, #20]
}
 8011914:	4618      	mov	r0, r3
 8011916:	3724      	adds	r7, #36	; 0x24
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801192a:	e002      	b.n	8011932 <chk_chr+0x12>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	3301      	adds	r3, #1
 8011930:	607b      	str	r3, [r7, #4]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d005      	beq.n	8011946 <chk_chr+0x26>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	461a      	mov	r2, r3
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	4293      	cmp	r3, r2
 8011944:	d1f2      	bne.n	801192c <chk_chr+0xc>
	return *str;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	781b      	ldrb	r3, [r3, #0]
}
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr
	...

08011958 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011962:	2300      	movs	r3, #0
 8011964:	60bb      	str	r3, [r7, #8]
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	60fb      	str	r3, [r7, #12]
 801196a:	e029      	b.n	80119c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801196c:	4a27      	ldr	r2, [pc, #156]	; (8011a0c <chk_lock+0xb4>)
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	011b      	lsls	r3, r3, #4
 8011972:	4413      	add	r3, r2
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d01d      	beq.n	80119b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801197a:	4a24      	ldr	r2, [pc, #144]	; (8011a0c <chk_lock+0xb4>)
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	011b      	lsls	r3, r3, #4
 8011980:	4413      	add	r3, r2
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	429a      	cmp	r2, r3
 801198a:	d116      	bne.n	80119ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801198c:	4a1f      	ldr	r2, [pc, #124]	; (8011a0c <chk_lock+0xb4>)
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	011b      	lsls	r3, r3, #4
 8011992:	4413      	add	r3, r2
 8011994:	3304      	adds	r3, #4
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801199c:	429a      	cmp	r2, r3
 801199e:	d10c      	bne.n	80119ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119a0:	4a1a      	ldr	r2, [pc, #104]	; (8011a0c <chk_lock+0xb4>)
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	011b      	lsls	r3, r3, #4
 80119a6:	4413      	add	r3, r2
 80119a8:	3308      	adds	r3, #8
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d102      	bne.n	80119ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119b4:	e007      	b.n	80119c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80119b6:	2301      	movs	r3, #1
 80119b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	3301      	adds	r3, #1
 80119be:	60fb      	str	r3, [r7, #12]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d9d2      	bls.n	801196c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d109      	bne.n	80119e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d102      	bne.n	80119d8 <chk_lock+0x80>
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d101      	bne.n	80119dc <chk_lock+0x84>
 80119d8:	2300      	movs	r3, #0
 80119da:	e010      	b.n	80119fe <chk_lock+0xa6>
 80119dc:	2312      	movs	r3, #18
 80119de:	e00e      	b.n	80119fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d108      	bne.n	80119f8 <chk_lock+0xa0>
 80119e6:	4a09      	ldr	r2, [pc, #36]	; (8011a0c <chk_lock+0xb4>)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	011b      	lsls	r3, r3, #4
 80119ec:	4413      	add	r3, r2
 80119ee:	330c      	adds	r3, #12
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119f6:	d101      	bne.n	80119fc <chk_lock+0xa4>
 80119f8:	2310      	movs	r3, #16
 80119fa:	e000      	b.n	80119fe <chk_lock+0xa6>
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	20048214 	.word	0x20048214

08011a10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a16:	2300      	movs	r3, #0
 8011a18:	607b      	str	r3, [r7, #4]
 8011a1a:	e002      	b.n	8011a22 <enq_lock+0x12>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	607b      	str	r3, [r7, #4]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d806      	bhi.n	8011a36 <enq_lock+0x26>
 8011a28:	4a09      	ldr	r2, [pc, #36]	; (8011a50 <enq_lock+0x40>)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	011b      	lsls	r3, r3, #4
 8011a2e:	4413      	add	r3, r2
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1f2      	bne.n	8011a1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2b02      	cmp	r3, #2
 8011a3a:	bf14      	ite	ne
 8011a3c:	2301      	movne	r3, #1
 8011a3e:	2300      	moveq	r3, #0
 8011a40:	b2db      	uxtb	r3, r3
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	370c      	adds	r7, #12
 8011a46:	46bd      	mov	sp, r7
 8011a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop
 8011a50:	20048214 	.word	0x20048214

08011a54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a54:	b480      	push	{r7}
 8011a56:	b085      	sub	sp, #20
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a5e:	2300      	movs	r3, #0
 8011a60:	60fb      	str	r3, [r7, #12]
 8011a62:	e01f      	b.n	8011aa4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a64:	4a41      	ldr	r2, [pc, #260]	; (8011b6c <inc_lock+0x118>)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	011b      	lsls	r3, r3, #4
 8011a6a:	4413      	add	r3, r2
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d113      	bne.n	8011a9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011a76:	4a3d      	ldr	r2, [pc, #244]	; (8011b6c <inc_lock+0x118>)
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	011b      	lsls	r3, r3, #4
 8011a7c:	4413      	add	r3, r2
 8011a7e:	3304      	adds	r3, #4
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d109      	bne.n	8011a9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011a8a:	4a38      	ldr	r2, [pc, #224]	; (8011b6c <inc_lock+0x118>)
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	011b      	lsls	r3, r3, #4
 8011a90:	4413      	add	r3, r2
 8011a92:	3308      	adds	r3, #8
 8011a94:	681a      	ldr	r2, [r3, #0]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d006      	beq.n	8011aac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	60fb      	str	r3, [r7, #12]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d9dc      	bls.n	8011a64 <inc_lock+0x10>
 8011aaa:	e000      	b.n	8011aae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011aac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2b02      	cmp	r3, #2
 8011ab2:	d132      	bne.n	8011b1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	60fb      	str	r3, [r7, #12]
 8011ab8:	e002      	b.n	8011ac0 <inc_lock+0x6c>
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	3301      	adds	r3, #1
 8011abe:	60fb      	str	r3, [r7, #12]
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d806      	bhi.n	8011ad4 <inc_lock+0x80>
 8011ac6:	4a29      	ldr	r2, [pc, #164]	; (8011b6c <inc_lock+0x118>)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	011b      	lsls	r3, r3, #4
 8011acc:	4413      	add	r3, r2
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1f2      	bne.n	8011aba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2b02      	cmp	r3, #2
 8011ad8:	d101      	bne.n	8011ade <inc_lock+0x8a>
 8011ada:	2300      	movs	r3, #0
 8011adc:	e040      	b.n	8011b60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	4922      	ldr	r1, [pc, #136]	; (8011b6c <inc_lock+0x118>)
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	011b      	lsls	r3, r3, #4
 8011ae8:	440b      	add	r3, r1
 8011aea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	689a      	ldr	r2, [r3, #8]
 8011af0:	491e      	ldr	r1, [pc, #120]	; (8011b6c <inc_lock+0x118>)
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	011b      	lsls	r3, r3, #4
 8011af6:	440b      	add	r3, r1
 8011af8:	3304      	adds	r3, #4
 8011afa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	695a      	ldr	r2, [r3, #20]
 8011b00:	491a      	ldr	r1, [pc, #104]	; (8011b6c <inc_lock+0x118>)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	011b      	lsls	r3, r3, #4
 8011b06:	440b      	add	r3, r1
 8011b08:	3308      	adds	r3, #8
 8011b0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b0c:	4a17      	ldr	r2, [pc, #92]	; (8011b6c <inc_lock+0x118>)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	011b      	lsls	r3, r3, #4
 8011b12:	4413      	add	r3, r2
 8011b14:	330c      	adds	r3, #12
 8011b16:	2200      	movs	r2, #0
 8011b18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d009      	beq.n	8011b34 <inc_lock+0xe0>
 8011b20:	4a12      	ldr	r2, [pc, #72]	; (8011b6c <inc_lock+0x118>)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	011b      	lsls	r3, r3, #4
 8011b26:	4413      	add	r3, r2
 8011b28:	330c      	adds	r3, #12
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d001      	beq.n	8011b34 <inc_lock+0xe0>
 8011b30:	2300      	movs	r3, #0
 8011b32:	e015      	b.n	8011b60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d108      	bne.n	8011b4c <inc_lock+0xf8>
 8011b3a:	4a0c      	ldr	r2, [pc, #48]	; (8011b6c <inc_lock+0x118>)
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	011b      	lsls	r3, r3, #4
 8011b40:	4413      	add	r3, r2
 8011b42:	330c      	adds	r3, #12
 8011b44:	881b      	ldrh	r3, [r3, #0]
 8011b46:	3301      	adds	r3, #1
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	e001      	b.n	8011b50 <inc_lock+0xfc>
 8011b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b50:	4906      	ldr	r1, [pc, #24]	; (8011b6c <inc_lock+0x118>)
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	011b      	lsls	r3, r3, #4
 8011b56:	440b      	add	r3, r1
 8011b58:	330c      	adds	r3, #12
 8011b5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	3301      	adds	r3, #1
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3714      	adds	r7, #20
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	20048214 	.word	0x20048214

08011b70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	607b      	str	r3, [r7, #4]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d825      	bhi.n	8011bd0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011b84:	4a17      	ldr	r2, [pc, #92]	; (8011be4 <dec_lock+0x74>)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	011b      	lsls	r3, r3, #4
 8011b8a:	4413      	add	r3, r2
 8011b8c:	330c      	adds	r3, #12
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011b92:	89fb      	ldrh	r3, [r7, #14]
 8011b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b98:	d101      	bne.n	8011b9e <dec_lock+0x2e>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011b9e:	89fb      	ldrh	r3, [r7, #14]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d002      	beq.n	8011baa <dec_lock+0x3a>
 8011ba4:	89fb      	ldrh	r3, [r7, #14]
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011baa:	4a0e      	ldr	r2, [pc, #56]	; (8011be4 <dec_lock+0x74>)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	011b      	lsls	r3, r3, #4
 8011bb0:	4413      	add	r3, r2
 8011bb2:	330c      	adds	r3, #12
 8011bb4:	89fa      	ldrh	r2, [r7, #14]
 8011bb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011bb8:	89fb      	ldrh	r3, [r7, #14]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d105      	bne.n	8011bca <dec_lock+0x5a>
 8011bbe:	4a09      	ldr	r2, [pc, #36]	; (8011be4 <dec_lock+0x74>)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	011b      	lsls	r3, r3, #4
 8011bc4:	4413      	add	r3, r2
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	737b      	strb	r3, [r7, #13]
 8011bce:	e001      	b.n	8011bd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011bd0:	2302      	movs	r3, #2
 8011bd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011bd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3714      	adds	r7, #20
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	20048214 	.word	0x20048214

08011be8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60fb      	str	r3, [r7, #12]
 8011bf4:	e010      	b.n	8011c18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011bf6:	4a0d      	ldr	r2, [pc, #52]	; (8011c2c <clear_lock+0x44>)
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	011b      	lsls	r3, r3, #4
 8011bfc:	4413      	add	r3, r2
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d105      	bne.n	8011c12 <clear_lock+0x2a>
 8011c06:	4a09      	ldr	r2, [pc, #36]	; (8011c2c <clear_lock+0x44>)
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	011b      	lsls	r3, r3, #4
 8011c0c:	4413      	add	r3, r2
 8011c0e:	2200      	movs	r2, #0
 8011c10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	3301      	adds	r3, #1
 8011c16:	60fb      	str	r3, [r7, #12]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d9eb      	bls.n	8011bf6 <clear_lock+0xe>
	}
}
 8011c1e:	bf00      	nop
 8011c20:	3714      	adds	r7, #20
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop
 8011c2c:	20048214 	.word	0x20048214

08011c30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	78db      	ldrb	r3, [r3, #3]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d034      	beq.n	8011cae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	7858      	ldrb	r0, [r3, #1]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c54:	2301      	movs	r3, #1
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	f7ff fd40 	bl	80116dc <disk_write>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d002      	beq.n	8011c68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c62:	2301      	movs	r3, #1
 8011c64:	73fb      	strb	r3, [r7, #15]
 8011c66:	e022      	b.n	8011cae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c72:	697a      	ldr	r2, [r7, #20]
 8011c74:	1ad2      	subs	r2, r2, r3
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a1b      	ldr	r3, [r3, #32]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d217      	bcs.n	8011cae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	789b      	ldrb	r3, [r3, #2]
 8011c82:	613b      	str	r3, [r7, #16]
 8011c84:	e010      	b.n	8011ca8 <sync_window+0x78>
					wsect += fs->fsize;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6a1b      	ldr	r3, [r3, #32]
 8011c8a:	697a      	ldr	r2, [r7, #20]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	7858      	ldrb	r0, [r3, #1]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	697a      	ldr	r2, [r7, #20]
 8011c9e:	f7ff fd1d 	bl	80116dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	613b      	str	r3, [r7, #16]
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d8eb      	bhi.n	8011c86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3718      	adds	r7, #24
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}

08011cb8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cca:	683a      	ldr	r2, [r7, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d01b      	beq.n	8011d08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f7ff ffad 	bl	8011c30 <sync_window>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011cda:	7bfb      	ldrb	r3, [r7, #15]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d113      	bne.n	8011d08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	7858      	ldrb	r0, [r3, #1]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cea:	2301      	movs	r3, #1
 8011cec:	683a      	ldr	r2, [r7, #0]
 8011cee:	f7ff fcd5 	bl	801169c <disk_read>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d004      	beq.n	8011d02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cfc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	683a      	ldr	r2, [r7, #0]
 8011d06:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
	...

08011d14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7ff ff87 	bl	8011c30 <sync_window>
 8011d22:	4603      	mov	r3, r0
 8011d24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d26:	7bfb      	ldrb	r3, [r7, #15]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d159      	bne.n	8011de0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	2b03      	cmp	r3, #3
 8011d32:	d149      	bne.n	8011dc8 <sync_fs+0xb4>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	791b      	ldrb	r3, [r3, #4]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d145      	bne.n	8011dc8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	899b      	ldrh	r3, [r3, #12]
 8011d46:	461a      	mov	r2, r3
 8011d48:	2100      	movs	r1, #0
 8011d4a:	f7ff fda8 	bl	801189e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	3338      	adds	r3, #56	; 0x38
 8011d52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d56:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7ff fd37 	bl	80117ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	3338      	adds	r3, #56	; 0x38
 8011d64:	4921      	ldr	r1, [pc, #132]	; (8011dec <sync_fs+0xd8>)
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7ff fd4c 	bl	8011804 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	3338      	adds	r3, #56	; 0x38
 8011d70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011d74:	491e      	ldr	r1, [pc, #120]	; (8011df0 <sync_fs+0xdc>)
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7ff fd44 	bl	8011804 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	3338      	adds	r3, #56	; 0x38
 8011d80:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	695b      	ldr	r3, [r3, #20]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	4610      	mov	r0, r2
 8011d8c:	f7ff fd3a 	bl	8011804 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	3338      	adds	r3, #56	; 0x38
 8011d94:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	691b      	ldr	r3, [r3, #16]
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	4610      	mov	r0, r2
 8011da0:	f7ff fd30 	bl	8011804 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011da8:	1c5a      	adds	r2, r3, #1
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	7858      	ldrb	r0, [r3, #1]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	f7ff fc8d 	bl	80116dc <disk_write>
			fs->fsi_flag = 0;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	785b      	ldrb	r3, [r3, #1]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	2100      	movs	r1, #0
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ff fca3 	bl	801171c <disk_ioctl>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d001      	beq.n	8011de0 <sync_fs+0xcc>
 8011ddc:	2301      	movs	r3, #1
 8011dde:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	41615252 	.word	0x41615252
 8011df0:	61417272 	.word	0x61417272

08011df4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	3b02      	subs	r3, #2
 8011e02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	69db      	ldr	r3, [r3, #28]
 8011e08:	3b02      	subs	r3, #2
 8011e0a:	683a      	ldr	r2, [r7, #0]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d301      	bcc.n	8011e14 <clust2sect+0x20>
 8011e10:	2300      	movs	r3, #0
 8011e12:	e008      	b.n	8011e26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	895b      	ldrh	r3, [r3, #10]
 8011e18:	461a      	mov	r2, r3
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	fb03 f202 	mul.w	r2, r3, r2
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e24:	4413      	add	r3, r2
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	370c      	adds	r7, #12
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b086      	sub	sp, #24
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d904      	bls.n	8011e52 <get_fat+0x20>
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	69db      	ldr	r3, [r3, #28]
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d302      	bcc.n	8011e58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e52:	2301      	movs	r3, #1
 8011e54:	617b      	str	r3, [r7, #20]
 8011e56:	e0b7      	b.n	8011fc8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e58:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d05a      	beq.n	8011f1c <get_fat+0xea>
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	d07d      	beq.n	8011f66 <get_fat+0x134>
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	f040 80a2 	bne.w	8011fb4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	60fb      	str	r3, [r7, #12]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	085b      	lsrs	r3, r3, #1
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	899b      	ldrh	r3, [r3, #12]
 8011e86:	4619      	mov	r1, r3
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e8e:	4413      	add	r3, r2
 8011e90:	4619      	mov	r1, r3
 8011e92:	6938      	ldr	r0, [r7, #16]
 8011e94:	f7ff ff10 	bl	8011cb8 <move_window>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f040 808d 	bne.w	8011fba <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	60fa      	str	r2, [r7, #12]
 8011ea6:	693a      	ldr	r2, [r7, #16]
 8011ea8:	8992      	ldrh	r2, [r2, #12]
 8011eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eae:	fb02 f201 	mul.w	r2, r2, r1
 8011eb2:	1a9b      	subs	r3, r3, r2
 8011eb4:	693a      	ldr	r2, [r7, #16]
 8011eb6:	4413      	add	r3, r2
 8011eb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ebc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	899b      	ldrh	r3, [r3, #12]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ece:	4413      	add	r3, r2
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	6938      	ldr	r0, [r7, #16]
 8011ed4:	f7ff fef0 	bl	8011cb8 <move_window>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d16f      	bne.n	8011fbe <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	899b      	ldrh	r3, [r3, #12]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eea:	fb02 f201 	mul.w	r2, r2, r1
 8011eee:	1a9b      	subs	r3, r3, r2
 8011ef0:	693a      	ldr	r2, [r7, #16]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ef8:	021b      	lsls	r3, r3, #8
 8011efa:	461a      	mov	r2, r3
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	4313      	orrs	r3, r2
 8011f00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	f003 0301 	and.w	r3, r3, #1
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <get_fat+0xe0>
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	091b      	lsrs	r3, r3, #4
 8011f10:	e002      	b.n	8011f18 <get_fat+0xe6>
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f18:	617b      	str	r3, [r7, #20]
			break;
 8011f1a:	e055      	b.n	8011fc8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	899b      	ldrh	r3, [r3, #12]
 8011f24:	085b      	lsrs	r3, r3, #1
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	4619      	mov	r1, r3
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f30:	4413      	add	r3, r2
 8011f32:	4619      	mov	r1, r3
 8011f34:	6938      	ldr	r0, [r7, #16]
 8011f36:	f7ff febf 	bl	8011cb8 <move_window>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d140      	bne.n	8011fc2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	693a      	ldr	r2, [r7, #16]
 8011f4c:	8992      	ldrh	r2, [r2, #12]
 8011f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f52:	fb02 f200 	mul.w	r2, r2, r0
 8011f56:	1a9b      	subs	r3, r3, r2
 8011f58:	440b      	add	r3, r1
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7ff fbfc 	bl	8011758 <ld_word>
 8011f60:	4603      	mov	r3, r0
 8011f62:	617b      	str	r3, [r7, #20]
			break;
 8011f64:	e030      	b.n	8011fc8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	899b      	ldrh	r3, [r3, #12]
 8011f6e:	089b      	lsrs	r3, r3, #2
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	4619      	mov	r1, r3
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6938      	ldr	r0, [r7, #16]
 8011f80:	f7ff fe9a 	bl	8011cb8 <move_window>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d11d      	bne.n	8011fc6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	693a      	ldr	r2, [r7, #16]
 8011f96:	8992      	ldrh	r2, [r2, #12]
 8011f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f9c:	fb02 f200 	mul.w	r2, r2, r0
 8011fa0:	1a9b      	subs	r3, r3, r2
 8011fa2:	440b      	add	r3, r1
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff fbef 	bl	8011788 <ld_dword>
 8011faa:	4603      	mov	r3, r0
 8011fac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011fb0:	617b      	str	r3, [r7, #20]
			break;
 8011fb2:	e009      	b.n	8011fc8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	e006      	b.n	8011fc8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fba:	bf00      	nop
 8011fbc:	e004      	b.n	8011fc8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fbe:	bf00      	nop
 8011fc0:	e002      	b.n	8011fc8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fc2:	bf00      	nop
 8011fc4:	e000      	b.n	8011fc8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fc6:	bf00      	nop
		}
	}

	return val;
 8011fc8:	697b      	ldr	r3, [r7, #20]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3718      	adds	r7, #24
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}

08011fd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011fd2:	b590      	push	{r4, r7, lr}
 8011fd4:	b089      	sub	sp, #36	; 0x24
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	60f8      	str	r0, [r7, #12]
 8011fda:	60b9      	str	r1, [r7, #8]
 8011fdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011fde:	2302      	movs	r3, #2
 8011fe0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	f240 8106 	bls.w	80121f6 <put_fat+0x224>
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	69db      	ldr	r3, [r3, #28]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	f080 8100 	bcs.w	80121f6 <put_fat+0x224>
		switch (fs->fs_type) {
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	2b02      	cmp	r3, #2
 8011ffc:	f000 8088 	beq.w	8012110 <put_fat+0x13e>
 8012000:	2b03      	cmp	r3, #3
 8012002:	f000 80b0 	beq.w	8012166 <put_fat+0x194>
 8012006:	2b01      	cmp	r3, #1
 8012008:	f040 80f5 	bne.w	80121f6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	61bb      	str	r3, [r7, #24]
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	085b      	lsrs	r3, r3, #1
 8012014:	69ba      	ldr	r2, [r7, #24]
 8012016:	4413      	add	r3, r2
 8012018:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	899b      	ldrh	r3, [r3, #12]
 8012022:	4619      	mov	r1, r3
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	fbb3 f3f1 	udiv	r3, r3, r1
 801202a:	4413      	add	r3, r2
 801202c:	4619      	mov	r1, r3
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f7ff fe42 	bl	8011cb8 <move_window>
 8012034:	4603      	mov	r3, r0
 8012036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012038:	7ffb      	ldrb	r3, [r7, #31]
 801203a:	2b00      	cmp	r3, #0
 801203c:	f040 80d4 	bne.w	80121e8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	1c5a      	adds	r2, r3, #1
 801204a:	61ba      	str	r2, [r7, #24]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	8992      	ldrh	r2, [r2, #12]
 8012050:	fbb3 f0f2 	udiv	r0, r3, r2
 8012054:	fb02 f200 	mul.w	r2, r2, r0
 8012058:	1a9b      	subs	r3, r3, r2
 801205a:	440b      	add	r3, r1
 801205c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	f003 0301 	and.w	r3, r3, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00d      	beq.n	8012084 <put_fat+0xb2>
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	b25b      	sxtb	r3, r3
 801206e:	f003 030f 	and.w	r3, r3, #15
 8012072:	b25a      	sxtb	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	b2db      	uxtb	r3, r3
 8012078:	011b      	lsls	r3, r3, #4
 801207a:	b25b      	sxtb	r3, r3
 801207c:	4313      	orrs	r3, r2
 801207e:	b25b      	sxtb	r3, r3
 8012080:	b2db      	uxtb	r3, r3
 8012082:	e001      	b.n	8012088 <put_fat+0xb6>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	b2db      	uxtb	r3, r3
 8012088:	697a      	ldr	r2, [r7, #20]
 801208a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2201      	movs	r2, #1
 8012090:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	899b      	ldrh	r3, [r3, #12]
 801209a:	4619      	mov	r1, r3
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80120a2:	4413      	add	r3, r2
 80120a4:	4619      	mov	r1, r3
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f7ff fe06 	bl	8011cb8 <move_window>
 80120ac:	4603      	mov	r3, r0
 80120ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120b0:	7ffb      	ldrb	r3, [r7, #31]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f040 809a 	bne.w	80121ec <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	899b      	ldrh	r3, [r3, #12]
 80120c2:	461a      	mov	r2, r3
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80120ca:	fb02 f200 	mul.w	r2, r2, r0
 80120ce:	1a9b      	subs	r3, r3, r2
 80120d0:	440b      	add	r3, r1
 80120d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	f003 0301 	and.w	r3, r3, #1
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d003      	beq.n	80120e6 <put_fat+0x114>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	091b      	lsrs	r3, r3, #4
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	e00e      	b.n	8012104 <put_fat+0x132>
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	b25b      	sxtb	r3, r3
 80120ec:	f023 030f 	bic.w	r3, r3, #15
 80120f0:	b25a      	sxtb	r2, r3
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	0a1b      	lsrs	r3, r3, #8
 80120f6:	b25b      	sxtb	r3, r3
 80120f8:	f003 030f 	and.w	r3, r3, #15
 80120fc:	b25b      	sxtb	r3, r3
 80120fe:	4313      	orrs	r3, r2
 8012100:	b25b      	sxtb	r3, r3
 8012102:	b2db      	uxtb	r3, r3
 8012104:	697a      	ldr	r2, [r7, #20]
 8012106:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2201      	movs	r2, #1
 801210c:	70da      	strb	r2, [r3, #3]
			break;
 801210e:	e072      	b.n	80121f6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	899b      	ldrh	r3, [r3, #12]
 8012118:	085b      	lsrs	r3, r3, #1
 801211a:	b29b      	uxth	r3, r3
 801211c:	4619      	mov	r1, r3
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	fbb3 f3f1 	udiv	r3, r3, r1
 8012124:	4413      	add	r3, r2
 8012126:	4619      	mov	r1, r3
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f7ff fdc5 	bl	8011cb8 <move_window>
 801212e:	4603      	mov	r3, r0
 8012130:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012132:	7ffb      	ldrb	r3, [r7, #31]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d15b      	bne.n	80121f0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	005b      	lsls	r3, r3, #1
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	8992      	ldrh	r2, [r2, #12]
 8012146:	fbb3 f0f2 	udiv	r0, r3, r2
 801214a:	fb02 f200 	mul.w	r2, r2, r0
 801214e:	1a9b      	subs	r3, r3, r2
 8012150:	440b      	add	r3, r1
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	b292      	uxth	r2, r2
 8012156:	4611      	mov	r1, r2
 8012158:	4618      	mov	r0, r3
 801215a:	f7ff fb38 	bl	80117ce <st_word>
			fs->wflag = 1;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2201      	movs	r2, #1
 8012162:	70da      	strb	r2, [r3, #3]
			break;
 8012164:	e047      	b.n	80121f6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	899b      	ldrh	r3, [r3, #12]
 801216e:	089b      	lsrs	r3, r3, #2
 8012170:	b29b      	uxth	r3, r3
 8012172:	4619      	mov	r1, r3
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	fbb3 f3f1 	udiv	r3, r3, r1
 801217a:	4413      	add	r3, r2
 801217c:	4619      	mov	r1, r3
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	f7ff fd9a 	bl	8011cb8 <move_window>
 8012184:	4603      	mov	r3, r0
 8012186:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012188:	7ffb      	ldrb	r3, [r7, #31]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d132      	bne.n	80121f4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	009b      	lsls	r3, r3, #2
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	8992      	ldrh	r2, [r2, #12]
 80121a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80121a6:	fb02 f200 	mul.w	r2, r2, r0
 80121aa:	1a9b      	subs	r3, r3, r2
 80121ac:	440b      	add	r3, r1
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7ff faea 	bl	8011788 <ld_dword>
 80121b4:	4603      	mov	r3, r0
 80121b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121ba:	4323      	orrs	r3, r4
 80121bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	009b      	lsls	r3, r3, #2
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	8992      	ldrh	r2, [r2, #12]
 80121cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80121d0:	fb02 f200 	mul.w	r2, r2, r0
 80121d4:	1a9b      	subs	r3, r3, r2
 80121d6:	440b      	add	r3, r1
 80121d8:	6879      	ldr	r1, [r7, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7ff fb12 	bl	8011804 <st_dword>
			fs->wflag = 1;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2201      	movs	r2, #1
 80121e4:	70da      	strb	r2, [r3, #3]
			break;
 80121e6:	e006      	b.n	80121f6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121e8:	bf00      	nop
 80121ea:	e004      	b.n	80121f6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121ec:	bf00      	nop
 80121ee:	e002      	b.n	80121f6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121f0:	bf00      	nop
 80121f2:	e000      	b.n	80121f6 <put_fat+0x224>
			if (res != FR_OK) break;
 80121f4:	bf00      	nop
		}
	}
	return res;
 80121f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3724      	adds	r7, #36	; 0x24
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd90      	pop	{r4, r7, pc}

08012200 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b088      	sub	sp, #32
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	60b9      	str	r1, [r7, #8]
 801220a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d904      	bls.n	8012226 <remove_chain+0x26>
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	69db      	ldr	r3, [r3, #28]
 8012220:	68ba      	ldr	r2, [r7, #8]
 8012222:	429a      	cmp	r2, r3
 8012224:	d301      	bcc.n	801222a <remove_chain+0x2a>
 8012226:	2302      	movs	r3, #2
 8012228:	e04b      	b.n	80122c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d00c      	beq.n	801224a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012230:	f04f 32ff 	mov.w	r2, #4294967295
 8012234:	6879      	ldr	r1, [r7, #4]
 8012236:	69b8      	ldr	r0, [r7, #24]
 8012238:	f7ff fecb 	bl	8011fd2 <put_fat>
 801223c:	4603      	mov	r3, r0
 801223e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012240:	7ffb      	ldrb	r3, [r7, #31]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d001      	beq.n	801224a <remove_chain+0x4a>
 8012246:	7ffb      	ldrb	r3, [r7, #31]
 8012248:	e03b      	b.n	80122c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801224a:	68b9      	ldr	r1, [r7, #8]
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	f7ff fdf0 	bl	8011e32 <get_fat>
 8012252:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d031      	beq.n	80122be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d101      	bne.n	8012264 <remove_chain+0x64>
 8012260:	2302      	movs	r3, #2
 8012262:	e02e      	b.n	80122c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	f1b3 3fff 	cmp.w	r3, #4294967295
 801226a:	d101      	bne.n	8012270 <remove_chain+0x70>
 801226c:	2301      	movs	r3, #1
 801226e:	e028      	b.n	80122c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012270:	2200      	movs	r2, #0
 8012272:	68b9      	ldr	r1, [r7, #8]
 8012274:	69b8      	ldr	r0, [r7, #24]
 8012276:	f7ff feac 	bl	8011fd2 <put_fat>
 801227a:	4603      	mov	r3, r0
 801227c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801227e:	7ffb      	ldrb	r3, [r7, #31]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d001      	beq.n	8012288 <remove_chain+0x88>
 8012284:	7ffb      	ldrb	r3, [r7, #31]
 8012286:	e01c      	b.n	80122c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	695a      	ldr	r2, [r3, #20]
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	69db      	ldr	r3, [r3, #28]
 8012290:	3b02      	subs	r3, #2
 8012292:	429a      	cmp	r2, r3
 8012294:	d20b      	bcs.n	80122ae <remove_chain+0xae>
			fs->free_clst++;
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	695b      	ldr	r3, [r3, #20]
 801229a:	1c5a      	adds	r2, r3, #1
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	791b      	ldrb	r3, [r3, #4]
 80122a4:	f043 0301 	orr.w	r3, r3, #1
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	69db      	ldr	r3, [r3, #28]
 80122b6:	68ba      	ldr	r2, [r7, #8]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d3c6      	bcc.n	801224a <remove_chain+0x4a>
 80122bc:	e000      	b.n	80122c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3720      	adds	r7, #32
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b088      	sub	sp, #32
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
 80122d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d10d      	bne.n	80122fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d004      	beq.n	80122f6 <create_chain+0x2c>
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	69db      	ldr	r3, [r3, #28]
 80122f0:	69ba      	ldr	r2, [r7, #24]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d31b      	bcc.n	801232e <create_chain+0x64>
 80122f6:	2301      	movs	r3, #1
 80122f8:	61bb      	str	r3, [r7, #24]
 80122fa:	e018      	b.n	801232e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7ff fd97 	bl	8011e32 <get_fat>
 8012304:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2b01      	cmp	r3, #1
 801230a:	d801      	bhi.n	8012310 <create_chain+0x46>
 801230c:	2301      	movs	r3, #1
 801230e:	e070      	b.n	80123f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012316:	d101      	bne.n	801231c <create_chain+0x52>
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	e06a      	b.n	80123f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	69db      	ldr	r3, [r3, #28]
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	429a      	cmp	r2, r3
 8012324:	d201      	bcs.n	801232a <create_chain+0x60>
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	e063      	b.n	80123f2 <create_chain+0x128>
		scl = clst;
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801232e:	69bb      	ldr	r3, [r7, #24]
 8012330:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	3301      	adds	r3, #1
 8012336:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	69db      	ldr	r3, [r3, #28]
 801233c:	69fa      	ldr	r2, [r7, #28]
 801233e:	429a      	cmp	r2, r3
 8012340:	d307      	bcc.n	8012352 <create_chain+0x88>
				ncl = 2;
 8012342:	2302      	movs	r3, #2
 8012344:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012346:	69fa      	ldr	r2, [r7, #28]
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	429a      	cmp	r2, r3
 801234c:	d901      	bls.n	8012352 <create_chain+0x88>
 801234e:	2300      	movs	r3, #0
 8012350:	e04f      	b.n	80123f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012352:	69f9      	ldr	r1, [r7, #28]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fd6c 	bl	8011e32 <get_fat>
 801235a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00e      	beq.n	8012380 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2b01      	cmp	r3, #1
 8012366:	d003      	beq.n	8012370 <create_chain+0xa6>
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801236e:	d101      	bne.n	8012374 <create_chain+0xaa>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	e03e      	b.n	80123f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012374:	69fa      	ldr	r2, [r7, #28]
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	429a      	cmp	r2, r3
 801237a:	d1da      	bne.n	8012332 <create_chain+0x68>
 801237c:	2300      	movs	r3, #0
 801237e:	e038      	b.n	80123f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012380:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012382:	f04f 32ff 	mov.w	r2, #4294967295
 8012386:	69f9      	ldr	r1, [r7, #28]
 8012388:	6938      	ldr	r0, [r7, #16]
 801238a:	f7ff fe22 	bl	8011fd2 <put_fat>
 801238e:	4603      	mov	r3, r0
 8012390:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012392:	7dfb      	ldrb	r3, [r7, #23]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <create_chain+0xe2>
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d006      	beq.n	80123ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801239e:	69fa      	ldr	r2, [r7, #28]
 80123a0:	6839      	ldr	r1, [r7, #0]
 80123a2:	6938      	ldr	r0, [r7, #16]
 80123a4:	f7ff fe15 	bl	8011fd2 <put_fat>
 80123a8:	4603      	mov	r3, r0
 80123aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123ac:	7dfb      	ldrb	r3, [r7, #23]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d116      	bne.n	80123e0 <create_chain+0x116>
		fs->last_clst = ncl;
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	69fa      	ldr	r2, [r7, #28]
 80123b6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	695a      	ldr	r2, [r3, #20]
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	69db      	ldr	r3, [r3, #28]
 80123c0:	3b02      	subs	r3, #2
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d804      	bhi.n	80123d0 <create_chain+0x106>
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	695b      	ldr	r3, [r3, #20]
 80123ca:	1e5a      	subs	r2, r3, #1
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	791b      	ldrb	r3, [r3, #4]
 80123d4:	f043 0301 	orr.w	r3, r3, #1
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	711a      	strb	r2, [r3, #4]
 80123de:	e007      	b.n	80123f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80123e0:	7dfb      	ldrb	r3, [r7, #23]
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d102      	bne.n	80123ec <create_chain+0x122>
 80123e6:	f04f 33ff 	mov.w	r3, #4294967295
 80123ea:	e000      	b.n	80123ee <create_chain+0x124>
 80123ec:	2301      	movs	r3, #1
 80123ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80123f0:	69fb      	ldr	r3, [r7, #28]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3720      	adds	r7, #32
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80123fa:	b480      	push	{r7}
 80123fc:	b087      	sub	sp, #28
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
 8012402:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240e:	3304      	adds	r3, #4
 8012410:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	899b      	ldrh	r3, [r3, #12]
 8012416:	461a      	mov	r2, r3
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	fbb3 f3f2 	udiv	r3, r3, r2
 801241e:	68fa      	ldr	r2, [r7, #12]
 8012420:	8952      	ldrh	r2, [r2, #10]
 8012422:	fbb3 f3f2 	udiv	r3, r3, r2
 8012426:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	1d1a      	adds	r2, r3, #4
 801242c:	613a      	str	r2, [r7, #16]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d101      	bne.n	801243c <clmt_clust+0x42>
 8012438:	2300      	movs	r3, #0
 801243a:	e010      	b.n	801245e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801243c:	697a      	ldr	r2, [r7, #20]
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	429a      	cmp	r2, r3
 8012442:	d307      	bcc.n	8012454 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012444:	697a      	ldr	r2, [r7, #20]
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	617b      	str	r3, [r7, #20]
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	3304      	adds	r3, #4
 8012450:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012452:	e7e9      	b.n	8012428 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012454:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	4413      	add	r3, r2
}
 801245e:	4618      	mov	r0, r3
 8012460:	371c      	adds	r7, #28
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr

0801246a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801246a:	b580      	push	{r7, lr}
 801246c:	b086      	sub	sp, #24
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012480:	d204      	bcs.n	801248c <dir_sdi+0x22>
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	f003 031f 	and.w	r3, r3, #31
 8012488:	2b00      	cmp	r3, #0
 801248a:	d001      	beq.n	8012490 <dir_sdi+0x26>
		return FR_INT_ERR;
 801248c:	2302      	movs	r3, #2
 801248e:	e071      	b.n	8012574 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	683a      	ldr	r2, [r7, #0]
 8012494:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d106      	bne.n	80124b0 <dir_sdi+0x46>
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	2b02      	cmp	r3, #2
 80124a8:	d902      	bls.n	80124b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d10c      	bne.n	80124d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	095b      	lsrs	r3, r3, #5
 80124ba:	693a      	ldr	r2, [r7, #16]
 80124bc:	8912      	ldrh	r2, [r2, #8]
 80124be:	4293      	cmp	r3, r2
 80124c0:	d301      	bcc.n	80124c6 <dir_sdi+0x5c>
 80124c2:	2302      	movs	r3, #2
 80124c4:	e056      	b.n	8012574 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	61da      	str	r2, [r3, #28]
 80124ce:	e02d      	b.n	801252c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	895b      	ldrh	r3, [r3, #10]
 80124d4:	461a      	mov	r2, r3
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	899b      	ldrh	r3, [r3, #12]
 80124da:	fb03 f302 	mul.w	r3, r3, r2
 80124de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124e0:	e019      	b.n	8012516 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6979      	ldr	r1, [r7, #20]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7ff fca3 	bl	8011e32 <get_fat>
 80124ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f4:	d101      	bne.n	80124fa <dir_sdi+0x90>
 80124f6:	2301      	movs	r3, #1
 80124f8:	e03c      	b.n	8012574 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d904      	bls.n	801250a <dir_sdi+0xa0>
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	69db      	ldr	r3, [r3, #28]
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	429a      	cmp	r2, r3
 8012508:	d301      	bcc.n	801250e <dir_sdi+0xa4>
 801250a:	2302      	movs	r3, #2
 801250c:	e032      	b.n	8012574 <dir_sdi+0x10a>
			ofs -= csz;
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	1ad3      	subs	r3, r2, r3
 8012514:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012516:	683a      	ldr	r2, [r7, #0]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	429a      	cmp	r2, r3
 801251c:	d2e1      	bcs.n	80124e2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801251e:	6979      	ldr	r1, [r7, #20]
 8012520:	6938      	ldr	r0, [r7, #16]
 8012522:	f7ff fc67 	bl	8011df4 <clust2sect>
 8012526:	4602      	mov	r2, r0
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	697a      	ldr	r2, [r7, #20]
 8012530:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d101      	bne.n	801253e <dir_sdi+0xd4>
 801253a:	2302      	movs	r3, #2
 801253c:	e01a      	b.n	8012574 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	69da      	ldr	r2, [r3, #28]
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	899b      	ldrh	r3, [r3, #12]
 8012546:	4619      	mov	r1, r3
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	fbb3 f3f1 	udiv	r3, r3, r1
 801254e:	441a      	add	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	899b      	ldrh	r3, [r3, #12]
 801255e:	461a      	mov	r2, r3
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	fbb3 f0f2 	udiv	r0, r3, r2
 8012566:	fb02 f200 	mul.w	r2, r2, r0
 801256a:	1a9b      	subs	r3, r3, r2
 801256c:	18ca      	adds	r2, r1, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	3718      	adds	r7, #24
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b086      	sub	sp, #24
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	695b      	ldr	r3, [r3, #20]
 8012590:	3320      	adds	r3, #32
 8012592:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	69db      	ldr	r3, [r3, #28]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d003      	beq.n	80125a4 <dir_next+0x28>
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125a2:	d301      	bcc.n	80125a8 <dir_next+0x2c>
 80125a4:	2304      	movs	r3, #4
 80125a6:	e0bb      	b.n	8012720 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	461a      	mov	r2, r3
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80125b4:	fb02 f201 	mul.w	r2, r2, r1
 80125b8:	1a9b      	subs	r3, r3, r2
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f040 809d 	bne.w	80126fa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	69db      	ldr	r3, [r3, #28]
 80125c4:	1c5a      	adds	r2, r3, #1
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	699b      	ldr	r3, [r3, #24]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d10b      	bne.n	80125ea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	095b      	lsrs	r3, r3, #5
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	8912      	ldrh	r2, [r2, #8]
 80125da:	4293      	cmp	r3, r2
 80125dc:	f0c0 808d 	bcc.w	80126fa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	61da      	str	r2, [r3, #28]
 80125e6:	2304      	movs	r3, #4
 80125e8:	e09a      	b.n	8012720 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	899b      	ldrh	r3, [r3, #12]
 80125ee:	461a      	mov	r2, r3
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80125f6:	68fa      	ldr	r2, [r7, #12]
 80125f8:	8952      	ldrh	r2, [r2, #10]
 80125fa:	3a01      	subs	r2, #1
 80125fc:	4013      	ands	r3, r2
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d17b      	bne.n	80126fa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	4619      	mov	r1, r3
 801260a:	4610      	mov	r0, r2
 801260c:	f7ff fc11 	bl	8011e32 <get_fat>
 8012610:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d801      	bhi.n	801261c <dir_next+0xa0>
 8012618:	2302      	movs	r3, #2
 801261a:	e081      	b.n	8012720 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012622:	d101      	bne.n	8012628 <dir_next+0xac>
 8012624:	2301      	movs	r3, #1
 8012626:	e07b      	b.n	8012720 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	69db      	ldr	r3, [r3, #28]
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	429a      	cmp	r2, r3
 8012630:	d359      	bcc.n	80126e6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d104      	bne.n	8012642 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2200      	movs	r2, #0
 801263c:	61da      	str	r2, [r3, #28]
 801263e:	2304      	movs	r3, #4
 8012640:	e06e      	b.n	8012720 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	699b      	ldr	r3, [r3, #24]
 8012648:	4619      	mov	r1, r3
 801264a:	4610      	mov	r0, r2
 801264c:	f7ff fe3d 	bl	80122ca <create_chain>
 8012650:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <dir_next+0xe0>
 8012658:	2307      	movs	r3, #7
 801265a:	e061      	b.n	8012720 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	2b01      	cmp	r3, #1
 8012660:	d101      	bne.n	8012666 <dir_next+0xea>
 8012662:	2302      	movs	r3, #2
 8012664:	e05c      	b.n	8012720 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801266c:	d101      	bne.n	8012672 <dir_next+0xf6>
 801266e:	2301      	movs	r3, #1
 8012670:	e056      	b.n	8012720 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f7ff fadc 	bl	8011c30 <sync_window>
 8012678:	4603      	mov	r3, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	d001      	beq.n	8012682 <dir_next+0x106>
 801267e:	2301      	movs	r3, #1
 8012680:	e04e      	b.n	8012720 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	899b      	ldrh	r3, [r3, #12]
 801268c:	461a      	mov	r2, r3
 801268e:	2100      	movs	r1, #0
 8012690:	f7ff f905 	bl	801189e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012694:	2300      	movs	r3, #0
 8012696:	613b      	str	r3, [r7, #16]
 8012698:	6979      	ldr	r1, [r7, #20]
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f7ff fbaa 	bl	8011df4 <clust2sect>
 80126a0:	4602      	mov	r2, r0
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	635a      	str	r2, [r3, #52]	; 0x34
 80126a6:	e012      	b.n	80126ce <dir_next+0x152>
						fs->wflag = 1;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2201      	movs	r2, #1
 80126ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80126ae:	68f8      	ldr	r0, [r7, #12]
 80126b0:	f7ff fabe 	bl	8011c30 <sync_window>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d001      	beq.n	80126be <dir_next+0x142>
 80126ba:	2301      	movs	r3, #1
 80126bc:	e030      	b.n	8012720 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	3301      	adds	r3, #1
 80126c2:	613b      	str	r3, [r7, #16]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126c8:	1c5a      	adds	r2, r3, #1
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	635a      	str	r2, [r3, #52]	; 0x34
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	895b      	ldrh	r3, [r3, #10]
 80126d2:	461a      	mov	r2, r3
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d3e6      	bcc.n	80126a8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	1ad2      	subs	r2, r2, r3
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	697a      	ldr	r2, [r7, #20]
 80126ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80126ec:	6979      	ldr	r1, [r7, #20]
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	f7ff fb80 	bl	8011df4 <clust2sect>
 80126f4:	4602      	mov	r2, r0
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	68ba      	ldr	r2, [r7, #8]
 80126fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	899b      	ldrh	r3, [r3, #12]
 801270a:	461a      	mov	r2, r3
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012712:	fb02 f200 	mul.w	r2, r2, r0
 8012716:	1a9b      	subs	r3, r3, r2
 8012718:	18ca      	adds	r2, r1, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801271e:	2300      	movs	r3, #0
}
 8012720:	4618      	mov	r0, r3
 8012722:	3718      	adds	r7, #24
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b086      	sub	sp, #24
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012738:	2100      	movs	r1, #0
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7ff fe95 	bl	801246a <dir_sdi>
 8012740:	4603      	mov	r3, r0
 8012742:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012744:	7dfb      	ldrb	r3, [r7, #23]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d12b      	bne.n	80127a2 <dir_alloc+0x7a>
		n = 0;
 801274a:	2300      	movs	r3, #0
 801274c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	69db      	ldr	r3, [r3, #28]
 8012752:	4619      	mov	r1, r3
 8012754:	68f8      	ldr	r0, [r7, #12]
 8012756:	f7ff faaf 	bl	8011cb8 <move_window>
 801275a:	4603      	mov	r3, r0
 801275c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801275e:	7dfb      	ldrb	r3, [r7, #23]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d11d      	bne.n	80127a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6a1b      	ldr	r3, [r3, #32]
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	2be5      	cmp	r3, #229	; 0xe5
 801276c:	d004      	beq.n	8012778 <dir_alloc+0x50>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6a1b      	ldr	r3, [r3, #32]
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d107      	bne.n	8012788 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	3301      	adds	r3, #1
 801277c:	613b      	str	r3, [r7, #16]
 801277e:	693a      	ldr	r2, [r7, #16]
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	429a      	cmp	r2, r3
 8012784:	d102      	bne.n	801278c <dir_alloc+0x64>
 8012786:	e00c      	b.n	80127a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012788:	2300      	movs	r3, #0
 801278a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801278c:	2101      	movs	r1, #1
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff fef4 	bl	801257c <dir_next>
 8012794:	4603      	mov	r3, r0
 8012796:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012798:	7dfb      	ldrb	r3, [r7, #23]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d0d7      	beq.n	801274e <dir_alloc+0x26>
 801279e:	e000      	b.n	80127a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127a2:	7dfb      	ldrb	r3, [r7, #23]
 80127a4:	2b04      	cmp	r3, #4
 80127a6:	d101      	bne.n	80127ac <dir_alloc+0x84>
 80127a8:	2307      	movs	r3, #7
 80127aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80127ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3718      	adds	r7, #24
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b084      	sub	sp, #16
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	331a      	adds	r3, #26
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7fe ffc7 	bl	8011758 <ld_word>
 80127ca:	4603      	mov	r3, r0
 80127cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	2b03      	cmp	r3, #3
 80127d4:	d109      	bne.n	80127ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	3314      	adds	r3, #20
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fe ffbc 	bl	8011758 <ld_word>
 80127e0:	4603      	mov	r3, r0
 80127e2:	041b      	lsls	r3, r3, #16
 80127e4:	68fa      	ldr	r2, [r7, #12]
 80127e6:	4313      	orrs	r3, r2
 80127e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80127ea:	68fb      	ldr	r3, [r7, #12]
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3710      	adds	r7, #16
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	331a      	adds	r3, #26
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	b292      	uxth	r2, r2
 8012808:	4611      	mov	r1, r2
 801280a:	4618      	mov	r0, r3
 801280c:	f7fe ffdf 	bl	80117ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	2b03      	cmp	r3, #3
 8012816:	d109      	bne.n	801282c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	f103 0214 	add.w	r2, r3, #20
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	0c1b      	lsrs	r3, r3, #16
 8012822:	b29b      	uxth	r3, r3
 8012824:	4619      	mov	r1, r3
 8012826:	4610      	mov	r0, r2
 8012828:	f7fe ffd1 	bl	80117ce <st_word>
	}
}
 801282c:	bf00      	nop
 801282e:	3710      	adds	r7, #16
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801283e:	2304      	movs	r3, #4
 8012840:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012848:	e03c      	b.n	80128c4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	69db      	ldr	r3, [r3, #28]
 801284e:	4619      	mov	r1, r3
 8012850:	6938      	ldr	r0, [r7, #16]
 8012852:	f7ff fa31 	bl	8011cb8 <move_window>
 8012856:	4603      	mov	r3, r0
 8012858:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801285a:	7dfb      	ldrb	r3, [r7, #23]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d136      	bne.n	80128ce <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6a1b      	ldr	r3, [r3, #32]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d102      	bne.n	8012874 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801286e:	2304      	movs	r3, #4
 8012870:	75fb      	strb	r3, [r7, #23]
 8012872:	e031      	b.n	80128d8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6a1b      	ldr	r3, [r3, #32]
 8012878:	330b      	adds	r3, #11
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012880:	73bb      	strb	r3, [r7, #14]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	7bba      	ldrb	r2, [r7, #14]
 8012886:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012888:	7bfb      	ldrb	r3, [r7, #15]
 801288a:	2be5      	cmp	r3, #229	; 0xe5
 801288c:	d011      	beq.n	80128b2 <dir_read+0x7e>
 801288e:	7bfb      	ldrb	r3, [r7, #15]
 8012890:	2b2e      	cmp	r3, #46	; 0x2e
 8012892:	d00e      	beq.n	80128b2 <dir_read+0x7e>
 8012894:	7bbb      	ldrb	r3, [r7, #14]
 8012896:	2b0f      	cmp	r3, #15
 8012898:	d00b      	beq.n	80128b2 <dir_read+0x7e>
 801289a:	7bbb      	ldrb	r3, [r7, #14]
 801289c:	f023 0320 	bic.w	r3, r3, #32
 80128a0:	2b08      	cmp	r3, #8
 80128a2:	bf0c      	ite	eq
 80128a4:	2301      	moveq	r3, #1
 80128a6:	2300      	movne	r3, #0
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	461a      	mov	r2, r3
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	4293      	cmp	r3, r2
 80128b0:	d00f      	beq.n	80128d2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80128b2:	2100      	movs	r1, #0
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7ff fe61 	bl	801257c <dir_next>
 80128ba:	4603      	mov	r3, r0
 80128bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128be:	7dfb      	ldrb	r3, [r7, #23]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d108      	bne.n	80128d6 <dir_read+0xa2>
	while (dp->sect) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	69db      	ldr	r3, [r3, #28]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d1be      	bne.n	801284a <dir_read+0x16>
 80128cc:	e004      	b.n	80128d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128ce:	bf00      	nop
 80128d0:	e002      	b.n	80128d8 <dir_read+0xa4>
				break;
 80128d2:	bf00      	nop
 80128d4:	e000      	b.n	80128d8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128d6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80128d8:	7dfb      	ldrb	r3, [r7, #23]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d002      	beq.n	80128e4 <dir_read+0xb0>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	61da      	str	r2, [r3, #28]
	return res;
 80128e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3718      	adds	r7, #24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b086      	sub	sp, #24
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80128fc:	2100      	movs	r1, #0
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff fdb3 	bl	801246a <dir_sdi>
 8012904:	4603      	mov	r3, r0
 8012906:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012908:	7dfb      	ldrb	r3, [r7, #23]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d001      	beq.n	8012912 <dir_find+0x24>
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	e03e      	b.n	8012990 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	69db      	ldr	r3, [r3, #28]
 8012916:	4619      	mov	r1, r3
 8012918:	6938      	ldr	r0, [r7, #16]
 801291a:	f7ff f9cd 	bl	8011cb8 <move_window>
 801291e:	4603      	mov	r3, r0
 8012920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012922:	7dfb      	ldrb	r3, [r7, #23]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d12f      	bne.n	8012988 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6a1b      	ldr	r3, [r3, #32]
 801292c:	781b      	ldrb	r3, [r3, #0]
 801292e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012930:	7bfb      	ldrb	r3, [r7, #15]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d102      	bne.n	801293c <dir_find+0x4e>
 8012936:	2304      	movs	r3, #4
 8012938:	75fb      	strb	r3, [r7, #23]
 801293a:	e028      	b.n	801298e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a1b      	ldr	r3, [r3, #32]
 8012940:	330b      	adds	r3, #11
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012948:	b2da      	uxtb	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a1b      	ldr	r3, [r3, #32]
 8012952:	330b      	adds	r3, #11
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	f003 0308 	and.w	r3, r3, #8
 801295a:	2b00      	cmp	r3, #0
 801295c:	d10a      	bne.n	8012974 <dir_find+0x86>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a18      	ldr	r0, [r3, #32]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3324      	adds	r3, #36	; 0x24
 8012966:	220b      	movs	r2, #11
 8012968:	4619      	mov	r1, r3
 801296a:	f7fe ffb2 	bl	80118d2 <mem_cmp>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d00b      	beq.n	801298c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012974:	2100      	movs	r1, #0
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fe00 	bl	801257c <dir_next>
 801297c:	4603      	mov	r3, r0
 801297e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012980:	7dfb      	ldrb	r3, [r7, #23]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d0c5      	beq.n	8012912 <dir_find+0x24>
 8012986:	e002      	b.n	801298e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012988:	bf00      	nop
 801298a:	e000      	b.n	801298e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801298c:	bf00      	nop

	return res;
 801298e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012990:	4618      	mov	r0, r3
 8012992:	3718      	adds	r7, #24
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80129a6:	2101      	movs	r1, #1
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f7ff febd 	bl	8012728 <dir_alloc>
 80129ae:	4603      	mov	r3, r0
 80129b0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129b2:	7bfb      	ldrb	r3, [r7, #15]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d11c      	bne.n	80129f2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	69db      	ldr	r3, [r3, #28]
 80129bc:	4619      	mov	r1, r3
 80129be:	68b8      	ldr	r0, [r7, #8]
 80129c0:	f7ff f97a 	bl	8011cb8 <move_window>
 80129c4:	4603      	mov	r3, r0
 80129c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129c8:	7bfb      	ldrb	r3, [r7, #15]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d111      	bne.n	80129f2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6a1b      	ldr	r3, [r3, #32]
 80129d2:	2220      	movs	r2, #32
 80129d4:	2100      	movs	r1, #0
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fe ff61 	bl	801189e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6a18      	ldr	r0, [r3, #32]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	3324      	adds	r3, #36	; 0x24
 80129e4:	220b      	movs	r2, #11
 80129e6:	4619      	mov	r1, r3
 80129e8:	f7fe ff38 	bl	801185c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	2201      	movs	r2, #1
 80129f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80129f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	69db      	ldr	r3, [r3, #28]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	68f8      	ldr	r0, [r7, #12]
 8012a12:	f7ff f951 	bl	8011cb8 <move_window>
 8012a16:	4603      	mov	r3, r0
 8012a18:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012a1a:	7afb      	ldrb	r3, [r7, #11]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d106      	bne.n	8012a2e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6a1b      	ldr	r3, [r3, #32]
 8012a24:	22e5      	movs	r2, #229	; 0xe5
 8012a26:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3710      	adds	r7, #16
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b088      	sub	sp, #32
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	60fb      	str	r3, [r7, #12]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	3324      	adds	r3, #36	; 0x24
 8012a4c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012a4e:	220b      	movs	r2, #11
 8012a50:	2120      	movs	r1, #32
 8012a52:	68b8      	ldr	r0, [r7, #8]
 8012a54:	f7fe ff23 	bl	801189e <mem_set>
	si = i = 0; ni = 8;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	613b      	str	r3, [r7, #16]
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	617b      	str	r3, [r7, #20]
 8012a60:	2308      	movs	r3, #8
 8012a62:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012a64:	68fa      	ldr	r2, [r7, #12]
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	4413      	add	r3, r2
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8012a6e:	d12f      	bne.n	8012ad0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	1c5a      	adds	r2, r3, #1
 8012a74:	617a      	str	r2, [r7, #20]
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	4413      	add	r3, r2
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012a7e:	7ffb      	ldrb	r3, [r7, #31]
 8012a80:	2b2e      	cmp	r3, #46	; 0x2e
 8012a82:	d10a      	bne.n	8012a9a <create_name+0x62>
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	2b02      	cmp	r3, #2
 8012a88:	d807      	bhi.n	8012a9a <create_name+0x62>
			sfn[i++] = c;
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	1c5a      	adds	r2, r3, #1
 8012a8e:	613a      	str	r2, [r7, #16]
 8012a90:	68ba      	ldr	r2, [r7, #8]
 8012a92:	4413      	add	r3, r2
 8012a94:	7ffa      	ldrb	r2, [r7, #31]
 8012a96:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012a98:	e7ea      	b.n	8012a70 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012a9a:	7ffb      	ldrb	r3, [r7, #31]
 8012a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a9e:	d007      	beq.n	8012ab0 <create_name+0x78>
 8012aa0:	7ffb      	ldrb	r3, [r7, #31]
 8012aa2:	2b5c      	cmp	r3, #92	; 0x5c
 8012aa4:	d004      	beq.n	8012ab0 <create_name+0x78>
 8012aa6:	7ffb      	ldrb	r3, [r7, #31]
 8012aa8:	2b20      	cmp	r3, #32
 8012aaa:	d901      	bls.n	8012ab0 <create_name+0x78>
 8012aac:	2306      	movs	r3, #6
 8012aae:	e084      	b.n	8012bba <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012ab0:	68fa      	ldr	r2, [r7, #12]
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	441a      	add	r2, r3
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012aba:	7ffb      	ldrb	r3, [r7, #31]
 8012abc:	2b20      	cmp	r3, #32
 8012abe:	d801      	bhi.n	8012ac4 <create_name+0x8c>
 8012ac0:	2224      	movs	r2, #36	; 0x24
 8012ac2:	e000      	b.n	8012ac6 <create_name+0x8e>
 8012ac4:	2220      	movs	r2, #32
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	330b      	adds	r3, #11
 8012aca:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012acc:	2300      	movs	r3, #0
 8012ace:	e074      	b.n	8012bba <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	1c5a      	adds	r2, r3, #1
 8012ad4:	617a      	str	r2, [r7, #20]
 8012ad6:	68fa      	ldr	r2, [r7, #12]
 8012ad8:	4413      	add	r3, r2
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012ade:	7ffb      	ldrb	r3, [r7, #31]
 8012ae0:	2b20      	cmp	r3, #32
 8012ae2:	d94e      	bls.n	8012b82 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ae4:	7ffb      	ldrb	r3, [r7, #31]
 8012ae6:	2b2f      	cmp	r3, #47	; 0x2f
 8012ae8:	d006      	beq.n	8012af8 <create_name+0xc0>
 8012aea:	7ffb      	ldrb	r3, [r7, #31]
 8012aec:	2b5c      	cmp	r3, #92	; 0x5c
 8012aee:	d110      	bne.n	8012b12 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012af0:	e002      	b.n	8012af8 <create_name+0xc0>
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	3301      	adds	r3, #1
 8012af6:	617b      	str	r3, [r7, #20]
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	4413      	add	r3, r2
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	2b2f      	cmp	r3, #47	; 0x2f
 8012b02:	d0f6      	beq.n	8012af2 <create_name+0xba>
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	4413      	add	r3, r2
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	2b5c      	cmp	r3, #92	; 0x5c
 8012b0e:	d0f0      	beq.n	8012af2 <create_name+0xba>
			break;
 8012b10:	e038      	b.n	8012b84 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012b12:	7ffb      	ldrb	r3, [r7, #31]
 8012b14:	2b2e      	cmp	r3, #46	; 0x2e
 8012b16:	d003      	beq.n	8012b20 <create_name+0xe8>
 8012b18:	693a      	ldr	r2, [r7, #16]
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d30c      	bcc.n	8012b3a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	2b0b      	cmp	r3, #11
 8012b24:	d002      	beq.n	8012b2c <create_name+0xf4>
 8012b26:	7ffb      	ldrb	r3, [r7, #31]
 8012b28:	2b2e      	cmp	r3, #46	; 0x2e
 8012b2a:	d001      	beq.n	8012b30 <create_name+0xf8>
 8012b2c:	2306      	movs	r3, #6
 8012b2e:	e044      	b.n	8012bba <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012b30:	2308      	movs	r3, #8
 8012b32:	613b      	str	r3, [r7, #16]
 8012b34:	230b      	movs	r3, #11
 8012b36:	61bb      	str	r3, [r7, #24]
			continue;
 8012b38:	e022      	b.n	8012b80 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	da04      	bge.n	8012b4c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b42:	7ffb      	ldrb	r3, [r7, #31]
 8012b44:	3b80      	subs	r3, #128	; 0x80
 8012b46:	4a1f      	ldr	r2, [pc, #124]	; (8012bc4 <create_name+0x18c>)
 8012b48:	5cd3      	ldrb	r3, [r2, r3]
 8012b4a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b4c:	7ffb      	ldrb	r3, [r7, #31]
 8012b4e:	4619      	mov	r1, r3
 8012b50:	481d      	ldr	r0, [pc, #116]	; (8012bc8 <create_name+0x190>)
 8012b52:	f7fe fee5 	bl	8011920 <chk_chr>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <create_name+0x128>
 8012b5c:	2306      	movs	r3, #6
 8012b5e:	e02c      	b.n	8012bba <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012b60:	7ffb      	ldrb	r3, [r7, #31]
 8012b62:	2b60      	cmp	r3, #96	; 0x60
 8012b64:	d905      	bls.n	8012b72 <create_name+0x13a>
 8012b66:	7ffb      	ldrb	r3, [r7, #31]
 8012b68:	2b7a      	cmp	r3, #122	; 0x7a
 8012b6a:	d802      	bhi.n	8012b72 <create_name+0x13a>
 8012b6c:	7ffb      	ldrb	r3, [r7, #31]
 8012b6e:	3b20      	subs	r3, #32
 8012b70:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	1c5a      	adds	r2, r3, #1
 8012b76:	613a      	str	r2, [r7, #16]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	7ffa      	ldrb	r2, [r7, #31]
 8012b7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012b80:	e7a6      	b.n	8012ad0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012b82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	441a      	add	r2, r3
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <create_name+0x160>
 8012b94:	2306      	movs	r3, #6
 8012b96:	e010      	b.n	8012bba <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	2be5      	cmp	r3, #229	; 0xe5
 8012b9e:	d102      	bne.n	8012ba6 <create_name+0x16e>
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	2205      	movs	r2, #5
 8012ba4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012ba6:	7ffb      	ldrb	r3, [r7, #31]
 8012ba8:	2b20      	cmp	r3, #32
 8012baa:	d801      	bhi.n	8012bb0 <create_name+0x178>
 8012bac:	2204      	movs	r2, #4
 8012bae:	e000      	b.n	8012bb2 <create_name+0x17a>
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	330b      	adds	r3, #11
 8012bb6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012bb8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3720      	adds	r7, #32
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	0801a224 	.word	0x0801a224
 8012bc8:	0801a1d4 	.word	0x0801a1d4

08012bcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b086      	sub	sp, #24
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	2b2f      	cmp	r3, #47	; 0x2f
 8012be6:	d00b      	beq.n	8012c00 <follow_path+0x34>
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b5c      	cmp	r3, #92	; 0x5c
 8012bee:	d007      	beq.n	8012c00 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	699a      	ldr	r2, [r3, #24]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	609a      	str	r2, [r3, #8]
 8012bf8:	e00d      	b.n	8012c16 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	603b      	str	r3, [r7, #0]
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	2b2f      	cmp	r3, #47	; 0x2f
 8012c06:	d0f8      	beq.n	8012bfa <follow_path+0x2e>
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8012c0e:	d0f4      	beq.n	8012bfa <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	2200      	movs	r2, #0
 8012c14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	2b1f      	cmp	r3, #31
 8012c1c:	d80a      	bhi.n	8012c34 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2280      	movs	r2, #128	; 0x80
 8012c22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c26:	2100      	movs	r1, #0
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7ff fc1e 	bl	801246a <dir_sdi>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	75fb      	strb	r3, [r7, #23]
 8012c32:	e05b      	b.n	8012cec <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c34:	463b      	mov	r3, r7
 8012c36:	4619      	mov	r1, r3
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f7ff fefd 	bl	8012a38 <create_name>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c42:	7dfb      	ldrb	r3, [r7, #23]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d14c      	bne.n	8012ce2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7ff fe50 	bl	80128ee <dir_find>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c5a:	7dfb      	ldrb	r3, [r7, #23]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d01b      	beq.n	8012c98 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c60:	7dfb      	ldrb	r3, [r7, #23]
 8012c62:	2b04      	cmp	r3, #4
 8012c64:	d13f      	bne.n	8012ce6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012c66:	7afb      	ldrb	r3, [r7, #11]
 8012c68:	f003 0320 	and.w	r3, r3, #32
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00b      	beq.n	8012c88 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012c70:	7afb      	ldrb	r3, [r7, #11]
 8012c72:	f003 0304 	and.w	r3, r3, #4
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d031      	beq.n	8012cde <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2280      	movs	r2, #128	; 0x80
 8012c7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012c82:	2300      	movs	r3, #0
 8012c84:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012c86:	e02e      	b.n	8012ce6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012c88:	7afb      	ldrb	r3, [r7, #11]
 8012c8a:	f003 0304 	and.w	r3, r3, #4
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d129      	bne.n	8012ce6 <follow_path+0x11a>
 8012c92:	2305      	movs	r3, #5
 8012c94:	75fb      	strb	r3, [r7, #23]
				break;
 8012c96:	e026      	b.n	8012ce6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c98:	7afb      	ldrb	r3, [r7, #11]
 8012c9a:	f003 0304 	and.w	r3, r3, #4
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d123      	bne.n	8012cea <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	799b      	ldrb	r3, [r3, #6]
 8012ca6:	f003 0310 	and.w	r3, r3, #16
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d102      	bne.n	8012cb4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012cae:	2305      	movs	r3, #5
 8012cb0:	75fb      	strb	r3, [r7, #23]
 8012cb2:	e01b      	b.n	8012cec <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	695b      	ldr	r3, [r3, #20]
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	8992      	ldrh	r2, [r2, #12]
 8012cc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012cc6:	fb02 f200 	mul.w	r2, r2, r0
 8012cca:	1a9b      	subs	r3, r3, r2
 8012ccc:	440b      	add	r3, r1
 8012cce:	4619      	mov	r1, r3
 8012cd0:	68f8      	ldr	r0, [r7, #12]
 8012cd2:	f7ff fd70 	bl	80127b6 <ld_clust>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	609a      	str	r2, [r3, #8]
 8012cdc:	e7aa      	b.n	8012c34 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012cde:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ce0:	e7a8      	b.n	8012c34 <follow_path+0x68>
			if (res != FR_OK) break;
 8012ce2:	bf00      	nop
 8012ce4:	e002      	b.n	8012cec <follow_path+0x120>
				break;
 8012ce6:	bf00      	nop
 8012ce8:	e000      	b.n	8012cec <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012cea:	bf00      	nop
			}
		}
	}

	return res;
 8012cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3718      	adds	r7, #24
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}

08012cf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012cf6:	b480      	push	{r7}
 8012cf8:	b087      	sub	sp, #28
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8012d02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d031      	beq.n	8012d70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	617b      	str	r3, [r7, #20]
 8012d12:	e002      	b.n	8012d1a <get_ldnumber+0x24>
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	3301      	adds	r3, #1
 8012d18:	617b      	str	r3, [r7, #20]
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	2b20      	cmp	r3, #32
 8012d20:	d903      	bls.n	8012d2a <get_ldnumber+0x34>
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	2b3a      	cmp	r3, #58	; 0x3a
 8012d28:	d1f4      	bne.n	8012d14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d30:	d11c      	bne.n	8012d6c <get_ldnumber+0x76>
			tp = *path;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	1c5a      	adds	r2, r3, #1
 8012d3c:	60fa      	str	r2, [r7, #12]
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	3b30      	subs	r3, #48	; 0x30
 8012d42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	2b09      	cmp	r3, #9
 8012d48:	d80e      	bhi.n	8012d68 <get_ldnumber+0x72>
 8012d4a:	68fa      	ldr	r2, [r7, #12]
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d10a      	bne.n	8012d68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d107      	bne.n	8012d68 <get_ldnumber+0x72>
					vol = (int)i;
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	617b      	str	r3, [r7, #20]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	697a      	ldr	r2, [r7, #20]
 8012d66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	e002      	b.n	8012d72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d70:	693b      	ldr	r3, [r7, #16]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	371c      	adds	r7, #28
 8012d76:	46bd      	mov	sp, r7
 8012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7c:	4770      	bx	lr
	...

08012d80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	70da      	strb	r2, [r3, #3]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f04f 32ff 	mov.w	r2, #4294967295
 8012d96:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012d98:	6839      	ldr	r1, [r7, #0]
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7fe ff8c 	bl	8011cb8 <move_window>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <check_fs+0x2a>
 8012da6:	2304      	movs	r3, #4
 8012da8:	e038      	b.n	8012e1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	3338      	adds	r3, #56	; 0x38
 8012dae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fe fcd0 	bl	8011758 <ld_word>
 8012db8:	4603      	mov	r3, r0
 8012dba:	461a      	mov	r2, r3
 8012dbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d001      	beq.n	8012dc8 <check_fs+0x48>
 8012dc4:	2303      	movs	r3, #3
 8012dc6:	e029      	b.n	8012e1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012dce:	2be9      	cmp	r3, #233	; 0xe9
 8012dd0:	d009      	beq.n	8012de6 <check_fs+0x66>
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012dd8:	2beb      	cmp	r3, #235	; 0xeb
 8012dda:	d11e      	bne.n	8012e1a <check_fs+0x9a>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012de2:	2b90      	cmp	r3, #144	; 0x90
 8012de4:	d119      	bne.n	8012e1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	3338      	adds	r3, #56	; 0x38
 8012dea:	3336      	adds	r3, #54	; 0x36
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fe fccb 	bl	8011788 <ld_dword>
 8012df2:	4603      	mov	r3, r0
 8012df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012df8:	4a0a      	ldr	r2, [pc, #40]	; (8012e24 <check_fs+0xa4>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d101      	bne.n	8012e02 <check_fs+0x82>
 8012dfe:	2300      	movs	r3, #0
 8012e00:	e00c      	b.n	8012e1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	3338      	adds	r3, #56	; 0x38
 8012e06:	3352      	adds	r3, #82	; 0x52
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7fe fcbd 	bl	8011788 <ld_dword>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	4b05      	ldr	r3, [pc, #20]	; (8012e28 <check_fs+0xa8>)
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d101      	bne.n	8012e1a <check_fs+0x9a>
 8012e16:	2300      	movs	r3, #0
 8012e18:	e000      	b.n	8012e1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012e1a:	2302      	movs	r3, #2
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3708      	adds	r7, #8
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	00544146 	.word	0x00544146
 8012e28:	33544146 	.word	0x33544146

08012e2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b096      	sub	sp, #88	; 0x58
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	4613      	mov	r3, r2
 8012e38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	f7ff ff58 	bl	8012cf6 <get_ldnumber>
 8012e46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	da01      	bge.n	8012e52 <find_volume+0x26>
 8012e4e:	230b      	movs	r3, #11
 8012e50:	e268      	b.n	8013324 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e52:	4ab0      	ldr	r2, [pc, #704]	; (8013114 <find_volume+0x2e8>)
 8012e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <find_volume+0x3a>
 8012e62:	230c      	movs	r3, #12
 8012e64:	e25e      	b.n	8013324 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e6c:	79fb      	ldrb	r3, [r7, #7]
 8012e6e:	f023 0301 	bic.w	r3, r3, #1
 8012e72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d01a      	beq.n	8012eb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	785b      	ldrb	r3, [r3, #1]
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fe fbcb 	bl	801161c <disk_status>
 8012e86:	4603      	mov	r3, r0
 8012e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e90:	f003 0301 	and.w	r3, r3, #1
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d10c      	bne.n	8012eb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d007      	beq.n	8012eae <find_volume+0x82>
 8012e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ea2:	f003 0304 	and.w	r3, r3, #4
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012eaa:	230a      	movs	r3, #10
 8012eac:	e23a      	b.n	8013324 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e238      	b.n	8013324 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec2:	785b      	ldrb	r3, [r3, #1]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fe fbc3 	bl	8011650 <disk_initialize>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ed4:	f003 0301 	and.w	r3, r3, #1
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012edc:	2303      	movs	r3, #3
 8012ede:	e221      	b.n	8013324 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ee0:	79fb      	ldrb	r3, [r7, #7]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d007      	beq.n	8012ef6 <find_volume+0xca>
 8012ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eea:	f003 0304 	and.w	r3, r3, #4
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d001      	beq.n	8012ef6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012ef2:	230a      	movs	r3, #10
 8012ef4:	e216      	b.n	8013324 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef8:	7858      	ldrb	r0, [r3, #1]
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	330c      	adds	r3, #12
 8012efe:	461a      	mov	r2, r3
 8012f00:	2102      	movs	r1, #2
 8012f02:	f7fe fc0b 	bl	801171c <disk_ioctl>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <find_volume+0xe4>
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e209      	b.n	8013324 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f12:	899b      	ldrh	r3, [r3, #12]
 8012f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f18:	d80d      	bhi.n	8012f36 <find_volume+0x10a>
 8012f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1c:	899b      	ldrh	r3, [r3, #12]
 8012f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f22:	d308      	bcc.n	8012f36 <find_volume+0x10a>
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	899b      	ldrh	r3, [r3, #12]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2c:	899b      	ldrh	r3, [r3, #12]
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	4013      	ands	r3, r2
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d001      	beq.n	8012f3a <find_volume+0x10e>
 8012f36:	2301      	movs	r3, #1
 8012f38:	e1f4      	b.n	8013324 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012f3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f42:	f7ff ff1d 	bl	8012d80 <check_fs>
 8012f46:	4603      	mov	r3, r0
 8012f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f50:	2b02      	cmp	r3, #2
 8012f52:	d14b      	bne.n	8012fec <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f54:	2300      	movs	r3, #0
 8012f56:	643b      	str	r3, [r7, #64]	; 0x40
 8012f58:	e01f      	b.n	8012f9a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f62:	011b      	lsls	r3, r3, #4
 8012f64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012f68:	4413      	add	r3, r2
 8012f6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6e:	3304      	adds	r3, #4
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d006      	beq.n	8012f84 <find_volume+0x158>
 8012f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f78:	3308      	adds	r3, #8
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f7fe fc04 	bl	8011788 <ld_dword>
 8012f80:	4602      	mov	r2, r0
 8012f82:	e000      	b.n	8012f86 <find_volume+0x15a>
 8012f84:	2200      	movs	r2, #0
 8012f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012f8e:	440b      	add	r3, r1
 8012f90:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f96:	3301      	adds	r3, #1
 8012f98:	643b      	str	r3, [r7, #64]	; 0x40
 8012f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f9c:	2b03      	cmp	r3, #3
 8012f9e:	d9dc      	bls.n	8012f5a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d002      	beq.n	8012fb0 <find_volume+0x184>
 8012faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fac:	3b01      	subs	r3, #1
 8012fae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012fb8:	4413      	add	r3, r2
 8012fba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012fbe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d005      	beq.n	8012fd2 <find_volume+0x1a6>
 8012fc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fca:	f7ff fed9 	bl	8012d80 <check_fs>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	e000      	b.n	8012fd4 <find_volume+0x1a8>
 8012fd2:	2303      	movs	r3, #3
 8012fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d905      	bls.n	8012fec <find_volume+0x1c0>
 8012fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8012fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fe8:	2b03      	cmp	r3, #3
 8012fea:	d9e1      	bls.n	8012fb0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ff0:	2b04      	cmp	r3, #4
 8012ff2:	d101      	bne.n	8012ff8 <find_volume+0x1cc>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	e195      	b.n	8013324 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d901      	bls.n	8013004 <find_volume+0x1d8>
 8013000:	230d      	movs	r3, #13
 8013002:	e18f      	b.n	8013324 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013006:	3338      	adds	r3, #56	; 0x38
 8013008:	330b      	adds	r3, #11
 801300a:	4618      	mov	r0, r3
 801300c:	f7fe fba4 	bl	8011758 <ld_word>
 8013010:	4603      	mov	r3, r0
 8013012:	461a      	mov	r2, r3
 8013014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013016:	899b      	ldrh	r3, [r3, #12]
 8013018:	429a      	cmp	r2, r3
 801301a:	d001      	beq.n	8013020 <find_volume+0x1f4>
 801301c:	230d      	movs	r3, #13
 801301e:	e181      	b.n	8013324 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013022:	3338      	adds	r3, #56	; 0x38
 8013024:	3316      	adds	r3, #22
 8013026:	4618      	mov	r0, r3
 8013028:	f7fe fb96 	bl	8011758 <ld_word>
 801302c:	4603      	mov	r3, r0
 801302e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013032:	2b00      	cmp	r3, #0
 8013034:	d106      	bne.n	8013044 <find_volume+0x218>
 8013036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013038:	3338      	adds	r3, #56	; 0x38
 801303a:	3324      	adds	r3, #36	; 0x24
 801303c:	4618      	mov	r0, r3
 801303e:	f7fe fba3 	bl	8011788 <ld_dword>
 8013042:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013048:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013052:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013056:	789b      	ldrb	r3, [r3, #2]
 8013058:	2b01      	cmp	r3, #1
 801305a:	d005      	beq.n	8013068 <find_volume+0x23c>
 801305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305e:	789b      	ldrb	r3, [r3, #2]
 8013060:	2b02      	cmp	r3, #2
 8013062:	d001      	beq.n	8013068 <find_volume+0x23c>
 8013064:	230d      	movs	r3, #13
 8013066:	e15d      	b.n	8013324 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306a:	789b      	ldrb	r3, [r3, #2]
 801306c:	461a      	mov	r2, r3
 801306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013070:	fb02 f303 	mul.w	r3, r2, r3
 8013074:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801307c:	b29a      	uxth	r2, r3
 801307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013080:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013084:	895b      	ldrh	r3, [r3, #10]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d008      	beq.n	801309c <find_volume+0x270>
 801308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308c:	895b      	ldrh	r3, [r3, #10]
 801308e:	461a      	mov	r2, r3
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	895b      	ldrh	r3, [r3, #10]
 8013094:	3b01      	subs	r3, #1
 8013096:	4013      	ands	r3, r2
 8013098:	2b00      	cmp	r3, #0
 801309a:	d001      	beq.n	80130a0 <find_volume+0x274>
 801309c:	230d      	movs	r3, #13
 801309e:	e141      	b.n	8013324 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80130a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a2:	3338      	adds	r3, #56	; 0x38
 80130a4:	3311      	adds	r3, #17
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fe fb56 	bl	8011758 <ld_word>
 80130ac:	4603      	mov	r3, r0
 80130ae:	461a      	mov	r2, r3
 80130b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	891b      	ldrh	r3, [r3, #8]
 80130b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130ba:	8992      	ldrh	r2, [r2, #12]
 80130bc:	0952      	lsrs	r2, r2, #5
 80130be:	b292      	uxth	r2, r2
 80130c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80130c4:	fb02 f201 	mul.w	r2, r2, r1
 80130c8:	1a9b      	subs	r3, r3, r2
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d001      	beq.n	80130d4 <find_volume+0x2a8>
 80130d0:	230d      	movs	r3, #13
 80130d2:	e127      	b.n	8013324 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80130d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d6:	3338      	adds	r3, #56	; 0x38
 80130d8:	3313      	adds	r3, #19
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fe fb3c 	bl	8011758 <ld_word>
 80130e0:	4603      	mov	r3, r0
 80130e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80130e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d106      	bne.n	80130f8 <find_volume+0x2cc>
 80130ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ec:	3338      	adds	r3, #56	; 0x38
 80130ee:	3320      	adds	r3, #32
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7fe fb49 	bl	8011788 <ld_dword>
 80130f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80130f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fa:	3338      	adds	r3, #56	; 0x38
 80130fc:	330e      	adds	r3, #14
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fe fb2a 	bl	8011758 <ld_word>
 8013104:	4603      	mov	r3, r0
 8013106:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801310a:	2b00      	cmp	r3, #0
 801310c:	d104      	bne.n	8013118 <find_volume+0x2ec>
 801310e:	230d      	movs	r3, #13
 8013110:	e108      	b.n	8013324 <find_volume+0x4f8>
 8013112:	bf00      	nop
 8013114:	2004820c 	.word	0x2004820c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013118:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801311c:	4413      	add	r3, r2
 801311e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013120:	8911      	ldrh	r1, [r2, #8]
 8013122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013124:	8992      	ldrh	r2, [r2, #12]
 8013126:	0952      	lsrs	r2, r2, #5
 8013128:	b292      	uxth	r2, r2
 801312a:	fbb1 f2f2 	udiv	r2, r1, r2
 801312e:	b292      	uxth	r2, r2
 8013130:	4413      	add	r3, r2
 8013132:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013138:	429a      	cmp	r2, r3
 801313a:	d201      	bcs.n	8013140 <find_volume+0x314>
 801313c:	230d      	movs	r3, #13
 801313e:	e0f1      	b.n	8013324 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013144:	1ad3      	subs	r3, r2, r3
 8013146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013148:	8952      	ldrh	r2, [r2, #10]
 801314a:	fbb3 f3f2 	udiv	r3, r3, r2
 801314e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	2b00      	cmp	r3, #0
 8013154:	d101      	bne.n	801315a <find_volume+0x32e>
 8013156:	230d      	movs	r3, #13
 8013158:	e0e4      	b.n	8013324 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801315a:	2303      	movs	r3, #3
 801315c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013166:	4293      	cmp	r3, r2
 8013168:	d802      	bhi.n	8013170 <find_volume+0x344>
 801316a:	2302      	movs	r3, #2
 801316c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013176:	4293      	cmp	r3, r2
 8013178:	d802      	bhi.n	8013180 <find_volume+0x354>
 801317a:	2301      	movs	r3, #1
 801317c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	1c9a      	adds	r2, r3, #2
 8013184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013186:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801318c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801318e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013192:	441a      	add	r2, r3
 8013194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013196:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013198:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	441a      	add	r2, r3
 801319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80131a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131a6:	2b03      	cmp	r3, #3
 80131a8:	d11e      	bne.n	80131e8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80131aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ac:	3338      	adds	r3, #56	; 0x38
 80131ae:	332a      	adds	r3, #42	; 0x2a
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fe fad1 	bl	8011758 <ld_word>
 80131b6:	4603      	mov	r3, r0
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d001      	beq.n	80131c0 <find_volume+0x394>
 80131bc:	230d      	movs	r3, #13
 80131be:	e0b1      	b.n	8013324 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80131c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c2:	891b      	ldrh	r3, [r3, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <find_volume+0x3a0>
 80131c8:	230d      	movs	r3, #13
 80131ca:	e0ab      	b.n	8013324 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80131cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ce:	3338      	adds	r3, #56	; 0x38
 80131d0:	332c      	adds	r3, #44	; 0x2c
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7fe fad8 	bl	8011788 <ld_dword>
 80131d8:	4602      	mov	r2, r0
 80131da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80131de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e0:	69db      	ldr	r3, [r3, #28]
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	647b      	str	r3, [r7, #68]	; 0x44
 80131e6:	e01f      	b.n	8013228 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80131e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ea:	891b      	ldrh	r3, [r3, #8]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d101      	bne.n	80131f4 <find_volume+0x3c8>
 80131f0:	230d      	movs	r3, #13
 80131f2:	e097      	b.n	8013324 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131fa:	441a      	add	r2, r3
 80131fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013204:	2b02      	cmp	r3, #2
 8013206:	d103      	bne.n	8013210 <find_volume+0x3e4>
 8013208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320a:	69db      	ldr	r3, [r3, #28]
 801320c:	005b      	lsls	r3, r3, #1
 801320e:	e00a      	b.n	8013226 <find_volume+0x3fa>
 8013210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013212:	69da      	ldr	r2, [r3, #28]
 8013214:	4613      	mov	r3, r2
 8013216:	005b      	lsls	r3, r3, #1
 8013218:	4413      	add	r3, r2
 801321a:	085a      	lsrs	r2, r3, #1
 801321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321e:	69db      	ldr	r3, [r3, #28]
 8013220:	f003 0301 	and.w	r3, r3, #1
 8013224:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013226:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	6a1a      	ldr	r2, [r3, #32]
 801322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322e:	899b      	ldrh	r3, [r3, #12]
 8013230:	4619      	mov	r1, r3
 8013232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013234:	440b      	add	r3, r1
 8013236:	3b01      	subs	r3, #1
 8013238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801323a:	8989      	ldrh	r1, [r1, #12]
 801323c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013240:	429a      	cmp	r2, r3
 8013242:	d201      	bcs.n	8013248 <find_volume+0x41c>
 8013244:	230d      	movs	r3, #13
 8013246:	e06d      	b.n	8013324 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324a:	f04f 32ff 	mov.w	r2, #4294967295
 801324e:	615a      	str	r2, [r3, #20]
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	695a      	ldr	r2, [r3, #20]
 8013254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013256:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325a:	2280      	movs	r2, #128	; 0x80
 801325c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801325e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013262:	2b03      	cmp	r3, #3
 8013264:	d149      	bne.n	80132fa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013268:	3338      	adds	r3, #56	; 0x38
 801326a:	3330      	adds	r3, #48	; 0x30
 801326c:	4618      	mov	r0, r3
 801326e:	f7fe fa73 	bl	8011758 <ld_word>
 8013272:	4603      	mov	r3, r0
 8013274:	2b01      	cmp	r3, #1
 8013276:	d140      	bne.n	80132fa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801327a:	3301      	adds	r3, #1
 801327c:	4619      	mov	r1, r3
 801327e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013280:	f7fe fd1a 	bl	8011cb8 <move_window>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d137      	bne.n	80132fa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328c:	2200      	movs	r2, #0
 801328e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013292:	3338      	adds	r3, #56	; 0x38
 8013294:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013298:	4618      	mov	r0, r3
 801329a:	f7fe fa5d 	bl	8011758 <ld_word>
 801329e:	4603      	mov	r3, r0
 80132a0:	461a      	mov	r2, r3
 80132a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d127      	bne.n	80132fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80132aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ac:	3338      	adds	r3, #56	; 0x38
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fe fa6a 	bl	8011788 <ld_dword>
 80132b4:	4602      	mov	r2, r0
 80132b6:	4b1d      	ldr	r3, [pc, #116]	; (801332c <find_volume+0x500>)
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d11e      	bne.n	80132fa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80132bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132be:	3338      	adds	r3, #56	; 0x38
 80132c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7fe fa5f 	bl	8011788 <ld_dword>
 80132ca:	4602      	mov	r2, r0
 80132cc:	4b18      	ldr	r3, [pc, #96]	; (8013330 <find_volume+0x504>)
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d113      	bne.n	80132fa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80132d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d4:	3338      	adds	r3, #56	; 0x38
 80132d6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fe fa54 	bl	8011788 <ld_dword>
 80132e0:	4602      	mov	r2, r0
 80132e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80132e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e8:	3338      	adds	r3, #56	; 0x38
 80132ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe fa4a 	bl	8011788 <ld_dword>
 80132f4:	4602      	mov	r2, r0
 80132f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80132fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013300:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013302:	4b0c      	ldr	r3, [pc, #48]	; (8013334 <find_volume+0x508>)
 8013304:	881b      	ldrh	r3, [r3, #0]
 8013306:	3301      	adds	r3, #1
 8013308:	b29a      	uxth	r2, r3
 801330a:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <find_volume+0x508>)
 801330c:	801a      	strh	r2, [r3, #0]
 801330e:	4b09      	ldr	r3, [pc, #36]	; (8013334 <find_volume+0x508>)
 8013310:	881a      	ldrh	r2, [r3, #0]
 8013312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013314:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013318:	2200      	movs	r2, #0
 801331a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801331c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801331e:	f7fe fc63 	bl	8011be8 <clear_lock>
#endif
	return FR_OK;
 8013322:	2300      	movs	r3, #0
}
 8013324:	4618      	mov	r0, r3
 8013326:	3758      	adds	r7, #88	; 0x58
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	41615252 	.word	0x41615252
 8013330:	61417272 	.word	0x61417272
 8013334:	20048210 	.word	0x20048210

08013338 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013342:	2309      	movs	r3, #9
 8013344:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d01c      	beq.n	8013386 <validate+0x4e>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d018      	beq.n	8013386 <validate+0x4e>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d013      	beq.n	8013386 <validate+0x4e>
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	889a      	ldrh	r2, [r3, #4]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	88db      	ldrh	r3, [r3, #6]
 8013368:	429a      	cmp	r2, r3
 801336a:	d10c      	bne.n	8013386 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	785b      	ldrb	r3, [r3, #1]
 8013372:	4618      	mov	r0, r3
 8013374:	f7fe f952 	bl	801161c <disk_status>
 8013378:	4603      	mov	r3, r0
 801337a:	f003 0301 	and.w	r3, r3, #1
 801337e:	2b00      	cmp	r3, #0
 8013380:	d101      	bne.n	8013386 <validate+0x4e>
			res = FR_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013386:	7bfb      	ldrb	r3, [r7, #15]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d102      	bne.n	8013392 <validate+0x5a>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	e000      	b.n	8013394 <validate+0x5c>
 8013392:	2300      	movs	r3, #0
 8013394:	683a      	ldr	r2, [r7, #0]
 8013396:	6013      	str	r3, [r2, #0]
	return res;
 8013398:	7bfb      	ldrb	r3, [r7, #15]
}
 801339a:	4618      	mov	r0, r3
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
	...

080133a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b088      	sub	sp, #32
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	4613      	mov	r3, r2
 80133b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80133b6:	f107 0310 	add.w	r3, r7, #16
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7ff fc9b 	bl	8012cf6 <get_ldnumber>
 80133c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	da01      	bge.n	80133cc <f_mount+0x28>
 80133c8:	230b      	movs	r3, #11
 80133ca:	e02b      	b.n	8013424 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80133cc:	4a17      	ldr	r2, [pc, #92]	; (801342c <f_mount+0x88>)
 80133ce:	69fb      	ldr	r3, [r7, #28]
 80133d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d005      	beq.n	80133e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80133dc:	69b8      	ldr	r0, [r7, #24]
 80133de:	f7fe fc03 	bl	8011be8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	2200      	movs	r2, #0
 80133e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d002      	beq.n	80133f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	2200      	movs	r2, #0
 80133f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80133f4:	68fa      	ldr	r2, [r7, #12]
 80133f6:	490d      	ldr	r1, [pc, #52]	; (801342c <f_mount+0x88>)
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d002      	beq.n	801340a <f_mount+0x66>
 8013404:	79fb      	ldrb	r3, [r7, #7]
 8013406:	2b01      	cmp	r3, #1
 8013408:	d001      	beq.n	801340e <f_mount+0x6a>
 801340a:	2300      	movs	r3, #0
 801340c:	e00a      	b.n	8013424 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801340e:	f107 010c 	add.w	r1, r7, #12
 8013412:	f107 0308 	add.w	r3, r7, #8
 8013416:	2200      	movs	r2, #0
 8013418:	4618      	mov	r0, r3
 801341a:	f7ff fd07 	bl	8012e2c <find_volume>
 801341e:	4603      	mov	r3, r0
 8013420:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013422:	7dfb      	ldrb	r3, [r7, #23]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3720      	adds	r7, #32
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	2004820c 	.word	0x2004820c

08013430 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b098      	sub	sp, #96	; 0x60
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	4613      	mov	r3, r2
 801343c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <f_open+0x18>
 8013444:	2309      	movs	r3, #9
 8013446:	e1ba      	b.n	80137be <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013448:	79fb      	ldrb	r3, [r7, #7]
 801344a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801344e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013450:	79fa      	ldrb	r2, [r7, #7]
 8013452:	f107 0110 	add.w	r1, r7, #16
 8013456:	f107 0308 	add.w	r3, r7, #8
 801345a:	4618      	mov	r0, r3
 801345c:	f7ff fce6 	bl	8012e2c <find_volume>
 8013460:	4603      	mov	r3, r0
 8013462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801346a:	2b00      	cmp	r3, #0
 801346c:	f040 819e 	bne.w	80137ac <f_open+0x37c>
		dj.obj.fs = fs;
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013474:	68ba      	ldr	r2, [r7, #8]
 8013476:	f107 0314 	add.w	r3, r7, #20
 801347a:	4611      	mov	r1, r2
 801347c:	4618      	mov	r0, r3
 801347e:	f7ff fba5 	bl	8012bcc <follow_path>
 8013482:	4603      	mov	r3, r0
 8013484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801348c:	2b00      	cmp	r3, #0
 801348e:	d11a      	bne.n	80134c6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013490:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013494:	b25b      	sxtb	r3, r3
 8013496:	2b00      	cmp	r3, #0
 8013498:	da03      	bge.n	80134a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801349a:	2306      	movs	r3, #6
 801349c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134a0:	e011      	b.n	80134c6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134a2:	79fb      	ldrb	r3, [r7, #7]
 80134a4:	f023 0301 	bic.w	r3, r3, #1
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	bf14      	ite	ne
 80134ac:	2301      	movne	r3, #1
 80134ae:	2300      	moveq	r3, #0
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	461a      	mov	r2, r3
 80134b4:	f107 0314 	add.w	r3, r7, #20
 80134b8:	4611      	mov	r1, r2
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fe fa4c 	bl	8011958 <chk_lock>
 80134c0:	4603      	mov	r3, r0
 80134c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134c6:	79fb      	ldrb	r3, [r7, #7]
 80134c8:	f003 031c 	and.w	r3, r3, #28
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d07e      	beq.n	80135ce <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80134d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d017      	beq.n	8013508 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80134d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134dc:	2b04      	cmp	r3, #4
 80134de:	d10e      	bne.n	80134fe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80134e0:	f7fe fa96 	bl	8011a10 <enq_lock>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d006      	beq.n	80134f8 <f_open+0xc8>
 80134ea:	f107 0314 	add.w	r3, r7, #20
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7ff fa52 	bl	8012998 <dir_register>
 80134f4:	4603      	mov	r3, r0
 80134f6:	e000      	b.n	80134fa <f_open+0xca>
 80134f8:	2312      	movs	r3, #18
 80134fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80134fe:	79fb      	ldrb	r3, [r7, #7]
 8013500:	f043 0308 	orr.w	r3, r3, #8
 8013504:	71fb      	strb	r3, [r7, #7]
 8013506:	e010      	b.n	801352a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013508:	7ebb      	ldrb	r3, [r7, #26]
 801350a:	f003 0311 	and.w	r3, r3, #17
 801350e:	2b00      	cmp	r3, #0
 8013510:	d003      	beq.n	801351a <f_open+0xea>
					res = FR_DENIED;
 8013512:	2307      	movs	r3, #7
 8013514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013518:	e007      	b.n	801352a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	f003 0304 	and.w	r3, r3, #4
 8013520:	2b00      	cmp	r3, #0
 8013522:	d002      	beq.n	801352a <f_open+0xfa>
 8013524:	2308      	movs	r3, #8
 8013526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801352a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801352e:	2b00      	cmp	r3, #0
 8013530:	d167      	bne.n	8013602 <f_open+0x1d2>
 8013532:	79fb      	ldrb	r3, [r7, #7]
 8013534:	f003 0308 	and.w	r3, r3, #8
 8013538:	2b00      	cmp	r3, #0
 801353a:	d062      	beq.n	8013602 <f_open+0x1d2>
				dw = GET_FATTIME();
 801353c:	4ba2      	ldr	r3, [pc, #648]	; (80137c8 <f_open+0x398>)
 801353e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013542:	330e      	adds	r3, #14
 8013544:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013546:	4618      	mov	r0, r3
 8013548:	f7fe f95c 	bl	8011804 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354e:	3316      	adds	r3, #22
 8013550:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe f956 	bl	8011804 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355a:	330b      	adds	r3, #11
 801355c:	2220      	movs	r2, #32
 801355e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013564:	4611      	mov	r1, r2
 8013566:	4618      	mov	r0, r3
 8013568:	f7ff f925 	bl	80127b6 <ld_clust>
 801356c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013572:	2200      	movs	r2, #0
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff f93d 	bl	80127f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801357c:	331c      	adds	r3, #28
 801357e:	2100      	movs	r1, #0
 8013580:	4618      	mov	r0, r3
 8013582:	f7fe f93f 	bl	8011804 <st_dword>
					fs->wflag = 1;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	2201      	movs	r2, #1
 801358a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801358e:	2b00      	cmp	r3, #0
 8013590:	d037      	beq.n	8013602 <f_open+0x1d2>
						dw = fs->winsect;
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013596:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013598:	f107 0314 	add.w	r3, r7, #20
 801359c:	2200      	movs	r2, #0
 801359e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fe fe2d 	bl	8012200 <remove_chain>
 80135a6:	4603      	mov	r3, r0
 80135a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80135ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d126      	bne.n	8013602 <f_open+0x1d2>
							res = move_window(fs, dw);
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fe fb7d 	bl	8011cb8 <move_window>
 80135be:	4603      	mov	r3, r0
 80135c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135c8:	3a01      	subs	r2, #1
 80135ca:	611a      	str	r2, [r3, #16]
 80135cc:	e019      	b.n	8013602 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80135ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d115      	bne.n	8013602 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80135d6:	7ebb      	ldrb	r3, [r7, #26]
 80135d8:	f003 0310 	and.w	r3, r3, #16
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d003      	beq.n	80135e8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80135e0:	2304      	movs	r3, #4
 80135e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135e6:	e00c      	b.n	8013602 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80135e8:	79fb      	ldrb	r3, [r7, #7]
 80135ea:	f003 0302 	and.w	r3, r3, #2
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d007      	beq.n	8013602 <f_open+0x1d2>
 80135f2:	7ebb      	ldrb	r3, [r7, #26]
 80135f4:	f003 0301 	and.w	r3, r3, #1
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d002      	beq.n	8013602 <f_open+0x1d2>
						res = FR_DENIED;
 80135fc:	2307      	movs	r3, #7
 80135fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013606:	2b00      	cmp	r3, #0
 8013608:	d128      	bne.n	801365c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	f003 0308 	and.w	r3, r3, #8
 8013610:	2b00      	cmp	r3, #0
 8013612:	d003      	beq.n	801361c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013614:	79fb      	ldrb	r3, [r7, #7]
 8013616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801361a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801362a:	79fb      	ldrb	r3, [r7, #7]
 801362c:	f023 0301 	bic.w	r3, r3, #1
 8013630:	2b00      	cmp	r3, #0
 8013632:	bf14      	ite	ne
 8013634:	2301      	movne	r3, #1
 8013636:	2300      	moveq	r3, #0
 8013638:	b2db      	uxtb	r3, r3
 801363a:	461a      	mov	r2, r3
 801363c:	f107 0314 	add.w	r3, r7, #20
 8013640:	4611      	mov	r1, r2
 8013642:	4618      	mov	r0, r3
 8013644:	f7fe fa06 	bl	8011a54 <inc_lock>
 8013648:	4602      	mov	r2, r0
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	691b      	ldr	r3, [r3, #16]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d102      	bne.n	801365c <f_open+0x22c>
 8013656:	2302      	movs	r3, #2
 8013658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801365c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013660:	2b00      	cmp	r3, #0
 8013662:	f040 80a3 	bne.w	80137ac <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801366a:	4611      	mov	r1, r2
 801366c:	4618      	mov	r0, r3
 801366e:	f7ff f8a2 	bl	80127b6 <ld_clust>
 8013672:	4602      	mov	r2, r0
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367a:	331c      	adds	r3, #28
 801367c:	4618      	mov	r0, r3
 801367e:	f7fe f883 	bl	8011788 <ld_dword>
 8013682:	4602      	mov	r2, r0
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801368e:	693a      	ldr	r2, [r7, #16]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	88da      	ldrh	r2, [r3, #6]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	79fa      	ldrb	r2, [r7, #7]
 80136a0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2200      	movs	r2, #0
 80136a6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2200      	movs	r2, #0
 80136ac:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2200      	movs	r2, #0
 80136b2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	3330      	adds	r3, #48	; 0x30
 80136b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80136bc:	2100      	movs	r1, #0
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe f8ed 	bl	801189e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80136c4:	79fb      	ldrb	r3, [r7, #7]
 80136c6:	f003 0320 	and.w	r3, r3, #32
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d06e      	beq.n	80137ac <f_open+0x37c>
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d06a      	beq.n	80137ac <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	68da      	ldr	r2, [r3, #12]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	895b      	ldrh	r3, [r3, #10]
 80136e2:	461a      	mov	r2, r3
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	899b      	ldrh	r3, [r3, #12]
 80136e8:	fb03 f302 	mul.w	r3, r3, r2
 80136ec:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	689b      	ldr	r3, [r3, #8]
 80136f2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	657b      	str	r3, [r7, #84]	; 0x54
 80136fa:	e016      	b.n	801372a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013700:	4618      	mov	r0, r3
 8013702:	f7fe fb96 	bl	8011e32 <get_fat>
 8013706:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801370a:	2b01      	cmp	r3, #1
 801370c:	d802      	bhi.n	8013714 <f_open+0x2e4>
 801370e:	2302      	movs	r3, #2
 8013710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801371a:	d102      	bne.n	8013722 <f_open+0x2f2>
 801371c:	2301      	movs	r3, #1
 801371e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013726:	1ad3      	subs	r3, r2, r3
 8013728:	657b      	str	r3, [r7, #84]	; 0x54
 801372a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801372e:	2b00      	cmp	r3, #0
 8013730:	d103      	bne.n	801373a <f_open+0x30a>
 8013732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013736:	429a      	cmp	r2, r3
 8013738:	d8e0      	bhi.n	80136fc <f_open+0x2cc>
				}
				fp->clust = clst;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801373e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013744:	2b00      	cmp	r3, #0
 8013746:	d131      	bne.n	80137ac <f_open+0x37c>
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	899b      	ldrh	r3, [r3, #12]
 801374c:	461a      	mov	r2, r3
 801374e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013750:	fbb3 f1f2 	udiv	r1, r3, r2
 8013754:	fb02 f201 	mul.w	r2, r2, r1
 8013758:	1a9b      	subs	r3, r3, r2
 801375a:	2b00      	cmp	r3, #0
 801375c:	d026      	beq.n	80137ac <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013762:	4618      	mov	r0, r3
 8013764:	f7fe fb46 	bl	8011df4 <clust2sect>
 8013768:	6478      	str	r0, [r7, #68]	; 0x44
 801376a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801376c:	2b00      	cmp	r3, #0
 801376e:	d103      	bne.n	8013778 <f_open+0x348>
						res = FR_INT_ERR;
 8013770:	2302      	movs	r3, #2
 8013772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013776:	e019      	b.n	80137ac <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	899b      	ldrh	r3, [r3, #12]
 801377c:	461a      	mov	r2, r3
 801377e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013780:	fbb3 f2f2 	udiv	r2, r3, r2
 8013784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013786:	441a      	add	r2, r3
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	7858      	ldrb	r0, [r3, #1]
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6a1a      	ldr	r2, [r3, #32]
 801379a:	2301      	movs	r3, #1
 801379c:	f7fd ff7e 	bl	801169c <disk_read>
 80137a0:	4603      	mov	r3, r0
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d002      	beq.n	80137ac <f_open+0x37c>
 80137a6:	2301      	movs	r3, #1
 80137a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80137ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d002      	beq.n	80137ba <f_open+0x38a>
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2200      	movs	r2, #0
 80137b8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80137be:	4618      	mov	r0, r3
 80137c0:	3760      	adds	r7, #96	; 0x60
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	274a0000 	.word	0x274a0000

080137cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b08e      	sub	sp, #56	; 0x38
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
 80137d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	2200      	movs	r2, #0
 80137e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f107 0214 	add.w	r2, r7, #20
 80137ea:	4611      	mov	r1, r2
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7ff fda3 	bl	8013338 <validate>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80137f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d107      	bne.n	8013810 <f_read+0x44>
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	7d5b      	ldrb	r3, [r3, #21]
 8013804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801380c:	2b00      	cmp	r3, #0
 801380e:	d002      	beq.n	8013816 <f_read+0x4a>
 8013810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013814:	e135      	b.n	8013a82 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	7d1b      	ldrb	r3, [r3, #20]
 801381a:	f003 0301 	and.w	r3, r3, #1
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <f_read+0x5a>
 8013822:	2307      	movs	r3, #7
 8013824:	e12d      	b.n	8013a82 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	68da      	ldr	r2, [r3, #12]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	699b      	ldr	r3, [r3, #24]
 801382e:	1ad3      	subs	r3, r2, r3
 8013830:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	6a3b      	ldr	r3, [r7, #32]
 8013836:	429a      	cmp	r2, r3
 8013838:	f240 811e 	bls.w	8013a78 <f_read+0x2ac>
 801383c:	6a3b      	ldr	r3, [r7, #32]
 801383e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013840:	e11a      	b.n	8013a78 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	699b      	ldr	r3, [r3, #24]
 8013846:	697a      	ldr	r2, [r7, #20]
 8013848:	8992      	ldrh	r2, [r2, #12]
 801384a:	fbb3 f1f2 	udiv	r1, r3, r2
 801384e:	fb02 f201 	mul.w	r2, r2, r1
 8013852:	1a9b      	subs	r3, r3, r2
 8013854:	2b00      	cmp	r3, #0
 8013856:	f040 80d5 	bne.w	8013a04 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	699b      	ldr	r3, [r3, #24]
 801385e:	697a      	ldr	r2, [r7, #20]
 8013860:	8992      	ldrh	r2, [r2, #12]
 8013862:	fbb3 f3f2 	udiv	r3, r3, r2
 8013866:	697a      	ldr	r2, [r7, #20]
 8013868:	8952      	ldrh	r2, [r2, #10]
 801386a:	3a01      	subs	r2, #1
 801386c:	4013      	ands	r3, r2
 801386e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d12f      	bne.n	80138d6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	699b      	ldr	r3, [r3, #24]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d103      	bne.n	8013886 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	689b      	ldr	r3, [r3, #8]
 8013882:	633b      	str	r3, [r7, #48]	; 0x30
 8013884:	e013      	b.n	80138ae <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388a:	2b00      	cmp	r3, #0
 801388c:	d007      	beq.n	801389e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	699b      	ldr	r3, [r3, #24]
 8013892:	4619      	mov	r1, r3
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f7fe fdb0 	bl	80123fa <clmt_clust>
 801389a:	6338      	str	r0, [r7, #48]	; 0x30
 801389c:	e007      	b.n	80138ae <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801389e:	68fa      	ldr	r2, [r7, #12]
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	69db      	ldr	r3, [r3, #28]
 80138a4:	4619      	mov	r1, r3
 80138a6:	4610      	mov	r0, r2
 80138a8:	f7fe fac3 	bl	8011e32 <get_fat>
 80138ac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80138ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d804      	bhi.n	80138be <f_read+0xf2>
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2202      	movs	r2, #2
 80138b8:	755a      	strb	r2, [r3, #21]
 80138ba:	2302      	movs	r3, #2
 80138bc:	e0e1      	b.n	8013a82 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138c4:	d104      	bne.n	80138d0 <f_read+0x104>
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2201      	movs	r2, #1
 80138ca:	755a      	strb	r2, [r3, #21]
 80138cc:	2301      	movs	r3, #1
 80138ce:	e0d8      	b.n	8013a82 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80138d6:	697a      	ldr	r2, [r7, #20]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	69db      	ldr	r3, [r3, #28]
 80138dc:	4619      	mov	r1, r3
 80138de:	4610      	mov	r0, r2
 80138e0:	f7fe fa88 	bl	8011df4 <clust2sect>
 80138e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d104      	bne.n	80138f6 <f_read+0x12a>
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2202      	movs	r2, #2
 80138f0:	755a      	strb	r2, [r3, #21]
 80138f2:	2302      	movs	r3, #2
 80138f4:	e0c5      	b.n	8013a82 <f_read+0x2b6>
			sect += csect;
 80138f6:	69ba      	ldr	r2, [r7, #24]
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	4413      	add	r3, r2
 80138fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	899b      	ldrh	r3, [r3, #12]
 8013902:	461a      	mov	r2, r3
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	fbb3 f3f2 	udiv	r3, r3, r2
 801390a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390e:	2b00      	cmp	r3, #0
 8013910:	d041      	beq.n	8013996 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013912:	69fa      	ldr	r2, [r7, #28]
 8013914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013916:	4413      	add	r3, r2
 8013918:	697a      	ldr	r2, [r7, #20]
 801391a:	8952      	ldrh	r2, [r2, #10]
 801391c:	4293      	cmp	r3, r2
 801391e:	d905      	bls.n	801392c <f_read+0x160>
					cc = fs->csize - csect;
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	895b      	ldrh	r3, [r3, #10]
 8013924:	461a      	mov	r2, r3
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	7858      	ldrb	r0, [r3, #1]
 8013930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013932:	69ba      	ldr	r2, [r7, #24]
 8013934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013936:	f7fd feb1 	bl	801169c <disk_read>
 801393a:	4603      	mov	r3, r0
 801393c:	2b00      	cmp	r3, #0
 801393e:	d004      	beq.n	801394a <f_read+0x17e>
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2201      	movs	r2, #1
 8013944:	755a      	strb	r2, [r3, #21]
 8013946:	2301      	movs	r3, #1
 8013948:	e09b      	b.n	8013a82 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	7d1b      	ldrb	r3, [r3, #20]
 801394e:	b25b      	sxtb	r3, r3
 8013950:	2b00      	cmp	r3, #0
 8013952:	da18      	bge.n	8013986 <f_read+0x1ba>
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6a1a      	ldr	r2, [r3, #32]
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	1ad3      	subs	r3, r2, r3
 801395c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801395e:	429a      	cmp	r2, r3
 8013960:	d911      	bls.n	8013986 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	6a1a      	ldr	r2, [r3, #32]
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	697a      	ldr	r2, [r7, #20]
 801396c:	8992      	ldrh	r2, [r2, #12]
 801396e:	fb02 f303 	mul.w	r3, r2, r3
 8013972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013974:	18d0      	adds	r0, r2, r3
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	899b      	ldrh	r3, [r3, #12]
 8013980:	461a      	mov	r2, r3
 8013982:	f7fd ff6b 	bl	801185c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	899b      	ldrh	r3, [r3, #12]
 801398a:	461a      	mov	r2, r3
 801398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398e:	fb02 f303 	mul.w	r3, r2, r3
 8013992:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013994:	e05c      	b.n	8013a50 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6a1b      	ldr	r3, [r3, #32]
 801399a:	69ba      	ldr	r2, [r7, #24]
 801399c:	429a      	cmp	r2, r3
 801399e:	d02e      	beq.n	80139fe <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	7d1b      	ldrb	r3, [r3, #20]
 80139a4:	b25b      	sxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	da18      	bge.n	80139dc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	7858      	ldrb	r0, [r3, #1]
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6a1a      	ldr	r2, [r3, #32]
 80139b8:	2301      	movs	r3, #1
 80139ba:	f7fd fe8f 	bl	80116dc <disk_write>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d004      	beq.n	80139ce <f_read+0x202>
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2201      	movs	r2, #1
 80139c8:	755a      	strb	r2, [r3, #21]
 80139ca:	2301      	movs	r3, #1
 80139cc:	e059      	b.n	8013a82 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	7d1b      	ldrb	r3, [r3, #20]
 80139d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139d6:	b2da      	uxtb	r2, r3
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	7858      	ldrb	r0, [r3, #1]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139e6:	2301      	movs	r3, #1
 80139e8:	69ba      	ldr	r2, [r7, #24]
 80139ea:	f7fd fe57 	bl	801169c <disk_read>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d004      	beq.n	80139fe <f_read+0x232>
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2201      	movs	r2, #1
 80139f8:	755a      	strb	r2, [r3, #21]
 80139fa:	2301      	movs	r3, #1
 80139fc:	e041      	b.n	8013a82 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	69ba      	ldr	r2, [r7, #24]
 8013a02:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	899b      	ldrh	r3, [r3, #12]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	697a      	ldr	r2, [r7, #20]
 8013a10:	8992      	ldrh	r2, [r2, #12]
 8013a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a16:	fb02 f201 	mul.w	r2, r2, r1
 8013a1a:	1a9b      	subs	r3, r3, r2
 8013a1c:	1ac3      	subs	r3, r0, r3
 8013a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d901      	bls.n	8013a2c <f_read+0x260>
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	699b      	ldr	r3, [r3, #24]
 8013a36:	697a      	ldr	r2, [r7, #20]
 8013a38:	8992      	ldrh	r2, [r2, #12]
 8013a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a3e:	fb02 f200 	mul.w	r2, r2, r0
 8013a42:	1a9b      	subs	r3, r3, r2
 8013a44:	440b      	add	r3, r1
 8013a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a48:	4619      	mov	r1, r3
 8013a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a4c:	f7fd ff06 	bl	801185c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a54:	4413      	add	r3, r2
 8013a56:	627b      	str	r3, [r7, #36]	; 0x24
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	699a      	ldr	r2, [r3, #24]
 8013a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5e:	441a      	add	r2, r3
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	619a      	str	r2, [r3, #24]
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6a:	441a      	add	r2, r3
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	601a      	str	r2, [r3, #0]
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a74:	1ad3      	subs	r3, r2, r3
 8013a76:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	f47f aee1 	bne.w	8013842 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013a80:	2300      	movs	r3, #0
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3738      	adds	r7, #56	; 0x38
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b08c      	sub	sp, #48	; 0x30
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	60f8      	str	r0, [r7, #12]
 8013a92:	60b9      	str	r1, [r7, #8]
 8013a94:	607a      	str	r2, [r7, #4]
 8013a96:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	f107 0210 	add.w	r2, r7, #16
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7ff fc44 	bl	8013338 <validate>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d107      	bne.n	8013ace <f_write+0x44>
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	7d5b      	ldrb	r3, [r3, #21]
 8013ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d002      	beq.n	8013ad4 <f_write+0x4a>
 8013ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ad2:	e16a      	b.n	8013daa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	7d1b      	ldrb	r3, [r3, #20]
 8013ad8:	f003 0302 	and.w	r3, r3, #2
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d101      	bne.n	8013ae4 <f_write+0x5a>
 8013ae0:	2307      	movs	r3, #7
 8013ae2:	e162      	b.n	8013daa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	699a      	ldr	r2, [r3, #24]
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	441a      	add	r2, r3
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	699b      	ldr	r3, [r3, #24]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	f080 814c 	bcs.w	8013d8e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	699b      	ldr	r3, [r3, #24]
 8013afa:	43db      	mvns	r3, r3
 8013afc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013afe:	e146      	b.n	8013d8e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	699b      	ldr	r3, [r3, #24]
 8013b04:	693a      	ldr	r2, [r7, #16]
 8013b06:	8992      	ldrh	r2, [r2, #12]
 8013b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b0c:	fb02 f201 	mul.w	r2, r2, r1
 8013b10:	1a9b      	subs	r3, r3, r2
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f040 80f1 	bne.w	8013cfa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	699b      	ldr	r3, [r3, #24]
 8013b1c:	693a      	ldr	r2, [r7, #16]
 8013b1e:	8992      	ldrh	r2, [r2, #12]
 8013b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	8952      	ldrh	r2, [r2, #10]
 8013b28:	3a01      	subs	r2, #1
 8013b2a:	4013      	ands	r3, r2
 8013b2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d143      	bne.n	8013bbc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	699b      	ldr	r3, [r3, #24]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d10c      	bne.n	8013b56 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	689b      	ldr	r3, [r3, #8]
 8013b40:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d11a      	bne.n	8013b7e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fe fbbc 	bl	80122ca <create_chain>
 8013b52:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b54:	e013      	b.n	8013b7e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d007      	beq.n	8013b6e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	699b      	ldr	r3, [r3, #24]
 8013b62:	4619      	mov	r1, r3
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f7fe fc48 	bl	80123fa <clmt_clust>
 8013b6a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b6c:	e007      	b.n	8013b7e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	69db      	ldr	r3, [r3, #28]
 8013b74:	4619      	mov	r1, r3
 8013b76:	4610      	mov	r0, r2
 8013b78:	f7fe fba7 	bl	80122ca <create_chain>
 8013b7c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	f000 8109 	beq.w	8013d98 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d104      	bne.n	8013b96 <f_write+0x10c>
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	2202      	movs	r2, #2
 8013b90:	755a      	strb	r2, [r3, #21]
 8013b92:	2302      	movs	r3, #2
 8013b94:	e109      	b.n	8013daa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b9c:	d104      	bne.n	8013ba8 <f_write+0x11e>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	2201      	movs	r2, #1
 8013ba2:	755a      	strb	r2, [r3, #21]
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e100      	b.n	8013daa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d102      	bne.n	8013bbc <f_write+0x132>
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	7d1b      	ldrb	r3, [r3, #20]
 8013bc0:	b25b      	sxtb	r3, r3
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	da18      	bge.n	8013bf8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	7858      	ldrb	r0, [r3, #1]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	6a1a      	ldr	r2, [r3, #32]
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	f7fd fd81 	bl	80116dc <disk_write>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d004      	beq.n	8013bea <f_write+0x160>
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2201      	movs	r2, #1
 8013be4:	755a      	strb	r2, [r3, #21]
 8013be6:	2301      	movs	r3, #1
 8013be8:	e0df      	b.n	8013daa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	7d1b      	ldrb	r3, [r3, #20]
 8013bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013bf8:	693a      	ldr	r2, [r7, #16]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	69db      	ldr	r3, [r3, #28]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4610      	mov	r0, r2
 8013c02:	f7fe f8f7 	bl	8011df4 <clust2sect>
 8013c06:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d104      	bne.n	8013c18 <f_write+0x18e>
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	2202      	movs	r2, #2
 8013c12:	755a      	strb	r2, [r3, #21]
 8013c14:	2302      	movs	r3, #2
 8013c16:	e0c8      	b.n	8013daa <f_write+0x320>
			sect += csect;
 8013c18:	697a      	ldr	r2, [r7, #20]
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	899b      	ldrh	r3, [r3, #12]
 8013c24:	461a      	mov	r2, r3
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c2c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013c2e:	6a3b      	ldr	r3, [r7, #32]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d043      	beq.n	8013cbc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c34:	69ba      	ldr	r2, [r7, #24]
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	4413      	add	r3, r2
 8013c3a:	693a      	ldr	r2, [r7, #16]
 8013c3c:	8952      	ldrh	r2, [r2, #10]
 8013c3e:	4293      	cmp	r3, r2
 8013c40:	d905      	bls.n	8013c4e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	895b      	ldrh	r3, [r3, #10]
 8013c46:	461a      	mov	r2, r3
 8013c48:	69bb      	ldr	r3, [r7, #24]
 8013c4a:	1ad3      	subs	r3, r2, r3
 8013c4c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	7858      	ldrb	r0, [r3, #1]
 8013c52:	6a3b      	ldr	r3, [r7, #32]
 8013c54:	697a      	ldr	r2, [r7, #20]
 8013c56:	69f9      	ldr	r1, [r7, #28]
 8013c58:	f7fd fd40 	bl	80116dc <disk_write>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d004      	beq.n	8013c6c <f_write+0x1e2>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2201      	movs	r2, #1
 8013c66:	755a      	strb	r2, [r3, #21]
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e09e      	b.n	8013daa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	6a1a      	ldr	r2, [r3, #32]
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	1ad3      	subs	r3, r2, r3
 8013c74:	6a3a      	ldr	r2, [r7, #32]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d918      	bls.n	8013cac <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	6a1a      	ldr	r2, [r3, #32]
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	1ad3      	subs	r3, r2, r3
 8013c88:	693a      	ldr	r2, [r7, #16]
 8013c8a:	8992      	ldrh	r2, [r2, #12]
 8013c8c:	fb02 f303 	mul.w	r3, r2, r3
 8013c90:	69fa      	ldr	r2, [r7, #28]
 8013c92:	18d1      	adds	r1, r2, r3
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	899b      	ldrh	r3, [r3, #12]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	f7fd fddf 	bl	801185c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	7d1b      	ldrb	r3, [r3, #20]
 8013ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ca6:	b2da      	uxtb	r2, r3
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013cac:	693b      	ldr	r3, [r7, #16]
 8013cae:	899b      	ldrh	r3, [r3, #12]
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	6a3b      	ldr	r3, [r7, #32]
 8013cb4:	fb02 f303 	mul.w	r3, r2, r3
 8013cb8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013cba:	e04b      	b.n	8013d54 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6a1b      	ldr	r3, [r3, #32]
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d016      	beq.n	8013cf4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	699a      	ldr	r2, [r3, #24]
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d210      	bcs.n	8013cf4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	7858      	ldrb	r0, [r3, #1]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cdc:	2301      	movs	r3, #1
 8013cde:	697a      	ldr	r2, [r7, #20]
 8013ce0:	f7fd fcdc 	bl	801169c <disk_read>
 8013ce4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d004      	beq.n	8013cf4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2201      	movs	r2, #1
 8013cee:	755a      	strb	r2, [r3, #21]
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e05a      	b.n	8013daa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	697a      	ldr	r2, [r7, #20]
 8013cf8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	899b      	ldrh	r3, [r3, #12]
 8013cfe:	4618      	mov	r0, r3
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	693a      	ldr	r2, [r7, #16]
 8013d06:	8992      	ldrh	r2, [r2, #12]
 8013d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d0c:	fb02 f201 	mul.w	r2, r2, r1
 8013d10:	1a9b      	subs	r3, r3, r2
 8013d12:	1ac3      	subs	r3, r0, r3
 8013d14:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d901      	bls.n	8013d22 <f_write+0x298>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	699b      	ldr	r3, [r3, #24]
 8013d2c:	693a      	ldr	r2, [r7, #16]
 8013d2e:	8992      	ldrh	r2, [r2, #12]
 8013d30:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d34:	fb02 f200 	mul.w	r2, r2, r0
 8013d38:	1a9b      	subs	r3, r3, r2
 8013d3a:	440b      	add	r3, r1
 8013d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d3e:	69f9      	ldr	r1, [r7, #28]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fd fd8b 	bl	801185c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	7d1b      	ldrb	r3, [r3, #20]
 8013d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013d4e:	b2da      	uxtb	r2, r3
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013d54:	69fa      	ldr	r2, [r7, #28]
 8013d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d58:	4413      	add	r3, r2
 8013d5a:	61fb      	str	r3, [r7, #28]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	699a      	ldr	r2, [r3, #24]
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	441a      	add	r2, r3
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	619a      	str	r2, [r3, #24]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	68da      	ldr	r2, [r3, #12]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	699b      	ldr	r3, [r3, #24]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	bf38      	it	cc
 8013d74:	461a      	movcc	r2, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	60da      	str	r2, [r3, #12]
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	441a      	add	r2, r3
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	1ad3      	subs	r3, r2, r3
 8013d8c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	f47f aeb5 	bne.w	8013b00 <f_write+0x76>
 8013d96:	e000      	b.n	8013d9a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d98:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	7d1b      	ldrb	r3, [r3, #20]
 8013d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3730      	adds	r7, #48	; 0x30
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
	...

08013db4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b086      	sub	sp, #24
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f107 0208 	add.w	r2, r7, #8
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff fab7 	bl	8013338 <validate>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013dce:	7dfb      	ldrb	r3, [r7, #23]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d167      	bne.n	8013ea4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	7d1b      	ldrb	r3, [r3, #20]
 8013dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d061      	beq.n	8013ea4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	7d1b      	ldrb	r3, [r3, #20]
 8013de4:	b25b      	sxtb	r3, r3
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	da15      	bge.n	8013e16 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	7858      	ldrb	r0, [r3, #1]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6a1a      	ldr	r2, [r3, #32]
 8013df8:	2301      	movs	r3, #1
 8013dfa:	f7fd fc6f 	bl	80116dc <disk_write>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d001      	beq.n	8013e08 <f_sync+0x54>
 8013e04:	2301      	movs	r3, #1
 8013e06:	e04e      	b.n	8013ea6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	7d1b      	ldrb	r3, [r3, #20]
 8013e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e10:	b2da      	uxtb	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013e16:	4b26      	ldr	r3, [pc, #152]	; (8013eb0 <f_sync+0xfc>)
 8013e18:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013e1a:	68ba      	ldr	r2, [r7, #8]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e20:	4619      	mov	r1, r3
 8013e22:	4610      	mov	r0, r2
 8013e24:	f7fd ff48 	bl	8011cb8 <move_window>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013e2c:	7dfb      	ldrb	r3, [r7, #23]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d138      	bne.n	8013ea4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e36:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	330b      	adds	r3, #11
 8013e3c:	781a      	ldrb	r2, [r3, #0]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	330b      	adds	r3, #11
 8013e42:	f042 0220 	orr.w	r2, r2, #32
 8013e46:	b2d2      	uxtb	r2, r2
 8013e48:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6818      	ldr	r0, [r3, #0]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	689b      	ldr	r3, [r3, #8]
 8013e52:	461a      	mov	r2, r3
 8013e54:	68f9      	ldr	r1, [r7, #12]
 8013e56:	f7fe fccd 	bl	80127f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f103 021c 	add.w	r2, r3, #28
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	4619      	mov	r1, r3
 8013e66:	4610      	mov	r0, r2
 8013e68:	f7fd fccc 	bl	8011804 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	3316      	adds	r3, #22
 8013e70:	6939      	ldr	r1, [r7, #16]
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fd fcc6 	bl	8011804 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	3312      	adds	r3, #18
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fd fca5 	bl	80117ce <st_word>
					fs->wflag = 1;
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	2201      	movs	r2, #1
 8013e88:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fd ff41 	bl	8011d14 <sync_fs>
 8013e92:	4603      	mov	r3, r0
 8013e94:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	7d1b      	ldrb	r3, [r3, #20]
 8013e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e9e:	b2da      	uxtb	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3718      	adds	r7, #24
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	274a0000 	.word	0x274a0000

08013eb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f7ff ff79 	bl	8013db4 <f_sync>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013ec6:	7bfb      	ldrb	r3, [r7, #15]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d118      	bne.n	8013efe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f107 0208 	add.w	r2, r7, #8
 8013ed2:	4611      	mov	r1, r2
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7ff fa2f 	bl	8013338 <validate>
 8013eda:	4603      	mov	r3, r0
 8013edc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013ede:	7bfb      	ldrb	r3, [r7, #15]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d10c      	bne.n	8013efe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fd fe41 	bl	8011b70 <dec_lock>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013ef2:	7bfb      	ldrb	r3, [r7, #15]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d102      	bne.n	8013efe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f08:	b590      	push	{r4, r7, lr}
 8013f0a:	b091      	sub	sp, #68	; 0x44
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013f10:	f107 0108 	add.w	r1, r7, #8
 8013f14:	1d3b      	adds	r3, r7, #4
 8013f16:	2200      	movs	r2, #0
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7fe ff87 	bl	8012e2c <find_volume>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d131      	bne.n	8013f90 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	f107 030c 	add.w	r3, r7, #12
 8013f36:	4611      	mov	r1, r2
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7fe fe47 	bl	8012bcc <follow_path>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d11a      	bne.n	8013f82 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013f50:	b25b      	sxtb	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	da03      	bge.n	8013f5e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	697a      	ldr	r2, [r7, #20]
 8013f5a:	619a      	str	r2, [r3, #24]
 8013f5c:	e011      	b.n	8013f82 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013f5e:	7cbb      	ldrb	r3, [r7, #18]
 8013f60:	f003 0310 	and.w	r3, r3, #16
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d009      	beq.n	8013f7c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f6c:	68bc      	ldr	r4, [r7, #8]
 8013f6e:	4611      	mov	r1, r2
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fe fc20 	bl	80127b6 <ld_clust>
 8013f76:	4603      	mov	r3, r0
 8013f78:	61a3      	str	r3, [r4, #24]
 8013f7a:	e002      	b.n	8013f82 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013f7c:	2305      	movs	r3, #5
 8013f7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013f82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f86:	2b04      	cmp	r3, #4
 8013f88:	d102      	bne.n	8013f90 <f_chdir+0x88>
 8013f8a:	2305      	movs	r3, #5
 8013f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013f90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3744      	adds	r7, #68	; 0x44
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd90      	pop	{r4, r7, pc}

08013f9c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b090      	sub	sp, #64	; 0x40
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f107 0208 	add.w	r2, r7, #8
 8013fac:	4611      	mov	r1, r2
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7ff f9c2 	bl	8013338 <validate>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d103      	bne.n	8013fca <f_lseek+0x2e>
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	7d5b      	ldrb	r3, [r3, #21]
 8013fc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013fca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d002      	beq.n	8013fd8 <f_lseek+0x3c>
 8013fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fd6:	e201      	b.n	80143dc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 80d9 	beq.w	8014194 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fe8:	d15a      	bne.n	80140a0 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fee:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff2:	1d1a      	adds	r2, r3, #4
 8013ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	617b      	str	r3, [r7, #20]
 8013ffa:	2302      	movs	r3, #2
 8013ffc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	689b      	ldr	r3, [r3, #8]
 8014002:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014006:	2b00      	cmp	r3, #0
 8014008:	d03a      	beq.n	8014080 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	613b      	str	r3, [r7, #16]
 801400e:	2300      	movs	r3, #0
 8014010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014014:	3302      	adds	r3, #2
 8014016:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401a:	60fb      	str	r3, [r7, #12]
 801401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401e:	3301      	adds	r3, #1
 8014020:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014026:	4618      	mov	r0, r3
 8014028:	f7fd ff03 	bl	8011e32 <get_fat>
 801402c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014030:	2b01      	cmp	r3, #1
 8014032:	d804      	bhi.n	801403e <f_lseek+0xa2>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2202      	movs	r2, #2
 8014038:	755a      	strb	r2, [r3, #21]
 801403a:	2302      	movs	r3, #2
 801403c:	e1ce      	b.n	80143dc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014044:	d104      	bne.n	8014050 <f_lseek+0xb4>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2201      	movs	r2, #1
 801404a:	755a      	strb	r2, [r3, #21]
 801404c:	2301      	movs	r3, #1
 801404e:	e1c5      	b.n	80143dc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	3301      	adds	r3, #1
 8014054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014056:	429a      	cmp	r2, r3
 8014058:	d0de      	beq.n	8014018 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801405a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	429a      	cmp	r2, r3
 8014060:	d809      	bhi.n	8014076 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	1d1a      	adds	r2, r3, #4
 8014066:	627a      	str	r2, [r7, #36]	; 0x24
 8014068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801406a:	601a      	str	r2, [r3, #0]
 801406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406e:	1d1a      	adds	r2, r3, #4
 8014070:	627a      	str	r2, [r7, #36]	; 0x24
 8014072:	693a      	ldr	r2, [r7, #16]
 8014074:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	69db      	ldr	r3, [r3, #28]
 801407a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801407c:	429a      	cmp	r2, r3
 801407e:	d3c4      	bcc.n	801400a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014086:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	429a      	cmp	r2, r3
 801408e:	d803      	bhi.n	8014098 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014092:	2200      	movs	r2, #0
 8014094:	601a      	str	r2, [r3, #0]
 8014096:	e19f      	b.n	80143d8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014098:	2311      	movs	r3, #17
 801409a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801409e:	e19b      	b.n	80143d8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	683a      	ldr	r2, [r7, #0]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d902      	bls.n	80140b0 <f_lseek+0x114>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	683a      	ldr	r2, [r7, #0]
 80140b4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f000 818d 	beq.w	80143d8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	3b01      	subs	r3, #1
 80140c2:	4619      	mov	r1, r3
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f7fe f998 	bl	80123fa <clmt_clust>
 80140ca:	4602      	mov	r2, r0
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80140d0:	68ba      	ldr	r2, [r7, #8]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	69db      	ldr	r3, [r3, #28]
 80140d6:	4619      	mov	r1, r3
 80140d8:	4610      	mov	r0, r2
 80140da:	f7fd fe8b 	bl	8011df4 <clust2sect>
 80140de:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d104      	bne.n	80140f0 <f_lseek+0x154>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2202      	movs	r2, #2
 80140ea:	755a      	strb	r2, [r3, #21]
 80140ec:	2302      	movs	r3, #2
 80140ee:	e175      	b.n	80143dc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	3b01      	subs	r3, #1
 80140f4:	68ba      	ldr	r2, [r7, #8]
 80140f6:	8992      	ldrh	r2, [r2, #12]
 80140f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	8952      	ldrh	r2, [r2, #10]
 8014100:	3a01      	subs	r2, #1
 8014102:	4013      	ands	r3, r2
 8014104:	69ba      	ldr	r2, [r7, #24]
 8014106:	4413      	add	r3, r2
 8014108:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	699b      	ldr	r3, [r3, #24]
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	8992      	ldrh	r2, [r2, #12]
 8014112:	fbb3 f1f2 	udiv	r1, r3, r2
 8014116:	fb02 f201 	mul.w	r2, r2, r1
 801411a:	1a9b      	subs	r3, r3, r2
 801411c:	2b00      	cmp	r3, #0
 801411e:	f000 815b 	beq.w	80143d8 <f_lseek+0x43c>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	69ba      	ldr	r2, [r7, #24]
 8014128:	429a      	cmp	r2, r3
 801412a:	f000 8155 	beq.w	80143d8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	7d1b      	ldrb	r3, [r3, #20]
 8014132:	b25b      	sxtb	r3, r3
 8014134:	2b00      	cmp	r3, #0
 8014136:	da18      	bge.n	801416a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	7858      	ldrb	r0, [r3, #1]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6a1a      	ldr	r2, [r3, #32]
 8014146:	2301      	movs	r3, #1
 8014148:	f7fd fac8 	bl	80116dc <disk_write>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d004      	beq.n	801415c <f_lseek+0x1c0>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2201      	movs	r2, #1
 8014156:	755a      	strb	r2, [r3, #21]
 8014158:	2301      	movs	r3, #1
 801415a:	e13f      	b.n	80143dc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	7d1b      	ldrb	r3, [r3, #20]
 8014160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014164:	b2da      	uxtb	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	7858      	ldrb	r0, [r3, #1]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014174:	2301      	movs	r3, #1
 8014176:	69ba      	ldr	r2, [r7, #24]
 8014178:	f7fd fa90 	bl	801169c <disk_read>
 801417c:	4603      	mov	r3, r0
 801417e:	2b00      	cmp	r3, #0
 8014180:	d004      	beq.n	801418c <f_lseek+0x1f0>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2201      	movs	r2, #1
 8014186:	755a      	strb	r2, [r3, #21]
 8014188:	2301      	movs	r3, #1
 801418a:	e127      	b.n	80143dc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	69ba      	ldr	r2, [r7, #24]
 8014190:	621a      	str	r2, [r3, #32]
 8014192:	e121      	b.n	80143d8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	683a      	ldr	r2, [r7, #0]
 801419a:	429a      	cmp	r2, r3
 801419c:	d908      	bls.n	80141b0 <f_lseek+0x214>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	7d1b      	ldrb	r3, [r3, #20]
 80141a2:	f003 0302 	and.w	r3, r3, #2
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d102      	bne.n	80141b0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	699b      	ldr	r3, [r3, #24]
 80141b4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80141b6:	2300      	movs	r3, #0
 80141b8:	637b      	str	r3, [r7, #52]	; 0x34
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141be:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f000 80b5 	beq.w	8014332 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	895b      	ldrh	r3, [r3, #10]
 80141cc:	461a      	mov	r2, r3
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	899b      	ldrh	r3, [r3, #12]
 80141d2:	fb03 f302 	mul.w	r3, r3, r2
 80141d6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80141d8:	6a3b      	ldr	r3, [r7, #32]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d01b      	beq.n	8014216 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	1e5a      	subs	r2, r3, #1
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80141e8:	6a3b      	ldr	r3, [r7, #32]
 80141ea:	1e59      	subs	r1, r3, #1
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80141f2:	429a      	cmp	r2, r3
 80141f4:	d30f      	bcc.n	8014216 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80141f6:	6a3b      	ldr	r3, [r7, #32]
 80141f8:	1e5a      	subs	r2, r3, #1
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	425b      	negs	r3, r3
 80141fe:	401a      	ands	r2, r3
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	699b      	ldr	r3, [r3, #24]
 8014208:	683a      	ldr	r2, [r7, #0]
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	69db      	ldr	r3, [r3, #28]
 8014212:	63bb      	str	r3, [r7, #56]	; 0x38
 8014214:	e022      	b.n	801425c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	689b      	ldr	r3, [r3, #8]
 801421a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801421e:	2b00      	cmp	r3, #0
 8014220:	d119      	bne.n	8014256 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2100      	movs	r1, #0
 8014226:	4618      	mov	r0, r3
 8014228:	f7fe f84f 	bl	80122ca <create_chain>
 801422c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014230:	2b01      	cmp	r3, #1
 8014232:	d104      	bne.n	801423e <f_lseek+0x2a2>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2202      	movs	r2, #2
 8014238:	755a      	strb	r2, [r3, #21]
 801423a:	2302      	movs	r3, #2
 801423c:	e0ce      	b.n	80143dc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014244:	d104      	bne.n	8014250 <f_lseek+0x2b4>
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2201      	movs	r2, #1
 801424a:	755a      	strb	r2, [r3, #21]
 801424c:	2301      	movs	r3, #1
 801424e:	e0c5      	b.n	80143dc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014254:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801425a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425e:	2b00      	cmp	r3, #0
 8014260:	d067      	beq.n	8014332 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014262:	e03a      	b.n	80142da <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014264:	683a      	ldr	r2, [r7, #0]
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	603b      	str	r3, [r7, #0]
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	699a      	ldr	r2, [r3, #24]
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	441a      	add	r2, r3
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	7d1b      	ldrb	r3, [r3, #20]
 801427c:	f003 0302 	and.w	r3, r3, #2
 8014280:	2b00      	cmp	r3, #0
 8014282:	d00b      	beq.n	801429c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014288:	4618      	mov	r0, r3
 801428a:	f7fe f81e 	bl	80122ca <create_chain>
 801428e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014292:	2b00      	cmp	r3, #0
 8014294:	d108      	bne.n	80142a8 <f_lseek+0x30c>
							ofs = 0; break;
 8014296:	2300      	movs	r3, #0
 8014298:	603b      	str	r3, [r7, #0]
 801429a:	e022      	b.n	80142e2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fd fdc6 	bl	8011e32 <get_fat>
 80142a6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ae:	d104      	bne.n	80142ba <f_lseek+0x31e>
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2201      	movs	r2, #1
 80142b4:	755a      	strb	r2, [r3, #21]
 80142b6:	2301      	movs	r3, #1
 80142b8:	e090      	b.n	80143dc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d904      	bls.n	80142ca <f_lseek+0x32e>
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	69db      	ldr	r3, [r3, #28]
 80142c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d304      	bcc.n	80142d4 <f_lseek+0x338>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2202      	movs	r2, #2
 80142ce:	755a      	strb	r2, [r3, #21]
 80142d0:	2302      	movs	r3, #2
 80142d2:	e083      	b.n	80143dc <f_lseek+0x440>
					fp->clust = clst;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142d8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80142da:	683a      	ldr	r2, [r7, #0]
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d8c0      	bhi.n	8014264 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	699a      	ldr	r2, [r3, #24]
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	441a      	add	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	899b      	ldrh	r3, [r3, #12]
 80142f2:	461a      	mov	r2, r3
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80142fa:	fb02 f201 	mul.w	r2, r2, r1
 80142fe:	1a9b      	subs	r3, r3, r2
 8014300:	2b00      	cmp	r3, #0
 8014302:	d016      	beq.n	8014332 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014308:	4618      	mov	r0, r3
 801430a:	f7fd fd73 	bl	8011df4 <clust2sect>
 801430e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014312:	2b00      	cmp	r3, #0
 8014314:	d104      	bne.n	8014320 <f_lseek+0x384>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2202      	movs	r2, #2
 801431a:	755a      	strb	r2, [r3, #21]
 801431c:	2302      	movs	r3, #2
 801431e:	e05d      	b.n	80143dc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	899b      	ldrh	r3, [r3, #12]
 8014324:	461a      	mov	r2, r3
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	fbb3 f3f2 	udiv	r3, r3, r2
 801432c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801432e:	4413      	add	r3, r2
 8014330:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	699a      	ldr	r2, [r3, #24]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	68db      	ldr	r3, [r3, #12]
 801433a:	429a      	cmp	r2, r3
 801433c:	d90a      	bls.n	8014354 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	699a      	ldr	r2, [r3, #24]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	7d1b      	ldrb	r3, [r3, #20]
 801434a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801434e:	b2da      	uxtb	r2, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	699b      	ldr	r3, [r3, #24]
 8014358:	68ba      	ldr	r2, [r7, #8]
 801435a:	8992      	ldrh	r2, [r2, #12]
 801435c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014360:	fb02 f201 	mul.w	r2, r2, r1
 8014364:	1a9b      	subs	r3, r3, r2
 8014366:	2b00      	cmp	r3, #0
 8014368:	d036      	beq.n	80143d8 <f_lseek+0x43c>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6a1b      	ldr	r3, [r3, #32]
 801436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014370:	429a      	cmp	r2, r3
 8014372:	d031      	beq.n	80143d8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	7d1b      	ldrb	r3, [r3, #20]
 8014378:	b25b      	sxtb	r3, r3
 801437a:	2b00      	cmp	r3, #0
 801437c:	da18      	bge.n	80143b0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	7858      	ldrb	r0, [r3, #1]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	6a1a      	ldr	r2, [r3, #32]
 801438c:	2301      	movs	r3, #1
 801438e:	f7fd f9a5 	bl	80116dc <disk_write>
 8014392:	4603      	mov	r3, r0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d004      	beq.n	80143a2 <f_lseek+0x406>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2201      	movs	r2, #1
 801439c:	755a      	strb	r2, [r3, #21]
 801439e:	2301      	movs	r3, #1
 80143a0:	e01c      	b.n	80143dc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	7d1b      	ldrb	r3, [r3, #20]
 80143a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	7858      	ldrb	r0, [r3, #1]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143ba:	2301      	movs	r3, #1
 80143bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143be:	f7fd f96d 	bl	801169c <disk_read>
 80143c2:	4603      	mov	r3, r0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d004      	beq.n	80143d2 <f_lseek+0x436>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2201      	movs	r2, #1
 80143cc:	755a      	strb	r2, [r3, #21]
 80143ce:	2301      	movs	r3, #1
 80143d0:	e004      	b.n	80143dc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143d6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80143d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3740      	adds	r7, #64	; 0x40
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b09e      	sub	sp, #120	; 0x78
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80143ec:	2300      	movs	r3, #0
 80143ee:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143f0:	f107 010c 	add.w	r1, r7, #12
 80143f4:	1d3b      	adds	r3, r7, #4
 80143f6:	2202      	movs	r2, #2
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7fe fd17 	bl	8012e2c <find_volume>
 80143fe:	4603      	mov	r3, r0
 8014400:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014408:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801440c:	2b00      	cmp	r3, #0
 801440e:	f040 80a4 	bne.w	801455a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014418:	4611      	mov	r1, r2
 801441a:	4618      	mov	r0, r3
 801441c:	f7fe fbd6 	bl	8012bcc <follow_path>
 8014420:	4603      	mov	r3, r0
 8014422:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014426:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801442a:	2b00      	cmp	r3, #0
 801442c:	d108      	bne.n	8014440 <f_unlink+0x5c>
 801442e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014432:	f003 0320 	and.w	r3, r3, #32
 8014436:	2b00      	cmp	r3, #0
 8014438:	d002      	beq.n	8014440 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801443a:	2306      	movs	r3, #6
 801443c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014440:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014444:	2b00      	cmp	r3, #0
 8014446:	d108      	bne.n	801445a <f_unlink+0x76>
 8014448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801444c:	2102      	movs	r1, #2
 801444e:	4618      	mov	r0, r3
 8014450:	f7fd fa82 	bl	8011958 <chk_lock>
 8014454:	4603      	mov	r3, r0
 8014456:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801445a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801445e:	2b00      	cmp	r3, #0
 8014460:	d17b      	bne.n	801455a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014462:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014466:	b25b      	sxtb	r3, r3
 8014468:	2b00      	cmp	r3, #0
 801446a:	da03      	bge.n	8014474 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801446c:	2306      	movs	r3, #6
 801446e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014472:	e008      	b.n	8014486 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014474:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014478:	f003 0301 	and.w	r3, r3, #1
 801447c:	2b00      	cmp	r3, #0
 801447e:	d002      	beq.n	8014486 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014480:	2307      	movs	r3, #7
 8014482:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014486:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801448a:	2b00      	cmp	r3, #0
 801448c:	d13d      	bne.n	801450a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014492:	4611      	mov	r1, r2
 8014494:	4618      	mov	r0, r3
 8014496:	f7fe f98e 	bl	80127b6 <ld_clust>
 801449a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801449c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144a0:	f003 0310 	and.w	r3, r3, #16
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d030      	beq.n	801450a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	699b      	ldr	r3, [r3, #24]
 80144ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d103      	bne.n	80144ba <f_unlink+0xd6>
						res = FR_DENIED;
 80144b2:	2307      	movs	r3, #7
 80144b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80144b8:	e027      	b.n	801450a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80144be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144c0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80144c2:	f107 0310 	add.w	r3, r7, #16
 80144c6:	2100      	movs	r1, #0
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7fd ffce 	bl	801246a <dir_sdi>
 80144ce:	4603      	mov	r3, r0
 80144d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80144d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d116      	bne.n	801450a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80144dc:	f107 0310 	add.w	r3, r7, #16
 80144e0:	2100      	movs	r1, #0
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fe f9a6 	bl	8012834 <dir_read>
 80144e8:	4603      	mov	r3, r0
 80144ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80144ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d102      	bne.n	80144fc <f_unlink+0x118>
 80144f6:	2307      	movs	r3, #7
 80144f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80144fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014500:	2b04      	cmp	r3, #4
 8014502:	d102      	bne.n	801450a <f_unlink+0x126>
 8014504:	2300      	movs	r3, #0
 8014506:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801450a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801450e:	2b00      	cmp	r3, #0
 8014510:	d123      	bne.n	801455a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014516:	4618      	mov	r0, r3
 8014518:	f7fe fa70 	bl	80129fc <dir_remove>
 801451c:	4603      	mov	r3, r0
 801451e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014522:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014526:	2b00      	cmp	r3, #0
 8014528:	d10c      	bne.n	8014544 <f_unlink+0x160>
 801452a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801452c:	2b00      	cmp	r3, #0
 801452e:	d009      	beq.n	8014544 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014534:	2200      	movs	r2, #0
 8014536:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014538:	4618      	mov	r0, r3
 801453a:	f7fd fe61 	bl	8012200 <remove_chain>
 801453e:	4603      	mov	r3, r0
 8014540:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014544:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014548:	2b00      	cmp	r3, #0
 801454a:	d106      	bne.n	801455a <f_unlink+0x176>
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	4618      	mov	r0, r3
 8014550:	f7fd fbe0 	bl	8011d14 <sync_fs>
 8014554:	4603      	mov	r3, r0
 8014556:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801455a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801455e:	4618      	mov	r0, r3
 8014560:	3778      	adds	r7, #120	; 0x78
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b096      	sub	sp, #88	; 0x58
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014570:	f107 0108 	add.w	r1, r7, #8
 8014574:	1d3b      	adds	r3, r7, #4
 8014576:	2202      	movs	r2, #2
 8014578:	4618      	mov	r0, r3
 801457a:	f7fe fc57 	bl	8012e2c <find_volume>
 801457e:	4603      	mov	r3, r0
 8014580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801458c:	2b00      	cmp	r3, #0
 801458e:	f040 80fe 	bne.w	801478e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	f107 030c 	add.w	r3, r7, #12
 8014598:	4611      	mov	r1, r2
 801459a:	4618      	mov	r0, r3
 801459c:	f7fe fb16 	bl	8012bcc <follow_path>
 80145a0:	4603      	mov	r3, r0
 80145a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80145a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d102      	bne.n	80145b4 <f_mkdir+0x4c>
 80145ae:	2308      	movs	r3, #8
 80145b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80145b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145b8:	2b04      	cmp	r3, #4
 80145ba:	d108      	bne.n	80145ce <f_mkdir+0x66>
 80145bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80145c0:	f003 0320 	and.w	r3, r3, #32
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d002      	beq.n	80145ce <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80145c8:	2306      	movs	r3, #6
 80145ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80145ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145d2:	2b04      	cmp	r3, #4
 80145d4:	f040 80db 	bne.w	801478e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80145d8:	f107 030c 	add.w	r3, r7, #12
 80145dc:	2100      	movs	r1, #0
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fd fe73 	bl	80122ca <create_chain>
 80145e4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	895b      	ldrh	r3, [r3, #10]
 80145ea:	461a      	mov	r2, r3
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	899b      	ldrh	r3, [r3, #12]
 80145f0:	fb03 f302 	mul.w	r3, r3, r2
 80145f4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80145f6:	2300      	movs	r3, #0
 80145f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80145fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d102      	bne.n	8014608 <f_mkdir+0xa0>
 8014602:	2307      	movs	r3, #7
 8014604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801460a:	2b01      	cmp	r3, #1
 801460c:	d102      	bne.n	8014614 <f_mkdir+0xac>
 801460e:	2302      	movs	r3, #2
 8014610:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801461a:	d102      	bne.n	8014622 <f_mkdir+0xba>
 801461c:	2301      	movs	r3, #1
 801461e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014626:	2b00      	cmp	r3, #0
 8014628:	d106      	bne.n	8014638 <f_mkdir+0xd0>
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	4618      	mov	r0, r3
 801462e:	f7fd faff 	bl	8011c30 <sync_window>
 8014632:	4603      	mov	r3, r0
 8014634:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014638:	4b58      	ldr	r3, [pc, #352]	; (801479c <f_mkdir+0x234>)
 801463a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801463c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014640:	2b00      	cmp	r3, #0
 8014642:	d16c      	bne.n	801471e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014648:	4618      	mov	r0, r3
 801464a:	f7fd fbd3 	bl	8011df4 <clust2sect>
 801464e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	3338      	adds	r3, #56	; 0x38
 8014654:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	899b      	ldrh	r3, [r3, #12]
 801465a:	461a      	mov	r2, r3
 801465c:	2100      	movs	r1, #0
 801465e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014660:	f7fd f91d 	bl	801189e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014664:	220b      	movs	r2, #11
 8014666:	2120      	movs	r1, #32
 8014668:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801466a:	f7fd f918 	bl	801189e <mem_set>
					dir[DIR_Name] = '.';
 801466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014670:	222e      	movs	r2, #46	; 0x2e
 8014672:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014676:	330b      	adds	r3, #11
 8014678:	2210      	movs	r2, #16
 801467a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801467e:	3316      	adds	r3, #22
 8014680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014682:	4618      	mov	r0, r3
 8014684:	f7fd f8be 	bl	8011804 <st_dword>
					st_clust(fs, dir, dcl);
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801468c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801468e:	4618      	mov	r0, r3
 8014690:	f7fe f8b0 	bl	80127f4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014696:	3320      	adds	r3, #32
 8014698:	2220      	movs	r2, #32
 801469a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801469c:	4618      	mov	r0, r3
 801469e:	f7fd f8dd 	bl	801185c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80146a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a4:	3321      	adds	r3, #33	; 0x21
 80146a6:	222e      	movs	r2, #46	; 0x2e
 80146a8:	701a      	strb	r2, [r3, #0]
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	2b03      	cmp	r3, #3
 80146b4:	d106      	bne.n	80146c4 <f_mkdir+0x15c>
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146bc:	429a      	cmp	r2, r3
 80146be:	d101      	bne.n	80146c4 <f_mkdir+0x15c>
 80146c0:	2300      	movs	r3, #0
 80146c2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80146c4:	68b8      	ldr	r0, [r7, #8]
 80146c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146c8:	3320      	adds	r3, #32
 80146ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146cc:	4619      	mov	r1, r3
 80146ce:	f7fe f891 	bl	80127f4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	895b      	ldrh	r3, [r3, #10]
 80146d6:	653b      	str	r3, [r7, #80]	; 0x50
 80146d8:	e01c      	b.n	8014714 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80146da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146dc:	1c5a      	adds	r2, r3, #1
 80146de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80146e0:	68ba      	ldr	r2, [r7, #8]
 80146e2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	2201      	movs	r2, #1
 80146e8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7fd fa9f 	bl	8011c30 <sync_window>
 80146f2:	4603      	mov	r3, r0
 80146f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80146f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d10d      	bne.n	801471c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	899b      	ldrh	r3, [r3, #12]
 8014704:	461a      	mov	r2, r3
 8014706:	2100      	movs	r1, #0
 8014708:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801470a:	f7fd f8c8 	bl	801189e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801470e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014710:	3b01      	subs	r3, #1
 8014712:	653b      	str	r3, [r7, #80]	; 0x50
 8014714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014716:	2b00      	cmp	r3, #0
 8014718:	d1df      	bne.n	80146da <f_mkdir+0x172>
 801471a:	e000      	b.n	801471e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801471c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801471e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014722:	2b00      	cmp	r3, #0
 8014724:	d107      	bne.n	8014736 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014726:	f107 030c 	add.w	r3, r7, #12
 801472a:	4618      	mov	r0, r3
 801472c:	f7fe f934 	bl	8012998 <dir_register>
 8014730:	4603      	mov	r3, r0
 8014732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801473a:	2b00      	cmp	r3, #0
 801473c:	d120      	bne.n	8014780 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014740:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014744:	3316      	adds	r3, #22
 8014746:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014748:	4618      	mov	r0, r3
 801474a:	f7fd f85b 	bl	8011804 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014754:	4618      	mov	r0, r3
 8014756:	f7fe f84d 	bl	80127f4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801475c:	330b      	adds	r3, #11
 801475e:	2210      	movs	r2, #16
 8014760:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	2201      	movs	r2, #1
 8014766:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801476c:	2b00      	cmp	r3, #0
 801476e:	d10e      	bne.n	801478e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	4618      	mov	r0, r3
 8014774:	f7fd face 	bl	8011d14 <sync_fs>
 8014778:	4603      	mov	r3, r0
 801477a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801477e:	e006      	b.n	801478e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014780:	f107 030c 	add.w	r3, r7, #12
 8014784:	2200      	movs	r2, #0
 8014786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014788:	4618      	mov	r0, r3
 801478a:	f7fd fd39 	bl	8012200 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801478e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014792:	4618      	mov	r0, r3
 8014794:	3758      	adds	r7, #88	; 0x58
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	274a0000 	.word	0x274a0000

080147a0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b088      	sub	sp, #32
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147ac:	2300      	movs	r3, #0
 80147ae:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147b4:	e017      	b.n	80147e6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147b6:	f107 0310 	add.w	r3, r7, #16
 80147ba:	f107 0114 	add.w	r1, r7, #20
 80147be:	2201      	movs	r2, #1
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff f803 	bl	80137cc <f_read>
		if (rc != 1) break;
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d112      	bne.n	80147f2 <f_gets+0x52>
		c = s[0];
 80147cc:	7d3b      	ldrb	r3, [r7, #20]
 80147ce:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80147d0:	69bb      	ldr	r3, [r7, #24]
 80147d2:	1c5a      	adds	r2, r3, #1
 80147d4:	61ba      	str	r2, [r7, #24]
 80147d6:	7dfa      	ldrb	r2, [r7, #23]
 80147d8:	701a      	strb	r2, [r3, #0]
		n++;
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	3301      	adds	r3, #1
 80147de:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80147e0:	7dfb      	ldrb	r3, [r7, #23]
 80147e2:	2b0a      	cmp	r3, #10
 80147e4:	d007      	beq.n	80147f6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	69fa      	ldr	r2, [r7, #28]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	dbe2      	blt.n	80147b6 <f_gets+0x16>
 80147f0:	e002      	b.n	80147f8 <f_gets+0x58>
		if (rc != 1) break;
 80147f2:	bf00      	nop
 80147f4:	e000      	b.n	80147f8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80147f6:	bf00      	nop
	}
	*p = 0;
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	2200      	movs	r2, #0
 80147fc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80147fe:	69fb      	ldr	r3, [r7, #28]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d001      	beq.n	8014808 <f_gets+0x68>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	e000      	b.n	801480a <f_gets+0x6a>
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	3720      	adds	r7, #32
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
	...

08014814 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014814:	b480      	push	{r7}
 8014816:	b087      	sub	sp, #28
 8014818:	af00      	add	r7, sp, #0
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	60b9      	str	r1, [r7, #8]
 801481e:	4613      	mov	r3, r2
 8014820:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014822:	2301      	movs	r3, #1
 8014824:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014826:	2300      	movs	r3, #0
 8014828:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801482a:	4b1f      	ldr	r3, [pc, #124]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 801482c:	7a5b      	ldrb	r3, [r3, #9]
 801482e:	b2db      	uxtb	r3, r3
 8014830:	2b00      	cmp	r3, #0
 8014832:	d131      	bne.n	8014898 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014834:	4b1c      	ldr	r3, [pc, #112]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 8014836:	7a5b      	ldrb	r3, [r3, #9]
 8014838:	b2db      	uxtb	r3, r3
 801483a:	461a      	mov	r2, r3
 801483c:	4b1a      	ldr	r3, [pc, #104]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 801483e:	2100      	movs	r1, #0
 8014840:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014842:	4b19      	ldr	r3, [pc, #100]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 8014844:	7a5b      	ldrb	r3, [r3, #9]
 8014846:	b2db      	uxtb	r3, r3
 8014848:	4a17      	ldr	r2, [pc, #92]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	4413      	add	r3, r2
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014852:	4b15      	ldr	r3, [pc, #84]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 8014854:	7a5b      	ldrb	r3, [r3, #9]
 8014856:	b2db      	uxtb	r3, r3
 8014858:	461a      	mov	r2, r3
 801485a:	4b13      	ldr	r3, [pc, #76]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 801485c:	4413      	add	r3, r2
 801485e:	79fa      	ldrb	r2, [r7, #7]
 8014860:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014862:	4b11      	ldr	r3, [pc, #68]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 8014864:	7a5b      	ldrb	r3, [r3, #9]
 8014866:	b2db      	uxtb	r3, r3
 8014868:	1c5a      	adds	r2, r3, #1
 801486a:	b2d1      	uxtb	r1, r2
 801486c:	4a0e      	ldr	r2, [pc, #56]	; (80148a8 <FATFS_LinkDriverEx+0x94>)
 801486e:	7251      	strb	r1, [r2, #9]
 8014870:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014872:	7dbb      	ldrb	r3, [r7, #22]
 8014874:	3330      	adds	r3, #48	; 0x30
 8014876:	b2da      	uxtb	r2, r3
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	3301      	adds	r3, #1
 8014880:	223a      	movs	r2, #58	; 0x3a
 8014882:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	3302      	adds	r3, #2
 8014888:	222f      	movs	r2, #47	; 0x2f
 801488a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	3303      	adds	r3, #3
 8014890:	2200      	movs	r2, #0
 8014892:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014894:	2300      	movs	r3, #0
 8014896:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014898:	7dfb      	ldrb	r3, [r7, #23]
}
 801489a:	4618      	mov	r0, r3
 801489c:	371c      	adds	r7, #28
 801489e:	46bd      	mov	sp, r7
 80148a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a4:	4770      	bx	lr
 80148a6:	bf00      	nop
 80148a8:	20048234 	.word	0x20048234

080148ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148b6:	2200      	movs	r2, #0
 80148b8:	6839      	ldr	r1, [r7, #0]
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f7ff ffaa 	bl	8014814 <FATFS_LinkDriverEx>
 80148c0:	4603      	mov	r3, r0
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3708      	adds	r7, #8
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}

080148ca <__cxa_guard_acquire>:
 80148ca:	6803      	ldr	r3, [r0, #0]
 80148cc:	07db      	lsls	r3, r3, #31
 80148ce:	d406      	bmi.n	80148de <__cxa_guard_acquire+0x14>
 80148d0:	7843      	ldrb	r3, [r0, #1]
 80148d2:	b103      	cbz	r3, 80148d6 <__cxa_guard_acquire+0xc>
 80148d4:	deff      	udf	#255	; 0xff
 80148d6:	2301      	movs	r3, #1
 80148d8:	7043      	strb	r3, [r0, #1]
 80148da:	4618      	mov	r0, r3
 80148dc:	4770      	bx	lr
 80148de:	2000      	movs	r0, #0
 80148e0:	4770      	bx	lr

080148e2 <__cxa_guard_release>:
 80148e2:	2301      	movs	r3, #1
 80148e4:	6003      	str	r3, [r0, #0]
 80148e6:	4770      	bx	lr

080148e8 <cos>:
 80148e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148ea:	ec51 0b10 	vmov	r0, r1, d0
 80148ee:	4a1e      	ldr	r2, [pc, #120]	; (8014968 <cos+0x80>)
 80148f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148f4:	4293      	cmp	r3, r2
 80148f6:	dc06      	bgt.n	8014906 <cos+0x1e>
 80148f8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014960 <cos+0x78>
 80148fc:	f000 fa74 	bl	8014de8 <__kernel_cos>
 8014900:	ec51 0b10 	vmov	r0, r1, d0
 8014904:	e007      	b.n	8014916 <cos+0x2e>
 8014906:	4a19      	ldr	r2, [pc, #100]	; (801496c <cos+0x84>)
 8014908:	4293      	cmp	r3, r2
 801490a:	dd09      	ble.n	8014920 <cos+0x38>
 801490c:	ee10 2a10 	vmov	r2, s0
 8014910:	460b      	mov	r3, r1
 8014912:	f7eb fcd1 	bl	80002b8 <__aeabi_dsub>
 8014916:	ec41 0b10 	vmov	d0, r0, r1
 801491a:	b005      	add	sp, #20
 801491c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014920:	4668      	mov	r0, sp
 8014922:	f000 f86d 	bl	8014a00 <__ieee754_rem_pio2>
 8014926:	f000 0003 	and.w	r0, r0, #3
 801492a:	2801      	cmp	r0, #1
 801492c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014930:	ed9d 0b00 	vldr	d0, [sp]
 8014934:	d007      	beq.n	8014946 <cos+0x5e>
 8014936:	2802      	cmp	r0, #2
 8014938:	d00e      	beq.n	8014958 <cos+0x70>
 801493a:	2800      	cmp	r0, #0
 801493c:	d0de      	beq.n	80148fc <cos+0x14>
 801493e:	2001      	movs	r0, #1
 8014940:	f000 fe5a 	bl	80155f8 <__kernel_sin>
 8014944:	e7dc      	b.n	8014900 <cos+0x18>
 8014946:	f000 fe57 	bl	80155f8 <__kernel_sin>
 801494a:	ec53 2b10 	vmov	r2, r3, d0
 801494e:	ee10 0a10 	vmov	r0, s0
 8014952:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014956:	e7de      	b.n	8014916 <cos+0x2e>
 8014958:	f000 fa46 	bl	8014de8 <__kernel_cos>
 801495c:	e7f5      	b.n	801494a <cos+0x62>
 801495e:	bf00      	nop
	...
 8014968:	3fe921fb 	.word	0x3fe921fb
 801496c:	7fefffff 	.word	0x7fefffff

08014970 <sin>:
 8014970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014972:	ec51 0b10 	vmov	r0, r1, d0
 8014976:	4a20      	ldr	r2, [pc, #128]	; (80149f8 <sin+0x88>)
 8014978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801497c:	4293      	cmp	r3, r2
 801497e:	dc07      	bgt.n	8014990 <sin+0x20>
 8014980:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80149f0 <sin+0x80>
 8014984:	2000      	movs	r0, #0
 8014986:	f000 fe37 	bl	80155f8 <__kernel_sin>
 801498a:	ec51 0b10 	vmov	r0, r1, d0
 801498e:	e007      	b.n	80149a0 <sin+0x30>
 8014990:	4a1a      	ldr	r2, [pc, #104]	; (80149fc <sin+0x8c>)
 8014992:	4293      	cmp	r3, r2
 8014994:	dd09      	ble.n	80149aa <sin+0x3a>
 8014996:	ee10 2a10 	vmov	r2, s0
 801499a:	460b      	mov	r3, r1
 801499c:	f7eb fc8c 	bl	80002b8 <__aeabi_dsub>
 80149a0:	ec41 0b10 	vmov	d0, r0, r1
 80149a4:	b005      	add	sp, #20
 80149a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80149aa:	4668      	mov	r0, sp
 80149ac:	f000 f828 	bl	8014a00 <__ieee754_rem_pio2>
 80149b0:	f000 0003 	and.w	r0, r0, #3
 80149b4:	2801      	cmp	r0, #1
 80149b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149ba:	ed9d 0b00 	vldr	d0, [sp]
 80149be:	d004      	beq.n	80149ca <sin+0x5a>
 80149c0:	2802      	cmp	r0, #2
 80149c2:	d005      	beq.n	80149d0 <sin+0x60>
 80149c4:	b970      	cbnz	r0, 80149e4 <sin+0x74>
 80149c6:	2001      	movs	r0, #1
 80149c8:	e7dd      	b.n	8014986 <sin+0x16>
 80149ca:	f000 fa0d 	bl	8014de8 <__kernel_cos>
 80149ce:	e7dc      	b.n	801498a <sin+0x1a>
 80149d0:	2001      	movs	r0, #1
 80149d2:	f000 fe11 	bl	80155f8 <__kernel_sin>
 80149d6:	ec53 2b10 	vmov	r2, r3, d0
 80149da:	ee10 0a10 	vmov	r0, s0
 80149de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80149e2:	e7dd      	b.n	80149a0 <sin+0x30>
 80149e4:	f000 fa00 	bl	8014de8 <__kernel_cos>
 80149e8:	e7f5      	b.n	80149d6 <sin+0x66>
 80149ea:	bf00      	nop
 80149ec:	f3af 8000 	nop.w
	...
 80149f8:	3fe921fb 	.word	0x3fe921fb
 80149fc:	7fefffff 	.word	0x7fefffff

08014a00 <__ieee754_rem_pio2>:
 8014a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a04:	ec57 6b10 	vmov	r6, r7, d0
 8014a08:	4bc3      	ldr	r3, [pc, #780]	; (8014d18 <__ieee754_rem_pio2+0x318>)
 8014a0a:	b08d      	sub	sp, #52	; 0x34
 8014a0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014a10:	4598      	cmp	r8, r3
 8014a12:	4604      	mov	r4, r0
 8014a14:	9704      	str	r7, [sp, #16]
 8014a16:	dc07      	bgt.n	8014a28 <__ieee754_rem_pio2+0x28>
 8014a18:	2200      	movs	r2, #0
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	ed84 0b00 	vstr	d0, [r4]
 8014a20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014a24:	2500      	movs	r5, #0
 8014a26:	e027      	b.n	8014a78 <__ieee754_rem_pio2+0x78>
 8014a28:	4bbc      	ldr	r3, [pc, #752]	; (8014d1c <__ieee754_rem_pio2+0x31c>)
 8014a2a:	4598      	cmp	r8, r3
 8014a2c:	dc75      	bgt.n	8014b1a <__ieee754_rem_pio2+0x11a>
 8014a2e:	9b04      	ldr	r3, [sp, #16]
 8014a30:	4dbb      	ldr	r5, [pc, #748]	; (8014d20 <__ieee754_rem_pio2+0x320>)
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	ee10 0a10 	vmov	r0, s0
 8014a38:	a3a9      	add	r3, pc, #676	; (adr r3, 8014ce0 <__ieee754_rem_pio2+0x2e0>)
 8014a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3e:	4639      	mov	r1, r7
 8014a40:	dd36      	ble.n	8014ab0 <__ieee754_rem_pio2+0xb0>
 8014a42:	f7eb fc39 	bl	80002b8 <__aeabi_dsub>
 8014a46:	45a8      	cmp	r8, r5
 8014a48:	4606      	mov	r6, r0
 8014a4a:	460f      	mov	r7, r1
 8014a4c:	d018      	beq.n	8014a80 <__ieee754_rem_pio2+0x80>
 8014a4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e8>)
 8014a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a54:	f7eb fc30 	bl	80002b8 <__aeabi_dsub>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8014a60:	4630      	mov	r0, r6
 8014a62:	4639      	mov	r1, r7
 8014a64:	f7eb fc28 	bl	80002b8 <__aeabi_dsub>
 8014a68:	a39f      	add	r3, pc, #636	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e8>)
 8014a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a6e:	f7eb fc23 	bl	80002b8 <__aeabi_dsub>
 8014a72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a76:	2501      	movs	r5, #1
 8014a78:	4628      	mov	r0, r5
 8014a7a:	b00d      	add	sp, #52	; 0x34
 8014a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a80:	a39b      	add	r3, pc, #620	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2f0>)
 8014a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a86:	f7eb fc17 	bl	80002b8 <__aeabi_dsub>
 8014a8a:	a39b      	add	r3, pc, #620	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f8>)
 8014a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a90:	4606      	mov	r6, r0
 8014a92:	460f      	mov	r7, r1
 8014a94:	f7eb fc10 	bl	80002b8 <__aeabi_dsub>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	460b      	mov	r3, r1
 8014a9c:	e9c4 2300 	strd	r2, r3, [r4]
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	4639      	mov	r1, r7
 8014aa4:	f7eb fc08 	bl	80002b8 <__aeabi_dsub>
 8014aa8:	a393      	add	r3, pc, #588	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f8>)
 8014aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aae:	e7de      	b.n	8014a6e <__ieee754_rem_pio2+0x6e>
 8014ab0:	f7eb fc04 	bl	80002bc <__adddf3>
 8014ab4:	45a8      	cmp	r8, r5
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	460f      	mov	r7, r1
 8014aba:	d016      	beq.n	8014aea <__ieee754_rem_pio2+0xea>
 8014abc:	a38a      	add	r3, pc, #552	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e8>)
 8014abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac2:	f7eb fbfb 	bl	80002bc <__adddf3>
 8014ac6:	4602      	mov	r2, r0
 8014ac8:	460b      	mov	r3, r1
 8014aca:	e9c4 2300 	strd	r2, r3, [r4]
 8014ace:	4630      	mov	r0, r6
 8014ad0:	4639      	mov	r1, r7
 8014ad2:	f7eb fbf1 	bl	80002b8 <__aeabi_dsub>
 8014ad6:	a384      	add	r3, pc, #528	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e8>)
 8014ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014adc:	f7eb fbee 	bl	80002bc <__adddf3>
 8014ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8014ae4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014ae8:	e7c6      	b.n	8014a78 <__ieee754_rem_pio2+0x78>
 8014aea:	a381      	add	r3, pc, #516	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2f0>)
 8014aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af0:	f7eb fbe4 	bl	80002bc <__adddf3>
 8014af4:	a380      	add	r3, pc, #512	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f8>)
 8014af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014afa:	4606      	mov	r6, r0
 8014afc:	460f      	mov	r7, r1
 8014afe:	f7eb fbdd 	bl	80002bc <__adddf3>
 8014b02:	4602      	mov	r2, r0
 8014b04:	460b      	mov	r3, r1
 8014b06:	e9c4 2300 	strd	r2, r3, [r4]
 8014b0a:	4630      	mov	r0, r6
 8014b0c:	4639      	mov	r1, r7
 8014b0e:	f7eb fbd3 	bl	80002b8 <__aeabi_dsub>
 8014b12:	a379      	add	r3, pc, #484	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f8>)
 8014b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b18:	e7e0      	b.n	8014adc <__ieee754_rem_pio2+0xdc>
 8014b1a:	4b82      	ldr	r3, [pc, #520]	; (8014d24 <__ieee754_rem_pio2+0x324>)
 8014b1c:	4598      	cmp	r8, r3
 8014b1e:	f300 80d0 	bgt.w	8014cc2 <__ieee754_rem_pio2+0x2c2>
 8014b22:	f000 fe23 	bl	801576c <fabs>
 8014b26:	ec57 6b10 	vmov	r6, r7, d0
 8014b2a:	ee10 0a10 	vmov	r0, s0
 8014b2e:	a374      	add	r3, pc, #464	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x300>)
 8014b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b34:	4639      	mov	r1, r7
 8014b36:	f7eb fd77 	bl	8000628 <__aeabi_dmul>
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	4b7a      	ldr	r3, [pc, #488]	; (8014d28 <__ieee754_rem_pio2+0x328>)
 8014b3e:	f7eb fbbd 	bl	80002bc <__adddf3>
 8014b42:	f7ec f821 	bl	8000b88 <__aeabi_d2iz>
 8014b46:	4605      	mov	r5, r0
 8014b48:	f7eb fd04 	bl	8000554 <__aeabi_i2d>
 8014b4c:	a364      	add	r3, pc, #400	; (adr r3, 8014ce0 <__ieee754_rem_pio2+0x2e0>)
 8014b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b56:	f7eb fd67 	bl	8000628 <__aeabi_dmul>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	4630      	mov	r0, r6
 8014b60:	4639      	mov	r1, r7
 8014b62:	f7eb fba9 	bl	80002b8 <__aeabi_dsub>
 8014b66:	a360      	add	r3, pc, #384	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e8>)
 8014b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b6c:	4682      	mov	sl, r0
 8014b6e:	468b      	mov	fp, r1
 8014b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b74:	f7eb fd58 	bl	8000628 <__aeabi_dmul>
 8014b78:	2d1f      	cmp	r5, #31
 8014b7a:	4606      	mov	r6, r0
 8014b7c:	460f      	mov	r7, r1
 8014b7e:	dc0c      	bgt.n	8014b9a <__ieee754_rem_pio2+0x19a>
 8014b80:	1e6a      	subs	r2, r5, #1
 8014b82:	4b6a      	ldr	r3, [pc, #424]	; (8014d2c <__ieee754_rem_pio2+0x32c>)
 8014b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b88:	4543      	cmp	r3, r8
 8014b8a:	d006      	beq.n	8014b9a <__ieee754_rem_pio2+0x19a>
 8014b8c:	4632      	mov	r2, r6
 8014b8e:	463b      	mov	r3, r7
 8014b90:	4650      	mov	r0, sl
 8014b92:	4659      	mov	r1, fp
 8014b94:	f7eb fb90 	bl	80002b8 <__aeabi_dsub>
 8014b98:	e00e      	b.n	8014bb8 <__ieee754_rem_pio2+0x1b8>
 8014b9a:	4632      	mov	r2, r6
 8014b9c:	463b      	mov	r3, r7
 8014b9e:	4650      	mov	r0, sl
 8014ba0:	4659      	mov	r1, fp
 8014ba2:	f7eb fb89 	bl	80002b8 <__aeabi_dsub>
 8014ba6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014baa:	9305      	str	r3, [sp, #20]
 8014bac:	9a05      	ldr	r2, [sp, #20]
 8014bae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	2b10      	cmp	r3, #16
 8014bb6:	dc02      	bgt.n	8014bbe <__ieee754_rem_pio2+0x1be>
 8014bb8:	e9c4 0100 	strd	r0, r1, [r4]
 8014bbc:	e039      	b.n	8014c32 <__ieee754_rem_pio2+0x232>
 8014bbe:	a34c      	add	r3, pc, #304	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2f0>)
 8014bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bc8:	f7eb fd2e 	bl	8000628 <__aeabi_dmul>
 8014bcc:	4606      	mov	r6, r0
 8014bce:	460f      	mov	r7, r1
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	4650      	mov	r0, sl
 8014bd6:	4659      	mov	r1, fp
 8014bd8:	f7eb fb6e 	bl	80002b8 <__aeabi_dsub>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	460b      	mov	r3, r1
 8014be0:	4680      	mov	r8, r0
 8014be2:	4689      	mov	r9, r1
 8014be4:	4650      	mov	r0, sl
 8014be6:	4659      	mov	r1, fp
 8014be8:	f7eb fb66 	bl	80002b8 <__aeabi_dsub>
 8014bec:	4632      	mov	r2, r6
 8014bee:	463b      	mov	r3, r7
 8014bf0:	f7eb fb62 	bl	80002b8 <__aeabi_dsub>
 8014bf4:	a340      	add	r3, pc, #256	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f8>)
 8014bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bfa:	4606      	mov	r6, r0
 8014bfc:	460f      	mov	r7, r1
 8014bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c02:	f7eb fd11 	bl	8000628 <__aeabi_dmul>
 8014c06:	4632      	mov	r2, r6
 8014c08:	463b      	mov	r3, r7
 8014c0a:	f7eb fb55 	bl	80002b8 <__aeabi_dsub>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	460b      	mov	r3, r1
 8014c12:	4606      	mov	r6, r0
 8014c14:	460f      	mov	r7, r1
 8014c16:	4640      	mov	r0, r8
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f7eb fb4d 	bl	80002b8 <__aeabi_dsub>
 8014c1e:	9a05      	ldr	r2, [sp, #20]
 8014c20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	2b31      	cmp	r3, #49	; 0x31
 8014c28:	dc20      	bgt.n	8014c6c <__ieee754_rem_pio2+0x26c>
 8014c2a:	e9c4 0100 	strd	r0, r1, [r4]
 8014c2e:	46c2      	mov	sl, r8
 8014c30:	46cb      	mov	fp, r9
 8014c32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014c36:	4650      	mov	r0, sl
 8014c38:	4642      	mov	r2, r8
 8014c3a:	464b      	mov	r3, r9
 8014c3c:	4659      	mov	r1, fp
 8014c3e:	f7eb fb3b 	bl	80002b8 <__aeabi_dsub>
 8014c42:	463b      	mov	r3, r7
 8014c44:	4632      	mov	r2, r6
 8014c46:	f7eb fb37 	bl	80002b8 <__aeabi_dsub>
 8014c4a:	9b04      	ldr	r3, [sp, #16]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c52:	f6bf af11 	bge.w	8014a78 <__ieee754_rem_pio2+0x78>
 8014c56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c5a:	6063      	str	r3, [r4, #4]
 8014c5c:	f8c4 8000 	str.w	r8, [r4]
 8014c60:	60a0      	str	r0, [r4, #8]
 8014c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c66:	60e3      	str	r3, [r4, #12]
 8014c68:	426d      	negs	r5, r5
 8014c6a:	e705      	b.n	8014a78 <__ieee754_rem_pio2+0x78>
 8014c6c:	a326      	add	r3, pc, #152	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x308>)
 8014c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c76:	f7eb fcd7 	bl	8000628 <__aeabi_dmul>
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	460f      	mov	r7, r1
 8014c7e:	4602      	mov	r2, r0
 8014c80:	460b      	mov	r3, r1
 8014c82:	4640      	mov	r0, r8
 8014c84:	4649      	mov	r1, r9
 8014c86:	f7eb fb17 	bl	80002b8 <__aeabi_dsub>
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	4682      	mov	sl, r0
 8014c90:	468b      	mov	fp, r1
 8014c92:	4640      	mov	r0, r8
 8014c94:	4649      	mov	r1, r9
 8014c96:	f7eb fb0f 	bl	80002b8 <__aeabi_dsub>
 8014c9a:	4632      	mov	r2, r6
 8014c9c:	463b      	mov	r3, r7
 8014c9e:	f7eb fb0b 	bl	80002b8 <__aeabi_dsub>
 8014ca2:	a31b      	add	r3, pc, #108	; (adr r3, 8014d10 <__ieee754_rem_pio2+0x310>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	4606      	mov	r6, r0
 8014caa:	460f      	mov	r7, r1
 8014cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cb0:	f7eb fcba 	bl	8000628 <__aeabi_dmul>
 8014cb4:	4632      	mov	r2, r6
 8014cb6:	463b      	mov	r3, r7
 8014cb8:	f7eb fafe 	bl	80002b8 <__aeabi_dsub>
 8014cbc:	4606      	mov	r6, r0
 8014cbe:	460f      	mov	r7, r1
 8014cc0:	e764      	b.n	8014b8c <__ieee754_rem_pio2+0x18c>
 8014cc2:	4b1b      	ldr	r3, [pc, #108]	; (8014d30 <__ieee754_rem_pio2+0x330>)
 8014cc4:	4598      	cmp	r8, r3
 8014cc6:	dd35      	ble.n	8014d34 <__ieee754_rem_pio2+0x334>
 8014cc8:	ee10 2a10 	vmov	r2, s0
 8014ccc:	463b      	mov	r3, r7
 8014cce:	4630      	mov	r0, r6
 8014cd0:	4639      	mov	r1, r7
 8014cd2:	f7eb faf1 	bl	80002b8 <__aeabi_dsub>
 8014cd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014cda:	e9c4 0100 	strd	r0, r1, [r4]
 8014cde:	e6a1      	b.n	8014a24 <__ieee754_rem_pio2+0x24>
 8014ce0:	54400000 	.word	0x54400000
 8014ce4:	3ff921fb 	.word	0x3ff921fb
 8014ce8:	1a626331 	.word	0x1a626331
 8014cec:	3dd0b461 	.word	0x3dd0b461
 8014cf0:	1a600000 	.word	0x1a600000
 8014cf4:	3dd0b461 	.word	0x3dd0b461
 8014cf8:	2e037073 	.word	0x2e037073
 8014cfc:	3ba3198a 	.word	0x3ba3198a
 8014d00:	6dc9c883 	.word	0x6dc9c883
 8014d04:	3fe45f30 	.word	0x3fe45f30
 8014d08:	2e000000 	.word	0x2e000000
 8014d0c:	3ba3198a 	.word	0x3ba3198a
 8014d10:	252049c1 	.word	0x252049c1
 8014d14:	397b839a 	.word	0x397b839a
 8014d18:	3fe921fb 	.word	0x3fe921fb
 8014d1c:	4002d97b 	.word	0x4002d97b
 8014d20:	3ff921fb 	.word	0x3ff921fb
 8014d24:	413921fb 	.word	0x413921fb
 8014d28:	3fe00000 	.word	0x3fe00000
 8014d2c:	0801a2a4 	.word	0x0801a2a4
 8014d30:	7fefffff 	.word	0x7fefffff
 8014d34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014d38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014d3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014d40:	4630      	mov	r0, r6
 8014d42:	460f      	mov	r7, r1
 8014d44:	f7eb ff20 	bl	8000b88 <__aeabi_d2iz>
 8014d48:	f7eb fc04 	bl	8000554 <__aeabi_i2d>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	460b      	mov	r3, r1
 8014d50:	4630      	mov	r0, r6
 8014d52:	4639      	mov	r1, r7
 8014d54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d58:	f7eb faae 	bl	80002b8 <__aeabi_dsub>
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	4b1f      	ldr	r3, [pc, #124]	; (8014ddc <__ieee754_rem_pio2+0x3dc>)
 8014d60:	f7eb fc62 	bl	8000628 <__aeabi_dmul>
 8014d64:	460f      	mov	r7, r1
 8014d66:	4606      	mov	r6, r0
 8014d68:	f7eb ff0e 	bl	8000b88 <__aeabi_d2iz>
 8014d6c:	f7eb fbf2 	bl	8000554 <__aeabi_i2d>
 8014d70:	4602      	mov	r2, r0
 8014d72:	460b      	mov	r3, r1
 8014d74:	4630      	mov	r0, r6
 8014d76:	4639      	mov	r1, r7
 8014d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d7c:	f7eb fa9c 	bl	80002b8 <__aeabi_dsub>
 8014d80:	2200      	movs	r2, #0
 8014d82:	4b16      	ldr	r3, [pc, #88]	; (8014ddc <__ieee754_rem_pio2+0x3dc>)
 8014d84:	f7eb fc50 	bl	8000628 <__aeabi_dmul>
 8014d88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014d8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014d90:	f04f 0803 	mov.w	r8, #3
 8014d94:	2600      	movs	r6, #0
 8014d96:	2700      	movs	r7, #0
 8014d98:	4632      	mov	r2, r6
 8014d9a:	463b      	mov	r3, r7
 8014d9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014da0:	f108 3aff 	add.w	sl, r8, #4294967295
 8014da4:	f7eb fea8 	bl	8000af8 <__aeabi_dcmpeq>
 8014da8:	b9b0      	cbnz	r0, 8014dd8 <__ieee754_rem_pio2+0x3d8>
 8014daa:	4b0d      	ldr	r3, [pc, #52]	; (8014de0 <__ieee754_rem_pio2+0x3e0>)
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	2302      	movs	r3, #2
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	462a      	mov	r2, r5
 8014db4:	4643      	mov	r3, r8
 8014db6:	4621      	mov	r1, r4
 8014db8:	a806      	add	r0, sp, #24
 8014dba:	f000 f8dd 	bl	8014f78 <__kernel_rem_pio2>
 8014dbe:	9b04      	ldr	r3, [sp, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	f6bf ae58 	bge.w	8014a78 <__ieee754_rem_pio2+0x78>
 8014dc8:	6863      	ldr	r3, [r4, #4]
 8014dca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014dce:	6063      	str	r3, [r4, #4]
 8014dd0:	68e3      	ldr	r3, [r4, #12]
 8014dd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014dd6:	e746      	b.n	8014c66 <__ieee754_rem_pio2+0x266>
 8014dd8:	46d0      	mov	r8, sl
 8014dda:	e7dd      	b.n	8014d98 <__ieee754_rem_pio2+0x398>
 8014ddc:	41700000 	.word	0x41700000
 8014de0:	0801a324 	.word	0x0801a324
 8014de4:	00000000 	.word	0x00000000

08014de8 <__kernel_cos>:
 8014de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dec:	ec59 8b10 	vmov	r8, r9, d0
 8014df0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014df4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014df8:	ed2d 8b02 	vpush	{d8}
 8014dfc:	eeb0 8a41 	vmov.f32	s16, s2
 8014e00:	eef0 8a61 	vmov.f32	s17, s3
 8014e04:	da07      	bge.n	8014e16 <__kernel_cos+0x2e>
 8014e06:	ee10 0a10 	vmov	r0, s0
 8014e0a:	4649      	mov	r1, r9
 8014e0c:	f7eb febc 	bl	8000b88 <__aeabi_d2iz>
 8014e10:	2800      	cmp	r0, #0
 8014e12:	f000 8089 	beq.w	8014f28 <__kernel_cos+0x140>
 8014e16:	4642      	mov	r2, r8
 8014e18:	464b      	mov	r3, r9
 8014e1a:	4640      	mov	r0, r8
 8014e1c:	4649      	mov	r1, r9
 8014e1e:	f7eb fc03 	bl	8000628 <__aeabi_dmul>
 8014e22:	2200      	movs	r2, #0
 8014e24:	4b4e      	ldr	r3, [pc, #312]	; (8014f60 <__kernel_cos+0x178>)
 8014e26:	4604      	mov	r4, r0
 8014e28:	460d      	mov	r5, r1
 8014e2a:	f7eb fbfd 	bl	8000628 <__aeabi_dmul>
 8014e2e:	a340      	add	r3, pc, #256	; (adr r3, 8014f30 <__kernel_cos+0x148>)
 8014e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e34:	4682      	mov	sl, r0
 8014e36:	468b      	mov	fp, r1
 8014e38:	4620      	mov	r0, r4
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	f7eb fbf4 	bl	8000628 <__aeabi_dmul>
 8014e40:	a33d      	add	r3, pc, #244	; (adr r3, 8014f38 <__kernel_cos+0x150>)
 8014e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e46:	f7eb fa39 	bl	80002bc <__adddf3>
 8014e4a:	4622      	mov	r2, r4
 8014e4c:	462b      	mov	r3, r5
 8014e4e:	f7eb fbeb 	bl	8000628 <__aeabi_dmul>
 8014e52:	a33b      	add	r3, pc, #236	; (adr r3, 8014f40 <__kernel_cos+0x158>)
 8014e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e58:	f7eb fa2e 	bl	80002b8 <__aeabi_dsub>
 8014e5c:	4622      	mov	r2, r4
 8014e5e:	462b      	mov	r3, r5
 8014e60:	f7eb fbe2 	bl	8000628 <__aeabi_dmul>
 8014e64:	a338      	add	r3, pc, #224	; (adr r3, 8014f48 <__kernel_cos+0x160>)
 8014e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6a:	f7eb fa27 	bl	80002bc <__adddf3>
 8014e6e:	4622      	mov	r2, r4
 8014e70:	462b      	mov	r3, r5
 8014e72:	f7eb fbd9 	bl	8000628 <__aeabi_dmul>
 8014e76:	a336      	add	r3, pc, #216	; (adr r3, 8014f50 <__kernel_cos+0x168>)
 8014e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7c:	f7eb fa1c 	bl	80002b8 <__aeabi_dsub>
 8014e80:	4622      	mov	r2, r4
 8014e82:	462b      	mov	r3, r5
 8014e84:	f7eb fbd0 	bl	8000628 <__aeabi_dmul>
 8014e88:	a333      	add	r3, pc, #204	; (adr r3, 8014f58 <__kernel_cos+0x170>)
 8014e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8e:	f7eb fa15 	bl	80002bc <__adddf3>
 8014e92:	4622      	mov	r2, r4
 8014e94:	462b      	mov	r3, r5
 8014e96:	f7eb fbc7 	bl	8000628 <__aeabi_dmul>
 8014e9a:	4622      	mov	r2, r4
 8014e9c:	462b      	mov	r3, r5
 8014e9e:	f7eb fbc3 	bl	8000628 <__aeabi_dmul>
 8014ea2:	ec53 2b18 	vmov	r2, r3, d8
 8014ea6:	4604      	mov	r4, r0
 8014ea8:	460d      	mov	r5, r1
 8014eaa:	4640      	mov	r0, r8
 8014eac:	4649      	mov	r1, r9
 8014eae:	f7eb fbbb 	bl	8000628 <__aeabi_dmul>
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	4629      	mov	r1, r5
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f7eb f9fd 	bl	80002b8 <__aeabi_dsub>
 8014ebe:	4b29      	ldr	r3, [pc, #164]	; (8014f64 <__kernel_cos+0x17c>)
 8014ec0:	429e      	cmp	r6, r3
 8014ec2:	4680      	mov	r8, r0
 8014ec4:	4689      	mov	r9, r1
 8014ec6:	dc11      	bgt.n	8014eec <__kernel_cos+0x104>
 8014ec8:	4602      	mov	r2, r0
 8014eca:	460b      	mov	r3, r1
 8014ecc:	4650      	mov	r0, sl
 8014ece:	4659      	mov	r1, fp
 8014ed0:	f7eb f9f2 	bl	80002b8 <__aeabi_dsub>
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	4924      	ldr	r1, [pc, #144]	; (8014f68 <__kernel_cos+0x180>)
 8014ed8:	4602      	mov	r2, r0
 8014eda:	2000      	movs	r0, #0
 8014edc:	f7eb f9ec 	bl	80002b8 <__aeabi_dsub>
 8014ee0:	ecbd 8b02 	vpop	{d8}
 8014ee4:	ec41 0b10 	vmov	d0, r0, r1
 8014ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eec:	4b1f      	ldr	r3, [pc, #124]	; (8014f6c <__kernel_cos+0x184>)
 8014eee:	491e      	ldr	r1, [pc, #120]	; (8014f68 <__kernel_cos+0x180>)
 8014ef0:	429e      	cmp	r6, r3
 8014ef2:	bfcc      	ite	gt
 8014ef4:	4d1e      	ldrgt	r5, [pc, #120]	; (8014f70 <__kernel_cos+0x188>)
 8014ef6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014efa:	2400      	movs	r4, #0
 8014efc:	4622      	mov	r2, r4
 8014efe:	462b      	mov	r3, r5
 8014f00:	2000      	movs	r0, #0
 8014f02:	f7eb f9d9 	bl	80002b8 <__aeabi_dsub>
 8014f06:	4622      	mov	r2, r4
 8014f08:	4606      	mov	r6, r0
 8014f0a:	460f      	mov	r7, r1
 8014f0c:	462b      	mov	r3, r5
 8014f0e:	4650      	mov	r0, sl
 8014f10:	4659      	mov	r1, fp
 8014f12:	f7eb f9d1 	bl	80002b8 <__aeabi_dsub>
 8014f16:	4642      	mov	r2, r8
 8014f18:	464b      	mov	r3, r9
 8014f1a:	f7eb f9cd 	bl	80002b8 <__aeabi_dsub>
 8014f1e:	4602      	mov	r2, r0
 8014f20:	460b      	mov	r3, r1
 8014f22:	4630      	mov	r0, r6
 8014f24:	4639      	mov	r1, r7
 8014f26:	e7d9      	b.n	8014edc <__kernel_cos+0xf4>
 8014f28:	2000      	movs	r0, #0
 8014f2a:	490f      	ldr	r1, [pc, #60]	; (8014f68 <__kernel_cos+0x180>)
 8014f2c:	e7d8      	b.n	8014ee0 <__kernel_cos+0xf8>
 8014f2e:	bf00      	nop
 8014f30:	be8838d4 	.word	0xbe8838d4
 8014f34:	bda8fae9 	.word	0xbda8fae9
 8014f38:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f3c:	3e21ee9e 	.word	0x3e21ee9e
 8014f40:	809c52ad 	.word	0x809c52ad
 8014f44:	3e927e4f 	.word	0x3e927e4f
 8014f48:	19cb1590 	.word	0x19cb1590
 8014f4c:	3efa01a0 	.word	0x3efa01a0
 8014f50:	16c15177 	.word	0x16c15177
 8014f54:	3f56c16c 	.word	0x3f56c16c
 8014f58:	5555554c 	.word	0x5555554c
 8014f5c:	3fa55555 	.word	0x3fa55555
 8014f60:	3fe00000 	.word	0x3fe00000
 8014f64:	3fd33332 	.word	0x3fd33332
 8014f68:	3ff00000 	.word	0x3ff00000
 8014f6c:	3fe90000 	.word	0x3fe90000
 8014f70:	3fd20000 	.word	0x3fd20000
 8014f74:	00000000 	.word	0x00000000

08014f78 <__kernel_rem_pio2>:
 8014f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f7c:	ed2d 8b02 	vpush	{d8}
 8014f80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014f84:	1ed4      	subs	r4, r2, #3
 8014f86:	9308      	str	r3, [sp, #32]
 8014f88:	9101      	str	r1, [sp, #4]
 8014f8a:	4bc5      	ldr	r3, [pc, #788]	; (80152a0 <__kernel_rem_pio2+0x328>)
 8014f8c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014f8e:	9009      	str	r0, [sp, #36]	; 0x24
 8014f90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f94:	9304      	str	r3, [sp, #16]
 8014f96:	9b08      	ldr	r3, [sp, #32]
 8014f98:	3b01      	subs	r3, #1
 8014f9a:	9307      	str	r3, [sp, #28]
 8014f9c:	2318      	movs	r3, #24
 8014f9e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014fa2:	f06f 0317 	mvn.w	r3, #23
 8014fa6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014faa:	fb04 3303 	mla	r3, r4, r3, r3
 8014fae:	eb03 0a02 	add.w	sl, r3, r2
 8014fb2:	9b04      	ldr	r3, [sp, #16]
 8014fb4:	9a07      	ldr	r2, [sp, #28]
 8014fb6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015290 <__kernel_rem_pio2+0x318>
 8014fba:	eb03 0802 	add.w	r8, r3, r2
 8014fbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014fc0:	1aa7      	subs	r7, r4, r2
 8014fc2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014fc6:	ae22      	add	r6, sp, #136	; 0x88
 8014fc8:	2500      	movs	r5, #0
 8014fca:	4545      	cmp	r5, r8
 8014fcc:	dd13      	ble.n	8014ff6 <__kernel_rem_pio2+0x7e>
 8014fce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015290 <__kernel_rem_pio2+0x318>
 8014fd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014fd6:	2600      	movs	r6, #0
 8014fd8:	9b04      	ldr	r3, [sp, #16]
 8014fda:	429e      	cmp	r6, r3
 8014fdc:	dc32      	bgt.n	8015044 <__kernel_rem_pio2+0xcc>
 8014fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe0:	9302      	str	r3, [sp, #8]
 8014fe2:	9b08      	ldr	r3, [sp, #32]
 8014fe4:	199d      	adds	r5, r3, r6
 8014fe6:	ab22      	add	r3, sp, #136	; 0x88
 8014fe8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fec:	9306      	str	r3, [sp, #24]
 8014fee:	ec59 8b18 	vmov	r8, r9, d8
 8014ff2:	2700      	movs	r7, #0
 8014ff4:	e01f      	b.n	8015036 <__kernel_rem_pio2+0xbe>
 8014ff6:	42ef      	cmn	r7, r5
 8014ff8:	d407      	bmi.n	801500a <__kernel_rem_pio2+0x92>
 8014ffa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014ffe:	f7eb faa9 	bl	8000554 <__aeabi_i2d>
 8015002:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015006:	3501      	adds	r5, #1
 8015008:	e7df      	b.n	8014fca <__kernel_rem_pio2+0x52>
 801500a:	ec51 0b18 	vmov	r0, r1, d8
 801500e:	e7f8      	b.n	8015002 <__kernel_rem_pio2+0x8a>
 8015010:	9906      	ldr	r1, [sp, #24]
 8015012:	9d02      	ldr	r5, [sp, #8]
 8015014:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8015018:	9106      	str	r1, [sp, #24]
 801501a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801501e:	9502      	str	r5, [sp, #8]
 8015020:	f7eb fb02 	bl	8000628 <__aeabi_dmul>
 8015024:	4602      	mov	r2, r0
 8015026:	460b      	mov	r3, r1
 8015028:	4640      	mov	r0, r8
 801502a:	4649      	mov	r1, r9
 801502c:	f7eb f946 	bl	80002bc <__adddf3>
 8015030:	3701      	adds	r7, #1
 8015032:	4680      	mov	r8, r0
 8015034:	4689      	mov	r9, r1
 8015036:	9b07      	ldr	r3, [sp, #28]
 8015038:	429f      	cmp	r7, r3
 801503a:	dde9      	ble.n	8015010 <__kernel_rem_pio2+0x98>
 801503c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015040:	3601      	adds	r6, #1
 8015042:	e7c9      	b.n	8014fd8 <__kernel_rem_pio2+0x60>
 8015044:	9b04      	ldr	r3, [sp, #16]
 8015046:	aa0e      	add	r2, sp, #56	; 0x38
 8015048:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801504c:	930c      	str	r3, [sp, #48]	; 0x30
 801504e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015050:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015054:	9c04      	ldr	r4, [sp, #16]
 8015056:	930b      	str	r3, [sp, #44]	; 0x2c
 8015058:	ab9a      	add	r3, sp, #616	; 0x268
 801505a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801505e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015062:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015066:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801506a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801506e:	ab9a      	add	r3, sp, #616	; 0x268
 8015070:	445b      	add	r3, fp
 8015072:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8015076:	2500      	movs	r5, #0
 8015078:	1b63      	subs	r3, r4, r5
 801507a:	2b00      	cmp	r3, #0
 801507c:	dc78      	bgt.n	8015170 <__kernel_rem_pio2+0x1f8>
 801507e:	4650      	mov	r0, sl
 8015080:	ec49 8b10 	vmov	d0, r8, r9
 8015084:	f000 fc00 	bl	8015888 <scalbn>
 8015088:	ec57 6b10 	vmov	r6, r7, d0
 801508c:	2200      	movs	r2, #0
 801508e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015092:	ee10 0a10 	vmov	r0, s0
 8015096:	4639      	mov	r1, r7
 8015098:	f7eb fac6 	bl	8000628 <__aeabi_dmul>
 801509c:	ec41 0b10 	vmov	d0, r0, r1
 80150a0:	f000 fb6e 	bl	8015780 <floor>
 80150a4:	2200      	movs	r2, #0
 80150a6:	ec51 0b10 	vmov	r0, r1, d0
 80150aa:	4b7e      	ldr	r3, [pc, #504]	; (80152a4 <__kernel_rem_pio2+0x32c>)
 80150ac:	f7eb fabc 	bl	8000628 <__aeabi_dmul>
 80150b0:	4602      	mov	r2, r0
 80150b2:	460b      	mov	r3, r1
 80150b4:	4630      	mov	r0, r6
 80150b6:	4639      	mov	r1, r7
 80150b8:	f7eb f8fe 	bl	80002b8 <__aeabi_dsub>
 80150bc:	460f      	mov	r7, r1
 80150be:	4606      	mov	r6, r0
 80150c0:	f7eb fd62 	bl	8000b88 <__aeabi_d2iz>
 80150c4:	9006      	str	r0, [sp, #24]
 80150c6:	f7eb fa45 	bl	8000554 <__aeabi_i2d>
 80150ca:	4602      	mov	r2, r0
 80150cc:	460b      	mov	r3, r1
 80150ce:	4630      	mov	r0, r6
 80150d0:	4639      	mov	r1, r7
 80150d2:	f7eb f8f1 	bl	80002b8 <__aeabi_dsub>
 80150d6:	f1ba 0f00 	cmp.w	sl, #0
 80150da:	4606      	mov	r6, r0
 80150dc:	460f      	mov	r7, r1
 80150de:	dd6c      	ble.n	80151ba <__kernel_rem_pio2+0x242>
 80150e0:	1e62      	subs	r2, r4, #1
 80150e2:	ab0e      	add	r3, sp, #56	; 0x38
 80150e4:	f1ca 0118 	rsb	r1, sl, #24
 80150e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80150ec:	9d06      	ldr	r5, [sp, #24]
 80150ee:	fa40 f301 	asr.w	r3, r0, r1
 80150f2:	441d      	add	r5, r3
 80150f4:	408b      	lsls	r3, r1
 80150f6:	1ac0      	subs	r0, r0, r3
 80150f8:	ab0e      	add	r3, sp, #56	; 0x38
 80150fa:	9506      	str	r5, [sp, #24]
 80150fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015100:	f1ca 0317 	rsb	r3, sl, #23
 8015104:	fa40 f303 	asr.w	r3, r0, r3
 8015108:	9302      	str	r3, [sp, #8]
 801510a:	9b02      	ldr	r3, [sp, #8]
 801510c:	2b00      	cmp	r3, #0
 801510e:	dd62      	ble.n	80151d6 <__kernel_rem_pio2+0x25e>
 8015110:	9b06      	ldr	r3, [sp, #24]
 8015112:	2200      	movs	r2, #0
 8015114:	3301      	adds	r3, #1
 8015116:	9306      	str	r3, [sp, #24]
 8015118:	4615      	mov	r5, r2
 801511a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801511e:	4294      	cmp	r4, r2
 8015120:	f300 8095 	bgt.w	801524e <__kernel_rem_pio2+0x2d6>
 8015124:	f1ba 0f00 	cmp.w	sl, #0
 8015128:	dd07      	ble.n	801513a <__kernel_rem_pio2+0x1c2>
 801512a:	f1ba 0f01 	cmp.w	sl, #1
 801512e:	f000 80a2 	beq.w	8015276 <__kernel_rem_pio2+0x2fe>
 8015132:	f1ba 0f02 	cmp.w	sl, #2
 8015136:	f000 80c1 	beq.w	80152bc <__kernel_rem_pio2+0x344>
 801513a:	9b02      	ldr	r3, [sp, #8]
 801513c:	2b02      	cmp	r3, #2
 801513e:	d14a      	bne.n	80151d6 <__kernel_rem_pio2+0x25e>
 8015140:	4632      	mov	r2, r6
 8015142:	463b      	mov	r3, r7
 8015144:	2000      	movs	r0, #0
 8015146:	4958      	ldr	r1, [pc, #352]	; (80152a8 <__kernel_rem_pio2+0x330>)
 8015148:	f7eb f8b6 	bl	80002b8 <__aeabi_dsub>
 801514c:	4606      	mov	r6, r0
 801514e:	460f      	mov	r7, r1
 8015150:	2d00      	cmp	r5, #0
 8015152:	d040      	beq.n	80151d6 <__kernel_rem_pio2+0x25e>
 8015154:	4650      	mov	r0, sl
 8015156:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015298 <__kernel_rem_pio2+0x320>
 801515a:	f000 fb95 	bl	8015888 <scalbn>
 801515e:	4630      	mov	r0, r6
 8015160:	4639      	mov	r1, r7
 8015162:	ec53 2b10 	vmov	r2, r3, d0
 8015166:	f7eb f8a7 	bl	80002b8 <__aeabi_dsub>
 801516a:	4606      	mov	r6, r0
 801516c:	460f      	mov	r7, r1
 801516e:	e032      	b.n	80151d6 <__kernel_rem_pio2+0x25e>
 8015170:	2200      	movs	r2, #0
 8015172:	4b4e      	ldr	r3, [pc, #312]	; (80152ac <__kernel_rem_pio2+0x334>)
 8015174:	4640      	mov	r0, r8
 8015176:	4649      	mov	r1, r9
 8015178:	f7eb fa56 	bl	8000628 <__aeabi_dmul>
 801517c:	f7eb fd04 	bl	8000b88 <__aeabi_d2iz>
 8015180:	f7eb f9e8 	bl	8000554 <__aeabi_i2d>
 8015184:	2200      	movs	r2, #0
 8015186:	4b4a      	ldr	r3, [pc, #296]	; (80152b0 <__kernel_rem_pio2+0x338>)
 8015188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801518c:	f7eb fa4c 	bl	8000628 <__aeabi_dmul>
 8015190:	4602      	mov	r2, r0
 8015192:	460b      	mov	r3, r1
 8015194:	4640      	mov	r0, r8
 8015196:	4649      	mov	r1, r9
 8015198:	f7eb f88e 	bl	80002b8 <__aeabi_dsub>
 801519c:	f7eb fcf4 	bl	8000b88 <__aeabi_d2iz>
 80151a0:	ab0e      	add	r3, sp, #56	; 0x38
 80151a2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80151a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80151aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151ae:	f7eb f885 	bl	80002bc <__adddf3>
 80151b2:	3501      	adds	r5, #1
 80151b4:	4680      	mov	r8, r0
 80151b6:	4689      	mov	r9, r1
 80151b8:	e75e      	b.n	8015078 <__kernel_rem_pio2+0x100>
 80151ba:	d105      	bne.n	80151c8 <__kernel_rem_pio2+0x250>
 80151bc:	1e63      	subs	r3, r4, #1
 80151be:	aa0e      	add	r2, sp, #56	; 0x38
 80151c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151c4:	15c3      	asrs	r3, r0, #23
 80151c6:	e79f      	b.n	8015108 <__kernel_rem_pio2+0x190>
 80151c8:	2200      	movs	r2, #0
 80151ca:	4b3a      	ldr	r3, [pc, #232]	; (80152b4 <__kernel_rem_pio2+0x33c>)
 80151cc:	f7eb fcb2 	bl	8000b34 <__aeabi_dcmpge>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d139      	bne.n	8015248 <__kernel_rem_pio2+0x2d0>
 80151d4:	9002      	str	r0, [sp, #8]
 80151d6:	2200      	movs	r2, #0
 80151d8:	2300      	movs	r3, #0
 80151da:	4630      	mov	r0, r6
 80151dc:	4639      	mov	r1, r7
 80151de:	f7eb fc8b 	bl	8000af8 <__aeabi_dcmpeq>
 80151e2:	2800      	cmp	r0, #0
 80151e4:	f000 80c7 	beq.w	8015376 <__kernel_rem_pio2+0x3fe>
 80151e8:	1e65      	subs	r5, r4, #1
 80151ea:	462b      	mov	r3, r5
 80151ec:	2200      	movs	r2, #0
 80151ee:	9904      	ldr	r1, [sp, #16]
 80151f0:	428b      	cmp	r3, r1
 80151f2:	da6a      	bge.n	80152ca <__kernel_rem_pio2+0x352>
 80151f4:	2a00      	cmp	r2, #0
 80151f6:	f000 8088 	beq.w	801530a <__kernel_rem_pio2+0x392>
 80151fa:	ab0e      	add	r3, sp, #56	; 0x38
 80151fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8015200:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015204:	2b00      	cmp	r3, #0
 8015206:	f000 80b4 	beq.w	8015372 <__kernel_rem_pio2+0x3fa>
 801520a:	4650      	mov	r0, sl
 801520c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015298 <__kernel_rem_pio2+0x320>
 8015210:	f000 fb3a 	bl	8015888 <scalbn>
 8015214:	00ec      	lsls	r4, r5, #3
 8015216:	ab72      	add	r3, sp, #456	; 0x1c8
 8015218:	191e      	adds	r6, r3, r4
 801521a:	ec59 8b10 	vmov	r8, r9, d0
 801521e:	f106 0a08 	add.w	sl, r6, #8
 8015222:	462f      	mov	r7, r5
 8015224:	2f00      	cmp	r7, #0
 8015226:	f280 80df 	bge.w	80153e8 <__kernel_rem_pio2+0x470>
 801522a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015290 <__kernel_rem_pio2+0x318>
 801522e:	f04f 0a00 	mov.w	sl, #0
 8015232:	eba5 030a 	sub.w	r3, r5, sl
 8015236:	2b00      	cmp	r3, #0
 8015238:	f2c0 810a 	blt.w	8015450 <__kernel_rem_pio2+0x4d8>
 801523c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80152b8 <__kernel_rem_pio2+0x340>
 8015240:	ec59 8b18 	vmov	r8, r9, d8
 8015244:	2700      	movs	r7, #0
 8015246:	e0f5      	b.n	8015434 <__kernel_rem_pio2+0x4bc>
 8015248:	2302      	movs	r3, #2
 801524a:	9302      	str	r3, [sp, #8]
 801524c:	e760      	b.n	8015110 <__kernel_rem_pio2+0x198>
 801524e:	ab0e      	add	r3, sp, #56	; 0x38
 8015250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015254:	b94d      	cbnz	r5, 801526a <__kernel_rem_pio2+0x2f2>
 8015256:	b12b      	cbz	r3, 8015264 <__kernel_rem_pio2+0x2ec>
 8015258:	a80e      	add	r0, sp, #56	; 0x38
 801525a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801525e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015262:	2301      	movs	r3, #1
 8015264:	3201      	adds	r2, #1
 8015266:	461d      	mov	r5, r3
 8015268:	e759      	b.n	801511e <__kernel_rem_pio2+0x1a6>
 801526a:	a80e      	add	r0, sp, #56	; 0x38
 801526c:	1acb      	subs	r3, r1, r3
 801526e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015272:	462b      	mov	r3, r5
 8015274:	e7f6      	b.n	8015264 <__kernel_rem_pio2+0x2ec>
 8015276:	1e62      	subs	r2, r4, #1
 8015278:	ab0e      	add	r3, sp, #56	; 0x38
 801527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801527e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015282:	a90e      	add	r1, sp, #56	; 0x38
 8015284:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015288:	e757      	b.n	801513a <__kernel_rem_pio2+0x1c2>
 801528a:	bf00      	nop
 801528c:	f3af 8000 	nop.w
	...
 801529c:	3ff00000 	.word	0x3ff00000
 80152a0:	0801a470 	.word	0x0801a470
 80152a4:	40200000 	.word	0x40200000
 80152a8:	3ff00000 	.word	0x3ff00000
 80152ac:	3e700000 	.word	0x3e700000
 80152b0:	41700000 	.word	0x41700000
 80152b4:	3fe00000 	.word	0x3fe00000
 80152b8:	0801a430 	.word	0x0801a430
 80152bc:	1e62      	subs	r2, r4, #1
 80152be:	ab0e      	add	r3, sp, #56	; 0x38
 80152c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80152c8:	e7db      	b.n	8015282 <__kernel_rem_pio2+0x30a>
 80152ca:	a90e      	add	r1, sp, #56	; 0x38
 80152cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80152d0:	3b01      	subs	r3, #1
 80152d2:	430a      	orrs	r2, r1
 80152d4:	e78b      	b.n	80151ee <__kernel_rem_pio2+0x276>
 80152d6:	3301      	adds	r3, #1
 80152d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80152dc:	2900      	cmp	r1, #0
 80152de:	d0fa      	beq.n	80152d6 <__kernel_rem_pio2+0x35e>
 80152e0:	9a08      	ldr	r2, [sp, #32]
 80152e2:	4422      	add	r2, r4
 80152e4:	00d2      	lsls	r2, r2, #3
 80152e6:	a922      	add	r1, sp, #136	; 0x88
 80152e8:	18e3      	adds	r3, r4, r3
 80152ea:	9206      	str	r2, [sp, #24]
 80152ec:	440a      	add	r2, r1
 80152ee:	9302      	str	r3, [sp, #8]
 80152f0:	f10b 0108 	add.w	r1, fp, #8
 80152f4:	f102 0308 	add.w	r3, r2, #8
 80152f8:	1c66      	adds	r6, r4, #1
 80152fa:	910a      	str	r1, [sp, #40]	; 0x28
 80152fc:	2500      	movs	r5, #0
 80152fe:	930d      	str	r3, [sp, #52]	; 0x34
 8015300:	9b02      	ldr	r3, [sp, #8]
 8015302:	42b3      	cmp	r3, r6
 8015304:	da04      	bge.n	8015310 <__kernel_rem_pio2+0x398>
 8015306:	461c      	mov	r4, r3
 8015308:	e6a6      	b.n	8015058 <__kernel_rem_pio2+0xe0>
 801530a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801530c:	2301      	movs	r3, #1
 801530e:	e7e3      	b.n	80152d8 <__kernel_rem_pio2+0x360>
 8015310:	9b06      	ldr	r3, [sp, #24]
 8015312:	18ef      	adds	r7, r5, r3
 8015314:	ab22      	add	r3, sp, #136	; 0x88
 8015316:	441f      	add	r7, r3
 8015318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801531a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801531e:	f7eb f919 	bl	8000554 <__aeabi_i2d>
 8015322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015324:	461c      	mov	r4, r3
 8015326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015328:	e9c7 0100 	strd	r0, r1, [r7]
 801532c:	eb03 0b05 	add.w	fp, r3, r5
 8015330:	2700      	movs	r7, #0
 8015332:	f04f 0800 	mov.w	r8, #0
 8015336:	f04f 0900 	mov.w	r9, #0
 801533a:	9b07      	ldr	r3, [sp, #28]
 801533c:	429f      	cmp	r7, r3
 801533e:	dd08      	ble.n	8015352 <__kernel_rem_pio2+0x3da>
 8015340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015342:	aa72      	add	r2, sp, #456	; 0x1c8
 8015344:	18eb      	adds	r3, r5, r3
 8015346:	4413      	add	r3, r2
 8015348:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801534c:	3601      	adds	r6, #1
 801534e:	3508      	adds	r5, #8
 8015350:	e7d6      	b.n	8015300 <__kernel_rem_pio2+0x388>
 8015352:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015356:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801535a:	f7eb f965 	bl	8000628 <__aeabi_dmul>
 801535e:	4602      	mov	r2, r0
 8015360:	460b      	mov	r3, r1
 8015362:	4640      	mov	r0, r8
 8015364:	4649      	mov	r1, r9
 8015366:	f7ea ffa9 	bl	80002bc <__adddf3>
 801536a:	3701      	adds	r7, #1
 801536c:	4680      	mov	r8, r0
 801536e:	4689      	mov	r9, r1
 8015370:	e7e3      	b.n	801533a <__kernel_rem_pio2+0x3c2>
 8015372:	3d01      	subs	r5, #1
 8015374:	e741      	b.n	80151fa <__kernel_rem_pio2+0x282>
 8015376:	f1ca 0000 	rsb	r0, sl, #0
 801537a:	ec47 6b10 	vmov	d0, r6, r7
 801537e:	f000 fa83 	bl	8015888 <scalbn>
 8015382:	ec57 6b10 	vmov	r6, r7, d0
 8015386:	2200      	movs	r2, #0
 8015388:	4b99      	ldr	r3, [pc, #612]	; (80155f0 <__kernel_rem_pio2+0x678>)
 801538a:	ee10 0a10 	vmov	r0, s0
 801538e:	4639      	mov	r1, r7
 8015390:	f7eb fbd0 	bl	8000b34 <__aeabi_dcmpge>
 8015394:	b1f8      	cbz	r0, 80153d6 <__kernel_rem_pio2+0x45e>
 8015396:	2200      	movs	r2, #0
 8015398:	4b96      	ldr	r3, [pc, #600]	; (80155f4 <__kernel_rem_pio2+0x67c>)
 801539a:	4630      	mov	r0, r6
 801539c:	4639      	mov	r1, r7
 801539e:	f7eb f943 	bl	8000628 <__aeabi_dmul>
 80153a2:	f7eb fbf1 	bl	8000b88 <__aeabi_d2iz>
 80153a6:	4680      	mov	r8, r0
 80153a8:	f7eb f8d4 	bl	8000554 <__aeabi_i2d>
 80153ac:	2200      	movs	r2, #0
 80153ae:	4b90      	ldr	r3, [pc, #576]	; (80155f0 <__kernel_rem_pio2+0x678>)
 80153b0:	f7eb f93a 	bl	8000628 <__aeabi_dmul>
 80153b4:	460b      	mov	r3, r1
 80153b6:	4602      	mov	r2, r0
 80153b8:	4639      	mov	r1, r7
 80153ba:	4630      	mov	r0, r6
 80153bc:	f7ea ff7c 	bl	80002b8 <__aeabi_dsub>
 80153c0:	f7eb fbe2 	bl	8000b88 <__aeabi_d2iz>
 80153c4:	1c65      	adds	r5, r4, #1
 80153c6:	ab0e      	add	r3, sp, #56	; 0x38
 80153c8:	f10a 0a18 	add.w	sl, sl, #24
 80153cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153d0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80153d4:	e719      	b.n	801520a <__kernel_rem_pio2+0x292>
 80153d6:	4630      	mov	r0, r6
 80153d8:	4639      	mov	r1, r7
 80153da:	f7eb fbd5 	bl	8000b88 <__aeabi_d2iz>
 80153de:	ab0e      	add	r3, sp, #56	; 0x38
 80153e0:	4625      	mov	r5, r4
 80153e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153e6:	e710      	b.n	801520a <__kernel_rem_pio2+0x292>
 80153e8:	ab0e      	add	r3, sp, #56	; 0x38
 80153ea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80153ee:	f7eb f8b1 	bl	8000554 <__aeabi_i2d>
 80153f2:	4642      	mov	r2, r8
 80153f4:	464b      	mov	r3, r9
 80153f6:	f7eb f917 	bl	8000628 <__aeabi_dmul>
 80153fa:	2200      	movs	r2, #0
 80153fc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015400:	4b7c      	ldr	r3, [pc, #496]	; (80155f4 <__kernel_rem_pio2+0x67c>)
 8015402:	4640      	mov	r0, r8
 8015404:	4649      	mov	r1, r9
 8015406:	f7eb f90f 	bl	8000628 <__aeabi_dmul>
 801540a:	3f01      	subs	r7, #1
 801540c:	4680      	mov	r8, r0
 801540e:	4689      	mov	r9, r1
 8015410:	e708      	b.n	8015224 <__kernel_rem_pio2+0x2ac>
 8015412:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8015416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801541e:	f7eb f903 	bl	8000628 <__aeabi_dmul>
 8015422:	4602      	mov	r2, r0
 8015424:	460b      	mov	r3, r1
 8015426:	4640      	mov	r0, r8
 8015428:	4649      	mov	r1, r9
 801542a:	f7ea ff47 	bl	80002bc <__adddf3>
 801542e:	3701      	adds	r7, #1
 8015430:	4680      	mov	r8, r0
 8015432:	4689      	mov	r9, r1
 8015434:	9b04      	ldr	r3, [sp, #16]
 8015436:	429f      	cmp	r7, r3
 8015438:	dc01      	bgt.n	801543e <__kernel_rem_pio2+0x4c6>
 801543a:	45ba      	cmp	sl, r7
 801543c:	dae9      	bge.n	8015412 <__kernel_rem_pio2+0x49a>
 801543e:	ab4a      	add	r3, sp, #296	; 0x128
 8015440:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015444:	e9c3 8900 	strd	r8, r9, [r3]
 8015448:	f10a 0a01 	add.w	sl, sl, #1
 801544c:	3e08      	subs	r6, #8
 801544e:	e6f0      	b.n	8015232 <__kernel_rem_pio2+0x2ba>
 8015450:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015452:	2b03      	cmp	r3, #3
 8015454:	d85b      	bhi.n	801550e <__kernel_rem_pio2+0x596>
 8015456:	e8df f003 	tbb	[pc, r3]
 801545a:	264a      	.short	0x264a
 801545c:	0226      	.short	0x0226
 801545e:	ab9a      	add	r3, sp, #616	; 0x268
 8015460:	441c      	add	r4, r3
 8015462:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015466:	46a2      	mov	sl, r4
 8015468:	46ab      	mov	fp, r5
 801546a:	f1bb 0f00 	cmp.w	fp, #0
 801546e:	dc6c      	bgt.n	801554a <__kernel_rem_pio2+0x5d2>
 8015470:	46a2      	mov	sl, r4
 8015472:	46ab      	mov	fp, r5
 8015474:	f1bb 0f01 	cmp.w	fp, #1
 8015478:	f300 8086 	bgt.w	8015588 <__kernel_rem_pio2+0x610>
 801547c:	2000      	movs	r0, #0
 801547e:	2100      	movs	r1, #0
 8015480:	2d01      	cmp	r5, #1
 8015482:	f300 80a0 	bgt.w	80155c6 <__kernel_rem_pio2+0x64e>
 8015486:	9b02      	ldr	r3, [sp, #8]
 8015488:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801548c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015490:	2b00      	cmp	r3, #0
 8015492:	f040 809e 	bne.w	80155d2 <__kernel_rem_pio2+0x65a>
 8015496:	9b01      	ldr	r3, [sp, #4]
 8015498:	e9c3 7800 	strd	r7, r8, [r3]
 801549c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80154a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80154a4:	e033      	b.n	801550e <__kernel_rem_pio2+0x596>
 80154a6:	3408      	adds	r4, #8
 80154a8:	ab4a      	add	r3, sp, #296	; 0x128
 80154aa:	441c      	add	r4, r3
 80154ac:	462e      	mov	r6, r5
 80154ae:	2000      	movs	r0, #0
 80154b0:	2100      	movs	r1, #0
 80154b2:	2e00      	cmp	r6, #0
 80154b4:	da3a      	bge.n	801552c <__kernel_rem_pio2+0x5b4>
 80154b6:	9b02      	ldr	r3, [sp, #8]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d03d      	beq.n	8015538 <__kernel_rem_pio2+0x5c0>
 80154bc:	4602      	mov	r2, r0
 80154be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154c2:	9c01      	ldr	r4, [sp, #4]
 80154c4:	e9c4 2300 	strd	r2, r3, [r4]
 80154c8:	4602      	mov	r2, r0
 80154ca:	460b      	mov	r3, r1
 80154cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80154d0:	f7ea fef2 	bl	80002b8 <__aeabi_dsub>
 80154d4:	ae4c      	add	r6, sp, #304	; 0x130
 80154d6:	2401      	movs	r4, #1
 80154d8:	42a5      	cmp	r5, r4
 80154da:	da30      	bge.n	801553e <__kernel_rem_pio2+0x5c6>
 80154dc:	9b02      	ldr	r3, [sp, #8]
 80154de:	b113      	cbz	r3, 80154e6 <__kernel_rem_pio2+0x56e>
 80154e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154e4:	4619      	mov	r1, r3
 80154e6:	9b01      	ldr	r3, [sp, #4]
 80154e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80154ec:	e00f      	b.n	801550e <__kernel_rem_pio2+0x596>
 80154ee:	ab9a      	add	r3, sp, #616	; 0x268
 80154f0:	441c      	add	r4, r3
 80154f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80154f6:	2000      	movs	r0, #0
 80154f8:	2100      	movs	r1, #0
 80154fa:	2d00      	cmp	r5, #0
 80154fc:	da10      	bge.n	8015520 <__kernel_rem_pio2+0x5a8>
 80154fe:	9b02      	ldr	r3, [sp, #8]
 8015500:	b113      	cbz	r3, 8015508 <__kernel_rem_pio2+0x590>
 8015502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015506:	4619      	mov	r1, r3
 8015508:	9b01      	ldr	r3, [sp, #4]
 801550a:	e9c3 0100 	strd	r0, r1, [r3]
 801550e:	9b06      	ldr	r3, [sp, #24]
 8015510:	f003 0007 	and.w	r0, r3, #7
 8015514:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015518:	ecbd 8b02 	vpop	{d8}
 801551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015520:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015524:	f7ea feca 	bl	80002bc <__adddf3>
 8015528:	3d01      	subs	r5, #1
 801552a:	e7e6      	b.n	80154fa <__kernel_rem_pio2+0x582>
 801552c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015530:	f7ea fec4 	bl	80002bc <__adddf3>
 8015534:	3e01      	subs	r6, #1
 8015536:	e7bc      	b.n	80154b2 <__kernel_rem_pio2+0x53a>
 8015538:	4602      	mov	r2, r0
 801553a:	460b      	mov	r3, r1
 801553c:	e7c1      	b.n	80154c2 <__kernel_rem_pio2+0x54a>
 801553e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015542:	f7ea febb 	bl	80002bc <__adddf3>
 8015546:	3401      	adds	r4, #1
 8015548:	e7c6      	b.n	80154d8 <__kernel_rem_pio2+0x560>
 801554a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801554e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015552:	4640      	mov	r0, r8
 8015554:	ec53 2b17 	vmov	r2, r3, d7
 8015558:	4649      	mov	r1, r9
 801555a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801555e:	f7ea fead 	bl	80002bc <__adddf3>
 8015562:	4602      	mov	r2, r0
 8015564:	460b      	mov	r3, r1
 8015566:	4606      	mov	r6, r0
 8015568:	460f      	mov	r7, r1
 801556a:	4640      	mov	r0, r8
 801556c:	4649      	mov	r1, r9
 801556e:	f7ea fea3 	bl	80002b8 <__aeabi_dsub>
 8015572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015576:	f7ea fea1 	bl	80002bc <__adddf3>
 801557a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801557e:	e9ca 0100 	strd	r0, r1, [sl]
 8015582:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015586:	e770      	b.n	801546a <__kernel_rem_pio2+0x4f2>
 8015588:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801558c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015590:	4630      	mov	r0, r6
 8015592:	ec53 2b17 	vmov	r2, r3, d7
 8015596:	4639      	mov	r1, r7
 8015598:	ed8d 7b04 	vstr	d7, [sp, #16]
 801559c:	f7ea fe8e 	bl	80002bc <__adddf3>
 80155a0:	4602      	mov	r2, r0
 80155a2:	460b      	mov	r3, r1
 80155a4:	4680      	mov	r8, r0
 80155a6:	4689      	mov	r9, r1
 80155a8:	4630      	mov	r0, r6
 80155aa:	4639      	mov	r1, r7
 80155ac:	f7ea fe84 	bl	80002b8 <__aeabi_dsub>
 80155b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155b4:	f7ea fe82 	bl	80002bc <__adddf3>
 80155b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80155bc:	e9ca 0100 	strd	r0, r1, [sl]
 80155c0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80155c4:	e756      	b.n	8015474 <__kernel_rem_pio2+0x4fc>
 80155c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155ca:	f7ea fe77 	bl	80002bc <__adddf3>
 80155ce:	3d01      	subs	r5, #1
 80155d0:	e756      	b.n	8015480 <__kernel_rem_pio2+0x508>
 80155d2:	9b01      	ldr	r3, [sp, #4]
 80155d4:	9a01      	ldr	r2, [sp, #4]
 80155d6:	601f      	str	r7, [r3, #0]
 80155d8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80155dc:	605c      	str	r4, [r3, #4]
 80155de:	609d      	str	r5, [r3, #8]
 80155e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80155e4:	60d3      	str	r3, [r2, #12]
 80155e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155ea:	6110      	str	r0, [r2, #16]
 80155ec:	6153      	str	r3, [r2, #20]
 80155ee:	e78e      	b.n	801550e <__kernel_rem_pio2+0x596>
 80155f0:	41700000 	.word	0x41700000
 80155f4:	3e700000 	.word	0x3e700000

080155f8 <__kernel_sin>:
 80155f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155fc:	ec55 4b10 	vmov	r4, r5, d0
 8015600:	b085      	sub	sp, #20
 8015602:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015606:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801560a:	ed8d 1b00 	vstr	d1, [sp]
 801560e:	9002      	str	r0, [sp, #8]
 8015610:	da06      	bge.n	8015620 <__kernel_sin+0x28>
 8015612:	ee10 0a10 	vmov	r0, s0
 8015616:	4629      	mov	r1, r5
 8015618:	f7eb fab6 	bl	8000b88 <__aeabi_d2iz>
 801561c:	2800      	cmp	r0, #0
 801561e:	d051      	beq.n	80156c4 <__kernel_sin+0xcc>
 8015620:	4622      	mov	r2, r4
 8015622:	462b      	mov	r3, r5
 8015624:	4620      	mov	r0, r4
 8015626:	4629      	mov	r1, r5
 8015628:	f7ea fffe 	bl	8000628 <__aeabi_dmul>
 801562c:	4682      	mov	sl, r0
 801562e:	468b      	mov	fp, r1
 8015630:	4602      	mov	r2, r0
 8015632:	460b      	mov	r3, r1
 8015634:	4620      	mov	r0, r4
 8015636:	4629      	mov	r1, r5
 8015638:	f7ea fff6 	bl	8000628 <__aeabi_dmul>
 801563c:	a341      	add	r3, pc, #260	; (adr r3, 8015744 <__kernel_sin+0x14c>)
 801563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015642:	4680      	mov	r8, r0
 8015644:	4689      	mov	r9, r1
 8015646:	4650      	mov	r0, sl
 8015648:	4659      	mov	r1, fp
 801564a:	f7ea ffed 	bl	8000628 <__aeabi_dmul>
 801564e:	a33f      	add	r3, pc, #252	; (adr r3, 801574c <__kernel_sin+0x154>)
 8015650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015654:	f7ea fe30 	bl	80002b8 <__aeabi_dsub>
 8015658:	4652      	mov	r2, sl
 801565a:	465b      	mov	r3, fp
 801565c:	f7ea ffe4 	bl	8000628 <__aeabi_dmul>
 8015660:	a33c      	add	r3, pc, #240	; (adr r3, 8015754 <__kernel_sin+0x15c>)
 8015662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015666:	f7ea fe29 	bl	80002bc <__adddf3>
 801566a:	4652      	mov	r2, sl
 801566c:	465b      	mov	r3, fp
 801566e:	f7ea ffdb 	bl	8000628 <__aeabi_dmul>
 8015672:	a33a      	add	r3, pc, #232	; (adr r3, 801575c <__kernel_sin+0x164>)
 8015674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015678:	f7ea fe1e 	bl	80002b8 <__aeabi_dsub>
 801567c:	4652      	mov	r2, sl
 801567e:	465b      	mov	r3, fp
 8015680:	f7ea ffd2 	bl	8000628 <__aeabi_dmul>
 8015684:	a337      	add	r3, pc, #220	; (adr r3, 8015764 <__kernel_sin+0x16c>)
 8015686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568a:	f7ea fe17 	bl	80002bc <__adddf3>
 801568e:	9b02      	ldr	r3, [sp, #8]
 8015690:	4606      	mov	r6, r0
 8015692:	460f      	mov	r7, r1
 8015694:	b9db      	cbnz	r3, 80156ce <__kernel_sin+0xd6>
 8015696:	4602      	mov	r2, r0
 8015698:	460b      	mov	r3, r1
 801569a:	4650      	mov	r0, sl
 801569c:	4659      	mov	r1, fp
 801569e:	f7ea ffc3 	bl	8000628 <__aeabi_dmul>
 80156a2:	a325      	add	r3, pc, #148	; (adr r3, 8015738 <__kernel_sin+0x140>)
 80156a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a8:	f7ea fe06 	bl	80002b8 <__aeabi_dsub>
 80156ac:	4642      	mov	r2, r8
 80156ae:	464b      	mov	r3, r9
 80156b0:	f7ea ffba 	bl	8000628 <__aeabi_dmul>
 80156b4:	4602      	mov	r2, r0
 80156b6:	460b      	mov	r3, r1
 80156b8:	4620      	mov	r0, r4
 80156ba:	4629      	mov	r1, r5
 80156bc:	f7ea fdfe 	bl	80002bc <__adddf3>
 80156c0:	4604      	mov	r4, r0
 80156c2:	460d      	mov	r5, r1
 80156c4:	ec45 4b10 	vmov	d0, r4, r5
 80156c8:	b005      	add	sp, #20
 80156ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ce:	2200      	movs	r2, #0
 80156d0:	4b1b      	ldr	r3, [pc, #108]	; (8015740 <__kernel_sin+0x148>)
 80156d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156d6:	f7ea ffa7 	bl	8000628 <__aeabi_dmul>
 80156da:	4632      	mov	r2, r6
 80156dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156e0:	463b      	mov	r3, r7
 80156e2:	4640      	mov	r0, r8
 80156e4:	4649      	mov	r1, r9
 80156e6:	f7ea ff9f 	bl	8000628 <__aeabi_dmul>
 80156ea:	4602      	mov	r2, r0
 80156ec:	460b      	mov	r3, r1
 80156ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156f2:	f7ea fde1 	bl	80002b8 <__aeabi_dsub>
 80156f6:	4652      	mov	r2, sl
 80156f8:	465b      	mov	r3, fp
 80156fa:	f7ea ff95 	bl	8000628 <__aeabi_dmul>
 80156fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015702:	f7ea fdd9 	bl	80002b8 <__aeabi_dsub>
 8015706:	a30c      	add	r3, pc, #48	; (adr r3, 8015738 <__kernel_sin+0x140>)
 8015708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570c:	4606      	mov	r6, r0
 801570e:	460f      	mov	r7, r1
 8015710:	4640      	mov	r0, r8
 8015712:	4649      	mov	r1, r9
 8015714:	f7ea ff88 	bl	8000628 <__aeabi_dmul>
 8015718:	4602      	mov	r2, r0
 801571a:	460b      	mov	r3, r1
 801571c:	4630      	mov	r0, r6
 801571e:	4639      	mov	r1, r7
 8015720:	f7ea fdcc 	bl	80002bc <__adddf3>
 8015724:	4602      	mov	r2, r0
 8015726:	460b      	mov	r3, r1
 8015728:	4620      	mov	r0, r4
 801572a:	4629      	mov	r1, r5
 801572c:	f7ea fdc4 	bl	80002b8 <__aeabi_dsub>
 8015730:	e7c6      	b.n	80156c0 <__kernel_sin+0xc8>
 8015732:	bf00      	nop
 8015734:	f3af 8000 	nop.w
 8015738:	55555549 	.word	0x55555549
 801573c:	3fc55555 	.word	0x3fc55555
 8015740:	3fe00000 	.word	0x3fe00000
 8015744:	5acfd57c 	.word	0x5acfd57c
 8015748:	3de5d93a 	.word	0x3de5d93a
 801574c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015750:	3e5ae5e6 	.word	0x3e5ae5e6
 8015754:	57b1fe7d 	.word	0x57b1fe7d
 8015758:	3ec71de3 	.word	0x3ec71de3
 801575c:	19c161d5 	.word	0x19c161d5
 8015760:	3f2a01a0 	.word	0x3f2a01a0
 8015764:	1110f8a6 	.word	0x1110f8a6
 8015768:	3f811111 	.word	0x3f811111

0801576c <fabs>:
 801576c:	ec51 0b10 	vmov	r0, r1, d0
 8015770:	ee10 2a10 	vmov	r2, s0
 8015774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015778:	ec43 2b10 	vmov	d0, r2, r3
 801577c:	4770      	bx	lr
	...

08015780 <floor>:
 8015780:	ec51 0b10 	vmov	r0, r1, d0
 8015784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015788:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801578c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015790:	2e13      	cmp	r6, #19
 8015792:	460c      	mov	r4, r1
 8015794:	ee10 5a10 	vmov	r5, s0
 8015798:	4680      	mov	r8, r0
 801579a:	dc34      	bgt.n	8015806 <floor+0x86>
 801579c:	2e00      	cmp	r6, #0
 801579e:	da16      	bge.n	80157ce <floor+0x4e>
 80157a0:	a335      	add	r3, pc, #212	; (adr r3, 8015878 <floor+0xf8>)
 80157a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a6:	f7ea fd89 	bl	80002bc <__adddf3>
 80157aa:	2200      	movs	r2, #0
 80157ac:	2300      	movs	r3, #0
 80157ae:	f7eb f9cb 	bl	8000b48 <__aeabi_dcmpgt>
 80157b2:	b148      	cbz	r0, 80157c8 <floor+0x48>
 80157b4:	2c00      	cmp	r4, #0
 80157b6:	da59      	bge.n	801586c <floor+0xec>
 80157b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80157bc:	4a30      	ldr	r2, [pc, #192]	; (8015880 <floor+0x100>)
 80157be:	432b      	orrs	r3, r5
 80157c0:	2500      	movs	r5, #0
 80157c2:	42ab      	cmp	r3, r5
 80157c4:	bf18      	it	ne
 80157c6:	4614      	movne	r4, r2
 80157c8:	4621      	mov	r1, r4
 80157ca:	4628      	mov	r0, r5
 80157cc:	e025      	b.n	801581a <floor+0x9a>
 80157ce:	4f2d      	ldr	r7, [pc, #180]	; (8015884 <floor+0x104>)
 80157d0:	4137      	asrs	r7, r6
 80157d2:	ea01 0307 	and.w	r3, r1, r7
 80157d6:	4303      	orrs	r3, r0
 80157d8:	d01f      	beq.n	801581a <floor+0x9a>
 80157da:	a327      	add	r3, pc, #156	; (adr r3, 8015878 <floor+0xf8>)
 80157dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e0:	f7ea fd6c 	bl	80002bc <__adddf3>
 80157e4:	2200      	movs	r2, #0
 80157e6:	2300      	movs	r3, #0
 80157e8:	f7eb f9ae 	bl	8000b48 <__aeabi_dcmpgt>
 80157ec:	2800      	cmp	r0, #0
 80157ee:	d0eb      	beq.n	80157c8 <floor+0x48>
 80157f0:	2c00      	cmp	r4, #0
 80157f2:	bfbe      	ittt	lt
 80157f4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80157f8:	fa43 f606 	asrlt.w	r6, r3, r6
 80157fc:	19a4      	addlt	r4, r4, r6
 80157fe:	ea24 0407 	bic.w	r4, r4, r7
 8015802:	2500      	movs	r5, #0
 8015804:	e7e0      	b.n	80157c8 <floor+0x48>
 8015806:	2e33      	cmp	r6, #51	; 0x33
 8015808:	dd0b      	ble.n	8015822 <floor+0xa2>
 801580a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801580e:	d104      	bne.n	801581a <floor+0x9a>
 8015810:	ee10 2a10 	vmov	r2, s0
 8015814:	460b      	mov	r3, r1
 8015816:	f7ea fd51 	bl	80002bc <__adddf3>
 801581a:	ec41 0b10 	vmov	d0, r0, r1
 801581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015822:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015826:	f04f 33ff 	mov.w	r3, #4294967295
 801582a:	fa23 f707 	lsr.w	r7, r3, r7
 801582e:	4207      	tst	r7, r0
 8015830:	d0f3      	beq.n	801581a <floor+0x9a>
 8015832:	a311      	add	r3, pc, #68	; (adr r3, 8015878 <floor+0xf8>)
 8015834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015838:	f7ea fd40 	bl	80002bc <__adddf3>
 801583c:	2200      	movs	r2, #0
 801583e:	2300      	movs	r3, #0
 8015840:	f7eb f982 	bl	8000b48 <__aeabi_dcmpgt>
 8015844:	2800      	cmp	r0, #0
 8015846:	d0bf      	beq.n	80157c8 <floor+0x48>
 8015848:	2c00      	cmp	r4, #0
 801584a:	da02      	bge.n	8015852 <floor+0xd2>
 801584c:	2e14      	cmp	r6, #20
 801584e:	d103      	bne.n	8015858 <floor+0xd8>
 8015850:	3401      	adds	r4, #1
 8015852:	ea25 0507 	bic.w	r5, r5, r7
 8015856:	e7b7      	b.n	80157c8 <floor+0x48>
 8015858:	2301      	movs	r3, #1
 801585a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801585e:	fa03 f606 	lsl.w	r6, r3, r6
 8015862:	4435      	add	r5, r6
 8015864:	4545      	cmp	r5, r8
 8015866:	bf38      	it	cc
 8015868:	18e4      	addcc	r4, r4, r3
 801586a:	e7f2      	b.n	8015852 <floor+0xd2>
 801586c:	2500      	movs	r5, #0
 801586e:	462c      	mov	r4, r5
 8015870:	e7aa      	b.n	80157c8 <floor+0x48>
 8015872:	bf00      	nop
 8015874:	f3af 8000 	nop.w
 8015878:	8800759c 	.word	0x8800759c
 801587c:	7e37e43c 	.word	0x7e37e43c
 8015880:	bff00000 	.word	0xbff00000
 8015884:	000fffff 	.word	0x000fffff

08015888 <scalbn>:
 8015888:	b570      	push	{r4, r5, r6, lr}
 801588a:	ec55 4b10 	vmov	r4, r5, d0
 801588e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015892:	4606      	mov	r6, r0
 8015894:	462b      	mov	r3, r5
 8015896:	b9aa      	cbnz	r2, 80158c4 <scalbn+0x3c>
 8015898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801589c:	4323      	orrs	r3, r4
 801589e:	d03b      	beq.n	8015918 <scalbn+0x90>
 80158a0:	4b31      	ldr	r3, [pc, #196]	; (8015968 <scalbn+0xe0>)
 80158a2:	4629      	mov	r1, r5
 80158a4:	2200      	movs	r2, #0
 80158a6:	ee10 0a10 	vmov	r0, s0
 80158aa:	f7ea febd 	bl	8000628 <__aeabi_dmul>
 80158ae:	4b2f      	ldr	r3, [pc, #188]	; (801596c <scalbn+0xe4>)
 80158b0:	429e      	cmp	r6, r3
 80158b2:	4604      	mov	r4, r0
 80158b4:	460d      	mov	r5, r1
 80158b6:	da12      	bge.n	80158de <scalbn+0x56>
 80158b8:	a327      	add	r3, pc, #156	; (adr r3, 8015958 <scalbn+0xd0>)
 80158ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158be:	f7ea feb3 	bl	8000628 <__aeabi_dmul>
 80158c2:	e009      	b.n	80158d8 <scalbn+0x50>
 80158c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80158c8:	428a      	cmp	r2, r1
 80158ca:	d10c      	bne.n	80158e6 <scalbn+0x5e>
 80158cc:	ee10 2a10 	vmov	r2, s0
 80158d0:	4620      	mov	r0, r4
 80158d2:	4629      	mov	r1, r5
 80158d4:	f7ea fcf2 	bl	80002bc <__adddf3>
 80158d8:	4604      	mov	r4, r0
 80158da:	460d      	mov	r5, r1
 80158dc:	e01c      	b.n	8015918 <scalbn+0x90>
 80158de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80158e2:	460b      	mov	r3, r1
 80158e4:	3a36      	subs	r2, #54	; 0x36
 80158e6:	4432      	add	r2, r6
 80158e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80158ec:	428a      	cmp	r2, r1
 80158ee:	dd0b      	ble.n	8015908 <scalbn+0x80>
 80158f0:	ec45 4b11 	vmov	d1, r4, r5
 80158f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015960 <scalbn+0xd8>
 80158f8:	f000 f83c 	bl	8015974 <copysign>
 80158fc:	a318      	add	r3, pc, #96	; (adr r3, 8015960 <scalbn+0xd8>)
 80158fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015902:	ec51 0b10 	vmov	r0, r1, d0
 8015906:	e7da      	b.n	80158be <scalbn+0x36>
 8015908:	2a00      	cmp	r2, #0
 801590a:	dd08      	ble.n	801591e <scalbn+0x96>
 801590c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015910:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015914:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015918:	ec45 4b10 	vmov	d0, r4, r5
 801591c:	bd70      	pop	{r4, r5, r6, pc}
 801591e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015922:	da0d      	bge.n	8015940 <scalbn+0xb8>
 8015924:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015928:	429e      	cmp	r6, r3
 801592a:	ec45 4b11 	vmov	d1, r4, r5
 801592e:	dce1      	bgt.n	80158f4 <scalbn+0x6c>
 8015930:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015958 <scalbn+0xd0>
 8015934:	f000 f81e 	bl	8015974 <copysign>
 8015938:	a307      	add	r3, pc, #28	; (adr r3, 8015958 <scalbn+0xd0>)
 801593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593e:	e7e0      	b.n	8015902 <scalbn+0x7a>
 8015940:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015944:	3236      	adds	r2, #54	; 0x36
 8015946:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801594a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801594e:	4620      	mov	r0, r4
 8015950:	4629      	mov	r1, r5
 8015952:	2200      	movs	r2, #0
 8015954:	4b06      	ldr	r3, [pc, #24]	; (8015970 <scalbn+0xe8>)
 8015956:	e7b2      	b.n	80158be <scalbn+0x36>
 8015958:	c2f8f359 	.word	0xc2f8f359
 801595c:	01a56e1f 	.word	0x01a56e1f
 8015960:	8800759c 	.word	0x8800759c
 8015964:	7e37e43c 	.word	0x7e37e43c
 8015968:	43500000 	.word	0x43500000
 801596c:	ffff3cb0 	.word	0xffff3cb0
 8015970:	3c900000 	.word	0x3c900000

08015974 <copysign>:
 8015974:	ec51 0b10 	vmov	r0, r1, d0
 8015978:	ee11 0a90 	vmov	r0, s3
 801597c:	ee10 2a10 	vmov	r2, s0
 8015980:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015984:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015988:	ea41 0300 	orr.w	r3, r1, r0
 801598c:	ec43 2b10 	vmov	d0, r2, r3
 8015990:	4770      	bx	lr
	...

08015994 <__errno>:
 8015994:	4b01      	ldr	r3, [pc, #4]	; (801599c <__errno+0x8>)
 8015996:	6818      	ldr	r0, [r3, #0]
 8015998:	4770      	bx	lr
 801599a:	bf00      	nop
 801599c:	2000000c 	.word	0x2000000c

080159a0 <__libc_init_array>:
 80159a0:	b570      	push	{r4, r5, r6, lr}
 80159a2:	4e0d      	ldr	r6, [pc, #52]	; (80159d8 <__libc_init_array+0x38>)
 80159a4:	4c0d      	ldr	r4, [pc, #52]	; (80159dc <__libc_init_array+0x3c>)
 80159a6:	1ba4      	subs	r4, r4, r6
 80159a8:	10a4      	asrs	r4, r4, #2
 80159aa:	2500      	movs	r5, #0
 80159ac:	42a5      	cmp	r5, r4
 80159ae:	d109      	bne.n	80159c4 <__libc_init_array+0x24>
 80159b0:	4e0b      	ldr	r6, [pc, #44]	; (80159e0 <__libc_init_array+0x40>)
 80159b2:	4c0c      	ldr	r4, [pc, #48]	; (80159e4 <__libc_init_array+0x44>)
 80159b4:	f004 f9e6 	bl	8019d84 <_init>
 80159b8:	1ba4      	subs	r4, r4, r6
 80159ba:	10a4      	asrs	r4, r4, #2
 80159bc:	2500      	movs	r5, #0
 80159be:	42a5      	cmp	r5, r4
 80159c0:	d105      	bne.n	80159ce <__libc_init_array+0x2e>
 80159c2:	bd70      	pop	{r4, r5, r6, pc}
 80159c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159c8:	4798      	blx	r3
 80159ca:	3501      	adds	r5, #1
 80159cc:	e7ee      	b.n	80159ac <__libc_init_array+0xc>
 80159ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159d2:	4798      	blx	r3
 80159d4:	3501      	adds	r5, #1
 80159d6:	e7f2      	b.n	80159be <__libc_init_array+0x1e>
 80159d8:	0801a7b4 	.word	0x0801a7b4
 80159dc:	0801a7b4 	.word	0x0801a7b4
 80159e0:	0801a7b4 	.word	0x0801a7b4
 80159e4:	0801a7bc 	.word	0x0801a7bc

080159e8 <memset>:
 80159e8:	4402      	add	r2, r0
 80159ea:	4603      	mov	r3, r0
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d100      	bne.n	80159f2 <memset+0xa>
 80159f0:	4770      	bx	lr
 80159f2:	f803 1b01 	strb.w	r1, [r3], #1
 80159f6:	e7f9      	b.n	80159ec <memset+0x4>

080159f8 <__cvt>:
 80159f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159fc:	ec55 4b10 	vmov	r4, r5, d0
 8015a00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015a02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015a06:	2d00      	cmp	r5, #0
 8015a08:	460e      	mov	r6, r1
 8015a0a:	4691      	mov	r9, r2
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	bfb8      	it	lt
 8015a10:	4622      	movlt	r2, r4
 8015a12:	462b      	mov	r3, r5
 8015a14:	f027 0720 	bic.w	r7, r7, #32
 8015a18:	bfbb      	ittet	lt
 8015a1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015a1e:	461d      	movlt	r5, r3
 8015a20:	2300      	movge	r3, #0
 8015a22:	232d      	movlt	r3, #45	; 0x2d
 8015a24:	bfb8      	it	lt
 8015a26:	4614      	movlt	r4, r2
 8015a28:	2f46      	cmp	r7, #70	; 0x46
 8015a2a:	700b      	strb	r3, [r1, #0]
 8015a2c:	d004      	beq.n	8015a38 <__cvt+0x40>
 8015a2e:	2f45      	cmp	r7, #69	; 0x45
 8015a30:	d100      	bne.n	8015a34 <__cvt+0x3c>
 8015a32:	3601      	adds	r6, #1
 8015a34:	2102      	movs	r1, #2
 8015a36:	e000      	b.n	8015a3a <__cvt+0x42>
 8015a38:	2103      	movs	r1, #3
 8015a3a:	ab03      	add	r3, sp, #12
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	ab02      	add	r3, sp, #8
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	4632      	mov	r2, r6
 8015a44:	4653      	mov	r3, sl
 8015a46:	ec45 4b10 	vmov	d0, r4, r5
 8015a4a:	f001 fdfd 	bl	8017648 <_dtoa_r>
 8015a4e:	2f47      	cmp	r7, #71	; 0x47
 8015a50:	4680      	mov	r8, r0
 8015a52:	d102      	bne.n	8015a5a <__cvt+0x62>
 8015a54:	f019 0f01 	tst.w	r9, #1
 8015a58:	d026      	beq.n	8015aa8 <__cvt+0xb0>
 8015a5a:	2f46      	cmp	r7, #70	; 0x46
 8015a5c:	eb08 0906 	add.w	r9, r8, r6
 8015a60:	d111      	bne.n	8015a86 <__cvt+0x8e>
 8015a62:	f898 3000 	ldrb.w	r3, [r8]
 8015a66:	2b30      	cmp	r3, #48	; 0x30
 8015a68:	d10a      	bne.n	8015a80 <__cvt+0x88>
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	4620      	mov	r0, r4
 8015a70:	4629      	mov	r1, r5
 8015a72:	f7eb f841 	bl	8000af8 <__aeabi_dcmpeq>
 8015a76:	b918      	cbnz	r0, 8015a80 <__cvt+0x88>
 8015a78:	f1c6 0601 	rsb	r6, r6, #1
 8015a7c:	f8ca 6000 	str.w	r6, [sl]
 8015a80:	f8da 3000 	ldr.w	r3, [sl]
 8015a84:	4499      	add	r9, r3
 8015a86:	2200      	movs	r2, #0
 8015a88:	2300      	movs	r3, #0
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	4629      	mov	r1, r5
 8015a8e:	f7eb f833 	bl	8000af8 <__aeabi_dcmpeq>
 8015a92:	b938      	cbnz	r0, 8015aa4 <__cvt+0xac>
 8015a94:	2230      	movs	r2, #48	; 0x30
 8015a96:	9b03      	ldr	r3, [sp, #12]
 8015a98:	454b      	cmp	r3, r9
 8015a9a:	d205      	bcs.n	8015aa8 <__cvt+0xb0>
 8015a9c:	1c59      	adds	r1, r3, #1
 8015a9e:	9103      	str	r1, [sp, #12]
 8015aa0:	701a      	strb	r2, [r3, #0]
 8015aa2:	e7f8      	b.n	8015a96 <__cvt+0x9e>
 8015aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8015aa8:	9b03      	ldr	r3, [sp, #12]
 8015aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015aac:	eba3 0308 	sub.w	r3, r3, r8
 8015ab0:	4640      	mov	r0, r8
 8015ab2:	6013      	str	r3, [r2, #0]
 8015ab4:	b004      	add	sp, #16
 8015ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015aba <__exponent>:
 8015aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015abc:	2900      	cmp	r1, #0
 8015abe:	4604      	mov	r4, r0
 8015ac0:	bfba      	itte	lt
 8015ac2:	4249      	neglt	r1, r1
 8015ac4:	232d      	movlt	r3, #45	; 0x2d
 8015ac6:	232b      	movge	r3, #43	; 0x2b
 8015ac8:	2909      	cmp	r1, #9
 8015aca:	f804 2b02 	strb.w	r2, [r4], #2
 8015ace:	7043      	strb	r3, [r0, #1]
 8015ad0:	dd20      	ble.n	8015b14 <__exponent+0x5a>
 8015ad2:	f10d 0307 	add.w	r3, sp, #7
 8015ad6:	461f      	mov	r7, r3
 8015ad8:	260a      	movs	r6, #10
 8015ada:	fb91 f5f6 	sdiv	r5, r1, r6
 8015ade:	fb06 1115 	mls	r1, r6, r5, r1
 8015ae2:	3130      	adds	r1, #48	; 0x30
 8015ae4:	2d09      	cmp	r5, #9
 8015ae6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015aea:	f103 32ff 	add.w	r2, r3, #4294967295
 8015aee:	4629      	mov	r1, r5
 8015af0:	dc09      	bgt.n	8015b06 <__exponent+0x4c>
 8015af2:	3130      	adds	r1, #48	; 0x30
 8015af4:	3b02      	subs	r3, #2
 8015af6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015afa:	42bb      	cmp	r3, r7
 8015afc:	4622      	mov	r2, r4
 8015afe:	d304      	bcc.n	8015b0a <__exponent+0x50>
 8015b00:	1a10      	subs	r0, r2, r0
 8015b02:	b003      	add	sp, #12
 8015b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b06:	4613      	mov	r3, r2
 8015b08:	e7e7      	b.n	8015ada <__exponent+0x20>
 8015b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b0e:	f804 2b01 	strb.w	r2, [r4], #1
 8015b12:	e7f2      	b.n	8015afa <__exponent+0x40>
 8015b14:	2330      	movs	r3, #48	; 0x30
 8015b16:	4419      	add	r1, r3
 8015b18:	7083      	strb	r3, [r0, #2]
 8015b1a:	1d02      	adds	r2, r0, #4
 8015b1c:	70c1      	strb	r1, [r0, #3]
 8015b1e:	e7ef      	b.n	8015b00 <__exponent+0x46>

08015b20 <_printf_float>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	b08d      	sub	sp, #52	; 0x34
 8015b26:	460c      	mov	r4, r1
 8015b28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015b2c:	4616      	mov	r6, r2
 8015b2e:	461f      	mov	r7, r3
 8015b30:	4605      	mov	r5, r0
 8015b32:	f002 fe7b 	bl	801882c <_localeconv_r>
 8015b36:	6803      	ldr	r3, [r0, #0]
 8015b38:	9304      	str	r3, [sp, #16]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7ea fb60 	bl	8000200 <strlen>
 8015b40:	2300      	movs	r3, #0
 8015b42:	930a      	str	r3, [sp, #40]	; 0x28
 8015b44:	f8d8 3000 	ldr.w	r3, [r8]
 8015b48:	9005      	str	r0, [sp, #20]
 8015b4a:	3307      	adds	r3, #7
 8015b4c:	f023 0307 	bic.w	r3, r3, #7
 8015b50:	f103 0208 	add.w	r2, r3, #8
 8015b54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015b58:	f8d4 b000 	ldr.w	fp, [r4]
 8015b5c:	f8c8 2000 	str.w	r2, [r8]
 8015b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015b68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015b6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b70:	9307      	str	r3, [sp, #28]
 8015b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b76:	f04f 32ff 	mov.w	r2, #4294967295
 8015b7a:	4ba7      	ldr	r3, [pc, #668]	; (8015e18 <_printf_float+0x2f8>)
 8015b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b80:	f7ea ffec 	bl	8000b5c <__aeabi_dcmpun>
 8015b84:	bb70      	cbnz	r0, 8015be4 <_printf_float+0xc4>
 8015b86:	f04f 32ff 	mov.w	r2, #4294967295
 8015b8a:	4ba3      	ldr	r3, [pc, #652]	; (8015e18 <_printf_float+0x2f8>)
 8015b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b90:	f7ea ffc6 	bl	8000b20 <__aeabi_dcmple>
 8015b94:	bb30      	cbnz	r0, 8015be4 <_printf_float+0xc4>
 8015b96:	2200      	movs	r2, #0
 8015b98:	2300      	movs	r3, #0
 8015b9a:	4640      	mov	r0, r8
 8015b9c:	4649      	mov	r1, r9
 8015b9e:	f7ea ffb5 	bl	8000b0c <__aeabi_dcmplt>
 8015ba2:	b110      	cbz	r0, 8015baa <_printf_float+0x8a>
 8015ba4:	232d      	movs	r3, #45	; 0x2d
 8015ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015baa:	4a9c      	ldr	r2, [pc, #624]	; (8015e1c <_printf_float+0x2fc>)
 8015bac:	4b9c      	ldr	r3, [pc, #624]	; (8015e20 <_printf_float+0x300>)
 8015bae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bb2:	bf8c      	ite	hi
 8015bb4:	4690      	movhi	r8, r2
 8015bb6:	4698      	movls	r8, r3
 8015bb8:	2303      	movs	r3, #3
 8015bba:	f02b 0204 	bic.w	r2, fp, #4
 8015bbe:	6123      	str	r3, [r4, #16]
 8015bc0:	6022      	str	r2, [r4, #0]
 8015bc2:	f04f 0900 	mov.w	r9, #0
 8015bc6:	9700      	str	r7, [sp, #0]
 8015bc8:	4633      	mov	r3, r6
 8015bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8015bcc:	4621      	mov	r1, r4
 8015bce:	4628      	mov	r0, r5
 8015bd0:	f000 f9e6 	bl	8015fa0 <_printf_common>
 8015bd4:	3001      	adds	r0, #1
 8015bd6:	f040 808d 	bne.w	8015cf4 <_printf_float+0x1d4>
 8015bda:	f04f 30ff 	mov.w	r0, #4294967295
 8015bde:	b00d      	add	sp, #52	; 0x34
 8015be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be4:	4642      	mov	r2, r8
 8015be6:	464b      	mov	r3, r9
 8015be8:	4640      	mov	r0, r8
 8015bea:	4649      	mov	r1, r9
 8015bec:	f7ea ffb6 	bl	8000b5c <__aeabi_dcmpun>
 8015bf0:	b110      	cbz	r0, 8015bf8 <_printf_float+0xd8>
 8015bf2:	4a8c      	ldr	r2, [pc, #560]	; (8015e24 <_printf_float+0x304>)
 8015bf4:	4b8c      	ldr	r3, [pc, #560]	; (8015e28 <_printf_float+0x308>)
 8015bf6:	e7da      	b.n	8015bae <_printf_float+0x8e>
 8015bf8:	6861      	ldr	r1, [r4, #4]
 8015bfa:	1c4b      	adds	r3, r1, #1
 8015bfc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015c00:	a80a      	add	r0, sp, #40	; 0x28
 8015c02:	d13e      	bne.n	8015c82 <_printf_float+0x162>
 8015c04:	2306      	movs	r3, #6
 8015c06:	6063      	str	r3, [r4, #4]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015c0e:	ab09      	add	r3, sp, #36	; 0x24
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	ec49 8b10 	vmov	d0, r8, r9
 8015c16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015c1a:	6022      	str	r2, [r4, #0]
 8015c1c:	f8cd a004 	str.w	sl, [sp, #4]
 8015c20:	6861      	ldr	r1, [r4, #4]
 8015c22:	4628      	mov	r0, r5
 8015c24:	f7ff fee8 	bl	80159f8 <__cvt>
 8015c28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015c2c:	2b47      	cmp	r3, #71	; 0x47
 8015c2e:	4680      	mov	r8, r0
 8015c30:	d109      	bne.n	8015c46 <_printf_float+0x126>
 8015c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c34:	1cd8      	adds	r0, r3, #3
 8015c36:	db02      	blt.n	8015c3e <_printf_float+0x11e>
 8015c38:	6862      	ldr	r2, [r4, #4]
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	dd47      	ble.n	8015cce <_printf_float+0x1ae>
 8015c3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015c42:	fa5f fa8a 	uxtb.w	sl, sl
 8015c46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c4c:	d824      	bhi.n	8015c98 <_printf_float+0x178>
 8015c4e:	3901      	subs	r1, #1
 8015c50:	4652      	mov	r2, sl
 8015c52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c56:	9109      	str	r1, [sp, #36]	; 0x24
 8015c58:	f7ff ff2f 	bl	8015aba <__exponent>
 8015c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c5e:	1813      	adds	r3, r2, r0
 8015c60:	2a01      	cmp	r2, #1
 8015c62:	4681      	mov	r9, r0
 8015c64:	6123      	str	r3, [r4, #16]
 8015c66:	dc02      	bgt.n	8015c6e <_printf_float+0x14e>
 8015c68:	6822      	ldr	r2, [r4, #0]
 8015c6a:	07d1      	lsls	r1, r2, #31
 8015c6c:	d501      	bpl.n	8015c72 <_printf_float+0x152>
 8015c6e:	3301      	adds	r3, #1
 8015c70:	6123      	str	r3, [r4, #16]
 8015c72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d0a5      	beq.n	8015bc6 <_printf_float+0xa6>
 8015c7a:	232d      	movs	r3, #45	; 0x2d
 8015c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c80:	e7a1      	b.n	8015bc6 <_printf_float+0xa6>
 8015c82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015c86:	f000 8177 	beq.w	8015f78 <_printf_float+0x458>
 8015c8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015c8e:	d1bb      	bne.n	8015c08 <_printf_float+0xe8>
 8015c90:	2900      	cmp	r1, #0
 8015c92:	d1b9      	bne.n	8015c08 <_printf_float+0xe8>
 8015c94:	2301      	movs	r3, #1
 8015c96:	e7b6      	b.n	8015c06 <_printf_float+0xe6>
 8015c98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015c9c:	d119      	bne.n	8015cd2 <_printf_float+0x1b2>
 8015c9e:	2900      	cmp	r1, #0
 8015ca0:	6863      	ldr	r3, [r4, #4]
 8015ca2:	dd0c      	ble.n	8015cbe <_printf_float+0x19e>
 8015ca4:	6121      	str	r1, [r4, #16]
 8015ca6:	b913      	cbnz	r3, 8015cae <_printf_float+0x18e>
 8015ca8:	6822      	ldr	r2, [r4, #0]
 8015caa:	07d2      	lsls	r2, r2, #31
 8015cac:	d502      	bpl.n	8015cb4 <_printf_float+0x194>
 8015cae:	3301      	adds	r3, #1
 8015cb0:	440b      	add	r3, r1
 8015cb2:	6123      	str	r3, [r4, #16]
 8015cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cb6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015cb8:	f04f 0900 	mov.w	r9, #0
 8015cbc:	e7d9      	b.n	8015c72 <_printf_float+0x152>
 8015cbe:	b913      	cbnz	r3, 8015cc6 <_printf_float+0x1a6>
 8015cc0:	6822      	ldr	r2, [r4, #0]
 8015cc2:	07d0      	lsls	r0, r2, #31
 8015cc4:	d501      	bpl.n	8015cca <_printf_float+0x1aa>
 8015cc6:	3302      	adds	r3, #2
 8015cc8:	e7f3      	b.n	8015cb2 <_printf_float+0x192>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e7f1      	b.n	8015cb2 <_printf_float+0x192>
 8015cce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015cd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cd6:	4293      	cmp	r3, r2
 8015cd8:	db05      	blt.n	8015ce6 <_printf_float+0x1c6>
 8015cda:	6822      	ldr	r2, [r4, #0]
 8015cdc:	6123      	str	r3, [r4, #16]
 8015cde:	07d1      	lsls	r1, r2, #31
 8015ce0:	d5e8      	bpl.n	8015cb4 <_printf_float+0x194>
 8015ce2:	3301      	adds	r3, #1
 8015ce4:	e7e5      	b.n	8015cb2 <_printf_float+0x192>
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	bfd4      	ite	le
 8015cea:	f1c3 0302 	rsble	r3, r3, #2
 8015cee:	2301      	movgt	r3, #1
 8015cf0:	4413      	add	r3, r2
 8015cf2:	e7de      	b.n	8015cb2 <_printf_float+0x192>
 8015cf4:	6823      	ldr	r3, [r4, #0]
 8015cf6:	055a      	lsls	r2, r3, #21
 8015cf8:	d407      	bmi.n	8015d0a <_printf_float+0x1ea>
 8015cfa:	6923      	ldr	r3, [r4, #16]
 8015cfc:	4642      	mov	r2, r8
 8015cfe:	4631      	mov	r1, r6
 8015d00:	4628      	mov	r0, r5
 8015d02:	47b8      	blx	r7
 8015d04:	3001      	adds	r0, #1
 8015d06:	d12b      	bne.n	8015d60 <_printf_float+0x240>
 8015d08:	e767      	b.n	8015bda <_printf_float+0xba>
 8015d0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d0e:	f240 80dc 	bls.w	8015eca <_printf_float+0x3aa>
 8015d12:	2200      	movs	r2, #0
 8015d14:	2300      	movs	r3, #0
 8015d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d1a:	f7ea feed 	bl	8000af8 <__aeabi_dcmpeq>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d033      	beq.n	8015d8a <_printf_float+0x26a>
 8015d22:	2301      	movs	r3, #1
 8015d24:	4a41      	ldr	r2, [pc, #260]	; (8015e2c <_printf_float+0x30c>)
 8015d26:	4631      	mov	r1, r6
 8015d28:	4628      	mov	r0, r5
 8015d2a:	47b8      	blx	r7
 8015d2c:	3001      	adds	r0, #1
 8015d2e:	f43f af54 	beq.w	8015bda <_printf_float+0xba>
 8015d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d36:	429a      	cmp	r2, r3
 8015d38:	db02      	blt.n	8015d40 <_printf_float+0x220>
 8015d3a:	6823      	ldr	r3, [r4, #0]
 8015d3c:	07d8      	lsls	r0, r3, #31
 8015d3e:	d50f      	bpl.n	8015d60 <_printf_float+0x240>
 8015d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d44:	4631      	mov	r1, r6
 8015d46:	4628      	mov	r0, r5
 8015d48:	47b8      	blx	r7
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	f43f af45 	beq.w	8015bda <_printf_float+0xba>
 8015d50:	f04f 0800 	mov.w	r8, #0
 8015d54:	f104 091a 	add.w	r9, r4, #26
 8015d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d5a:	3b01      	subs	r3, #1
 8015d5c:	4543      	cmp	r3, r8
 8015d5e:	dc09      	bgt.n	8015d74 <_printf_float+0x254>
 8015d60:	6823      	ldr	r3, [r4, #0]
 8015d62:	079b      	lsls	r3, r3, #30
 8015d64:	f100 8103 	bmi.w	8015f6e <_printf_float+0x44e>
 8015d68:	68e0      	ldr	r0, [r4, #12]
 8015d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d6c:	4298      	cmp	r0, r3
 8015d6e:	bfb8      	it	lt
 8015d70:	4618      	movlt	r0, r3
 8015d72:	e734      	b.n	8015bde <_printf_float+0xbe>
 8015d74:	2301      	movs	r3, #1
 8015d76:	464a      	mov	r2, r9
 8015d78:	4631      	mov	r1, r6
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	47b8      	blx	r7
 8015d7e:	3001      	adds	r0, #1
 8015d80:	f43f af2b 	beq.w	8015bda <_printf_float+0xba>
 8015d84:	f108 0801 	add.w	r8, r8, #1
 8015d88:	e7e6      	b.n	8015d58 <_printf_float+0x238>
 8015d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	dc2b      	bgt.n	8015de8 <_printf_float+0x2c8>
 8015d90:	2301      	movs	r3, #1
 8015d92:	4a26      	ldr	r2, [pc, #152]	; (8015e2c <_printf_float+0x30c>)
 8015d94:	4631      	mov	r1, r6
 8015d96:	4628      	mov	r0, r5
 8015d98:	47b8      	blx	r7
 8015d9a:	3001      	adds	r0, #1
 8015d9c:	f43f af1d 	beq.w	8015bda <_printf_float+0xba>
 8015da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da2:	b923      	cbnz	r3, 8015dae <_printf_float+0x28e>
 8015da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015da6:	b913      	cbnz	r3, 8015dae <_printf_float+0x28e>
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	07d9      	lsls	r1, r3, #31
 8015dac:	d5d8      	bpl.n	8015d60 <_printf_float+0x240>
 8015dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015db2:	4631      	mov	r1, r6
 8015db4:	4628      	mov	r0, r5
 8015db6:	47b8      	blx	r7
 8015db8:	3001      	adds	r0, #1
 8015dba:	f43f af0e 	beq.w	8015bda <_printf_float+0xba>
 8015dbe:	f04f 0900 	mov.w	r9, #0
 8015dc2:	f104 0a1a 	add.w	sl, r4, #26
 8015dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dc8:	425b      	negs	r3, r3
 8015dca:	454b      	cmp	r3, r9
 8015dcc:	dc01      	bgt.n	8015dd2 <_printf_float+0x2b2>
 8015dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dd0:	e794      	b.n	8015cfc <_printf_float+0x1dc>
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	4652      	mov	r2, sl
 8015dd6:	4631      	mov	r1, r6
 8015dd8:	4628      	mov	r0, r5
 8015dda:	47b8      	blx	r7
 8015ddc:	3001      	adds	r0, #1
 8015dde:	f43f aefc 	beq.w	8015bda <_printf_float+0xba>
 8015de2:	f109 0901 	add.w	r9, r9, #1
 8015de6:	e7ee      	b.n	8015dc6 <_printf_float+0x2a6>
 8015de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015dec:	429a      	cmp	r2, r3
 8015dee:	bfa8      	it	ge
 8015df0:	461a      	movge	r2, r3
 8015df2:	2a00      	cmp	r2, #0
 8015df4:	4691      	mov	r9, r2
 8015df6:	dd07      	ble.n	8015e08 <_printf_float+0x2e8>
 8015df8:	4613      	mov	r3, r2
 8015dfa:	4631      	mov	r1, r6
 8015dfc:	4642      	mov	r2, r8
 8015dfe:	4628      	mov	r0, r5
 8015e00:	47b8      	blx	r7
 8015e02:	3001      	adds	r0, #1
 8015e04:	f43f aee9 	beq.w	8015bda <_printf_float+0xba>
 8015e08:	f104 031a 	add.w	r3, r4, #26
 8015e0c:	f04f 0b00 	mov.w	fp, #0
 8015e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e14:	9306      	str	r3, [sp, #24]
 8015e16:	e015      	b.n	8015e44 <_printf_float+0x324>
 8015e18:	7fefffff 	.word	0x7fefffff
 8015e1c:	0801a484 	.word	0x0801a484
 8015e20:	0801a480 	.word	0x0801a480
 8015e24:	0801a48c 	.word	0x0801a48c
 8015e28:	0801a488 	.word	0x0801a488
 8015e2c:	0801a643 	.word	0x0801a643
 8015e30:	2301      	movs	r3, #1
 8015e32:	9a06      	ldr	r2, [sp, #24]
 8015e34:	4631      	mov	r1, r6
 8015e36:	4628      	mov	r0, r5
 8015e38:	47b8      	blx	r7
 8015e3a:	3001      	adds	r0, #1
 8015e3c:	f43f aecd 	beq.w	8015bda <_printf_float+0xba>
 8015e40:	f10b 0b01 	add.w	fp, fp, #1
 8015e44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015e48:	ebaa 0309 	sub.w	r3, sl, r9
 8015e4c:	455b      	cmp	r3, fp
 8015e4e:	dcef      	bgt.n	8015e30 <_printf_float+0x310>
 8015e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e54:	429a      	cmp	r2, r3
 8015e56:	44d0      	add	r8, sl
 8015e58:	db15      	blt.n	8015e86 <_printf_float+0x366>
 8015e5a:	6823      	ldr	r3, [r4, #0]
 8015e5c:	07da      	lsls	r2, r3, #31
 8015e5e:	d412      	bmi.n	8015e86 <_printf_float+0x366>
 8015e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e64:	eba3 020a 	sub.w	r2, r3, sl
 8015e68:	eba3 0a01 	sub.w	sl, r3, r1
 8015e6c:	4592      	cmp	sl, r2
 8015e6e:	bfa8      	it	ge
 8015e70:	4692      	movge	sl, r2
 8015e72:	f1ba 0f00 	cmp.w	sl, #0
 8015e76:	dc0e      	bgt.n	8015e96 <_printf_float+0x376>
 8015e78:	f04f 0800 	mov.w	r8, #0
 8015e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e80:	f104 091a 	add.w	r9, r4, #26
 8015e84:	e019      	b.n	8015eba <_printf_float+0x39a>
 8015e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	47b8      	blx	r7
 8015e90:	3001      	adds	r0, #1
 8015e92:	d1e5      	bne.n	8015e60 <_printf_float+0x340>
 8015e94:	e6a1      	b.n	8015bda <_printf_float+0xba>
 8015e96:	4653      	mov	r3, sl
 8015e98:	4642      	mov	r2, r8
 8015e9a:	4631      	mov	r1, r6
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	47b8      	blx	r7
 8015ea0:	3001      	adds	r0, #1
 8015ea2:	d1e9      	bne.n	8015e78 <_printf_float+0x358>
 8015ea4:	e699      	b.n	8015bda <_printf_float+0xba>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	464a      	mov	r2, r9
 8015eaa:	4631      	mov	r1, r6
 8015eac:	4628      	mov	r0, r5
 8015eae:	47b8      	blx	r7
 8015eb0:	3001      	adds	r0, #1
 8015eb2:	f43f ae92 	beq.w	8015bda <_printf_float+0xba>
 8015eb6:	f108 0801 	add.w	r8, r8, #1
 8015eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ebe:	1a9b      	subs	r3, r3, r2
 8015ec0:	eba3 030a 	sub.w	r3, r3, sl
 8015ec4:	4543      	cmp	r3, r8
 8015ec6:	dcee      	bgt.n	8015ea6 <_printf_float+0x386>
 8015ec8:	e74a      	b.n	8015d60 <_printf_float+0x240>
 8015eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ecc:	2a01      	cmp	r2, #1
 8015ece:	dc01      	bgt.n	8015ed4 <_printf_float+0x3b4>
 8015ed0:	07db      	lsls	r3, r3, #31
 8015ed2:	d53a      	bpl.n	8015f4a <_printf_float+0x42a>
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	4642      	mov	r2, r8
 8015ed8:	4631      	mov	r1, r6
 8015eda:	4628      	mov	r0, r5
 8015edc:	47b8      	blx	r7
 8015ede:	3001      	adds	r0, #1
 8015ee0:	f43f ae7b 	beq.w	8015bda <_printf_float+0xba>
 8015ee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ee8:	4631      	mov	r1, r6
 8015eea:	4628      	mov	r0, r5
 8015eec:	47b8      	blx	r7
 8015eee:	3001      	adds	r0, #1
 8015ef0:	f108 0801 	add.w	r8, r8, #1
 8015ef4:	f43f ae71 	beq.w	8015bda <_printf_float+0xba>
 8015ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015efa:	2200      	movs	r2, #0
 8015efc:	f103 3aff 	add.w	sl, r3, #4294967295
 8015f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f04:	2300      	movs	r3, #0
 8015f06:	f7ea fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 8015f0a:	b9c8      	cbnz	r0, 8015f40 <_printf_float+0x420>
 8015f0c:	4653      	mov	r3, sl
 8015f0e:	4642      	mov	r2, r8
 8015f10:	4631      	mov	r1, r6
 8015f12:	4628      	mov	r0, r5
 8015f14:	47b8      	blx	r7
 8015f16:	3001      	adds	r0, #1
 8015f18:	d10e      	bne.n	8015f38 <_printf_float+0x418>
 8015f1a:	e65e      	b.n	8015bda <_printf_float+0xba>
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	4652      	mov	r2, sl
 8015f20:	4631      	mov	r1, r6
 8015f22:	4628      	mov	r0, r5
 8015f24:	47b8      	blx	r7
 8015f26:	3001      	adds	r0, #1
 8015f28:	f43f ae57 	beq.w	8015bda <_printf_float+0xba>
 8015f2c:	f108 0801 	add.w	r8, r8, #1
 8015f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f32:	3b01      	subs	r3, #1
 8015f34:	4543      	cmp	r3, r8
 8015f36:	dcf1      	bgt.n	8015f1c <_printf_float+0x3fc>
 8015f38:	464b      	mov	r3, r9
 8015f3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f3e:	e6de      	b.n	8015cfe <_printf_float+0x1de>
 8015f40:	f04f 0800 	mov.w	r8, #0
 8015f44:	f104 0a1a 	add.w	sl, r4, #26
 8015f48:	e7f2      	b.n	8015f30 <_printf_float+0x410>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e7df      	b.n	8015f0e <_printf_float+0x3ee>
 8015f4e:	2301      	movs	r3, #1
 8015f50:	464a      	mov	r2, r9
 8015f52:	4631      	mov	r1, r6
 8015f54:	4628      	mov	r0, r5
 8015f56:	47b8      	blx	r7
 8015f58:	3001      	adds	r0, #1
 8015f5a:	f43f ae3e 	beq.w	8015bda <_printf_float+0xba>
 8015f5e:	f108 0801 	add.w	r8, r8, #1
 8015f62:	68e3      	ldr	r3, [r4, #12]
 8015f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f66:	1a9b      	subs	r3, r3, r2
 8015f68:	4543      	cmp	r3, r8
 8015f6a:	dcf0      	bgt.n	8015f4e <_printf_float+0x42e>
 8015f6c:	e6fc      	b.n	8015d68 <_printf_float+0x248>
 8015f6e:	f04f 0800 	mov.w	r8, #0
 8015f72:	f104 0919 	add.w	r9, r4, #25
 8015f76:	e7f4      	b.n	8015f62 <_printf_float+0x442>
 8015f78:	2900      	cmp	r1, #0
 8015f7a:	f43f ae8b 	beq.w	8015c94 <_printf_float+0x174>
 8015f7e:	2300      	movs	r3, #0
 8015f80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015f84:	ab09      	add	r3, sp, #36	; 0x24
 8015f86:	9300      	str	r3, [sp, #0]
 8015f88:	ec49 8b10 	vmov	d0, r8, r9
 8015f8c:	6022      	str	r2, [r4, #0]
 8015f8e:	f8cd a004 	str.w	sl, [sp, #4]
 8015f92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015f96:	4628      	mov	r0, r5
 8015f98:	f7ff fd2e 	bl	80159f8 <__cvt>
 8015f9c:	4680      	mov	r8, r0
 8015f9e:	e648      	b.n	8015c32 <_printf_float+0x112>

08015fa0 <_printf_common>:
 8015fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fa4:	4691      	mov	r9, r2
 8015fa6:	461f      	mov	r7, r3
 8015fa8:	688a      	ldr	r2, [r1, #8]
 8015faa:	690b      	ldr	r3, [r1, #16]
 8015fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015fb0:	4293      	cmp	r3, r2
 8015fb2:	bfb8      	it	lt
 8015fb4:	4613      	movlt	r3, r2
 8015fb6:	f8c9 3000 	str.w	r3, [r9]
 8015fba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015fbe:	4606      	mov	r6, r0
 8015fc0:	460c      	mov	r4, r1
 8015fc2:	b112      	cbz	r2, 8015fca <_printf_common+0x2a>
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	f8c9 3000 	str.w	r3, [r9]
 8015fca:	6823      	ldr	r3, [r4, #0]
 8015fcc:	0699      	lsls	r1, r3, #26
 8015fce:	bf42      	ittt	mi
 8015fd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015fd4:	3302      	addmi	r3, #2
 8015fd6:	f8c9 3000 	strmi.w	r3, [r9]
 8015fda:	6825      	ldr	r5, [r4, #0]
 8015fdc:	f015 0506 	ands.w	r5, r5, #6
 8015fe0:	d107      	bne.n	8015ff2 <_printf_common+0x52>
 8015fe2:	f104 0a19 	add.w	sl, r4, #25
 8015fe6:	68e3      	ldr	r3, [r4, #12]
 8015fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8015fec:	1a9b      	subs	r3, r3, r2
 8015fee:	42ab      	cmp	r3, r5
 8015ff0:	dc28      	bgt.n	8016044 <_printf_common+0xa4>
 8015ff2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015ff6:	6822      	ldr	r2, [r4, #0]
 8015ff8:	3300      	adds	r3, #0
 8015ffa:	bf18      	it	ne
 8015ffc:	2301      	movne	r3, #1
 8015ffe:	0692      	lsls	r2, r2, #26
 8016000:	d42d      	bmi.n	801605e <_printf_common+0xbe>
 8016002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016006:	4639      	mov	r1, r7
 8016008:	4630      	mov	r0, r6
 801600a:	47c0      	blx	r8
 801600c:	3001      	adds	r0, #1
 801600e:	d020      	beq.n	8016052 <_printf_common+0xb2>
 8016010:	6823      	ldr	r3, [r4, #0]
 8016012:	68e5      	ldr	r5, [r4, #12]
 8016014:	f8d9 2000 	ldr.w	r2, [r9]
 8016018:	f003 0306 	and.w	r3, r3, #6
 801601c:	2b04      	cmp	r3, #4
 801601e:	bf08      	it	eq
 8016020:	1aad      	subeq	r5, r5, r2
 8016022:	68a3      	ldr	r3, [r4, #8]
 8016024:	6922      	ldr	r2, [r4, #16]
 8016026:	bf0c      	ite	eq
 8016028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801602c:	2500      	movne	r5, #0
 801602e:	4293      	cmp	r3, r2
 8016030:	bfc4      	itt	gt
 8016032:	1a9b      	subgt	r3, r3, r2
 8016034:	18ed      	addgt	r5, r5, r3
 8016036:	f04f 0900 	mov.w	r9, #0
 801603a:	341a      	adds	r4, #26
 801603c:	454d      	cmp	r5, r9
 801603e:	d11a      	bne.n	8016076 <_printf_common+0xd6>
 8016040:	2000      	movs	r0, #0
 8016042:	e008      	b.n	8016056 <_printf_common+0xb6>
 8016044:	2301      	movs	r3, #1
 8016046:	4652      	mov	r2, sl
 8016048:	4639      	mov	r1, r7
 801604a:	4630      	mov	r0, r6
 801604c:	47c0      	blx	r8
 801604e:	3001      	adds	r0, #1
 8016050:	d103      	bne.n	801605a <_printf_common+0xba>
 8016052:	f04f 30ff 	mov.w	r0, #4294967295
 8016056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801605a:	3501      	adds	r5, #1
 801605c:	e7c3      	b.n	8015fe6 <_printf_common+0x46>
 801605e:	18e1      	adds	r1, r4, r3
 8016060:	1c5a      	adds	r2, r3, #1
 8016062:	2030      	movs	r0, #48	; 0x30
 8016064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016068:	4422      	add	r2, r4
 801606a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801606e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016072:	3302      	adds	r3, #2
 8016074:	e7c5      	b.n	8016002 <_printf_common+0x62>
 8016076:	2301      	movs	r3, #1
 8016078:	4622      	mov	r2, r4
 801607a:	4639      	mov	r1, r7
 801607c:	4630      	mov	r0, r6
 801607e:	47c0      	blx	r8
 8016080:	3001      	adds	r0, #1
 8016082:	d0e6      	beq.n	8016052 <_printf_common+0xb2>
 8016084:	f109 0901 	add.w	r9, r9, #1
 8016088:	e7d8      	b.n	801603c <_printf_common+0x9c>
	...

0801608c <_printf_i>:
 801608c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016090:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016094:	460c      	mov	r4, r1
 8016096:	7e09      	ldrb	r1, [r1, #24]
 8016098:	b085      	sub	sp, #20
 801609a:	296e      	cmp	r1, #110	; 0x6e
 801609c:	4617      	mov	r7, r2
 801609e:	4606      	mov	r6, r0
 80160a0:	4698      	mov	r8, r3
 80160a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160a4:	f000 80b3 	beq.w	801620e <_printf_i+0x182>
 80160a8:	d822      	bhi.n	80160f0 <_printf_i+0x64>
 80160aa:	2963      	cmp	r1, #99	; 0x63
 80160ac:	d036      	beq.n	801611c <_printf_i+0x90>
 80160ae:	d80a      	bhi.n	80160c6 <_printf_i+0x3a>
 80160b0:	2900      	cmp	r1, #0
 80160b2:	f000 80b9 	beq.w	8016228 <_printf_i+0x19c>
 80160b6:	2958      	cmp	r1, #88	; 0x58
 80160b8:	f000 8083 	beq.w	80161c2 <_printf_i+0x136>
 80160bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80160c4:	e032      	b.n	801612c <_printf_i+0xa0>
 80160c6:	2964      	cmp	r1, #100	; 0x64
 80160c8:	d001      	beq.n	80160ce <_printf_i+0x42>
 80160ca:	2969      	cmp	r1, #105	; 0x69
 80160cc:	d1f6      	bne.n	80160bc <_printf_i+0x30>
 80160ce:	6820      	ldr	r0, [r4, #0]
 80160d0:	6813      	ldr	r3, [r2, #0]
 80160d2:	0605      	lsls	r5, r0, #24
 80160d4:	f103 0104 	add.w	r1, r3, #4
 80160d8:	d52a      	bpl.n	8016130 <_printf_i+0xa4>
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	6011      	str	r1, [r2, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	da03      	bge.n	80160ea <_printf_i+0x5e>
 80160e2:	222d      	movs	r2, #45	; 0x2d
 80160e4:	425b      	negs	r3, r3
 80160e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80160ea:	486f      	ldr	r0, [pc, #444]	; (80162a8 <_printf_i+0x21c>)
 80160ec:	220a      	movs	r2, #10
 80160ee:	e039      	b.n	8016164 <_printf_i+0xd8>
 80160f0:	2973      	cmp	r1, #115	; 0x73
 80160f2:	f000 809d 	beq.w	8016230 <_printf_i+0x1a4>
 80160f6:	d808      	bhi.n	801610a <_printf_i+0x7e>
 80160f8:	296f      	cmp	r1, #111	; 0x6f
 80160fa:	d020      	beq.n	801613e <_printf_i+0xb2>
 80160fc:	2970      	cmp	r1, #112	; 0x70
 80160fe:	d1dd      	bne.n	80160bc <_printf_i+0x30>
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	f043 0320 	orr.w	r3, r3, #32
 8016106:	6023      	str	r3, [r4, #0]
 8016108:	e003      	b.n	8016112 <_printf_i+0x86>
 801610a:	2975      	cmp	r1, #117	; 0x75
 801610c:	d017      	beq.n	801613e <_printf_i+0xb2>
 801610e:	2978      	cmp	r1, #120	; 0x78
 8016110:	d1d4      	bne.n	80160bc <_printf_i+0x30>
 8016112:	2378      	movs	r3, #120	; 0x78
 8016114:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016118:	4864      	ldr	r0, [pc, #400]	; (80162ac <_printf_i+0x220>)
 801611a:	e055      	b.n	80161c8 <_printf_i+0x13c>
 801611c:	6813      	ldr	r3, [r2, #0]
 801611e:	1d19      	adds	r1, r3, #4
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	6011      	str	r1, [r2, #0]
 8016124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801612c:	2301      	movs	r3, #1
 801612e:	e08c      	b.n	801624a <_printf_i+0x1be>
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	6011      	str	r1, [r2, #0]
 8016134:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016138:	bf18      	it	ne
 801613a:	b21b      	sxthne	r3, r3
 801613c:	e7cf      	b.n	80160de <_printf_i+0x52>
 801613e:	6813      	ldr	r3, [r2, #0]
 8016140:	6825      	ldr	r5, [r4, #0]
 8016142:	1d18      	adds	r0, r3, #4
 8016144:	6010      	str	r0, [r2, #0]
 8016146:	0628      	lsls	r0, r5, #24
 8016148:	d501      	bpl.n	801614e <_printf_i+0xc2>
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	e002      	b.n	8016154 <_printf_i+0xc8>
 801614e:	0668      	lsls	r0, r5, #25
 8016150:	d5fb      	bpl.n	801614a <_printf_i+0xbe>
 8016152:	881b      	ldrh	r3, [r3, #0]
 8016154:	4854      	ldr	r0, [pc, #336]	; (80162a8 <_printf_i+0x21c>)
 8016156:	296f      	cmp	r1, #111	; 0x6f
 8016158:	bf14      	ite	ne
 801615a:	220a      	movne	r2, #10
 801615c:	2208      	moveq	r2, #8
 801615e:	2100      	movs	r1, #0
 8016160:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016164:	6865      	ldr	r5, [r4, #4]
 8016166:	60a5      	str	r5, [r4, #8]
 8016168:	2d00      	cmp	r5, #0
 801616a:	f2c0 8095 	blt.w	8016298 <_printf_i+0x20c>
 801616e:	6821      	ldr	r1, [r4, #0]
 8016170:	f021 0104 	bic.w	r1, r1, #4
 8016174:	6021      	str	r1, [r4, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d13d      	bne.n	80161f6 <_printf_i+0x16a>
 801617a:	2d00      	cmp	r5, #0
 801617c:	f040 808e 	bne.w	801629c <_printf_i+0x210>
 8016180:	4665      	mov	r5, ip
 8016182:	2a08      	cmp	r2, #8
 8016184:	d10b      	bne.n	801619e <_printf_i+0x112>
 8016186:	6823      	ldr	r3, [r4, #0]
 8016188:	07db      	lsls	r3, r3, #31
 801618a:	d508      	bpl.n	801619e <_printf_i+0x112>
 801618c:	6923      	ldr	r3, [r4, #16]
 801618e:	6862      	ldr	r2, [r4, #4]
 8016190:	429a      	cmp	r2, r3
 8016192:	bfde      	ittt	le
 8016194:	2330      	movle	r3, #48	; 0x30
 8016196:	f805 3c01 	strble.w	r3, [r5, #-1]
 801619a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801619e:	ebac 0305 	sub.w	r3, ip, r5
 80161a2:	6123      	str	r3, [r4, #16]
 80161a4:	f8cd 8000 	str.w	r8, [sp]
 80161a8:	463b      	mov	r3, r7
 80161aa:	aa03      	add	r2, sp, #12
 80161ac:	4621      	mov	r1, r4
 80161ae:	4630      	mov	r0, r6
 80161b0:	f7ff fef6 	bl	8015fa0 <_printf_common>
 80161b4:	3001      	adds	r0, #1
 80161b6:	d14d      	bne.n	8016254 <_printf_i+0x1c8>
 80161b8:	f04f 30ff 	mov.w	r0, #4294967295
 80161bc:	b005      	add	sp, #20
 80161be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161c2:	4839      	ldr	r0, [pc, #228]	; (80162a8 <_printf_i+0x21c>)
 80161c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80161c8:	6813      	ldr	r3, [r2, #0]
 80161ca:	6821      	ldr	r1, [r4, #0]
 80161cc:	1d1d      	adds	r5, r3, #4
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	6015      	str	r5, [r2, #0]
 80161d2:	060a      	lsls	r2, r1, #24
 80161d4:	d50b      	bpl.n	80161ee <_printf_i+0x162>
 80161d6:	07ca      	lsls	r2, r1, #31
 80161d8:	bf44      	itt	mi
 80161da:	f041 0120 	orrmi.w	r1, r1, #32
 80161de:	6021      	strmi	r1, [r4, #0]
 80161e0:	b91b      	cbnz	r3, 80161ea <_printf_i+0x15e>
 80161e2:	6822      	ldr	r2, [r4, #0]
 80161e4:	f022 0220 	bic.w	r2, r2, #32
 80161e8:	6022      	str	r2, [r4, #0]
 80161ea:	2210      	movs	r2, #16
 80161ec:	e7b7      	b.n	801615e <_printf_i+0xd2>
 80161ee:	064d      	lsls	r5, r1, #25
 80161f0:	bf48      	it	mi
 80161f2:	b29b      	uxthmi	r3, r3
 80161f4:	e7ef      	b.n	80161d6 <_printf_i+0x14a>
 80161f6:	4665      	mov	r5, ip
 80161f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80161fc:	fb02 3311 	mls	r3, r2, r1, r3
 8016200:	5cc3      	ldrb	r3, [r0, r3]
 8016202:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016206:	460b      	mov	r3, r1
 8016208:	2900      	cmp	r1, #0
 801620a:	d1f5      	bne.n	80161f8 <_printf_i+0x16c>
 801620c:	e7b9      	b.n	8016182 <_printf_i+0xf6>
 801620e:	6813      	ldr	r3, [r2, #0]
 8016210:	6825      	ldr	r5, [r4, #0]
 8016212:	6961      	ldr	r1, [r4, #20]
 8016214:	1d18      	adds	r0, r3, #4
 8016216:	6010      	str	r0, [r2, #0]
 8016218:	0628      	lsls	r0, r5, #24
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	d501      	bpl.n	8016222 <_printf_i+0x196>
 801621e:	6019      	str	r1, [r3, #0]
 8016220:	e002      	b.n	8016228 <_printf_i+0x19c>
 8016222:	066a      	lsls	r2, r5, #25
 8016224:	d5fb      	bpl.n	801621e <_printf_i+0x192>
 8016226:	8019      	strh	r1, [r3, #0]
 8016228:	2300      	movs	r3, #0
 801622a:	6123      	str	r3, [r4, #16]
 801622c:	4665      	mov	r5, ip
 801622e:	e7b9      	b.n	80161a4 <_printf_i+0x118>
 8016230:	6813      	ldr	r3, [r2, #0]
 8016232:	1d19      	adds	r1, r3, #4
 8016234:	6011      	str	r1, [r2, #0]
 8016236:	681d      	ldr	r5, [r3, #0]
 8016238:	6862      	ldr	r2, [r4, #4]
 801623a:	2100      	movs	r1, #0
 801623c:	4628      	mov	r0, r5
 801623e:	f7e9 ffe7 	bl	8000210 <memchr>
 8016242:	b108      	cbz	r0, 8016248 <_printf_i+0x1bc>
 8016244:	1b40      	subs	r0, r0, r5
 8016246:	6060      	str	r0, [r4, #4]
 8016248:	6863      	ldr	r3, [r4, #4]
 801624a:	6123      	str	r3, [r4, #16]
 801624c:	2300      	movs	r3, #0
 801624e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016252:	e7a7      	b.n	80161a4 <_printf_i+0x118>
 8016254:	6923      	ldr	r3, [r4, #16]
 8016256:	462a      	mov	r2, r5
 8016258:	4639      	mov	r1, r7
 801625a:	4630      	mov	r0, r6
 801625c:	47c0      	blx	r8
 801625e:	3001      	adds	r0, #1
 8016260:	d0aa      	beq.n	80161b8 <_printf_i+0x12c>
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	079b      	lsls	r3, r3, #30
 8016266:	d413      	bmi.n	8016290 <_printf_i+0x204>
 8016268:	68e0      	ldr	r0, [r4, #12]
 801626a:	9b03      	ldr	r3, [sp, #12]
 801626c:	4298      	cmp	r0, r3
 801626e:	bfb8      	it	lt
 8016270:	4618      	movlt	r0, r3
 8016272:	e7a3      	b.n	80161bc <_printf_i+0x130>
 8016274:	2301      	movs	r3, #1
 8016276:	464a      	mov	r2, r9
 8016278:	4639      	mov	r1, r7
 801627a:	4630      	mov	r0, r6
 801627c:	47c0      	blx	r8
 801627e:	3001      	adds	r0, #1
 8016280:	d09a      	beq.n	80161b8 <_printf_i+0x12c>
 8016282:	3501      	adds	r5, #1
 8016284:	68e3      	ldr	r3, [r4, #12]
 8016286:	9a03      	ldr	r2, [sp, #12]
 8016288:	1a9b      	subs	r3, r3, r2
 801628a:	42ab      	cmp	r3, r5
 801628c:	dcf2      	bgt.n	8016274 <_printf_i+0x1e8>
 801628e:	e7eb      	b.n	8016268 <_printf_i+0x1dc>
 8016290:	2500      	movs	r5, #0
 8016292:	f104 0919 	add.w	r9, r4, #25
 8016296:	e7f5      	b.n	8016284 <_printf_i+0x1f8>
 8016298:	2b00      	cmp	r3, #0
 801629a:	d1ac      	bne.n	80161f6 <_printf_i+0x16a>
 801629c:	7803      	ldrb	r3, [r0, #0]
 801629e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162a6:	e76c      	b.n	8016182 <_printf_i+0xf6>
 80162a8:	0801a490 	.word	0x0801a490
 80162ac:	0801a4a1 	.word	0x0801a4a1

080162b0 <_scanf_float>:
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	469a      	mov	sl, r3
 80162b6:	688b      	ldr	r3, [r1, #8]
 80162b8:	4616      	mov	r6, r2
 80162ba:	1e5a      	subs	r2, r3, #1
 80162bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80162c0:	b087      	sub	sp, #28
 80162c2:	bf83      	ittte	hi
 80162c4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80162c8:	189b      	addhi	r3, r3, r2
 80162ca:	9301      	strhi	r3, [sp, #4]
 80162cc:	2300      	movls	r3, #0
 80162ce:	bf86      	itte	hi
 80162d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80162d4:	608b      	strhi	r3, [r1, #8]
 80162d6:	9301      	strls	r3, [sp, #4]
 80162d8:	680b      	ldr	r3, [r1, #0]
 80162da:	4688      	mov	r8, r1
 80162dc:	f04f 0b00 	mov.w	fp, #0
 80162e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80162e4:	f848 3b1c 	str.w	r3, [r8], #28
 80162e8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80162ec:	4607      	mov	r7, r0
 80162ee:	460c      	mov	r4, r1
 80162f0:	4645      	mov	r5, r8
 80162f2:	465a      	mov	r2, fp
 80162f4:	46d9      	mov	r9, fp
 80162f6:	f8cd b008 	str.w	fp, [sp, #8]
 80162fa:	68a1      	ldr	r1, [r4, #8]
 80162fc:	b181      	cbz	r1, 8016320 <_scanf_float+0x70>
 80162fe:	6833      	ldr	r3, [r6, #0]
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	2b49      	cmp	r3, #73	; 0x49
 8016304:	d071      	beq.n	80163ea <_scanf_float+0x13a>
 8016306:	d84d      	bhi.n	80163a4 <_scanf_float+0xf4>
 8016308:	2b39      	cmp	r3, #57	; 0x39
 801630a:	d840      	bhi.n	801638e <_scanf_float+0xde>
 801630c:	2b31      	cmp	r3, #49	; 0x31
 801630e:	f080 8088 	bcs.w	8016422 <_scanf_float+0x172>
 8016312:	2b2d      	cmp	r3, #45	; 0x2d
 8016314:	f000 8090 	beq.w	8016438 <_scanf_float+0x188>
 8016318:	d815      	bhi.n	8016346 <_scanf_float+0x96>
 801631a:	2b2b      	cmp	r3, #43	; 0x2b
 801631c:	f000 808c 	beq.w	8016438 <_scanf_float+0x188>
 8016320:	f1b9 0f00 	cmp.w	r9, #0
 8016324:	d003      	beq.n	801632e <_scanf_float+0x7e>
 8016326:	6823      	ldr	r3, [r4, #0]
 8016328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801632c:	6023      	str	r3, [r4, #0]
 801632e:	3a01      	subs	r2, #1
 8016330:	2a01      	cmp	r2, #1
 8016332:	f200 80ea 	bhi.w	801650a <_scanf_float+0x25a>
 8016336:	4545      	cmp	r5, r8
 8016338:	f200 80dc 	bhi.w	80164f4 <_scanf_float+0x244>
 801633c:	2601      	movs	r6, #1
 801633e:	4630      	mov	r0, r6
 8016340:	b007      	add	sp, #28
 8016342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016346:	2b2e      	cmp	r3, #46	; 0x2e
 8016348:	f000 809f 	beq.w	801648a <_scanf_float+0x1da>
 801634c:	2b30      	cmp	r3, #48	; 0x30
 801634e:	d1e7      	bne.n	8016320 <_scanf_float+0x70>
 8016350:	6820      	ldr	r0, [r4, #0]
 8016352:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016356:	d064      	beq.n	8016422 <_scanf_float+0x172>
 8016358:	9b01      	ldr	r3, [sp, #4]
 801635a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801635e:	6020      	str	r0, [r4, #0]
 8016360:	f109 0901 	add.w	r9, r9, #1
 8016364:	b11b      	cbz	r3, 801636e <_scanf_float+0xbe>
 8016366:	3b01      	subs	r3, #1
 8016368:	3101      	adds	r1, #1
 801636a:	9301      	str	r3, [sp, #4]
 801636c:	60a1      	str	r1, [r4, #8]
 801636e:	68a3      	ldr	r3, [r4, #8]
 8016370:	3b01      	subs	r3, #1
 8016372:	60a3      	str	r3, [r4, #8]
 8016374:	6923      	ldr	r3, [r4, #16]
 8016376:	3301      	adds	r3, #1
 8016378:	6123      	str	r3, [r4, #16]
 801637a:	6873      	ldr	r3, [r6, #4]
 801637c:	3b01      	subs	r3, #1
 801637e:	2b00      	cmp	r3, #0
 8016380:	6073      	str	r3, [r6, #4]
 8016382:	f340 80ac 	ble.w	80164de <_scanf_float+0x22e>
 8016386:	6833      	ldr	r3, [r6, #0]
 8016388:	3301      	adds	r3, #1
 801638a:	6033      	str	r3, [r6, #0]
 801638c:	e7b5      	b.n	80162fa <_scanf_float+0x4a>
 801638e:	2b45      	cmp	r3, #69	; 0x45
 8016390:	f000 8085 	beq.w	801649e <_scanf_float+0x1ee>
 8016394:	2b46      	cmp	r3, #70	; 0x46
 8016396:	d06a      	beq.n	801646e <_scanf_float+0x1be>
 8016398:	2b41      	cmp	r3, #65	; 0x41
 801639a:	d1c1      	bne.n	8016320 <_scanf_float+0x70>
 801639c:	2a01      	cmp	r2, #1
 801639e:	d1bf      	bne.n	8016320 <_scanf_float+0x70>
 80163a0:	2202      	movs	r2, #2
 80163a2:	e046      	b.n	8016432 <_scanf_float+0x182>
 80163a4:	2b65      	cmp	r3, #101	; 0x65
 80163a6:	d07a      	beq.n	801649e <_scanf_float+0x1ee>
 80163a8:	d818      	bhi.n	80163dc <_scanf_float+0x12c>
 80163aa:	2b54      	cmp	r3, #84	; 0x54
 80163ac:	d066      	beq.n	801647c <_scanf_float+0x1cc>
 80163ae:	d811      	bhi.n	80163d4 <_scanf_float+0x124>
 80163b0:	2b4e      	cmp	r3, #78	; 0x4e
 80163b2:	d1b5      	bne.n	8016320 <_scanf_float+0x70>
 80163b4:	2a00      	cmp	r2, #0
 80163b6:	d146      	bne.n	8016446 <_scanf_float+0x196>
 80163b8:	f1b9 0f00 	cmp.w	r9, #0
 80163bc:	d145      	bne.n	801644a <_scanf_float+0x19a>
 80163be:	6821      	ldr	r1, [r4, #0]
 80163c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80163c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80163c8:	d13f      	bne.n	801644a <_scanf_float+0x19a>
 80163ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163ce:	6021      	str	r1, [r4, #0]
 80163d0:	2201      	movs	r2, #1
 80163d2:	e02e      	b.n	8016432 <_scanf_float+0x182>
 80163d4:	2b59      	cmp	r3, #89	; 0x59
 80163d6:	d01e      	beq.n	8016416 <_scanf_float+0x166>
 80163d8:	2b61      	cmp	r3, #97	; 0x61
 80163da:	e7de      	b.n	801639a <_scanf_float+0xea>
 80163dc:	2b6e      	cmp	r3, #110	; 0x6e
 80163de:	d0e9      	beq.n	80163b4 <_scanf_float+0x104>
 80163e0:	d815      	bhi.n	801640e <_scanf_float+0x15e>
 80163e2:	2b66      	cmp	r3, #102	; 0x66
 80163e4:	d043      	beq.n	801646e <_scanf_float+0x1be>
 80163e6:	2b69      	cmp	r3, #105	; 0x69
 80163e8:	d19a      	bne.n	8016320 <_scanf_float+0x70>
 80163ea:	f1bb 0f00 	cmp.w	fp, #0
 80163ee:	d138      	bne.n	8016462 <_scanf_float+0x1b2>
 80163f0:	f1b9 0f00 	cmp.w	r9, #0
 80163f4:	d197      	bne.n	8016326 <_scanf_float+0x76>
 80163f6:	6821      	ldr	r1, [r4, #0]
 80163f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80163fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016400:	d195      	bne.n	801632e <_scanf_float+0x7e>
 8016402:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016406:	6021      	str	r1, [r4, #0]
 8016408:	f04f 0b01 	mov.w	fp, #1
 801640c:	e011      	b.n	8016432 <_scanf_float+0x182>
 801640e:	2b74      	cmp	r3, #116	; 0x74
 8016410:	d034      	beq.n	801647c <_scanf_float+0x1cc>
 8016412:	2b79      	cmp	r3, #121	; 0x79
 8016414:	d184      	bne.n	8016320 <_scanf_float+0x70>
 8016416:	f1bb 0f07 	cmp.w	fp, #7
 801641a:	d181      	bne.n	8016320 <_scanf_float+0x70>
 801641c:	f04f 0b08 	mov.w	fp, #8
 8016420:	e007      	b.n	8016432 <_scanf_float+0x182>
 8016422:	eb12 0f0b 	cmn.w	r2, fp
 8016426:	f47f af7b 	bne.w	8016320 <_scanf_float+0x70>
 801642a:	6821      	ldr	r1, [r4, #0]
 801642c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016430:	6021      	str	r1, [r4, #0]
 8016432:	702b      	strb	r3, [r5, #0]
 8016434:	3501      	adds	r5, #1
 8016436:	e79a      	b.n	801636e <_scanf_float+0xbe>
 8016438:	6821      	ldr	r1, [r4, #0]
 801643a:	0608      	lsls	r0, r1, #24
 801643c:	f57f af70 	bpl.w	8016320 <_scanf_float+0x70>
 8016440:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016444:	e7f4      	b.n	8016430 <_scanf_float+0x180>
 8016446:	2a02      	cmp	r2, #2
 8016448:	d047      	beq.n	80164da <_scanf_float+0x22a>
 801644a:	f1bb 0f01 	cmp.w	fp, #1
 801644e:	d003      	beq.n	8016458 <_scanf_float+0x1a8>
 8016450:	f1bb 0f04 	cmp.w	fp, #4
 8016454:	f47f af64 	bne.w	8016320 <_scanf_float+0x70>
 8016458:	f10b 0b01 	add.w	fp, fp, #1
 801645c:	fa5f fb8b 	uxtb.w	fp, fp
 8016460:	e7e7      	b.n	8016432 <_scanf_float+0x182>
 8016462:	f1bb 0f03 	cmp.w	fp, #3
 8016466:	d0f7      	beq.n	8016458 <_scanf_float+0x1a8>
 8016468:	f1bb 0f05 	cmp.w	fp, #5
 801646c:	e7f2      	b.n	8016454 <_scanf_float+0x1a4>
 801646e:	f1bb 0f02 	cmp.w	fp, #2
 8016472:	f47f af55 	bne.w	8016320 <_scanf_float+0x70>
 8016476:	f04f 0b03 	mov.w	fp, #3
 801647a:	e7da      	b.n	8016432 <_scanf_float+0x182>
 801647c:	f1bb 0f06 	cmp.w	fp, #6
 8016480:	f47f af4e 	bne.w	8016320 <_scanf_float+0x70>
 8016484:	f04f 0b07 	mov.w	fp, #7
 8016488:	e7d3      	b.n	8016432 <_scanf_float+0x182>
 801648a:	6821      	ldr	r1, [r4, #0]
 801648c:	0588      	lsls	r0, r1, #22
 801648e:	f57f af47 	bpl.w	8016320 <_scanf_float+0x70>
 8016492:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016496:	6021      	str	r1, [r4, #0]
 8016498:	f8cd 9008 	str.w	r9, [sp, #8]
 801649c:	e7c9      	b.n	8016432 <_scanf_float+0x182>
 801649e:	6821      	ldr	r1, [r4, #0]
 80164a0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80164a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80164a8:	d006      	beq.n	80164b8 <_scanf_float+0x208>
 80164aa:	0548      	lsls	r0, r1, #21
 80164ac:	f57f af38 	bpl.w	8016320 <_scanf_float+0x70>
 80164b0:	f1b9 0f00 	cmp.w	r9, #0
 80164b4:	f43f af3b 	beq.w	801632e <_scanf_float+0x7e>
 80164b8:	0588      	lsls	r0, r1, #22
 80164ba:	bf58      	it	pl
 80164bc:	9802      	ldrpl	r0, [sp, #8]
 80164be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164c2:	bf58      	it	pl
 80164c4:	eba9 0000 	subpl.w	r0, r9, r0
 80164c8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80164cc:	bf58      	it	pl
 80164ce:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80164d2:	6021      	str	r1, [r4, #0]
 80164d4:	f04f 0900 	mov.w	r9, #0
 80164d8:	e7ab      	b.n	8016432 <_scanf_float+0x182>
 80164da:	2203      	movs	r2, #3
 80164dc:	e7a9      	b.n	8016432 <_scanf_float+0x182>
 80164de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80164e2:	9205      	str	r2, [sp, #20]
 80164e4:	4631      	mov	r1, r6
 80164e6:	4638      	mov	r0, r7
 80164e8:	4798      	blx	r3
 80164ea:	9a05      	ldr	r2, [sp, #20]
 80164ec:	2800      	cmp	r0, #0
 80164ee:	f43f af04 	beq.w	80162fa <_scanf_float+0x4a>
 80164f2:	e715      	b.n	8016320 <_scanf_float+0x70>
 80164f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164fc:	4632      	mov	r2, r6
 80164fe:	4638      	mov	r0, r7
 8016500:	4798      	blx	r3
 8016502:	6923      	ldr	r3, [r4, #16]
 8016504:	3b01      	subs	r3, #1
 8016506:	6123      	str	r3, [r4, #16]
 8016508:	e715      	b.n	8016336 <_scanf_float+0x86>
 801650a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801650e:	2b06      	cmp	r3, #6
 8016510:	d80a      	bhi.n	8016528 <_scanf_float+0x278>
 8016512:	f1bb 0f02 	cmp.w	fp, #2
 8016516:	d968      	bls.n	80165ea <_scanf_float+0x33a>
 8016518:	f1ab 0b03 	sub.w	fp, fp, #3
 801651c:	fa5f fb8b 	uxtb.w	fp, fp
 8016520:	eba5 0b0b 	sub.w	fp, r5, fp
 8016524:	455d      	cmp	r5, fp
 8016526:	d14b      	bne.n	80165c0 <_scanf_float+0x310>
 8016528:	6823      	ldr	r3, [r4, #0]
 801652a:	05da      	lsls	r2, r3, #23
 801652c:	d51f      	bpl.n	801656e <_scanf_float+0x2be>
 801652e:	055b      	lsls	r3, r3, #21
 8016530:	d468      	bmi.n	8016604 <_scanf_float+0x354>
 8016532:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016536:	6923      	ldr	r3, [r4, #16]
 8016538:	2965      	cmp	r1, #101	; 0x65
 801653a:	f103 33ff 	add.w	r3, r3, #4294967295
 801653e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016542:	6123      	str	r3, [r4, #16]
 8016544:	d00d      	beq.n	8016562 <_scanf_float+0x2b2>
 8016546:	2945      	cmp	r1, #69	; 0x45
 8016548:	d00b      	beq.n	8016562 <_scanf_float+0x2b2>
 801654a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801654e:	4632      	mov	r2, r6
 8016550:	4638      	mov	r0, r7
 8016552:	4798      	blx	r3
 8016554:	6923      	ldr	r3, [r4, #16]
 8016556:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801655a:	3b01      	subs	r3, #1
 801655c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016560:	6123      	str	r3, [r4, #16]
 8016562:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016566:	4632      	mov	r2, r6
 8016568:	4638      	mov	r0, r7
 801656a:	4798      	blx	r3
 801656c:	465d      	mov	r5, fp
 801656e:	6826      	ldr	r6, [r4, #0]
 8016570:	f016 0610 	ands.w	r6, r6, #16
 8016574:	d17a      	bne.n	801666c <_scanf_float+0x3bc>
 8016576:	702e      	strb	r6, [r5, #0]
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801657e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016582:	d142      	bne.n	801660a <_scanf_float+0x35a>
 8016584:	9b02      	ldr	r3, [sp, #8]
 8016586:	eba9 0303 	sub.w	r3, r9, r3
 801658a:	425a      	negs	r2, r3
 801658c:	2b00      	cmp	r3, #0
 801658e:	d149      	bne.n	8016624 <_scanf_float+0x374>
 8016590:	2200      	movs	r2, #0
 8016592:	4641      	mov	r1, r8
 8016594:	4638      	mov	r0, r7
 8016596:	f000 ff0b 	bl	80173b0 <_strtod_r>
 801659a:	6825      	ldr	r5, [r4, #0]
 801659c:	f8da 3000 	ldr.w	r3, [sl]
 80165a0:	f015 0f02 	tst.w	r5, #2
 80165a4:	f103 0204 	add.w	r2, r3, #4
 80165a8:	ec59 8b10 	vmov	r8, r9, d0
 80165ac:	f8ca 2000 	str.w	r2, [sl]
 80165b0:	d043      	beq.n	801663a <_scanf_float+0x38a>
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	e9c3 8900 	strd	r8, r9, [r3]
 80165b8:	68e3      	ldr	r3, [r4, #12]
 80165ba:	3301      	adds	r3, #1
 80165bc:	60e3      	str	r3, [r4, #12]
 80165be:	e6be      	b.n	801633e <_scanf_float+0x8e>
 80165c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165c8:	4632      	mov	r2, r6
 80165ca:	4638      	mov	r0, r7
 80165cc:	4798      	blx	r3
 80165ce:	6923      	ldr	r3, [r4, #16]
 80165d0:	3b01      	subs	r3, #1
 80165d2:	6123      	str	r3, [r4, #16]
 80165d4:	e7a6      	b.n	8016524 <_scanf_float+0x274>
 80165d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165de:	4632      	mov	r2, r6
 80165e0:	4638      	mov	r0, r7
 80165e2:	4798      	blx	r3
 80165e4:	6923      	ldr	r3, [r4, #16]
 80165e6:	3b01      	subs	r3, #1
 80165e8:	6123      	str	r3, [r4, #16]
 80165ea:	4545      	cmp	r5, r8
 80165ec:	d8f3      	bhi.n	80165d6 <_scanf_float+0x326>
 80165ee:	e6a5      	b.n	801633c <_scanf_float+0x8c>
 80165f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165f8:	4632      	mov	r2, r6
 80165fa:	4638      	mov	r0, r7
 80165fc:	4798      	blx	r3
 80165fe:	6923      	ldr	r3, [r4, #16]
 8016600:	3b01      	subs	r3, #1
 8016602:	6123      	str	r3, [r4, #16]
 8016604:	4545      	cmp	r5, r8
 8016606:	d8f3      	bhi.n	80165f0 <_scanf_float+0x340>
 8016608:	e698      	b.n	801633c <_scanf_float+0x8c>
 801660a:	9b03      	ldr	r3, [sp, #12]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d0bf      	beq.n	8016590 <_scanf_float+0x2e0>
 8016610:	9904      	ldr	r1, [sp, #16]
 8016612:	230a      	movs	r3, #10
 8016614:	4632      	mov	r2, r6
 8016616:	3101      	adds	r1, #1
 8016618:	4638      	mov	r0, r7
 801661a:	f000 ff55 	bl	80174c8 <_strtol_r>
 801661e:	9b03      	ldr	r3, [sp, #12]
 8016620:	9d04      	ldr	r5, [sp, #16]
 8016622:	1ac2      	subs	r2, r0, r3
 8016624:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016628:	429d      	cmp	r5, r3
 801662a:	bf28      	it	cs
 801662c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016630:	490f      	ldr	r1, [pc, #60]	; (8016670 <_scanf_float+0x3c0>)
 8016632:	4628      	mov	r0, r5
 8016634:	f000 f858 	bl	80166e8 <siprintf>
 8016638:	e7aa      	b.n	8016590 <_scanf_float+0x2e0>
 801663a:	f015 0504 	ands.w	r5, r5, #4
 801663e:	d1b8      	bne.n	80165b2 <_scanf_float+0x302>
 8016640:	681f      	ldr	r7, [r3, #0]
 8016642:	ee10 2a10 	vmov	r2, s0
 8016646:	464b      	mov	r3, r9
 8016648:	ee10 0a10 	vmov	r0, s0
 801664c:	4649      	mov	r1, r9
 801664e:	f7ea fa85 	bl	8000b5c <__aeabi_dcmpun>
 8016652:	b128      	cbz	r0, 8016660 <_scanf_float+0x3b0>
 8016654:	4628      	mov	r0, r5
 8016656:	f000 f80d 	bl	8016674 <nanf>
 801665a:	ed87 0a00 	vstr	s0, [r7]
 801665e:	e7ab      	b.n	80165b8 <_scanf_float+0x308>
 8016660:	4640      	mov	r0, r8
 8016662:	4649      	mov	r1, r9
 8016664:	f7ea fad8 	bl	8000c18 <__aeabi_d2f>
 8016668:	6038      	str	r0, [r7, #0]
 801666a:	e7a5      	b.n	80165b8 <_scanf_float+0x308>
 801666c:	2600      	movs	r6, #0
 801666e:	e666      	b.n	801633e <_scanf_float+0x8e>
 8016670:	0801a4b2 	.word	0x0801a4b2

08016674 <nanf>:
 8016674:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801667c <nanf+0x8>
 8016678:	4770      	bx	lr
 801667a:	bf00      	nop
 801667c:	7fc00000 	.word	0x7fc00000

08016680 <sniprintf>:
 8016680:	b40c      	push	{r2, r3}
 8016682:	b530      	push	{r4, r5, lr}
 8016684:	4b17      	ldr	r3, [pc, #92]	; (80166e4 <sniprintf+0x64>)
 8016686:	1e0c      	subs	r4, r1, #0
 8016688:	b09d      	sub	sp, #116	; 0x74
 801668a:	681d      	ldr	r5, [r3, #0]
 801668c:	da08      	bge.n	80166a0 <sniprintf+0x20>
 801668e:	238b      	movs	r3, #139	; 0x8b
 8016690:	602b      	str	r3, [r5, #0]
 8016692:	f04f 30ff 	mov.w	r0, #4294967295
 8016696:	b01d      	add	sp, #116	; 0x74
 8016698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801669c:	b002      	add	sp, #8
 801669e:	4770      	bx	lr
 80166a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80166a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166a8:	bf14      	ite	ne
 80166aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80166ae:	4623      	moveq	r3, r4
 80166b0:	9304      	str	r3, [sp, #16]
 80166b2:	9307      	str	r3, [sp, #28]
 80166b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166b8:	9002      	str	r0, [sp, #8]
 80166ba:	9006      	str	r0, [sp, #24]
 80166bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166c2:	ab21      	add	r3, sp, #132	; 0x84
 80166c4:	a902      	add	r1, sp, #8
 80166c6:	4628      	mov	r0, r5
 80166c8:	9301      	str	r3, [sp, #4]
 80166ca:	f002 fdf1 	bl	80192b0 <_svfiprintf_r>
 80166ce:	1c43      	adds	r3, r0, #1
 80166d0:	bfbc      	itt	lt
 80166d2:	238b      	movlt	r3, #139	; 0x8b
 80166d4:	602b      	strlt	r3, [r5, #0]
 80166d6:	2c00      	cmp	r4, #0
 80166d8:	d0dd      	beq.n	8016696 <sniprintf+0x16>
 80166da:	9b02      	ldr	r3, [sp, #8]
 80166dc:	2200      	movs	r2, #0
 80166de:	701a      	strb	r2, [r3, #0]
 80166e0:	e7d9      	b.n	8016696 <sniprintf+0x16>
 80166e2:	bf00      	nop
 80166e4:	2000000c 	.word	0x2000000c

080166e8 <siprintf>:
 80166e8:	b40e      	push	{r1, r2, r3}
 80166ea:	b500      	push	{lr}
 80166ec:	b09c      	sub	sp, #112	; 0x70
 80166ee:	ab1d      	add	r3, sp, #116	; 0x74
 80166f0:	9002      	str	r0, [sp, #8]
 80166f2:	9006      	str	r0, [sp, #24]
 80166f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80166f8:	4809      	ldr	r0, [pc, #36]	; (8016720 <siprintf+0x38>)
 80166fa:	9107      	str	r1, [sp, #28]
 80166fc:	9104      	str	r1, [sp, #16]
 80166fe:	4909      	ldr	r1, [pc, #36]	; (8016724 <siprintf+0x3c>)
 8016700:	f853 2b04 	ldr.w	r2, [r3], #4
 8016704:	9105      	str	r1, [sp, #20]
 8016706:	6800      	ldr	r0, [r0, #0]
 8016708:	9301      	str	r3, [sp, #4]
 801670a:	a902      	add	r1, sp, #8
 801670c:	f002 fdd0 	bl	80192b0 <_svfiprintf_r>
 8016710:	9b02      	ldr	r3, [sp, #8]
 8016712:	2200      	movs	r2, #0
 8016714:	701a      	strb	r2, [r3, #0]
 8016716:	b01c      	add	sp, #112	; 0x70
 8016718:	f85d eb04 	ldr.w	lr, [sp], #4
 801671c:	b003      	add	sp, #12
 801671e:	4770      	bx	lr
 8016720:	2000000c 	.word	0x2000000c
 8016724:	ffff0208 	.word	0xffff0208

08016728 <siscanf>:
 8016728:	b40e      	push	{r1, r2, r3}
 801672a:	b530      	push	{r4, r5, lr}
 801672c:	b09c      	sub	sp, #112	; 0x70
 801672e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016730:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016734:	f854 5b04 	ldr.w	r5, [r4], #4
 8016738:	f8ad 2014 	strh.w	r2, [sp, #20]
 801673c:	9002      	str	r0, [sp, #8]
 801673e:	9006      	str	r0, [sp, #24]
 8016740:	f7e9 fd5e 	bl	8000200 <strlen>
 8016744:	4b0b      	ldr	r3, [pc, #44]	; (8016774 <siscanf+0x4c>)
 8016746:	9003      	str	r0, [sp, #12]
 8016748:	9007      	str	r0, [sp, #28]
 801674a:	930b      	str	r3, [sp, #44]	; 0x2c
 801674c:	480a      	ldr	r0, [pc, #40]	; (8016778 <siscanf+0x50>)
 801674e:	9401      	str	r4, [sp, #4]
 8016750:	2300      	movs	r3, #0
 8016752:	930f      	str	r3, [sp, #60]	; 0x3c
 8016754:	9314      	str	r3, [sp, #80]	; 0x50
 8016756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801675a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801675e:	462a      	mov	r2, r5
 8016760:	4623      	mov	r3, r4
 8016762:	a902      	add	r1, sp, #8
 8016764:	6800      	ldr	r0, [r0, #0]
 8016766:	f002 fef5 	bl	8019554 <__ssvfiscanf_r>
 801676a:	b01c      	add	sp, #112	; 0x70
 801676c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016770:	b003      	add	sp, #12
 8016772:	4770      	bx	lr
 8016774:	0801677d 	.word	0x0801677d
 8016778:	2000000c 	.word	0x2000000c

0801677c <__seofread>:
 801677c:	2000      	movs	r0, #0
 801677e:	4770      	bx	lr

08016780 <strcpy>:
 8016780:	4603      	mov	r3, r0
 8016782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016786:	f803 2b01 	strb.w	r2, [r3], #1
 801678a:	2a00      	cmp	r2, #0
 801678c:	d1f9      	bne.n	8016782 <strcpy+0x2>
 801678e:	4770      	bx	lr

08016790 <sulp>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	4604      	mov	r4, r0
 8016794:	460d      	mov	r5, r1
 8016796:	ec45 4b10 	vmov	d0, r4, r5
 801679a:	4616      	mov	r6, r2
 801679c:	f002 fb44 	bl	8018e28 <__ulp>
 80167a0:	ec51 0b10 	vmov	r0, r1, d0
 80167a4:	b17e      	cbz	r6, 80167c6 <sulp+0x36>
 80167a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80167aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	dd09      	ble.n	80167c6 <sulp+0x36>
 80167b2:	051b      	lsls	r3, r3, #20
 80167b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80167b8:	2400      	movs	r4, #0
 80167ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80167be:	4622      	mov	r2, r4
 80167c0:	462b      	mov	r3, r5
 80167c2:	f7e9 ff31 	bl	8000628 <__aeabi_dmul>
 80167c6:	bd70      	pop	{r4, r5, r6, pc}

080167c8 <_strtod_l>:
 80167c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167cc:	461f      	mov	r7, r3
 80167ce:	b0a1      	sub	sp, #132	; 0x84
 80167d0:	2300      	movs	r3, #0
 80167d2:	4681      	mov	r9, r0
 80167d4:	4638      	mov	r0, r7
 80167d6:	460e      	mov	r6, r1
 80167d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80167da:	931c      	str	r3, [sp, #112]	; 0x70
 80167dc:	f002 f824 	bl	8018828 <__localeconv_l>
 80167e0:	4680      	mov	r8, r0
 80167e2:	6800      	ldr	r0, [r0, #0]
 80167e4:	f7e9 fd0c 	bl	8000200 <strlen>
 80167e8:	f04f 0a00 	mov.w	sl, #0
 80167ec:	4604      	mov	r4, r0
 80167ee:	f04f 0b00 	mov.w	fp, #0
 80167f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80167f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167f6:	781a      	ldrb	r2, [r3, #0]
 80167f8:	2a0d      	cmp	r2, #13
 80167fa:	d832      	bhi.n	8016862 <_strtod_l+0x9a>
 80167fc:	2a09      	cmp	r2, #9
 80167fe:	d236      	bcs.n	801686e <_strtod_l+0xa6>
 8016800:	2a00      	cmp	r2, #0
 8016802:	d03e      	beq.n	8016882 <_strtod_l+0xba>
 8016804:	2300      	movs	r3, #0
 8016806:	930d      	str	r3, [sp, #52]	; 0x34
 8016808:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801680a:	782b      	ldrb	r3, [r5, #0]
 801680c:	2b30      	cmp	r3, #48	; 0x30
 801680e:	f040 80ac 	bne.w	801696a <_strtod_l+0x1a2>
 8016812:	786b      	ldrb	r3, [r5, #1]
 8016814:	2b58      	cmp	r3, #88	; 0x58
 8016816:	d001      	beq.n	801681c <_strtod_l+0x54>
 8016818:	2b78      	cmp	r3, #120	; 0x78
 801681a:	d167      	bne.n	80168ec <_strtod_l+0x124>
 801681c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801681e:	9301      	str	r3, [sp, #4]
 8016820:	ab1c      	add	r3, sp, #112	; 0x70
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	9702      	str	r7, [sp, #8]
 8016826:	ab1d      	add	r3, sp, #116	; 0x74
 8016828:	4a88      	ldr	r2, [pc, #544]	; (8016a4c <_strtod_l+0x284>)
 801682a:	a91b      	add	r1, sp, #108	; 0x6c
 801682c:	4648      	mov	r0, r9
 801682e:	f001 fd12 	bl	8018256 <__gethex>
 8016832:	f010 0407 	ands.w	r4, r0, #7
 8016836:	4606      	mov	r6, r0
 8016838:	d005      	beq.n	8016846 <_strtod_l+0x7e>
 801683a:	2c06      	cmp	r4, #6
 801683c:	d12b      	bne.n	8016896 <_strtod_l+0xce>
 801683e:	3501      	adds	r5, #1
 8016840:	2300      	movs	r3, #0
 8016842:	951b      	str	r5, [sp, #108]	; 0x6c
 8016844:	930d      	str	r3, [sp, #52]	; 0x34
 8016846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016848:	2b00      	cmp	r3, #0
 801684a:	f040 859a 	bne.w	8017382 <_strtod_l+0xbba>
 801684e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016850:	b1e3      	cbz	r3, 801688c <_strtod_l+0xc4>
 8016852:	4652      	mov	r2, sl
 8016854:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016858:	ec43 2b10 	vmov	d0, r2, r3
 801685c:	b021      	add	sp, #132	; 0x84
 801685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016862:	2a2b      	cmp	r2, #43	; 0x2b
 8016864:	d015      	beq.n	8016892 <_strtod_l+0xca>
 8016866:	2a2d      	cmp	r2, #45	; 0x2d
 8016868:	d004      	beq.n	8016874 <_strtod_l+0xac>
 801686a:	2a20      	cmp	r2, #32
 801686c:	d1ca      	bne.n	8016804 <_strtod_l+0x3c>
 801686e:	3301      	adds	r3, #1
 8016870:	931b      	str	r3, [sp, #108]	; 0x6c
 8016872:	e7bf      	b.n	80167f4 <_strtod_l+0x2c>
 8016874:	2201      	movs	r2, #1
 8016876:	920d      	str	r2, [sp, #52]	; 0x34
 8016878:	1c5a      	adds	r2, r3, #1
 801687a:	921b      	str	r2, [sp, #108]	; 0x6c
 801687c:	785b      	ldrb	r3, [r3, #1]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d1c2      	bne.n	8016808 <_strtod_l+0x40>
 8016882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016884:	961b      	str	r6, [sp, #108]	; 0x6c
 8016886:	2b00      	cmp	r3, #0
 8016888:	f040 8579 	bne.w	801737e <_strtod_l+0xbb6>
 801688c:	4652      	mov	r2, sl
 801688e:	465b      	mov	r3, fp
 8016890:	e7e2      	b.n	8016858 <_strtod_l+0x90>
 8016892:	2200      	movs	r2, #0
 8016894:	e7ef      	b.n	8016876 <_strtod_l+0xae>
 8016896:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016898:	b13a      	cbz	r2, 80168aa <_strtod_l+0xe2>
 801689a:	2135      	movs	r1, #53	; 0x35
 801689c:	a81e      	add	r0, sp, #120	; 0x78
 801689e:	f002 fbbb 	bl	8019018 <__copybits>
 80168a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80168a4:	4648      	mov	r0, r9
 80168a6:	f002 f828 	bl	80188fa <_Bfree>
 80168aa:	3c01      	subs	r4, #1
 80168ac:	2c04      	cmp	r4, #4
 80168ae:	d806      	bhi.n	80168be <_strtod_l+0xf6>
 80168b0:	e8df f004 	tbb	[pc, r4]
 80168b4:	1714030a 	.word	0x1714030a
 80168b8:	0a          	.byte	0x0a
 80168b9:	00          	.byte	0x00
 80168ba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80168be:	0730      	lsls	r0, r6, #28
 80168c0:	d5c1      	bpl.n	8016846 <_strtod_l+0x7e>
 80168c2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80168c6:	e7be      	b.n	8016846 <_strtod_l+0x7e>
 80168c8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80168cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80168ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80168d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80168d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80168da:	e7f0      	b.n	80168be <_strtod_l+0xf6>
 80168dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016a50 <_strtod_l+0x288>
 80168e0:	e7ed      	b.n	80168be <_strtod_l+0xf6>
 80168e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80168e6:	f04f 3aff 	mov.w	sl, #4294967295
 80168ea:	e7e8      	b.n	80168be <_strtod_l+0xf6>
 80168ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ee:	1c5a      	adds	r2, r3, #1
 80168f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80168f2:	785b      	ldrb	r3, [r3, #1]
 80168f4:	2b30      	cmp	r3, #48	; 0x30
 80168f6:	d0f9      	beq.n	80168ec <_strtod_l+0x124>
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d0a4      	beq.n	8016846 <_strtod_l+0x7e>
 80168fc:	2301      	movs	r3, #1
 80168fe:	2500      	movs	r5, #0
 8016900:	9306      	str	r3, [sp, #24]
 8016902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016904:	9308      	str	r3, [sp, #32]
 8016906:	9507      	str	r5, [sp, #28]
 8016908:	9505      	str	r5, [sp, #20]
 801690a:	220a      	movs	r2, #10
 801690c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801690e:	7807      	ldrb	r7, [r0, #0]
 8016910:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016914:	b2d9      	uxtb	r1, r3
 8016916:	2909      	cmp	r1, #9
 8016918:	d929      	bls.n	801696e <_strtod_l+0x1a6>
 801691a:	4622      	mov	r2, r4
 801691c:	f8d8 1000 	ldr.w	r1, [r8]
 8016920:	f003 f902 	bl	8019b28 <strncmp>
 8016924:	2800      	cmp	r0, #0
 8016926:	d031      	beq.n	801698c <_strtod_l+0x1c4>
 8016928:	2000      	movs	r0, #0
 801692a:	9c05      	ldr	r4, [sp, #20]
 801692c:	9004      	str	r0, [sp, #16]
 801692e:	463b      	mov	r3, r7
 8016930:	4602      	mov	r2, r0
 8016932:	2b65      	cmp	r3, #101	; 0x65
 8016934:	d001      	beq.n	801693a <_strtod_l+0x172>
 8016936:	2b45      	cmp	r3, #69	; 0x45
 8016938:	d114      	bne.n	8016964 <_strtod_l+0x19c>
 801693a:	b924      	cbnz	r4, 8016946 <_strtod_l+0x17e>
 801693c:	b910      	cbnz	r0, 8016944 <_strtod_l+0x17c>
 801693e:	9b06      	ldr	r3, [sp, #24]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d09e      	beq.n	8016882 <_strtod_l+0xba>
 8016944:	2400      	movs	r4, #0
 8016946:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016948:	1c73      	adds	r3, r6, #1
 801694a:	931b      	str	r3, [sp, #108]	; 0x6c
 801694c:	7873      	ldrb	r3, [r6, #1]
 801694e:	2b2b      	cmp	r3, #43	; 0x2b
 8016950:	d078      	beq.n	8016a44 <_strtod_l+0x27c>
 8016952:	2b2d      	cmp	r3, #45	; 0x2d
 8016954:	d070      	beq.n	8016a38 <_strtod_l+0x270>
 8016956:	f04f 0c00 	mov.w	ip, #0
 801695a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801695e:	2f09      	cmp	r7, #9
 8016960:	d97c      	bls.n	8016a5c <_strtod_l+0x294>
 8016962:	961b      	str	r6, [sp, #108]	; 0x6c
 8016964:	f04f 0e00 	mov.w	lr, #0
 8016968:	e09a      	b.n	8016aa0 <_strtod_l+0x2d8>
 801696a:	2300      	movs	r3, #0
 801696c:	e7c7      	b.n	80168fe <_strtod_l+0x136>
 801696e:	9905      	ldr	r1, [sp, #20]
 8016970:	2908      	cmp	r1, #8
 8016972:	bfdd      	ittte	le
 8016974:	9907      	ldrle	r1, [sp, #28]
 8016976:	fb02 3301 	mlale	r3, r2, r1, r3
 801697a:	9307      	strle	r3, [sp, #28]
 801697c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016980:	9b05      	ldr	r3, [sp, #20]
 8016982:	3001      	adds	r0, #1
 8016984:	3301      	adds	r3, #1
 8016986:	9305      	str	r3, [sp, #20]
 8016988:	901b      	str	r0, [sp, #108]	; 0x6c
 801698a:	e7bf      	b.n	801690c <_strtod_l+0x144>
 801698c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801698e:	191a      	adds	r2, r3, r4
 8016990:	921b      	str	r2, [sp, #108]	; 0x6c
 8016992:	9a05      	ldr	r2, [sp, #20]
 8016994:	5d1b      	ldrb	r3, [r3, r4]
 8016996:	2a00      	cmp	r2, #0
 8016998:	d037      	beq.n	8016a0a <_strtod_l+0x242>
 801699a:	9c05      	ldr	r4, [sp, #20]
 801699c:	4602      	mov	r2, r0
 801699e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80169a2:	2909      	cmp	r1, #9
 80169a4:	d913      	bls.n	80169ce <_strtod_l+0x206>
 80169a6:	2101      	movs	r1, #1
 80169a8:	9104      	str	r1, [sp, #16]
 80169aa:	e7c2      	b.n	8016932 <_strtod_l+0x16a>
 80169ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169ae:	1c5a      	adds	r2, r3, #1
 80169b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80169b2:	785b      	ldrb	r3, [r3, #1]
 80169b4:	3001      	adds	r0, #1
 80169b6:	2b30      	cmp	r3, #48	; 0x30
 80169b8:	d0f8      	beq.n	80169ac <_strtod_l+0x1e4>
 80169ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80169be:	2a08      	cmp	r2, #8
 80169c0:	f200 84e4 	bhi.w	801738c <_strtod_l+0xbc4>
 80169c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169c6:	9208      	str	r2, [sp, #32]
 80169c8:	4602      	mov	r2, r0
 80169ca:	2000      	movs	r0, #0
 80169cc:	4604      	mov	r4, r0
 80169ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80169d2:	f100 0101 	add.w	r1, r0, #1
 80169d6:	d012      	beq.n	80169fe <_strtod_l+0x236>
 80169d8:	440a      	add	r2, r1
 80169da:	eb00 0c04 	add.w	ip, r0, r4
 80169de:	4621      	mov	r1, r4
 80169e0:	270a      	movs	r7, #10
 80169e2:	458c      	cmp	ip, r1
 80169e4:	d113      	bne.n	8016a0e <_strtod_l+0x246>
 80169e6:	1821      	adds	r1, r4, r0
 80169e8:	2908      	cmp	r1, #8
 80169ea:	f104 0401 	add.w	r4, r4, #1
 80169ee:	4404      	add	r4, r0
 80169f0:	dc19      	bgt.n	8016a26 <_strtod_l+0x25e>
 80169f2:	9b07      	ldr	r3, [sp, #28]
 80169f4:	210a      	movs	r1, #10
 80169f6:	fb01 e303 	mla	r3, r1, r3, lr
 80169fa:	9307      	str	r3, [sp, #28]
 80169fc:	2100      	movs	r1, #0
 80169fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a00:	1c58      	adds	r0, r3, #1
 8016a02:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a04:	785b      	ldrb	r3, [r3, #1]
 8016a06:	4608      	mov	r0, r1
 8016a08:	e7c9      	b.n	801699e <_strtod_l+0x1d6>
 8016a0a:	9805      	ldr	r0, [sp, #20]
 8016a0c:	e7d3      	b.n	80169b6 <_strtod_l+0x1ee>
 8016a0e:	2908      	cmp	r1, #8
 8016a10:	f101 0101 	add.w	r1, r1, #1
 8016a14:	dc03      	bgt.n	8016a1e <_strtod_l+0x256>
 8016a16:	9b07      	ldr	r3, [sp, #28]
 8016a18:	437b      	muls	r3, r7
 8016a1a:	9307      	str	r3, [sp, #28]
 8016a1c:	e7e1      	b.n	80169e2 <_strtod_l+0x21a>
 8016a1e:	2910      	cmp	r1, #16
 8016a20:	bfd8      	it	le
 8016a22:	437d      	mulle	r5, r7
 8016a24:	e7dd      	b.n	80169e2 <_strtod_l+0x21a>
 8016a26:	2c10      	cmp	r4, #16
 8016a28:	bfdc      	itt	le
 8016a2a:	210a      	movle	r1, #10
 8016a2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016a30:	e7e4      	b.n	80169fc <_strtod_l+0x234>
 8016a32:	2301      	movs	r3, #1
 8016a34:	9304      	str	r3, [sp, #16]
 8016a36:	e781      	b.n	801693c <_strtod_l+0x174>
 8016a38:	f04f 0c01 	mov.w	ip, #1
 8016a3c:	1cb3      	adds	r3, r6, #2
 8016a3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a40:	78b3      	ldrb	r3, [r6, #2]
 8016a42:	e78a      	b.n	801695a <_strtod_l+0x192>
 8016a44:	f04f 0c00 	mov.w	ip, #0
 8016a48:	e7f8      	b.n	8016a3c <_strtod_l+0x274>
 8016a4a:	bf00      	nop
 8016a4c:	0801a4b8 	.word	0x0801a4b8
 8016a50:	7ff00000 	.word	0x7ff00000
 8016a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a56:	1c5f      	adds	r7, r3, #1
 8016a58:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a5a:	785b      	ldrb	r3, [r3, #1]
 8016a5c:	2b30      	cmp	r3, #48	; 0x30
 8016a5e:	d0f9      	beq.n	8016a54 <_strtod_l+0x28c>
 8016a60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016a64:	2f08      	cmp	r7, #8
 8016a66:	f63f af7d 	bhi.w	8016964 <_strtod_l+0x19c>
 8016a6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a70:	930a      	str	r3, [sp, #40]	; 0x28
 8016a72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a74:	1c5f      	adds	r7, r3, #1
 8016a76:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a78:	785b      	ldrb	r3, [r3, #1]
 8016a7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016a7e:	f1b8 0f09 	cmp.w	r8, #9
 8016a82:	d937      	bls.n	8016af4 <_strtod_l+0x32c>
 8016a84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a86:	1a7f      	subs	r7, r7, r1
 8016a88:	2f08      	cmp	r7, #8
 8016a8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016a8e:	dc37      	bgt.n	8016b00 <_strtod_l+0x338>
 8016a90:	45be      	cmp	lr, r7
 8016a92:	bfa8      	it	ge
 8016a94:	46be      	movge	lr, r7
 8016a96:	f1bc 0f00 	cmp.w	ip, #0
 8016a9a:	d001      	beq.n	8016aa0 <_strtod_l+0x2d8>
 8016a9c:	f1ce 0e00 	rsb	lr, lr, #0
 8016aa0:	2c00      	cmp	r4, #0
 8016aa2:	d151      	bne.n	8016b48 <_strtod_l+0x380>
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	f47f aece 	bne.w	8016846 <_strtod_l+0x7e>
 8016aaa:	9a06      	ldr	r2, [sp, #24]
 8016aac:	2a00      	cmp	r2, #0
 8016aae:	f47f aeca 	bne.w	8016846 <_strtod_l+0x7e>
 8016ab2:	9a04      	ldr	r2, [sp, #16]
 8016ab4:	2a00      	cmp	r2, #0
 8016ab6:	f47f aee4 	bne.w	8016882 <_strtod_l+0xba>
 8016aba:	2b4e      	cmp	r3, #78	; 0x4e
 8016abc:	d027      	beq.n	8016b0e <_strtod_l+0x346>
 8016abe:	dc21      	bgt.n	8016b04 <_strtod_l+0x33c>
 8016ac0:	2b49      	cmp	r3, #73	; 0x49
 8016ac2:	f47f aede 	bne.w	8016882 <_strtod_l+0xba>
 8016ac6:	49a0      	ldr	r1, [pc, #640]	; (8016d48 <_strtod_l+0x580>)
 8016ac8:	a81b      	add	r0, sp, #108	; 0x6c
 8016aca:	f001 fdf7 	bl	80186bc <__match>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	f43f aed7 	beq.w	8016882 <_strtod_l+0xba>
 8016ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ad6:	499d      	ldr	r1, [pc, #628]	; (8016d4c <_strtod_l+0x584>)
 8016ad8:	3b01      	subs	r3, #1
 8016ada:	a81b      	add	r0, sp, #108	; 0x6c
 8016adc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ade:	f001 fded 	bl	80186bc <__match>
 8016ae2:	b910      	cbnz	r0, 8016aea <_strtod_l+0x322>
 8016ae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016aea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016d60 <_strtod_l+0x598>
 8016aee:	f04f 0a00 	mov.w	sl, #0
 8016af2:	e6a8      	b.n	8016846 <_strtod_l+0x7e>
 8016af4:	210a      	movs	r1, #10
 8016af6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016afa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016afe:	e7b8      	b.n	8016a72 <_strtod_l+0x2aa>
 8016b00:	46be      	mov	lr, r7
 8016b02:	e7c8      	b.n	8016a96 <_strtod_l+0x2ce>
 8016b04:	2b69      	cmp	r3, #105	; 0x69
 8016b06:	d0de      	beq.n	8016ac6 <_strtod_l+0x2fe>
 8016b08:	2b6e      	cmp	r3, #110	; 0x6e
 8016b0a:	f47f aeba 	bne.w	8016882 <_strtod_l+0xba>
 8016b0e:	4990      	ldr	r1, [pc, #576]	; (8016d50 <_strtod_l+0x588>)
 8016b10:	a81b      	add	r0, sp, #108	; 0x6c
 8016b12:	f001 fdd3 	bl	80186bc <__match>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	f43f aeb3 	beq.w	8016882 <_strtod_l+0xba>
 8016b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	2b28      	cmp	r3, #40	; 0x28
 8016b22:	d10e      	bne.n	8016b42 <_strtod_l+0x37a>
 8016b24:	aa1e      	add	r2, sp, #120	; 0x78
 8016b26:	498b      	ldr	r1, [pc, #556]	; (8016d54 <_strtod_l+0x58c>)
 8016b28:	a81b      	add	r0, sp, #108	; 0x6c
 8016b2a:	f001 fddb 	bl	80186e4 <__hexnan>
 8016b2e:	2805      	cmp	r0, #5
 8016b30:	d107      	bne.n	8016b42 <_strtod_l+0x37a>
 8016b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016b38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016b3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016b40:	e681      	b.n	8016846 <_strtod_l+0x7e>
 8016b42:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016d68 <_strtod_l+0x5a0>
 8016b46:	e7d2      	b.n	8016aee <_strtod_l+0x326>
 8016b48:	ebae 0302 	sub.w	r3, lr, r2
 8016b4c:	9306      	str	r3, [sp, #24]
 8016b4e:	9b05      	ldr	r3, [sp, #20]
 8016b50:	9807      	ldr	r0, [sp, #28]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	bf08      	it	eq
 8016b56:	4623      	moveq	r3, r4
 8016b58:	2c10      	cmp	r4, #16
 8016b5a:	9305      	str	r3, [sp, #20]
 8016b5c:	46a0      	mov	r8, r4
 8016b5e:	bfa8      	it	ge
 8016b60:	f04f 0810 	movge.w	r8, #16
 8016b64:	f7e9 fce6 	bl	8000534 <__aeabi_ui2d>
 8016b68:	2c09      	cmp	r4, #9
 8016b6a:	4682      	mov	sl, r0
 8016b6c:	468b      	mov	fp, r1
 8016b6e:	dc13      	bgt.n	8016b98 <_strtod_l+0x3d0>
 8016b70:	9b06      	ldr	r3, [sp, #24]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	f43f ae67 	beq.w	8016846 <_strtod_l+0x7e>
 8016b78:	9b06      	ldr	r3, [sp, #24]
 8016b7a:	dd7a      	ble.n	8016c72 <_strtod_l+0x4aa>
 8016b7c:	2b16      	cmp	r3, #22
 8016b7e:	dc61      	bgt.n	8016c44 <_strtod_l+0x47c>
 8016b80:	4a75      	ldr	r2, [pc, #468]	; (8016d58 <_strtod_l+0x590>)
 8016b82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016b86:	e9de 0100 	ldrd	r0, r1, [lr]
 8016b8a:	4652      	mov	r2, sl
 8016b8c:	465b      	mov	r3, fp
 8016b8e:	f7e9 fd4b 	bl	8000628 <__aeabi_dmul>
 8016b92:	4682      	mov	sl, r0
 8016b94:	468b      	mov	fp, r1
 8016b96:	e656      	b.n	8016846 <_strtod_l+0x7e>
 8016b98:	4b6f      	ldr	r3, [pc, #444]	; (8016d58 <_strtod_l+0x590>)
 8016b9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016b9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ba2:	f7e9 fd41 	bl	8000628 <__aeabi_dmul>
 8016ba6:	4606      	mov	r6, r0
 8016ba8:	4628      	mov	r0, r5
 8016baa:	460f      	mov	r7, r1
 8016bac:	f7e9 fcc2 	bl	8000534 <__aeabi_ui2d>
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	4639      	mov	r1, r7
 8016bb8:	f7e9 fb80 	bl	80002bc <__adddf3>
 8016bbc:	2c0f      	cmp	r4, #15
 8016bbe:	4682      	mov	sl, r0
 8016bc0:	468b      	mov	fp, r1
 8016bc2:	ddd5      	ble.n	8016b70 <_strtod_l+0x3a8>
 8016bc4:	9b06      	ldr	r3, [sp, #24]
 8016bc6:	eba4 0808 	sub.w	r8, r4, r8
 8016bca:	4498      	add	r8, r3
 8016bcc:	f1b8 0f00 	cmp.w	r8, #0
 8016bd0:	f340 8096 	ble.w	8016d00 <_strtod_l+0x538>
 8016bd4:	f018 030f 	ands.w	r3, r8, #15
 8016bd8:	d00a      	beq.n	8016bf0 <_strtod_l+0x428>
 8016bda:	495f      	ldr	r1, [pc, #380]	; (8016d58 <_strtod_l+0x590>)
 8016bdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016be0:	4652      	mov	r2, sl
 8016be2:	465b      	mov	r3, fp
 8016be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016be8:	f7e9 fd1e 	bl	8000628 <__aeabi_dmul>
 8016bec:	4682      	mov	sl, r0
 8016bee:	468b      	mov	fp, r1
 8016bf0:	f038 080f 	bics.w	r8, r8, #15
 8016bf4:	d073      	beq.n	8016cde <_strtod_l+0x516>
 8016bf6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016bfa:	dd47      	ble.n	8016c8c <_strtod_l+0x4c4>
 8016bfc:	2400      	movs	r4, #0
 8016bfe:	46a0      	mov	r8, r4
 8016c00:	9407      	str	r4, [sp, #28]
 8016c02:	9405      	str	r4, [sp, #20]
 8016c04:	2322      	movs	r3, #34	; 0x22
 8016c06:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016d60 <_strtod_l+0x598>
 8016c0a:	f8c9 3000 	str.w	r3, [r9]
 8016c0e:	f04f 0a00 	mov.w	sl, #0
 8016c12:	9b07      	ldr	r3, [sp, #28]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f43f ae16 	beq.w	8016846 <_strtod_l+0x7e>
 8016c1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c1c:	4648      	mov	r0, r9
 8016c1e:	f001 fe6c 	bl	80188fa <_Bfree>
 8016c22:	9905      	ldr	r1, [sp, #20]
 8016c24:	4648      	mov	r0, r9
 8016c26:	f001 fe68 	bl	80188fa <_Bfree>
 8016c2a:	4641      	mov	r1, r8
 8016c2c:	4648      	mov	r0, r9
 8016c2e:	f001 fe64 	bl	80188fa <_Bfree>
 8016c32:	9907      	ldr	r1, [sp, #28]
 8016c34:	4648      	mov	r0, r9
 8016c36:	f001 fe60 	bl	80188fa <_Bfree>
 8016c3a:	4621      	mov	r1, r4
 8016c3c:	4648      	mov	r0, r9
 8016c3e:	f001 fe5c 	bl	80188fa <_Bfree>
 8016c42:	e600      	b.n	8016846 <_strtod_l+0x7e>
 8016c44:	9a06      	ldr	r2, [sp, #24]
 8016c46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	dbba      	blt.n	8016bc4 <_strtod_l+0x3fc>
 8016c4e:	4d42      	ldr	r5, [pc, #264]	; (8016d58 <_strtod_l+0x590>)
 8016c50:	f1c4 040f 	rsb	r4, r4, #15
 8016c54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016c58:	4652      	mov	r2, sl
 8016c5a:	465b      	mov	r3, fp
 8016c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c60:	f7e9 fce2 	bl	8000628 <__aeabi_dmul>
 8016c64:	9b06      	ldr	r3, [sp, #24]
 8016c66:	1b1c      	subs	r4, r3, r4
 8016c68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016c6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c70:	e78d      	b.n	8016b8e <_strtod_l+0x3c6>
 8016c72:	f113 0f16 	cmn.w	r3, #22
 8016c76:	dba5      	blt.n	8016bc4 <_strtod_l+0x3fc>
 8016c78:	4a37      	ldr	r2, [pc, #220]	; (8016d58 <_strtod_l+0x590>)
 8016c7a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016c7e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016c82:	4650      	mov	r0, sl
 8016c84:	4659      	mov	r1, fp
 8016c86:	f7e9 fdf9 	bl	800087c <__aeabi_ddiv>
 8016c8a:	e782      	b.n	8016b92 <_strtod_l+0x3ca>
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	4e33      	ldr	r6, [pc, #204]	; (8016d5c <_strtod_l+0x594>)
 8016c90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016c94:	4650      	mov	r0, sl
 8016c96:	4659      	mov	r1, fp
 8016c98:	461d      	mov	r5, r3
 8016c9a:	f1b8 0f01 	cmp.w	r8, #1
 8016c9e:	dc21      	bgt.n	8016ce4 <_strtod_l+0x51c>
 8016ca0:	b10b      	cbz	r3, 8016ca6 <_strtod_l+0x4de>
 8016ca2:	4682      	mov	sl, r0
 8016ca4:	468b      	mov	fp, r1
 8016ca6:	4b2d      	ldr	r3, [pc, #180]	; (8016d5c <_strtod_l+0x594>)
 8016ca8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016cac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016cb0:	4652      	mov	r2, sl
 8016cb2:	465b      	mov	r3, fp
 8016cb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016cb8:	f7e9 fcb6 	bl	8000628 <__aeabi_dmul>
 8016cbc:	4b28      	ldr	r3, [pc, #160]	; (8016d60 <_strtod_l+0x598>)
 8016cbe:	460a      	mov	r2, r1
 8016cc0:	400b      	ands	r3, r1
 8016cc2:	4928      	ldr	r1, [pc, #160]	; (8016d64 <_strtod_l+0x59c>)
 8016cc4:	428b      	cmp	r3, r1
 8016cc6:	4682      	mov	sl, r0
 8016cc8:	d898      	bhi.n	8016bfc <_strtod_l+0x434>
 8016cca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016cce:	428b      	cmp	r3, r1
 8016cd0:	bf86      	itte	hi
 8016cd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016d6c <_strtod_l+0x5a4>
 8016cd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016cda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016cde:	2300      	movs	r3, #0
 8016ce0:	9304      	str	r3, [sp, #16]
 8016ce2:	e077      	b.n	8016dd4 <_strtod_l+0x60c>
 8016ce4:	f018 0f01 	tst.w	r8, #1
 8016ce8:	d006      	beq.n	8016cf8 <_strtod_l+0x530>
 8016cea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf2:	f7e9 fc99 	bl	8000628 <__aeabi_dmul>
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	3501      	adds	r5, #1
 8016cfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016cfe:	e7cc      	b.n	8016c9a <_strtod_l+0x4d2>
 8016d00:	d0ed      	beq.n	8016cde <_strtod_l+0x516>
 8016d02:	f1c8 0800 	rsb	r8, r8, #0
 8016d06:	f018 020f 	ands.w	r2, r8, #15
 8016d0a:	d00a      	beq.n	8016d22 <_strtod_l+0x55a>
 8016d0c:	4b12      	ldr	r3, [pc, #72]	; (8016d58 <_strtod_l+0x590>)
 8016d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d12:	4650      	mov	r0, sl
 8016d14:	4659      	mov	r1, fp
 8016d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d1a:	f7e9 fdaf 	bl	800087c <__aeabi_ddiv>
 8016d1e:	4682      	mov	sl, r0
 8016d20:	468b      	mov	fp, r1
 8016d22:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016d26:	d0da      	beq.n	8016cde <_strtod_l+0x516>
 8016d28:	f1b8 0f1f 	cmp.w	r8, #31
 8016d2c:	dd20      	ble.n	8016d70 <_strtod_l+0x5a8>
 8016d2e:	2400      	movs	r4, #0
 8016d30:	46a0      	mov	r8, r4
 8016d32:	9407      	str	r4, [sp, #28]
 8016d34:	9405      	str	r4, [sp, #20]
 8016d36:	2322      	movs	r3, #34	; 0x22
 8016d38:	f04f 0a00 	mov.w	sl, #0
 8016d3c:	f04f 0b00 	mov.w	fp, #0
 8016d40:	f8c9 3000 	str.w	r3, [r9]
 8016d44:	e765      	b.n	8016c12 <_strtod_l+0x44a>
 8016d46:	bf00      	nop
 8016d48:	0801a485 	.word	0x0801a485
 8016d4c:	0801a50b 	.word	0x0801a50b
 8016d50:	0801a48d 	.word	0x0801a48d
 8016d54:	0801a4cc 	.word	0x0801a4cc
 8016d58:	0801a548 	.word	0x0801a548
 8016d5c:	0801a520 	.word	0x0801a520
 8016d60:	7ff00000 	.word	0x7ff00000
 8016d64:	7ca00000 	.word	0x7ca00000
 8016d68:	fff80000 	.word	0xfff80000
 8016d6c:	7fefffff 	.word	0x7fefffff
 8016d70:	f018 0310 	ands.w	r3, r8, #16
 8016d74:	bf18      	it	ne
 8016d76:	236a      	movne	r3, #106	; 0x6a
 8016d78:	4da0      	ldr	r5, [pc, #640]	; (8016ffc <_strtod_l+0x834>)
 8016d7a:	9304      	str	r3, [sp, #16]
 8016d7c:	4650      	mov	r0, sl
 8016d7e:	4659      	mov	r1, fp
 8016d80:	2300      	movs	r3, #0
 8016d82:	f1b8 0f00 	cmp.w	r8, #0
 8016d86:	f300 810a 	bgt.w	8016f9e <_strtod_l+0x7d6>
 8016d8a:	b10b      	cbz	r3, 8016d90 <_strtod_l+0x5c8>
 8016d8c:	4682      	mov	sl, r0
 8016d8e:	468b      	mov	fp, r1
 8016d90:	9b04      	ldr	r3, [sp, #16]
 8016d92:	b1bb      	cbz	r3, 8016dc4 <_strtod_l+0x5fc>
 8016d94:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016d98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	4659      	mov	r1, fp
 8016da0:	dd10      	ble.n	8016dc4 <_strtod_l+0x5fc>
 8016da2:	2b1f      	cmp	r3, #31
 8016da4:	f340 8107 	ble.w	8016fb6 <_strtod_l+0x7ee>
 8016da8:	2b34      	cmp	r3, #52	; 0x34
 8016daa:	bfde      	ittt	le
 8016dac:	3b20      	suble	r3, #32
 8016dae:	f04f 32ff 	movle.w	r2, #4294967295
 8016db2:	fa02 f303 	lslle.w	r3, r2, r3
 8016db6:	f04f 0a00 	mov.w	sl, #0
 8016dba:	bfcc      	ite	gt
 8016dbc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016dc0:	ea03 0b01 	andle.w	fp, r3, r1
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	4650      	mov	r0, sl
 8016dca:	4659      	mov	r1, fp
 8016dcc:	f7e9 fe94 	bl	8000af8 <__aeabi_dcmpeq>
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	d1ac      	bne.n	8016d2e <_strtod_l+0x566>
 8016dd4:	9b07      	ldr	r3, [sp, #28]
 8016dd6:	9300      	str	r3, [sp, #0]
 8016dd8:	9a05      	ldr	r2, [sp, #20]
 8016dda:	9908      	ldr	r1, [sp, #32]
 8016ddc:	4623      	mov	r3, r4
 8016dde:	4648      	mov	r0, r9
 8016de0:	f001 fddd 	bl	801899e <__s2b>
 8016de4:	9007      	str	r0, [sp, #28]
 8016de6:	2800      	cmp	r0, #0
 8016de8:	f43f af08 	beq.w	8016bfc <_strtod_l+0x434>
 8016dec:	9a06      	ldr	r2, [sp, #24]
 8016dee:	9b06      	ldr	r3, [sp, #24]
 8016df0:	2a00      	cmp	r2, #0
 8016df2:	f1c3 0300 	rsb	r3, r3, #0
 8016df6:	bfa8      	it	ge
 8016df8:	2300      	movge	r3, #0
 8016dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8016dfc:	2400      	movs	r4, #0
 8016dfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016e02:	9316      	str	r3, [sp, #88]	; 0x58
 8016e04:	46a0      	mov	r8, r4
 8016e06:	9b07      	ldr	r3, [sp, #28]
 8016e08:	4648      	mov	r0, r9
 8016e0a:	6859      	ldr	r1, [r3, #4]
 8016e0c:	f001 fd41 	bl	8018892 <_Balloc>
 8016e10:	9005      	str	r0, [sp, #20]
 8016e12:	2800      	cmp	r0, #0
 8016e14:	f43f aef6 	beq.w	8016c04 <_strtod_l+0x43c>
 8016e18:	9b07      	ldr	r3, [sp, #28]
 8016e1a:	691a      	ldr	r2, [r3, #16]
 8016e1c:	3202      	adds	r2, #2
 8016e1e:	f103 010c 	add.w	r1, r3, #12
 8016e22:	0092      	lsls	r2, r2, #2
 8016e24:	300c      	adds	r0, #12
 8016e26:	f001 fd29 	bl	801887c <memcpy>
 8016e2a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e2c:	a91d      	add	r1, sp, #116	; 0x74
 8016e2e:	ec4b ab10 	vmov	d0, sl, fp
 8016e32:	4648      	mov	r0, r9
 8016e34:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016e38:	f002 f86c 	bl	8018f14 <__d2b>
 8016e3c:	901c      	str	r0, [sp, #112]	; 0x70
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	f43f aee0 	beq.w	8016c04 <_strtod_l+0x43c>
 8016e44:	2101      	movs	r1, #1
 8016e46:	4648      	mov	r0, r9
 8016e48:	f001 fe35 	bl	8018ab6 <__i2b>
 8016e4c:	4680      	mov	r8, r0
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	f43f aed8 	beq.w	8016c04 <_strtod_l+0x43c>
 8016e54:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016e56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e58:	2e00      	cmp	r6, #0
 8016e5a:	bfab      	itete	ge
 8016e5c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016e5e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016e60:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016e62:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016e64:	bfac      	ite	ge
 8016e66:	18f7      	addge	r7, r6, r3
 8016e68:	1b9d      	sublt	r5, r3, r6
 8016e6a:	9b04      	ldr	r3, [sp, #16]
 8016e6c:	1af6      	subs	r6, r6, r3
 8016e6e:	4416      	add	r6, r2
 8016e70:	4b63      	ldr	r3, [pc, #396]	; (8017000 <_strtod_l+0x838>)
 8016e72:	3e01      	subs	r6, #1
 8016e74:	429e      	cmp	r6, r3
 8016e76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016e7a:	f280 80af 	bge.w	8016fdc <_strtod_l+0x814>
 8016e7e:	1b9b      	subs	r3, r3, r6
 8016e80:	2b1f      	cmp	r3, #31
 8016e82:	eba2 0203 	sub.w	r2, r2, r3
 8016e86:	f04f 0101 	mov.w	r1, #1
 8016e8a:	f300 809b 	bgt.w	8016fc4 <_strtod_l+0x7fc>
 8016e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8016e92:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e94:	2300      	movs	r3, #0
 8016e96:	930a      	str	r3, [sp, #40]	; 0x28
 8016e98:	18be      	adds	r6, r7, r2
 8016e9a:	9b04      	ldr	r3, [sp, #16]
 8016e9c:	42b7      	cmp	r7, r6
 8016e9e:	4415      	add	r5, r2
 8016ea0:	441d      	add	r5, r3
 8016ea2:	463b      	mov	r3, r7
 8016ea4:	bfa8      	it	ge
 8016ea6:	4633      	movge	r3, r6
 8016ea8:	42ab      	cmp	r3, r5
 8016eaa:	bfa8      	it	ge
 8016eac:	462b      	movge	r3, r5
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	bfc2      	ittt	gt
 8016eb2:	1af6      	subgt	r6, r6, r3
 8016eb4:	1aed      	subgt	r5, r5, r3
 8016eb6:	1aff      	subgt	r7, r7, r3
 8016eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016eba:	b1bb      	cbz	r3, 8016eec <_strtod_l+0x724>
 8016ebc:	4641      	mov	r1, r8
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	4648      	mov	r0, r9
 8016ec2:	f001 fe97 	bl	8018bf4 <__pow5mult>
 8016ec6:	4680      	mov	r8, r0
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	f43f ae9b 	beq.w	8016c04 <_strtod_l+0x43c>
 8016ece:	4601      	mov	r1, r0
 8016ed0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016ed2:	4648      	mov	r0, r9
 8016ed4:	f001 fdf8 	bl	8018ac8 <__multiply>
 8016ed8:	900c      	str	r0, [sp, #48]	; 0x30
 8016eda:	2800      	cmp	r0, #0
 8016edc:	f43f ae92 	beq.w	8016c04 <_strtod_l+0x43c>
 8016ee0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ee2:	4648      	mov	r0, r9
 8016ee4:	f001 fd09 	bl	80188fa <_Bfree>
 8016ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016eea:	931c      	str	r3, [sp, #112]	; 0x70
 8016eec:	2e00      	cmp	r6, #0
 8016eee:	dc7a      	bgt.n	8016fe6 <_strtod_l+0x81e>
 8016ef0:	9b06      	ldr	r3, [sp, #24]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	dd08      	ble.n	8016f08 <_strtod_l+0x740>
 8016ef6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016ef8:	9905      	ldr	r1, [sp, #20]
 8016efa:	4648      	mov	r0, r9
 8016efc:	f001 fe7a 	bl	8018bf4 <__pow5mult>
 8016f00:	9005      	str	r0, [sp, #20]
 8016f02:	2800      	cmp	r0, #0
 8016f04:	f43f ae7e 	beq.w	8016c04 <_strtod_l+0x43c>
 8016f08:	2d00      	cmp	r5, #0
 8016f0a:	dd08      	ble.n	8016f1e <_strtod_l+0x756>
 8016f0c:	462a      	mov	r2, r5
 8016f0e:	9905      	ldr	r1, [sp, #20]
 8016f10:	4648      	mov	r0, r9
 8016f12:	f001 febd 	bl	8018c90 <__lshift>
 8016f16:	9005      	str	r0, [sp, #20]
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	f43f ae73 	beq.w	8016c04 <_strtod_l+0x43c>
 8016f1e:	2f00      	cmp	r7, #0
 8016f20:	dd08      	ble.n	8016f34 <_strtod_l+0x76c>
 8016f22:	4641      	mov	r1, r8
 8016f24:	463a      	mov	r2, r7
 8016f26:	4648      	mov	r0, r9
 8016f28:	f001 feb2 	bl	8018c90 <__lshift>
 8016f2c:	4680      	mov	r8, r0
 8016f2e:	2800      	cmp	r0, #0
 8016f30:	f43f ae68 	beq.w	8016c04 <_strtod_l+0x43c>
 8016f34:	9a05      	ldr	r2, [sp, #20]
 8016f36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f38:	4648      	mov	r0, r9
 8016f3a:	f001 ff17 	bl	8018d6c <__mdiff>
 8016f3e:	4604      	mov	r4, r0
 8016f40:	2800      	cmp	r0, #0
 8016f42:	f43f ae5f 	beq.w	8016c04 <_strtod_l+0x43c>
 8016f46:	68c3      	ldr	r3, [r0, #12]
 8016f48:	930c      	str	r3, [sp, #48]	; 0x30
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	60c3      	str	r3, [r0, #12]
 8016f4e:	4641      	mov	r1, r8
 8016f50:	f001 fef2 	bl	8018d38 <__mcmp>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	da55      	bge.n	8017004 <_strtod_l+0x83c>
 8016f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f5a:	b9e3      	cbnz	r3, 8016f96 <_strtod_l+0x7ce>
 8016f5c:	f1ba 0f00 	cmp.w	sl, #0
 8016f60:	d119      	bne.n	8016f96 <_strtod_l+0x7ce>
 8016f62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f66:	b9b3      	cbnz	r3, 8016f96 <_strtod_l+0x7ce>
 8016f68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f6c:	0d1b      	lsrs	r3, r3, #20
 8016f6e:	051b      	lsls	r3, r3, #20
 8016f70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016f74:	d90f      	bls.n	8016f96 <_strtod_l+0x7ce>
 8016f76:	6963      	ldr	r3, [r4, #20]
 8016f78:	b913      	cbnz	r3, 8016f80 <_strtod_l+0x7b8>
 8016f7a:	6923      	ldr	r3, [r4, #16]
 8016f7c:	2b01      	cmp	r3, #1
 8016f7e:	dd0a      	ble.n	8016f96 <_strtod_l+0x7ce>
 8016f80:	4621      	mov	r1, r4
 8016f82:	2201      	movs	r2, #1
 8016f84:	4648      	mov	r0, r9
 8016f86:	f001 fe83 	bl	8018c90 <__lshift>
 8016f8a:	4641      	mov	r1, r8
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	f001 fed3 	bl	8018d38 <__mcmp>
 8016f92:	2800      	cmp	r0, #0
 8016f94:	dc67      	bgt.n	8017066 <_strtod_l+0x89e>
 8016f96:	9b04      	ldr	r3, [sp, #16]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d171      	bne.n	8017080 <_strtod_l+0x8b8>
 8016f9c:	e63d      	b.n	8016c1a <_strtod_l+0x452>
 8016f9e:	f018 0f01 	tst.w	r8, #1
 8016fa2:	d004      	beq.n	8016fae <_strtod_l+0x7e6>
 8016fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016fa8:	f7e9 fb3e 	bl	8000628 <__aeabi_dmul>
 8016fac:	2301      	movs	r3, #1
 8016fae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016fb2:	3508      	adds	r5, #8
 8016fb4:	e6e5      	b.n	8016d82 <_strtod_l+0x5ba>
 8016fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8016fba:	fa02 f303 	lsl.w	r3, r2, r3
 8016fbe:	ea03 0a0a 	and.w	sl, r3, sl
 8016fc2:	e6ff      	b.n	8016dc4 <_strtod_l+0x5fc>
 8016fc4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016fc8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016fcc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016fd0:	36e2      	adds	r6, #226	; 0xe2
 8016fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8016fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016fda:	e75d      	b.n	8016e98 <_strtod_l+0x6d0>
 8016fdc:	2300      	movs	r3, #0
 8016fde:	930a      	str	r3, [sp, #40]	; 0x28
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fe4:	e758      	b.n	8016e98 <_strtod_l+0x6d0>
 8016fe6:	4632      	mov	r2, r6
 8016fe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fea:	4648      	mov	r0, r9
 8016fec:	f001 fe50 	bl	8018c90 <__lshift>
 8016ff0:	901c      	str	r0, [sp, #112]	; 0x70
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	f47f af7c 	bne.w	8016ef0 <_strtod_l+0x728>
 8016ff8:	e604      	b.n	8016c04 <_strtod_l+0x43c>
 8016ffa:	bf00      	nop
 8016ffc:	0801a4e0 	.word	0x0801a4e0
 8017000:	fffffc02 	.word	0xfffffc02
 8017004:	465d      	mov	r5, fp
 8017006:	f040 8086 	bne.w	8017116 <_strtod_l+0x94e>
 801700a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801700c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017010:	b32a      	cbz	r2, 801705e <_strtod_l+0x896>
 8017012:	4aaf      	ldr	r2, [pc, #700]	; (80172d0 <_strtod_l+0xb08>)
 8017014:	4293      	cmp	r3, r2
 8017016:	d153      	bne.n	80170c0 <_strtod_l+0x8f8>
 8017018:	9b04      	ldr	r3, [sp, #16]
 801701a:	4650      	mov	r0, sl
 801701c:	b1d3      	cbz	r3, 8017054 <_strtod_l+0x88c>
 801701e:	4aad      	ldr	r2, [pc, #692]	; (80172d4 <_strtod_l+0xb0c>)
 8017020:	402a      	ands	r2, r5
 8017022:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017026:	f04f 31ff 	mov.w	r1, #4294967295
 801702a:	d816      	bhi.n	801705a <_strtod_l+0x892>
 801702c:	0d12      	lsrs	r2, r2, #20
 801702e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017032:	fa01 f303 	lsl.w	r3, r1, r3
 8017036:	4298      	cmp	r0, r3
 8017038:	d142      	bne.n	80170c0 <_strtod_l+0x8f8>
 801703a:	4ba7      	ldr	r3, [pc, #668]	; (80172d8 <_strtod_l+0xb10>)
 801703c:	429d      	cmp	r5, r3
 801703e:	d102      	bne.n	8017046 <_strtod_l+0x87e>
 8017040:	3001      	adds	r0, #1
 8017042:	f43f addf 	beq.w	8016c04 <_strtod_l+0x43c>
 8017046:	4ba3      	ldr	r3, [pc, #652]	; (80172d4 <_strtod_l+0xb0c>)
 8017048:	402b      	ands	r3, r5
 801704a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801704e:	f04f 0a00 	mov.w	sl, #0
 8017052:	e7a0      	b.n	8016f96 <_strtod_l+0x7ce>
 8017054:	f04f 33ff 	mov.w	r3, #4294967295
 8017058:	e7ed      	b.n	8017036 <_strtod_l+0x86e>
 801705a:	460b      	mov	r3, r1
 801705c:	e7eb      	b.n	8017036 <_strtod_l+0x86e>
 801705e:	bb7b      	cbnz	r3, 80170c0 <_strtod_l+0x8f8>
 8017060:	f1ba 0f00 	cmp.w	sl, #0
 8017064:	d12c      	bne.n	80170c0 <_strtod_l+0x8f8>
 8017066:	9904      	ldr	r1, [sp, #16]
 8017068:	4a9a      	ldr	r2, [pc, #616]	; (80172d4 <_strtod_l+0xb0c>)
 801706a:	465b      	mov	r3, fp
 801706c:	b1f1      	cbz	r1, 80170ac <_strtod_l+0x8e4>
 801706e:	ea02 010b 	and.w	r1, r2, fp
 8017072:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017076:	dc19      	bgt.n	80170ac <_strtod_l+0x8e4>
 8017078:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801707c:	f77f ae5b 	ble.w	8016d36 <_strtod_l+0x56e>
 8017080:	4a96      	ldr	r2, [pc, #600]	; (80172dc <_strtod_l+0xb14>)
 8017082:	2300      	movs	r3, #0
 8017084:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017088:	4650      	mov	r0, sl
 801708a:	4659      	mov	r1, fp
 801708c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017090:	f7e9 faca 	bl	8000628 <__aeabi_dmul>
 8017094:	4682      	mov	sl, r0
 8017096:	468b      	mov	fp, r1
 8017098:	2900      	cmp	r1, #0
 801709a:	f47f adbe 	bne.w	8016c1a <_strtod_l+0x452>
 801709e:	2800      	cmp	r0, #0
 80170a0:	f47f adbb 	bne.w	8016c1a <_strtod_l+0x452>
 80170a4:	2322      	movs	r3, #34	; 0x22
 80170a6:	f8c9 3000 	str.w	r3, [r9]
 80170aa:	e5b6      	b.n	8016c1a <_strtod_l+0x452>
 80170ac:	4013      	ands	r3, r2
 80170ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80170b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80170b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80170ba:	f04f 3aff 	mov.w	sl, #4294967295
 80170be:	e76a      	b.n	8016f96 <_strtod_l+0x7ce>
 80170c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170c2:	b193      	cbz	r3, 80170ea <_strtod_l+0x922>
 80170c4:	422b      	tst	r3, r5
 80170c6:	f43f af66 	beq.w	8016f96 <_strtod_l+0x7ce>
 80170ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170cc:	9a04      	ldr	r2, [sp, #16]
 80170ce:	4650      	mov	r0, sl
 80170d0:	4659      	mov	r1, fp
 80170d2:	b173      	cbz	r3, 80170f2 <_strtod_l+0x92a>
 80170d4:	f7ff fb5c 	bl	8016790 <sulp>
 80170d8:	4602      	mov	r2, r0
 80170da:	460b      	mov	r3, r1
 80170dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80170e0:	f7e9 f8ec 	bl	80002bc <__adddf3>
 80170e4:	4682      	mov	sl, r0
 80170e6:	468b      	mov	fp, r1
 80170e8:	e755      	b.n	8016f96 <_strtod_l+0x7ce>
 80170ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170ec:	ea13 0f0a 	tst.w	r3, sl
 80170f0:	e7e9      	b.n	80170c6 <_strtod_l+0x8fe>
 80170f2:	f7ff fb4d 	bl	8016790 <sulp>
 80170f6:	4602      	mov	r2, r0
 80170f8:	460b      	mov	r3, r1
 80170fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80170fe:	f7e9 f8db 	bl	80002b8 <__aeabi_dsub>
 8017102:	2200      	movs	r2, #0
 8017104:	2300      	movs	r3, #0
 8017106:	4682      	mov	sl, r0
 8017108:	468b      	mov	fp, r1
 801710a:	f7e9 fcf5 	bl	8000af8 <__aeabi_dcmpeq>
 801710e:	2800      	cmp	r0, #0
 8017110:	f47f ae11 	bne.w	8016d36 <_strtod_l+0x56e>
 8017114:	e73f      	b.n	8016f96 <_strtod_l+0x7ce>
 8017116:	4641      	mov	r1, r8
 8017118:	4620      	mov	r0, r4
 801711a:	f001 ff4a 	bl	8018fb2 <__ratio>
 801711e:	ec57 6b10 	vmov	r6, r7, d0
 8017122:	2200      	movs	r2, #0
 8017124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017128:	ee10 0a10 	vmov	r0, s0
 801712c:	4639      	mov	r1, r7
 801712e:	f7e9 fcf7 	bl	8000b20 <__aeabi_dcmple>
 8017132:	2800      	cmp	r0, #0
 8017134:	d077      	beq.n	8017226 <_strtod_l+0xa5e>
 8017136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017138:	2b00      	cmp	r3, #0
 801713a:	d04a      	beq.n	80171d2 <_strtod_l+0xa0a>
 801713c:	4b68      	ldr	r3, [pc, #416]	; (80172e0 <_strtod_l+0xb18>)
 801713e:	2200      	movs	r2, #0
 8017140:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017144:	4f66      	ldr	r7, [pc, #408]	; (80172e0 <_strtod_l+0xb18>)
 8017146:	2600      	movs	r6, #0
 8017148:	4b62      	ldr	r3, [pc, #392]	; (80172d4 <_strtod_l+0xb0c>)
 801714a:	402b      	ands	r3, r5
 801714c:	930f      	str	r3, [sp, #60]	; 0x3c
 801714e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017150:	4b64      	ldr	r3, [pc, #400]	; (80172e4 <_strtod_l+0xb1c>)
 8017152:	429a      	cmp	r2, r3
 8017154:	f040 80ce 	bne.w	80172f4 <_strtod_l+0xb2c>
 8017158:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801715c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017160:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017164:	ec4b ab10 	vmov	d0, sl, fp
 8017168:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801716c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017170:	f001 fe5a 	bl	8018e28 <__ulp>
 8017174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017178:	ec53 2b10 	vmov	r2, r3, d0
 801717c:	f7e9 fa54 	bl	8000628 <__aeabi_dmul>
 8017180:	4652      	mov	r2, sl
 8017182:	465b      	mov	r3, fp
 8017184:	f7e9 f89a 	bl	80002bc <__adddf3>
 8017188:	460b      	mov	r3, r1
 801718a:	4952      	ldr	r1, [pc, #328]	; (80172d4 <_strtod_l+0xb0c>)
 801718c:	4a56      	ldr	r2, [pc, #344]	; (80172e8 <_strtod_l+0xb20>)
 801718e:	4019      	ands	r1, r3
 8017190:	4291      	cmp	r1, r2
 8017192:	4682      	mov	sl, r0
 8017194:	d95b      	bls.n	801724e <_strtod_l+0xa86>
 8017196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017198:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801719c:	4293      	cmp	r3, r2
 801719e:	d103      	bne.n	80171a8 <_strtod_l+0x9e0>
 80171a0:	9b08      	ldr	r3, [sp, #32]
 80171a2:	3301      	adds	r3, #1
 80171a4:	f43f ad2e 	beq.w	8016c04 <_strtod_l+0x43c>
 80171a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80172d8 <_strtod_l+0xb10>
 80171ac:	f04f 3aff 	mov.w	sl, #4294967295
 80171b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171b2:	4648      	mov	r0, r9
 80171b4:	f001 fba1 	bl	80188fa <_Bfree>
 80171b8:	9905      	ldr	r1, [sp, #20]
 80171ba:	4648      	mov	r0, r9
 80171bc:	f001 fb9d 	bl	80188fa <_Bfree>
 80171c0:	4641      	mov	r1, r8
 80171c2:	4648      	mov	r0, r9
 80171c4:	f001 fb99 	bl	80188fa <_Bfree>
 80171c8:	4621      	mov	r1, r4
 80171ca:	4648      	mov	r0, r9
 80171cc:	f001 fb95 	bl	80188fa <_Bfree>
 80171d0:	e619      	b.n	8016e06 <_strtod_l+0x63e>
 80171d2:	f1ba 0f00 	cmp.w	sl, #0
 80171d6:	d11a      	bne.n	801720e <_strtod_l+0xa46>
 80171d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171dc:	b9eb      	cbnz	r3, 801721a <_strtod_l+0xa52>
 80171de:	2200      	movs	r2, #0
 80171e0:	4b3f      	ldr	r3, [pc, #252]	; (80172e0 <_strtod_l+0xb18>)
 80171e2:	4630      	mov	r0, r6
 80171e4:	4639      	mov	r1, r7
 80171e6:	f7e9 fc91 	bl	8000b0c <__aeabi_dcmplt>
 80171ea:	b9c8      	cbnz	r0, 8017220 <_strtod_l+0xa58>
 80171ec:	4630      	mov	r0, r6
 80171ee:	4639      	mov	r1, r7
 80171f0:	2200      	movs	r2, #0
 80171f2:	4b3e      	ldr	r3, [pc, #248]	; (80172ec <_strtod_l+0xb24>)
 80171f4:	f7e9 fa18 	bl	8000628 <__aeabi_dmul>
 80171f8:	4606      	mov	r6, r0
 80171fa:	460f      	mov	r7, r1
 80171fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017200:	9618      	str	r6, [sp, #96]	; 0x60
 8017202:	9319      	str	r3, [sp, #100]	; 0x64
 8017204:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017208:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801720c:	e79c      	b.n	8017148 <_strtod_l+0x980>
 801720e:	f1ba 0f01 	cmp.w	sl, #1
 8017212:	d102      	bne.n	801721a <_strtod_l+0xa52>
 8017214:	2d00      	cmp	r5, #0
 8017216:	f43f ad8e 	beq.w	8016d36 <_strtod_l+0x56e>
 801721a:	2200      	movs	r2, #0
 801721c:	4b34      	ldr	r3, [pc, #208]	; (80172f0 <_strtod_l+0xb28>)
 801721e:	e78f      	b.n	8017140 <_strtod_l+0x978>
 8017220:	2600      	movs	r6, #0
 8017222:	4f32      	ldr	r7, [pc, #200]	; (80172ec <_strtod_l+0xb24>)
 8017224:	e7ea      	b.n	80171fc <_strtod_l+0xa34>
 8017226:	4b31      	ldr	r3, [pc, #196]	; (80172ec <_strtod_l+0xb24>)
 8017228:	4630      	mov	r0, r6
 801722a:	4639      	mov	r1, r7
 801722c:	2200      	movs	r2, #0
 801722e:	f7e9 f9fb 	bl	8000628 <__aeabi_dmul>
 8017232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017234:	4606      	mov	r6, r0
 8017236:	460f      	mov	r7, r1
 8017238:	b933      	cbnz	r3, 8017248 <_strtod_l+0xa80>
 801723a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801723e:	9010      	str	r0, [sp, #64]	; 0x40
 8017240:	9311      	str	r3, [sp, #68]	; 0x44
 8017242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017246:	e7df      	b.n	8017208 <_strtod_l+0xa40>
 8017248:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801724c:	e7f9      	b.n	8017242 <_strtod_l+0xa7a>
 801724e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017252:	9b04      	ldr	r3, [sp, #16]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d1ab      	bne.n	80171b0 <_strtod_l+0x9e8>
 8017258:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801725c:	0d1b      	lsrs	r3, r3, #20
 801725e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017260:	051b      	lsls	r3, r3, #20
 8017262:	429a      	cmp	r2, r3
 8017264:	465d      	mov	r5, fp
 8017266:	d1a3      	bne.n	80171b0 <_strtod_l+0x9e8>
 8017268:	4639      	mov	r1, r7
 801726a:	4630      	mov	r0, r6
 801726c:	f7e9 fc8c 	bl	8000b88 <__aeabi_d2iz>
 8017270:	f7e9 f970 	bl	8000554 <__aeabi_i2d>
 8017274:	460b      	mov	r3, r1
 8017276:	4602      	mov	r2, r0
 8017278:	4639      	mov	r1, r7
 801727a:	4630      	mov	r0, r6
 801727c:	f7e9 f81c 	bl	80002b8 <__aeabi_dsub>
 8017280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017282:	4606      	mov	r6, r0
 8017284:	460f      	mov	r7, r1
 8017286:	b933      	cbnz	r3, 8017296 <_strtod_l+0xace>
 8017288:	f1ba 0f00 	cmp.w	sl, #0
 801728c:	d103      	bne.n	8017296 <_strtod_l+0xace>
 801728e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017292:	2d00      	cmp	r5, #0
 8017294:	d06d      	beq.n	8017372 <_strtod_l+0xbaa>
 8017296:	a30a      	add	r3, pc, #40	; (adr r3, 80172c0 <_strtod_l+0xaf8>)
 8017298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729c:	4630      	mov	r0, r6
 801729e:	4639      	mov	r1, r7
 80172a0:	f7e9 fc34 	bl	8000b0c <__aeabi_dcmplt>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	f47f acb8 	bne.w	8016c1a <_strtod_l+0x452>
 80172aa:	a307      	add	r3, pc, #28	; (adr r3, 80172c8 <_strtod_l+0xb00>)
 80172ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b0:	4630      	mov	r0, r6
 80172b2:	4639      	mov	r1, r7
 80172b4:	f7e9 fc48 	bl	8000b48 <__aeabi_dcmpgt>
 80172b8:	2800      	cmp	r0, #0
 80172ba:	f43f af79 	beq.w	80171b0 <_strtod_l+0x9e8>
 80172be:	e4ac      	b.n	8016c1a <_strtod_l+0x452>
 80172c0:	94a03595 	.word	0x94a03595
 80172c4:	3fdfffff 	.word	0x3fdfffff
 80172c8:	35afe535 	.word	0x35afe535
 80172cc:	3fe00000 	.word	0x3fe00000
 80172d0:	000fffff 	.word	0x000fffff
 80172d4:	7ff00000 	.word	0x7ff00000
 80172d8:	7fefffff 	.word	0x7fefffff
 80172dc:	39500000 	.word	0x39500000
 80172e0:	3ff00000 	.word	0x3ff00000
 80172e4:	7fe00000 	.word	0x7fe00000
 80172e8:	7c9fffff 	.word	0x7c9fffff
 80172ec:	3fe00000 	.word	0x3fe00000
 80172f0:	bff00000 	.word	0xbff00000
 80172f4:	9b04      	ldr	r3, [sp, #16]
 80172f6:	b333      	cbz	r3, 8017346 <_strtod_l+0xb7e>
 80172f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80172fe:	d822      	bhi.n	8017346 <_strtod_l+0xb7e>
 8017300:	a327      	add	r3, pc, #156	; (adr r3, 80173a0 <_strtod_l+0xbd8>)
 8017302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017306:	4630      	mov	r0, r6
 8017308:	4639      	mov	r1, r7
 801730a:	f7e9 fc09 	bl	8000b20 <__aeabi_dcmple>
 801730e:	b1a0      	cbz	r0, 801733a <_strtod_l+0xb72>
 8017310:	4639      	mov	r1, r7
 8017312:	4630      	mov	r0, r6
 8017314:	f7e9 fc60 	bl	8000bd8 <__aeabi_d2uiz>
 8017318:	2800      	cmp	r0, #0
 801731a:	bf08      	it	eq
 801731c:	2001      	moveq	r0, #1
 801731e:	f7e9 f909 	bl	8000534 <__aeabi_ui2d>
 8017322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017324:	4606      	mov	r6, r0
 8017326:	460f      	mov	r7, r1
 8017328:	bb03      	cbnz	r3, 801736c <_strtod_l+0xba4>
 801732a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801732e:	9012      	str	r0, [sp, #72]	; 0x48
 8017330:	9313      	str	r3, [sp, #76]	; 0x4c
 8017332:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017336:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801733a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801733c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801733e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017342:	1a9b      	subs	r3, r3, r2
 8017344:	930b      	str	r3, [sp, #44]	; 0x2c
 8017346:	ed9d 0b08 	vldr	d0, [sp, #32]
 801734a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801734e:	f001 fd6b 	bl	8018e28 <__ulp>
 8017352:	4650      	mov	r0, sl
 8017354:	ec53 2b10 	vmov	r2, r3, d0
 8017358:	4659      	mov	r1, fp
 801735a:	f7e9 f965 	bl	8000628 <__aeabi_dmul>
 801735e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017362:	f7e8 ffab 	bl	80002bc <__adddf3>
 8017366:	4682      	mov	sl, r0
 8017368:	468b      	mov	fp, r1
 801736a:	e772      	b.n	8017252 <_strtod_l+0xa8a>
 801736c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017370:	e7df      	b.n	8017332 <_strtod_l+0xb6a>
 8017372:	a30d      	add	r3, pc, #52	; (adr r3, 80173a8 <_strtod_l+0xbe0>)
 8017374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017378:	f7e9 fbc8 	bl	8000b0c <__aeabi_dcmplt>
 801737c:	e79c      	b.n	80172b8 <_strtod_l+0xaf0>
 801737e:	2300      	movs	r3, #0
 8017380:	930d      	str	r3, [sp, #52]	; 0x34
 8017382:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017386:	6013      	str	r3, [r2, #0]
 8017388:	f7ff ba61 	b.w	801684e <_strtod_l+0x86>
 801738c:	2b65      	cmp	r3, #101	; 0x65
 801738e:	f04f 0200 	mov.w	r2, #0
 8017392:	f43f ab4e 	beq.w	8016a32 <_strtod_l+0x26a>
 8017396:	2101      	movs	r1, #1
 8017398:	4614      	mov	r4, r2
 801739a:	9104      	str	r1, [sp, #16]
 801739c:	f7ff bacb 	b.w	8016936 <_strtod_l+0x16e>
 80173a0:	ffc00000 	.word	0xffc00000
 80173a4:	41dfffff 	.word	0x41dfffff
 80173a8:	94a03595 	.word	0x94a03595
 80173ac:	3fcfffff 	.word	0x3fcfffff

080173b0 <_strtod_r>:
 80173b0:	4b05      	ldr	r3, [pc, #20]	; (80173c8 <_strtod_r+0x18>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	b410      	push	{r4}
 80173b6:	6a1b      	ldr	r3, [r3, #32]
 80173b8:	4c04      	ldr	r4, [pc, #16]	; (80173cc <_strtod_r+0x1c>)
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	bf08      	it	eq
 80173be:	4623      	moveq	r3, r4
 80173c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173c4:	f7ff ba00 	b.w	80167c8 <_strtod_l>
 80173c8:	2000000c 	.word	0x2000000c
 80173cc:	20000070 	.word	0x20000070

080173d0 <_strtol_l.isra.0>:
 80173d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173d4:	4680      	mov	r8, r0
 80173d6:	4689      	mov	r9, r1
 80173d8:	4692      	mov	sl, r2
 80173da:	461e      	mov	r6, r3
 80173dc:	460f      	mov	r7, r1
 80173de:	463d      	mov	r5, r7
 80173e0:	9808      	ldr	r0, [sp, #32]
 80173e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173e6:	f001 fa0d 	bl	8018804 <__locale_ctype_ptr_l>
 80173ea:	4420      	add	r0, r4
 80173ec:	7843      	ldrb	r3, [r0, #1]
 80173ee:	f013 0308 	ands.w	r3, r3, #8
 80173f2:	d132      	bne.n	801745a <_strtol_l.isra.0+0x8a>
 80173f4:	2c2d      	cmp	r4, #45	; 0x2d
 80173f6:	d132      	bne.n	801745e <_strtol_l.isra.0+0x8e>
 80173f8:	787c      	ldrb	r4, [r7, #1]
 80173fa:	1cbd      	adds	r5, r7, #2
 80173fc:	2201      	movs	r2, #1
 80173fe:	2e00      	cmp	r6, #0
 8017400:	d05d      	beq.n	80174be <_strtol_l.isra.0+0xee>
 8017402:	2e10      	cmp	r6, #16
 8017404:	d109      	bne.n	801741a <_strtol_l.isra.0+0x4a>
 8017406:	2c30      	cmp	r4, #48	; 0x30
 8017408:	d107      	bne.n	801741a <_strtol_l.isra.0+0x4a>
 801740a:	782b      	ldrb	r3, [r5, #0]
 801740c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017410:	2b58      	cmp	r3, #88	; 0x58
 8017412:	d14f      	bne.n	80174b4 <_strtol_l.isra.0+0xe4>
 8017414:	786c      	ldrb	r4, [r5, #1]
 8017416:	2610      	movs	r6, #16
 8017418:	3502      	adds	r5, #2
 801741a:	2a00      	cmp	r2, #0
 801741c:	bf14      	ite	ne
 801741e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017422:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017426:	2700      	movs	r7, #0
 8017428:	fbb1 fcf6 	udiv	ip, r1, r6
 801742c:	4638      	mov	r0, r7
 801742e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017432:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017436:	2b09      	cmp	r3, #9
 8017438:	d817      	bhi.n	801746a <_strtol_l.isra.0+0x9a>
 801743a:	461c      	mov	r4, r3
 801743c:	42a6      	cmp	r6, r4
 801743e:	dd23      	ble.n	8017488 <_strtol_l.isra.0+0xb8>
 8017440:	1c7b      	adds	r3, r7, #1
 8017442:	d007      	beq.n	8017454 <_strtol_l.isra.0+0x84>
 8017444:	4584      	cmp	ip, r0
 8017446:	d31c      	bcc.n	8017482 <_strtol_l.isra.0+0xb2>
 8017448:	d101      	bne.n	801744e <_strtol_l.isra.0+0x7e>
 801744a:	45a6      	cmp	lr, r4
 801744c:	db19      	blt.n	8017482 <_strtol_l.isra.0+0xb2>
 801744e:	fb00 4006 	mla	r0, r0, r6, r4
 8017452:	2701      	movs	r7, #1
 8017454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017458:	e7eb      	b.n	8017432 <_strtol_l.isra.0+0x62>
 801745a:	462f      	mov	r7, r5
 801745c:	e7bf      	b.n	80173de <_strtol_l.isra.0+0xe>
 801745e:	2c2b      	cmp	r4, #43	; 0x2b
 8017460:	bf04      	itt	eq
 8017462:	1cbd      	addeq	r5, r7, #2
 8017464:	787c      	ldrbeq	r4, [r7, #1]
 8017466:	461a      	mov	r2, r3
 8017468:	e7c9      	b.n	80173fe <_strtol_l.isra.0+0x2e>
 801746a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801746e:	2b19      	cmp	r3, #25
 8017470:	d801      	bhi.n	8017476 <_strtol_l.isra.0+0xa6>
 8017472:	3c37      	subs	r4, #55	; 0x37
 8017474:	e7e2      	b.n	801743c <_strtol_l.isra.0+0x6c>
 8017476:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801747a:	2b19      	cmp	r3, #25
 801747c:	d804      	bhi.n	8017488 <_strtol_l.isra.0+0xb8>
 801747e:	3c57      	subs	r4, #87	; 0x57
 8017480:	e7dc      	b.n	801743c <_strtol_l.isra.0+0x6c>
 8017482:	f04f 37ff 	mov.w	r7, #4294967295
 8017486:	e7e5      	b.n	8017454 <_strtol_l.isra.0+0x84>
 8017488:	1c7b      	adds	r3, r7, #1
 801748a:	d108      	bne.n	801749e <_strtol_l.isra.0+0xce>
 801748c:	2322      	movs	r3, #34	; 0x22
 801748e:	f8c8 3000 	str.w	r3, [r8]
 8017492:	4608      	mov	r0, r1
 8017494:	f1ba 0f00 	cmp.w	sl, #0
 8017498:	d107      	bne.n	80174aa <_strtol_l.isra.0+0xda>
 801749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801749e:	b102      	cbz	r2, 80174a2 <_strtol_l.isra.0+0xd2>
 80174a0:	4240      	negs	r0, r0
 80174a2:	f1ba 0f00 	cmp.w	sl, #0
 80174a6:	d0f8      	beq.n	801749a <_strtol_l.isra.0+0xca>
 80174a8:	b10f      	cbz	r7, 80174ae <_strtol_l.isra.0+0xde>
 80174aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80174ae:	f8ca 9000 	str.w	r9, [sl]
 80174b2:	e7f2      	b.n	801749a <_strtol_l.isra.0+0xca>
 80174b4:	2430      	movs	r4, #48	; 0x30
 80174b6:	2e00      	cmp	r6, #0
 80174b8:	d1af      	bne.n	801741a <_strtol_l.isra.0+0x4a>
 80174ba:	2608      	movs	r6, #8
 80174bc:	e7ad      	b.n	801741a <_strtol_l.isra.0+0x4a>
 80174be:	2c30      	cmp	r4, #48	; 0x30
 80174c0:	d0a3      	beq.n	801740a <_strtol_l.isra.0+0x3a>
 80174c2:	260a      	movs	r6, #10
 80174c4:	e7a9      	b.n	801741a <_strtol_l.isra.0+0x4a>
	...

080174c8 <_strtol_r>:
 80174c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174ca:	4c06      	ldr	r4, [pc, #24]	; (80174e4 <_strtol_r+0x1c>)
 80174cc:	4d06      	ldr	r5, [pc, #24]	; (80174e8 <_strtol_r+0x20>)
 80174ce:	6824      	ldr	r4, [r4, #0]
 80174d0:	6a24      	ldr	r4, [r4, #32]
 80174d2:	2c00      	cmp	r4, #0
 80174d4:	bf08      	it	eq
 80174d6:	462c      	moveq	r4, r5
 80174d8:	9400      	str	r4, [sp, #0]
 80174da:	f7ff ff79 	bl	80173d0 <_strtol_l.isra.0>
 80174de:	b003      	add	sp, #12
 80174e0:	bd30      	pop	{r4, r5, pc}
 80174e2:	bf00      	nop
 80174e4:	2000000c 	.word	0x2000000c
 80174e8:	20000070 	.word	0x20000070

080174ec <_vsiprintf_r>:
 80174ec:	b500      	push	{lr}
 80174ee:	b09b      	sub	sp, #108	; 0x6c
 80174f0:	9100      	str	r1, [sp, #0]
 80174f2:	9104      	str	r1, [sp, #16]
 80174f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80174f8:	9105      	str	r1, [sp, #20]
 80174fa:	9102      	str	r1, [sp, #8]
 80174fc:	4905      	ldr	r1, [pc, #20]	; (8017514 <_vsiprintf_r+0x28>)
 80174fe:	9103      	str	r1, [sp, #12]
 8017500:	4669      	mov	r1, sp
 8017502:	f001 fed5 	bl	80192b0 <_svfiprintf_r>
 8017506:	9b00      	ldr	r3, [sp, #0]
 8017508:	2200      	movs	r2, #0
 801750a:	701a      	strb	r2, [r3, #0]
 801750c:	b01b      	add	sp, #108	; 0x6c
 801750e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017512:	bf00      	nop
 8017514:	ffff0208 	.word	0xffff0208

08017518 <vsiprintf>:
 8017518:	4613      	mov	r3, r2
 801751a:	460a      	mov	r2, r1
 801751c:	4601      	mov	r1, r0
 801751e:	4802      	ldr	r0, [pc, #8]	; (8017528 <vsiprintf+0x10>)
 8017520:	6800      	ldr	r0, [r0, #0]
 8017522:	f7ff bfe3 	b.w	80174ec <_vsiprintf_r>
 8017526:	bf00      	nop
 8017528:	2000000c 	.word	0x2000000c

0801752c <quorem>:
 801752c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017530:	6903      	ldr	r3, [r0, #16]
 8017532:	690c      	ldr	r4, [r1, #16]
 8017534:	42a3      	cmp	r3, r4
 8017536:	4680      	mov	r8, r0
 8017538:	f2c0 8082 	blt.w	8017640 <quorem+0x114>
 801753c:	3c01      	subs	r4, #1
 801753e:	f101 0714 	add.w	r7, r1, #20
 8017542:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017546:	f100 0614 	add.w	r6, r0, #20
 801754a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801754e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017552:	eb06 030c 	add.w	r3, r6, ip
 8017556:	3501      	adds	r5, #1
 8017558:	eb07 090c 	add.w	r9, r7, ip
 801755c:	9301      	str	r3, [sp, #4]
 801755e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017562:	b395      	cbz	r5, 80175ca <quorem+0x9e>
 8017564:	f04f 0a00 	mov.w	sl, #0
 8017568:	4638      	mov	r0, r7
 801756a:	46b6      	mov	lr, r6
 801756c:	46d3      	mov	fp, sl
 801756e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017572:	b293      	uxth	r3, r2
 8017574:	fb05 a303 	mla	r3, r5, r3, sl
 8017578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801757c:	b29b      	uxth	r3, r3
 801757e:	ebab 0303 	sub.w	r3, fp, r3
 8017582:	0c12      	lsrs	r2, r2, #16
 8017584:	f8de b000 	ldr.w	fp, [lr]
 8017588:	fb05 a202 	mla	r2, r5, r2, sl
 801758c:	fa13 f38b 	uxtah	r3, r3, fp
 8017590:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017594:	fa1f fb82 	uxth.w	fp, r2
 8017598:	f8de 2000 	ldr.w	r2, [lr]
 801759c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80175a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175aa:	4581      	cmp	r9, r0
 80175ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80175b0:	f84e 3b04 	str.w	r3, [lr], #4
 80175b4:	d2db      	bcs.n	801756e <quorem+0x42>
 80175b6:	f856 300c 	ldr.w	r3, [r6, ip]
 80175ba:	b933      	cbnz	r3, 80175ca <quorem+0x9e>
 80175bc:	9b01      	ldr	r3, [sp, #4]
 80175be:	3b04      	subs	r3, #4
 80175c0:	429e      	cmp	r6, r3
 80175c2:	461a      	mov	r2, r3
 80175c4:	d330      	bcc.n	8017628 <quorem+0xfc>
 80175c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80175ca:	4640      	mov	r0, r8
 80175cc:	f001 fbb4 	bl	8018d38 <__mcmp>
 80175d0:	2800      	cmp	r0, #0
 80175d2:	db25      	blt.n	8017620 <quorem+0xf4>
 80175d4:	3501      	adds	r5, #1
 80175d6:	4630      	mov	r0, r6
 80175d8:	f04f 0c00 	mov.w	ip, #0
 80175dc:	f857 2b04 	ldr.w	r2, [r7], #4
 80175e0:	f8d0 e000 	ldr.w	lr, [r0]
 80175e4:	b293      	uxth	r3, r2
 80175e6:	ebac 0303 	sub.w	r3, ip, r3
 80175ea:	0c12      	lsrs	r2, r2, #16
 80175ec:	fa13 f38e 	uxtah	r3, r3, lr
 80175f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80175f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80175f8:	b29b      	uxth	r3, r3
 80175fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175fe:	45b9      	cmp	r9, r7
 8017600:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017604:	f840 3b04 	str.w	r3, [r0], #4
 8017608:	d2e8      	bcs.n	80175dc <quorem+0xb0>
 801760a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801760e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017612:	b92a      	cbnz	r2, 8017620 <quorem+0xf4>
 8017614:	3b04      	subs	r3, #4
 8017616:	429e      	cmp	r6, r3
 8017618:	461a      	mov	r2, r3
 801761a:	d30b      	bcc.n	8017634 <quorem+0x108>
 801761c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017620:	4628      	mov	r0, r5
 8017622:	b003      	add	sp, #12
 8017624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017628:	6812      	ldr	r2, [r2, #0]
 801762a:	3b04      	subs	r3, #4
 801762c:	2a00      	cmp	r2, #0
 801762e:	d1ca      	bne.n	80175c6 <quorem+0x9a>
 8017630:	3c01      	subs	r4, #1
 8017632:	e7c5      	b.n	80175c0 <quorem+0x94>
 8017634:	6812      	ldr	r2, [r2, #0]
 8017636:	3b04      	subs	r3, #4
 8017638:	2a00      	cmp	r2, #0
 801763a:	d1ef      	bne.n	801761c <quorem+0xf0>
 801763c:	3c01      	subs	r4, #1
 801763e:	e7ea      	b.n	8017616 <quorem+0xea>
 8017640:	2000      	movs	r0, #0
 8017642:	e7ee      	b.n	8017622 <quorem+0xf6>
 8017644:	0000      	movs	r0, r0
	...

08017648 <_dtoa_r>:
 8017648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764c:	ec57 6b10 	vmov	r6, r7, d0
 8017650:	b097      	sub	sp, #92	; 0x5c
 8017652:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017654:	9106      	str	r1, [sp, #24]
 8017656:	4604      	mov	r4, r0
 8017658:	920b      	str	r2, [sp, #44]	; 0x2c
 801765a:	9312      	str	r3, [sp, #72]	; 0x48
 801765c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017660:	e9cd 6700 	strd	r6, r7, [sp]
 8017664:	b93d      	cbnz	r5, 8017676 <_dtoa_r+0x2e>
 8017666:	2010      	movs	r0, #16
 8017668:	f001 f8ee 	bl	8018848 <malloc>
 801766c:	6260      	str	r0, [r4, #36]	; 0x24
 801766e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017672:	6005      	str	r5, [r0, #0]
 8017674:	60c5      	str	r5, [r0, #12]
 8017676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017678:	6819      	ldr	r1, [r3, #0]
 801767a:	b151      	cbz	r1, 8017692 <_dtoa_r+0x4a>
 801767c:	685a      	ldr	r2, [r3, #4]
 801767e:	604a      	str	r2, [r1, #4]
 8017680:	2301      	movs	r3, #1
 8017682:	4093      	lsls	r3, r2
 8017684:	608b      	str	r3, [r1, #8]
 8017686:	4620      	mov	r0, r4
 8017688:	f001 f937 	bl	80188fa <_Bfree>
 801768c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801768e:	2200      	movs	r2, #0
 8017690:	601a      	str	r2, [r3, #0]
 8017692:	1e3b      	subs	r3, r7, #0
 8017694:	bfbb      	ittet	lt
 8017696:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801769a:	9301      	strlt	r3, [sp, #4]
 801769c:	2300      	movge	r3, #0
 801769e:	2201      	movlt	r2, #1
 80176a0:	bfac      	ite	ge
 80176a2:	f8c8 3000 	strge.w	r3, [r8]
 80176a6:	f8c8 2000 	strlt.w	r2, [r8]
 80176aa:	4baf      	ldr	r3, [pc, #700]	; (8017968 <_dtoa_r+0x320>)
 80176ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80176b0:	ea33 0308 	bics.w	r3, r3, r8
 80176b4:	d114      	bne.n	80176e0 <_dtoa_r+0x98>
 80176b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80176bc:	6013      	str	r3, [r2, #0]
 80176be:	9b00      	ldr	r3, [sp, #0]
 80176c0:	b923      	cbnz	r3, 80176cc <_dtoa_r+0x84>
 80176c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80176c6:	2800      	cmp	r0, #0
 80176c8:	f000 8542 	beq.w	8018150 <_dtoa_r+0xb08>
 80176cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801797c <_dtoa_r+0x334>
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	f000 8544 	beq.w	8018160 <_dtoa_r+0xb18>
 80176d8:	f10b 0303 	add.w	r3, fp, #3
 80176dc:	f000 bd3e 	b.w	801815c <_dtoa_r+0xb14>
 80176e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80176e4:	2200      	movs	r2, #0
 80176e6:	2300      	movs	r3, #0
 80176e8:	4630      	mov	r0, r6
 80176ea:	4639      	mov	r1, r7
 80176ec:	f7e9 fa04 	bl	8000af8 <__aeabi_dcmpeq>
 80176f0:	4681      	mov	r9, r0
 80176f2:	b168      	cbz	r0, 8017710 <_dtoa_r+0xc8>
 80176f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176f6:	2301      	movs	r3, #1
 80176f8:	6013      	str	r3, [r2, #0]
 80176fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	f000 8524 	beq.w	801814a <_dtoa_r+0xb02>
 8017702:	4b9a      	ldr	r3, [pc, #616]	; (801796c <_dtoa_r+0x324>)
 8017704:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017706:	f103 3bff 	add.w	fp, r3, #4294967295
 801770a:	6013      	str	r3, [r2, #0]
 801770c:	f000 bd28 	b.w	8018160 <_dtoa_r+0xb18>
 8017710:	aa14      	add	r2, sp, #80	; 0x50
 8017712:	a915      	add	r1, sp, #84	; 0x54
 8017714:	ec47 6b10 	vmov	d0, r6, r7
 8017718:	4620      	mov	r0, r4
 801771a:	f001 fbfb 	bl	8018f14 <__d2b>
 801771e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017722:	9004      	str	r0, [sp, #16]
 8017724:	2d00      	cmp	r5, #0
 8017726:	d07c      	beq.n	8017822 <_dtoa_r+0x1da>
 8017728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801772c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017730:	46b2      	mov	sl, r6
 8017732:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801773a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801773e:	2200      	movs	r2, #0
 8017740:	4b8b      	ldr	r3, [pc, #556]	; (8017970 <_dtoa_r+0x328>)
 8017742:	4650      	mov	r0, sl
 8017744:	4659      	mov	r1, fp
 8017746:	f7e8 fdb7 	bl	80002b8 <__aeabi_dsub>
 801774a:	a381      	add	r3, pc, #516	; (adr r3, 8017950 <_dtoa_r+0x308>)
 801774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017750:	f7e8 ff6a 	bl	8000628 <__aeabi_dmul>
 8017754:	a380      	add	r3, pc, #512	; (adr r3, 8017958 <_dtoa_r+0x310>)
 8017756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801775a:	f7e8 fdaf 	bl	80002bc <__adddf3>
 801775e:	4606      	mov	r6, r0
 8017760:	4628      	mov	r0, r5
 8017762:	460f      	mov	r7, r1
 8017764:	f7e8 fef6 	bl	8000554 <__aeabi_i2d>
 8017768:	a37d      	add	r3, pc, #500	; (adr r3, 8017960 <_dtoa_r+0x318>)
 801776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801776e:	f7e8 ff5b 	bl	8000628 <__aeabi_dmul>
 8017772:	4602      	mov	r2, r0
 8017774:	460b      	mov	r3, r1
 8017776:	4630      	mov	r0, r6
 8017778:	4639      	mov	r1, r7
 801777a:	f7e8 fd9f 	bl	80002bc <__adddf3>
 801777e:	4606      	mov	r6, r0
 8017780:	460f      	mov	r7, r1
 8017782:	f7e9 fa01 	bl	8000b88 <__aeabi_d2iz>
 8017786:	2200      	movs	r2, #0
 8017788:	4682      	mov	sl, r0
 801778a:	2300      	movs	r3, #0
 801778c:	4630      	mov	r0, r6
 801778e:	4639      	mov	r1, r7
 8017790:	f7e9 f9bc 	bl	8000b0c <__aeabi_dcmplt>
 8017794:	b148      	cbz	r0, 80177aa <_dtoa_r+0x162>
 8017796:	4650      	mov	r0, sl
 8017798:	f7e8 fedc 	bl	8000554 <__aeabi_i2d>
 801779c:	4632      	mov	r2, r6
 801779e:	463b      	mov	r3, r7
 80177a0:	f7e9 f9aa 	bl	8000af8 <__aeabi_dcmpeq>
 80177a4:	b908      	cbnz	r0, 80177aa <_dtoa_r+0x162>
 80177a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177aa:	f1ba 0f16 	cmp.w	sl, #22
 80177ae:	d859      	bhi.n	8017864 <_dtoa_r+0x21c>
 80177b0:	4970      	ldr	r1, [pc, #448]	; (8017974 <_dtoa_r+0x32c>)
 80177b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80177b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80177be:	f7e9 f9c3 	bl	8000b48 <__aeabi_dcmpgt>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	d050      	beq.n	8017868 <_dtoa_r+0x220>
 80177c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177ca:	2300      	movs	r3, #0
 80177cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80177ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177d0:	1b5d      	subs	r5, r3, r5
 80177d2:	f1b5 0801 	subs.w	r8, r5, #1
 80177d6:	bf49      	itett	mi
 80177d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80177dc:	2300      	movpl	r3, #0
 80177de:	9305      	strmi	r3, [sp, #20]
 80177e0:	f04f 0800 	movmi.w	r8, #0
 80177e4:	bf58      	it	pl
 80177e6:	9305      	strpl	r3, [sp, #20]
 80177e8:	f1ba 0f00 	cmp.w	sl, #0
 80177ec:	db3e      	blt.n	801786c <_dtoa_r+0x224>
 80177ee:	2300      	movs	r3, #0
 80177f0:	44d0      	add	r8, sl
 80177f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80177f6:	9307      	str	r3, [sp, #28]
 80177f8:	9b06      	ldr	r3, [sp, #24]
 80177fa:	2b09      	cmp	r3, #9
 80177fc:	f200 8090 	bhi.w	8017920 <_dtoa_r+0x2d8>
 8017800:	2b05      	cmp	r3, #5
 8017802:	bfc4      	itt	gt
 8017804:	3b04      	subgt	r3, #4
 8017806:	9306      	strgt	r3, [sp, #24]
 8017808:	9b06      	ldr	r3, [sp, #24]
 801780a:	f1a3 0302 	sub.w	r3, r3, #2
 801780e:	bfcc      	ite	gt
 8017810:	2500      	movgt	r5, #0
 8017812:	2501      	movle	r5, #1
 8017814:	2b03      	cmp	r3, #3
 8017816:	f200 808f 	bhi.w	8017938 <_dtoa_r+0x2f0>
 801781a:	e8df f003 	tbb	[pc, r3]
 801781e:	7f7d      	.short	0x7f7d
 8017820:	7131      	.short	0x7131
 8017822:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017826:	441d      	add	r5, r3
 8017828:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801782c:	2820      	cmp	r0, #32
 801782e:	dd13      	ble.n	8017858 <_dtoa_r+0x210>
 8017830:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017834:	9b00      	ldr	r3, [sp, #0]
 8017836:	fa08 f800 	lsl.w	r8, r8, r0
 801783a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801783e:	fa23 f000 	lsr.w	r0, r3, r0
 8017842:	ea48 0000 	orr.w	r0, r8, r0
 8017846:	f7e8 fe75 	bl	8000534 <__aeabi_ui2d>
 801784a:	2301      	movs	r3, #1
 801784c:	4682      	mov	sl, r0
 801784e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017852:	3d01      	subs	r5, #1
 8017854:	9313      	str	r3, [sp, #76]	; 0x4c
 8017856:	e772      	b.n	801773e <_dtoa_r+0xf6>
 8017858:	9b00      	ldr	r3, [sp, #0]
 801785a:	f1c0 0020 	rsb	r0, r0, #32
 801785e:	fa03 f000 	lsl.w	r0, r3, r0
 8017862:	e7f0      	b.n	8017846 <_dtoa_r+0x1fe>
 8017864:	2301      	movs	r3, #1
 8017866:	e7b1      	b.n	80177cc <_dtoa_r+0x184>
 8017868:	900f      	str	r0, [sp, #60]	; 0x3c
 801786a:	e7b0      	b.n	80177ce <_dtoa_r+0x186>
 801786c:	9b05      	ldr	r3, [sp, #20]
 801786e:	eba3 030a 	sub.w	r3, r3, sl
 8017872:	9305      	str	r3, [sp, #20]
 8017874:	f1ca 0300 	rsb	r3, sl, #0
 8017878:	9307      	str	r3, [sp, #28]
 801787a:	2300      	movs	r3, #0
 801787c:	930e      	str	r3, [sp, #56]	; 0x38
 801787e:	e7bb      	b.n	80177f8 <_dtoa_r+0x1b0>
 8017880:	2301      	movs	r3, #1
 8017882:	930a      	str	r3, [sp, #40]	; 0x28
 8017884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017886:	2b00      	cmp	r3, #0
 8017888:	dd59      	ble.n	801793e <_dtoa_r+0x2f6>
 801788a:	9302      	str	r3, [sp, #8]
 801788c:	4699      	mov	r9, r3
 801788e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017890:	2200      	movs	r2, #0
 8017892:	6072      	str	r2, [r6, #4]
 8017894:	2204      	movs	r2, #4
 8017896:	f102 0014 	add.w	r0, r2, #20
 801789a:	4298      	cmp	r0, r3
 801789c:	6871      	ldr	r1, [r6, #4]
 801789e:	d953      	bls.n	8017948 <_dtoa_r+0x300>
 80178a0:	4620      	mov	r0, r4
 80178a2:	f000 fff6 	bl	8018892 <_Balloc>
 80178a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178a8:	6030      	str	r0, [r6, #0]
 80178aa:	f1b9 0f0e 	cmp.w	r9, #14
 80178ae:	f8d3 b000 	ldr.w	fp, [r3]
 80178b2:	f200 80e6 	bhi.w	8017a82 <_dtoa_r+0x43a>
 80178b6:	2d00      	cmp	r5, #0
 80178b8:	f000 80e3 	beq.w	8017a82 <_dtoa_r+0x43a>
 80178bc:	ed9d 7b00 	vldr	d7, [sp]
 80178c0:	f1ba 0f00 	cmp.w	sl, #0
 80178c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80178c8:	dd74      	ble.n	80179b4 <_dtoa_r+0x36c>
 80178ca:	4a2a      	ldr	r2, [pc, #168]	; (8017974 <_dtoa_r+0x32c>)
 80178cc:	f00a 030f 	and.w	r3, sl, #15
 80178d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80178d4:	ed93 7b00 	vldr	d7, [r3]
 80178d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80178dc:	06f0      	lsls	r0, r6, #27
 80178de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80178e2:	d565      	bpl.n	80179b0 <_dtoa_r+0x368>
 80178e4:	4b24      	ldr	r3, [pc, #144]	; (8017978 <_dtoa_r+0x330>)
 80178e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80178ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80178ee:	f7e8 ffc5 	bl	800087c <__aeabi_ddiv>
 80178f2:	e9cd 0100 	strd	r0, r1, [sp]
 80178f6:	f006 060f 	and.w	r6, r6, #15
 80178fa:	2503      	movs	r5, #3
 80178fc:	4f1e      	ldr	r7, [pc, #120]	; (8017978 <_dtoa_r+0x330>)
 80178fe:	e04c      	b.n	801799a <_dtoa_r+0x352>
 8017900:	2301      	movs	r3, #1
 8017902:	930a      	str	r3, [sp, #40]	; 0x28
 8017904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017906:	4453      	add	r3, sl
 8017908:	f103 0901 	add.w	r9, r3, #1
 801790c:	9302      	str	r3, [sp, #8]
 801790e:	464b      	mov	r3, r9
 8017910:	2b01      	cmp	r3, #1
 8017912:	bfb8      	it	lt
 8017914:	2301      	movlt	r3, #1
 8017916:	e7ba      	b.n	801788e <_dtoa_r+0x246>
 8017918:	2300      	movs	r3, #0
 801791a:	e7b2      	b.n	8017882 <_dtoa_r+0x23a>
 801791c:	2300      	movs	r3, #0
 801791e:	e7f0      	b.n	8017902 <_dtoa_r+0x2ba>
 8017920:	2501      	movs	r5, #1
 8017922:	2300      	movs	r3, #0
 8017924:	9306      	str	r3, [sp, #24]
 8017926:	950a      	str	r5, [sp, #40]	; 0x28
 8017928:	f04f 33ff 	mov.w	r3, #4294967295
 801792c:	9302      	str	r3, [sp, #8]
 801792e:	4699      	mov	r9, r3
 8017930:	2200      	movs	r2, #0
 8017932:	2312      	movs	r3, #18
 8017934:	920b      	str	r2, [sp, #44]	; 0x2c
 8017936:	e7aa      	b.n	801788e <_dtoa_r+0x246>
 8017938:	2301      	movs	r3, #1
 801793a:	930a      	str	r3, [sp, #40]	; 0x28
 801793c:	e7f4      	b.n	8017928 <_dtoa_r+0x2e0>
 801793e:	2301      	movs	r3, #1
 8017940:	9302      	str	r3, [sp, #8]
 8017942:	4699      	mov	r9, r3
 8017944:	461a      	mov	r2, r3
 8017946:	e7f5      	b.n	8017934 <_dtoa_r+0x2ec>
 8017948:	3101      	adds	r1, #1
 801794a:	6071      	str	r1, [r6, #4]
 801794c:	0052      	lsls	r2, r2, #1
 801794e:	e7a2      	b.n	8017896 <_dtoa_r+0x24e>
 8017950:	636f4361 	.word	0x636f4361
 8017954:	3fd287a7 	.word	0x3fd287a7
 8017958:	8b60c8b3 	.word	0x8b60c8b3
 801795c:	3fc68a28 	.word	0x3fc68a28
 8017960:	509f79fb 	.word	0x509f79fb
 8017964:	3fd34413 	.word	0x3fd34413
 8017968:	7ff00000 	.word	0x7ff00000
 801796c:	0801a644 	.word	0x0801a644
 8017970:	3ff80000 	.word	0x3ff80000
 8017974:	0801a548 	.word	0x0801a548
 8017978:	0801a520 	.word	0x0801a520
 801797c:	0801a511 	.word	0x0801a511
 8017980:	07f1      	lsls	r1, r6, #31
 8017982:	d508      	bpl.n	8017996 <_dtoa_r+0x34e>
 8017984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017988:	e9d7 2300 	ldrd	r2, r3, [r7]
 801798c:	f7e8 fe4c 	bl	8000628 <__aeabi_dmul>
 8017990:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017994:	3501      	adds	r5, #1
 8017996:	1076      	asrs	r6, r6, #1
 8017998:	3708      	adds	r7, #8
 801799a:	2e00      	cmp	r6, #0
 801799c:	d1f0      	bne.n	8017980 <_dtoa_r+0x338>
 801799e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80179a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179a6:	f7e8 ff69 	bl	800087c <__aeabi_ddiv>
 80179aa:	e9cd 0100 	strd	r0, r1, [sp]
 80179ae:	e01a      	b.n	80179e6 <_dtoa_r+0x39e>
 80179b0:	2502      	movs	r5, #2
 80179b2:	e7a3      	b.n	80178fc <_dtoa_r+0x2b4>
 80179b4:	f000 80a0 	beq.w	8017af8 <_dtoa_r+0x4b0>
 80179b8:	f1ca 0600 	rsb	r6, sl, #0
 80179bc:	4b9f      	ldr	r3, [pc, #636]	; (8017c3c <_dtoa_r+0x5f4>)
 80179be:	4fa0      	ldr	r7, [pc, #640]	; (8017c40 <_dtoa_r+0x5f8>)
 80179c0:	f006 020f 	and.w	r2, r6, #15
 80179c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80179d0:	f7e8 fe2a 	bl	8000628 <__aeabi_dmul>
 80179d4:	e9cd 0100 	strd	r0, r1, [sp]
 80179d8:	1136      	asrs	r6, r6, #4
 80179da:	2300      	movs	r3, #0
 80179dc:	2502      	movs	r5, #2
 80179de:	2e00      	cmp	r6, #0
 80179e0:	d17f      	bne.n	8017ae2 <_dtoa_r+0x49a>
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d1e1      	bne.n	80179aa <_dtoa_r+0x362>
 80179e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	f000 8087 	beq.w	8017afc <_dtoa_r+0x4b4>
 80179ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80179f2:	2200      	movs	r2, #0
 80179f4:	4b93      	ldr	r3, [pc, #588]	; (8017c44 <_dtoa_r+0x5fc>)
 80179f6:	4630      	mov	r0, r6
 80179f8:	4639      	mov	r1, r7
 80179fa:	f7e9 f887 	bl	8000b0c <__aeabi_dcmplt>
 80179fe:	2800      	cmp	r0, #0
 8017a00:	d07c      	beq.n	8017afc <_dtoa_r+0x4b4>
 8017a02:	f1b9 0f00 	cmp.w	r9, #0
 8017a06:	d079      	beq.n	8017afc <_dtoa_r+0x4b4>
 8017a08:	9b02      	ldr	r3, [sp, #8]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	dd35      	ble.n	8017a7a <_dtoa_r+0x432>
 8017a0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017a12:	9308      	str	r3, [sp, #32]
 8017a14:	4639      	mov	r1, r7
 8017a16:	2200      	movs	r2, #0
 8017a18:	4b8b      	ldr	r3, [pc, #556]	; (8017c48 <_dtoa_r+0x600>)
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f7e8 fe04 	bl	8000628 <__aeabi_dmul>
 8017a20:	e9cd 0100 	strd	r0, r1, [sp]
 8017a24:	9f02      	ldr	r7, [sp, #8]
 8017a26:	3501      	adds	r5, #1
 8017a28:	4628      	mov	r0, r5
 8017a2a:	f7e8 fd93 	bl	8000554 <__aeabi_i2d>
 8017a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a32:	f7e8 fdf9 	bl	8000628 <__aeabi_dmul>
 8017a36:	2200      	movs	r2, #0
 8017a38:	4b84      	ldr	r3, [pc, #528]	; (8017c4c <_dtoa_r+0x604>)
 8017a3a:	f7e8 fc3f 	bl	80002bc <__adddf3>
 8017a3e:	4605      	mov	r5, r0
 8017a40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017a44:	2f00      	cmp	r7, #0
 8017a46:	d15d      	bne.n	8017b04 <_dtoa_r+0x4bc>
 8017a48:	2200      	movs	r2, #0
 8017a4a:	4b81      	ldr	r3, [pc, #516]	; (8017c50 <_dtoa_r+0x608>)
 8017a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a50:	f7e8 fc32 	bl	80002b8 <__aeabi_dsub>
 8017a54:	462a      	mov	r2, r5
 8017a56:	4633      	mov	r3, r6
 8017a58:	e9cd 0100 	strd	r0, r1, [sp]
 8017a5c:	f7e9 f874 	bl	8000b48 <__aeabi_dcmpgt>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	f040 8288 	bne.w	8017f76 <_dtoa_r+0x92e>
 8017a66:	462a      	mov	r2, r5
 8017a68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a70:	f7e9 f84c 	bl	8000b0c <__aeabi_dcmplt>
 8017a74:	2800      	cmp	r0, #0
 8017a76:	f040 827c 	bne.w	8017f72 <_dtoa_r+0x92a>
 8017a7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a7e:	e9cd 2300 	strd	r2, r3, [sp]
 8017a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	f2c0 8150 	blt.w	8017d2a <_dtoa_r+0x6e2>
 8017a8a:	f1ba 0f0e 	cmp.w	sl, #14
 8017a8e:	f300 814c 	bgt.w	8017d2a <_dtoa_r+0x6e2>
 8017a92:	4b6a      	ldr	r3, [pc, #424]	; (8017c3c <_dtoa_r+0x5f4>)
 8017a94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017a98:	ed93 7b00 	vldr	d7, [r3]
 8017a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017aa4:	f280 80d8 	bge.w	8017c58 <_dtoa_r+0x610>
 8017aa8:	f1b9 0f00 	cmp.w	r9, #0
 8017aac:	f300 80d4 	bgt.w	8017c58 <_dtoa_r+0x610>
 8017ab0:	f040 825e 	bne.w	8017f70 <_dtoa_r+0x928>
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	4b66      	ldr	r3, [pc, #408]	; (8017c50 <_dtoa_r+0x608>)
 8017ab8:	ec51 0b17 	vmov	r0, r1, d7
 8017abc:	f7e8 fdb4 	bl	8000628 <__aeabi_dmul>
 8017ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ac4:	f7e9 f836 	bl	8000b34 <__aeabi_dcmpge>
 8017ac8:	464f      	mov	r7, r9
 8017aca:	464e      	mov	r6, r9
 8017acc:	2800      	cmp	r0, #0
 8017ace:	f040 8234 	bne.w	8017f3a <_dtoa_r+0x8f2>
 8017ad2:	2331      	movs	r3, #49	; 0x31
 8017ad4:	f10b 0501 	add.w	r5, fp, #1
 8017ad8:	f88b 3000 	strb.w	r3, [fp]
 8017adc:	f10a 0a01 	add.w	sl, sl, #1
 8017ae0:	e22f      	b.n	8017f42 <_dtoa_r+0x8fa>
 8017ae2:	07f2      	lsls	r2, r6, #31
 8017ae4:	d505      	bpl.n	8017af2 <_dtoa_r+0x4aa>
 8017ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017aea:	f7e8 fd9d 	bl	8000628 <__aeabi_dmul>
 8017aee:	3501      	adds	r5, #1
 8017af0:	2301      	movs	r3, #1
 8017af2:	1076      	asrs	r6, r6, #1
 8017af4:	3708      	adds	r7, #8
 8017af6:	e772      	b.n	80179de <_dtoa_r+0x396>
 8017af8:	2502      	movs	r5, #2
 8017afa:	e774      	b.n	80179e6 <_dtoa_r+0x39e>
 8017afc:	f8cd a020 	str.w	sl, [sp, #32]
 8017b00:	464f      	mov	r7, r9
 8017b02:	e791      	b.n	8017a28 <_dtoa_r+0x3e0>
 8017b04:	4b4d      	ldr	r3, [pc, #308]	; (8017c3c <_dtoa_r+0x5f4>)
 8017b06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017b0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d047      	beq.n	8017ba4 <_dtoa_r+0x55c>
 8017b14:	4602      	mov	r2, r0
 8017b16:	460b      	mov	r3, r1
 8017b18:	2000      	movs	r0, #0
 8017b1a:	494e      	ldr	r1, [pc, #312]	; (8017c54 <_dtoa_r+0x60c>)
 8017b1c:	f7e8 feae 	bl	800087c <__aeabi_ddiv>
 8017b20:	462a      	mov	r2, r5
 8017b22:	4633      	mov	r3, r6
 8017b24:	f7e8 fbc8 	bl	80002b8 <__aeabi_dsub>
 8017b28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b2c:	465d      	mov	r5, fp
 8017b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b32:	f7e9 f829 	bl	8000b88 <__aeabi_d2iz>
 8017b36:	4606      	mov	r6, r0
 8017b38:	f7e8 fd0c 	bl	8000554 <__aeabi_i2d>
 8017b3c:	4602      	mov	r2, r0
 8017b3e:	460b      	mov	r3, r1
 8017b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b44:	f7e8 fbb8 	bl	80002b8 <__aeabi_dsub>
 8017b48:	3630      	adds	r6, #48	; 0x30
 8017b4a:	f805 6b01 	strb.w	r6, [r5], #1
 8017b4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b52:	e9cd 0100 	strd	r0, r1, [sp]
 8017b56:	f7e8 ffd9 	bl	8000b0c <__aeabi_dcmplt>
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	d163      	bne.n	8017c26 <_dtoa_r+0x5de>
 8017b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b62:	2000      	movs	r0, #0
 8017b64:	4937      	ldr	r1, [pc, #220]	; (8017c44 <_dtoa_r+0x5fc>)
 8017b66:	f7e8 fba7 	bl	80002b8 <__aeabi_dsub>
 8017b6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b6e:	f7e8 ffcd 	bl	8000b0c <__aeabi_dcmplt>
 8017b72:	2800      	cmp	r0, #0
 8017b74:	f040 80b7 	bne.w	8017ce6 <_dtoa_r+0x69e>
 8017b78:	eba5 030b 	sub.w	r3, r5, fp
 8017b7c:	429f      	cmp	r7, r3
 8017b7e:	f77f af7c 	ble.w	8017a7a <_dtoa_r+0x432>
 8017b82:	2200      	movs	r2, #0
 8017b84:	4b30      	ldr	r3, [pc, #192]	; (8017c48 <_dtoa_r+0x600>)
 8017b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b8a:	f7e8 fd4d 	bl	8000628 <__aeabi_dmul>
 8017b8e:	2200      	movs	r2, #0
 8017b90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b94:	4b2c      	ldr	r3, [pc, #176]	; (8017c48 <_dtoa_r+0x600>)
 8017b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b9a:	f7e8 fd45 	bl	8000628 <__aeabi_dmul>
 8017b9e:	e9cd 0100 	strd	r0, r1, [sp]
 8017ba2:	e7c4      	b.n	8017b2e <_dtoa_r+0x4e6>
 8017ba4:	462a      	mov	r2, r5
 8017ba6:	4633      	mov	r3, r6
 8017ba8:	f7e8 fd3e 	bl	8000628 <__aeabi_dmul>
 8017bac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bb0:	eb0b 0507 	add.w	r5, fp, r7
 8017bb4:	465e      	mov	r6, fp
 8017bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bba:	f7e8 ffe5 	bl	8000b88 <__aeabi_d2iz>
 8017bbe:	4607      	mov	r7, r0
 8017bc0:	f7e8 fcc8 	bl	8000554 <__aeabi_i2d>
 8017bc4:	3730      	adds	r7, #48	; 0x30
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	460b      	mov	r3, r1
 8017bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bce:	f7e8 fb73 	bl	80002b8 <__aeabi_dsub>
 8017bd2:	f806 7b01 	strb.w	r7, [r6], #1
 8017bd6:	42ae      	cmp	r6, r5
 8017bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8017bdc:	f04f 0200 	mov.w	r2, #0
 8017be0:	d126      	bne.n	8017c30 <_dtoa_r+0x5e8>
 8017be2:	4b1c      	ldr	r3, [pc, #112]	; (8017c54 <_dtoa_r+0x60c>)
 8017be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017be8:	f7e8 fb68 	bl	80002bc <__adddf3>
 8017bec:	4602      	mov	r2, r0
 8017bee:	460b      	mov	r3, r1
 8017bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bf4:	f7e8 ffa8 	bl	8000b48 <__aeabi_dcmpgt>
 8017bf8:	2800      	cmp	r0, #0
 8017bfa:	d174      	bne.n	8017ce6 <_dtoa_r+0x69e>
 8017bfc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c00:	2000      	movs	r0, #0
 8017c02:	4914      	ldr	r1, [pc, #80]	; (8017c54 <_dtoa_r+0x60c>)
 8017c04:	f7e8 fb58 	bl	80002b8 <__aeabi_dsub>
 8017c08:	4602      	mov	r2, r0
 8017c0a:	460b      	mov	r3, r1
 8017c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c10:	f7e8 ff7c 	bl	8000b0c <__aeabi_dcmplt>
 8017c14:	2800      	cmp	r0, #0
 8017c16:	f43f af30 	beq.w	8017a7a <_dtoa_r+0x432>
 8017c1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c1e:	2b30      	cmp	r3, #48	; 0x30
 8017c20:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c24:	d002      	beq.n	8017c2c <_dtoa_r+0x5e4>
 8017c26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017c2a:	e04a      	b.n	8017cc2 <_dtoa_r+0x67a>
 8017c2c:	4615      	mov	r5, r2
 8017c2e:	e7f4      	b.n	8017c1a <_dtoa_r+0x5d2>
 8017c30:	4b05      	ldr	r3, [pc, #20]	; (8017c48 <_dtoa_r+0x600>)
 8017c32:	f7e8 fcf9 	bl	8000628 <__aeabi_dmul>
 8017c36:	e9cd 0100 	strd	r0, r1, [sp]
 8017c3a:	e7bc      	b.n	8017bb6 <_dtoa_r+0x56e>
 8017c3c:	0801a548 	.word	0x0801a548
 8017c40:	0801a520 	.word	0x0801a520
 8017c44:	3ff00000 	.word	0x3ff00000
 8017c48:	40240000 	.word	0x40240000
 8017c4c:	401c0000 	.word	0x401c0000
 8017c50:	40140000 	.word	0x40140000
 8017c54:	3fe00000 	.word	0x3fe00000
 8017c58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c5c:	465d      	mov	r5, fp
 8017c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c62:	4630      	mov	r0, r6
 8017c64:	4639      	mov	r1, r7
 8017c66:	f7e8 fe09 	bl	800087c <__aeabi_ddiv>
 8017c6a:	f7e8 ff8d 	bl	8000b88 <__aeabi_d2iz>
 8017c6e:	4680      	mov	r8, r0
 8017c70:	f7e8 fc70 	bl	8000554 <__aeabi_i2d>
 8017c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c78:	f7e8 fcd6 	bl	8000628 <__aeabi_dmul>
 8017c7c:	4602      	mov	r2, r0
 8017c7e:	460b      	mov	r3, r1
 8017c80:	4630      	mov	r0, r6
 8017c82:	4639      	mov	r1, r7
 8017c84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017c88:	f7e8 fb16 	bl	80002b8 <__aeabi_dsub>
 8017c8c:	f805 6b01 	strb.w	r6, [r5], #1
 8017c90:	eba5 060b 	sub.w	r6, r5, fp
 8017c94:	45b1      	cmp	r9, r6
 8017c96:	4602      	mov	r2, r0
 8017c98:	460b      	mov	r3, r1
 8017c9a:	d139      	bne.n	8017d10 <_dtoa_r+0x6c8>
 8017c9c:	f7e8 fb0e 	bl	80002bc <__adddf3>
 8017ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ca4:	4606      	mov	r6, r0
 8017ca6:	460f      	mov	r7, r1
 8017ca8:	f7e8 ff4e 	bl	8000b48 <__aeabi_dcmpgt>
 8017cac:	b9c8      	cbnz	r0, 8017ce2 <_dtoa_r+0x69a>
 8017cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cb2:	4630      	mov	r0, r6
 8017cb4:	4639      	mov	r1, r7
 8017cb6:	f7e8 ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8017cba:	b110      	cbz	r0, 8017cc2 <_dtoa_r+0x67a>
 8017cbc:	f018 0f01 	tst.w	r8, #1
 8017cc0:	d10f      	bne.n	8017ce2 <_dtoa_r+0x69a>
 8017cc2:	9904      	ldr	r1, [sp, #16]
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f000 fe18 	bl	80188fa <_Bfree>
 8017cca:	2300      	movs	r3, #0
 8017ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cce:	702b      	strb	r3, [r5, #0]
 8017cd0:	f10a 0301 	add.w	r3, sl, #1
 8017cd4:	6013      	str	r3, [r2, #0]
 8017cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	f000 8241 	beq.w	8018160 <_dtoa_r+0xb18>
 8017cde:	601d      	str	r5, [r3, #0]
 8017ce0:	e23e      	b.n	8018160 <_dtoa_r+0xb18>
 8017ce2:	f8cd a020 	str.w	sl, [sp, #32]
 8017ce6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017cea:	2a39      	cmp	r2, #57	; 0x39
 8017cec:	f105 33ff 	add.w	r3, r5, #4294967295
 8017cf0:	d108      	bne.n	8017d04 <_dtoa_r+0x6bc>
 8017cf2:	459b      	cmp	fp, r3
 8017cf4:	d10a      	bne.n	8017d0c <_dtoa_r+0x6c4>
 8017cf6:	9b08      	ldr	r3, [sp, #32]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	9308      	str	r3, [sp, #32]
 8017cfc:	2330      	movs	r3, #48	; 0x30
 8017cfe:	f88b 3000 	strb.w	r3, [fp]
 8017d02:	465b      	mov	r3, fp
 8017d04:	781a      	ldrb	r2, [r3, #0]
 8017d06:	3201      	adds	r2, #1
 8017d08:	701a      	strb	r2, [r3, #0]
 8017d0a:	e78c      	b.n	8017c26 <_dtoa_r+0x5de>
 8017d0c:	461d      	mov	r5, r3
 8017d0e:	e7ea      	b.n	8017ce6 <_dtoa_r+0x69e>
 8017d10:	2200      	movs	r2, #0
 8017d12:	4b9b      	ldr	r3, [pc, #620]	; (8017f80 <_dtoa_r+0x938>)
 8017d14:	f7e8 fc88 	bl	8000628 <__aeabi_dmul>
 8017d18:	2200      	movs	r2, #0
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	4606      	mov	r6, r0
 8017d1e:	460f      	mov	r7, r1
 8017d20:	f7e8 feea 	bl	8000af8 <__aeabi_dcmpeq>
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d09a      	beq.n	8017c5e <_dtoa_r+0x616>
 8017d28:	e7cb      	b.n	8017cc2 <_dtoa_r+0x67a>
 8017d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d2c:	2a00      	cmp	r2, #0
 8017d2e:	f000 808b 	beq.w	8017e48 <_dtoa_r+0x800>
 8017d32:	9a06      	ldr	r2, [sp, #24]
 8017d34:	2a01      	cmp	r2, #1
 8017d36:	dc6e      	bgt.n	8017e16 <_dtoa_r+0x7ce>
 8017d38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d3a:	2a00      	cmp	r2, #0
 8017d3c:	d067      	beq.n	8017e0e <_dtoa_r+0x7c6>
 8017d3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017d42:	9f07      	ldr	r7, [sp, #28]
 8017d44:	9d05      	ldr	r5, [sp, #20]
 8017d46:	9a05      	ldr	r2, [sp, #20]
 8017d48:	2101      	movs	r1, #1
 8017d4a:	441a      	add	r2, r3
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	9205      	str	r2, [sp, #20]
 8017d50:	4498      	add	r8, r3
 8017d52:	f000 feb0 	bl	8018ab6 <__i2b>
 8017d56:	4606      	mov	r6, r0
 8017d58:	2d00      	cmp	r5, #0
 8017d5a:	dd0c      	ble.n	8017d76 <_dtoa_r+0x72e>
 8017d5c:	f1b8 0f00 	cmp.w	r8, #0
 8017d60:	dd09      	ble.n	8017d76 <_dtoa_r+0x72e>
 8017d62:	4545      	cmp	r5, r8
 8017d64:	9a05      	ldr	r2, [sp, #20]
 8017d66:	462b      	mov	r3, r5
 8017d68:	bfa8      	it	ge
 8017d6a:	4643      	movge	r3, r8
 8017d6c:	1ad2      	subs	r2, r2, r3
 8017d6e:	9205      	str	r2, [sp, #20]
 8017d70:	1aed      	subs	r5, r5, r3
 8017d72:	eba8 0803 	sub.w	r8, r8, r3
 8017d76:	9b07      	ldr	r3, [sp, #28]
 8017d78:	b1eb      	cbz	r3, 8017db6 <_dtoa_r+0x76e>
 8017d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d067      	beq.n	8017e50 <_dtoa_r+0x808>
 8017d80:	b18f      	cbz	r7, 8017da6 <_dtoa_r+0x75e>
 8017d82:	4631      	mov	r1, r6
 8017d84:	463a      	mov	r2, r7
 8017d86:	4620      	mov	r0, r4
 8017d88:	f000 ff34 	bl	8018bf4 <__pow5mult>
 8017d8c:	9a04      	ldr	r2, [sp, #16]
 8017d8e:	4601      	mov	r1, r0
 8017d90:	4606      	mov	r6, r0
 8017d92:	4620      	mov	r0, r4
 8017d94:	f000 fe98 	bl	8018ac8 <__multiply>
 8017d98:	9904      	ldr	r1, [sp, #16]
 8017d9a:	9008      	str	r0, [sp, #32]
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	f000 fdac 	bl	80188fa <_Bfree>
 8017da2:	9b08      	ldr	r3, [sp, #32]
 8017da4:	9304      	str	r3, [sp, #16]
 8017da6:	9b07      	ldr	r3, [sp, #28]
 8017da8:	1bda      	subs	r2, r3, r7
 8017daa:	d004      	beq.n	8017db6 <_dtoa_r+0x76e>
 8017dac:	9904      	ldr	r1, [sp, #16]
 8017dae:	4620      	mov	r0, r4
 8017db0:	f000 ff20 	bl	8018bf4 <__pow5mult>
 8017db4:	9004      	str	r0, [sp, #16]
 8017db6:	2101      	movs	r1, #1
 8017db8:	4620      	mov	r0, r4
 8017dba:	f000 fe7c 	bl	8018ab6 <__i2b>
 8017dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017dc0:	4607      	mov	r7, r0
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	f000 81d0 	beq.w	8018168 <_dtoa_r+0xb20>
 8017dc8:	461a      	mov	r2, r3
 8017dca:	4601      	mov	r1, r0
 8017dcc:	4620      	mov	r0, r4
 8017dce:	f000 ff11 	bl	8018bf4 <__pow5mult>
 8017dd2:	9b06      	ldr	r3, [sp, #24]
 8017dd4:	2b01      	cmp	r3, #1
 8017dd6:	4607      	mov	r7, r0
 8017dd8:	dc40      	bgt.n	8017e5c <_dtoa_r+0x814>
 8017dda:	9b00      	ldr	r3, [sp, #0]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d139      	bne.n	8017e54 <_dtoa_r+0x80c>
 8017de0:	9b01      	ldr	r3, [sp, #4]
 8017de2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d136      	bne.n	8017e58 <_dtoa_r+0x810>
 8017dea:	9b01      	ldr	r3, [sp, #4]
 8017dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017df0:	0d1b      	lsrs	r3, r3, #20
 8017df2:	051b      	lsls	r3, r3, #20
 8017df4:	b12b      	cbz	r3, 8017e02 <_dtoa_r+0x7ba>
 8017df6:	9b05      	ldr	r3, [sp, #20]
 8017df8:	3301      	adds	r3, #1
 8017dfa:	9305      	str	r3, [sp, #20]
 8017dfc:	f108 0801 	add.w	r8, r8, #1
 8017e00:	2301      	movs	r3, #1
 8017e02:	9307      	str	r3, [sp, #28]
 8017e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d12a      	bne.n	8017e60 <_dtoa_r+0x818>
 8017e0a:	2001      	movs	r0, #1
 8017e0c:	e030      	b.n	8017e70 <_dtoa_r+0x828>
 8017e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017e14:	e795      	b.n	8017d42 <_dtoa_r+0x6fa>
 8017e16:	9b07      	ldr	r3, [sp, #28]
 8017e18:	f109 37ff 	add.w	r7, r9, #4294967295
 8017e1c:	42bb      	cmp	r3, r7
 8017e1e:	bfbf      	itttt	lt
 8017e20:	9b07      	ldrlt	r3, [sp, #28]
 8017e22:	9707      	strlt	r7, [sp, #28]
 8017e24:	1afa      	sublt	r2, r7, r3
 8017e26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017e28:	bfbb      	ittet	lt
 8017e2a:	189b      	addlt	r3, r3, r2
 8017e2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e2e:	1bdf      	subge	r7, r3, r7
 8017e30:	2700      	movlt	r7, #0
 8017e32:	f1b9 0f00 	cmp.w	r9, #0
 8017e36:	bfb5      	itete	lt
 8017e38:	9b05      	ldrlt	r3, [sp, #20]
 8017e3a:	9d05      	ldrge	r5, [sp, #20]
 8017e3c:	eba3 0509 	sublt.w	r5, r3, r9
 8017e40:	464b      	movge	r3, r9
 8017e42:	bfb8      	it	lt
 8017e44:	2300      	movlt	r3, #0
 8017e46:	e77e      	b.n	8017d46 <_dtoa_r+0x6fe>
 8017e48:	9f07      	ldr	r7, [sp, #28]
 8017e4a:	9d05      	ldr	r5, [sp, #20]
 8017e4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017e4e:	e783      	b.n	8017d58 <_dtoa_r+0x710>
 8017e50:	9a07      	ldr	r2, [sp, #28]
 8017e52:	e7ab      	b.n	8017dac <_dtoa_r+0x764>
 8017e54:	2300      	movs	r3, #0
 8017e56:	e7d4      	b.n	8017e02 <_dtoa_r+0x7ba>
 8017e58:	9b00      	ldr	r3, [sp, #0]
 8017e5a:	e7d2      	b.n	8017e02 <_dtoa_r+0x7ba>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	9307      	str	r3, [sp, #28]
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017e66:	6918      	ldr	r0, [r3, #16]
 8017e68:	f000 fdd7 	bl	8018a1a <__hi0bits>
 8017e6c:	f1c0 0020 	rsb	r0, r0, #32
 8017e70:	4440      	add	r0, r8
 8017e72:	f010 001f 	ands.w	r0, r0, #31
 8017e76:	d047      	beq.n	8017f08 <_dtoa_r+0x8c0>
 8017e78:	f1c0 0320 	rsb	r3, r0, #32
 8017e7c:	2b04      	cmp	r3, #4
 8017e7e:	dd3b      	ble.n	8017ef8 <_dtoa_r+0x8b0>
 8017e80:	9b05      	ldr	r3, [sp, #20]
 8017e82:	f1c0 001c 	rsb	r0, r0, #28
 8017e86:	4403      	add	r3, r0
 8017e88:	9305      	str	r3, [sp, #20]
 8017e8a:	4405      	add	r5, r0
 8017e8c:	4480      	add	r8, r0
 8017e8e:	9b05      	ldr	r3, [sp, #20]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	dd05      	ble.n	8017ea0 <_dtoa_r+0x858>
 8017e94:	461a      	mov	r2, r3
 8017e96:	9904      	ldr	r1, [sp, #16]
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f000 fef9 	bl	8018c90 <__lshift>
 8017e9e:	9004      	str	r0, [sp, #16]
 8017ea0:	f1b8 0f00 	cmp.w	r8, #0
 8017ea4:	dd05      	ble.n	8017eb2 <_dtoa_r+0x86a>
 8017ea6:	4639      	mov	r1, r7
 8017ea8:	4642      	mov	r2, r8
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f000 fef0 	bl	8018c90 <__lshift>
 8017eb0:	4607      	mov	r7, r0
 8017eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017eb4:	b353      	cbz	r3, 8017f0c <_dtoa_r+0x8c4>
 8017eb6:	4639      	mov	r1, r7
 8017eb8:	9804      	ldr	r0, [sp, #16]
 8017eba:	f000 ff3d 	bl	8018d38 <__mcmp>
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	da24      	bge.n	8017f0c <_dtoa_r+0x8c4>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	220a      	movs	r2, #10
 8017ec6:	9904      	ldr	r1, [sp, #16]
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f000 fd2d 	bl	8018928 <__multadd>
 8017ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ed0:	9004      	str	r0, [sp, #16]
 8017ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	f000 814d 	beq.w	8018176 <_dtoa_r+0xb2e>
 8017edc:	2300      	movs	r3, #0
 8017ede:	4631      	mov	r1, r6
 8017ee0:	220a      	movs	r2, #10
 8017ee2:	4620      	mov	r0, r4
 8017ee4:	f000 fd20 	bl	8018928 <__multadd>
 8017ee8:	9b02      	ldr	r3, [sp, #8]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	4606      	mov	r6, r0
 8017eee:	dc4f      	bgt.n	8017f90 <_dtoa_r+0x948>
 8017ef0:	9b06      	ldr	r3, [sp, #24]
 8017ef2:	2b02      	cmp	r3, #2
 8017ef4:	dd4c      	ble.n	8017f90 <_dtoa_r+0x948>
 8017ef6:	e011      	b.n	8017f1c <_dtoa_r+0x8d4>
 8017ef8:	d0c9      	beq.n	8017e8e <_dtoa_r+0x846>
 8017efa:	9a05      	ldr	r2, [sp, #20]
 8017efc:	331c      	adds	r3, #28
 8017efe:	441a      	add	r2, r3
 8017f00:	9205      	str	r2, [sp, #20]
 8017f02:	441d      	add	r5, r3
 8017f04:	4498      	add	r8, r3
 8017f06:	e7c2      	b.n	8017e8e <_dtoa_r+0x846>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	e7f6      	b.n	8017efa <_dtoa_r+0x8b2>
 8017f0c:	f1b9 0f00 	cmp.w	r9, #0
 8017f10:	dc38      	bgt.n	8017f84 <_dtoa_r+0x93c>
 8017f12:	9b06      	ldr	r3, [sp, #24]
 8017f14:	2b02      	cmp	r3, #2
 8017f16:	dd35      	ble.n	8017f84 <_dtoa_r+0x93c>
 8017f18:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f1c:	9b02      	ldr	r3, [sp, #8]
 8017f1e:	b963      	cbnz	r3, 8017f3a <_dtoa_r+0x8f2>
 8017f20:	4639      	mov	r1, r7
 8017f22:	2205      	movs	r2, #5
 8017f24:	4620      	mov	r0, r4
 8017f26:	f000 fcff 	bl	8018928 <__multadd>
 8017f2a:	4601      	mov	r1, r0
 8017f2c:	4607      	mov	r7, r0
 8017f2e:	9804      	ldr	r0, [sp, #16]
 8017f30:	f000 ff02 	bl	8018d38 <__mcmp>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	f73f adcc 	bgt.w	8017ad2 <_dtoa_r+0x48a>
 8017f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f3c:	465d      	mov	r5, fp
 8017f3e:	ea6f 0a03 	mvn.w	sl, r3
 8017f42:	f04f 0900 	mov.w	r9, #0
 8017f46:	4639      	mov	r1, r7
 8017f48:	4620      	mov	r0, r4
 8017f4a:	f000 fcd6 	bl	80188fa <_Bfree>
 8017f4e:	2e00      	cmp	r6, #0
 8017f50:	f43f aeb7 	beq.w	8017cc2 <_dtoa_r+0x67a>
 8017f54:	f1b9 0f00 	cmp.w	r9, #0
 8017f58:	d005      	beq.n	8017f66 <_dtoa_r+0x91e>
 8017f5a:	45b1      	cmp	r9, r6
 8017f5c:	d003      	beq.n	8017f66 <_dtoa_r+0x91e>
 8017f5e:	4649      	mov	r1, r9
 8017f60:	4620      	mov	r0, r4
 8017f62:	f000 fcca 	bl	80188fa <_Bfree>
 8017f66:	4631      	mov	r1, r6
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f000 fcc6 	bl	80188fa <_Bfree>
 8017f6e:	e6a8      	b.n	8017cc2 <_dtoa_r+0x67a>
 8017f70:	2700      	movs	r7, #0
 8017f72:	463e      	mov	r6, r7
 8017f74:	e7e1      	b.n	8017f3a <_dtoa_r+0x8f2>
 8017f76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017f7a:	463e      	mov	r6, r7
 8017f7c:	e5a9      	b.n	8017ad2 <_dtoa_r+0x48a>
 8017f7e:	bf00      	nop
 8017f80:	40240000 	.word	0x40240000
 8017f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f86:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	f000 80fa 	beq.w	8018184 <_dtoa_r+0xb3c>
 8017f90:	2d00      	cmp	r5, #0
 8017f92:	dd05      	ble.n	8017fa0 <_dtoa_r+0x958>
 8017f94:	4631      	mov	r1, r6
 8017f96:	462a      	mov	r2, r5
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f000 fe79 	bl	8018c90 <__lshift>
 8017f9e:	4606      	mov	r6, r0
 8017fa0:	9b07      	ldr	r3, [sp, #28]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d04c      	beq.n	8018040 <_dtoa_r+0x9f8>
 8017fa6:	6871      	ldr	r1, [r6, #4]
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f000 fc72 	bl	8018892 <_Balloc>
 8017fae:	6932      	ldr	r2, [r6, #16]
 8017fb0:	3202      	adds	r2, #2
 8017fb2:	4605      	mov	r5, r0
 8017fb4:	0092      	lsls	r2, r2, #2
 8017fb6:	f106 010c 	add.w	r1, r6, #12
 8017fba:	300c      	adds	r0, #12
 8017fbc:	f000 fc5e 	bl	801887c <memcpy>
 8017fc0:	2201      	movs	r2, #1
 8017fc2:	4629      	mov	r1, r5
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f000 fe63 	bl	8018c90 <__lshift>
 8017fca:	9b00      	ldr	r3, [sp, #0]
 8017fcc:	f8cd b014 	str.w	fp, [sp, #20]
 8017fd0:	f003 0301 	and.w	r3, r3, #1
 8017fd4:	46b1      	mov	r9, r6
 8017fd6:	9307      	str	r3, [sp, #28]
 8017fd8:	4606      	mov	r6, r0
 8017fda:	4639      	mov	r1, r7
 8017fdc:	9804      	ldr	r0, [sp, #16]
 8017fde:	f7ff faa5 	bl	801752c <quorem>
 8017fe2:	4649      	mov	r1, r9
 8017fe4:	4605      	mov	r5, r0
 8017fe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017fea:	9804      	ldr	r0, [sp, #16]
 8017fec:	f000 fea4 	bl	8018d38 <__mcmp>
 8017ff0:	4632      	mov	r2, r6
 8017ff2:	9000      	str	r0, [sp, #0]
 8017ff4:	4639      	mov	r1, r7
 8017ff6:	4620      	mov	r0, r4
 8017ff8:	f000 feb8 	bl	8018d6c <__mdiff>
 8017ffc:	68c3      	ldr	r3, [r0, #12]
 8017ffe:	4602      	mov	r2, r0
 8018000:	bb03      	cbnz	r3, 8018044 <_dtoa_r+0x9fc>
 8018002:	4601      	mov	r1, r0
 8018004:	9008      	str	r0, [sp, #32]
 8018006:	9804      	ldr	r0, [sp, #16]
 8018008:	f000 fe96 	bl	8018d38 <__mcmp>
 801800c:	9a08      	ldr	r2, [sp, #32]
 801800e:	4603      	mov	r3, r0
 8018010:	4611      	mov	r1, r2
 8018012:	4620      	mov	r0, r4
 8018014:	9308      	str	r3, [sp, #32]
 8018016:	f000 fc70 	bl	80188fa <_Bfree>
 801801a:	9b08      	ldr	r3, [sp, #32]
 801801c:	b9a3      	cbnz	r3, 8018048 <_dtoa_r+0xa00>
 801801e:	9a06      	ldr	r2, [sp, #24]
 8018020:	b992      	cbnz	r2, 8018048 <_dtoa_r+0xa00>
 8018022:	9a07      	ldr	r2, [sp, #28]
 8018024:	b982      	cbnz	r2, 8018048 <_dtoa_r+0xa00>
 8018026:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801802a:	d029      	beq.n	8018080 <_dtoa_r+0xa38>
 801802c:	9b00      	ldr	r3, [sp, #0]
 801802e:	2b00      	cmp	r3, #0
 8018030:	dd01      	ble.n	8018036 <_dtoa_r+0x9ee>
 8018032:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018036:	9b05      	ldr	r3, [sp, #20]
 8018038:	1c5d      	adds	r5, r3, #1
 801803a:	f883 8000 	strb.w	r8, [r3]
 801803e:	e782      	b.n	8017f46 <_dtoa_r+0x8fe>
 8018040:	4630      	mov	r0, r6
 8018042:	e7c2      	b.n	8017fca <_dtoa_r+0x982>
 8018044:	2301      	movs	r3, #1
 8018046:	e7e3      	b.n	8018010 <_dtoa_r+0x9c8>
 8018048:	9a00      	ldr	r2, [sp, #0]
 801804a:	2a00      	cmp	r2, #0
 801804c:	db04      	blt.n	8018058 <_dtoa_r+0xa10>
 801804e:	d125      	bne.n	801809c <_dtoa_r+0xa54>
 8018050:	9a06      	ldr	r2, [sp, #24]
 8018052:	bb1a      	cbnz	r2, 801809c <_dtoa_r+0xa54>
 8018054:	9a07      	ldr	r2, [sp, #28]
 8018056:	bb0a      	cbnz	r2, 801809c <_dtoa_r+0xa54>
 8018058:	2b00      	cmp	r3, #0
 801805a:	ddec      	ble.n	8018036 <_dtoa_r+0x9ee>
 801805c:	2201      	movs	r2, #1
 801805e:	9904      	ldr	r1, [sp, #16]
 8018060:	4620      	mov	r0, r4
 8018062:	f000 fe15 	bl	8018c90 <__lshift>
 8018066:	4639      	mov	r1, r7
 8018068:	9004      	str	r0, [sp, #16]
 801806a:	f000 fe65 	bl	8018d38 <__mcmp>
 801806e:	2800      	cmp	r0, #0
 8018070:	dc03      	bgt.n	801807a <_dtoa_r+0xa32>
 8018072:	d1e0      	bne.n	8018036 <_dtoa_r+0x9ee>
 8018074:	f018 0f01 	tst.w	r8, #1
 8018078:	d0dd      	beq.n	8018036 <_dtoa_r+0x9ee>
 801807a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801807e:	d1d8      	bne.n	8018032 <_dtoa_r+0x9ea>
 8018080:	9b05      	ldr	r3, [sp, #20]
 8018082:	9a05      	ldr	r2, [sp, #20]
 8018084:	1c5d      	adds	r5, r3, #1
 8018086:	2339      	movs	r3, #57	; 0x39
 8018088:	7013      	strb	r3, [r2, #0]
 801808a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801808e:	2b39      	cmp	r3, #57	; 0x39
 8018090:	f105 32ff 	add.w	r2, r5, #4294967295
 8018094:	d04f      	beq.n	8018136 <_dtoa_r+0xaee>
 8018096:	3301      	adds	r3, #1
 8018098:	7013      	strb	r3, [r2, #0]
 801809a:	e754      	b.n	8017f46 <_dtoa_r+0x8fe>
 801809c:	9a05      	ldr	r2, [sp, #20]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	f102 0501 	add.w	r5, r2, #1
 80180a4:	dd06      	ble.n	80180b4 <_dtoa_r+0xa6c>
 80180a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180aa:	d0e9      	beq.n	8018080 <_dtoa_r+0xa38>
 80180ac:	f108 0801 	add.w	r8, r8, #1
 80180b0:	9b05      	ldr	r3, [sp, #20]
 80180b2:	e7c2      	b.n	801803a <_dtoa_r+0x9f2>
 80180b4:	9a02      	ldr	r2, [sp, #8]
 80180b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80180ba:	eba5 030b 	sub.w	r3, r5, fp
 80180be:	4293      	cmp	r3, r2
 80180c0:	d021      	beq.n	8018106 <_dtoa_r+0xabe>
 80180c2:	2300      	movs	r3, #0
 80180c4:	220a      	movs	r2, #10
 80180c6:	9904      	ldr	r1, [sp, #16]
 80180c8:	4620      	mov	r0, r4
 80180ca:	f000 fc2d 	bl	8018928 <__multadd>
 80180ce:	45b1      	cmp	r9, r6
 80180d0:	9004      	str	r0, [sp, #16]
 80180d2:	f04f 0300 	mov.w	r3, #0
 80180d6:	f04f 020a 	mov.w	r2, #10
 80180da:	4649      	mov	r1, r9
 80180dc:	4620      	mov	r0, r4
 80180de:	d105      	bne.n	80180ec <_dtoa_r+0xaa4>
 80180e0:	f000 fc22 	bl	8018928 <__multadd>
 80180e4:	4681      	mov	r9, r0
 80180e6:	4606      	mov	r6, r0
 80180e8:	9505      	str	r5, [sp, #20]
 80180ea:	e776      	b.n	8017fda <_dtoa_r+0x992>
 80180ec:	f000 fc1c 	bl	8018928 <__multadd>
 80180f0:	4631      	mov	r1, r6
 80180f2:	4681      	mov	r9, r0
 80180f4:	2300      	movs	r3, #0
 80180f6:	220a      	movs	r2, #10
 80180f8:	4620      	mov	r0, r4
 80180fa:	f000 fc15 	bl	8018928 <__multadd>
 80180fe:	4606      	mov	r6, r0
 8018100:	e7f2      	b.n	80180e8 <_dtoa_r+0xaa0>
 8018102:	f04f 0900 	mov.w	r9, #0
 8018106:	2201      	movs	r2, #1
 8018108:	9904      	ldr	r1, [sp, #16]
 801810a:	4620      	mov	r0, r4
 801810c:	f000 fdc0 	bl	8018c90 <__lshift>
 8018110:	4639      	mov	r1, r7
 8018112:	9004      	str	r0, [sp, #16]
 8018114:	f000 fe10 	bl	8018d38 <__mcmp>
 8018118:	2800      	cmp	r0, #0
 801811a:	dcb6      	bgt.n	801808a <_dtoa_r+0xa42>
 801811c:	d102      	bne.n	8018124 <_dtoa_r+0xadc>
 801811e:	f018 0f01 	tst.w	r8, #1
 8018122:	d1b2      	bne.n	801808a <_dtoa_r+0xa42>
 8018124:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018128:	2b30      	cmp	r3, #48	; 0x30
 801812a:	f105 32ff 	add.w	r2, r5, #4294967295
 801812e:	f47f af0a 	bne.w	8017f46 <_dtoa_r+0x8fe>
 8018132:	4615      	mov	r5, r2
 8018134:	e7f6      	b.n	8018124 <_dtoa_r+0xadc>
 8018136:	4593      	cmp	fp, r2
 8018138:	d105      	bne.n	8018146 <_dtoa_r+0xafe>
 801813a:	2331      	movs	r3, #49	; 0x31
 801813c:	f10a 0a01 	add.w	sl, sl, #1
 8018140:	f88b 3000 	strb.w	r3, [fp]
 8018144:	e6ff      	b.n	8017f46 <_dtoa_r+0x8fe>
 8018146:	4615      	mov	r5, r2
 8018148:	e79f      	b.n	801808a <_dtoa_r+0xa42>
 801814a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80181b0 <_dtoa_r+0xb68>
 801814e:	e007      	b.n	8018160 <_dtoa_r+0xb18>
 8018150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018152:	f8df b060 	ldr.w	fp, [pc, #96]	; 80181b4 <_dtoa_r+0xb6c>
 8018156:	b11b      	cbz	r3, 8018160 <_dtoa_r+0xb18>
 8018158:	f10b 0308 	add.w	r3, fp, #8
 801815c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801815e:	6013      	str	r3, [r2, #0]
 8018160:	4658      	mov	r0, fp
 8018162:	b017      	add	sp, #92	; 0x5c
 8018164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018168:	9b06      	ldr	r3, [sp, #24]
 801816a:	2b01      	cmp	r3, #1
 801816c:	f77f ae35 	ble.w	8017dda <_dtoa_r+0x792>
 8018170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018172:	9307      	str	r3, [sp, #28]
 8018174:	e649      	b.n	8017e0a <_dtoa_r+0x7c2>
 8018176:	9b02      	ldr	r3, [sp, #8]
 8018178:	2b00      	cmp	r3, #0
 801817a:	dc03      	bgt.n	8018184 <_dtoa_r+0xb3c>
 801817c:	9b06      	ldr	r3, [sp, #24]
 801817e:	2b02      	cmp	r3, #2
 8018180:	f73f aecc 	bgt.w	8017f1c <_dtoa_r+0x8d4>
 8018184:	465d      	mov	r5, fp
 8018186:	4639      	mov	r1, r7
 8018188:	9804      	ldr	r0, [sp, #16]
 801818a:	f7ff f9cf 	bl	801752c <quorem>
 801818e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018192:	f805 8b01 	strb.w	r8, [r5], #1
 8018196:	9a02      	ldr	r2, [sp, #8]
 8018198:	eba5 030b 	sub.w	r3, r5, fp
 801819c:	429a      	cmp	r2, r3
 801819e:	ddb0      	ble.n	8018102 <_dtoa_r+0xaba>
 80181a0:	2300      	movs	r3, #0
 80181a2:	220a      	movs	r2, #10
 80181a4:	9904      	ldr	r1, [sp, #16]
 80181a6:	4620      	mov	r0, r4
 80181a8:	f000 fbbe 	bl	8018928 <__multadd>
 80181ac:	9004      	str	r0, [sp, #16]
 80181ae:	e7ea      	b.n	8018186 <_dtoa_r+0xb3e>
 80181b0:	0801a643 	.word	0x0801a643
 80181b4:	0801a508 	.word	0x0801a508

080181b8 <rshift>:
 80181b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ba:	6906      	ldr	r6, [r0, #16]
 80181bc:	114b      	asrs	r3, r1, #5
 80181be:	429e      	cmp	r6, r3
 80181c0:	f100 0414 	add.w	r4, r0, #20
 80181c4:	dd30      	ble.n	8018228 <rshift+0x70>
 80181c6:	f011 011f 	ands.w	r1, r1, #31
 80181ca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80181ce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80181d2:	d108      	bne.n	80181e6 <rshift+0x2e>
 80181d4:	4621      	mov	r1, r4
 80181d6:	42b2      	cmp	r2, r6
 80181d8:	460b      	mov	r3, r1
 80181da:	d211      	bcs.n	8018200 <rshift+0x48>
 80181dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80181e0:	f841 3b04 	str.w	r3, [r1], #4
 80181e4:	e7f7      	b.n	80181d6 <rshift+0x1e>
 80181e6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80181ea:	f1c1 0c20 	rsb	ip, r1, #32
 80181ee:	40cd      	lsrs	r5, r1
 80181f0:	3204      	adds	r2, #4
 80181f2:	4623      	mov	r3, r4
 80181f4:	42b2      	cmp	r2, r6
 80181f6:	4617      	mov	r7, r2
 80181f8:	d30c      	bcc.n	8018214 <rshift+0x5c>
 80181fa:	601d      	str	r5, [r3, #0]
 80181fc:	b105      	cbz	r5, 8018200 <rshift+0x48>
 80181fe:	3304      	adds	r3, #4
 8018200:	1b1a      	subs	r2, r3, r4
 8018202:	42a3      	cmp	r3, r4
 8018204:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018208:	bf08      	it	eq
 801820a:	2300      	moveq	r3, #0
 801820c:	6102      	str	r2, [r0, #16]
 801820e:	bf08      	it	eq
 8018210:	6143      	streq	r3, [r0, #20]
 8018212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018214:	683f      	ldr	r7, [r7, #0]
 8018216:	fa07 f70c 	lsl.w	r7, r7, ip
 801821a:	433d      	orrs	r5, r7
 801821c:	f843 5b04 	str.w	r5, [r3], #4
 8018220:	f852 5b04 	ldr.w	r5, [r2], #4
 8018224:	40cd      	lsrs	r5, r1
 8018226:	e7e5      	b.n	80181f4 <rshift+0x3c>
 8018228:	4623      	mov	r3, r4
 801822a:	e7e9      	b.n	8018200 <rshift+0x48>

0801822c <__hexdig_fun>:
 801822c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018230:	2b09      	cmp	r3, #9
 8018232:	d802      	bhi.n	801823a <__hexdig_fun+0xe>
 8018234:	3820      	subs	r0, #32
 8018236:	b2c0      	uxtb	r0, r0
 8018238:	4770      	bx	lr
 801823a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801823e:	2b05      	cmp	r3, #5
 8018240:	d801      	bhi.n	8018246 <__hexdig_fun+0x1a>
 8018242:	3847      	subs	r0, #71	; 0x47
 8018244:	e7f7      	b.n	8018236 <__hexdig_fun+0xa>
 8018246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801824a:	2b05      	cmp	r3, #5
 801824c:	d801      	bhi.n	8018252 <__hexdig_fun+0x26>
 801824e:	3827      	subs	r0, #39	; 0x27
 8018250:	e7f1      	b.n	8018236 <__hexdig_fun+0xa>
 8018252:	2000      	movs	r0, #0
 8018254:	4770      	bx	lr

08018256 <__gethex>:
 8018256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801825a:	b08b      	sub	sp, #44	; 0x2c
 801825c:	468a      	mov	sl, r1
 801825e:	9002      	str	r0, [sp, #8]
 8018260:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018262:	9306      	str	r3, [sp, #24]
 8018264:	4690      	mov	r8, r2
 8018266:	f000 fadf 	bl	8018828 <__localeconv_l>
 801826a:	6803      	ldr	r3, [r0, #0]
 801826c:	9303      	str	r3, [sp, #12]
 801826e:	4618      	mov	r0, r3
 8018270:	f7e7 ffc6 	bl	8000200 <strlen>
 8018274:	9b03      	ldr	r3, [sp, #12]
 8018276:	9001      	str	r0, [sp, #4]
 8018278:	4403      	add	r3, r0
 801827a:	f04f 0b00 	mov.w	fp, #0
 801827e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018282:	9307      	str	r3, [sp, #28]
 8018284:	f8da 3000 	ldr.w	r3, [sl]
 8018288:	3302      	adds	r3, #2
 801828a:	461f      	mov	r7, r3
 801828c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018290:	2830      	cmp	r0, #48	; 0x30
 8018292:	d06c      	beq.n	801836e <__gethex+0x118>
 8018294:	f7ff ffca 	bl	801822c <__hexdig_fun>
 8018298:	4604      	mov	r4, r0
 801829a:	2800      	cmp	r0, #0
 801829c:	d16a      	bne.n	8018374 <__gethex+0x11e>
 801829e:	9a01      	ldr	r2, [sp, #4]
 80182a0:	9903      	ldr	r1, [sp, #12]
 80182a2:	4638      	mov	r0, r7
 80182a4:	f001 fc40 	bl	8019b28 <strncmp>
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d166      	bne.n	801837a <__gethex+0x124>
 80182ac:	9b01      	ldr	r3, [sp, #4]
 80182ae:	5cf8      	ldrb	r0, [r7, r3]
 80182b0:	18fe      	adds	r6, r7, r3
 80182b2:	f7ff ffbb 	bl	801822c <__hexdig_fun>
 80182b6:	2800      	cmp	r0, #0
 80182b8:	d062      	beq.n	8018380 <__gethex+0x12a>
 80182ba:	4633      	mov	r3, r6
 80182bc:	7818      	ldrb	r0, [r3, #0]
 80182be:	2830      	cmp	r0, #48	; 0x30
 80182c0:	461f      	mov	r7, r3
 80182c2:	f103 0301 	add.w	r3, r3, #1
 80182c6:	d0f9      	beq.n	80182bc <__gethex+0x66>
 80182c8:	f7ff ffb0 	bl	801822c <__hexdig_fun>
 80182cc:	fab0 f580 	clz	r5, r0
 80182d0:	096d      	lsrs	r5, r5, #5
 80182d2:	4634      	mov	r4, r6
 80182d4:	f04f 0b01 	mov.w	fp, #1
 80182d8:	463a      	mov	r2, r7
 80182da:	4616      	mov	r6, r2
 80182dc:	3201      	adds	r2, #1
 80182de:	7830      	ldrb	r0, [r6, #0]
 80182e0:	f7ff ffa4 	bl	801822c <__hexdig_fun>
 80182e4:	2800      	cmp	r0, #0
 80182e6:	d1f8      	bne.n	80182da <__gethex+0x84>
 80182e8:	9a01      	ldr	r2, [sp, #4]
 80182ea:	9903      	ldr	r1, [sp, #12]
 80182ec:	4630      	mov	r0, r6
 80182ee:	f001 fc1b 	bl	8019b28 <strncmp>
 80182f2:	b950      	cbnz	r0, 801830a <__gethex+0xb4>
 80182f4:	b954      	cbnz	r4, 801830c <__gethex+0xb6>
 80182f6:	9b01      	ldr	r3, [sp, #4]
 80182f8:	18f4      	adds	r4, r6, r3
 80182fa:	4622      	mov	r2, r4
 80182fc:	4616      	mov	r6, r2
 80182fe:	3201      	adds	r2, #1
 8018300:	7830      	ldrb	r0, [r6, #0]
 8018302:	f7ff ff93 	bl	801822c <__hexdig_fun>
 8018306:	2800      	cmp	r0, #0
 8018308:	d1f8      	bne.n	80182fc <__gethex+0xa6>
 801830a:	b10c      	cbz	r4, 8018310 <__gethex+0xba>
 801830c:	1ba4      	subs	r4, r4, r6
 801830e:	00a4      	lsls	r4, r4, #2
 8018310:	7833      	ldrb	r3, [r6, #0]
 8018312:	2b50      	cmp	r3, #80	; 0x50
 8018314:	d001      	beq.n	801831a <__gethex+0xc4>
 8018316:	2b70      	cmp	r3, #112	; 0x70
 8018318:	d140      	bne.n	801839c <__gethex+0x146>
 801831a:	7873      	ldrb	r3, [r6, #1]
 801831c:	2b2b      	cmp	r3, #43	; 0x2b
 801831e:	d031      	beq.n	8018384 <__gethex+0x12e>
 8018320:	2b2d      	cmp	r3, #45	; 0x2d
 8018322:	d033      	beq.n	801838c <__gethex+0x136>
 8018324:	1c71      	adds	r1, r6, #1
 8018326:	f04f 0900 	mov.w	r9, #0
 801832a:	7808      	ldrb	r0, [r1, #0]
 801832c:	f7ff ff7e 	bl	801822c <__hexdig_fun>
 8018330:	1e43      	subs	r3, r0, #1
 8018332:	b2db      	uxtb	r3, r3
 8018334:	2b18      	cmp	r3, #24
 8018336:	d831      	bhi.n	801839c <__gethex+0x146>
 8018338:	f1a0 0210 	sub.w	r2, r0, #16
 801833c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018340:	f7ff ff74 	bl	801822c <__hexdig_fun>
 8018344:	1e43      	subs	r3, r0, #1
 8018346:	b2db      	uxtb	r3, r3
 8018348:	2b18      	cmp	r3, #24
 801834a:	d922      	bls.n	8018392 <__gethex+0x13c>
 801834c:	f1b9 0f00 	cmp.w	r9, #0
 8018350:	d000      	beq.n	8018354 <__gethex+0xfe>
 8018352:	4252      	negs	r2, r2
 8018354:	4414      	add	r4, r2
 8018356:	f8ca 1000 	str.w	r1, [sl]
 801835a:	b30d      	cbz	r5, 80183a0 <__gethex+0x14a>
 801835c:	f1bb 0f00 	cmp.w	fp, #0
 8018360:	bf0c      	ite	eq
 8018362:	2706      	moveq	r7, #6
 8018364:	2700      	movne	r7, #0
 8018366:	4638      	mov	r0, r7
 8018368:	b00b      	add	sp, #44	; 0x2c
 801836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801836e:	f10b 0b01 	add.w	fp, fp, #1
 8018372:	e78a      	b.n	801828a <__gethex+0x34>
 8018374:	2500      	movs	r5, #0
 8018376:	462c      	mov	r4, r5
 8018378:	e7ae      	b.n	80182d8 <__gethex+0x82>
 801837a:	463e      	mov	r6, r7
 801837c:	2501      	movs	r5, #1
 801837e:	e7c7      	b.n	8018310 <__gethex+0xba>
 8018380:	4604      	mov	r4, r0
 8018382:	e7fb      	b.n	801837c <__gethex+0x126>
 8018384:	f04f 0900 	mov.w	r9, #0
 8018388:	1cb1      	adds	r1, r6, #2
 801838a:	e7ce      	b.n	801832a <__gethex+0xd4>
 801838c:	f04f 0901 	mov.w	r9, #1
 8018390:	e7fa      	b.n	8018388 <__gethex+0x132>
 8018392:	230a      	movs	r3, #10
 8018394:	fb03 0202 	mla	r2, r3, r2, r0
 8018398:	3a10      	subs	r2, #16
 801839a:	e7cf      	b.n	801833c <__gethex+0xe6>
 801839c:	4631      	mov	r1, r6
 801839e:	e7da      	b.n	8018356 <__gethex+0x100>
 80183a0:	1bf3      	subs	r3, r6, r7
 80183a2:	3b01      	subs	r3, #1
 80183a4:	4629      	mov	r1, r5
 80183a6:	2b07      	cmp	r3, #7
 80183a8:	dc49      	bgt.n	801843e <__gethex+0x1e8>
 80183aa:	9802      	ldr	r0, [sp, #8]
 80183ac:	f000 fa71 	bl	8018892 <_Balloc>
 80183b0:	9b01      	ldr	r3, [sp, #4]
 80183b2:	f100 0914 	add.w	r9, r0, #20
 80183b6:	f04f 0b00 	mov.w	fp, #0
 80183ba:	f1c3 0301 	rsb	r3, r3, #1
 80183be:	4605      	mov	r5, r0
 80183c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80183c4:	46da      	mov	sl, fp
 80183c6:	9308      	str	r3, [sp, #32]
 80183c8:	42b7      	cmp	r7, r6
 80183ca:	d33b      	bcc.n	8018444 <__gethex+0x1ee>
 80183cc:	9804      	ldr	r0, [sp, #16]
 80183ce:	f840 ab04 	str.w	sl, [r0], #4
 80183d2:	eba0 0009 	sub.w	r0, r0, r9
 80183d6:	1080      	asrs	r0, r0, #2
 80183d8:	6128      	str	r0, [r5, #16]
 80183da:	0147      	lsls	r7, r0, #5
 80183dc:	4650      	mov	r0, sl
 80183de:	f000 fb1c 	bl	8018a1a <__hi0bits>
 80183e2:	f8d8 6000 	ldr.w	r6, [r8]
 80183e6:	1a3f      	subs	r7, r7, r0
 80183e8:	42b7      	cmp	r7, r6
 80183ea:	dd64      	ble.n	80184b6 <__gethex+0x260>
 80183ec:	1bbf      	subs	r7, r7, r6
 80183ee:	4639      	mov	r1, r7
 80183f0:	4628      	mov	r0, r5
 80183f2:	f000 fe2b 	bl	801904c <__any_on>
 80183f6:	4682      	mov	sl, r0
 80183f8:	b178      	cbz	r0, 801841a <__gethex+0x1c4>
 80183fa:	1e7b      	subs	r3, r7, #1
 80183fc:	1159      	asrs	r1, r3, #5
 80183fe:	f003 021f 	and.w	r2, r3, #31
 8018402:	f04f 0a01 	mov.w	sl, #1
 8018406:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801840a:	fa0a f202 	lsl.w	r2, sl, r2
 801840e:	420a      	tst	r2, r1
 8018410:	d003      	beq.n	801841a <__gethex+0x1c4>
 8018412:	4553      	cmp	r3, sl
 8018414:	dc46      	bgt.n	80184a4 <__gethex+0x24e>
 8018416:	f04f 0a02 	mov.w	sl, #2
 801841a:	4639      	mov	r1, r7
 801841c:	4628      	mov	r0, r5
 801841e:	f7ff fecb 	bl	80181b8 <rshift>
 8018422:	443c      	add	r4, r7
 8018424:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018428:	42a3      	cmp	r3, r4
 801842a:	da52      	bge.n	80184d2 <__gethex+0x27c>
 801842c:	4629      	mov	r1, r5
 801842e:	9802      	ldr	r0, [sp, #8]
 8018430:	f000 fa63 	bl	80188fa <_Bfree>
 8018434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018436:	2300      	movs	r3, #0
 8018438:	6013      	str	r3, [r2, #0]
 801843a:	27a3      	movs	r7, #163	; 0xa3
 801843c:	e793      	b.n	8018366 <__gethex+0x110>
 801843e:	3101      	adds	r1, #1
 8018440:	105b      	asrs	r3, r3, #1
 8018442:	e7b0      	b.n	80183a6 <__gethex+0x150>
 8018444:	1e73      	subs	r3, r6, #1
 8018446:	9305      	str	r3, [sp, #20]
 8018448:	9a07      	ldr	r2, [sp, #28]
 801844a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801844e:	4293      	cmp	r3, r2
 8018450:	d018      	beq.n	8018484 <__gethex+0x22e>
 8018452:	f1bb 0f20 	cmp.w	fp, #32
 8018456:	d107      	bne.n	8018468 <__gethex+0x212>
 8018458:	9b04      	ldr	r3, [sp, #16]
 801845a:	f8c3 a000 	str.w	sl, [r3]
 801845e:	3304      	adds	r3, #4
 8018460:	f04f 0a00 	mov.w	sl, #0
 8018464:	9304      	str	r3, [sp, #16]
 8018466:	46d3      	mov	fp, sl
 8018468:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801846c:	f7ff fede 	bl	801822c <__hexdig_fun>
 8018470:	f000 000f 	and.w	r0, r0, #15
 8018474:	fa00 f00b 	lsl.w	r0, r0, fp
 8018478:	ea4a 0a00 	orr.w	sl, sl, r0
 801847c:	f10b 0b04 	add.w	fp, fp, #4
 8018480:	9b05      	ldr	r3, [sp, #20]
 8018482:	e00d      	b.n	80184a0 <__gethex+0x24a>
 8018484:	9b05      	ldr	r3, [sp, #20]
 8018486:	9a08      	ldr	r2, [sp, #32]
 8018488:	4413      	add	r3, r2
 801848a:	42bb      	cmp	r3, r7
 801848c:	d3e1      	bcc.n	8018452 <__gethex+0x1fc>
 801848e:	4618      	mov	r0, r3
 8018490:	9a01      	ldr	r2, [sp, #4]
 8018492:	9903      	ldr	r1, [sp, #12]
 8018494:	9309      	str	r3, [sp, #36]	; 0x24
 8018496:	f001 fb47 	bl	8019b28 <strncmp>
 801849a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801849c:	2800      	cmp	r0, #0
 801849e:	d1d8      	bne.n	8018452 <__gethex+0x1fc>
 80184a0:	461e      	mov	r6, r3
 80184a2:	e791      	b.n	80183c8 <__gethex+0x172>
 80184a4:	1eb9      	subs	r1, r7, #2
 80184a6:	4628      	mov	r0, r5
 80184a8:	f000 fdd0 	bl	801904c <__any_on>
 80184ac:	2800      	cmp	r0, #0
 80184ae:	d0b2      	beq.n	8018416 <__gethex+0x1c0>
 80184b0:	f04f 0a03 	mov.w	sl, #3
 80184b4:	e7b1      	b.n	801841a <__gethex+0x1c4>
 80184b6:	da09      	bge.n	80184cc <__gethex+0x276>
 80184b8:	1bf7      	subs	r7, r6, r7
 80184ba:	4629      	mov	r1, r5
 80184bc:	463a      	mov	r2, r7
 80184be:	9802      	ldr	r0, [sp, #8]
 80184c0:	f000 fbe6 	bl	8018c90 <__lshift>
 80184c4:	1be4      	subs	r4, r4, r7
 80184c6:	4605      	mov	r5, r0
 80184c8:	f100 0914 	add.w	r9, r0, #20
 80184cc:	f04f 0a00 	mov.w	sl, #0
 80184d0:	e7a8      	b.n	8018424 <__gethex+0x1ce>
 80184d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80184d6:	42a0      	cmp	r0, r4
 80184d8:	dd6a      	ble.n	80185b0 <__gethex+0x35a>
 80184da:	1b04      	subs	r4, r0, r4
 80184dc:	42a6      	cmp	r6, r4
 80184de:	dc2e      	bgt.n	801853e <__gethex+0x2e8>
 80184e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184e4:	2b02      	cmp	r3, #2
 80184e6:	d022      	beq.n	801852e <__gethex+0x2d8>
 80184e8:	2b03      	cmp	r3, #3
 80184ea:	d024      	beq.n	8018536 <__gethex+0x2e0>
 80184ec:	2b01      	cmp	r3, #1
 80184ee:	d115      	bne.n	801851c <__gethex+0x2c6>
 80184f0:	42a6      	cmp	r6, r4
 80184f2:	d113      	bne.n	801851c <__gethex+0x2c6>
 80184f4:	2e01      	cmp	r6, #1
 80184f6:	dc0b      	bgt.n	8018510 <__gethex+0x2ba>
 80184f8:	9a06      	ldr	r2, [sp, #24]
 80184fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80184fe:	6013      	str	r3, [r2, #0]
 8018500:	2301      	movs	r3, #1
 8018502:	612b      	str	r3, [r5, #16]
 8018504:	f8c9 3000 	str.w	r3, [r9]
 8018508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801850a:	2762      	movs	r7, #98	; 0x62
 801850c:	601d      	str	r5, [r3, #0]
 801850e:	e72a      	b.n	8018366 <__gethex+0x110>
 8018510:	1e71      	subs	r1, r6, #1
 8018512:	4628      	mov	r0, r5
 8018514:	f000 fd9a 	bl	801904c <__any_on>
 8018518:	2800      	cmp	r0, #0
 801851a:	d1ed      	bne.n	80184f8 <__gethex+0x2a2>
 801851c:	4629      	mov	r1, r5
 801851e:	9802      	ldr	r0, [sp, #8]
 8018520:	f000 f9eb 	bl	80188fa <_Bfree>
 8018524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018526:	2300      	movs	r3, #0
 8018528:	6013      	str	r3, [r2, #0]
 801852a:	2750      	movs	r7, #80	; 0x50
 801852c:	e71b      	b.n	8018366 <__gethex+0x110>
 801852e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018530:	2b00      	cmp	r3, #0
 8018532:	d0e1      	beq.n	80184f8 <__gethex+0x2a2>
 8018534:	e7f2      	b.n	801851c <__gethex+0x2c6>
 8018536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018538:	2b00      	cmp	r3, #0
 801853a:	d1dd      	bne.n	80184f8 <__gethex+0x2a2>
 801853c:	e7ee      	b.n	801851c <__gethex+0x2c6>
 801853e:	1e67      	subs	r7, r4, #1
 8018540:	f1ba 0f00 	cmp.w	sl, #0
 8018544:	d131      	bne.n	80185aa <__gethex+0x354>
 8018546:	b127      	cbz	r7, 8018552 <__gethex+0x2fc>
 8018548:	4639      	mov	r1, r7
 801854a:	4628      	mov	r0, r5
 801854c:	f000 fd7e 	bl	801904c <__any_on>
 8018550:	4682      	mov	sl, r0
 8018552:	117a      	asrs	r2, r7, #5
 8018554:	2301      	movs	r3, #1
 8018556:	f007 071f 	and.w	r7, r7, #31
 801855a:	fa03 f707 	lsl.w	r7, r3, r7
 801855e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018562:	4621      	mov	r1, r4
 8018564:	421f      	tst	r7, r3
 8018566:	4628      	mov	r0, r5
 8018568:	bf18      	it	ne
 801856a:	f04a 0a02 	orrne.w	sl, sl, #2
 801856e:	1b36      	subs	r6, r6, r4
 8018570:	f7ff fe22 	bl	80181b8 <rshift>
 8018574:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018578:	2702      	movs	r7, #2
 801857a:	f1ba 0f00 	cmp.w	sl, #0
 801857e:	d048      	beq.n	8018612 <__gethex+0x3bc>
 8018580:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018584:	2b02      	cmp	r3, #2
 8018586:	d015      	beq.n	80185b4 <__gethex+0x35e>
 8018588:	2b03      	cmp	r3, #3
 801858a:	d017      	beq.n	80185bc <__gethex+0x366>
 801858c:	2b01      	cmp	r3, #1
 801858e:	d109      	bne.n	80185a4 <__gethex+0x34e>
 8018590:	f01a 0f02 	tst.w	sl, #2
 8018594:	d006      	beq.n	80185a4 <__gethex+0x34e>
 8018596:	f8d9 3000 	ldr.w	r3, [r9]
 801859a:	ea4a 0a03 	orr.w	sl, sl, r3
 801859e:	f01a 0f01 	tst.w	sl, #1
 80185a2:	d10e      	bne.n	80185c2 <__gethex+0x36c>
 80185a4:	f047 0710 	orr.w	r7, r7, #16
 80185a8:	e033      	b.n	8018612 <__gethex+0x3bc>
 80185aa:	f04f 0a01 	mov.w	sl, #1
 80185ae:	e7d0      	b.n	8018552 <__gethex+0x2fc>
 80185b0:	2701      	movs	r7, #1
 80185b2:	e7e2      	b.n	801857a <__gethex+0x324>
 80185b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185b6:	f1c3 0301 	rsb	r3, r3, #1
 80185ba:	9315      	str	r3, [sp, #84]	; 0x54
 80185bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d0f0      	beq.n	80185a4 <__gethex+0x34e>
 80185c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80185c6:	f105 0314 	add.w	r3, r5, #20
 80185ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80185ce:	eb03 010a 	add.w	r1, r3, sl
 80185d2:	f04f 0c00 	mov.w	ip, #0
 80185d6:	4618      	mov	r0, r3
 80185d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80185dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80185e0:	d01c      	beq.n	801861c <__gethex+0x3c6>
 80185e2:	3201      	adds	r2, #1
 80185e4:	6002      	str	r2, [r0, #0]
 80185e6:	2f02      	cmp	r7, #2
 80185e8:	f105 0314 	add.w	r3, r5, #20
 80185ec:	d138      	bne.n	8018660 <__gethex+0x40a>
 80185ee:	f8d8 2000 	ldr.w	r2, [r8]
 80185f2:	3a01      	subs	r2, #1
 80185f4:	42b2      	cmp	r2, r6
 80185f6:	d10a      	bne.n	801860e <__gethex+0x3b8>
 80185f8:	1171      	asrs	r1, r6, #5
 80185fa:	2201      	movs	r2, #1
 80185fc:	f006 061f 	and.w	r6, r6, #31
 8018600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018604:	fa02 f606 	lsl.w	r6, r2, r6
 8018608:	421e      	tst	r6, r3
 801860a:	bf18      	it	ne
 801860c:	4617      	movne	r7, r2
 801860e:	f047 0720 	orr.w	r7, r7, #32
 8018612:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018614:	601d      	str	r5, [r3, #0]
 8018616:	9b06      	ldr	r3, [sp, #24]
 8018618:	601c      	str	r4, [r3, #0]
 801861a:	e6a4      	b.n	8018366 <__gethex+0x110>
 801861c:	4299      	cmp	r1, r3
 801861e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018622:	d8d8      	bhi.n	80185d6 <__gethex+0x380>
 8018624:	68ab      	ldr	r3, [r5, #8]
 8018626:	4599      	cmp	r9, r3
 8018628:	db12      	blt.n	8018650 <__gethex+0x3fa>
 801862a:	6869      	ldr	r1, [r5, #4]
 801862c:	9802      	ldr	r0, [sp, #8]
 801862e:	3101      	adds	r1, #1
 8018630:	f000 f92f 	bl	8018892 <_Balloc>
 8018634:	692a      	ldr	r2, [r5, #16]
 8018636:	3202      	adds	r2, #2
 8018638:	f105 010c 	add.w	r1, r5, #12
 801863c:	4683      	mov	fp, r0
 801863e:	0092      	lsls	r2, r2, #2
 8018640:	300c      	adds	r0, #12
 8018642:	f000 f91b 	bl	801887c <memcpy>
 8018646:	4629      	mov	r1, r5
 8018648:	9802      	ldr	r0, [sp, #8]
 801864a:	f000 f956 	bl	80188fa <_Bfree>
 801864e:	465d      	mov	r5, fp
 8018650:	692b      	ldr	r3, [r5, #16]
 8018652:	1c5a      	adds	r2, r3, #1
 8018654:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018658:	612a      	str	r2, [r5, #16]
 801865a:	2201      	movs	r2, #1
 801865c:	615a      	str	r2, [r3, #20]
 801865e:	e7c2      	b.n	80185e6 <__gethex+0x390>
 8018660:	692a      	ldr	r2, [r5, #16]
 8018662:	454a      	cmp	r2, r9
 8018664:	dd0b      	ble.n	801867e <__gethex+0x428>
 8018666:	2101      	movs	r1, #1
 8018668:	4628      	mov	r0, r5
 801866a:	f7ff fda5 	bl	80181b8 <rshift>
 801866e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018672:	3401      	adds	r4, #1
 8018674:	42a3      	cmp	r3, r4
 8018676:	f6ff aed9 	blt.w	801842c <__gethex+0x1d6>
 801867a:	2701      	movs	r7, #1
 801867c:	e7c7      	b.n	801860e <__gethex+0x3b8>
 801867e:	f016 061f 	ands.w	r6, r6, #31
 8018682:	d0fa      	beq.n	801867a <__gethex+0x424>
 8018684:	449a      	add	sl, r3
 8018686:	f1c6 0620 	rsb	r6, r6, #32
 801868a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801868e:	f000 f9c4 	bl	8018a1a <__hi0bits>
 8018692:	42b0      	cmp	r0, r6
 8018694:	dbe7      	blt.n	8018666 <__gethex+0x410>
 8018696:	e7f0      	b.n	801867a <__gethex+0x424>

08018698 <L_shift>:
 8018698:	f1c2 0208 	rsb	r2, r2, #8
 801869c:	0092      	lsls	r2, r2, #2
 801869e:	b570      	push	{r4, r5, r6, lr}
 80186a0:	f1c2 0620 	rsb	r6, r2, #32
 80186a4:	6843      	ldr	r3, [r0, #4]
 80186a6:	6804      	ldr	r4, [r0, #0]
 80186a8:	fa03 f506 	lsl.w	r5, r3, r6
 80186ac:	432c      	orrs	r4, r5
 80186ae:	40d3      	lsrs	r3, r2
 80186b0:	6004      	str	r4, [r0, #0]
 80186b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80186b6:	4288      	cmp	r0, r1
 80186b8:	d3f4      	bcc.n	80186a4 <L_shift+0xc>
 80186ba:	bd70      	pop	{r4, r5, r6, pc}

080186bc <__match>:
 80186bc:	b530      	push	{r4, r5, lr}
 80186be:	6803      	ldr	r3, [r0, #0]
 80186c0:	3301      	adds	r3, #1
 80186c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186c6:	b914      	cbnz	r4, 80186ce <__match+0x12>
 80186c8:	6003      	str	r3, [r0, #0]
 80186ca:	2001      	movs	r0, #1
 80186cc:	bd30      	pop	{r4, r5, pc}
 80186ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80186d6:	2d19      	cmp	r5, #25
 80186d8:	bf98      	it	ls
 80186da:	3220      	addls	r2, #32
 80186dc:	42a2      	cmp	r2, r4
 80186de:	d0f0      	beq.n	80186c2 <__match+0x6>
 80186e0:	2000      	movs	r0, #0
 80186e2:	e7f3      	b.n	80186cc <__match+0x10>

080186e4 <__hexnan>:
 80186e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e8:	680b      	ldr	r3, [r1, #0]
 80186ea:	6801      	ldr	r1, [r0, #0]
 80186ec:	115f      	asrs	r7, r3, #5
 80186ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80186f2:	f013 031f 	ands.w	r3, r3, #31
 80186f6:	b087      	sub	sp, #28
 80186f8:	bf18      	it	ne
 80186fa:	3704      	addne	r7, #4
 80186fc:	2500      	movs	r5, #0
 80186fe:	1f3e      	subs	r6, r7, #4
 8018700:	4682      	mov	sl, r0
 8018702:	4690      	mov	r8, r2
 8018704:	9301      	str	r3, [sp, #4]
 8018706:	f847 5c04 	str.w	r5, [r7, #-4]
 801870a:	46b1      	mov	r9, r6
 801870c:	4634      	mov	r4, r6
 801870e:	9502      	str	r5, [sp, #8]
 8018710:	46ab      	mov	fp, r5
 8018712:	784a      	ldrb	r2, [r1, #1]
 8018714:	1c4b      	adds	r3, r1, #1
 8018716:	9303      	str	r3, [sp, #12]
 8018718:	b342      	cbz	r2, 801876c <__hexnan+0x88>
 801871a:	4610      	mov	r0, r2
 801871c:	9105      	str	r1, [sp, #20]
 801871e:	9204      	str	r2, [sp, #16]
 8018720:	f7ff fd84 	bl	801822c <__hexdig_fun>
 8018724:	2800      	cmp	r0, #0
 8018726:	d143      	bne.n	80187b0 <__hexnan+0xcc>
 8018728:	9a04      	ldr	r2, [sp, #16]
 801872a:	9905      	ldr	r1, [sp, #20]
 801872c:	2a20      	cmp	r2, #32
 801872e:	d818      	bhi.n	8018762 <__hexnan+0x7e>
 8018730:	9b02      	ldr	r3, [sp, #8]
 8018732:	459b      	cmp	fp, r3
 8018734:	dd13      	ble.n	801875e <__hexnan+0x7a>
 8018736:	454c      	cmp	r4, r9
 8018738:	d206      	bcs.n	8018748 <__hexnan+0x64>
 801873a:	2d07      	cmp	r5, #7
 801873c:	dc04      	bgt.n	8018748 <__hexnan+0x64>
 801873e:	462a      	mov	r2, r5
 8018740:	4649      	mov	r1, r9
 8018742:	4620      	mov	r0, r4
 8018744:	f7ff ffa8 	bl	8018698 <L_shift>
 8018748:	4544      	cmp	r4, r8
 801874a:	d944      	bls.n	80187d6 <__hexnan+0xf2>
 801874c:	2300      	movs	r3, #0
 801874e:	f1a4 0904 	sub.w	r9, r4, #4
 8018752:	f844 3c04 	str.w	r3, [r4, #-4]
 8018756:	f8cd b008 	str.w	fp, [sp, #8]
 801875a:	464c      	mov	r4, r9
 801875c:	461d      	mov	r5, r3
 801875e:	9903      	ldr	r1, [sp, #12]
 8018760:	e7d7      	b.n	8018712 <__hexnan+0x2e>
 8018762:	2a29      	cmp	r2, #41	; 0x29
 8018764:	d14a      	bne.n	80187fc <__hexnan+0x118>
 8018766:	3102      	adds	r1, #2
 8018768:	f8ca 1000 	str.w	r1, [sl]
 801876c:	f1bb 0f00 	cmp.w	fp, #0
 8018770:	d044      	beq.n	80187fc <__hexnan+0x118>
 8018772:	454c      	cmp	r4, r9
 8018774:	d206      	bcs.n	8018784 <__hexnan+0xa0>
 8018776:	2d07      	cmp	r5, #7
 8018778:	dc04      	bgt.n	8018784 <__hexnan+0xa0>
 801877a:	462a      	mov	r2, r5
 801877c:	4649      	mov	r1, r9
 801877e:	4620      	mov	r0, r4
 8018780:	f7ff ff8a 	bl	8018698 <L_shift>
 8018784:	4544      	cmp	r4, r8
 8018786:	d928      	bls.n	80187da <__hexnan+0xf6>
 8018788:	4643      	mov	r3, r8
 801878a:	f854 2b04 	ldr.w	r2, [r4], #4
 801878e:	f843 2b04 	str.w	r2, [r3], #4
 8018792:	42a6      	cmp	r6, r4
 8018794:	d2f9      	bcs.n	801878a <__hexnan+0xa6>
 8018796:	2200      	movs	r2, #0
 8018798:	f843 2b04 	str.w	r2, [r3], #4
 801879c:	429e      	cmp	r6, r3
 801879e:	d2fb      	bcs.n	8018798 <__hexnan+0xb4>
 80187a0:	6833      	ldr	r3, [r6, #0]
 80187a2:	b91b      	cbnz	r3, 80187ac <__hexnan+0xc8>
 80187a4:	4546      	cmp	r6, r8
 80187a6:	d127      	bne.n	80187f8 <__hexnan+0x114>
 80187a8:	2301      	movs	r3, #1
 80187aa:	6033      	str	r3, [r6, #0]
 80187ac:	2005      	movs	r0, #5
 80187ae:	e026      	b.n	80187fe <__hexnan+0x11a>
 80187b0:	3501      	adds	r5, #1
 80187b2:	2d08      	cmp	r5, #8
 80187b4:	f10b 0b01 	add.w	fp, fp, #1
 80187b8:	dd06      	ble.n	80187c8 <__hexnan+0xe4>
 80187ba:	4544      	cmp	r4, r8
 80187bc:	d9cf      	bls.n	801875e <__hexnan+0x7a>
 80187be:	2300      	movs	r3, #0
 80187c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80187c4:	2501      	movs	r5, #1
 80187c6:	3c04      	subs	r4, #4
 80187c8:	6822      	ldr	r2, [r4, #0]
 80187ca:	f000 000f 	and.w	r0, r0, #15
 80187ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80187d2:	6020      	str	r0, [r4, #0]
 80187d4:	e7c3      	b.n	801875e <__hexnan+0x7a>
 80187d6:	2508      	movs	r5, #8
 80187d8:	e7c1      	b.n	801875e <__hexnan+0x7a>
 80187da:	9b01      	ldr	r3, [sp, #4]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d0df      	beq.n	80187a0 <__hexnan+0xbc>
 80187e0:	f04f 32ff 	mov.w	r2, #4294967295
 80187e4:	f1c3 0320 	rsb	r3, r3, #32
 80187e8:	fa22 f303 	lsr.w	r3, r2, r3
 80187ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80187f0:	401a      	ands	r2, r3
 80187f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80187f6:	e7d3      	b.n	80187a0 <__hexnan+0xbc>
 80187f8:	3e04      	subs	r6, #4
 80187fa:	e7d1      	b.n	80187a0 <__hexnan+0xbc>
 80187fc:	2004      	movs	r0, #4
 80187fe:	b007      	add	sp, #28
 8018800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018804 <__locale_ctype_ptr_l>:
 8018804:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018808:	4770      	bx	lr
	...

0801880c <__locale_ctype_ptr>:
 801880c:	4b04      	ldr	r3, [pc, #16]	; (8018820 <__locale_ctype_ptr+0x14>)
 801880e:	4a05      	ldr	r2, [pc, #20]	; (8018824 <__locale_ctype_ptr+0x18>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	6a1b      	ldr	r3, [r3, #32]
 8018814:	2b00      	cmp	r3, #0
 8018816:	bf08      	it	eq
 8018818:	4613      	moveq	r3, r2
 801881a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801881e:	4770      	bx	lr
 8018820:	2000000c 	.word	0x2000000c
 8018824:	20000070 	.word	0x20000070

08018828 <__localeconv_l>:
 8018828:	30f0      	adds	r0, #240	; 0xf0
 801882a:	4770      	bx	lr

0801882c <_localeconv_r>:
 801882c:	4b04      	ldr	r3, [pc, #16]	; (8018840 <_localeconv_r+0x14>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	6a18      	ldr	r0, [r3, #32]
 8018832:	4b04      	ldr	r3, [pc, #16]	; (8018844 <_localeconv_r+0x18>)
 8018834:	2800      	cmp	r0, #0
 8018836:	bf08      	it	eq
 8018838:	4618      	moveq	r0, r3
 801883a:	30f0      	adds	r0, #240	; 0xf0
 801883c:	4770      	bx	lr
 801883e:	bf00      	nop
 8018840:	2000000c 	.word	0x2000000c
 8018844:	20000070 	.word	0x20000070

08018848 <malloc>:
 8018848:	4b02      	ldr	r3, [pc, #8]	; (8018854 <malloc+0xc>)
 801884a:	4601      	mov	r1, r0
 801884c:	6818      	ldr	r0, [r3, #0]
 801884e:	f000 bc7b 	b.w	8019148 <_malloc_r>
 8018852:	bf00      	nop
 8018854:	2000000c 	.word	0x2000000c

08018858 <__ascii_mbtowc>:
 8018858:	b082      	sub	sp, #8
 801885a:	b901      	cbnz	r1, 801885e <__ascii_mbtowc+0x6>
 801885c:	a901      	add	r1, sp, #4
 801885e:	b142      	cbz	r2, 8018872 <__ascii_mbtowc+0x1a>
 8018860:	b14b      	cbz	r3, 8018876 <__ascii_mbtowc+0x1e>
 8018862:	7813      	ldrb	r3, [r2, #0]
 8018864:	600b      	str	r3, [r1, #0]
 8018866:	7812      	ldrb	r2, [r2, #0]
 8018868:	1c10      	adds	r0, r2, #0
 801886a:	bf18      	it	ne
 801886c:	2001      	movne	r0, #1
 801886e:	b002      	add	sp, #8
 8018870:	4770      	bx	lr
 8018872:	4610      	mov	r0, r2
 8018874:	e7fb      	b.n	801886e <__ascii_mbtowc+0x16>
 8018876:	f06f 0001 	mvn.w	r0, #1
 801887a:	e7f8      	b.n	801886e <__ascii_mbtowc+0x16>

0801887c <memcpy>:
 801887c:	b510      	push	{r4, lr}
 801887e:	1e43      	subs	r3, r0, #1
 8018880:	440a      	add	r2, r1
 8018882:	4291      	cmp	r1, r2
 8018884:	d100      	bne.n	8018888 <memcpy+0xc>
 8018886:	bd10      	pop	{r4, pc}
 8018888:	f811 4b01 	ldrb.w	r4, [r1], #1
 801888c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018890:	e7f7      	b.n	8018882 <memcpy+0x6>

08018892 <_Balloc>:
 8018892:	b570      	push	{r4, r5, r6, lr}
 8018894:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018896:	4604      	mov	r4, r0
 8018898:	460e      	mov	r6, r1
 801889a:	b93d      	cbnz	r5, 80188ac <_Balloc+0x1a>
 801889c:	2010      	movs	r0, #16
 801889e:	f7ff ffd3 	bl	8018848 <malloc>
 80188a2:	6260      	str	r0, [r4, #36]	; 0x24
 80188a4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80188a8:	6005      	str	r5, [r0, #0]
 80188aa:	60c5      	str	r5, [r0, #12]
 80188ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80188ae:	68eb      	ldr	r3, [r5, #12]
 80188b0:	b183      	cbz	r3, 80188d4 <_Balloc+0x42>
 80188b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188b4:	68db      	ldr	r3, [r3, #12]
 80188b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80188ba:	b9b8      	cbnz	r0, 80188ec <_Balloc+0x5a>
 80188bc:	2101      	movs	r1, #1
 80188be:	fa01 f506 	lsl.w	r5, r1, r6
 80188c2:	1d6a      	adds	r2, r5, #5
 80188c4:	0092      	lsls	r2, r2, #2
 80188c6:	4620      	mov	r0, r4
 80188c8:	f000 fbe1 	bl	801908e <_calloc_r>
 80188cc:	b160      	cbz	r0, 80188e8 <_Balloc+0x56>
 80188ce:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80188d2:	e00e      	b.n	80188f2 <_Balloc+0x60>
 80188d4:	2221      	movs	r2, #33	; 0x21
 80188d6:	2104      	movs	r1, #4
 80188d8:	4620      	mov	r0, r4
 80188da:	f000 fbd8 	bl	801908e <_calloc_r>
 80188de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188e0:	60e8      	str	r0, [r5, #12]
 80188e2:	68db      	ldr	r3, [r3, #12]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d1e4      	bne.n	80188b2 <_Balloc+0x20>
 80188e8:	2000      	movs	r0, #0
 80188ea:	bd70      	pop	{r4, r5, r6, pc}
 80188ec:	6802      	ldr	r2, [r0, #0]
 80188ee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80188f2:	2300      	movs	r3, #0
 80188f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80188f8:	e7f7      	b.n	80188ea <_Balloc+0x58>

080188fa <_Bfree>:
 80188fa:	b570      	push	{r4, r5, r6, lr}
 80188fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80188fe:	4606      	mov	r6, r0
 8018900:	460d      	mov	r5, r1
 8018902:	b93c      	cbnz	r4, 8018914 <_Bfree+0x1a>
 8018904:	2010      	movs	r0, #16
 8018906:	f7ff ff9f 	bl	8018848 <malloc>
 801890a:	6270      	str	r0, [r6, #36]	; 0x24
 801890c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018910:	6004      	str	r4, [r0, #0]
 8018912:	60c4      	str	r4, [r0, #12]
 8018914:	b13d      	cbz	r5, 8018926 <_Bfree+0x2c>
 8018916:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018918:	686a      	ldr	r2, [r5, #4]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018920:	6029      	str	r1, [r5, #0]
 8018922:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018926:	bd70      	pop	{r4, r5, r6, pc}

08018928 <__multadd>:
 8018928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801892c:	690d      	ldr	r5, [r1, #16]
 801892e:	461f      	mov	r7, r3
 8018930:	4606      	mov	r6, r0
 8018932:	460c      	mov	r4, r1
 8018934:	f101 0c14 	add.w	ip, r1, #20
 8018938:	2300      	movs	r3, #0
 801893a:	f8dc 0000 	ldr.w	r0, [ip]
 801893e:	b281      	uxth	r1, r0
 8018940:	fb02 7101 	mla	r1, r2, r1, r7
 8018944:	0c0f      	lsrs	r7, r1, #16
 8018946:	0c00      	lsrs	r0, r0, #16
 8018948:	fb02 7000 	mla	r0, r2, r0, r7
 801894c:	b289      	uxth	r1, r1
 801894e:	3301      	adds	r3, #1
 8018950:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018954:	429d      	cmp	r5, r3
 8018956:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801895a:	f84c 1b04 	str.w	r1, [ip], #4
 801895e:	dcec      	bgt.n	801893a <__multadd+0x12>
 8018960:	b1d7      	cbz	r7, 8018998 <__multadd+0x70>
 8018962:	68a3      	ldr	r3, [r4, #8]
 8018964:	42ab      	cmp	r3, r5
 8018966:	dc12      	bgt.n	801898e <__multadd+0x66>
 8018968:	6861      	ldr	r1, [r4, #4]
 801896a:	4630      	mov	r0, r6
 801896c:	3101      	adds	r1, #1
 801896e:	f7ff ff90 	bl	8018892 <_Balloc>
 8018972:	6922      	ldr	r2, [r4, #16]
 8018974:	3202      	adds	r2, #2
 8018976:	f104 010c 	add.w	r1, r4, #12
 801897a:	4680      	mov	r8, r0
 801897c:	0092      	lsls	r2, r2, #2
 801897e:	300c      	adds	r0, #12
 8018980:	f7ff ff7c 	bl	801887c <memcpy>
 8018984:	4621      	mov	r1, r4
 8018986:	4630      	mov	r0, r6
 8018988:	f7ff ffb7 	bl	80188fa <_Bfree>
 801898c:	4644      	mov	r4, r8
 801898e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018992:	3501      	adds	r5, #1
 8018994:	615f      	str	r7, [r3, #20]
 8018996:	6125      	str	r5, [r4, #16]
 8018998:	4620      	mov	r0, r4
 801899a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801899e <__s2b>:
 801899e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189a2:	460c      	mov	r4, r1
 80189a4:	4615      	mov	r5, r2
 80189a6:	461f      	mov	r7, r3
 80189a8:	2209      	movs	r2, #9
 80189aa:	3308      	adds	r3, #8
 80189ac:	4606      	mov	r6, r0
 80189ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80189b2:	2100      	movs	r1, #0
 80189b4:	2201      	movs	r2, #1
 80189b6:	429a      	cmp	r2, r3
 80189b8:	db20      	blt.n	80189fc <__s2b+0x5e>
 80189ba:	4630      	mov	r0, r6
 80189bc:	f7ff ff69 	bl	8018892 <_Balloc>
 80189c0:	9b08      	ldr	r3, [sp, #32]
 80189c2:	6143      	str	r3, [r0, #20]
 80189c4:	2d09      	cmp	r5, #9
 80189c6:	f04f 0301 	mov.w	r3, #1
 80189ca:	6103      	str	r3, [r0, #16]
 80189cc:	dd19      	ble.n	8018a02 <__s2b+0x64>
 80189ce:	f104 0809 	add.w	r8, r4, #9
 80189d2:	46c1      	mov	r9, r8
 80189d4:	442c      	add	r4, r5
 80189d6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80189da:	4601      	mov	r1, r0
 80189dc:	3b30      	subs	r3, #48	; 0x30
 80189de:	220a      	movs	r2, #10
 80189e0:	4630      	mov	r0, r6
 80189e2:	f7ff ffa1 	bl	8018928 <__multadd>
 80189e6:	45a1      	cmp	r9, r4
 80189e8:	d1f5      	bne.n	80189d6 <__s2b+0x38>
 80189ea:	eb08 0405 	add.w	r4, r8, r5
 80189ee:	3c08      	subs	r4, #8
 80189f0:	1b2d      	subs	r5, r5, r4
 80189f2:	1963      	adds	r3, r4, r5
 80189f4:	42bb      	cmp	r3, r7
 80189f6:	db07      	blt.n	8018a08 <__s2b+0x6a>
 80189f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189fc:	0052      	lsls	r2, r2, #1
 80189fe:	3101      	adds	r1, #1
 8018a00:	e7d9      	b.n	80189b6 <__s2b+0x18>
 8018a02:	340a      	adds	r4, #10
 8018a04:	2509      	movs	r5, #9
 8018a06:	e7f3      	b.n	80189f0 <__s2b+0x52>
 8018a08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a0c:	4601      	mov	r1, r0
 8018a0e:	3b30      	subs	r3, #48	; 0x30
 8018a10:	220a      	movs	r2, #10
 8018a12:	4630      	mov	r0, r6
 8018a14:	f7ff ff88 	bl	8018928 <__multadd>
 8018a18:	e7eb      	b.n	80189f2 <__s2b+0x54>

08018a1a <__hi0bits>:
 8018a1a:	0c02      	lsrs	r2, r0, #16
 8018a1c:	0412      	lsls	r2, r2, #16
 8018a1e:	4603      	mov	r3, r0
 8018a20:	b9b2      	cbnz	r2, 8018a50 <__hi0bits+0x36>
 8018a22:	0403      	lsls	r3, r0, #16
 8018a24:	2010      	movs	r0, #16
 8018a26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a2a:	bf04      	itt	eq
 8018a2c:	021b      	lsleq	r3, r3, #8
 8018a2e:	3008      	addeq	r0, #8
 8018a30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a34:	bf04      	itt	eq
 8018a36:	011b      	lsleq	r3, r3, #4
 8018a38:	3004      	addeq	r0, #4
 8018a3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a3e:	bf04      	itt	eq
 8018a40:	009b      	lsleq	r3, r3, #2
 8018a42:	3002      	addeq	r0, #2
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	db06      	blt.n	8018a56 <__hi0bits+0x3c>
 8018a48:	005b      	lsls	r3, r3, #1
 8018a4a:	d503      	bpl.n	8018a54 <__hi0bits+0x3a>
 8018a4c:	3001      	adds	r0, #1
 8018a4e:	4770      	bx	lr
 8018a50:	2000      	movs	r0, #0
 8018a52:	e7e8      	b.n	8018a26 <__hi0bits+0xc>
 8018a54:	2020      	movs	r0, #32
 8018a56:	4770      	bx	lr

08018a58 <__lo0bits>:
 8018a58:	6803      	ldr	r3, [r0, #0]
 8018a5a:	f013 0207 	ands.w	r2, r3, #7
 8018a5e:	4601      	mov	r1, r0
 8018a60:	d00b      	beq.n	8018a7a <__lo0bits+0x22>
 8018a62:	07da      	lsls	r2, r3, #31
 8018a64:	d423      	bmi.n	8018aae <__lo0bits+0x56>
 8018a66:	0798      	lsls	r0, r3, #30
 8018a68:	bf49      	itett	mi
 8018a6a:	085b      	lsrmi	r3, r3, #1
 8018a6c:	089b      	lsrpl	r3, r3, #2
 8018a6e:	2001      	movmi	r0, #1
 8018a70:	600b      	strmi	r3, [r1, #0]
 8018a72:	bf5c      	itt	pl
 8018a74:	600b      	strpl	r3, [r1, #0]
 8018a76:	2002      	movpl	r0, #2
 8018a78:	4770      	bx	lr
 8018a7a:	b298      	uxth	r0, r3
 8018a7c:	b9a8      	cbnz	r0, 8018aaa <__lo0bits+0x52>
 8018a7e:	0c1b      	lsrs	r3, r3, #16
 8018a80:	2010      	movs	r0, #16
 8018a82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a86:	bf04      	itt	eq
 8018a88:	0a1b      	lsreq	r3, r3, #8
 8018a8a:	3008      	addeq	r0, #8
 8018a8c:	071a      	lsls	r2, r3, #28
 8018a8e:	bf04      	itt	eq
 8018a90:	091b      	lsreq	r3, r3, #4
 8018a92:	3004      	addeq	r0, #4
 8018a94:	079a      	lsls	r2, r3, #30
 8018a96:	bf04      	itt	eq
 8018a98:	089b      	lsreq	r3, r3, #2
 8018a9a:	3002      	addeq	r0, #2
 8018a9c:	07da      	lsls	r2, r3, #31
 8018a9e:	d402      	bmi.n	8018aa6 <__lo0bits+0x4e>
 8018aa0:	085b      	lsrs	r3, r3, #1
 8018aa2:	d006      	beq.n	8018ab2 <__lo0bits+0x5a>
 8018aa4:	3001      	adds	r0, #1
 8018aa6:	600b      	str	r3, [r1, #0]
 8018aa8:	4770      	bx	lr
 8018aaa:	4610      	mov	r0, r2
 8018aac:	e7e9      	b.n	8018a82 <__lo0bits+0x2a>
 8018aae:	2000      	movs	r0, #0
 8018ab0:	4770      	bx	lr
 8018ab2:	2020      	movs	r0, #32
 8018ab4:	4770      	bx	lr

08018ab6 <__i2b>:
 8018ab6:	b510      	push	{r4, lr}
 8018ab8:	460c      	mov	r4, r1
 8018aba:	2101      	movs	r1, #1
 8018abc:	f7ff fee9 	bl	8018892 <_Balloc>
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	6144      	str	r4, [r0, #20]
 8018ac4:	6102      	str	r2, [r0, #16]
 8018ac6:	bd10      	pop	{r4, pc}

08018ac8 <__multiply>:
 8018ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018acc:	4614      	mov	r4, r2
 8018ace:	690a      	ldr	r2, [r1, #16]
 8018ad0:	6923      	ldr	r3, [r4, #16]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	bfb8      	it	lt
 8018ad6:	460b      	movlt	r3, r1
 8018ad8:	4688      	mov	r8, r1
 8018ada:	bfbc      	itt	lt
 8018adc:	46a0      	movlt	r8, r4
 8018ade:	461c      	movlt	r4, r3
 8018ae0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018ae4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ae8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018aec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018af0:	eb07 0609 	add.w	r6, r7, r9
 8018af4:	42b3      	cmp	r3, r6
 8018af6:	bfb8      	it	lt
 8018af8:	3101      	addlt	r1, #1
 8018afa:	f7ff feca 	bl	8018892 <_Balloc>
 8018afe:	f100 0514 	add.w	r5, r0, #20
 8018b02:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018b06:	462b      	mov	r3, r5
 8018b08:	2200      	movs	r2, #0
 8018b0a:	4573      	cmp	r3, lr
 8018b0c:	d316      	bcc.n	8018b3c <__multiply+0x74>
 8018b0e:	f104 0214 	add.w	r2, r4, #20
 8018b12:	f108 0114 	add.w	r1, r8, #20
 8018b16:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018b1a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018b1e:	9300      	str	r3, [sp, #0]
 8018b20:	9b00      	ldr	r3, [sp, #0]
 8018b22:	9201      	str	r2, [sp, #4]
 8018b24:	4293      	cmp	r3, r2
 8018b26:	d80c      	bhi.n	8018b42 <__multiply+0x7a>
 8018b28:	2e00      	cmp	r6, #0
 8018b2a:	dd03      	ble.n	8018b34 <__multiply+0x6c>
 8018b2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d05d      	beq.n	8018bf0 <__multiply+0x128>
 8018b34:	6106      	str	r6, [r0, #16]
 8018b36:	b003      	add	sp, #12
 8018b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b3c:	f843 2b04 	str.w	r2, [r3], #4
 8018b40:	e7e3      	b.n	8018b0a <__multiply+0x42>
 8018b42:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b46:	f1bb 0f00 	cmp.w	fp, #0
 8018b4a:	d023      	beq.n	8018b94 <__multiply+0xcc>
 8018b4c:	4689      	mov	r9, r1
 8018b4e:	46ac      	mov	ip, r5
 8018b50:	f04f 0800 	mov.w	r8, #0
 8018b54:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b58:	f8dc a000 	ldr.w	sl, [ip]
 8018b5c:	b2a3      	uxth	r3, r4
 8018b5e:	fa1f fa8a 	uxth.w	sl, sl
 8018b62:	fb0b a303 	mla	r3, fp, r3, sl
 8018b66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b6a:	f8dc 4000 	ldr.w	r4, [ip]
 8018b6e:	4443      	add	r3, r8
 8018b70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b74:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b78:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b7c:	46e2      	mov	sl, ip
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b84:	454f      	cmp	r7, r9
 8018b86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b8a:	f84a 3b04 	str.w	r3, [sl], #4
 8018b8e:	d82b      	bhi.n	8018be8 <__multiply+0x120>
 8018b90:	f8cc 8004 	str.w	r8, [ip, #4]
 8018b94:	9b01      	ldr	r3, [sp, #4]
 8018b96:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018b9a:	3204      	adds	r2, #4
 8018b9c:	f1ba 0f00 	cmp.w	sl, #0
 8018ba0:	d020      	beq.n	8018be4 <__multiply+0x11c>
 8018ba2:	682b      	ldr	r3, [r5, #0]
 8018ba4:	4689      	mov	r9, r1
 8018ba6:	46a8      	mov	r8, r5
 8018ba8:	f04f 0b00 	mov.w	fp, #0
 8018bac:	f8b9 c000 	ldrh.w	ip, [r9]
 8018bb0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018bb4:	fb0a 440c 	mla	r4, sl, ip, r4
 8018bb8:	445c      	add	r4, fp
 8018bba:	46c4      	mov	ip, r8
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8018bc6:	f859 3b04 	ldr.w	r3, [r9], #4
 8018bca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018bce:	0c1b      	lsrs	r3, r3, #16
 8018bd0:	fb0a b303 	mla	r3, sl, r3, fp
 8018bd4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018bd8:	454f      	cmp	r7, r9
 8018bda:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018bde:	d805      	bhi.n	8018bec <__multiply+0x124>
 8018be0:	f8c8 3004 	str.w	r3, [r8, #4]
 8018be4:	3504      	adds	r5, #4
 8018be6:	e79b      	b.n	8018b20 <__multiply+0x58>
 8018be8:	46d4      	mov	ip, sl
 8018bea:	e7b3      	b.n	8018b54 <__multiply+0x8c>
 8018bec:	46e0      	mov	r8, ip
 8018bee:	e7dd      	b.n	8018bac <__multiply+0xe4>
 8018bf0:	3e01      	subs	r6, #1
 8018bf2:	e799      	b.n	8018b28 <__multiply+0x60>

08018bf4 <__pow5mult>:
 8018bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bf8:	4615      	mov	r5, r2
 8018bfa:	f012 0203 	ands.w	r2, r2, #3
 8018bfe:	4606      	mov	r6, r0
 8018c00:	460f      	mov	r7, r1
 8018c02:	d007      	beq.n	8018c14 <__pow5mult+0x20>
 8018c04:	3a01      	subs	r2, #1
 8018c06:	4c21      	ldr	r4, [pc, #132]	; (8018c8c <__pow5mult+0x98>)
 8018c08:	2300      	movs	r3, #0
 8018c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c0e:	f7ff fe8b 	bl	8018928 <__multadd>
 8018c12:	4607      	mov	r7, r0
 8018c14:	10ad      	asrs	r5, r5, #2
 8018c16:	d035      	beq.n	8018c84 <__pow5mult+0x90>
 8018c18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c1a:	b93c      	cbnz	r4, 8018c2c <__pow5mult+0x38>
 8018c1c:	2010      	movs	r0, #16
 8018c1e:	f7ff fe13 	bl	8018848 <malloc>
 8018c22:	6270      	str	r0, [r6, #36]	; 0x24
 8018c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c28:	6004      	str	r4, [r0, #0]
 8018c2a:	60c4      	str	r4, [r0, #12]
 8018c2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c34:	b94c      	cbnz	r4, 8018c4a <__pow5mult+0x56>
 8018c36:	f240 2171 	movw	r1, #625	; 0x271
 8018c3a:	4630      	mov	r0, r6
 8018c3c:	f7ff ff3b 	bl	8018ab6 <__i2b>
 8018c40:	2300      	movs	r3, #0
 8018c42:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c46:	4604      	mov	r4, r0
 8018c48:	6003      	str	r3, [r0, #0]
 8018c4a:	f04f 0800 	mov.w	r8, #0
 8018c4e:	07eb      	lsls	r3, r5, #31
 8018c50:	d50a      	bpl.n	8018c68 <__pow5mult+0x74>
 8018c52:	4639      	mov	r1, r7
 8018c54:	4622      	mov	r2, r4
 8018c56:	4630      	mov	r0, r6
 8018c58:	f7ff ff36 	bl	8018ac8 <__multiply>
 8018c5c:	4639      	mov	r1, r7
 8018c5e:	4681      	mov	r9, r0
 8018c60:	4630      	mov	r0, r6
 8018c62:	f7ff fe4a 	bl	80188fa <_Bfree>
 8018c66:	464f      	mov	r7, r9
 8018c68:	106d      	asrs	r5, r5, #1
 8018c6a:	d00b      	beq.n	8018c84 <__pow5mult+0x90>
 8018c6c:	6820      	ldr	r0, [r4, #0]
 8018c6e:	b938      	cbnz	r0, 8018c80 <__pow5mult+0x8c>
 8018c70:	4622      	mov	r2, r4
 8018c72:	4621      	mov	r1, r4
 8018c74:	4630      	mov	r0, r6
 8018c76:	f7ff ff27 	bl	8018ac8 <__multiply>
 8018c7a:	6020      	str	r0, [r4, #0]
 8018c7c:	f8c0 8000 	str.w	r8, [r0]
 8018c80:	4604      	mov	r4, r0
 8018c82:	e7e4      	b.n	8018c4e <__pow5mult+0x5a>
 8018c84:	4638      	mov	r0, r7
 8018c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c8a:	bf00      	nop
 8018c8c:	0801a610 	.word	0x0801a610

08018c90 <__lshift>:
 8018c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c94:	460c      	mov	r4, r1
 8018c96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c9a:	6923      	ldr	r3, [r4, #16]
 8018c9c:	6849      	ldr	r1, [r1, #4]
 8018c9e:	eb0a 0903 	add.w	r9, sl, r3
 8018ca2:	68a3      	ldr	r3, [r4, #8]
 8018ca4:	4607      	mov	r7, r0
 8018ca6:	4616      	mov	r6, r2
 8018ca8:	f109 0501 	add.w	r5, r9, #1
 8018cac:	42ab      	cmp	r3, r5
 8018cae:	db32      	blt.n	8018d16 <__lshift+0x86>
 8018cb0:	4638      	mov	r0, r7
 8018cb2:	f7ff fdee 	bl	8018892 <_Balloc>
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	4680      	mov	r8, r0
 8018cba:	f100 0114 	add.w	r1, r0, #20
 8018cbe:	461a      	mov	r2, r3
 8018cc0:	4553      	cmp	r3, sl
 8018cc2:	db2b      	blt.n	8018d1c <__lshift+0x8c>
 8018cc4:	6920      	ldr	r0, [r4, #16]
 8018cc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cca:	f104 0314 	add.w	r3, r4, #20
 8018cce:	f016 021f 	ands.w	r2, r6, #31
 8018cd2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018cd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018cda:	d025      	beq.n	8018d28 <__lshift+0x98>
 8018cdc:	f1c2 0e20 	rsb	lr, r2, #32
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	681e      	ldr	r6, [r3, #0]
 8018ce4:	468a      	mov	sl, r1
 8018ce6:	4096      	lsls	r6, r2
 8018ce8:	4330      	orrs	r0, r6
 8018cea:	f84a 0b04 	str.w	r0, [sl], #4
 8018cee:	f853 0b04 	ldr.w	r0, [r3], #4
 8018cf2:	459c      	cmp	ip, r3
 8018cf4:	fa20 f00e 	lsr.w	r0, r0, lr
 8018cf8:	d814      	bhi.n	8018d24 <__lshift+0x94>
 8018cfa:	6048      	str	r0, [r1, #4]
 8018cfc:	b108      	cbz	r0, 8018d02 <__lshift+0x72>
 8018cfe:	f109 0502 	add.w	r5, r9, #2
 8018d02:	3d01      	subs	r5, #1
 8018d04:	4638      	mov	r0, r7
 8018d06:	f8c8 5010 	str.w	r5, [r8, #16]
 8018d0a:	4621      	mov	r1, r4
 8018d0c:	f7ff fdf5 	bl	80188fa <_Bfree>
 8018d10:	4640      	mov	r0, r8
 8018d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d16:	3101      	adds	r1, #1
 8018d18:	005b      	lsls	r3, r3, #1
 8018d1a:	e7c7      	b.n	8018cac <__lshift+0x1c>
 8018d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d20:	3301      	adds	r3, #1
 8018d22:	e7cd      	b.n	8018cc0 <__lshift+0x30>
 8018d24:	4651      	mov	r1, sl
 8018d26:	e7dc      	b.n	8018ce2 <__lshift+0x52>
 8018d28:	3904      	subs	r1, #4
 8018d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d32:	459c      	cmp	ip, r3
 8018d34:	d8f9      	bhi.n	8018d2a <__lshift+0x9a>
 8018d36:	e7e4      	b.n	8018d02 <__lshift+0x72>

08018d38 <__mcmp>:
 8018d38:	6903      	ldr	r3, [r0, #16]
 8018d3a:	690a      	ldr	r2, [r1, #16]
 8018d3c:	1a9b      	subs	r3, r3, r2
 8018d3e:	b530      	push	{r4, r5, lr}
 8018d40:	d10c      	bne.n	8018d5c <__mcmp+0x24>
 8018d42:	0092      	lsls	r2, r2, #2
 8018d44:	3014      	adds	r0, #20
 8018d46:	3114      	adds	r1, #20
 8018d48:	1884      	adds	r4, r0, r2
 8018d4a:	4411      	add	r1, r2
 8018d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d54:	4295      	cmp	r5, r2
 8018d56:	d003      	beq.n	8018d60 <__mcmp+0x28>
 8018d58:	d305      	bcc.n	8018d66 <__mcmp+0x2e>
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	bd30      	pop	{r4, r5, pc}
 8018d60:	42a0      	cmp	r0, r4
 8018d62:	d3f3      	bcc.n	8018d4c <__mcmp+0x14>
 8018d64:	e7fa      	b.n	8018d5c <__mcmp+0x24>
 8018d66:	f04f 33ff 	mov.w	r3, #4294967295
 8018d6a:	e7f7      	b.n	8018d5c <__mcmp+0x24>

08018d6c <__mdiff>:
 8018d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d70:	460d      	mov	r5, r1
 8018d72:	4607      	mov	r7, r0
 8018d74:	4611      	mov	r1, r2
 8018d76:	4628      	mov	r0, r5
 8018d78:	4614      	mov	r4, r2
 8018d7a:	f7ff ffdd 	bl	8018d38 <__mcmp>
 8018d7e:	1e06      	subs	r6, r0, #0
 8018d80:	d108      	bne.n	8018d94 <__mdiff+0x28>
 8018d82:	4631      	mov	r1, r6
 8018d84:	4638      	mov	r0, r7
 8018d86:	f7ff fd84 	bl	8018892 <_Balloc>
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d94:	bfa4      	itt	ge
 8018d96:	4623      	movge	r3, r4
 8018d98:	462c      	movge	r4, r5
 8018d9a:	4638      	mov	r0, r7
 8018d9c:	6861      	ldr	r1, [r4, #4]
 8018d9e:	bfa6      	itte	ge
 8018da0:	461d      	movge	r5, r3
 8018da2:	2600      	movge	r6, #0
 8018da4:	2601      	movlt	r6, #1
 8018da6:	f7ff fd74 	bl	8018892 <_Balloc>
 8018daa:	692b      	ldr	r3, [r5, #16]
 8018dac:	60c6      	str	r6, [r0, #12]
 8018dae:	6926      	ldr	r6, [r4, #16]
 8018db0:	f105 0914 	add.w	r9, r5, #20
 8018db4:	f104 0214 	add.w	r2, r4, #20
 8018db8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018dbc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018dc0:	f100 0514 	add.w	r5, r0, #20
 8018dc4:	f04f 0e00 	mov.w	lr, #0
 8018dc8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018dcc:	f859 4b04 	ldr.w	r4, [r9], #4
 8018dd0:	fa1e f18a 	uxtah	r1, lr, sl
 8018dd4:	b2a3      	uxth	r3, r4
 8018dd6:	1ac9      	subs	r1, r1, r3
 8018dd8:	0c23      	lsrs	r3, r4, #16
 8018dda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018dde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018de2:	b289      	uxth	r1, r1
 8018de4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018de8:	45c8      	cmp	r8, r9
 8018dea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018dee:	4694      	mov	ip, r2
 8018df0:	f845 3b04 	str.w	r3, [r5], #4
 8018df4:	d8e8      	bhi.n	8018dc8 <__mdiff+0x5c>
 8018df6:	45bc      	cmp	ip, r7
 8018df8:	d304      	bcc.n	8018e04 <__mdiff+0x98>
 8018dfa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018dfe:	b183      	cbz	r3, 8018e22 <__mdiff+0xb6>
 8018e00:	6106      	str	r6, [r0, #16]
 8018e02:	e7c5      	b.n	8018d90 <__mdiff+0x24>
 8018e04:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e08:	fa1e f381 	uxtah	r3, lr, r1
 8018e0c:	141a      	asrs	r2, r3, #16
 8018e0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e12:	b29b      	uxth	r3, r3
 8018e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018e1c:	f845 3b04 	str.w	r3, [r5], #4
 8018e20:	e7e9      	b.n	8018df6 <__mdiff+0x8a>
 8018e22:	3e01      	subs	r6, #1
 8018e24:	e7e9      	b.n	8018dfa <__mdiff+0x8e>
	...

08018e28 <__ulp>:
 8018e28:	4b12      	ldr	r3, [pc, #72]	; (8018e74 <__ulp+0x4c>)
 8018e2a:	ee10 2a90 	vmov	r2, s1
 8018e2e:	401a      	ands	r2, r3
 8018e30:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	dd04      	ble.n	8018e42 <__ulp+0x1a>
 8018e38:	2000      	movs	r0, #0
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	ec41 0b10 	vmov	d0, r0, r1
 8018e40:	4770      	bx	lr
 8018e42:	425b      	negs	r3, r3
 8018e44:	151b      	asrs	r3, r3, #20
 8018e46:	2b13      	cmp	r3, #19
 8018e48:	f04f 0000 	mov.w	r0, #0
 8018e4c:	f04f 0100 	mov.w	r1, #0
 8018e50:	dc04      	bgt.n	8018e5c <__ulp+0x34>
 8018e52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e56:	fa42 f103 	asr.w	r1, r2, r3
 8018e5a:	e7ef      	b.n	8018e3c <__ulp+0x14>
 8018e5c:	3b14      	subs	r3, #20
 8018e5e:	2b1e      	cmp	r3, #30
 8018e60:	f04f 0201 	mov.w	r2, #1
 8018e64:	bfda      	itte	le
 8018e66:	f1c3 031f 	rsble	r3, r3, #31
 8018e6a:	fa02 f303 	lslle.w	r3, r2, r3
 8018e6e:	4613      	movgt	r3, r2
 8018e70:	4618      	mov	r0, r3
 8018e72:	e7e3      	b.n	8018e3c <__ulp+0x14>
 8018e74:	7ff00000 	.word	0x7ff00000

08018e78 <__b2d>:
 8018e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e7a:	6905      	ldr	r5, [r0, #16]
 8018e7c:	f100 0714 	add.w	r7, r0, #20
 8018e80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e84:	1f2e      	subs	r6, r5, #4
 8018e86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e8a:	4620      	mov	r0, r4
 8018e8c:	f7ff fdc5 	bl	8018a1a <__hi0bits>
 8018e90:	f1c0 0320 	rsb	r3, r0, #32
 8018e94:	280a      	cmp	r0, #10
 8018e96:	600b      	str	r3, [r1, #0]
 8018e98:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018f10 <__b2d+0x98>
 8018e9c:	dc14      	bgt.n	8018ec8 <__b2d+0x50>
 8018e9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018ea2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018ea6:	42b7      	cmp	r7, r6
 8018ea8:	ea41 030c 	orr.w	r3, r1, ip
 8018eac:	bf34      	ite	cc
 8018eae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018eb2:	2100      	movcs	r1, #0
 8018eb4:	3015      	adds	r0, #21
 8018eb6:	fa04 f000 	lsl.w	r0, r4, r0
 8018eba:	fa21 f10e 	lsr.w	r1, r1, lr
 8018ebe:	ea40 0201 	orr.w	r2, r0, r1
 8018ec2:	ec43 2b10 	vmov	d0, r2, r3
 8018ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ec8:	42b7      	cmp	r7, r6
 8018eca:	bf3a      	itte	cc
 8018ecc:	f1a5 0608 	subcc.w	r6, r5, #8
 8018ed0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ed4:	2100      	movcs	r1, #0
 8018ed6:	380b      	subs	r0, #11
 8018ed8:	d015      	beq.n	8018f06 <__b2d+0x8e>
 8018eda:	4084      	lsls	r4, r0
 8018edc:	f1c0 0520 	rsb	r5, r0, #32
 8018ee0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018ee4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018ee8:	42be      	cmp	r6, r7
 8018eea:	fa21 fc05 	lsr.w	ip, r1, r5
 8018eee:	ea44 030c 	orr.w	r3, r4, ip
 8018ef2:	bf8c      	ite	hi
 8018ef4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018ef8:	2400      	movls	r4, #0
 8018efa:	fa01 f000 	lsl.w	r0, r1, r0
 8018efe:	40ec      	lsrs	r4, r5
 8018f00:	ea40 0204 	orr.w	r2, r0, r4
 8018f04:	e7dd      	b.n	8018ec2 <__b2d+0x4a>
 8018f06:	ea44 030c 	orr.w	r3, r4, ip
 8018f0a:	460a      	mov	r2, r1
 8018f0c:	e7d9      	b.n	8018ec2 <__b2d+0x4a>
 8018f0e:	bf00      	nop
 8018f10:	3ff00000 	.word	0x3ff00000

08018f14 <__d2b>:
 8018f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f18:	460e      	mov	r6, r1
 8018f1a:	2101      	movs	r1, #1
 8018f1c:	ec59 8b10 	vmov	r8, r9, d0
 8018f20:	4615      	mov	r5, r2
 8018f22:	f7ff fcb6 	bl	8018892 <_Balloc>
 8018f26:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018f2a:	4607      	mov	r7, r0
 8018f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f30:	bb34      	cbnz	r4, 8018f80 <__d2b+0x6c>
 8018f32:	9301      	str	r3, [sp, #4]
 8018f34:	f1b8 0300 	subs.w	r3, r8, #0
 8018f38:	d027      	beq.n	8018f8a <__d2b+0x76>
 8018f3a:	a802      	add	r0, sp, #8
 8018f3c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018f40:	f7ff fd8a 	bl	8018a58 <__lo0bits>
 8018f44:	9900      	ldr	r1, [sp, #0]
 8018f46:	b1f0      	cbz	r0, 8018f86 <__d2b+0x72>
 8018f48:	9a01      	ldr	r2, [sp, #4]
 8018f4a:	f1c0 0320 	rsb	r3, r0, #32
 8018f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8018f52:	430b      	orrs	r3, r1
 8018f54:	40c2      	lsrs	r2, r0
 8018f56:	617b      	str	r3, [r7, #20]
 8018f58:	9201      	str	r2, [sp, #4]
 8018f5a:	9b01      	ldr	r3, [sp, #4]
 8018f5c:	61bb      	str	r3, [r7, #24]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	bf14      	ite	ne
 8018f62:	2102      	movne	r1, #2
 8018f64:	2101      	moveq	r1, #1
 8018f66:	6139      	str	r1, [r7, #16]
 8018f68:	b1c4      	cbz	r4, 8018f9c <__d2b+0x88>
 8018f6a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f6e:	4404      	add	r4, r0
 8018f70:	6034      	str	r4, [r6, #0]
 8018f72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f76:	6028      	str	r0, [r5, #0]
 8018f78:	4638      	mov	r0, r7
 8018f7a:	b003      	add	sp, #12
 8018f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f84:	e7d5      	b.n	8018f32 <__d2b+0x1e>
 8018f86:	6179      	str	r1, [r7, #20]
 8018f88:	e7e7      	b.n	8018f5a <__d2b+0x46>
 8018f8a:	a801      	add	r0, sp, #4
 8018f8c:	f7ff fd64 	bl	8018a58 <__lo0bits>
 8018f90:	9b01      	ldr	r3, [sp, #4]
 8018f92:	617b      	str	r3, [r7, #20]
 8018f94:	2101      	movs	r1, #1
 8018f96:	6139      	str	r1, [r7, #16]
 8018f98:	3020      	adds	r0, #32
 8018f9a:	e7e5      	b.n	8018f68 <__d2b+0x54>
 8018f9c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018fa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fa4:	6030      	str	r0, [r6, #0]
 8018fa6:	6918      	ldr	r0, [r3, #16]
 8018fa8:	f7ff fd37 	bl	8018a1a <__hi0bits>
 8018fac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018fb0:	e7e1      	b.n	8018f76 <__d2b+0x62>

08018fb2 <__ratio>:
 8018fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb6:	4688      	mov	r8, r1
 8018fb8:	4669      	mov	r1, sp
 8018fba:	4681      	mov	r9, r0
 8018fbc:	f7ff ff5c 	bl	8018e78 <__b2d>
 8018fc0:	a901      	add	r1, sp, #4
 8018fc2:	4640      	mov	r0, r8
 8018fc4:	ec57 6b10 	vmov	r6, r7, d0
 8018fc8:	f7ff ff56 	bl	8018e78 <__b2d>
 8018fcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018fd0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018fd4:	eba3 0c02 	sub.w	ip, r3, r2
 8018fd8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018fdc:	1a9b      	subs	r3, r3, r2
 8018fde:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018fe2:	ec5b ab10 	vmov	sl, fp, d0
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	bfce      	itee	gt
 8018fea:	463a      	movgt	r2, r7
 8018fec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ff0:	465a      	movle	r2, fp
 8018ff2:	4659      	mov	r1, fp
 8018ff4:	463d      	mov	r5, r7
 8018ff6:	bfd4      	ite	le
 8018ff8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018ffc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019000:	4630      	mov	r0, r6
 8019002:	ee10 2a10 	vmov	r2, s0
 8019006:	460b      	mov	r3, r1
 8019008:	4629      	mov	r1, r5
 801900a:	f7e7 fc37 	bl	800087c <__aeabi_ddiv>
 801900e:	ec41 0b10 	vmov	d0, r0, r1
 8019012:	b003      	add	sp, #12
 8019014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019018 <__copybits>:
 8019018:	3901      	subs	r1, #1
 801901a:	b510      	push	{r4, lr}
 801901c:	1149      	asrs	r1, r1, #5
 801901e:	6914      	ldr	r4, [r2, #16]
 8019020:	3101      	adds	r1, #1
 8019022:	f102 0314 	add.w	r3, r2, #20
 8019026:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801902a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801902e:	42a3      	cmp	r3, r4
 8019030:	4602      	mov	r2, r0
 8019032:	d303      	bcc.n	801903c <__copybits+0x24>
 8019034:	2300      	movs	r3, #0
 8019036:	428a      	cmp	r2, r1
 8019038:	d305      	bcc.n	8019046 <__copybits+0x2e>
 801903a:	bd10      	pop	{r4, pc}
 801903c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019040:	f840 2b04 	str.w	r2, [r0], #4
 8019044:	e7f3      	b.n	801902e <__copybits+0x16>
 8019046:	f842 3b04 	str.w	r3, [r2], #4
 801904a:	e7f4      	b.n	8019036 <__copybits+0x1e>

0801904c <__any_on>:
 801904c:	f100 0214 	add.w	r2, r0, #20
 8019050:	6900      	ldr	r0, [r0, #16]
 8019052:	114b      	asrs	r3, r1, #5
 8019054:	4298      	cmp	r0, r3
 8019056:	b510      	push	{r4, lr}
 8019058:	db11      	blt.n	801907e <__any_on+0x32>
 801905a:	dd0a      	ble.n	8019072 <__any_on+0x26>
 801905c:	f011 011f 	ands.w	r1, r1, #31
 8019060:	d007      	beq.n	8019072 <__any_on+0x26>
 8019062:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019066:	fa24 f001 	lsr.w	r0, r4, r1
 801906a:	fa00 f101 	lsl.w	r1, r0, r1
 801906e:	428c      	cmp	r4, r1
 8019070:	d10b      	bne.n	801908a <__any_on+0x3e>
 8019072:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019076:	4293      	cmp	r3, r2
 8019078:	d803      	bhi.n	8019082 <__any_on+0x36>
 801907a:	2000      	movs	r0, #0
 801907c:	bd10      	pop	{r4, pc}
 801907e:	4603      	mov	r3, r0
 8019080:	e7f7      	b.n	8019072 <__any_on+0x26>
 8019082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019086:	2900      	cmp	r1, #0
 8019088:	d0f5      	beq.n	8019076 <__any_on+0x2a>
 801908a:	2001      	movs	r0, #1
 801908c:	e7f6      	b.n	801907c <__any_on+0x30>

0801908e <_calloc_r>:
 801908e:	b538      	push	{r3, r4, r5, lr}
 8019090:	fb02 f401 	mul.w	r4, r2, r1
 8019094:	4621      	mov	r1, r4
 8019096:	f000 f857 	bl	8019148 <_malloc_r>
 801909a:	4605      	mov	r5, r0
 801909c:	b118      	cbz	r0, 80190a6 <_calloc_r+0x18>
 801909e:	4622      	mov	r2, r4
 80190a0:	2100      	movs	r1, #0
 80190a2:	f7fc fca1 	bl	80159e8 <memset>
 80190a6:	4628      	mov	r0, r5
 80190a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080190ac <_free_r>:
 80190ac:	b538      	push	{r3, r4, r5, lr}
 80190ae:	4605      	mov	r5, r0
 80190b0:	2900      	cmp	r1, #0
 80190b2:	d045      	beq.n	8019140 <_free_r+0x94>
 80190b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190b8:	1f0c      	subs	r4, r1, #4
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	bfb8      	it	lt
 80190be:	18e4      	addlt	r4, r4, r3
 80190c0:	f000 fe30 	bl	8019d24 <__malloc_lock>
 80190c4:	4a1f      	ldr	r2, [pc, #124]	; (8019144 <_free_r+0x98>)
 80190c6:	6813      	ldr	r3, [r2, #0]
 80190c8:	4610      	mov	r0, r2
 80190ca:	b933      	cbnz	r3, 80190da <_free_r+0x2e>
 80190cc:	6063      	str	r3, [r4, #4]
 80190ce:	6014      	str	r4, [r2, #0]
 80190d0:	4628      	mov	r0, r5
 80190d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190d6:	f000 be26 	b.w	8019d26 <__malloc_unlock>
 80190da:	42a3      	cmp	r3, r4
 80190dc:	d90c      	bls.n	80190f8 <_free_r+0x4c>
 80190de:	6821      	ldr	r1, [r4, #0]
 80190e0:	1862      	adds	r2, r4, r1
 80190e2:	4293      	cmp	r3, r2
 80190e4:	bf04      	itt	eq
 80190e6:	681a      	ldreq	r2, [r3, #0]
 80190e8:	685b      	ldreq	r3, [r3, #4]
 80190ea:	6063      	str	r3, [r4, #4]
 80190ec:	bf04      	itt	eq
 80190ee:	1852      	addeq	r2, r2, r1
 80190f0:	6022      	streq	r2, [r4, #0]
 80190f2:	6004      	str	r4, [r0, #0]
 80190f4:	e7ec      	b.n	80190d0 <_free_r+0x24>
 80190f6:	4613      	mov	r3, r2
 80190f8:	685a      	ldr	r2, [r3, #4]
 80190fa:	b10a      	cbz	r2, 8019100 <_free_r+0x54>
 80190fc:	42a2      	cmp	r2, r4
 80190fe:	d9fa      	bls.n	80190f6 <_free_r+0x4a>
 8019100:	6819      	ldr	r1, [r3, #0]
 8019102:	1858      	adds	r0, r3, r1
 8019104:	42a0      	cmp	r0, r4
 8019106:	d10b      	bne.n	8019120 <_free_r+0x74>
 8019108:	6820      	ldr	r0, [r4, #0]
 801910a:	4401      	add	r1, r0
 801910c:	1858      	adds	r0, r3, r1
 801910e:	4282      	cmp	r2, r0
 8019110:	6019      	str	r1, [r3, #0]
 8019112:	d1dd      	bne.n	80190d0 <_free_r+0x24>
 8019114:	6810      	ldr	r0, [r2, #0]
 8019116:	6852      	ldr	r2, [r2, #4]
 8019118:	605a      	str	r2, [r3, #4]
 801911a:	4401      	add	r1, r0
 801911c:	6019      	str	r1, [r3, #0]
 801911e:	e7d7      	b.n	80190d0 <_free_r+0x24>
 8019120:	d902      	bls.n	8019128 <_free_r+0x7c>
 8019122:	230c      	movs	r3, #12
 8019124:	602b      	str	r3, [r5, #0]
 8019126:	e7d3      	b.n	80190d0 <_free_r+0x24>
 8019128:	6820      	ldr	r0, [r4, #0]
 801912a:	1821      	adds	r1, r4, r0
 801912c:	428a      	cmp	r2, r1
 801912e:	bf04      	itt	eq
 8019130:	6811      	ldreq	r1, [r2, #0]
 8019132:	6852      	ldreq	r2, [r2, #4]
 8019134:	6062      	str	r2, [r4, #4]
 8019136:	bf04      	itt	eq
 8019138:	1809      	addeq	r1, r1, r0
 801913a:	6021      	streq	r1, [r4, #0]
 801913c:	605c      	str	r4, [r3, #4]
 801913e:	e7c7      	b.n	80190d0 <_free_r+0x24>
 8019140:	bd38      	pop	{r3, r4, r5, pc}
 8019142:	bf00      	nop
 8019144:	20048240 	.word	0x20048240

08019148 <_malloc_r>:
 8019148:	b570      	push	{r4, r5, r6, lr}
 801914a:	1ccd      	adds	r5, r1, #3
 801914c:	f025 0503 	bic.w	r5, r5, #3
 8019150:	3508      	adds	r5, #8
 8019152:	2d0c      	cmp	r5, #12
 8019154:	bf38      	it	cc
 8019156:	250c      	movcc	r5, #12
 8019158:	2d00      	cmp	r5, #0
 801915a:	4606      	mov	r6, r0
 801915c:	db01      	blt.n	8019162 <_malloc_r+0x1a>
 801915e:	42a9      	cmp	r1, r5
 8019160:	d903      	bls.n	801916a <_malloc_r+0x22>
 8019162:	230c      	movs	r3, #12
 8019164:	6033      	str	r3, [r6, #0]
 8019166:	2000      	movs	r0, #0
 8019168:	bd70      	pop	{r4, r5, r6, pc}
 801916a:	f000 fddb 	bl	8019d24 <__malloc_lock>
 801916e:	4a21      	ldr	r2, [pc, #132]	; (80191f4 <_malloc_r+0xac>)
 8019170:	6814      	ldr	r4, [r2, #0]
 8019172:	4621      	mov	r1, r4
 8019174:	b991      	cbnz	r1, 801919c <_malloc_r+0x54>
 8019176:	4c20      	ldr	r4, [pc, #128]	; (80191f8 <_malloc_r+0xb0>)
 8019178:	6823      	ldr	r3, [r4, #0]
 801917a:	b91b      	cbnz	r3, 8019184 <_malloc_r+0x3c>
 801917c:	4630      	mov	r0, r6
 801917e:	f000 fc91 	bl	8019aa4 <_sbrk_r>
 8019182:	6020      	str	r0, [r4, #0]
 8019184:	4629      	mov	r1, r5
 8019186:	4630      	mov	r0, r6
 8019188:	f000 fc8c 	bl	8019aa4 <_sbrk_r>
 801918c:	1c43      	adds	r3, r0, #1
 801918e:	d124      	bne.n	80191da <_malloc_r+0x92>
 8019190:	230c      	movs	r3, #12
 8019192:	6033      	str	r3, [r6, #0]
 8019194:	4630      	mov	r0, r6
 8019196:	f000 fdc6 	bl	8019d26 <__malloc_unlock>
 801919a:	e7e4      	b.n	8019166 <_malloc_r+0x1e>
 801919c:	680b      	ldr	r3, [r1, #0]
 801919e:	1b5b      	subs	r3, r3, r5
 80191a0:	d418      	bmi.n	80191d4 <_malloc_r+0x8c>
 80191a2:	2b0b      	cmp	r3, #11
 80191a4:	d90f      	bls.n	80191c6 <_malloc_r+0x7e>
 80191a6:	600b      	str	r3, [r1, #0]
 80191a8:	50cd      	str	r5, [r1, r3]
 80191aa:	18cc      	adds	r4, r1, r3
 80191ac:	4630      	mov	r0, r6
 80191ae:	f000 fdba 	bl	8019d26 <__malloc_unlock>
 80191b2:	f104 000b 	add.w	r0, r4, #11
 80191b6:	1d23      	adds	r3, r4, #4
 80191b8:	f020 0007 	bic.w	r0, r0, #7
 80191bc:	1ac3      	subs	r3, r0, r3
 80191be:	d0d3      	beq.n	8019168 <_malloc_r+0x20>
 80191c0:	425a      	negs	r2, r3
 80191c2:	50e2      	str	r2, [r4, r3]
 80191c4:	e7d0      	b.n	8019168 <_malloc_r+0x20>
 80191c6:	428c      	cmp	r4, r1
 80191c8:	684b      	ldr	r3, [r1, #4]
 80191ca:	bf16      	itet	ne
 80191cc:	6063      	strne	r3, [r4, #4]
 80191ce:	6013      	streq	r3, [r2, #0]
 80191d0:	460c      	movne	r4, r1
 80191d2:	e7eb      	b.n	80191ac <_malloc_r+0x64>
 80191d4:	460c      	mov	r4, r1
 80191d6:	6849      	ldr	r1, [r1, #4]
 80191d8:	e7cc      	b.n	8019174 <_malloc_r+0x2c>
 80191da:	1cc4      	adds	r4, r0, #3
 80191dc:	f024 0403 	bic.w	r4, r4, #3
 80191e0:	42a0      	cmp	r0, r4
 80191e2:	d005      	beq.n	80191f0 <_malloc_r+0xa8>
 80191e4:	1a21      	subs	r1, r4, r0
 80191e6:	4630      	mov	r0, r6
 80191e8:	f000 fc5c 	bl	8019aa4 <_sbrk_r>
 80191ec:	3001      	adds	r0, #1
 80191ee:	d0cf      	beq.n	8019190 <_malloc_r+0x48>
 80191f0:	6025      	str	r5, [r4, #0]
 80191f2:	e7db      	b.n	80191ac <_malloc_r+0x64>
 80191f4:	20048240 	.word	0x20048240
 80191f8:	20048244 	.word	0x20048244

080191fc <__ssputs_r>:
 80191fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019200:	688e      	ldr	r6, [r1, #8]
 8019202:	429e      	cmp	r6, r3
 8019204:	4682      	mov	sl, r0
 8019206:	460c      	mov	r4, r1
 8019208:	4690      	mov	r8, r2
 801920a:	4699      	mov	r9, r3
 801920c:	d837      	bhi.n	801927e <__ssputs_r+0x82>
 801920e:	898a      	ldrh	r2, [r1, #12]
 8019210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019214:	d031      	beq.n	801927a <__ssputs_r+0x7e>
 8019216:	6825      	ldr	r5, [r4, #0]
 8019218:	6909      	ldr	r1, [r1, #16]
 801921a:	1a6f      	subs	r7, r5, r1
 801921c:	6965      	ldr	r5, [r4, #20]
 801921e:	2302      	movs	r3, #2
 8019220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019224:	fb95 f5f3 	sdiv	r5, r5, r3
 8019228:	f109 0301 	add.w	r3, r9, #1
 801922c:	443b      	add	r3, r7
 801922e:	429d      	cmp	r5, r3
 8019230:	bf38      	it	cc
 8019232:	461d      	movcc	r5, r3
 8019234:	0553      	lsls	r3, r2, #21
 8019236:	d530      	bpl.n	801929a <__ssputs_r+0x9e>
 8019238:	4629      	mov	r1, r5
 801923a:	f7ff ff85 	bl	8019148 <_malloc_r>
 801923e:	4606      	mov	r6, r0
 8019240:	b950      	cbnz	r0, 8019258 <__ssputs_r+0x5c>
 8019242:	230c      	movs	r3, #12
 8019244:	f8ca 3000 	str.w	r3, [sl]
 8019248:	89a3      	ldrh	r3, [r4, #12]
 801924a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801924e:	81a3      	strh	r3, [r4, #12]
 8019250:	f04f 30ff 	mov.w	r0, #4294967295
 8019254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019258:	463a      	mov	r2, r7
 801925a:	6921      	ldr	r1, [r4, #16]
 801925c:	f7ff fb0e 	bl	801887c <memcpy>
 8019260:	89a3      	ldrh	r3, [r4, #12]
 8019262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801926a:	81a3      	strh	r3, [r4, #12]
 801926c:	6126      	str	r6, [r4, #16]
 801926e:	6165      	str	r5, [r4, #20]
 8019270:	443e      	add	r6, r7
 8019272:	1bed      	subs	r5, r5, r7
 8019274:	6026      	str	r6, [r4, #0]
 8019276:	60a5      	str	r5, [r4, #8]
 8019278:	464e      	mov	r6, r9
 801927a:	454e      	cmp	r6, r9
 801927c:	d900      	bls.n	8019280 <__ssputs_r+0x84>
 801927e:	464e      	mov	r6, r9
 8019280:	4632      	mov	r2, r6
 8019282:	4641      	mov	r1, r8
 8019284:	6820      	ldr	r0, [r4, #0]
 8019286:	f000 fd34 	bl	8019cf2 <memmove>
 801928a:	68a3      	ldr	r3, [r4, #8]
 801928c:	1b9b      	subs	r3, r3, r6
 801928e:	60a3      	str	r3, [r4, #8]
 8019290:	6823      	ldr	r3, [r4, #0]
 8019292:	441e      	add	r6, r3
 8019294:	6026      	str	r6, [r4, #0]
 8019296:	2000      	movs	r0, #0
 8019298:	e7dc      	b.n	8019254 <__ssputs_r+0x58>
 801929a:	462a      	mov	r2, r5
 801929c:	f000 fd44 	bl	8019d28 <_realloc_r>
 80192a0:	4606      	mov	r6, r0
 80192a2:	2800      	cmp	r0, #0
 80192a4:	d1e2      	bne.n	801926c <__ssputs_r+0x70>
 80192a6:	6921      	ldr	r1, [r4, #16]
 80192a8:	4650      	mov	r0, sl
 80192aa:	f7ff feff 	bl	80190ac <_free_r>
 80192ae:	e7c8      	b.n	8019242 <__ssputs_r+0x46>

080192b0 <_svfiprintf_r>:
 80192b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b4:	461d      	mov	r5, r3
 80192b6:	898b      	ldrh	r3, [r1, #12]
 80192b8:	061f      	lsls	r7, r3, #24
 80192ba:	b09d      	sub	sp, #116	; 0x74
 80192bc:	4680      	mov	r8, r0
 80192be:	460c      	mov	r4, r1
 80192c0:	4616      	mov	r6, r2
 80192c2:	d50f      	bpl.n	80192e4 <_svfiprintf_r+0x34>
 80192c4:	690b      	ldr	r3, [r1, #16]
 80192c6:	b96b      	cbnz	r3, 80192e4 <_svfiprintf_r+0x34>
 80192c8:	2140      	movs	r1, #64	; 0x40
 80192ca:	f7ff ff3d 	bl	8019148 <_malloc_r>
 80192ce:	6020      	str	r0, [r4, #0]
 80192d0:	6120      	str	r0, [r4, #16]
 80192d2:	b928      	cbnz	r0, 80192e0 <_svfiprintf_r+0x30>
 80192d4:	230c      	movs	r3, #12
 80192d6:	f8c8 3000 	str.w	r3, [r8]
 80192da:	f04f 30ff 	mov.w	r0, #4294967295
 80192de:	e0c8      	b.n	8019472 <_svfiprintf_r+0x1c2>
 80192e0:	2340      	movs	r3, #64	; 0x40
 80192e2:	6163      	str	r3, [r4, #20]
 80192e4:	2300      	movs	r3, #0
 80192e6:	9309      	str	r3, [sp, #36]	; 0x24
 80192e8:	2320      	movs	r3, #32
 80192ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192ee:	2330      	movs	r3, #48	; 0x30
 80192f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192f4:	9503      	str	r5, [sp, #12]
 80192f6:	f04f 0b01 	mov.w	fp, #1
 80192fa:	4637      	mov	r7, r6
 80192fc:	463d      	mov	r5, r7
 80192fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019302:	b10b      	cbz	r3, 8019308 <_svfiprintf_r+0x58>
 8019304:	2b25      	cmp	r3, #37	; 0x25
 8019306:	d13e      	bne.n	8019386 <_svfiprintf_r+0xd6>
 8019308:	ebb7 0a06 	subs.w	sl, r7, r6
 801930c:	d00b      	beq.n	8019326 <_svfiprintf_r+0x76>
 801930e:	4653      	mov	r3, sl
 8019310:	4632      	mov	r2, r6
 8019312:	4621      	mov	r1, r4
 8019314:	4640      	mov	r0, r8
 8019316:	f7ff ff71 	bl	80191fc <__ssputs_r>
 801931a:	3001      	adds	r0, #1
 801931c:	f000 80a4 	beq.w	8019468 <_svfiprintf_r+0x1b8>
 8019320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019322:	4453      	add	r3, sl
 8019324:	9309      	str	r3, [sp, #36]	; 0x24
 8019326:	783b      	ldrb	r3, [r7, #0]
 8019328:	2b00      	cmp	r3, #0
 801932a:	f000 809d 	beq.w	8019468 <_svfiprintf_r+0x1b8>
 801932e:	2300      	movs	r3, #0
 8019330:	f04f 32ff 	mov.w	r2, #4294967295
 8019334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019338:	9304      	str	r3, [sp, #16]
 801933a:	9307      	str	r3, [sp, #28]
 801933c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019340:	931a      	str	r3, [sp, #104]	; 0x68
 8019342:	462f      	mov	r7, r5
 8019344:	2205      	movs	r2, #5
 8019346:	f817 1b01 	ldrb.w	r1, [r7], #1
 801934a:	4850      	ldr	r0, [pc, #320]	; (801948c <_svfiprintf_r+0x1dc>)
 801934c:	f7e6 ff60 	bl	8000210 <memchr>
 8019350:	9b04      	ldr	r3, [sp, #16]
 8019352:	b9d0      	cbnz	r0, 801938a <_svfiprintf_r+0xda>
 8019354:	06d9      	lsls	r1, r3, #27
 8019356:	bf44      	itt	mi
 8019358:	2220      	movmi	r2, #32
 801935a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801935e:	071a      	lsls	r2, r3, #28
 8019360:	bf44      	itt	mi
 8019362:	222b      	movmi	r2, #43	; 0x2b
 8019364:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019368:	782a      	ldrb	r2, [r5, #0]
 801936a:	2a2a      	cmp	r2, #42	; 0x2a
 801936c:	d015      	beq.n	801939a <_svfiprintf_r+0xea>
 801936e:	9a07      	ldr	r2, [sp, #28]
 8019370:	462f      	mov	r7, r5
 8019372:	2000      	movs	r0, #0
 8019374:	250a      	movs	r5, #10
 8019376:	4639      	mov	r1, r7
 8019378:	f811 3b01 	ldrb.w	r3, [r1], #1
 801937c:	3b30      	subs	r3, #48	; 0x30
 801937e:	2b09      	cmp	r3, #9
 8019380:	d94d      	bls.n	801941e <_svfiprintf_r+0x16e>
 8019382:	b1b8      	cbz	r0, 80193b4 <_svfiprintf_r+0x104>
 8019384:	e00f      	b.n	80193a6 <_svfiprintf_r+0xf6>
 8019386:	462f      	mov	r7, r5
 8019388:	e7b8      	b.n	80192fc <_svfiprintf_r+0x4c>
 801938a:	4a40      	ldr	r2, [pc, #256]	; (801948c <_svfiprintf_r+0x1dc>)
 801938c:	1a80      	subs	r0, r0, r2
 801938e:	fa0b f000 	lsl.w	r0, fp, r0
 8019392:	4318      	orrs	r0, r3
 8019394:	9004      	str	r0, [sp, #16]
 8019396:	463d      	mov	r5, r7
 8019398:	e7d3      	b.n	8019342 <_svfiprintf_r+0x92>
 801939a:	9a03      	ldr	r2, [sp, #12]
 801939c:	1d11      	adds	r1, r2, #4
 801939e:	6812      	ldr	r2, [r2, #0]
 80193a0:	9103      	str	r1, [sp, #12]
 80193a2:	2a00      	cmp	r2, #0
 80193a4:	db01      	blt.n	80193aa <_svfiprintf_r+0xfa>
 80193a6:	9207      	str	r2, [sp, #28]
 80193a8:	e004      	b.n	80193b4 <_svfiprintf_r+0x104>
 80193aa:	4252      	negs	r2, r2
 80193ac:	f043 0302 	orr.w	r3, r3, #2
 80193b0:	9207      	str	r2, [sp, #28]
 80193b2:	9304      	str	r3, [sp, #16]
 80193b4:	783b      	ldrb	r3, [r7, #0]
 80193b6:	2b2e      	cmp	r3, #46	; 0x2e
 80193b8:	d10c      	bne.n	80193d4 <_svfiprintf_r+0x124>
 80193ba:	787b      	ldrb	r3, [r7, #1]
 80193bc:	2b2a      	cmp	r3, #42	; 0x2a
 80193be:	d133      	bne.n	8019428 <_svfiprintf_r+0x178>
 80193c0:	9b03      	ldr	r3, [sp, #12]
 80193c2:	1d1a      	adds	r2, r3, #4
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	9203      	str	r2, [sp, #12]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	bfb8      	it	lt
 80193cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80193d0:	3702      	adds	r7, #2
 80193d2:	9305      	str	r3, [sp, #20]
 80193d4:	4d2e      	ldr	r5, [pc, #184]	; (8019490 <_svfiprintf_r+0x1e0>)
 80193d6:	7839      	ldrb	r1, [r7, #0]
 80193d8:	2203      	movs	r2, #3
 80193da:	4628      	mov	r0, r5
 80193dc:	f7e6 ff18 	bl	8000210 <memchr>
 80193e0:	b138      	cbz	r0, 80193f2 <_svfiprintf_r+0x142>
 80193e2:	2340      	movs	r3, #64	; 0x40
 80193e4:	1b40      	subs	r0, r0, r5
 80193e6:	fa03 f000 	lsl.w	r0, r3, r0
 80193ea:	9b04      	ldr	r3, [sp, #16]
 80193ec:	4303      	orrs	r3, r0
 80193ee:	3701      	adds	r7, #1
 80193f0:	9304      	str	r3, [sp, #16]
 80193f2:	7839      	ldrb	r1, [r7, #0]
 80193f4:	4827      	ldr	r0, [pc, #156]	; (8019494 <_svfiprintf_r+0x1e4>)
 80193f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193fa:	2206      	movs	r2, #6
 80193fc:	1c7e      	adds	r6, r7, #1
 80193fe:	f7e6 ff07 	bl	8000210 <memchr>
 8019402:	2800      	cmp	r0, #0
 8019404:	d038      	beq.n	8019478 <_svfiprintf_r+0x1c8>
 8019406:	4b24      	ldr	r3, [pc, #144]	; (8019498 <_svfiprintf_r+0x1e8>)
 8019408:	bb13      	cbnz	r3, 8019450 <_svfiprintf_r+0x1a0>
 801940a:	9b03      	ldr	r3, [sp, #12]
 801940c:	3307      	adds	r3, #7
 801940e:	f023 0307 	bic.w	r3, r3, #7
 8019412:	3308      	adds	r3, #8
 8019414:	9303      	str	r3, [sp, #12]
 8019416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019418:	444b      	add	r3, r9
 801941a:	9309      	str	r3, [sp, #36]	; 0x24
 801941c:	e76d      	b.n	80192fa <_svfiprintf_r+0x4a>
 801941e:	fb05 3202 	mla	r2, r5, r2, r3
 8019422:	2001      	movs	r0, #1
 8019424:	460f      	mov	r7, r1
 8019426:	e7a6      	b.n	8019376 <_svfiprintf_r+0xc6>
 8019428:	2300      	movs	r3, #0
 801942a:	3701      	adds	r7, #1
 801942c:	9305      	str	r3, [sp, #20]
 801942e:	4619      	mov	r1, r3
 8019430:	250a      	movs	r5, #10
 8019432:	4638      	mov	r0, r7
 8019434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019438:	3a30      	subs	r2, #48	; 0x30
 801943a:	2a09      	cmp	r2, #9
 801943c:	d903      	bls.n	8019446 <_svfiprintf_r+0x196>
 801943e:	2b00      	cmp	r3, #0
 8019440:	d0c8      	beq.n	80193d4 <_svfiprintf_r+0x124>
 8019442:	9105      	str	r1, [sp, #20]
 8019444:	e7c6      	b.n	80193d4 <_svfiprintf_r+0x124>
 8019446:	fb05 2101 	mla	r1, r5, r1, r2
 801944a:	2301      	movs	r3, #1
 801944c:	4607      	mov	r7, r0
 801944e:	e7f0      	b.n	8019432 <_svfiprintf_r+0x182>
 8019450:	ab03      	add	r3, sp, #12
 8019452:	9300      	str	r3, [sp, #0]
 8019454:	4622      	mov	r2, r4
 8019456:	4b11      	ldr	r3, [pc, #68]	; (801949c <_svfiprintf_r+0x1ec>)
 8019458:	a904      	add	r1, sp, #16
 801945a:	4640      	mov	r0, r8
 801945c:	f7fc fb60 	bl	8015b20 <_printf_float>
 8019460:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019464:	4681      	mov	r9, r0
 8019466:	d1d6      	bne.n	8019416 <_svfiprintf_r+0x166>
 8019468:	89a3      	ldrh	r3, [r4, #12]
 801946a:	065b      	lsls	r3, r3, #25
 801946c:	f53f af35 	bmi.w	80192da <_svfiprintf_r+0x2a>
 8019470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019472:	b01d      	add	sp, #116	; 0x74
 8019474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019478:	ab03      	add	r3, sp, #12
 801947a:	9300      	str	r3, [sp, #0]
 801947c:	4622      	mov	r2, r4
 801947e:	4b07      	ldr	r3, [pc, #28]	; (801949c <_svfiprintf_r+0x1ec>)
 8019480:	a904      	add	r1, sp, #16
 8019482:	4640      	mov	r0, r8
 8019484:	f7fc fe02 	bl	801608c <_printf_i>
 8019488:	e7ea      	b.n	8019460 <_svfiprintf_r+0x1b0>
 801948a:	bf00      	nop
 801948c:	0801a61c 	.word	0x0801a61c
 8019490:	0801a622 	.word	0x0801a622
 8019494:	0801a626 	.word	0x0801a626
 8019498:	08015b21 	.word	0x08015b21
 801949c:	080191fd 	.word	0x080191fd

080194a0 <_sungetc_r>:
 80194a0:	b538      	push	{r3, r4, r5, lr}
 80194a2:	1c4b      	adds	r3, r1, #1
 80194a4:	4614      	mov	r4, r2
 80194a6:	d103      	bne.n	80194b0 <_sungetc_r+0x10>
 80194a8:	f04f 35ff 	mov.w	r5, #4294967295
 80194ac:	4628      	mov	r0, r5
 80194ae:	bd38      	pop	{r3, r4, r5, pc}
 80194b0:	8993      	ldrh	r3, [r2, #12]
 80194b2:	f023 0320 	bic.w	r3, r3, #32
 80194b6:	8193      	strh	r3, [r2, #12]
 80194b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80194ba:	6852      	ldr	r2, [r2, #4]
 80194bc:	b2cd      	uxtb	r5, r1
 80194be:	b18b      	cbz	r3, 80194e4 <_sungetc_r+0x44>
 80194c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80194c2:	4293      	cmp	r3, r2
 80194c4:	dd08      	ble.n	80194d8 <_sungetc_r+0x38>
 80194c6:	6823      	ldr	r3, [r4, #0]
 80194c8:	1e5a      	subs	r2, r3, #1
 80194ca:	6022      	str	r2, [r4, #0]
 80194cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80194d0:	6863      	ldr	r3, [r4, #4]
 80194d2:	3301      	adds	r3, #1
 80194d4:	6063      	str	r3, [r4, #4]
 80194d6:	e7e9      	b.n	80194ac <_sungetc_r+0xc>
 80194d8:	4621      	mov	r1, r4
 80194da:	f000 fbc3 	bl	8019c64 <__submore>
 80194de:	2800      	cmp	r0, #0
 80194e0:	d0f1      	beq.n	80194c6 <_sungetc_r+0x26>
 80194e2:	e7e1      	b.n	80194a8 <_sungetc_r+0x8>
 80194e4:	6921      	ldr	r1, [r4, #16]
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	b151      	cbz	r1, 8019500 <_sungetc_r+0x60>
 80194ea:	4299      	cmp	r1, r3
 80194ec:	d208      	bcs.n	8019500 <_sungetc_r+0x60>
 80194ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80194f2:	42a9      	cmp	r1, r5
 80194f4:	d104      	bne.n	8019500 <_sungetc_r+0x60>
 80194f6:	3b01      	subs	r3, #1
 80194f8:	3201      	adds	r2, #1
 80194fa:	6023      	str	r3, [r4, #0]
 80194fc:	6062      	str	r2, [r4, #4]
 80194fe:	e7d5      	b.n	80194ac <_sungetc_r+0xc>
 8019500:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019508:	6363      	str	r3, [r4, #52]	; 0x34
 801950a:	2303      	movs	r3, #3
 801950c:	63a3      	str	r3, [r4, #56]	; 0x38
 801950e:	4623      	mov	r3, r4
 8019510:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019514:	6023      	str	r3, [r4, #0]
 8019516:	2301      	movs	r3, #1
 8019518:	e7dc      	b.n	80194d4 <_sungetc_r+0x34>

0801951a <__ssrefill_r>:
 801951a:	b510      	push	{r4, lr}
 801951c:	460c      	mov	r4, r1
 801951e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019520:	b169      	cbz	r1, 801953e <__ssrefill_r+0x24>
 8019522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019526:	4299      	cmp	r1, r3
 8019528:	d001      	beq.n	801952e <__ssrefill_r+0x14>
 801952a:	f7ff fdbf 	bl	80190ac <_free_r>
 801952e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019530:	6063      	str	r3, [r4, #4]
 8019532:	2000      	movs	r0, #0
 8019534:	6360      	str	r0, [r4, #52]	; 0x34
 8019536:	b113      	cbz	r3, 801953e <__ssrefill_r+0x24>
 8019538:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801953a:	6023      	str	r3, [r4, #0]
 801953c:	bd10      	pop	{r4, pc}
 801953e:	6923      	ldr	r3, [r4, #16]
 8019540:	6023      	str	r3, [r4, #0]
 8019542:	2300      	movs	r3, #0
 8019544:	6063      	str	r3, [r4, #4]
 8019546:	89a3      	ldrh	r3, [r4, #12]
 8019548:	f043 0320 	orr.w	r3, r3, #32
 801954c:	81a3      	strh	r3, [r4, #12]
 801954e:	f04f 30ff 	mov.w	r0, #4294967295
 8019552:	e7f3      	b.n	801953c <__ssrefill_r+0x22>

08019554 <__ssvfiscanf_r>:
 8019554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019558:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801955c:	460c      	mov	r4, r1
 801955e:	2100      	movs	r1, #0
 8019560:	9144      	str	r1, [sp, #272]	; 0x110
 8019562:	9145      	str	r1, [sp, #276]	; 0x114
 8019564:	499f      	ldr	r1, [pc, #636]	; (80197e4 <__ssvfiscanf_r+0x290>)
 8019566:	91a0      	str	r1, [sp, #640]	; 0x280
 8019568:	f10d 0804 	add.w	r8, sp, #4
 801956c:	499e      	ldr	r1, [pc, #632]	; (80197e8 <__ssvfiscanf_r+0x294>)
 801956e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80197ec <__ssvfiscanf_r+0x298>
 8019572:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019576:	4606      	mov	r6, r0
 8019578:	4692      	mov	sl, r2
 801957a:	91a1      	str	r1, [sp, #644]	; 0x284
 801957c:	9300      	str	r3, [sp, #0]
 801957e:	270a      	movs	r7, #10
 8019580:	f89a 3000 	ldrb.w	r3, [sl]
 8019584:	2b00      	cmp	r3, #0
 8019586:	f000 812a 	beq.w	80197de <__ssvfiscanf_r+0x28a>
 801958a:	4655      	mov	r5, sl
 801958c:	f7ff f93e 	bl	801880c <__locale_ctype_ptr>
 8019590:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019594:	4458      	add	r0, fp
 8019596:	7843      	ldrb	r3, [r0, #1]
 8019598:	f013 0308 	ands.w	r3, r3, #8
 801959c:	d01c      	beq.n	80195d8 <__ssvfiscanf_r+0x84>
 801959e:	6863      	ldr	r3, [r4, #4]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	dd12      	ble.n	80195ca <__ssvfiscanf_r+0x76>
 80195a4:	f7ff f932 	bl	801880c <__locale_ctype_ptr>
 80195a8:	6823      	ldr	r3, [r4, #0]
 80195aa:	781a      	ldrb	r2, [r3, #0]
 80195ac:	4410      	add	r0, r2
 80195ae:	7842      	ldrb	r2, [r0, #1]
 80195b0:	0712      	lsls	r2, r2, #28
 80195b2:	d401      	bmi.n	80195b8 <__ssvfiscanf_r+0x64>
 80195b4:	46aa      	mov	sl, r5
 80195b6:	e7e3      	b.n	8019580 <__ssvfiscanf_r+0x2c>
 80195b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195ba:	3201      	adds	r2, #1
 80195bc:	9245      	str	r2, [sp, #276]	; 0x114
 80195be:	6862      	ldr	r2, [r4, #4]
 80195c0:	3301      	adds	r3, #1
 80195c2:	3a01      	subs	r2, #1
 80195c4:	6062      	str	r2, [r4, #4]
 80195c6:	6023      	str	r3, [r4, #0]
 80195c8:	e7e9      	b.n	801959e <__ssvfiscanf_r+0x4a>
 80195ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195cc:	4621      	mov	r1, r4
 80195ce:	4630      	mov	r0, r6
 80195d0:	4798      	blx	r3
 80195d2:	2800      	cmp	r0, #0
 80195d4:	d0e6      	beq.n	80195a4 <__ssvfiscanf_r+0x50>
 80195d6:	e7ed      	b.n	80195b4 <__ssvfiscanf_r+0x60>
 80195d8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80195dc:	f040 8082 	bne.w	80196e4 <__ssvfiscanf_r+0x190>
 80195e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80195e2:	9341      	str	r3, [sp, #260]	; 0x104
 80195e4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80195e8:	2b2a      	cmp	r3, #42	; 0x2a
 80195ea:	d103      	bne.n	80195f4 <__ssvfiscanf_r+0xa0>
 80195ec:	2310      	movs	r3, #16
 80195ee:	9341      	str	r3, [sp, #260]	; 0x104
 80195f0:	f10a 0502 	add.w	r5, sl, #2
 80195f4:	46aa      	mov	sl, r5
 80195f6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80195fa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80195fe:	2a09      	cmp	r2, #9
 8019600:	d922      	bls.n	8019648 <__ssvfiscanf_r+0xf4>
 8019602:	2203      	movs	r2, #3
 8019604:	4879      	ldr	r0, [pc, #484]	; (80197ec <__ssvfiscanf_r+0x298>)
 8019606:	f7e6 fe03 	bl	8000210 <memchr>
 801960a:	b138      	cbz	r0, 801961c <__ssvfiscanf_r+0xc8>
 801960c:	eba0 0309 	sub.w	r3, r0, r9
 8019610:	2001      	movs	r0, #1
 8019612:	4098      	lsls	r0, r3
 8019614:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019616:	4318      	orrs	r0, r3
 8019618:	9041      	str	r0, [sp, #260]	; 0x104
 801961a:	46aa      	mov	sl, r5
 801961c:	f89a 3000 	ldrb.w	r3, [sl]
 8019620:	2b67      	cmp	r3, #103	; 0x67
 8019622:	f10a 0501 	add.w	r5, sl, #1
 8019626:	d82b      	bhi.n	8019680 <__ssvfiscanf_r+0x12c>
 8019628:	2b65      	cmp	r3, #101	; 0x65
 801962a:	f080 809f 	bcs.w	801976c <__ssvfiscanf_r+0x218>
 801962e:	2b47      	cmp	r3, #71	; 0x47
 8019630:	d810      	bhi.n	8019654 <__ssvfiscanf_r+0x100>
 8019632:	2b45      	cmp	r3, #69	; 0x45
 8019634:	f080 809a 	bcs.w	801976c <__ssvfiscanf_r+0x218>
 8019638:	2b00      	cmp	r3, #0
 801963a:	d06c      	beq.n	8019716 <__ssvfiscanf_r+0x1c2>
 801963c:	2b25      	cmp	r3, #37	; 0x25
 801963e:	d051      	beq.n	80196e4 <__ssvfiscanf_r+0x190>
 8019640:	2303      	movs	r3, #3
 8019642:	9347      	str	r3, [sp, #284]	; 0x11c
 8019644:	9742      	str	r7, [sp, #264]	; 0x108
 8019646:	e027      	b.n	8019698 <__ssvfiscanf_r+0x144>
 8019648:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801964a:	fb07 1303 	mla	r3, r7, r3, r1
 801964e:	3b30      	subs	r3, #48	; 0x30
 8019650:	9343      	str	r3, [sp, #268]	; 0x10c
 8019652:	e7cf      	b.n	80195f4 <__ssvfiscanf_r+0xa0>
 8019654:	2b5b      	cmp	r3, #91	; 0x5b
 8019656:	d06a      	beq.n	801972e <__ssvfiscanf_r+0x1da>
 8019658:	d80c      	bhi.n	8019674 <__ssvfiscanf_r+0x120>
 801965a:	2b58      	cmp	r3, #88	; 0x58
 801965c:	d1f0      	bne.n	8019640 <__ssvfiscanf_r+0xec>
 801965e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019664:	9241      	str	r2, [sp, #260]	; 0x104
 8019666:	2210      	movs	r2, #16
 8019668:	9242      	str	r2, [sp, #264]	; 0x108
 801966a:	2b6e      	cmp	r3, #110	; 0x6e
 801966c:	bf8c      	ite	hi
 801966e:	2304      	movhi	r3, #4
 8019670:	2303      	movls	r3, #3
 8019672:	e010      	b.n	8019696 <__ssvfiscanf_r+0x142>
 8019674:	2b63      	cmp	r3, #99	; 0x63
 8019676:	d065      	beq.n	8019744 <__ssvfiscanf_r+0x1f0>
 8019678:	2b64      	cmp	r3, #100	; 0x64
 801967a:	d1e1      	bne.n	8019640 <__ssvfiscanf_r+0xec>
 801967c:	9742      	str	r7, [sp, #264]	; 0x108
 801967e:	e7f4      	b.n	801966a <__ssvfiscanf_r+0x116>
 8019680:	2b70      	cmp	r3, #112	; 0x70
 8019682:	d04b      	beq.n	801971c <__ssvfiscanf_r+0x1c8>
 8019684:	d826      	bhi.n	80196d4 <__ssvfiscanf_r+0x180>
 8019686:	2b6e      	cmp	r3, #110	; 0x6e
 8019688:	d062      	beq.n	8019750 <__ssvfiscanf_r+0x1fc>
 801968a:	d84c      	bhi.n	8019726 <__ssvfiscanf_r+0x1d2>
 801968c:	2b69      	cmp	r3, #105	; 0x69
 801968e:	d1d7      	bne.n	8019640 <__ssvfiscanf_r+0xec>
 8019690:	2300      	movs	r3, #0
 8019692:	9342      	str	r3, [sp, #264]	; 0x108
 8019694:	2303      	movs	r3, #3
 8019696:	9347      	str	r3, [sp, #284]	; 0x11c
 8019698:	6863      	ldr	r3, [r4, #4]
 801969a:	2b00      	cmp	r3, #0
 801969c:	dd68      	ble.n	8019770 <__ssvfiscanf_r+0x21c>
 801969e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80196a0:	0659      	lsls	r1, r3, #25
 80196a2:	d407      	bmi.n	80196b4 <__ssvfiscanf_r+0x160>
 80196a4:	f7ff f8b2 	bl	801880c <__locale_ctype_ptr>
 80196a8:	6823      	ldr	r3, [r4, #0]
 80196aa:	781a      	ldrb	r2, [r3, #0]
 80196ac:	4410      	add	r0, r2
 80196ae:	7842      	ldrb	r2, [r0, #1]
 80196b0:	0712      	lsls	r2, r2, #28
 80196b2:	d464      	bmi.n	801977e <__ssvfiscanf_r+0x22a>
 80196b4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80196b6:	2b02      	cmp	r3, #2
 80196b8:	dc73      	bgt.n	80197a2 <__ssvfiscanf_r+0x24e>
 80196ba:	466b      	mov	r3, sp
 80196bc:	4622      	mov	r2, r4
 80196be:	a941      	add	r1, sp, #260	; 0x104
 80196c0:	4630      	mov	r0, r6
 80196c2:	f000 f897 	bl	80197f4 <_scanf_chars>
 80196c6:	2801      	cmp	r0, #1
 80196c8:	f000 8089 	beq.w	80197de <__ssvfiscanf_r+0x28a>
 80196cc:	2802      	cmp	r0, #2
 80196ce:	f47f af71 	bne.w	80195b4 <__ssvfiscanf_r+0x60>
 80196d2:	e01d      	b.n	8019710 <__ssvfiscanf_r+0x1bc>
 80196d4:	2b75      	cmp	r3, #117	; 0x75
 80196d6:	d0d1      	beq.n	801967c <__ssvfiscanf_r+0x128>
 80196d8:	2b78      	cmp	r3, #120	; 0x78
 80196da:	d0c0      	beq.n	801965e <__ssvfiscanf_r+0x10a>
 80196dc:	2b73      	cmp	r3, #115	; 0x73
 80196de:	d1af      	bne.n	8019640 <__ssvfiscanf_r+0xec>
 80196e0:	2302      	movs	r3, #2
 80196e2:	e7d8      	b.n	8019696 <__ssvfiscanf_r+0x142>
 80196e4:	6863      	ldr	r3, [r4, #4]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	dd0c      	ble.n	8019704 <__ssvfiscanf_r+0x1b0>
 80196ea:	6823      	ldr	r3, [r4, #0]
 80196ec:	781a      	ldrb	r2, [r3, #0]
 80196ee:	455a      	cmp	r2, fp
 80196f0:	d175      	bne.n	80197de <__ssvfiscanf_r+0x28a>
 80196f2:	3301      	adds	r3, #1
 80196f4:	6862      	ldr	r2, [r4, #4]
 80196f6:	6023      	str	r3, [r4, #0]
 80196f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80196fa:	3a01      	subs	r2, #1
 80196fc:	3301      	adds	r3, #1
 80196fe:	6062      	str	r2, [r4, #4]
 8019700:	9345      	str	r3, [sp, #276]	; 0x114
 8019702:	e757      	b.n	80195b4 <__ssvfiscanf_r+0x60>
 8019704:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019706:	4621      	mov	r1, r4
 8019708:	4630      	mov	r0, r6
 801970a:	4798      	blx	r3
 801970c:	2800      	cmp	r0, #0
 801970e:	d0ec      	beq.n	80196ea <__ssvfiscanf_r+0x196>
 8019710:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019712:	2800      	cmp	r0, #0
 8019714:	d159      	bne.n	80197ca <__ssvfiscanf_r+0x276>
 8019716:	f04f 30ff 	mov.w	r0, #4294967295
 801971a:	e05c      	b.n	80197d6 <__ssvfiscanf_r+0x282>
 801971c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801971e:	f042 0220 	orr.w	r2, r2, #32
 8019722:	9241      	str	r2, [sp, #260]	; 0x104
 8019724:	e79b      	b.n	801965e <__ssvfiscanf_r+0x10a>
 8019726:	2308      	movs	r3, #8
 8019728:	9342      	str	r3, [sp, #264]	; 0x108
 801972a:	2304      	movs	r3, #4
 801972c:	e7b3      	b.n	8019696 <__ssvfiscanf_r+0x142>
 801972e:	4629      	mov	r1, r5
 8019730:	4640      	mov	r0, r8
 8019732:	f000 f9c7 	bl	8019ac4 <__sccl>
 8019736:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801973c:	9341      	str	r3, [sp, #260]	; 0x104
 801973e:	4605      	mov	r5, r0
 8019740:	2301      	movs	r3, #1
 8019742:	e7a8      	b.n	8019696 <__ssvfiscanf_r+0x142>
 8019744:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801974a:	9341      	str	r3, [sp, #260]	; 0x104
 801974c:	2300      	movs	r3, #0
 801974e:	e7a2      	b.n	8019696 <__ssvfiscanf_r+0x142>
 8019750:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019752:	06c3      	lsls	r3, r0, #27
 8019754:	f53f af2e 	bmi.w	80195b4 <__ssvfiscanf_r+0x60>
 8019758:	9b00      	ldr	r3, [sp, #0]
 801975a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801975c:	1d19      	adds	r1, r3, #4
 801975e:	9100      	str	r1, [sp, #0]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	07c0      	lsls	r0, r0, #31
 8019764:	bf4c      	ite	mi
 8019766:	801a      	strhmi	r2, [r3, #0]
 8019768:	601a      	strpl	r2, [r3, #0]
 801976a:	e723      	b.n	80195b4 <__ssvfiscanf_r+0x60>
 801976c:	2305      	movs	r3, #5
 801976e:	e792      	b.n	8019696 <__ssvfiscanf_r+0x142>
 8019770:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019772:	4621      	mov	r1, r4
 8019774:	4630      	mov	r0, r6
 8019776:	4798      	blx	r3
 8019778:	2800      	cmp	r0, #0
 801977a:	d090      	beq.n	801969e <__ssvfiscanf_r+0x14a>
 801977c:	e7c8      	b.n	8019710 <__ssvfiscanf_r+0x1bc>
 801977e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019780:	3201      	adds	r2, #1
 8019782:	9245      	str	r2, [sp, #276]	; 0x114
 8019784:	6862      	ldr	r2, [r4, #4]
 8019786:	3a01      	subs	r2, #1
 8019788:	2a00      	cmp	r2, #0
 801978a:	6062      	str	r2, [r4, #4]
 801978c:	dd02      	ble.n	8019794 <__ssvfiscanf_r+0x240>
 801978e:	3301      	adds	r3, #1
 8019790:	6023      	str	r3, [r4, #0]
 8019792:	e787      	b.n	80196a4 <__ssvfiscanf_r+0x150>
 8019794:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019796:	4621      	mov	r1, r4
 8019798:	4630      	mov	r0, r6
 801979a:	4798      	blx	r3
 801979c:	2800      	cmp	r0, #0
 801979e:	d081      	beq.n	80196a4 <__ssvfiscanf_r+0x150>
 80197a0:	e7b6      	b.n	8019710 <__ssvfiscanf_r+0x1bc>
 80197a2:	2b04      	cmp	r3, #4
 80197a4:	dc06      	bgt.n	80197b4 <__ssvfiscanf_r+0x260>
 80197a6:	466b      	mov	r3, sp
 80197a8:	4622      	mov	r2, r4
 80197aa:	a941      	add	r1, sp, #260	; 0x104
 80197ac:	4630      	mov	r0, r6
 80197ae:	f000 f885 	bl	80198bc <_scanf_i>
 80197b2:	e788      	b.n	80196c6 <__ssvfiscanf_r+0x172>
 80197b4:	4b0e      	ldr	r3, [pc, #56]	; (80197f0 <__ssvfiscanf_r+0x29c>)
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f43f aefc 	beq.w	80195b4 <__ssvfiscanf_r+0x60>
 80197bc:	466b      	mov	r3, sp
 80197be:	4622      	mov	r2, r4
 80197c0:	a941      	add	r1, sp, #260	; 0x104
 80197c2:	4630      	mov	r0, r6
 80197c4:	f7fc fd74 	bl	80162b0 <_scanf_float>
 80197c8:	e77d      	b.n	80196c6 <__ssvfiscanf_r+0x172>
 80197ca:	89a3      	ldrh	r3, [r4, #12]
 80197cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80197d0:	bf18      	it	ne
 80197d2:	f04f 30ff 	movne.w	r0, #4294967295
 80197d6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80197da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80197e0:	e7f9      	b.n	80197d6 <__ssvfiscanf_r+0x282>
 80197e2:	bf00      	nop
 80197e4:	080194a1 	.word	0x080194a1
 80197e8:	0801951b 	.word	0x0801951b
 80197ec:	0801a622 	.word	0x0801a622
 80197f0:	080162b1 	.word	0x080162b1

080197f4 <_scanf_chars>:
 80197f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197f8:	4615      	mov	r5, r2
 80197fa:	688a      	ldr	r2, [r1, #8]
 80197fc:	4680      	mov	r8, r0
 80197fe:	460c      	mov	r4, r1
 8019800:	b932      	cbnz	r2, 8019810 <_scanf_chars+0x1c>
 8019802:	698a      	ldr	r2, [r1, #24]
 8019804:	2a00      	cmp	r2, #0
 8019806:	bf14      	ite	ne
 8019808:	f04f 32ff 	movne.w	r2, #4294967295
 801980c:	2201      	moveq	r2, #1
 801980e:	608a      	str	r2, [r1, #8]
 8019810:	6822      	ldr	r2, [r4, #0]
 8019812:	06d1      	lsls	r1, r2, #27
 8019814:	bf5f      	itttt	pl
 8019816:	681a      	ldrpl	r2, [r3, #0]
 8019818:	1d11      	addpl	r1, r2, #4
 801981a:	6019      	strpl	r1, [r3, #0]
 801981c:	6817      	ldrpl	r7, [r2, #0]
 801981e:	2600      	movs	r6, #0
 8019820:	69a3      	ldr	r3, [r4, #24]
 8019822:	b1db      	cbz	r3, 801985c <_scanf_chars+0x68>
 8019824:	2b01      	cmp	r3, #1
 8019826:	d107      	bne.n	8019838 <_scanf_chars+0x44>
 8019828:	682b      	ldr	r3, [r5, #0]
 801982a:	6962      	ldr	r2, [r4, #20]
 801982c:	781b      	ldrb	r3, [r3, #0]
 801982e:	5cd3      	ldrb	r3, [r2, r3]
 8019830:	b9a3      	cbnz	r3, 801985c <_scanf_chars+0x68>
 8019832:	2e00      	cmp	r6, #0
 8019834:	d132      	bne.n	801989c <_scanf_chars+0xa8>
 8019836:	e006      	b.n	8019846 <_scanf_chars+0x52>
 8019838:	2b02      	cmp	r3, #2
 801983a:	d007      	beq.n	801984c <_scanf_chars+0x58>
 801983c:	2e00      	cmp	r6, #0
 801983e:	d12d      	bne.n	801989c <_scanf_chars+0xa8>
 8019840:	69a3      	ldr	r3, [r4, #24]
 8019842:	2b01      	cmp	r3, #1
 8019844:	d12a      	bne.n	801989c <_scanf_chars+0xa8>
 8019846:	2001      	movs	r0, #1
 8019848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801984c:	f7fe ffde 	bl	801880c <__locale_ctype_ptr>
 8019850:	682b      	ldr	r3, [r5, #0]
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	4418      	add	r0, r3
 8019856:	7843      	ldrb	r3, [r0, #1]
 8019858:	071b      	lsls	r3, r3, #28
 801985a:	d4ef      	bmi.n	801983c <_scanf_chars+0x48>
 801985c:	6823      	ldr	r3, [r4, #0]
 801985e:	06da      	lsls	r2, r3, #27
 8019860:	bf5e      	ittt	pl
 8019862:	682b      	ldrpl	r3, [r5, #0]
 8019864:	781b      	ldrbpl	r3, [r3, #0]
 8019866:	703b      	strbpl	r3, [r7, #0]
 8019868:	682a      	ldr	r2, [r5, #0]
 801986a:	686b      	ldr	r3, [r5, #4]
 801986c:	f102 0201 	add.w	r2, r2, #1
 8019870:	602a      	str	r2, [r5, #0]
 8019872:	68a2      	ldr	r2, [r4, #8]
 8019874:	f103 33ff 	add.w	r3, r3, #4294967295
 8019878:	f102 32ff 	add.w	r2, r2, #4294967295
 801987c:	606b      	str	r3, [r5, #4]
 801987e:	f106 0601 	add.w	r6, r6, #1
 8019882:	bf58      	it	pl
 8019884:	3701      	addpl	r7, #1
 8019886:	60a2      	str	r2, [r4, #8]
 8019888:	b142      	cbz	r2, 801989c <_scanf_chars+0xa8>
 801988a:	2b00      	cmp	r3, #0
 801988c:	dcc8      	bgt.n	8019820 <_scanf_chars+0x2c>
 801988e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019892:	4629      	mov	r1, r5
 8019894:	4640      	mov	r0, r8
 8019896:	4798      	blx	r3
 8019898:	2800      	cmp	r0, #0
 801989a:	d0c1      	beq.n	8019820 <_scanf_chars+0x2c>
 801989c:	6823      	ldr	r3, [r4, #0]
 801989e:	f013 0310 	ands.w	r3, r3, #16
 80198a2:	d105      	bne.n	80198b0 <_scanf_chars+0xbc>
 80198a4:	68e2      	ldr	r2, [r4, #12]
 80198a6:	3201      	adds	r2, #1
 80198a8:	60e2      	str	r2, [r4, #12]
 80198aa:	69a2      	ldr	r2, [r4, #24]
 80198ac:	b102      	cbz	r2, 80198b0 <_scanf_chars+0xbc>
 80198ae:	703b      	strb	r3, [r7, #0]
 80198b0:	6923      	ldr	r3, [r4, #16]
 80198b2:	441e      	add	r6, r3
 80198b4:	6126      	str	r6, [r4, #16]
 80198b6:	2000      	movs	r0, #0
 80198b8:	e7c6      	b.n	8019848 <_scanf_chars+0x54>
	...

080198bc <_scanf_i>:
 80198bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c0:	469a      	mov	sl, r3
 80198c2:	4b74      	ldr	r3, [pc, #464]	; (8019a94 <_scanf_i+0x1d8>)
 80198c4:	460c      	mov	r4, r1
 80198c6:	4683      	mov	fp, r0
 80198c8:	4616      	mov	r6, r2
 80198ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198ce:	b087      	sub	sp, #28
 80198d0:	ab03      	add	r3, sp, #12
 80198d2:	68a7      	ldr	r7, [r4, #8]
 80198d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198d8:	4b6f      	ldr	r3, [pc, #444]	; (8019a98 <_scanf_i+0x1dc>)
 80198da:	69a1      	ldr	r1, [r4, #24]
 80198dc:	4a6f      	ldr	r2, [pc, #444]	; (8019a9c <_scanf_i+0x1e0>)
 80198de:	2903      	cmp	r1, #3
 80198e0:	bf08      	it	eq
 80198e2:	461a      	moveq	r2, r3
 80198e4:	1e7b      	subs	r3, r7, #1
 80198e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80198ea:	bf84      	itt	hi
 80198ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80198f0:	60a3      	strhi	r3, [r4, #8]
 80198f2:	6823      	ldr	r3, [r4, #0]
 80198f4:	9200      	str	r2, [sp, #0]
 80198f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80198fa:	bf88      	it	hi
 80198fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019900:	f104 091c 	add.w	r9, r4, #28
 8019904:	6023      	str	r3, [r4, #0]
 8019906:	bf8c      	ite	hi
 8019908:	197f      	addhi	r7, r7, r5
 801990a:	2700      	movls	r7, #0
 801990c:	464b      	mov	r3, r9
 801990e:	f04f 0800 	mov.w	r8, #0
 8019912:	9301      	str	r3, [sp, #4]
 8019914:	6831      	ldr	r1, [r6, #0]
 8019916:	ab03      	add	r3, sp, #12
 8019918:	2202      	movs	r2, #2
 801991a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801991e:	7809      	ldrb	r1, [r1, #0]
 8019920:	f7e6 fc76 	bl	8000210 <memchr>
 8019924:	9b01      	ldr	r3, [sp, #4]
 8019926:	b330      	cbz	r0, 8019976 <_scanf_i+0xba>
 8019928:	f1b8 0f01 	cmp.w	r8, #1
 801992c:	d15a      	bne.n	80199e4 <_scanf_i+0x128>
 801992e:	6862      	ldr	r2, [r4, #4]
 8019930:	b92a      	cbnz	r2, 801993e <_scanf_i+0x82>
 8019932:	6822      	ldr	r2, [r4, #0]
 8019934:	2108      	movs	r1, #8
 8019936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801993a:	6061      	str	r1, [r4, #4]
 801993c:	6022      	str	r2, [r4, #0]
 801993e:	6822      	ldr	r2, [r4, #0]
 8019940:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019944:	6022      	str	r2, [r4, #0]
 8019946:	68a2      	ldr	r2, [r4, #8]
 8019948:	1e51      	subs	r1, r2, #1
 801994a:	60a1      	str	r1, [r4, #8]
 801994c:	b19a      	cbz	r2, 8019976 <_scanf_i+0xba>
 801994e:	6832      	ldr	r2, [r6, #0]
 8019950:	1c51      	adds	r1, r2, #1
 8019952:	6031      	str	r1, [r6, #0]
 8019954:	7812      	ldrb	r2, [r2, #0]
 8019956:	701a      	strb	r2, [r3, #0]
 8019958:	1c5d      	adds	r5, r3, #1
 801995a:	6873      	ldr	r3, [r6, #4]
 801995c:	3b01      	subs	r3, #1
 801995e:	2b00      	cmp	r3, #0
 8019960:	6073      	str	r3, [r6, #4]
 8019962:	dc07      	bgt.n	8019974 <_scanf_i+0xb8>
 8019964:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019968:	4631      	mov	r1, r6
 801996a:	4658      	mov	r0, fp
 801996c:	4798      	blx	r3
 801996e:	2800      	cmp	r0, #0
 8019970:	f040 8086 	bne.w	8019a80 <_scanf_i+0x1c4>
 8019974:	462b      	mov	r3, r5
 8019976:	f108 0801 	add.w	r8, r8, #1
 801997a:	f1b8 0f03 	cmp.w	r8, #3
 801997e:	d1c8      	bne.n	8019912 <_scanf_i+0x56>
 8019980:	6862      	ldr	r2, [r4, #4]
 8019982:	b90a      	cbnz	r2, 8019988 <_scanf_i+0xcc>
 8019984:	220a      	movs	r2, #10
 8019986:	6062      	str	r2, [r4, #4]
 8019988:	6862      	ldr	r2, [r4, #4]
 801998a:	4945      	ldr	r1, [pc, #276]	; (8019aa0 <_scanf_i+0x1e4>)
 801998c:	6960      	ldr	r0, [r4, #20]
 801998e:	9301      	str	r3, [sp, #4]
 8019990:	1a89      	subs	r1, r1, r2
 8019992:	f000 f897 	bl	8019ac4 <__sccl>
 8019996:	9b01      	ldr	r3, [sp, #4]
 8019998:	f04f 0800 	mov.w	r8, #0
 801999c:	461d      	mov	r5, r3
 801999e:	68a3      	ldr	r3, [r4, #8]
 80199a0:	6822      	ldr	r2, [r4, #0]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d03a      	beq.n	8019a1c <_scanf_i+0x160>
 80199a6:	6831      	ldr	r1, [r6, #0]
 80199a8:	6960      	ldr	r0, [r4, #20]
 80199aa:	f891 c000 	ldrb.w	ip, [r1]
 80199ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80199b2:	2800      	cmp	r0, #0
 80199b4:	d032      	beq.n	8019a1c <_scanf_i+0x160>
 80199b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80199ba:	d121      	bne.n	8019a00 <_scanf_i+0x144>
 80199bc:	0510      	lsls	r0, r2, #20
 80199be:	d51f      	bpl.n	8019a00 <_scanf_i+0x144>
 80199c0:	f108 0801 	add.w	r8, r8, #1
 80199c4:	b117      	cbz	r7, 80199cc <_scanf_i+0x110>
 80199c6:	3301      	adds	r3, #1
 80199c8:	3f01      	subs	r7, #1
 80199ca:	60a3      	str	r3, [r4, #8]
 80199cc:	6873      	ldr	r3, [r6, #4]
 80199ce:	3b01      	subs	r3, #1
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	6073      	str	r3, [r6, #4]
 80199d4:	dd1b      	ble.n	8019a0e <_scanf_i+0x152>
 80199d6:	6833      	ldr	r3, [r6, #0]
 80199d8:	3301      	adds	r3, #1
 80199da:	6033      	str	r3, [r6, #0]
 80199dc:	68a3      	ldr	r3, [r4, #8]
 80199de:	3b01      	subs	r3, #1
 80199e0:	60a3      	str	r3, [r4, #8]
 80199e2:	e7dc      	b.n	801999e <_scanf_i+0xe2>
 80199e4:	f1b8 0f02 	cmp.w	r8, #2
 80199e8:	d1ad      	bne.n	8019946 <_scanf_i+0x8a>
 80199ea:	6822      	ldr	r2, [r4, #0]
 80199ec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80199f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80199f4:	d1bf      	bne.n	8019976 <_scanf_i+0xba>
 80199f6:	2110      	movs	r1, #16
 80199f8:	6061      	str	r1, [r4, #4]
 80199fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80199fe:	e7a1      	b.n	8019944 <_scanf_i+0x88>
 8019a00:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019a04:	6022      	str	r2, [r4, #0]
 8019a06:	780b      	ldrb	r3, [r1, #0]
 8019a08:	702b      	strb	r3, [r5, #0]
 8019a0a:	3501      	adds	r5, #1
 8019a0c:	e7de      	b.n	80199cc <_scanf_i+0x110>
 8019a0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a12:	4631      	mov	r1, r6
 8019a14:	4658      	mov	r0, fp
 8019a16:	4798      	blx	r3
 8019a18:	2800      	cmp	r0, #0
 8019a1a:	d0df      	beq.n	80199dc <_scanf_i+0x120>
 8019a1c:	6823      	ldr	r3, [r4, #0]
 8019a1e:	05d9      	lsls	r1, r3, #23
 8019a20:	d50c      	bpl.n	8019a3c <_scanf_i+0x180>
 8019a22:	454d      	cmp	r5, r9
 8019a24:	d908      	bls.n	8019a38 <_scanf_i+0x17c>
 8019a26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019a2e:	4632      	mov	r2, r6
 8019a30:	4658      	mov	r0, fp
 8019a32:	4798      	blx	r3
 8019a34:	1e6f      	subs	r7, r5, #1
 8019a36:	463d      	mov	r5, r7
 8019a38:	454d      	cmp	r5, r9
 8019a3a:	d029      	beq.n	8019a90 <_scanf_i+0x1d4>
 8019a3c:	6822      	ldr	r2, [r4, #0]
 8019a3e:	f012 0210 	ands.w	r2, r2, #16
 8019a42:	d113      	bne.n	8019a6c <_scanf_i+0x1b0>
 8019a44:	702a      	strb	r2, [r5, #0]
 8019a46:	6863      	ldr	r3, [r4, #4]
 8019a48:	9e00      	ldr	r6, [sp, #0]
 8019a4a:	4649      	mov	r1, r9
 8019a4c:	4658      	mov	r0, fp
 8019a4e:	47b0      	blx	r6
 8019a50:	f8da 3000 	ldr.w	r3, [sl]
 8019a54:	6821      	ldr	r1, [r4, #0]
 8019a56:	1d1a      	adds	r2, r3, #4
 8019a58:	f8ca 2000 	str.w	r2, [sl]
 8019a5c:	f011 0f20 	tst.w	r1, #32
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	d010      	beq.n	8019a86 <_scanf_i+0x1ca>
 8019a64:	6018      	str	r0, [r3, #0]
 8019a66:	68e3      	ldr	r3, [r4, #12]
 8019a68:	3301      	adds	r3, #1
 8019a6a:	60e3      	str	r3, [r4, #12]
 8019a6c:	eba5 0509 	sub.w	r5, r5, r9
 8019a70:	44a8      	add	r8, r5
 8019a72:	6925      	ldr	r5, [r4, #16]
 8019a74:	4445      	add	r5, r8
 8019a76:	6125      	str	r5, [r4, #16]
 8019a78:	2000      	movs	r0, #0
 8019a7a:	b007      	add	sp, #28
 8019a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a80:	f04f 0800 	mov.w	r8, #0
 8019a84:	e7ca      	b.n	8019a1c <_scanf_i+0x160>
 8019a86:	07ca      	lsls	r2, r1, #31
 8019a88:	bf4c      	ite	mi
 8019a8a:	8018      	strhmi	r0, [r3, #0]
 8019a8c:	6018      	strpl	r0, [r3, #0]
 8019a8e:	e7ea      	b.n	8019a66 <_scanf_i+0x1aa>
 8019a90:	2001      	movs	r0, #1
 8019a92:	e7f2      	b.n	8019a7a <_scanf_i+0x1be>
 8019a94:	0801a1e4 	.word	0x0801a1e4
 8019a98:	080174c9 	.word	0x080174c9
 8019a9c:	08019c41 	.word	0x08019c41
 8019aa0:	0801a63d 	.word	0x0801a63d

08019aa4 <_sbrk_r>:
 8019aa4:	b538      	push	{r3, r4, r5, lr}
 8019aa6:	4c06      	ldr	r4, [pc, #24]	; (8019ac0 <_sbrk_r+0x1c>)
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	4605      	mov	r5, r0
 8019aac:	4608      	mov	r0, r1
 8019aae:	6023      	str	r3, [r4, #0]
 8019ab0:	f7ed ffbe 	bl	8007a30 <_sbrk>
 8019ab4:	1c43      	adds	r3, r0, #1
 8019ab6:	d102      	bne.n	8019abe <_sbrk_r+0x1a>
 8019ab8:	6823      	ldr	r3, [r4, #0]
 8019aba:	b103      	cbz	r3, 8019abe <_sbrk_r+0x1a>
 8019abc:	602b      	str	r3, [r5, #0]
 8019abe:	bd38      	pop	{r3, r4, r5, pc}
 8019ac0:	2004cbdc 	.word	0x2004cbdc

08019ac4 <__sccl>:
 8019ac4:	b570      	push	{r4, r5, r6, lr}
 8019ac6:	780b      	ldrb	r3, [r1, #0]
 8019ac8:	2b5e      	cmp	r3, #94	; 0x5e
 8019aca:	bf13      	iteet	ne
 8019acc:	1c4a      	addne	r2, r1, #1
 8019ace:	1c8a      	addeq	r2, r1, #2
 8019ad0:	784b      	ldrbeq	r3, [r1, #1]
 8019ad2:	2100      	movne	r1, #0
 8019ad4:	bf08      	it	eq
 8019ad6:	2101      	moveq	r1, #1
 8019ad8:	1e44      	subs	r4, r0, #1
 8019ada:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019ade:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019ae2:	42ac      	cmp	r4, r5
 8019ae4:	d1fb      	bne.n	8019ade <__sccl+0x1a>
 8019ae6:	b913      	cbnz	r3, 8019aee <__sccl+0x2a>
 8019ae8:	3a01      	subs	r2, #1
 8019aea:	4610      	mov	r0, r2
 8019aec:	bd70      	pop	{r4, r5, r6, pc}
 8019aee:	f081 0401 	eor.w	r4, r1, #1
 8019af2:	54c4      	strb	r4, [r0, r3]
 8019af4:	1c51      	adds	r1, r2, #1
 8019af6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019afa:	2d2d      	cmp	r5, #45	; 0x2d
 8019afc:	f101 36ff 	add.w	r6, r1, #4294967295
 8019b00:	460a      	mov	r2, r1
 8019b02:	d006      	beq.n	8019b12 <__sccl+0x4e>
 8019b04:	2d5d      	cmp	r5, #93	; 0x5d
 8019b06:	d0f0      	beq.n	8019aea <__sccl+0x26>
 8019b08:	b90d      	cbnz	r5, 8019b0e <__sccl+0x4a>
 8019b0a:	4632      	mov	r2, r6
 8019b0c:	e7ed      	b.n	8019aea <__sccl+0x26>
 8019b0e:	462b      	mov	r3, r5
 8019b10:	e7ef      	b.n	8019af2 <__sccl+0x2e>
 8019b12:	780e      	ldrb	r6, [r1, #0]
 8019b14:	2e5d      	cmp	r6, #93	; 0x5d
 8019b16:	d0fa      	beq.n	8019b0e <__sccl+0x4a>
 8019b18:	42b3      	cmp	r3, r6
 8019b1a:	dcf8      	bgt.n	8019b0e <__sccl+0x4a>
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	429e      	cmp	r6, r3
 8019b20:	54c4      	strb	r4, [r0, r3]
 8019b22:	dcfb      	bgt.n	8019b1c <__sccl+0x58>
 8019b24:	3102      	adds	r1, #2
 8019b26:	e7e6      	b.n	8019af6 <__sccl+0x32>

08019b28 <strncmp>:
 8019b28:	b510      	push	{r4, lr}
 8019b2a:	b16a      	cbz	r2, 8019b48 <strncmp+0x20>
 8019b2c:	3901      	subs	r1, #1
 8019b2e:	1884      	adds	r4, r0, r2
 8019b30:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019b34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019b38:	4293      	cmp	r3, r2
 8019b3a:	d103      	bne.n	8019b44 <strncmp+0x1c>
 8019b3c:	42a0      	cmp	r0, r4
 8019b3e:	d001      	beq.n	8019b44 <strncmp+0x1c>
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d1f5      	bne.n	8019b30 <strncmp+0x8>
 8019b44:	1a98      	subs	r0, r3, r2
 8019b46:	bd10      	pop	{r4, pc}
 8019b48:	4610      	mov	r0, r2
 8019b4a:	e7fc      	b.n	8019b46 <strncmp+0x1e>

08019b4c <_strtoul_l.isra.0>:
 8019b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b50:	4680      	mov	r8, r0
 8019b52:	4689      	mov	r9, r1
 8019b54:	4692      	mov	sl, r2
 8019b56:	461e      	mov	r6, r3
 8019b58:	460f      	mov	r7, r1
 8019b5a:	463d      	mov	r5, r7
 8019b5c:	9808      	ldr	r0, [sp, #32]
 8019b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b62:	f7fe fe4f 	bl	8018804 <__locale_ctype_ptr_l>
 8019b66:	4420      	add	r0, r4
 8019b68:	7843      	ldrb	r3, [r0, #1]
 8019b6a:	f013 0308 	ands.w	r3, r3, #8
 8019b6e:	d130      	bne.n	8019bd2 <_strtoul_l.isra.0+0x86>
 8019b70:	2c2d      	cmp	r4, #45	; 0x2d
 8019b72:	d130      	bne.n	8019bd6 <_strtoul_l.isra.0+0x8a>
 8019b74:	787c      	ldrb	r4, [r7, #1]
 8019b76:	1cbd      	adds	r5, r7, #2
 8019b78:	2101      	movs	r1, #1
 8019b7a:	2e00      	cmp	r6, #0
 8019b7c:	d05c      	beq.n	8019c38 <_strtoul_l.isra.0+0xec>
 8019b7e:	2e10      	cmp	r6, #16
 8019b80:	d109      	bne.n	8019b96 <_strtoul_l.isra.0+0x4a>
 8019b82:	2c30      	cmp	r4, #48	; 0x30
 8019b84:	d107      	bne.n	8019b96 <_strtoul_l.isra.0+0x4a>
 8019b86:	782b      	ldrb	r3, [r5, #0]
 8019b88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019b8c:	2b58      	cmp	r3, #88	; 0x58
 8019b8e:	d14e      	bne.n	8019c2e <_strtoul_l.isra.0+0xe2>
 8019b90:	786c      	ldrb	r4, [r5, #1]
 8019b92:	2610      	movs	r6, #16
 8019b94:	3502      	adds	r5, #2
 8019b96:	f04f 32ff 	mov.w	r2, #4294967295
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019ba0:	fb06 fc02 	mul.w	ip, r6, r2
 8019ba4:	ea6f 0c0c 	mvn.w	ip, ip
 8019ba8:	4618      	mov	r0, r3
 8019baa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019bae:	2f09      	cmp	r7, #9
 8019bb0:	d817      	bhi.n	8019be2 <_strtoul_l.isra.0+0x96>
 8019bb2:	463c      	mov	r4, r7
 8019bb4:	42a6      	cmp	r6, r4
 8019bb6:	dd23      	ble.n	8019c00 <_strtoul_l.isra.0+0xb4>
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	db1e      	blt.n	8019bfa <_strtoul_l.isra.0+0xae>
 8019bbc:	4282      	cmp	r2, r0
 8019bbe:	d31c      	bcc.n	8019bfa <_strtoul_l.isra.0+0xae>
 8019bc0:	d101      	bne.n	8019bc6 <_strtoul_l.isra.0+0x7a>
 8019bc2:	45a4      	cmp	ip, r4
 8019bc4:	db19      	blt.n	8019bfa <_strtoul_l.isra.0+0xae>
 8019bc6:	fb00 4006 	mla	r0, r0, r6, r4
 8019bca:	2301      	movs	r3, #1
 8019bcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019bd0:	e7eb      	b.n	8019baa <_strtoul_l.isra.0+0x5e>
 8019bd2:	462f      	mov	r7, r5
 8019bd4:	e7c1      	b.n	8019b5a <_strtoul_l.isra.0+0xe>
 8019bd6:	2c2b      	cmp	r4, #43	; 0x2b
 8019bd8:	bf04      	itt	eq
 8019bda:	1cbd      	addeq	r5, r7, #2
 8019bdc:	787c      	ldrbeq	r4, [r7, #1]
 8019bde:	4619      	mov	r1, r3
 8019be0:	e7cb      	b.n	8019b7a <_strtoul_l.isra.0+0x2e>
 8019be2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019be6:	2f19      	cmp	r7, #25
 8019be8:	d801      	bhi.n	8019bee <_strtoul_l.isra.0+0xa2>
 8019bea:	3c37      	subs	r4, #55	; 0x37
 8019bec:	e7e2      	b.n	8019bb4 <_strtoul_l.isra.0+0x68>
 8019bee:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019bf2:	2f19      	cmp	r7, #25
 8019bf4:	d804      	bhi.n	8019c00 <_strtoul_l.isra.0+0xb4>
 8019bf6:	3c57      	subs	r4, #87	; 0x57
 8019bf8:	e7dc      	b.n	8019bb4 <_strtoul_l.isra.0+0x68>
 8019bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8019bfe:	e7e5      	b.n	8019bcc <_strtoul_l.isra.0+0x80>
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	da09      	bge.n	8019c18 <_strtoul_l.isra.0+0xcc>
 8019c04:	2322      	movs	r3, #34	; 0x22
 8019c06:	f8c8 3000 	str.w	r3, [r8]
 8019c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8019c0e:	f1ba 0f00 	cmp.w	sl, #0
 8019c12:	d107      	bne.n	8019c24 <_strtoul_l.isra.0+0xd8>
 8019c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c18:	b101      	cbz	r1, 8019c1c <_strtoul_l.isra.0+0xd0>
 8019c1a:	4240      	negs	r0, r0
 8019c1c:	f1ba 0f00 	cmp.w	sl, #0
 8019c20:	d0f8      	beq.n	8019c14 <_strtoul_l.isra.0+0xc8>
 8019c22:	b10b      	cbz	r3, 8019c28 <_strtoul_l.isra.0+0xdc>
 8019c24:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c28:	f8ca 9000 	str.w	r9, [sl]
 8019c2c:	e7f2      	b.n	8019c14 <_strtoul_l.isra.0+0xc8>
 8019c2e:	2430      	movs	r4, #48	; 0x30
 8019c30:	2e00      	cmp	r6, #0
 8019c32:	d1b0      	bne.n	8019b96 <_strtoul_l.isra.0+0x4a>
 8019c34:	2608      	movs	r6, #8
 8019c36:	e7ae      	b.n	8019b96 <_strtoul_l.isra.0+0x4a>
 8019c38:	2c30      	cmp	r4, #48	; 0x30
 8019c3a:	d0a4      	beq.n	8019b86 <_strtoul_l.isra.0+0x3a>
 8019c3c:	260a      	movs	r6, #10
 8019c3e:	e7aa      	b.n	8019b96 <_strtoul_l.isra.0+0x4a>

08019c40 <_strtoul_r>:
 8019c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c42:	4c06      	ldr	r4, [pc, #24]	; (8019c5c <_strtoul_r+0x1c>)
 8019c44:	4d06      	ldr	r5, [pc, #24]	; (8019c60 <_strtoul_r+0x20>)
 8019c46:	6824      	ldr	r4, [r4, #0]
 8019c48:	6a24      	ldr	r4, [r4, #32]
 8019c4a:	2c00      	cmp	r4, #0
 8019c4c:	bf08      	it	eq
 8019c4e:	462c      	moveq	r4, r5
 8019c50:	9400      	str	r4, [sp, #0]
 8019c52:	f7ff ff7b 	bl	8019b4c <_strtoul_l.isra.0>
 8019c56:	b003      	add	sp, #12
 8019c58:	bd30      	pop	{r4, r5, pc}
 8019c5a:	bf00      	nop
 8019c5c:	2000000c 	.word	0x2000000c
 8019c60:	20000070 	.word	0x20000070

08019c64 <__submore>:
 8019c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c68:	460c      	mov	r4, r1
 8019c6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c70:	4299      	cmp	r1, r3
 8019c72:	d11d      	bne.n	8019cb0 <__submore+0x4c>
 8019c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019c78:	f7ff fa66 	bl	8019148 <_malloc_r>
 8019c7c:	b918      	cbnz	r0, 8019c86 <__submore+0x22>
 8019c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019c8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019c90:	6360      	str	r0, [r4, #52]	; 0x34
 8019c92:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019c96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019c9a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019c9e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019ca2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019ca6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019caa:	6020      	str	r0, [r4, #0]
 8019cac:	2000      	movs	r0, #0
 8019cae:	e7e8      	b.n	8019c82 <__submore+0x1e>
 8019cb0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019cb2:	0077      	lsls	r7, r6, #1
 8019cb4:	463a      	mov	r2, r7
 8019cb6:	f000 f837 	bl	8019d28 <_realloc_r>
 8019cba:	4605      	mov	r5, r0
 8019cbc:	2800      	cmp	r0, #0
 8019cbe:	d0de      	beq.n	8019c7e <__submore+0x1a>
 8019cc0:	eb00 0806 	add.w	r8, r0, r6
 8019cc4:	4601      	mov	r1, r0
 8019cc6:	4632      	mov	r2, r6
 8019cc8:	4640      	mov	r0, r8
 8019cca:	f7fe fdd7 	bl	801887c <memcpy>
 8019cce:	f8c4 8000 	str.w	r8, [r4]
 8019cd2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019cd6:	e7e9      	b.n	8019cac <__submore+0x48>

08019cd8 <__ascii_wctomb>:
 8019cd8:	b149      	cbz	r1, 8019cee <__ascii_wctomb+0x16>
 8019cda:	2aff      	cmp	r2, #255	; 0xff
 8019cdc:	bf85      	ittet	hi
 8019cde:	238a      	movhi	r3, #138	; 0x8a
 8019ce0:	6003      	strhi	r3, [r0, #0]
 8019ce2:	700a      	strbls	r2, [r1, #0]
 8019ce4:	f04f 30ff 	movhi.w	r0, #4294967295
 8019ce8:	bf98      	it	ls
 8019cea:	2001      	movls	r0, #1
 8019cec:	4770      	bx	lr
 8019cee:	4608      	mov	r0, r1
 8019cf0:	4770      	bx	lr

08019cf2 <memmove>:
 8019cf2:	4288      	cmp	r0, r1
 8019cf4:	b510      	push	{r4, lr}
 8019cf6:	eb01 0302 	add.w	r3, r1, r2
 8019cfa:	d807      	bhi.n	8019d0c <memmove+0x1a>
 8019cfc:	1e42      	subs	r2, r0, #1
 8019cfe:	4299      	cmp	r1, r3
 8019d00:	d00a      	beq.n	8019d18 <memmove+0x26>
 8019d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019d0a:	e7f8      	b.n	8019cfe <memmove+0xc>
 8019d0c:	4283      	cmp	r3, r0
 8019d0e:	d9f5      	bls.n	8019cfc <memmove+0xa>
 8019d10:	1881      	adds	r1, r0, r2
 8019d12:	1ad2      	subs	r2, r2, r3
 8019d14:	42d3      	cmn	r3, r2
 8019d16:	d100      	bne.n	8019d1a <memmove+0x28>
 8019d18:	bd10      	pop	{r4, pc}
 8019d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019d22:	e7f7      	b.n	8019d14 <memmove+0x22>

08019d24 <__malloc_lock>:
 8019d24:	4770      	bx	lr

08019d26 <__malloc_unlock>:
 8019d26:	4770      	bx	lr

08019d28 <_realloc_r>:
 8019d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d2a:	4607      	mov	r7, r0
 8019d2c:	4614      	mov	r4, r2
 8019d2e:	460e      	mov	r6, r1
 8019d30:	b921      	cbnz	r1, 8019d3c <_realloc_r+0x14>
 8019d32:	4611      	mov	r1, r2
 8019d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d38:	f7ff ba06 	b.w	8019148 <_malloc_r>
 8019d3c:	b922      	cbnz	r2, 8019d48 <_realloc_r+0x20>
 8019d3e:	f7ff f9b5 	bl	80190ac <_free_r>
 8019d42:	4625      	mov	r5, r4
 8019d44:	4628      	mov	r0, r5
 8019d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d48:	f000 f814 	bl	8019d74 <_malloc_usable_size_r>
 8019d4c:	42a0      	cmp	r0, r4
 8019d4e:	d20f      	bcs.n	8019d70 <_realloc_r+0x48>
 8019d50:	4621      	mov	r1, r4
 8019d52:	4638      	mov	r0, r7
 8019d54:	f7ff f9f8 	bl	8019148 <_malloc_r>
 8019d58:	4605      	mov	r5, r0
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	d0f2      	beq.n	8019d44 <_realloc_r+0x1c>
 8019d5e:	4631      	mov	r1, r6
 8019d60:	4622      	mov	r2, r4
 8019d62:	f7fe fd8b 	bl	801887c <memcpy>
 8019d66:	4631      	mov	r1, r6
 8019d68:	4638      	mov	r0, r7
 8019d6a:	f7ff f99f 	bl	80190ac <_free_r>
 8019d6e:	e7e9      	b.n	8019d44 <_realloc_r+0x1c>
 8019d70:	4635      	mov	r5, r6
 8019d72:	e7e7      	b.n	8019d44 <_realloc_r+0x1c>

08019d74 <_malloc_usable_size_r>:
 8019d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d78:	1f18      	subs	r0, r3, #4
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	bfbc      	itt	lt
 8019d7e:	580b      	ldrlt	r3, [r1, r0]
 8019d80:	18c0      	addlt	r0, r0, r3
 8019d82:	4770      	bx	lr

08019d84 <_init>:
 8019d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d86:	bf00      	nop
 8019d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d8a:	bc08      	pop	{r3}
 8019d8c:	469e      	mov	lr, r3
 8019d8e:	4770      	bx	lr

08019d90 <_fini>:
 8019d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d92:	bf00      	nop
 8019d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d96:	bc08      	pop	{r3}
 8019d98:	469e      	mov	lr, r3
 8019d9a:	4770      	bx	lr
