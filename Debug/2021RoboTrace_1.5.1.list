
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019be4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019da8  08019da8  00029da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7b4  0801a7b4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7b4  0801a7b4  0002a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a7bc  0801a7bc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a7bc  0801a7bc  0002a7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a7c4  0801a7c4  0002a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a7c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046c58  200001e0  0801a9a4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046e38  0801a9a4  00036e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1f8  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00073038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000773e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265f5  00000000  00000000  000ac89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110e6  00000000  00000000  000d2e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3f77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a760  00000000  00000000  001e3ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019d8c 	.word	0x08019d8c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019d8c 	.word	0x08019d8c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb7e 	bl	800b6d8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044930 	.word	0x20044930

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fb66 	bl	800b6d8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044930 	.word	0x20044930

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a fa07 	bl	800b434 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff6e 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff68 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ff62 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ff5c 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ff56 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ff50 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff4a 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff44 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff3e 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff38 	bl	8009f08 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff2c 	bl	8009f08 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff26 	bl	8009f08 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f9f9 	bl	8017520 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f836 	bl	800f268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f832 	bl	800f268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f82e 	bl	800f268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f82a 	bl	800f268 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044a1c 	.word	0x20044a1c
 8001248:	20044984 	.word	0x20044984
 800124c:	20044aa4 	.word	0x20044aa4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044a1c 	.word	0x20044a1c
 800137c:	20044aa4 	.word	0x20044aa4
 8001380:	20044984 	.word	0x20044984

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044a1c 	.word	0x20044a1c
 80013c4:	20044984 	.word	0x20044984
 80013c8:	20044aa4 	.word	0x20044aa4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ffea 	bl	800f408 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ffe6 	bl	800f408 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044b84 	.word	0x20044b84
 8001458:	20044868 	.word	0x20044868
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fb7a 	bl	8013ebc <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20043774 	.word	0x20043774

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 ff39 	bl	8016688 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fbbe 	bl	8013fa4 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fbb9 	bl	8013fa4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f927 	bl	8013a92 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019da8 	.word	0x08019da8
 8001870:	200436e4 	.word	0x200436e4
 8001874:	20043774 	.word	0x20043774
 8001878:	20043764 	.word	0x20043764

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fb35 	bl	8013f10 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fda0 	bl	80143ec <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fb2f 	bl	8013f10 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fed4 	bl	8016688 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fb5c 	bl	8013fa4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f8ca 	bl	8013a92 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 face 	bl	8013ebc <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	200435e4 	.word	0x200435e4
 8001930:	200424a4 	.word	0x200424a4
 8001934:	08019dc4 	.word	0x08019dc4
 8001938:	08019da8 	.word	0x08019da8
 800193c:	200436e4 	.word	0x200436e4
 8001940:	20043774 	.word	0x20043774
 8001944:	20043764 	.word	0x20043764

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fed7 	bl	8016730 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fefe 	bl	80147a8 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fa80 	bl	8013ebc <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019db4 	.word	0x08019db4
 80019cc:	200436e4 	.word	0x200436e4
 80019d0:	20043774 	.word	0x20043774

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fe91 	bl	8016730 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 feb8 	bl	80147a8 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 fa3a 	bl	8013ebc <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019dc0 	.word	0x08019dc0
 8001a58:	200436e4 	.word	0x200436e4
 8001a5c:	20043774 	.word	0x20043774

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 fa43 	bl	8013f10 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fcae 	bl	80143ec <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 fa3d 	bl	8013f10 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fde8 	bl	8016688 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 fa70 	bl	8013fa4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 ffde 	bl	8013a92 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 f9e2 	bl	8013ebc <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200435e4 	.word	0x200435e4
 8001b08:	200424a4 	.word	0x200424a4
 8001b0c:	08019dc4 	.word	0x08019dc4
 8001b10:	08019dc8 	.word	0x08019dc8
 8001b14:	200436e4 	.word	0x200436e4
 8001b18:	20043774 	.word	0x20043774
 8001b1c:	20043764 	.word	0x20043764

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fc3c 	bl	80133ac <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019dd0 	.word	0x08019dd0
 8001b54:	200425a4 	.word	0x200425a4

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fe0f 	bl	8016788 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fe0b 	bl	8016788 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200435e4 	.word	0x200435e4
 8001b80:	200424a4 	.word	0x200424a4

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fcf1 	bl	8014570 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 f9be 	bl	8013f10 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fc4d 	bl	8013438 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 f9b6 	bl	8013f10 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200435e4 	.word	0x200435e4
 8001bac:	200424a4 	.word	0x200424a4
 8001bb0:	20043774 	.word	0x20043774
 8001bb4:	08019dc4 	.word	0x08019dc4

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200436e4 	.word	0x200436e4

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fc14 	bl	800b434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fdbd 	bl	800e794 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c feea 	bl	800e9fc <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fc00 	bl	800b434 <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044810 	.word	0x20044810

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fbe3 	bl	800b434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fd8c 	bl	800e794 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fd86 	bl	800e794 <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fbd0 	bl	800b434 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044810 	.word	0x20044810

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200447ac 	.word	0x200447ac
 8001d64:	200447aa 	.word	0x200447aa
 8001d68:	200447a4 	.word	0x200447a4

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f008 f88e 	bl	8009f08 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019dd4 	.word	0x08019dd4
 8001df8:	08019de0 	.word	0x08019de0
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	200447ac 	.word	0x200447ac
 8001ebc:	200447aa 	.word	0x200447aa
 8001ec0:	200447a4 	.word	0x200447a4
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f007 ffc8 	bl	8009f08 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f007 ff72 	bl	8009f08 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019de4 	.word	0x08019de4
 800208c:	08019df0 	.word	0x08019df0

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fb13 	bl	800b6d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fc07 	bl	800b8d4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200449c4 	.word	0x200449c4

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 fadb 	bl	800b6d8 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	200449c4 	.word	0x200449c4

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 f931 	bl	800b404 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 f921 	bl	800b404 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 f910 	bl	800b404 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f009 f900 	bl	800b404 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f009 f8f0 	bl	800b404 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f009 f8e1 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f8db 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f8d5 	bl	800b434 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f009 f8cb 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f009 f8c5 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f009 f8bf 	bl	800b434 <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f009 f8b5 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f009 f8af 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f009 f8a9 	bl	800b434 <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f009 f89f 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f009 f899 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f009 f893 	bl	800b434 <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f009 f889 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f009 f883 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f009 f87d 	bl	800b434 <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f009 f873 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f009 f86d 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f009 f867 	bl	800b434 <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f009 f85d 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f009 f857 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f009 f851 	bl	800b434 <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f009 f847 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f009 f841 	bl	800b434 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f009 f83b 	bl	800b434 <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f009 f822 	bl	800b434 <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f009 f817 	bl	800b434 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f009 f80d 	bl	800b434 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f009 f802 	bl	800b434 <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fd5a 	bl	8009fd4 <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200448e8 	.word	0x200448e8

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 fb97 	bl	8009f08 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fe06 	bl	8005534 <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019dfc 	.word	0x08019dfc
 8002a04:	08019e08 	.word	0x08019e08
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aba:	eef0 7ae7 	vabs.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b64:	3352      	adds	r3, #82	; 0x52
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b88:	331c      	adds	r3, #28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b94:	331e      	adds	r3, #30
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bac:	3322      	adds	r3, #34	; 0x22
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bb8:	3323      	adds	r3, #35	; 0x23
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bc4:	3324      	adds	r3, #36	; 0x24
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bd0:	3328      	adds	r3, #40	; 0x28
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bde:	332c      	adds	r3, #44	; 0x2c
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bec:	3330      	adds	r3, #48	; 0x30
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bfa:	3334      	adds	r3, #52	; 0x34
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c08:	3338      	adds	r3, #56	; 0x38
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c14:	333a      	adds	r3, #58	; 0x3a
 8002c16:	2200      	movs	r2, #0
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c20:	333c      	adds	r3, #60	; 0x3c
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c54:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	83fb      	strh	r3, [r7, #30]
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
 8002c62:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d80d      	bhi.n	8002c86 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 8002c6a:	8bfb      	ldrh	r3, [r7, #30]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c72:	3304      	adds	r3, #4
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	3301      	adds	r3, #1
 8002c82:	83fb      	strh	r3, [r7, #30]
 8002c84:	e7ec      	b.n	8002c60 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c86:	2300      	movs	r3, #0
 8002c88:	83bb      	strh	r3, [r7, #28]
 8002c8a:	8bbb      	ldrh	r3, [r7, #28]
 8002c8c:	2b63      	cmp	r3, #99	; 0x63
 8002c8e:	d80d      	bhi.n	8002cac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002c90:	8bbb      	ldrh	r3, [r7, #28]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c98:	3316      	adds	r3, #22
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ca4:	8bbb      	ldrh	r3, [r7, #28]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	83bb      	strh	r3, [r7, #28]
 8002caa:	e7ee      	b.n	8002c8a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	837b      	strh	r3, [r7, #26]
 8002cb0:	8b7b      	ldrh	r3, [r7, #26]
 8002cb2:	2b63      	cmp	r3, #99	; 0x63
 8002cb4:	d80d      	bhi.n	8002cd2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002cb6:	8b7b      	ldrh	r3, [r7, #26]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002cbe:	333a      	adds	r3, #58	; 0x3a
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cca:	8b7b      	ldrh	r3, [r7, #26]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	837b      	strh	r3, [r7, #26]
 8002cd0:	e7ee      	b.n	8002cb0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	833b      	strh	r3, [r7, #24]
 8002cd6:	8b3b      	ldrh	r3, [r7, #24]
 8002cd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cdc:	d20d      	bcs.n	8002cfa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002cde:	8b3b      	ldrh	r3, [r7, #24]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002ce6:	331e      	adds	r3, #30
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cf2:	8b3b      	ldrh	r3, [r7, #24]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	833b      	strh	r3, [r7, #24]
 8002cf8:	e7ed      	b.n	8002cd6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	82fb      	strh	r3, [r7, #22]
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d04:	d20d      	bcs.n	8002d22 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002d0e:	3312      	adds	r3, #18
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d1a:	8afb      	ldrh	r3, [r7, #22]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	82fb      	strh	r3, [r7, #22]
 8002d20:	e7ed      	b.n	8002cfe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	3724      	adds	r7, #36	; 0x24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d54:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	ee07 3a90 	vmov	s15, r3

}
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000025c 	.word	0x2000025c

08002da0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffc1 	bl	8002d30 <_ZN9LineTrace9calcErrorEv>
 8002dae:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d14c      	bne.n	8002e76 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002de2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fbb5 	bl	8000578 <__aeabi_f2d>
 8002e0e:	a350      	add	r3, pc, #320	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fd32 	bl	800087c <__aeabi_ddiv>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4621      	mov	r1, r4
 8002e20:	f7fd fefa 	bl	8000c18 <__aeabi_d2f>
 8002e24:	4603      	mov	r3, r0
 8002e26:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fba3 	bl	8000578 <__aeabi_f2d>
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e44:	ee17 0a90 	vmov	r0, s15
 8002e48:	f7fd fb96 	bl	8000578 <__aeabi_f2d>
 8002e4c:	a340      	add	r3, pc, #256	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fbe9 	bl	8000628 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fa2d 	bl	80002bc <__adddf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	4618      	mov	r0, r3
 8002e68:	4621      	mov	r1, r4
 8002e6a:	f7fd fed5 	bl	8000c18 <__aeabi_d2f>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e04b      	b.n	8002f0e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea0:	ee17 0a90 	vmov	r0, s15
 8002ea4:	f7fd fb68 	bl	8000578 <__aeabi_f2d>
 8002ea8:	a329      	add	r3, pc, #164	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fce5 	bl	800087c <__aeabi_ddiv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f7fd fead 	bl	8000c18 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb56 	bl	8000578 <__aeabi_f2d>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	460d      	mov	r5, r1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	ee17 0a90 	vmov	r0, s15
 8002ee2:	f7fd fb49 	bl	8000578 <__aeabi_f2d>
 8002ee6:	a31a      	add	r3, pc, #104	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fb9c 	bl	8000628 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f9e0 	bl	80002bc <__adddf3>
 8002efc:	4603      	mov	r3, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	4618      	mov	r0, r3
 8002f02:	4621      	mov	r1, r4
 8002f04:	f7fd fe88 	bl	8000c18 <__aeabi_d2f>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f32:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f003 f828 	bl	8005f90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6013      	str	r3, [r2, #0]

}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f54:	3f50624d 	.word	0x3f50624d
 8002f58:	20000280 	.word	0x20000280
 8002f5c:	2000027c 	.word	0x2000027c

08002f60 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fbd7 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 f99e 	bl	80052b8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 feb4 	bl	8004cee <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 ff15 	bl	8004dd2 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fca:	3318      	adds	r3, #24
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	461c      	mov	r4, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7fe fb87 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002fe0:	3316      	adds	r3, #22
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ffe:	3318      	adds	r3, #24
 8003000:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	3318      	adds	r3, #24
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	2b63      	cmp	r3, #99	; 0x63
 800300e:	d905      	bls.n	800301c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003016:	3318      	adds	r3, #24
 8003018:	2263      	movs	r2, #99	; 0x63
 800301a:	801a      	strh	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003036:	331a      	adds	r3, #26
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	461c      	mov	r4, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fe fb51 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003042:	eef0 7a40 	vmov.f32	s15, s0
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 800304c:	333a      	adds	r3, #58	; 0x3a
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305c:	331a      	adds	r3, #26
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306a:	331a      	adds	r3, #26
 800306c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003074:	331a      	adds	r3, #26
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	2b63      	cmp	r3, #99	; 0x63
 800307a:	d905      	bls.n	8003088 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003082:	331a      	adds	r3, #26
 8003084:	2263      	movs	r2, #99	; 0x63
 8003086:	801a      	strh	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a2:	331c      	adds	r3, #28
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	461c      	mov	r4, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe fb1b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 80030b8:	331e      	adds	r3, #30
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c8:	331c      	adds	r3, #28
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d6:	331c      	adds	r3, #28
 80030d8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030e0:	331c      	adds	r3, #28
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030e8:	d306      	bcc.n	80030f8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f0:	331c      	adds	r3, #28
 80030f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030f6:	801a      	strh	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}

08003100 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003112:	331e      	adds	r3, #30
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	461c      	mov	r4, r3
 8003118:	4610      	mov	r0, r2
 800311a:	f7fe fae3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800311e:	eef0 7a40 	vmov.f32	s15, s0
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003128:	3312      	adds	r3, #18
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003138:	331e      	adds	r3, #30
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003146:	331e      	adds	r3, #30
 8003148:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003150:	331e      	adds	r3, #30
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003158:	d306      	bcc.n	8003168 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003160:	331e      	adds	r3, #30
 8003162:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003166:	801a      	strh	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	ed2d 8b02 	vpush	{d8}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d046      	beq.n	8003214 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800318c:	3354      	adds	r3, #84	; 0x54
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11c      	bne.n	80031d0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69dc      	ldr	r4, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fa91 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80031a4:	eeb0 8a40 	vmov.f32	s16, s0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f872 	bl	8005296 <_ZN8Odometry8getThetaEv>
 80031b2:	ec53 2b10 	vmov	r2, r3, d0
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7fd fd2d 	bl	8000c18 <__aeabi_d2f>
 80031be:	4603      	mov	r3, r0
 80031c0:	ee00 3a90 	vmov	s1, r3
 80031c4:	eeb0 0a48 	vmov.f32	s0, s16
 80031c8:	4620      	mov	r0, r4
 80031ca:	f001 fc47 	bl	8004a5c <_ZN6Logger21storeDistanceAndThetaEff>
 80031ce:	e01b      	b.n	8003208 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69dc      	ldr	r4, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fa83 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80031de:	eeb0 8a40 	vmov.f32	s16, s0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 f855 	bl	8005296 <_ZN8Odometry8getThetaEv>
 80031ec:	ec53 2b10 	vmov	r2, r3, d0
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fd10 	bl	8000c18 <__aeabi_d2f>
 80031f8:	4603      	mov	r3, r0
 80031fa:	ee00 3a90 	vmov	s1, r3
 80031fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003202:	4620      	mov	r0, r4
 8003204:	f001 fc6d 	bl	8004ae2 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003212:	801a      	strh	r2, [r3, #0]
	}
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	ecbd 8b02 	vpop	{d8}
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	20000260 	.word	0x20000260

08003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	correction_check_cnt_ = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003232:	3338      	adds	r3, #56	; 0x38
 8003234:	2200      	movs	r2, #0
 8003236:	801a      	strh	r2, [r3, #0]
	/*
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
	crossline_idx_++;
	*/

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003238:	2300      	movs	r3, #0
 800323a:	82fb      	strh	r3, [r7, #22]
 800323c:	8afb      	ldrh	r3, [r7, #22]
 800323e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003242:	d23d      	bcs.n	80032c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x9c>
		float temp_crossline_distance = crossline_distance_[i];
 8003244:	8afb      	ldrh	r3, [r7, #22]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800324c:	3316      	adds	r3, #22
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fa42 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003260:	eeb0 7a40 	vmov.f32	s14, s0
 8003264:	edd7 7a04 	vldr	s15, [r7, #16]
 8003268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800326c:	eeb0 0a67 	vmov.f32	s0, s15
 8003270:	f7ff fc1c 	bl	8002aac <_ZSt3absf>
 8003274:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 200){
 8003278:	edd7 7a03 	vldr	s15, [r7, #12]
 800327c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032e4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xc0>
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	d816      	bhi.n	80032b8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x94>
			correction_check_cnt_ = 0;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003290:	3338      	adds	r3, #56	; 0x38
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[i] / DISTANCE_CORRECTION_CONST);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	8afb      	ldrh	r3, [r7, #22]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80032a2:	3316      	adds	r3, #22
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	4608      	mov	r0, r1
 80032b2:	f7fe fa26 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80032b6:	e003      	b.n	80032c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x9c>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80032b8:	8afb      	ldrh	r3, [r7, #22]
 80032ba:	3301      	adds	r3, #1
 80032bc:	82fb      	strh	r3, [r7, #22]
 80032be:	e7bd      	b.n	800323c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x18>
		}
	}
	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032c6:	3318      	adds	r3, #24
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	2b63      	cmp	r3, #99	; 0x63
 80032cc:	d905      	bls.n	80032da <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032d4:	3318      	adds	r3, #24
 80032d6:	2263      	movs	r2, #99	; 0x63
 80032d8:	801a      	strh	r2, [r3, #0]

}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	43480000 	.word	0x43480000

080032e8 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032fa:	3354      	adds	r3, #84	; 0x54
 80032fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d12b      	bne.n	800335c <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 400) velocity = min_velocity_;
 8003304:	edd7 7a00 	vldr	s15, [r7]
 8003308:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80033f4 <_ZN9LineTrace15radius2VelocityEf+0x10c>
 800330c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d504      	bpl.n	8003320 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e05e      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 8003320:	edd7 7a00 	vldr	s15, [r7]
 8003324:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80033f8 <_ZN9LineTrace15radius2VelocityEf+0x110>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d502      	bpl.n	8003338 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <_ZN9LineTrace15radius2VelocityEf+0x114>)
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e052      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 8003338:	edd7 7a00 	vldr	s15, [r7]
 800333c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003400 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8003340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	d503      	bpl.n	8003352 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 800334a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e045      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e040      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003362:	3354      	adds	r3, #84	; 0x54
 8003364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d136      	bne.n	80033da <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 800336c:	edd7 7a00 	vldr	s15, [r7]
 8003370:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003404 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d504      	bpl.n	8003388 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e02a      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 8003388:	edd7 7a00 	vldr	s15, [r7]
 800338c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003408 <_ZN9LineTrace15radius2VelocityEf+0x120>
 8003390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d502      	bpl.n	80033a0 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <_ZN9LineTrace15radius2VelocityEf+0x124>)
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e01e      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 80033a0:	edd7 7a00 	vldr	s15, [r7]
 80033a4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003410 <_ZN9LineTrace15radius2VelocityEf+0x128>
 80033a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	d502      	bpl.n	80033b8 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <_ZN9LineTrace15radius2VelocityEf+0x12c>)
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e012      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 80033b8:	edd7 7a00 	vldr	s15, [r7]
 80033bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003418 <_ZN9LineTrace15radius2VelocityEf+0x130>
 80033c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c8:	d502      	bpl.n	80033d0 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <_ZN9LineTrace15radius2VelocityEf+0x134>)
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	e006      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e001      	b.n	80033de <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <_ZN9LineTrace15radius2VelocityEf+0x138>)
 80033dc:	60fb      	str	r3, [r7, #12]

	return velocity;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	ee07 3a90 	vmov	s15, r3
}
 80033e4:	eeb0 0a67 	vmov.f32	s0, s15
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	43c80000 	.word	0x43c80000
 80033f8:	44480000 	.word	0x44480000
 80033fc:	3fd9999a 	.word	0x3fd9999a
 8003400:	44af0000 	.word	0x44af0000
 8003404:	43960000 	.word	0x43960000
 8003408:	44bb8000 	.word	0x44bb8000
 800340c:	40066666 	.word	0x40066666
 8003410:	44fa0000 	.word	0x44fa0000
 8003414:	40200000 	.word	0x40200000
 8003418:	451c4000 	.word	0x451c4000
 800341c:	40400000 	.word	0x40400000
 8003420:	3fa66666 	.word	0x3fa66666
 8003424:	00000000 	.word	0x00000000

08003428 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	ed87 0a02 	vstr	s0, [r7, #8]
 8003434:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003436:	f241 736f 	movw	r3, #5999	; 0x176f
 800343a:	83fb      	strh	r3, [r7, #30]
 800343c:	8bfb      	ldrh	r3, [r7, #30]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 808d 	beq.w	800355e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003444:	8bfb      	ldrh	r3, [r7, #30]
 8003446:	3b01      	subs	r3, #1
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800344e:	3304      	adds	r3, #4
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003460:	3304      	adds	r3, #4
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800346e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003472:	edd7 7a06 	vldr	s15, [r7, #24]
 8003476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	dd6a      	ble.n	8003556 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003480:	8bfb      	ldrh	r3, [r7, #30]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd f874 	bl	8000578 <__aeabi_f2d>
 8003490:	a335      	add	r3, pc, #212	; (adr r3, 8003568 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fd f8c7 	bl	8000628 <__aeabi_dmul>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	4625      	mov	r5, r4
 80034a0:	461c      	mov	r4, r3
 80034a2:	69b8      	ldr	r0, [r7, #24]
 80034a4:	f7fd f868 	bl	8000578 <__aeabi_f2d>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4620      	mov	r0, r4
 80034ae:	4629      	mov	r1, r5
 80034b0:	f7fd f9e4 	bl	800087c <__aeabi_ddiv>
 80034b4:	4603      	mov	r3, r0
 80034b6:	460c      	mov	r4, r1
 80034b8:	4618      	mov	r0, r3
 80034ba:	4621      	mov	r1, r4
 80034bc:	f7fd fbac 	bl	8000c18 <__aeabi_d2f>
 80034c0:	4603      	mov	r3, r0
 80034c2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034c4:	edd7 6a06 	vldr	s13, [r7, #24]
 80034c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80034cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80034d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	dd37      	ble.n	8003556 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034ee:	3304      	adds	r3, #4
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f83e 	bl	8000578 <__aeabi_f2d>
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	8bfb      	ldrh	r3, [r7, #30]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	ed93 7a00 	vldr	s14, [r3]
 800350c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003514:	ee17 0a90 	vmov	r0, s15
 8003518:	f7fd f82e 	bl	8000578 <__aeabi_f2d>
 800351c:	a312      	add	r3, pc, #72	; (adr r3, 8003568 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fd f881 	bl	8000628 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4620      	mov	r0, r4
 800352c:	4629      	mov	r1, r5
 800352e:	f7fc fec5 	bl	80002bc <__adddf3>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	4619      	mov	r1, r3
 8003538:	4622      	mov	r2, r4
 800353a:	8bfb      	ldrh	r3, [r7, #30]
 800353c:	1e5c      	subs	r4, r3, #1
 800353e:	4608      	mov	r0, r1
 8003540:	4611      	mov	r1, r2
 8003542:	f7fd fb69 	bl	8000c18 <__aeabi_d2f>
 8003546:	4601      	mov	r1, r0
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800354e:	3304      	adds	r3, #4
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003556:	8bfb      	ldrh	r3, [r7, #30]
 8003558:	3b01      	subs	r3, #1
 800355a:	83fb      	strh	r3, [r7, #30]
 800355c:	e76e      	b.n	800343c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bdb0      	pop	{r4, r5, r7, pc}
 8003566:	bf00      	nop
 8003568:	d2f1a9fc 	.word	0xd2f1a9fc
 800356c:	3f50624d 	.word	0x3f50624d

08003570 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	ed87 0a02 	vstr	s0, [r7, #8]
 800357c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800357e:	2300      	movs	r3, #0
 8003580:	83fb      	strh	r3, [r7, #30]
 8003582:	8bfb      	ldrh	r3, [r7, #30]
 8003584:	f241 726f 	movw	r2, #5999	; 0x176f
 8003588:	4293      	cmp	r3, r2
 800358a:	f200 808d 	bhi.w	80036a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800358e:	8bfb      	ldrh	r3, [r7, #30]
 8003590:	3301      	adds	r3, #1
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003598:	3304      	adds	r3, #4
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	ed93 7a00 	vldr	s14, [r3]
 80035a2:	8bfb      	ldrh	r3, [r7, #30]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035aa:	3304      	adds	r3, #4
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80035c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	dd6a      	ble.n	80036a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035ca:	8bfb      	ldrh	r3, [r7, #30]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffcf 	bl	8000578 <__aeabi_f2d>
 80035da:	a335      	add	r3, pc, #212	; (adr r3, 80036b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f822 	bl	8000628 <__aeabi_dmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	4625      	mov	r5, r4
 80035ea:	461c      	mov	r4, r3
 80035ec:	69b8      	ldr	r0, [r7, #24]
 80035ee:	f7fc ffc3 	bl	8000578 <__aeabi_f2d>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fd f93f 	bl	800087c <__aeabi_ddiv>
 80035fe:	4603      	mov	r3, r0
 8003600:	460c      	mov	r4, r1
 8003602:	4618      	mov	r0, r3
 8003604:	4621      	mov	r1, r4
 8003606:	f7fd fb07 	bl	8000c18 <__aeabi_d2f>
 800360a:	4603      	mov	r3, r0
 800360c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800360e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003612:	ed97 7a05 	vldr	s14, [r7, #20]
 8003616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800361a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800361e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003622:	edd7 7a02 	vldr	s15, [r7, #8]
 8003626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd37      	ble.n	80036a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003630:	8bfb      	ldrh	r3, [r7, #30]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003638:	3304      	adds	r3, #4
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff99 	bl	8000578 <__aeabi_f2d>
 8003646:	4604      	mov	r4, r0
 8003648:	460d      	mov	r5, r1
 800364a:	8bfb      	ldrh	r3, [r7, #30]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	ed93 7a00 	vldr	s14, [r3]
 8003656:	edd7 7a02 	vldr	s15, [r7, #8]
 800365a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365e:	ee17 0a90 	vmov	r0, s15
 8003662:	f7fc ff89 	bl	8000578 <__aeabi_f2d>
 8003666:	a312      	add	r3, pc, #72	; (adr r3, 80036b0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fc ffdc 	bl	8000628 <__aeabi_dmul>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fc fe20 	bl	80002bc <__adddf3>
 800367c:	4603      	mov	r3, r0
 800367e:	460c      	mov	r4, r1
 8003680:	4619      	mov	r1, r3
 8003682:	4622      	mov	r2, r4
 8003684:	8bfb      	ldrh	r3, [r7, #30]
 8003686:	1c5c      	adds	r4, r3, #1
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	f7fd fac4 	bl	8000c18 <__aeabi_d2f>
 8003690:	4601      	mov	r1, r0
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003698:	3304      	adds	r3, #4
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80036a0:	8bfb      	ldrh	r3, [r7, #30]
 80036a2:	3301      	adds	r3, #1
 80036a4:	83fb      	strh	r3, [r7, #30]
 80036a6:	e76c      	b.n	8003582 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80036a8:	bf00      	nop
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bdb0      	pop	{r4, r5, r7, pc}
 80036b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036b4:	3f50624d 	.word	0x3f50624d

080036b8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe f839 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d0:	3350      	adds	r3, #80	; 0x50
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ec:	3350      	adds	r3, #80	; 0x50
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036f8:	3352      	adds	r3, #82	; 0x52
 80036fa:	2200      	movs	r2, #0
 80036fc:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003704:	330c      	adds	r3, #12
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003726:	3350      	adds	r3, #80	; 0x50
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8086 	beq.w	800383c <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd ffd5 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800373a:	eeb0 7a40 	vmov.f32	s14, s0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003744:	330c      	adds	r3, #12
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	bfac      	ite	ge
 8003754:	2301      	movge	r3, #1
 8003756:	2300      	movlt	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d026      	beq.n	80037ac <_ZN9LineTrace20updateTargetVelocityEv+0x94>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003764:	330c      	adds	r3, #12
 8003766:	ed93 7a00 	vldr	s14, [r3]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003770:	3352      	adds	r3, #82	; 0x52
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	3304      	adds	r3, #4
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800378c:	330c      	adds	r3, #12
 800378e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003798:	3352      	adds	r3, #82	; 0x52
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a6:	3352      	adds	r3, #82	; 0x52
 80037a8:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80037aa:	e7c1      	b.n	8003730 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037b2:	3352      	adds	r3, #82	; 0x52
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	f241 726f 	movw	r2, #5999	; 0x176f
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d906      	bls.n	80037cc <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037c4:	3352      	adds	r3, #82	; 0x52
 80037c6:	f241 726f 	movw	r2, #5999	; 0x176f
 80037ca:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037d2:	330c      	adds	r3, #12
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80037d8:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd ff80 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80037e4:	eef0 7a40 	vmov.f32	s15, s0
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80037ea:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037f4:	3352      	adds	r3, #82	; 0x52
 80037f6:	881a      	ldrh	r2, [r3, #0]
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80037fa:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003802:	3352      	adds	r3, #82	; 0x52
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800380c:	3304      	adds	r3, #4
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	eeb0 0a67 	vmov.f32	s0, s15
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 faf3 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003826:	3352      	adds	r3, #82	; 0x52
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003830:	3304      	adds	r3, #4
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a05      	ldr	r2, [pc, #20]	; (8003850 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 800383a:	6013      	str	r3, [r2, #0]

	}
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	2000026c 	.word	0x2000026c
 8003848:	20000270 	.word	0x20000270
 800384c:	20000274 	.word	0x20000274
 8003850:	20000278 	.word	0x20000278

08003854 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fd ff2c 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800386e:	eeb0 7a40 	vmov.f32	s14, s0
 8003872:	edd7 7a00 	vldr	s15, [r7]
 8003876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	bf94      	ite	ls
 8003880:	2301      	movls	r3, #1
 8003882:	2300      	movhi	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80038b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038bc:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80038d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038dc:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80038e0:	4a44      	ldr	r2, [pc, #272]	; (80039f4 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80038e6:	4a44      	ldr	r2, [pc, #272]	; (80039f8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80038ec:	4b43      	ldr	r3, [pc, #268]	; (80039fc <_ZN9LineTrace11isCrossLineEv+0x164>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	f083 0301 	eor.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04d      	beq.n	8003996 <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80038fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80038fe:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003a00 <_ZN9LineTrace11isCrossLineEv+0x168>
 8003902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390a:	d50f      	bpl.n	800392c <_ZN9LineTrace11isCrossLineEv+0x94>
 800390c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003910:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003a00 <_ZN9LineTrace11isCrossLineEv+0x168>
 8003914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d506      	bpl.n	800392c <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	e002      	b.n	8003932 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 800392c:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800392e:	2200      	movs	r2, #0
 8003930:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 8003932:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d056      	beq.n	80039e8 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <_ZN9LineTrace11isCrossLineEv+0x170>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003948:	2200      	movs	r2, #0
 800394a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800395e:	3354      	adds	r3, #84	; 0x54
 8003960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800396e:	333a      	adds	r3, #58	; 0x3a
 8003970:	2200      	movs	r2, #0
 8003972:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fb1f 	bl	8002fb8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 800397a:	e035      	b.n	80039e8 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003982:	333a      	adds	r3, #58	; 0x3a
 8003984:	2200      	movs	r2, #0
 8003986:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fc4b 	bl	8003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fb48 	bl	8003024 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003994:	e028      	b.n	80039e8 <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			//correction_check_cnt_ = 0;
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003996:	edd7 7a03 	vldr	s15, [r7, #12]
 800399a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a0c <_ZN9LineTrace11isCrossLineEv+0x174>
 800399e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	dd0f      	ble.n	80039c8 <_ZN9LineTrace11isCrossLineEv+0x130>
 80039a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003a0c <_ZN9LineTrace11isCrossLineEv+0x174>
 80039b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b8:	dd06      	ble.n	80039c8 <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	e002      	b.n	80039ce <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d908      	bls.n	80039e8 <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <_ZN9LineTrace11isCrossLineEv+0x170>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <_ZN9LineTrace11isCrossLineEv+0x164>)
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <_ZN9LineTrace11isCrossLineEv+0x170>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000264 	.word	0x20000264
 80039f8:	20000268 	.word	0x20000268
 80039fc:	20000287 	.word	0x20000287
 8003a00:	44160000 	.word	0x44160000
 8003a04:	20000284 	.word	0x20000284
 8003a08:	20000286 	.word	0x20000286
 8003a0c:	43fa0000 	.word	0x43fa0000

08003a10 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd fe50 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003a26:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fc31 	bl	8005296 <_ZN8Odometry8getThetaEv>
 8003a34:	ec54 3b10 	vmov	r3, r4, d0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	f7fd f8ec 	bl	8000c18 <__aeabi_d2f>
 8003a40:	4603      	mov	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003a44:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a50:	d101      	bne.n	8003a56 <_ZN9LineTrace8isStableEv+0x46>
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <_ZN9LineTrace8isStableEv+0xd0>)
 8003a54:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003a56:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a62:	eeb0 0a66 	vmov.f32	s0, s13
 8003a66:	f7ff f821 	bl	8002aac <_ZSt3absf>
 8003a6a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a72:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ae4 <_ZN9LineTrace8isStableEv+0xd4>
 8003a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db01      	blt.n	8003a84 <_ZN9LineTrace8isStableEv+0x74>
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <_ZN9LineTrace8isStableEv+0xd8>)
 8003a82:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a8a:	3324      	adds	r3, #36	; 0x24
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <_ZN9LineTrace8isStableEv+0xdc>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a9e:	3324      	adds	r3, #36	; 0x24
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003af0 <_ZN9LineTrace8isStableEv+0xe0>
 8003aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	db06      	blt.n	8003ac4 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <_ZN9LineTrace8isStableEv+0xdc>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <_ZN9LineTrace8isStableEv+0xdc>)
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <_ZN9LineTrace8isStableEv+0xdc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <_ZN9LineTrace8isStableEv+0xdc>)
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d901      	bls.n	8003ad6 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd90      	pop	{r4, r7, pc}
 8003ae0:	3727c5ac 	.word	0x3727c5ac
 8003ae4:	459c4000 	.word	0x459c4000
 8003ae8:	459c4000 	.word	0x459c4000
 8003aec:	20000288 	.word	0x20000288
 8003af0:	44fa0000 	.word	0x44fa0000

08003af4 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b092      	sub	sp, #72	; 0x48
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003afc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b00:	2201      	movs	r2, #1
 8003b02:	4963      	ldr	r1, [pc, #396]	; (8003c90 <_ZN9LineTrace4initEv+0x19c>)
 8003b04:	4863      	ldr	r0, [pc, #396]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b06:	f7fd ff1f 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4961      	ldr	r1, [pc, #388]	; (8003c98 <_ZN9LineTrace4initEv+0x1a4>)
 8003b12:	4860      	ldr	r0, [pc, #384]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b14:	f7fd ff18 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003b18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	495f      	ldr	r1, [pc, #380]	; (8003c9c <_ZN9LineTrace4initEv+0x1a8>)
 8003b20:	485c      	ldr	r0, [pc, #368]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b22:	f7fd ff11 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003b26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b2a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b2e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003b32:	eeb0 1a66 	vmov.f32	s2, s13
 8003b36:	eef0 0a47 	vmov.f32	s1, s14
 8003b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8c6 	bl	8003cd0 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003b44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4955      	ldr	r1, [pc, #340]	; (8003ca0 <_ZN9LineTrace4initEv+0x1ac>)
 8003b4c:	4851      	ldr	r0, [pc, #324]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b4e:	f7fd fefb 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003b52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b56:	2201      	movs	r2, #1
 8003b58:	4952      	ldr	r1, [pc, #328]	; (8003ca4 <_ZN9LineTrace4initEv+0x1b0>)
 8003b5a:	484e      	ldr	r0, [pc, #312]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b5c:	f7fd fef4 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b64:	2201      	movs	r2, #1
 8003b66:	4950      	ldr	r1, [pc, #320]	; (8003ca8 <_ZN9LineTrace4initEv+0x1b4>)
 8003b68:	484a      	ldr	r0, [pc, #296]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b6a:	f7fd feed 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003b6e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b72:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b76:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003b7a:	eeb0 1a66 	vmov.f32	s2, s13
 8003b7e:	eef0 0a47 	vmov.f32	s1, s14
 8003b82:	eeb0 0a67 	vmov.f32	s0, s15
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8e8 	bl	8003d5c <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b90:	2201      	movs	r2, #1
 8003b92:	4946      	ldr	r1, [pc, #280]	; (8003cac <_ZN9LineTrace4initEv+0x1b8>)
 8003b94:	483f      	ldr	r0, [pc, #252]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003b96:	f7fd fed7 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4943      	ldr	r1, [pc, #268]	; (8003cb0 <_ZN9LineTrace4initEv+0x1bc>)
 8003ba2:	483c      	ldr	r0, [pc, #240]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003ba4:	f7fd fed0 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bac:	2201      	movs	r2, #1
 8003bae:	4941      	ldr	r1, [pc, #260]	; (8003cb4 <_ZN9LineTrace4initEv+0x1c0>)
 8003bb0:	4838      	ldr	r0, [pc, #224]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003bb2:	f7fd fec9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003bb6:	f107 0320 	add.w	r3, r7, #32
 8003bba:	2201      	movs	r2, #1
 8003bbc:	493e      	ldr	r1, [pc, #248]	; (8003cb8 <_ZN9LineTrace4initEv+0x1c4>)
 8003bbe:	4835      	ldr	r0, [pc, #212]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003bc0:	f7fd fec2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	2201      	movs	r2, #1
 8003bca:	493c      	ldr	r1, [pc, #240]	; (8003cbc <_ZN9LineTrace4initEv+0x1c8>)
 8003bcc:	4831      	ldr	r0, [pc, #196]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003bce:	f7fd febb 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003bd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f913 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003be0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003be4:	eeb0 0a67 	vmov.f32	s0, s15
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f91c 	bl	8003e26 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003bee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f925 	bl	8003e46 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003bfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c00:	eeb0 0a67 	vmov.f32	s0, s15
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f92e 	bl	8003e66 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003c0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f937 	bl	8003e86 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003c18:	f107 0318 	add.w	r3, r7, #24
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4928      	ldr	r1, [pc, #160]	; (8003cc0 <_ZN9LineTrace4initEv+0x1cc>)
 8003c20:	481c      	ldr	r0, [pc, #112]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003c22:	f7fd fe91 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4925      	ldr	r1, [pc, #148]	; (8003cc4 <_ZN9LineTrace4initEv+0x1d0>)
 8003c2e:	4819      	ldr	r0, [pc, #100]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003c30:	f7fd fe8a 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003c34:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c38:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c3c:	eef0 0a47 	vmov.f32	s1, s14
 8003c40:	eeb0 0a67 	vmov.f32	s0, s15
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f97e 	bl	8003f46 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003c56:	f107 0310 	add.w	r3, r7, #16
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	491a      	ldr	r1, [pc, #104]	; (8003cc8 <_ZN9LineTrace4initEv+0x1d4>)
 8003c5e:	480d      	ldr	r0, [pc, #52]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003c60:	f7fd fe72 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	2201      	movs	r2, #1
 8003c6a:	4918      	ldr	r1, [pc, #96]	; (8003ccc <_ZN9LineTrace4initEv+0x1d8>)
 8003c6c:	4809      	ldr	r0, [pc, #36]	; (8003c94 <_ZN9LineTrace4initEv+0x1a0>)
 8003c6e:	f7fd fe6b 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c7a:	eef0 0a47 	vmov.f32	s1, s14
 8003c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f979 	bl	8003f7a <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c88:	bf00      	nop
 8003c8a:	3748      	adds	r7, #72	; 0x48
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	08019e48 	.word	0x08019e48
 8003c94:	08019e50 	.word	0x08019e50
 8003c98:	08019e58 	.word	0x08019e58
 8003c9c:	08019e60 	.word	0x08019e60
 8003ca0:	08019e68 	.word	0x08019e68
 8003ca4:	08019e74 	.word	0x08019e74
 8003ca8:	08019e80 	.word	0x08019e80
 8003cac:	08019e8c 	.word	0x08019e8c
 8003cb0:	08019e98 	.word	0x08019e98
 8003cb4:	08019ea4 	.word	0x08019ea4
 8003cb8:	08019eb0 	.word	0x08019eb0
 8003cbc:	08019ebc 	.word	0x08019ebc
 8003cc0:	08019ec8 	.word	0x08019ec8
 8003cc4:	08019ed0 	.word	0x08019ed0
 8003cc8:	08019ed8 	.word	0x08019ed8
 8003ccc:	08019ee4 	.word	0x08019ee4

08003cd0 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cdc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ce0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
	return kp_;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	ee07 3a90 	vmov	s15, r3
}
 8003d12:	eeb0 0a67 	vmov.f32	s0, s15
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	return ki_;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	ee07 3a90 	vmov	s15, r3
}
 8003d30:	eeb0 0a67 	vmov.f32	s0, s15
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
	return kd_;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	ee07 3a90 	vmov	s15, r3
}
 8003d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d68:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d6c:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	ee07 3a90 	vmov	s15, r3
}
 8003d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	ee07 3a90 	vmov	s15, r3
}
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	ee07 3a90 	vmov	s15, r3
}
 8003dda:	eeb0 0a67 	vmov.f32	s0, s15
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb4:	ee07 3a90 	vmov	s15, r3
}
 8003eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ed4:	ee07 3a90 	vmov	s15, r3
}
 8003ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ef4:	ee07 3a90 	vmov	s15, r3
}
 8003ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f14:	ee07 3a90 	vmov	s15, r3
}
 8003f18:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f34:	ee07 3a90 	vmov	s15, r3
}
 8003f38:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f52:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f5c:	3328      	adds	r3, #40	; 0x28
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f68:	332c      	adds	r3, #44	; 0x2c
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f86:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f90:	3330      	adds	r3, #48	; 0x30
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f9c:	3334      	adds	r3, #52	; 0x34
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fbc:	3328      	adds	r3, #40	; 0x28
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	ee07 3a90 	vmov	s15, r3
}
 8003fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fe0:	3334      	adds	r3, #52	; 0x34
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	ee07 3a90 	vmov	s15, r3
}
 8003fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004004:	3330      	adds	r3, #48	; 0x30
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	ee07 3a90 	vmov	s15, r3
}
 800400c:	eeb0 0a67 	vmov.f32	s0, s15
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004028:	332c      	adds	r3, #44	; 0x2c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	ee07 3a90 	vmov	s15, r3
}
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8111 	beq.w	8004276 <_ZN9LineTrace4flipEv+0x236>
		// ---- line following processing -----//
		pidTrace();
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fe fea3 	bl	8002da0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fb5c 	bl	8003718 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8004060:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8004280 <_ZN9LineTrace4flipEv+0x240>
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fbf5 	bl	8003854 <_ZN9LineTrace16isTargetDistanceEf>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d028      	beq.n	80040c2 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff f87d 	bl	8003170 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fcca 	bl	8003a10 <_ZN9LineTrace8isStableEv>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <_ZN9LineTrace4flipEv+0x5c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fbd0 	bl	800582c <_ZN10SideSensor10getStatusLEv>
 800408c:	4603      	mov	r3, r0
 800408e:	f083 0301 	eor.w	r3, r3, #1
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <_ZN9LineTrace4flipEv+0x5c>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <_ZN9LineTrace4flipEv+0x5e>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a8:	3323      	adds	r3, #35	; 0x23
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fd fb34 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f8fb 	bl	80052b8 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040c8:	3323      	adds	r3, #35	; 0x23
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <_ZN9LineTrace4flipEv+0xa4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 fba9 	bl	800582c <_ZN10SideSensor10getStatusLEv>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <_ZN9LineTrace4flipEv+0xa4>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <_ZN9LineTrace4flipEv+0xa6>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01a      	beq.n	8004120 <_ZN9LineTrace4flipEv+0xe0>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040f0:	3354      	adds	r3, #84	; 0x54
 80040f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <_ZN9LineTrace4flipEv+0xc2>
				//store_check_cnt_ = 0;
				storeSideLineDistance();
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe ffc8 	bl	8003090 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004100:	e002      	b.n	8004108 <_ZN9LineTrace4flipEv+0xc8>
			}
			else{
				//store_check_cnt_ = 0;
				//correctionTotalDistanceFromSideMarker();
				storeSideLineDistance2(); //for correction check
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe fffc 	bl	8003100 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800410e:	3323      	adds	r3, #35	; 0x23
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800411a:	3324      	adds	r3, #36	; 0x24
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fbb9 	bl	8003898 <_ZN9LineTrace11isCrossLineEv>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <_ZN9LineTrace4flipEv+0x100>
			side_sensor_->enableIgnore();
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fba3 	bl	800587c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fb1b 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fbb3 	bl	80058b0 <_ZN10SideSensor13getIgnoreFlagEv>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <_ZN9LineTrace4flipEv+0x130>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd faff 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800415a:	eeb0 7a40 	vmov.f32	s14, s0
 800415e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8004284 <_ZN9LineTrace4flipEv+0x244>
 8004162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	db01      	blt.n	8004170 <_ZN9LineTrace4flipEv+0x130>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <_ZN9LineTrace4flipEv+0x132>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <_ZN9LineTrace4flipEv+0x140>
			side_sensor_->disableIgnore();
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	4618      	mov	r0, r3
 800417c:	f001 fb8b 	bl	8005896 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fc41 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <_ZN9LineTrace4flipEv+0x16c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8004288 <_ZN9LineTrace4flipEv+0x248>
 8004198:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004288 <_ZN9LineTrace4flipEv+0x248>
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fef7 	bl	8005f90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd f8ec 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041b2:	3338      	adds	r3, #56	; 0x38
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041c0:	3338      	adds	r3, #56	; 0x38
 80041c2:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ca:	3338      	adds	r3, #56	; 0x38
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d906      	bls.n	80041e4 <_ZN9LineTrace4flipEv+0x1a4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041dc:	3338      	adds	r3, #56	; 0x38
 80041de:	f242 7210 	movw	r2, #10000	; 0x2710
 80041e2:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ea:	3338      	adds	r3, #56	; 0x38
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80041f2:	d806      	bhi.n	8004202 <_ZN9LineTrace4flipEv+0x1c2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	330c      	adds	r3, #12
 80041f8:	2152      	movs	r1, #82	; 0x52
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe f82a 	bl	8002254 <_ZN3LED9fullColorEc>
 8004200:	e005      	b.n	800420e <_ZN9LineTrace4flipEv+0x1ce>
		else led_.fullColor('B');
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	330c      	adds	r3, #12
 8004206:	2142      	movs	r1, #66	; 0x42
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe f823 	bl	8002254 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004214:	333a      	adds	r3, #58	; 0x3a
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004222:	333a      	adds	r3, #58	; 0x3a
 8004224:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800422c:	333a      	adds	r3, #58	; 0x3a
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	f242 720f 	movw	r2, #9999	; 0x270f
 8004234:	4293      	cmp	r3, r2
 8004236:	d906      	bls.n	8004246 <_ZN9LineTrace4flipEv+0x206>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800423e:	333a      	adds	r3, #58	; 0x3a
 8004240:	f242 7210 	movw	r2, #10000	; 0x2710
 8004244:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800424c:	333a      	adds	r3, #58	; 0x3a
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	2bc8      	cmp	r3, #200	; 0xc8
 8004252:	d808      	bhi.n	8004266 <_ZN9LineTrace4flipEv+0x226>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	330c      	adds	r3, #12
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe f8b4 	bl	80023cc <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 8004264:	e007      	b.n	8004276 <_ZN9LineTrace4flipEv+0x236>
		else led_.LR(0, -1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	330c      	adds	r3, #12
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe f8ab 	bl	80023cc <_ZN3LED2LREaa>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	42480000 	.word	0x42480000
 8004284:	428c0000 	.word	0x428c0000
 8004288:	00000000 	.word	0x00000000

0800428c <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800429e:	3354      	adds	r3, #84	; 0x54
 80042a0:	887a      	ldrh	r2, [r7, #2]
 80042a2:	801a      	strh	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 feb8 	bl	8006042 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 fac0 	bl	800585c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042e2:	3318      	adds	r3, #24
 80042e4:	2200      	movs	r2, #0
 80042e6:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042ee:	331c      	adds	r3, #28
 80042f0:	2200      	movs	r2, #0
 80042f2:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042fa:	331e      	adds	r3, #30
 80042fc:	2200      	movs	r2, #0
 80042fe:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004306:	3320      	adds	r3, #32
 8004308:	2200      	movs	r2, #0
 800430a:	801a      	strh	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004320:	2300      	movs	r3, #0
 8004322:	737b      	strb	r3, [r7, #13]
	start();
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ffc3 	bl	80042b0 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800432a:	7b7b      	ldrb	r3, [r7, #13]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d161      	bne.n	80043f4 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004330:	89fb      	ldrh	r3, [r7, #14]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <_ZN9LineTrace7runningEv+0x28>
 8004336:	2b0a      	cmp	r3, #10
 8004338:	d030      	beq.n	800439c <_ZN9LineTrace7runningEv+0x88>
 800433a:	e05a      	b.n	80043f2 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4618      	mov	r0, r3
 8004342:	f001 fa7f 	bl	8005844 <_ZN10SideSensor16getWhiteLineCntREv>
 8004346:	4603      	mov	r3, r0
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04a      	beq.n	80043ec <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fe fe02 	bl	8002f60 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004362:	3354      	adds	r3, #84	; 0x54
 8004364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff f9a3 	bl	80036b8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd f9fd 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd f9db 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	330c      	adds	r3, #12
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe f81b 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 8004396:	230a      	movs	r3, #10
 8004398:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800439a:	e027      	b.n	80043ec <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 fa4f 	bl	8005844 <_ZN10SideSensor16getWhiteLineCntREv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01c      	beq.n	80043f0 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	330c      	adds	r3, #12
 80043ba:	214d      	movs	r1, #77	; 0x4d
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd ff49 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe fde7 	bl	8002f96 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff f988 	bl	80036de <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80043ce:	2064      	movs	r0, #100	; 0x64
 80043d0:	f005 fd9a 	bl	8009f08 <HAL_Delay>

				setTargetVelocity(0);
 80043d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004404 <_ZN9LineTrace7runningEv+0xf0>
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fd14 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80043de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043e2:	f005 fd91 	bl	8009f08 <HAL_Delay>

				goal_flag = true;
 80043e6:	2301      	movs	r3, #1
 80043e8:	737b      	strb	r3, [r7, #13]

			}

			break;
 80043ea:	e001      	b.n	80043f0 <_ZN9LineTrace7runningEv+0xdc>
			break;
 80043ec:	bf00      	nop
 80043ee:	e79c      	b.n	800432a <_ZN9LineTrace7runningEv+0x16>
			break;
 80043f0:	bf00      	nop
	while(goal_flag == false){
 80043f2:	e79a      	b.n	800432a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f807 	bl	8004408 <_ZN9LineTrace4stopEv>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	00000000 	.word	0x00000000

08004408 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af02      	add	r7, sp, #8
 800440e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fe23 	bl	8006068 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	330c      	adds	r3, #12
 8004426:	2201      	movs	r2, #1
 8004428:	f04f 31ff 	mov.w	r1, #4294967295
 800442c:	4618      	mov	r0, r3
 800442e:	f7fd ffcd 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004438:	3354      	adds	r3, #84	; 0x54
 800443a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11e      	bne.n	8004480 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69d8      	ldr	r0, [r3, #28]
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <_ZN9LineTrace4stopEv+0xe0>)
 8004448:	4a28      	ldr	r2, [pc, #160]	; (80044ec <_ZN9LineTrace4stopEv+0xe4>)
 800444a:	4929      	ldr	r1, [pc, #164]	; (80044f0 <_ZN9LineTrace4stopEv+0xe8>)
 800444c:	f000 fbe8 	bl	8004c20 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004456:	3358      	adds	r3, #88	; 0x58
 8004458:	2200      	movs	r2, #0
 800445a:	9200      	str	r2, [sp, #0]
 800445c:	2264      	movs	r2, #100	; 0x64
 800445e:	4925      	ldr	r1, [pc, #148]	; (80044f4 <_ZN9LineTrace4stopEv+0xec>)
 8004460:	4823      	ldr	r0, [pc, #140]	; (80044f0 <_ZN9LineTrace4stopEv+0xe8>)
 8004462:	f7fd fa0b 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800446c:	3378      	adds	r3, #120	; 0x78
 800446e:	2200      	movs	r2, #0
 8004470:	9200      	str	r2, [sp, #0]
 8004472:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004476:	4920      	ldr	r1, [pc, #128]	; (80044f8 <_ZN9LineTrace4stopEv+0xf0>)
 8004478:	481d      	ldr	r0, [pc, #116]	; (80044f0 <_ZN9LineTrace4stopEv+0xe8>)
 800447a:	f7fd f9ff 	bl	800187c <sd_write_array_float>
 800447e:	e01d      	b.n	80044bc <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69d8      	ldr	r0, [r3, #28]
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <_ZN9LineTrace4stopEv+0xf4>)
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <_ZN9LineTrace4stopEv+0xf8>)
 8004488:	4919      	ldr	r1, [pc, #100]	; (80044f0 <_ZN9LineTrace4stopEv+0xe8>)
 800448a:	f000 fbec 	bl	8004c66 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004494:	33e8      	adds	r3, #232	; 0xe8
 8004496:	2200      	movs	r2, #0
 8004498:	9200      	str	r2, [sp, #0]
 800449a:	2264      	movs	r2, #100	; 0x64
 800449c:	4919      	ldr	r1, [pc, #100]	; (8004504 <_ZN9LineTrace4stopEv+0xfc>)
 800449e:	4814      	ldr	r0, [pc, #80]	; (80044f0 <_ZN9LineTrace4stopEv+0xe8>)
 80044a0:	f7fd f9ec 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80044aa:	3348      	adds	r3, #72	; 0x48
 80044ac:	2200      	movs	r2, #0
 80044ae:	9200      	str	r2, [sp, #0]
 80044b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044b4:	4914      	ldr	r1, [pc, #80]	; (8004508 <_ZN9LineTrace4stopEv+0x100>)
 80044b6:	480e      	ldr	r0, [pc, #56]	; (80044f0 <_ZN9LineTrace4stopEv+0xe8>)
 80044b8:	f7fd f9e0 	bl	800187c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	330c      	adds	r3, #12
 80044c0:	2200      	movs	r2, #0
 80044c2:	f04f 31ff 	mov.w	r1, #4294967295
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd ff80 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fc58 	bl	8004d86 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fc07 	bl	8004cee <_ZN6Logger10resetLogs2Ev>
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	08019ef0 	.word	0x08019ef0
 80044ec:	08019efc 	.word	0x08019efc
 80044f0:	08019f0c 	.word	0x08019f0c
 80044f4:	08019f18 	.word	0x08019f18
 80044f8:	08019f28 	.word	0x08019f28
 80044fc:	08019f34 	.word	0x08019f34
 8004500:	08019f40 	.word	0x08019f40
 8004504:	08019f50 	.word	0x08019f50
 8004508:	08019f60 	.word	0x08019f60

0800450c <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b08b      	sub	sp, #44	; 0x2c
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fb25 	bl	8004b68 <_ZN6Logger23getDistanceArrayPointerEv>
 800451e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fb2d 	bl	8004b84 <_ZN6Logger20getThetaArrayPointerEv>
 800452a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800452c:	2300      	movs	r3, #0
 800452e:	837b      	strh	r3, [r7, #26]
 8004530:	8b7b      	ldrh	r3, [r7, #26]
 8004532:	f241 726f 	movw	r2, #5999	; 0x176f
 8004536:	4293      	cmp	r3, r2
 8004538:	d84b      	bhi.n	80045d2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800453a:	8b7b      	ldrh	r3, [r7, #26]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004546:	8b7b      	ldrh	r3, [r7, #26]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004552:	edd7 7a07 	vldr	s15, [r7, #28]
 8004556:	eef5 7a40 	vcmp.f32	s15, #0.0
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	d101      	bne.n	8004564 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004560:	4b4c      	ldr	r3, [pc, #304]	; (8004694 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004562:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004564:	ed97 7a02 	vldr	s14, [r7, #8]
 8004568:	edd7 7a07 	vldr	s15, [r7, #28]
 800456c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004570:	eeb0 0a66 	vmov.f32	s0, s13
 8004574:	f7fe fa9a 	bl	8002aac <_ZSt3absf>
 8004578:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800457c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004580:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004698 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	db01      	blt.n	8004592 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004590:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004592:	8b7c      	ldrh	r4, [r7, #26]
 8004594:	ed97 0a05 	vldr	s0, [r7, #20]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fe fea5 	bl	80032e8 <_ZN9LineTrace15radius2VelocityEf>
 800459e:	eef0 7a40 	vmov.f32	s15, s0
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045a8:	3304      	adds	r3, #4
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045b2:	8b7b      	ldrh	r3, [r7, #26]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	441a      	add	r2, r3
 80045ba:	8b7b      	ldrh	r3, [r7, #26]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	3332      	adds	r3, #50	; 0x32
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	3304      	adds	r3, #4
 80045c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045ca:	8b7b      	ldrh	r3, [r7, #26]
 80045cc:	3301      	adds	r3, #1
 80045ce:	837b      	strh	r3, [r7, #26]
 80045d0:	e7ae      	b.n	8004530 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045d8:	3354      	adds	r3, #84	; 0x54
 80045da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d120      	bne.n	8004624 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045ee:	3310      	adds	r3, #16
 80045f0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045f8:	332c      	adds	r3, #44	; 0x2c
 80045fa:	edd3 7a00 	vldr	s15, [r3]
 80045fe:	6939      	ldr	r1, [r7, #16]
 8004600:	eeb0 0a67 	vmov.f32	s0, s15
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fe ff0f 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004610:	3328      	adds	r3, #40	; 0x28
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe ffa7 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004622:	e027      	b.n	8004674 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800462a:	3354      	adds	r3, #84	; 0x54
 800462c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d11f      	bne.n	8004674 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004640:	3310      	adds	r3, #16
 8004642:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800464a:	3334      	adds	r3, #52	; 0x34
 800464c:	edd3 7a00 	vldr	s15, [r3]
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	eeb0 0a67 	vmov.f32	s0, s15
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe fee6 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004662:	3330      	adds	r3, #48	; 0x30
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	eeb0 0a67 	vmov.f32	s0, s15
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fe ff7e 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800467a:	3310      	adds	r3, #16
 800467c:	2200      	movs	r2, #0
 800467e:	9200      	str	r2, [sp, #0]
 8004680:	f241 7270 	movw	r2, #6000	; 0x1770
 8004684:	4906      	ldr	r1, [pc, #24]	; (80046a0 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004686:	4807      	ldr	r0, [pc, #28]	; (80046a4 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004688:	f7fd f8f8 	bl	800187c <sd_write_array_float>

}
 800468c:	bf00      	nop
 800468e:	3724      	adds	r7, #36	; 0x24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	3727c5ac 	.word	0x3727c5ac
 8004698:	459c4000 	.word	0x459c4000
 800469c:	459c4000 	.word	0x459c4000
 80046a0:	08019f70 	.word	0x08019f70
 80046a4:	08019f0c 	.word	0x08019f0c

080046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69d8      	ldr	r0, [r3, #28]
 80046b4:	4b6b      	ldr	r3, [pc, #428]	; (8004864 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046b6:	4a6c      	ldr	r2, [pc, #432]	; (8004868 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046b8:	496c      	ldr	r1, [pc, #432]	; (800486c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046ba:	f000 faf9 	bl	8004cb0 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046c4:	3358      	adds	r3, #88	; 0x58
 80046c6:	2264      	movs	r2, #100	; 0x64
 80046c8:	4969      	ldr	r1, [pc, #420]	; (8004870 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80046ca:	4868      	ldr	r0, [pc, #416]	; (800486c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046cc:	f7fd f93c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80046d6:	3378      	adds	r3, #120	; 0x78
 80046d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046dc:	4965      	ldr	r1, [pc, #404]	; (8004874 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80046de:	4863      	ldr	r0, [pc, #396]	; (800486c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046e0:	f7fd f932 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fa3d 	bl	8004b68 <_ZN6Logger23getDistanceArrayPointerEv>
 80046ee:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa45 	bl	8004b84 <_ZN6Logger20getThetaArrayPointerEv>
 80046fa:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80046fc:	2300      	movs	r3, #0
 80046fe:	837b      	strh	r3, [r7, #26]
 8004700:	8b7b      	ldrh	r3, [r7, #26]
 8004702:	f241 726f 	movw	r2, #5999	; 0x176f
 8004706:	4293      	cmp	r3, r2
 8004708:	d84b      	bhi.n	80047a2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800470a:	8b7b      	ldrh	r3, [r7, #26]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4413      	add	r3, r2
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004716:	8b7b      	ldrh	r3, [r7, #26]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004722:	edd7 7a07 	vldr	s15, [r7, #28]
 8004726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472e:	d101      	bne.n	8004734 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004730:	4b51      	ldr	r3, [pc, #324]	; (8004878 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004732:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004734:	ed97 7a02 	vldr	s14, [r7, #8]
 8004738:	edd7 7a07 	vldr	s15, [r7, #28]
 800473c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004740:	eeb0 0a66 	vmov.f32	s0, s13
 8004744:	f7fe f9b2 	bl	8002aac <_ZSt3absf>
 8004748:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800474c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004750:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800487c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475c:	db01      	blt.n	8004762 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800475e:	4b48      	ldr	r3, [pc, #288]	; (8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004760:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004762:	8b7c      	ldrh	r4, [r7, #26]
 8004764:	ed97 0a05 	vldr	s0, [r7, #20]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fe fdbd 	bl	80032e8 <_ZN9LineTrace15radius2VelocityEf>
 800476e:	eef0 7a40 	vmov.f32	s15, s0
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004778:	3304      	adds	r3, #4
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004782:	8b7b      	ldrh	r3, [r7, #26]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	441a      	add	r2, r3
 800478a:	8b7b      	ldrh	r3, [r7, #26]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3304      	adds	r3, #4
 8004798:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800479a:	8b7b      	ldrh	r3, [r7, #26]
 800479c:	3301      	adds	r3, #1
 800479e:	837b      	strh	r3, [r7, #26]
 80047a0:	e7ae      	b.n	8004700 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047a8:	3354      	adds	r3, #84	; 0x54
 80047aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d120      	bne.n	80047f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047be:	3310      	adds	r3, #16
 80047c0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047c8:	332c      	adds	r3, #44	; 0x2c
 80047ca:	edd3 7a00 	vldr	s15, [r3]
 80047ce:	6939      	ldr	r1, [r7, #16]
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fe fe27 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047e0:	3328      	adds	r3, #40	; 0x28
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fe febf 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80047f2:	e027      	b.n	8004844 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047fa:	3354      	adds	r3, #84	; 0x54
 80047fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11f      	bne.n	8004844 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004810:	3310      	adds	r3, #16
 8004812:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800481a:	3334      	adds	r3, #52	; 0x34
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	6939      	ldr	r1, [r7, #16]
 8004822:	eeb0 0a67 	vmov.f32	s0, s15
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fe fdfe 	bl	8003428 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004832:	3330      	adds	r3, #48	; 0x30
 8004834:	edd3 7a00 	vldr	s15, [r3]
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	eeb0 0a67 	vmov.f32	s0, s15
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fe fe96 	bl	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800484a:	3310      	adds	r3, #16
 800484c:	2200      	movs	r2, #0
 800484e:	9200      	str	r2, [sp, #0]
 8004850:	f241 7270 	movw	r2, #6000	; 0x1770
 8004854:	490b      	ldr	r1, [pc, #44]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004856:	4805      	ldr	r0, [pc, #20]	; (800486c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004858:	f7fd f810 	bl	800187c <sd_write_array_float>

}
 800485c:	bf00      	nop
 800485e:	3724      	adds	r7, #36	; 0x24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}
 8004864:	08019ef0 	.word	0x08019ef0
 8004868:	08019efc 	.word	0x08019efc
 800486c:	08019f0c 	.word	0x08019f0c
 8004870:	08019f18 	.word	0x08019f18
 8004874:	08019f28 	.word	0x08019f28
 8004878:	3727c5ac 	.word	0x3727c5ac
 800487c:	459c4000 	.word	0x459c4000
 8004880:	459c4000 	.word	0x459c4000
 8004884:	08019f70 	.word	0x08019f70

08004888 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004896:	33c0      	adds	r3, #192	; 0xc0
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048a2:	33c2      	adds	r3, #194	; 0xc2
 80048a4:	2200      	movs	r2, #0
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ae:	33c4      	adds	r3, #196	; 0xc4
 80048b0:	2200      	movs	r2, #0
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ba:	33c6      	adds	r3, #198	; 0xc6
 80048bc:	2200      	movs	r2, #0
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048c6:	33c8      	adds	r3, #200	; 0xc8
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048d2:	33ca      	adds	r3, #202	; 0xca
 80048d4:	2200      	movs	r2, #0
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80048f4:	f7fd f914 	bl	8001b20 <sd_mount>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004908:	f7fc fbca 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800490c:	2100      	movs	r1, #0
 800490e:	2000      	movs	r0, #0
 8004910:	f7fc fbd6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004914:	4815      	ldr	r0, [pc, #84]	; (800496c <_ZN6Logger10sdCardInitEv+0x84>)
 8004916:	f7fc fbfd 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800491a:	2101      	movs	r1, #1
 800491c:	2000      	movs	r0, #0
 800491e:	f7fc fbcf 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004922:	4813      	ldr	r0, [pc, #76]	; (8004970 <_ZN6Logger10sdCardInitEv+0x88>)
 8004924:	f7fc fbf6 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800492c:	f005 faec 	bl	8009f08 <HAL_Delay>

	  ret = true;
 8004930:	2301      	movs	r3, #1
 8004932:	73fb      	strb	r3, [r7, #15]
 8004934:	e015      	b.n	8004962 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004936:	f7fc fbb3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800493a:	2100      	movs	r1, #0
 800493c:	2000      	movs	r0, #0
 800493e:	f7fc fbbf 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004942:	480a      	ldr	r0, [pc, #40]	; (800496c <_ZN6Logger10sdCardInitEv+0x84>)
 8004944:	f7fc fbe6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004948:	2101      	movs	r1, #1
 800494a:	2000      	movs	r0, #0
 800494c:	f7fc fbb8 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004950:	4808      	ldr	r0, [pc, #32]	; (8004974 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004952:	f7fc fbdf 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800495a:	f005 fad5 	bl	8009f08 <HAL_Delay>

	  ret = false;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	08019f80 	.word	0x08019f80
 8004970:	08019f8c 	.word	0x08019f8c
 8004974:	08019f94 	.word	0x08019f94

08004978 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800498a:	33c0      	adds	r3, #192	; 0xc0
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d025      	beq.n	80049de <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004998:	33c6      	adds	r3, #198	; 0xc6
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80049a4:	8879      	ldrh	r1, [r7, #2]
 80049a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049b0:	33c6      	adds	r3, #198	; 0xc6
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049be:	33c6      	adds	r3, #198	; 0xc6
 80049c0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049c8:	33c6      	adds	r3, #198	; 0xc6
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049d0:	d305      	bcc.n	80049de <_ZN6Logger11storeLogIntEs+0x66>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049d8:	33c6      	adds	r3, #198	; 0xc6
 80049da:	2200      	movs	r2, #0
 80049dc:	801a      	strh	r2, [r3, #0]
	}

}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049fc:	33c0      	adds	r3, #192	; 0xc0
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d025      	beq.n	8004a50 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a0a:	33c8      	adds	r3, #200	; 0xc8
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004a14:	3310      	adds	r3, #16
 8004a16:	8879      	ldrh	r1, [r7, #2]
 8004a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a22:	33c8      	adds	r3, #200	; 0xc8
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a30:	33c8      	adds	r3, #200	; 0xc8
 8004a32:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a3a:	33c8      	adds	r3, #200	; 0xc8
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004a42:	d305      	bcc.n	8004a50 <_ZN6Logger12storeLog2IntEs+0x66>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a4a:	33c8      	adds	r3, #200	; 0xc8
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	801a      	strh	r2, [r3, #0]
	}

}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a68:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a72:	33ca      	adds	r3, #202	; 0xca
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8c:	33ca      	adds	r3, #202	; 0xca
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004a96:	3320      	adds	r3, #32
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004aa6:	33ca      	adds	r3, #202	; 0xca
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ab4:	33ca      	adds	r3, #202	; 0xca
 8004ab6:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004abe:	33ca      	adds	r3, #202	; 0xca
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f241 726f 	movw	r2, #5999	; 0x176f
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d905      	bls.n	8004ad6 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ad0:	33ca      	adds	r3, #202	; 0xca
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	801a      	strh	r2, [r3, #0]
	//}
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aee:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004af8:	33ca      	adds	r3, #202	; 0xca
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004b02:	3350      	adds	r3, #80	; 0x50
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b12:	33ca      	adds	r3, #202	; 0xca
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b2c:	33ca      	adds	r3, #202	; 0xca
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b3a:	33ca      	adds	r3, #202	; 0xca
 8004b3c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b44:	33ca      	adds	r3, #202	; 0xca
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d905      	bls.n	8004b5c <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b56:	33ca      	adds	r3, #202	; 0xca
 8004b58:	2200      	movs	r2, #0
 8004b5a:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b76:	3340      	adds	r3, #64	; 0x40
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b92:	3380      	adds	r3, #128	; 0x80
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	68b8      	ldr	r0, [r7, #8]
 8004bbc:	f7fc fe5e 	bl	800187c <sd_write_array_float>
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7fc ff3a 	bl	8001a60 <sd_write_array_int>
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004c06:	3320      	adds	r3, #32
 8004c08:	2200      	movs	r2, #0
 8004c0a:	9200      	str	r2, [sp, #0]
 8004c0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	f7fc ff24 	bl	8001a60 <sd_write_array_int>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c34:	3340      	adds	r3, #64	; 0x40
 8004c36:	2200      	movs	r2, #0
 8004c38:	9200      	str	r2, [sp, #0]
 8004c3a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	68b8      	ldr	r0, [r7, #8]
 8004c42:	f7fc fe1b 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c4c:	3380      	adds	r3, #128	; 0x80
 8004c4e:	2200      	movs	r2, #0
 8004c50:	9200      	str	r2, [sp, #0]
 8004c52:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	68b8      	ldr	r0, [r7, #8]
 8004c5a:	f7fc fe0f 	bl	800187c <sd_write_array_float>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af02      	add	r7, sp, #8
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c7a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c7e:	2200      	movs	r2, #0
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	68b8      	ldr	r0, [r7, #8]
 8004c8a:	f7fc fdf7 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c98:	2200      	movs	r2, #0
 8004c9a:	9200      	str	r2, [sp, #0]
 8004c9c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	68b8      	ldr	r0, [r7, #8]
 8004ca4:	f7fc fdea 	bl	800187c <sd_write_array_float>
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cc4:	3340      	adds	r3, #64	; 0x40
 8004cc6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	68b8      	ldr	r0, [r7, #8]
 8004cce:	f7fc fe3b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004cd8:	3380      	adds	r3, #128	; 0x80
 8004cda:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	68b8      	ldr	r0, [r7, #8]
 8004ce2:	f7fc fe31 	bl	8001948 <sd_read_array_float>
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b08b      	sub	sp, #44	; 0x2c
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004cfc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d0c:	3340      	adds	r3, #64	; 0x40
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d009      	beq.n	8004d2c <_ZN6Logger10resetLogs2Ev+0x3e>
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	617b      	str	r3, [r7, #20]
		log = 0;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	3304      	adds	r3, #4
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	e7f1      	b.n	8004d10 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004d32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	623b      	str	r3, [r7, #32]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d42:	3340      	adds	r3, #64	; 0x40
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d009      	beq.n	8004d62 <_ZN6Logger10resetLogs2Ev+0x74>
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	e7f1      	b.n	8004d46 <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d68:	33c2      	adds	r3, #194	; 0xc2
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d74:	33ca      	adds	r3, #202	; 0xca
 8004d76:	2200      	movs	r2, #0
 8004d78:	801a      	strh	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	372c      	adds	r7, #44	; 0x2c
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d94:	33c2      	adds	r3, #194	; 0xc2
 8004d96:	2200      	movs	r2, #0
 8004d98:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004da0:	33ca      	adds	r3, #202	; 0xca
 8004da2:	2200      	movs	r2, #0
 8004da4:	801a      	strh	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004dc0:	33c0      	adds	r3, #192	; 0xc0
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004de0:	33c0      	adds	r3, #192	; 0xc0
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	805a      	strh	r2, [r3, #2]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004e1c:	2108      	movs	r1, #8
 8004e1e:	4805      	ldr	r0, [pc, #20]	; (8004e34 <_ZN5Motor4initEv+0x20>)
 8004e20:	f00a fa22 	bl	800f268 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004e24:	210c      	movs	r1, #12
 8004e26:	4803      	ldr	r0, [pc, #12]	; (8004e34 <_ZN5Motor4initEv+0x20>)
 8004e28:	f00a fa1e 	bl	800f268 <HAL_TIM_PWM_Start>

}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200448a8 	.word	0x200448a8

08004e38 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da0d      	bge.n	8004e66 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e50:	481f      	ldr	r0, [pc, #124]	; (8004ed0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e52:	f006 faef 	bl	800b434 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	425b      	negs	r3, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	81fb      	strh	r3, [r7, #14]
 8004e64:	e00a      	b.n	8004e7c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004e66:	2201      	movs	r2, #1
 8004e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e6c:	4818      	ldr	r0, [pc, #96]	; (8004ed0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e6e:	f006 fae1 	bl	800b434 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da0d      	bge.n	8004ea2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004e86:	2201      	movs	r2, #1
 8004e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e8c:	4810      	ldr	r0, [pc, #64]	; (8004ed0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e8e:	f006 fad1 	bl	800b434 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	81bb      	strh	r3, [r7, #12]
 8004ea0:	e00a      	b.n	8004eb8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea8:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004eaa:	f006 fac3 	bl	800b434 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004eb8:	89fa      	ldrh	r2, [r7, #14]
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004ec0:	89ba      	ldrh	r2, [r7, #12]
 8004ec2:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40020c00 	.word	0x40020c00
 8004ed4:	200448a8 	.word	0x200448a8

08004ed8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6178      	str	r0, [r7, #20]
 8004ee0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ee4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ef2:	f7fb fe29 	bl	8000b48 <__aeabi_dcmpgt>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <_ZN5Motor8setRatioEdd+0x30>
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	4c2b      	ldr	r4, [pc, #172]	; (8004fb0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f02:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004f06:	e00e      	b.n	8004f26 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f12:	f7fb fdfb 	bl	8000b0c <__aeabi_dcmplt>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <_ZN5Motor8setRatioEdd+0x4e>
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	4c24      	ldr	r4, [pc, #144]	; (8004fb4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f22:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f30:	f7fb fe0a 	bl	8000b48 <__aeabi_dcmpgt>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <_ZN5Motor8setRatioEdd+0x6e>
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	4c1c      	ldr	r4, [pc, #112]	; (8004fb0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f40:	e9c7 3400 	strd	r3, r4, [r7]
 8004f44:	e00e      	b.n	8004f64 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f50:	f7fb fddc 	bl	8000b0c <__aeabi_dcmplt>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <_ZN5Motor8setRatioEdd+0x8c>
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	4c15      	ldr	r4, [pc, #84]	; (8004fb4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f60:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f6e:	f7fb fb5b 	bl	8000628 <__aeabi_dmul>
 8004f72:	4603      	mov	r3, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	4618      	mov	r0, r3
 8004f78:	4621      	mov	r1, r4
 8004f7a:	f7fb fe05 	bl	8000b88 <__aeabi_d2iz>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f90:	f7fb fb4a 	bl	8000628 <__aeabi_dmul>
 8004f94:	4603      	mov	r3, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	f7fb fdf4 	bl	8000b88 <__aeabi_d2iz>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	b21a      	sxth	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	805a      	strh	r2, [r3, #2]

}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}
 8004fb0:	3ff00000 	.word	0x3ff00000
 8004fb4:	bff00000 	.word	0xbff00000
 8004fb8:	409c2000 	.word	0x409c2000

08004fbc <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004ff0:	b490      	push	{r4, r7}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	f04f 0400 	mov.w	r4, #0
 8005008:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	f04f 0400 	mov.w	r4, #0
 8005016:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	f04f 0400 	mov.w	r4, #0
 8005024:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f04f 0400 	mov.w	r4, #0
 8005032:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	f04f 0400 	mov.w	r4, #0
 8005040:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	609a      	str	r2, [r3, #8]
}
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bc90      	pop	{r4, r7}
 8005060:	4770      	bx	lr
 8005062:	0000      	movs	r0, r0
 8005064:	0000      	movs	r0, r0
	...

08005068 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fc ff2a 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 800507c:	ee10 3a10 	vmov	r3, s0
 8005080:	4618      	mov	r0, r3
 8005082:	f7fb fa79 	bl	8000578 <__aeabi_f2d>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7fc fb08 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8005098:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800509c:	a376      	add	r3, pc, #472	; (adr r3, 8005278 <_ZN8Odometry12calcPotitionEv+0x210>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050a6:	f7fb fabf 	bl	8000628 <__aeabi_dmul>
 80050aa:	4603      	mov	r3, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7fb fa5c 	bl	8000578 <__aeabi_f2d>
 80050c0:	4682      	mov	sl, r0
 80050c2:	468b      	mov	fp, r1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050d8:	f7fb fbd0 	bl	800087c <__aeabi_ddiv>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4640      	mov	r0, r8
 80050e2:	4649      	mov	r1, r9
 80050e4:	f7fb f8ea 	bl	80002bc <__adddf3>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	ec43 2b17 	vmov	d7, r2, r3
 80050f0:	eeb0 0a47 	vmov.f32	s0, s14
 80050f4:	eef0 0a67 	vmov.f32	s1, s15
 80050f8:	f00f fbfa 	bl	80148f0 <cos>
 80050fc:	ec53 2b10 	vmov	r2, r3, d0
 8005100:	4650      	mov	r0, sl
 8005102:	4659      	mov	r1, fp
 8005104:	f7fb fa90 	bl	8000628 <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb f8d4 	bl	80002bc <__adddf3>
 8005114:	4603      	mov	r3, r0
 8005116:	460c      	mov	r4, r1
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7fb fa27 	bl	8000578 <__aeabi_f2d>
 800512a:	4682      	mov	sl, r0
 800512c:	468b      	mov	fp, r1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005142:	f7fb fb9b 	bl	800087c <__aeabi_ddiv>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4640      	mov	r0, r8
 800514c:	4649      	mov	r1, r9
 800514e:	f7fb f8b5 	bl	80002bc <__adddf3>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	ec43 2b17 	vmov	d7, r2, r3
 800515a:	eeb0 0a47 	vmov.f32	s0, s14
 800515e:	eef0 0a67 	vmov.f32	s1, s15
 8005162:	f00f fc09 	bl	8014978 <sin>
 8005166:	ec53 2b10 	vmov	r2, r3, d0
 800516a:	4650      	mov	r0, sl
 800516c:	4659      	mov	r1, fp
 800516e:	f7fb fa5b 	bl	8000628 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fb f89f 	bl	80002bc <__adddf3>
 800517e:	4603      	mov	r3, r0
 8005180:	460c      	mov	r4, r1
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005194:	461a      	mov	r2, r3
 8005196:	4623      	mov	r3, r4
 8005198:	f7fb f890 	bl	80002bc <__adddf3>
 800519c:	4603      	mov	r3, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	ed93 7b08 	vldr	d7, [r3, #32]
 80051b2:	eeb0 0a47 	vmov.f32	s0, s14
 80051b6:	eef0 0a67 	vmov.f32	s1, s15
 80051ba:	f00f fb99 	bl	80148f0 <cos>
 80051be:	ec51 0b10 	vmov	r0, r1, d0
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	4b28      	ldr	r3, [pc, #160]	; (8005268 <_ZN8Odometry12calcPotitionEv+0x200>)
 80051c8:	f7fb fa2e 	bl	8000628 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7fb f872 	bl	80002bc <__adddf3>
 80051d8:	4603      	mov	r3, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	ed93 7b08 	vldr	d7, [r3, #32]
 80051ee:	eeb0 0a47 	vmov.f32	s0, s14
 80051f2:	eef0 0a67 	vmov.f32	s1, s15
 80051f6:	f00f fbbf 	bl	8014978 <sin>
 80051fa:	ec51 0b10 	vmov	r0, r1, d0
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005204:	f7fb fa10 	bl	8000628 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	f7fb f854 	bl	80002bc <__adddf3>
 8005214:	4603      	mov	r3, r0
 8005216:	460c      	mov	r4, r1
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005224:	4618      	mov	r0, r3
 8005226:	4621      	mov	r1, r4
 8005228:	f7fb fcf6 	bl	8000c18 <__aeabi_d2f>
 800522c:	4602      	mov	r2, r0
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005230:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005238:	4618      	mov	r0, r3
 800523a:	4621      	mov	r1, r4
 800523c:	f7fb fcec 	bl	8000c18 <__aeabi_d2f>
 8005240:	4602      	mov	r2, r0
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005244:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800524c:	4618      	mov	r0, r3
 800524e:	4621      	mov	r1, r4
 8005250:	f7fb fce2 	bl	8000c18 <__aeabi_d2f>
 8005254:	4602      	mov	r2, r0
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005264:	f3af 8000 	nop.w
 8005268:	405b8000 	.word	0x405b8000
 800526c:	2000028c 	.word	0x2000028c
 8005270:	20000290 	.word	0x20000290
 8005274:	20000294 	.word	0x20000294
 8005278:	d2f1a9fc 	.word	0xd2f1a9fc
 800527c:	3f50624d 	.word	0x3f50624d

08005280 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff feed 	bl	8005068 <_ZN8Odometry12calcPotitionEv>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005296:	b490      	push	{r4, r7}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
	return theta_;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80052a4:	ec44 3b17 	vmov	d7, r3, r4
}
 80052a8:	eeb0 0a47 	vmov.f32	s0, s14
 80052ac:	eef0 0a67 	vmov.f32	s1, s15
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc90      	pop	{r4, r7}
 80052b6:	4770      	bx	lr

080052b8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80052b8:	b490      	push	{r4, r7}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	f04f 0400 	mov.w	r4, #0
 80052d8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc90      	pop	{r4, r7}
 80052f2:	4770      	bx	lr

080052f4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80052f4:	b490      	push	{r4, r7}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	f04f 0400 	mov.w	r4, #0
 8005328:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005332:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005336:	2200      	movs	r2, #0
 8005338:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800533a:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <_ZN13PathFollowingC1Ev+0xec>)
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005348:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <_ZN13PathFollowingC1Ev+0xec>)
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	f04f 0400 	mov.w	r4, #0
 8005352:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005356:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <_ZN13PathFollowingC1Ev+0xec>)
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	f04f 0400 	mov.w	r4, #0
 8005360:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005364:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	f04f 0400 	mov.w	r4, #0
 800536e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	f04f 0400 	mov.w	r4, #0
 800537c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005380:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	f04f 0400 	mov.w	r4, #0
 8005398:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800539c:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <_ZN13PathFollowingC1Ev+0xf0>)
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80053aa:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <_ZN13PathFollowingC1Ev+0xf0>)
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80053b8:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <_ZN13PathFollowingC1Ev+0xf4>)
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80053c6:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <_ZN13PathFollowingC1Ev+0xf4>)
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc90      	pop	{r4, r7}
 80053de:	4770      	bx	lr
 80053e0:	20044da8 	.word	0x20044da8
 80053e4:	20044d38 	.word	0x20044d38
 80053e8:	20044d98 	.word	0x20044d98

080053ec <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80053f4:	f001 fdce 	bl	8006f94 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80053f8:	f107 0318 	add.w	r3, r7, #24
 80053fc:	2201      	movs	r2, #1
 80053fe:	4915      	ldr	r1, [pc, #84]	; (8005454 <_ZN13PathFollowing4initEv+0x68>)
 8005400:	4815      	ldr	r0, [pc, #84]	; (8005458 <_ZN13PathFollowing4initEv+0x6c>)
 8005402:	f7fc fae7 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005406:	f107 0310 	add.w	r3, r7, #16
 800540a:	2201      	movs	r2, #1
 800540c:	4913      	ldr	r1, [pc, #76]	; (800545c <_ZN13PathFollowing4initEv+0x70>)
 800540e:	4812      	ldr	r0, [pc, #72]	; (8005458 <_ZN13PathFollowing4initEv+0x6c>)
 8005410:	f7fc fae0 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	2201      	movs	r2, #1
 800541a:	4911      	ldr	r1, [pc, #68]	; (8005460 <_ZN13PathFollowing4initEv+0x74>)
 800541c:	480e      	ldr	r0, [pc, #56]	; (8005458 <_ZN13PathFollowing4initEv+0x6c>)
 800541e:	f7fc fad9 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005422:	ed97 7b06 	vldr	d7, [r7, #24]
 8005426:	ed97 6b04 	vldr	d6, [r7, #16]
 800542a:	ed97 5b02 	vldr	d5, [r7, #8]
 800542e:	eeb0 2a45 	vmov.f32	s4, s10
 8005432:	eef0 2a65 	vmov.f32	s5, s11
 8005436:	eeb0 1a46 	vmov.f32	s2, s12
 800543a:	eef0 1a66 	vmov.f32	s3, s13
 800543e:	eeb0 0a47 	vmov.f32	s0, s14
 8005442:	eef0 0a67 	vmov.f32	s1, s15
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f80c 	bl	8005464 <_ZN13PathFollowing7setGainEddd>
}
 800544c:	bf00      	nop
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08019f9c 	.word	0x08019f9c
 8005458:	08019fa4 	.word	0x08019fa4
 800545c:	08019fac 	.word	0x08019fac
 8005460:	08019fb4 	.word	0x08019fb4

08005464 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005464:	b490      	push	{r4, r7}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	61f8      	str	r0, [r7, #28]
 800546c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005470:	ed87 1b02 	vstr	d1, [r7, #8]
 8005474:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800547a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800547e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005484:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005488:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800548c:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800548e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005492:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005496:	bf00      	nop
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bc90      	pop	{r4, r7}
 800549e:	4770      	bx	lr
 80054a0:	20044da8 	.word	0x20044da8

080054a4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80054ac:	2088      	movs	r0, #136	; 0x88
 80054ae:	f7fc fe52 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80054b2:	2080      	movs	r0, #128	; 0x80
 80054b4:	f7fc fe4f 	bl	8002156 <INA260_init>
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80054c8:	2188      	movs	r1, #136	; 0x88
 80054ca:	2002      	movs	r0, #2
 80054cc:	f7fc fde0 	bl	8002090 <INA260_read>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb f83e 	bl	8000554 <__aeabi_i2d>
 80054d8:	a30c      	add	r3, pc, #48	; (adr r3, 800550c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fb f8a3 	bl	8000628 <__aeabi_dmul>
 80054e2:	4603      	mov	r3, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	4618      	mov	r0, r3
 80054e8:	4621      	mov	r1, r4
 80054ea:	f7fb fb95 	bl	8000c18 <__aeabi_d2f>
 80054ee:	4602      	mov	r2, r0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4a03      	ldr	r2, [pc, #12]	; (8005508 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80054fa:	6013      	str	r3, [r2, #0]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bd90      	pop	{r4, r7, pc}
 8005504:	f3af 8000 	nop.w
 8005508:	20000298 	.word	0x20000298
 800550c:	47ae147b 	.word	0x47ae147b
 8005510:	3f547ae1 	.word	0x3f547ae1

08005514 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	ee07 3a90 	vmov	s15, r3

}
 8005524:	eeb0 0a67 	vmov.f32	s0, s15
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005540:	2102      	movs	r1, #2
 8005542:	4822      	ldr	r0, [pc, #136]	; (80055cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005544:	f005 ff5e 	bl	800b404 <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005558:	89fb      	ldrh	r3, [r7, #14]
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005560:	2108      	movs	r1, #8
 8005562:	481a      	ldr	r0, [pc, #104]	; (80055cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005564:	f005 ff4e 	bl	800b404 <HAL_GPIO_ReadPin>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf0c      	ite	eq
 800556e:	2301      	moveq	r3, #1
 8005570:	2300      	movne	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	f043 0302 	orr.w	r3, r3, #2
 800557e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005580:	2110      	movs	r1, #16
 8005582:	4812      	ldr	r0, [pc, #72]	; (80055cc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005584:	f005 ff3e 	bl	800b404 <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005598:	89fb      	ldrh	r3, [r7, #14]
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80055a0:	2180      	movs	r1, #128	; 0x80
 80055a2:	480a      	ldr	r0, [pc, #40]	; (80055cc <_ZN12RotarySwitch8getValueEv+0x98>)
 80055a4:	f005 ff2e 	bl	800b404 <HAL_GPIO_ReadPin>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	f043 0308 	orr.w	r3, r3, #8
 80055be:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80055c0:	89fb      	ldrh	r3, [r7, #14]

}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40020c00 	.word	0x40020c00

080055d0 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	709a      	strb	r2, [r3, #2]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	70da      	strb	r2, [r3, #3]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	809a      	strh	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	80da      	strh	r2, [r3, #6]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	721a      	strb	r2, [r3, #8]
{

}
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7a1b      	ldrb	r3, [r3, #8]
 8005618:	f083 0301 	eor.w	r3, r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80ea 	beq.w	80057f8 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 8005624:	4b76      	ldr	r3, [pc, #472]	; (8005800 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d032      	beq.n	8005698 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 8005632:	2104      	movs	r1, #4
 8005634:	4873      	ldr	r0, [pc, #460]	; (8005804 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005636:	f005 fee5 	bl	800b404 <HAL_GPIO_ReadPin>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <_ZN10SideSensor12updateStatusEv+0x48>
 8005640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005644:	4870      	ldr	r0, [pc, #448]	; (8005808 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005646:	f005 fedd 	bl	800b404 <HAL_GPIO_ReadPin>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <_ZN10SideSensor12updateStatusEv+0x48>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <_ZN10SideSensor12updateStatusEv+0x4a>
 8005654:	2300      	movs	r3, #0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 800565a:	4b6c      	ldr	r3, [pc, #432]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	3301      	adds	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	4b6a      	ldr	r3, [pc, #424]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e002      	b.n	800566e <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005668:	4b68      	ldr	r3, [pc, #416]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 800566a:	2200      	movs	r2, #0
 800566c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800566e:	4b67      	ldr	r3, [pc, #412]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	2b04      	cmp	r3, #4
 8005674:	d945      	bls.n	8005702 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 800568a:	4b5d      	ldr	r3, [pc, #372]	; (8005800 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800568c:	2201      	movs	r2, #1
 800568e:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005690:	4b5e      	ldr	r3, [pc, #376]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005692:	2200      	movs	r2, #0
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	e034      	b.n	8005702 <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005698:	4b59      	ldr	r3, [pc, #356]	; (8005800 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d030      	beq.n	8005702 <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 80056a0:	2104      	movs	r1, #4
 80056a2:	4858      	ldr	r0, [pc, #352]	; (8005804 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80056a4:	f005 feae 	bl	800b404 <HAL_GPIO_ReadPin>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d006      	beq.n	80056c6 <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 80056b8:	4b54      	ldr	r3, [pc, #336]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	4b52      	ldr	r3, [pc, #328]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	e002      	b.n	80056cc <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 80056c6:	4b51      	ldr	r3, [pc, #324]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80056cc:	4b4f      	ldr	r3, [pc, #316]	; (800580c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d916      	bls.n	8005702 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	f083 0301 	eor.w	r3, r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80056e8:	4b45      	ldr	r3, [pc, #276]	; (8005800 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	88db      	ldrh	r3, [r3, #6]
 80056f2:	3301      	adds	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	88da      	ldrh	r2, [r3, #6]
 80056fe:	4b44      	ldr	r3, [pc, #272]	; (8005810 <_ZN10SideSensor12updateStatusEv+0x204>)
 8005700:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005702:	4b44      	ldr	r3, [pc, #272]	; (8005814 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f083 0301 	eor.w	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d031      	beq.n	8005774 <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 8005710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005714:	483c      	ldr	r0, [pc, #240]	; (8005808 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005716:	f005 fe75 	bl	800b404 <HAL_GPIO_ReadPin>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d108      	bne.n	8005732 <_ZN10SideSensor12updateStatusEv+0x126>
 8005720:	2104      	movs	r1, #4
 8005722:	4838      	ldr	r0, [pc, #224]	; (8005804 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005724:	f005 fe6e 	bl	800b404 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <_ZN10SideSensor12updateStatusEv+0x126>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <_ZN10SideSensor12updateStatusEv+0x128>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 8005738:	4b37      	ldr	r3, [pc, #220]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	4b35      	ldr	r3, [pc, #212]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e002      	b.n	800574c <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 8005746:	4b34      	ldr	r3, [pc, #208]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005748:	2200      	movs	r2, #0
 800574a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800574c:	4b32      	ldr	r3, [pc, #200]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	2b04      	cmp	r3, #4
 8005752:	d90f      	bls.n	8005774 <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	f043 0302 	orr.w	r3, r3, #2
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <_ZN10SideSensor12updateStatusEv+0x208>)
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800576e:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005770:	2200      	movs	r2, #0
 8005772:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d031      	beq.n	80057e0 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 800577c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005780:	4821      	ldr	r0, [pc, #132]	; (8005808 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005782:	f005 fe3f 	bl	800b404 <HAL_GPIO_ReadPin>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 80057a4:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d916      	bls.n	80057e0 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	f083 0302 	eor.w	r3, r3, #2
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <_ZN10SideSensor12updateStatusEv+0x208>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	889b      	ldrh	r3, [r3, #4]
 80057d0:	3301      	adds	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	889a      	ldrh	r2, [r3, #4]
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <_ZN10SideSensor12updateStatusEv+0x210>)
 80057de:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x214>)
 80057e6:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	789a      	ldrb	r2, [r3, #2]
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x218>)
 80057ee:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	78da      	ldrb	r2, [r3, #3]
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <_ZN10SideSensor12updateStatusEv+0x21c>)
 80057f6:	701a      	strb	r2, [r3, #0]
	}

}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200002a4 	.word	0x200002a4
 8005804:	40021000 	.word	0x40021000
 8005808:	40020c00 	.word	0x40020c00
 800580c:	200002a8 	.word	0x200002a8
 8005810:	200002a2 	.word	0x200002a2
 8005814:	200002a5 	.word	0x200002a5
 8005818:	200002a6 	.word	0x200002a6
 800581c:	200002a0 	.word	0x200002a0
 8005820:	2000029c 	.word	0x2000029c
 8005824:	2000029e 	.word	0x2000029e
 8005828:	2000029f 	.word	0x2000029f

0800582c <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	789b      	ldrb	r3, [r3, #2]
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	88db      	ldrh	r3, [r3, #6]
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	80da      	strh	r2, [r3, #6]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	721a      	strb	r2, [r3, #8]
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	721a      	strb	r2, [r3, #8]
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	7a1b      	ldrb	r3, [r3, #8]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3308      	adds	r3, #8
 80058d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f010 f886 	bl	80159f0 <memset>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ea:	811a      	strh	r2, [r3, #8]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f2:	815a      	strh	r2, [r3, #10]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fa:	819a      	strh	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005902:	81da      	strh	r2, [r3, #14]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590a:	821a      	strh	r2, [r3, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005912:	825a      	strh	r2, [r3, #18]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	829a      	strh	r2, [r3, #20]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	82da      	strh	r2, [r3, #22]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	831a      	strh	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	835a      	strh	r2, [r3, #26]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	839a      	strh	r2, [r3, #28]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	83da      	strh	r2, [r3, #30]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	841a      	strh	r2, [r3, #32]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005944:	845a      	strh	r2, [r3, #34]	; 0x22
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	849a      	strh	r2, [r3, #36]	; 0x24
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005952:	84da      	strh	r2, [r3, #38]	; 0x26
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	851a      	strh	r2, [r3, #40]	; 0x28
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005960:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800596e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005976:	861a      	strh	r2, [r3, #48]	; 0x30
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	865a      	strh	r2, [r3, #50]	; 0x32
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	869a      	strh	r2, [r3, #52]	; 0x34
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598a:	86da      	strh	r2, [r3, #54]	; 0x36
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005992:	871a      	strh	r2, [r3, #56]	; 0x38
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	875a      	strh	r2, [r3, #58]	; 0x3a
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	879a      	strh	r2, [r3, #60]	; 0x3c
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a88:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a9a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aea:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b06:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b10:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b3c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b46:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b50:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b9e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ba8:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bba:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bcc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bee:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bf8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c12:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c24:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d042      	beq.n	8005cf0 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3204      	adds	r2, #4
 8005c7c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005c98:	3301      	adds	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005caa:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005cb2:	2bf9      	cmp	r3, #249	; 0xf9
 8005cb4:	d903      	bls.n	8005cbe <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	22fa      	movs	r2, #250	; 0xfa
 8005cba:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685c      	ldr	r4, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa fc55 	bl	8000578 <__aeabi_f2d>
 8005cce:	4605      	mov	r5, r0
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fa fc4d 	bl	8000578 <__aeabi_f2d>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	ec43 2b11 	vmov	d1, r2, r3
 8005ce6:	ec46 5b10 	vmov	d0, r5, r6
 8005cea:	4620      	mov	r0, r4
 8005cec:	f7ff f8f4 	bl	8004ed8 <_ZN5Motor8setRatioEdd>

	}

}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf8:	200002ac 	.word	0x200002ac

08005cfc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	60da      	str	r2, [r3, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	615a      	str	r2, [r3, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	619a      	str	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	61da      	str	r2, [r3, #28]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	621a      	str	r2, [r3, #32]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	0000      	movs	r0, r0
 8005d94:	0000      	movs	r0, r0
	...

08005d98 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	f107 020c 	add.w	r2, r7, #12
 8005da8:	f107 0110 	add.w	r1, r7, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fb fc67 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005db2:	ed97 7a04 	vldr	s14, [r7, #16]
 8005db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dc6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f7fa fbd4 	bl	8000578 <__aeabi_f2d>
 8005dd0:	a30e      	add	r3, pc, #56	; (adr r3, 8005e0c <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fc27 	bl	8000628 <__aeabi_dmul>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	4618      	mov	r0, r3
 8005de0:	4621      	mov	r1, r4
 8005de2:	f7fa ff19 	bl	8000c18 <__aeabi_d2f>
 8005de6:	4602      	mov	r2, r0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005df2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	ee07 3a90 	vmov	s15, r3
}
 8005dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200002b0 	.word	0x200002b0
 8005e0c:	1ab1d998 	.word	0x1ab1d998
 8005e10:	3f7830b5 	.word	0x3f7830b5
 8005e14:	00000000 	.word	0x00000000

08005e18 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	ed93 7a00 	vldr	s14, [r3]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e30:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005e3e:	4b48      	ldr	r3, [pc, #288]	; (8005f60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	edd3 7a04 	vldr	s15, [r3, #16]
 8005e54:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005e60:	4b3f      	ldr	r3, [pc, #252]	; (8005f60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fa fb87 	bl	8000578 <__aeabi_f2d>
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	ed93 7a06 	vldr	s14, [r3, #24]
 8005e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7c:	ee17 0a90 	vmov	r0, s15
 8005e80:	f7fa fb7a 	bl	8000578 <__aeabi_f2d>
 8005e84:	a334      	add	r3, pc, #208	; (adr r3, 8005f58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa fbcd 	bl	8000628 <__aeabi_dmul>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4620      	mov	r0, r4
 8005e94:	4629      	mov	r1, r5
 8005e96:	f7fa fa11 	bl	80002bc <__adddf3>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	f7fa feb9 	bl	8000c18 <__aeabi_d2f>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005eaa:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	ed93 7a05 	vldr	s14, [r3, #20]
 8005eb2:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005eb4:	edd3 7a00 	vldr	s15, [r3]
 8005eb8:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ebc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec4:	ee17 0a90 	vmov	r0, s15
 8005ec8:	f7fa fb56 	bl	8000578 <__aeabi_f2d>
 8005ecc:	a322      	add	r3, pc, #136	; (adr r3, 8005f58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f7fa fcd3 	bl	800087c <__aeabi_ddiv>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	460c      	mov	r4, r1
 8005eda:	4618      	mov	r0, r3
 8005edc:	4621      	mov	r1, r4
 8005ede:	f7fa fe9b 	bl	8000c18 <__aeabi_d2f>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005ee6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005eea:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005ef4:	edd3 7a00 	vldr	s15, [r3]
 8005ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005efc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f12:	ee17 0a90 	vmov	r0, s15
 8005f16:	f7fa fb2f 	bl	8000578 <__aeabi_f2d>
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	460e      	mov	r6, r1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005f24:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f2c:	ee17 0a90 	vmov	r0, s15
 8005f30:	f7fa fb22 	bl	8000578 <__aeabi_f2d>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	ec43 2b11 	vmov	d1, r2, r3
 8005f3c:	ec46 5b10 	vmov	d0, r5, r6
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7fe ffc9 	bl	8004ed8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005f46:	4a07      	ldr	r2, [pc, #28]	; (8005f64 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f54:	f3af 8000 	nop.w
 8005f58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005f5c:	3f50624d 	.word	0x3f50624d
 8005f60:	200002b8 	.word	0x200002b8
 8005f64:	200002b4 	.word	0x200002b4

08005f68 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f74:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	605a      	str	r2, [r3, #4]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f9c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005fc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005fc8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	615a      	str	r2, [r3, #20]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ff6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ffa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff feb7 	bl	8005d98 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff feef 	bl	8005e18 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006098 <_ZN12VelocityCtrl4stopEv+0x30>
 8006080:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006098 <_ZN12VelocityCtrl4stopEv+0x30>
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe ff27 	bl	8004ed8 <_ZN5Motor8setRatioEdd>

}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	f3af 8000 	nop.w
	...

080060a0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10e      	bne.n	80060d0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80060b2:	f001 fe11 	bl	8007cd8 <cppFlip100ns>

		tim7_timer++;
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060be:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d902      	bls.n	80060d0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80060da:	f001 fdcd 	bl	8007c78 <cppFlip1ms>

		tim6_timer++;
 80060de:	4b16      	ldr	r3, [pc, #88]	; (8006138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80060e6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80060e8:	4b13      	ldr	r3, [pc, #76]	; (8006138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a10      	ldr	r2, [pc, #64]	; (8006130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d902      	bls.n	80060f8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0f      	ldr	r2, [pc, #60]	; (800613c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10e      	bne.n	8006120 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8006102:	f001 fdf3 	bl	8007cec <cppFlip10ms>

		tim13_timer++;
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	4a0c      	ldr	r2, [pc, #48]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800610e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a06      	ldr	r2, [pc, #24]	; (8006130 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d902      	bls.n	8006120 <HAL_TIM_PeriodElapsedCallback+0x80>
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
	}

}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40001400 	.word	0x40001400
 800612c:	20044a5c 	.word	0x20044a5c
 8006130:	0001869f 	.word	0x0001869f
 8006134:	40001000 	.word	0x40001000
 8006138:	20044a18 	.word	0x20044a18
 800613c:	40001c00 	.word	0x40001c00
 8006140:	20044a60 	.word	0x20044a60

08006144 <init>:

void init()
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006148:	2201      	movs	r2, #1
 800614a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800614e:	4808      	ldr	r0, [pc, #32]	; (8006170 <init+0x2c>)
 8006150:	f005 f970 	bl	800b434 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8006154:	4807      	ldr	r0, [pc, #28]	; (8006174 <init+0x30>)
 8006156:	f009 f838 	bl	800f1ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800615a:	4807      	ldr	r0, [pc, #28]	; (8006178 <init+0x34>)
 800615c:	f009 f835 	bl	800f1ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006160:	4806      	ldr	r0, [pc, #24]	; (800617c <init+0x38>)
 8006162:	f009 f832 	bl	800f1ca <HAL_TIM_Base_Start_IT>

	cppInit();
 8006166:	f001 fce3 	bl	8007b30 <cppInit>

	//path_following_initialize();

}
 800616a:	bf00      	nop
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	20044b44 	.word	0x20044b44
 8006178:	20044ce8 	.word	0x20044ce8
 800617c:	20044a64 	.word	0x20044a64

08006180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006184:	f003 fe4e 	bl	8009e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006188:	f000 f82a 	bl	80061e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800618c:	f000 fdbc 	bl	8006d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8006190:	f000 fd8a 	bl	8006ca8 <MX_DMA_Init>
  MX_I2C2_Init();
 8006194:	f000 f9e8 	bl	8006568 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006198:	f000 fa14 	bl	80065c4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800619c:	f000 fa32 	bl	8006604 <MX_SPI2_Init>
  MX_TIM1_Init();
 80061a0:	f000 fa66 	bl	8006670 <MX_TIM1_Init>
  MX_TIM4_Init();
 80061a4:	f000 fb70 	bl	8006888 <MX_TIM4_Init>
  MX_TIM8_Init();
 80061a8:	f000 fc3c 	bl	8006a24 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80061ac:	f000 fd52 	bl	8006c54 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80061b0:	f00a ffde 	bl	8011170 <MX_FATFS_Init>
  MX_TIM6_Init();
 80061b4:	f000 fbcc 	bl	8006950 <MX_TIM6_Init>
  MX_I2C1_Init();
 80061b8:	f000 f9a8 	bl	800650c <MX_I2C1_Init>
  MX_TIM3_Init();
 80061bc:	f000 fb00 	bl	80067c0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80061c0:	f000 fc88 	bl	8006ad4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80061c4:	f000 fcd4 	bl	8006b70 <MX_TIM11_Init>
  MX_ADC2_Init();
 80061c8:	f000 f898 	bl	80062fc <MX_ADC2_Init>
  MX_TIM7_Init();
 80061cc:	f000 fbf6 	bl	80069bc <MX_TIM7_Init>
  MX_TIM13_Init();
 80061d0:	f000 fd1c 	bl	8006c0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80061d4:	f7ff ffb6 	bl	8006144 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80061d8:	f001 fdb6 	bl	8007d48 <cppLoop>
 80061dc:	e7fc      	b.n	80061d8 <main+0x58>
	...

080061e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b0a4      	sub	sp, #144	; 0x90
 80061e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80061ea:	2234      	movs	r2, #52	; 0x34
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f00f fbfe 	bl	80159f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006204:	f107 030c 	add.w	r3, r7, #12
 8006208:	223c      	movs	r2, #60	; 0x3c
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f00f fbef 	bl	80159f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <SystemClock_Config+0x114>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	4a36      	ldr	r2, [pc, #216]	; (80062f4 <SystemClock_Config+0x114>)
 800621c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006220:	6413      	str	r3, [r2, #64]	; 0x40
 8006222:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <SystemClock_Config+0x114>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800622e:	2300      	movs	r3, #0
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <SystemClock_Config+0x118>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a30      	ldr	r2, [pc, #192]	; (80062f8 <SystemClock_Config+0x118>)
 8006238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <SystemClock_Config+0x118>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006246:	607b      	str	r3, [r7, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800624a:	2301      	movs	r3, #1
 800624c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800624e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006252:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006254:	2302      	movs	r3, #2
 8006256:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800625c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800625e:	2308      	movs	r3, #8
 8006260:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006262:	23b4      	movs	r3, #180	; 0xb4
 8006264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006268:	2302      	movs	r3, #2
 800626a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800626e:	2308      	movs	r3, #8
 8006270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006274:	2302      	movs	r3, #2
 8006276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800627a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800627e:	4618      	mov	r0, r3
 8006280:	f006 fcfa 	bl	800cc78 <HAL_RCC_OscConfig>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800628a:	f000 fe7f 	bl	8006f8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800628e:	f006 f875 	bl	800c37c <HAL_PWREx_EnableOverDrive>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006298:	f000 fe78 	bl	8006f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800629c:	230f      	movs	r3, #15
 800629e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062a0:	2302      	movs	r3, #2
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062a4:	2300      	movs	r3, #0
 80062a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80062a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80062ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80062b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062b8:	2105      	movs	r1, #5
 80062ba:	4618      	mov	r0, r3
 80062bc:	f006 f8ae 	bl	800c41c <HAL_RCC_ClockConfig>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <SystemClock_Config+0xea>
  {
    Error_Handler();
 80062c6:	f000 fe61 	bl	8006f8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80062ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80062ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80062d0:	2300      	movs	r3, #0
 80062d2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80062d4:	2300      	movs	r3, #0
 80062d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062d8:	f107 030c 	add.w	r3, r7, #12
 80062dc:	4618      	mov	r0, r3
 80062de:	f006 fa8d 	bl	800c7fc <HAL_RCCEx_PeriphCLKConfig>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80062e8:	f000 fe50 	bl	8006f8c <Error_Handler>
  }
}
 80062ec:	bf00      	nop
 80062ee:	3790      	adds	r7, #144	; 0x90
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40023800 	.word	0x40023800
 80062f8:	40007000 	.word	0x40007000

080062fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006302:	463b      	mov	r3, r7
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800630e:	4b7c      	ldr	r3, [pc, #496]	; (8006500 <MX_ADC2_Init+0x204>)
 8006310:	4a7c      	ldr	r2, [pc, #496]	; (8006504 <MX_ADC2_Init+0x208>)
 8006312:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006314:	4b7a      	ldr	r3, [pc, #488]	; (8006500 <MX_ADC2_Init+0x204>)
 8006316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800631a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800631c:	4b78      	ldr	r3, [pc, #480]	; (8006500 <MX_ADC2_Init+0x204>)
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006322:	4b77      	ldr	r3, [pc, #476]	; (8006500 <MX_ADC2_Init+0x204>)
 8006324:	2201      	movs	r2, #1
 8006326:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006328:	4b75      	ldr	r3, [pc, #468]	; (8006500 <MX_ADC2_Init+0x204>)
 800632a:	2201      	movs	r2, #1
 800632c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800632e:	4b74      	ldr	r3, [pc, #464]	; (8006500 <MX_ADC2_Init+0x204>)
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006336:	4b72      	ldr	r3, [pc, #456]	; (8006500 <MX_ADC2_Init+0x204>)
 8006338:	2200      	movs	r2, #0
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800633c:	4b70      	ldr	r3, [pc, #448]	; (8006500 <MX_ADC2_Init+0x204>)
 800633e:	4a72      	ldr	r2, [pc, #456]	; (8006508 <MX_ADC2_Init+0x20c>)
 8006340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006342:	4b6f      	ldr	r3, [pc, #444]	; (8006500 <MX_ADC2_Init+0x204>)
 8006344:	2200      	movs	r2, #0
 8006346:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006348:	4b6d      	ldr	r3, [pc, #436]	; (8006500 <MX_ADC2_Init+0x204>)
 800634a:	220e      	movs	r2, #14
 800634c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800634e:	4b6c      	ldr	r3, [pc, #432]	; (8006500 <MX_ADC2_Init+0x204>)
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006356:	4b6a      	ldr	r3, [pc, #424]	; (8006500 <MX_ADC2_Init+0x204>)
 8006358:	2201      	movs	r2, #1
 800635a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800635c:	4868      	ldr	r0, [pc, #416]	; (8006500 <MX_ADC2_Init+0x204>)
 800635e:	f003 fdf5 	bl	8009f4c <HAL_ADC_Init>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006368:	f000 fe10 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800636c:	230a      	movs	r3, #10
 800636e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006370:	2301      	movs	r3, #1
 8006372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006374:	2306      	movs	r3, #6
 8006376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006378:	463b      	mov	r3, r7
 800637a:	4619      	mov	r1, r3
 800637c:	4860      	ldr	r0, [pc, #384]	; (8006500 <MX_ADC2_Init+0x204>)
 800637e:	f003 ff39 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006388:	f000 fe00 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800638c:	230b      	movs	r3, #11
 800638e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006390:	2302      	movs	r3, #2
 8006392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006394:	463b      	mov	r3, r7
 8006396:	4619      	mov	r1, r3
 8006398:	4859      	ldr	r0, [pc, #356]	; (8006500 <MX_ADC2_Init+0x204>)
 800639a:	f003 ff2b 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80063a4:	f000 fdf2 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80063a8:	230c      	movs	r3, #12
 80063aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80063ac:	2303      	movs	r3, #3
 80063ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063b0:	463b      	mov	r3, r7
 80063b2:	4619      	mov	r1, r3
 80063b4:	4852      	ldr	r0, [pc, #328]	; (8006500 <MX_ADC2_Init+0x204>)
 80063b6:	f003 ff1d 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80063c0:	f000 fde4 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80063c4:	230d      	movs	r3, #13
 80063c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80063c8:	2304      	movs	r3, #4
 80063ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063cc:	463b      	mov	r3, r7
 80063ce:	4619      	mov	r1, r3
 80063d0:	484b      	ldr	r0, [pc, #300]	; (8006500 <MX_ADC2_Init+0x204>)
 80063d2:	f003 ff0f 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80063dc:	f000 fdd6 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80063e4:	2305      	movs	r3, #5
 80063e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063e8:	463b      	mov	r3, r7
 80063ea:	4619      	mov	r1, r3
 80063ec:	4844      	ldr	r0, [pc, #272]	; (8006500 <MX_ADC2_Init+0x204>)
 80063ee:	f003 ff01 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80063f8:	f000 fdc8 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80063fc:	2301      	movs	r3, #1
 80063fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006400:	2306      	movs	r3, #6
 8006402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006404:	463b      	mov	r3, r7
 8006406:	4619      	mov	r1, r3
 8006408:	483d      	ldr	r0, [pc, #244]	; (8006500 <MX_ADC2_Init+0x204>)
 800640a:	f003 fef3 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006414:	f000 fdba 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006418:	2302      	movs	r3, #2
 800641a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800641c:	2307      	movs	r3, #7
 800641e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006420:	463b      	mov	r3, r7
 8006422:	4619      	mov	r1, r3
 8006424:	4836      	ldr	r0, [pc, #216]	; (8006500 <MX_ADC2_Init+0x204>)
 8006426:	f003 fee5 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006430:	f000 fdac 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006434:	2303      	movs	r3, #3
 8006436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006438:	2308      	movs	r3, #8
 800643a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800643c:	463b      	mov	r3, r7
 800643e:	4619      	mov	r1, r3
 8006440:	482f      	ldr	r0, [pc, #188]	; (8006500 <MX_ADC2_Init+0x204>)
 8006442:	f003 fed7 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800644c:	f000 fd9e 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006450:	2304      	movs	r3, #4
 8006452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006454:	2309      	movs	r3, #9
 8006456:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006458:	463b      	mov	r3, r7
 800645a:	4619      	mov	r1, r3
 800645c:	4828      	ldr	r0, [pc, #160]	; (8006500 <MX_ADC2_Init+0x204>)
 800645e:	f003 fec9 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006468:	f000 fd90 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800646c:	2305      	movs	r3, #5
 800646e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006470:	230a      	movs	r3, #10
 8006472:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006474:	463b      	mov	r3, r7
 8006476:	4619      	mov	r1, r3
 8006478:	4821      	ldr	r0, [pc, #132]	; (8006500 <MX_ADC2_Init+0x204>)
 800647a:	f003 febb 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006484:	f000 fd82 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006488:	2306      	movs	r3, #6
 800648a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800648c:	230b      	movs	r3, #11
 800648e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006490:	463b      	mov	r3, r7
 8006492:	4619      	mov	r1, r3
 8006494:	481a      	ldr	r0, [pc, #104]	; (8006500 <MX_ADC2_Init+0x204>)
 8006496:	f003 fead 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80064a0:	f000 fd74 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80064a4:	2307      	movs	r3, #7
 80064a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80064a8:	230c      	movs	r3, #12
 80064aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064ac:	463b      	mov	r3, r7
 80064ae:	4619      	mov	r1, r3
 80064b0:	4813      	ldr	r0, [pc, #76]	; (8006500 <MX_ADC2_Init+0x204>)
 80064b2:	f003 fe9f 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80064bc:	f000 fd66 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80064c0:	2308      	movs	r3, #8
 80064c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80064c4:	230d      	movs	r3, #13
 80064c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064c8:	463b      	mov	r3, r7
 80064ca:	4619      	mov	r1, r3
 80064cc:	480c      	ldr	r0, [pc, #48]	; (8006500 <MX_ADC2_Init+0x204>)
 80064ce:	f003 fe91 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80064d8:	f000 fd58 	bl	8006f8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80064dc:	2309      	movs	r3, #9
 80064de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80064e0:	230e      	movs	r3, #14
 80064e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064e4:	463b      	mov	r3, r7
 80064e6:	4619      	mov	r1, r3
 80064e8:	4805      	ldr	r0, [pc, #20]	; (8006500 <MX_ADC2_Init+0x204>)
 80064ea:	f003 fe83 	bl	800a1f4 <HAL_ADC_ConfigChannel>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80064f4:	f000 fd4a 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	200448e8 	.word	0x200448e8
 8006504:	40012100 	.word	0x40012100
 8006508:	0f000001 	.word	0x0f000001

0800650c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006510:	4b12      	ldr	r3, [pc, #72]	; (800655c <MX_I2C1_Init+0x50>)
 8006512:	4a13      	ldr	r2, [pc, #76]	; (8006560 <MX_I2C1_Init+0x54>)
 8006514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <MX_I2C1_Init+0x50>)
 8006518:	4a12      	ldr	r2, [pc, #72]	; (8006564 <MX_I2C1_Init+0x58>)
 800651a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <MX_I2C1_Init+0x50>)
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006522:	4b0e      	ldr	r3, [pc, #56]	; (800655c <MX_I2C1_Init+0x50>)
 8006524:	2200      	movs	r2, #0
 8006526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <MX_I2C1_Init+0x50>)
 800652a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800652e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <MX_I2C1_Init+0x50>)
 8006532:	2200      	movs	r2, #0
 8006534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <MX_I2C1_Init+0x50>)
 8006538:	2200      	movs	r2, #0
 800653a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800653c:	4b07      	ldr	r3, [pc, #28]	; (800655c <MX_I2C1_Init+0x50>)
 800653e:	2200      	movs	r2, #0
 8006540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006542:	4b06      	ldr	r3, [pc, #24]	; (800655c <MX_I2C1_Init+0x50>)
 8006544:	2280      	movs	r2, #128	; 0x80
 8006546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006548:	4804      	ldr	r0, [pc, #16]	; (800655c <MX_I2C1_Init+0x50>)
 800654a:	f004 ff8d 	bl	800b468 <HAL_I2C_Init>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006554:	f000 fd1a 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006558:	bf00      	nop
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20044930 	.word	0x20044930
 8006560:	40005400 	.word	0x40005400
 8006564:	000186a0 	.word	0x000186a0

08006568 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <MX_I2C2_Init+0x50>)
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <MX_I2C2_Init+0x54>)
 8006570:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <MX_I2C2_Init+0x50>)
 8006574:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <MX_I2C2_Init+0x58>)
 8006576:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <MX_I2C2_Init+0x50>)
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800657e:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <MX_I2C2_Init+0x50>)
 8006580:	2200      	movs	r2, #0
 8006582:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <MX_I2C2_Init+0x50>)
 8006586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800658a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <MX_I2C2_Init+0x50>)
 800658e:	2200      	movs	r2, #0
 8006590:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <MX_I2C2_Init+0x50>)
 8006594:	2200      	movs	r2, #0
 8006596:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <MX_I2C2_Init+0x50>)
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <MX_I2C2_Init+0x50>)
 80065a0:	2280      	movs	r2, #128	; 0x80
 80065a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80065a4:	4804      	ldr	r0, [pc, #16]	; (80065b8 <MX_I2C2_Init+0x50>)
 80065a6:	f004 ff5f 	bl	800b468 <HAL_I2C_Init>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80065b0:	f000 fcec 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80065b4:	bf00      	nop
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200449c4 	.word	0x200449c4
 80065bc:	40005800 	.word	0x40005800
 80065c0:	000186a0 	.word	0x000186a0

080065c4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065ca:	4a0d      	ldr	r2, [pc, #52]	; (8006600 <MX_SDIO_SD_Init+0x3c>)
 80065cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80065ce:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80065da:	4b08      	ldr	r3, [pc, #32]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065dc:	2200      	movs	r2, #0
 80065de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <MX_SDIO_SD_Init+0x38>)
 80065ee:	2202      	movs	r2, #2
 80065f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20044bc4 	.word	0x20044bc4
 8006600:	40012c00 	.word	0x40012c00

08006604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006608:	4b17      	ldr	r3, [pc, #92]	; (8006668 <MX_SPI2_Init+0x64>)
 800660a:	4a18      	ldr	r2, [pc, #96]	; (800666c <MX_SPI2_Init+0x68>)
 800660c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <MX_SPI2_Init+0x64>)
 8006610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <MX_SPI2_Init+0x64>)
 8006618:	2200      	movs	r2, #0
 800661a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800661c:	4b12      	ldr	r3, [pc, #72]	; (8006668 <MX_SPI2_Init+0x64>)
 800661e:	2200      	movs	r2, #0
 8006620:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006622:	4b11      	ldr	r3, [pc, #68]	; (8006668 <MX_SPI2_Init+0x64>)
 8006624:	2202      	movs	r2, #2
 8006626:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006628:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <MX_SPI2_Init+0x64>)
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <MX_SPI2_Init+0x64>)
 8006630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006634:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <MX_SPI2_Init+0x64>)
 8006638:	2228      	movs	r2, #40	; 0x28
 800663a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <MX_SPI2_Init+0x64>)
 800663e:	2200      	movs	r2, #0
 8006640:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <MX_SPI2_Init+0x64>)
 8006644:	2200      	movs	r2, #0
 8006646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006648:	4b07      	ldr	r3, [pc, #28]	; (8006668 <MX_SPI2_Init+0x64>)
 800664a:	2200      	movs	r2, #0
 800664c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <MX_SPI2_Init+0x64>)
 8006650:	220a      	movs	r2, #10
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006654:	4804      	ldr	r0, [pc, #16]	; (8006668 <MX_SPI2_Init+0x64>)
 8006656:	f008 f839 	bl	800e6cc <HAL_SPI_Init>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006660:	f000 fc94 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006664:	bf00      	nop
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20044810 	.word	0x20044810
 800666c:	40003800 	.word	0x40003800

08006670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b09a      	sub	sp, #104	; 0x68
 8006674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006676:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800667a:	2224      	movs	r2, #36	; 0x24
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f00f f9b6 	bl	80159f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800668e:	f107 0320 	add.w	r3, r7, #32
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	609a      	str	r2, [r3, #8]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	611a      	str	r2, [r3, #16]
 800669e:	615a      	str	r2, [r3, #20]
 80066a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80066a2:	463b      	mov	r3, r7
 80066a4:	2220      	movs	r2, #32
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f00f f9a1 	bl	80159f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80066ae:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066b0:	4a42      	ldr	r2, [pc, #264]	; (80067bc <MX_TIM1_Init+0x14c>)
 80066b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80066b4:	4b40      	ldr	r3, [pc, #256]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ba:	4b3f      	ldr	r3, [pc, #252]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066bc:	2200      	movs	r2, #0
 80066be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80066c0:	4b3d      	ldr	r3, [pc, #244]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066c8:	4b3b      	ldr	r3, [pc, #236]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80066ce:	4b3a      	ldr	r3, [pc, #232]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066d4:	4b38      	ldr	r3, [pc, #224]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80066da:	4837      	ldr	r0, [pc, #220]	; (80067b8 <MX_TIM1_Init+0x148>)
 80066dc:	f008 fd99 	bl	800f212 <HAL_TIM_PWM_Init>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80066e6:	f000 fc51 	bl	8006f8c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80066ea:	2303      	movs	r3, #3
 80066ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80066ee:	2300      	movs	r3, #0
 80066f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80066f2:	2301      	movs	r3, #1
 80066f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80066f6:	2300      	movs	r3, #0
 80066f8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80066fe:	2300      	movs	r3, #0
 8006700:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006702:	2301      	movs	r3, #1
 8006704:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006706:	2300      	movs	r3, #0
 8006708:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800670e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006712:	4619      	mov	r1, r3
 8006714:	4828      	ldr	r0, [pc, #160]	; (80067b8 <MX_TIM1_Init+0x148>)
 8006716:	f008 fde5 	bl	800f2e4 <HAL_TIM_Encoder_Init>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006720:	f000 fc34 	bl	8006f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006724:	2300      	movs	r3, #0
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006728:	2300      	movs	r3, #0
 800672a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800672c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006730:	4619      	mov	r1, r3
 8006732:	4821      	ldr	r0, [pc, #132]	; (80067b8 <MX_TIM1_Init+0x148>)
 8006734:	f009 fb0c 	bl	800fd50 <HAL_TIMEx_MasterConfigSynchronization>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800673e:	f000 fc25 	bl	8006f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006742:	2360      	movs	r3, #96	; 0x60
 8006744:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800674a:	2300      	movs	r3, #0
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800674e:	2300      	movs	r3, #0
 8006750:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006752:	2300      	movs	r3, #0
 8006754:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800675a:	2300      	movs	r3, #0
 800675c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800675e:	f107 0320 	add.w	r3, r7, #32
 8006762:	2208      	movs	r2, #8
 8006764:	4619      	mov	r1, r3
 8006766:	4814      	ldr	r0, [pc, #80]	; (80067b8 <MX_TIM1_Init+0x148>)
 8006768:	f008 ff8e 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006772:	f000 fc0b 	bl	8006f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006776:	2300      	movs	r3, #0
 8006778:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800677a:	2300      	movs	r3, #0
 800677c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800677e:	2300      	movs	r3, #0
 8006780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800678a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800678e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006794:	463b      	mov	r3, r7
 8006796:	4619      	mov	r1, r3
 8006798:	4807      	ldr	r0, [pc, #28]	; (80067b8 <MX_TIM1_Init+0x148>)
 800679a:	f009 fb55 	bl	800fe48 <HAL_TIMEx_ConfigBreakDeadTime>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80067a4:	f000 fbf2 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80067a8:	4803      	ldr	r0, [pc, #12]	; (80067b8 <MX_TIM1_Init+0x148>)
 80067aa:	f000 ffdf 	bl	800776c <HAL_TIM_MspPostInit>

}
 80067ae:	bf00      	nop
 80067b0:	3768      	adds	r7, #104	; 0x68
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20044b84 	.word	0x20044b84
 80067bc:	40010000 	.word	0x40010000

080067c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	; 0x28
 80067c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067c6:	f107 0320 	add.w	r3, r7, #32
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80067d0:	1d3b      	adds	r3, r7, #4
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	609a      	str	r2, [r3, #8]
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	611a      	str	r2, [r3, #16]
 80067de:	615a      	str	r2, [r3, #20]
 80067e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80067e2:	4b27      	ldr	r3, [pc, #156]	; (8006880 <MX_TIM3_Init+0xc0>)
 80067e4:	4a27      	ldr	r2, [pc, #156]	; (8006884 <MX_TIM3_Init+0xc4>)
 80067e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <MX_TIM3_Init+0xc0>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <MX_TIM3_Init+0xc0>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80067f4:	4b22      	ldr	r3, [pc, #136]	; (8006880 <MX_TIM3_Init+0xc0>)
 80067f6:	f241 1293 	movw	r2, #4499	; 0x1193
 80067fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067fc:	4b20      	ldr	r3, [pc, #128]	; (8006880 <MX_TIM3_Init+0xc0>)
 80067fe:	2200      	movs	r2, #0
 8006800:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <MX_TIM3_Init+0xc0>)
 8006804:	2200      	movs	r2, #0
 8006806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006808:	481d      	ldr	r0, [pc, #116]	; (8006880 <MX_TIM3_Init+0xc0>)
 800680a:	f008 fd02 	bl	800f212 <HAL_TIM_PWM_Init>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006814:	f000 fbba 	bl	8006f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006818:	2300      	movs	r3, #0
 800681a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006820:	f107 0320 	add.w	r3, r7, #32
 8006824:	4619      	mov	r1, r3
 8006826:	4816      	ldr	r0, [pc, #88]	; (8006880 <MX_TIM3_Init+0xc0>)
 8006828:	f009 fa92 	bl	800fd50 <HAL_TIMEx_MasterConfigSynchronization>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006832:	f000 fbab 	bl	8006f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006836:	2360      	movs	r3, #96	; 0x60
 8006838:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006846:	1d3b      	adds	r3, r7, #4
 8006848:	2200      	movs	r2, #0
 800684a:	4619      	mov	r1, r3
 800684c:	480c      	ldr	r0, [pc, #48]	; (8006880 <MX_TIM3_Init+0xc0>)
 800684e:	f008 ff1b 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006858:	f000 fb98 	bl	8006f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800685c:	1d3b      	adds	r3, r7, #4
 800685e:	2204      	movs	r2, #4
 8006860:	4619      	mov	r1, r3
 8006862:	4807      	ldr	r0, [pc, #28]	; (8006880 <MX_TIM3_Init+0xc0>)
 8006864:	f008 ff10 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800686e:	f000 fb8d 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006872:	4803      	ldr	r0, [pc, #12]	; (8006880 <MX_TIM3_Init+0xc0>)
 8006874:	f000 ff7a 	bl	800776c <HAL_TIM_MspPostInit>

}
 8006878:	bf00      	nop
 800687a:	3728      	adds	r7, #40	; 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20044a1c 	.word	0x20044a1c
 8006884:	40000400 	.word	0x40000400

08006888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800688e:	f107 0320 	add.w	r3, r7, #32
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006898:	1d3b      	adds	r3, r7, #4
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	609a      	str	r2, [r3, #8]
 80068a2:	60da      	str	r2, [r3, #12]
 80068a4:	611a      	str	r2, [r3, #16]
 80068a6:	615a      	str	r2, [r3, #20]
 80068a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80068aa:	4b27      	ldr	r3, [pc, #156]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068ac:	4a27      	ldr	r2, [pc, #156]	; (800694c <MX_TIM4_Init+0xc4>)
 80068ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80068b0:	4b25      	ldr	r3, [pc, #148]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80068bc:	4b22      	ldr	r3, [pc, #136]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068be:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80068c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068c4:	4b20      	ldr	r3, [pc, #128]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068ca:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80068d0:	481d      	ldr	r0, [pc, #116]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068d2:	f008 fc9e 	bl	800f212 <HAL_TIM_PWM_Init>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80068dc:	f000 fb56 	bl	8006f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068e0:	2300      	movs	r3, #0
 80068e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80068e8:	f107 0320 	add.w	r3, r7, #32
 80068ec:	4619      	mov	r1, r3
 80068ee:	4816      	ldr	r0, [pc, #88]	; (8006948 <MX_TIM4_Init+0xc0>)
 80068f0:	f009 fa2e 	bl	800fd50 <HAL_TIMEx_MasterConfigSynchronization>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80068fa:	f000 fb47 	bl	8006f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068fe:	2360      	movs	r3, #96	; 0x60
 8006900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	2208      	movs	r2, #8
 8006912:	4619      	mov	r1, r3
 8006914:	480c      	ldr	r0, [pc, #48]	; (8006948 <MX_TIM4_Init+0xc0>)
 8006916:	f008 feb7 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006920:	f000 fb34 	bl	8006f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	220c      	movs	r2, #12
 8006928:	4619      	mov	r1, r3
 800692a:	4807      	ldr	r0, [pc, #28]	; (8006948 <MX_TIM4_Init+0xc0>)
 800692c:	f008 feac 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006936:	f000 fb29 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800693a:	4803      	ldr	r0, [pc, #12]	; (8006948 <MX_TIM4_Init+0xc0>)
 800693c:	f000 ff16 	bl	800776c <HAL_TIM_MspPostInit>

}
 8006940:	bf00      	nop
 8006942:	3728      	adds	r7, #40	; 0x28
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200448a8 	.word	0x200448a8
 800694c:	40000800 	.word	0x40000800

08006950 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006956:	463b      	mov	r3, r7
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <MX_TIM6_Init+0x64>)
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <MX_TIM6_Init+0x68>)
 8006962:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <MX_TIM6_Init+0x64>)
 8006966:	2259      	movs	r2, #89	; 0x59
 8006968:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <MX_TIM6_Init+0x64>)
 800696c:	2200      	movs	r2, #0
 800696e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006970:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <MX_TIM6_Init+0x64>)
 8006972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006976:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006978:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <MX_TIM6_Init+0x64>)
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800697e:	480d      	ldr	r0, [pc, #52]	; (80069b4 <MX_TIM6_Init+0x64>)
 8006980:	f008 fbf8 	bl	800f174 <HAL_TIM_Base_Init>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800698a:	f000 faff 	bl	8006f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006996:	463b      	mov	r3, r7
 8006998:	4619      	mov	r1, r3
 800699a:	4806      	ldr	r0, [pc, #24]	; (80069b4 <MX_TIM6_Init+0x64>)
 800699c:	f009 f9d8 	bl	800fd50 <HAL_TIMEx_MasterConfigSynchronization>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80069a6:	f000 faf1 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20044b44 	.word	0x20044b44
 80069b8:	40001000 	.word	0x40001000

080069bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069c2:	463b      	mov	r3, r7
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <MX_TIM7_Init+0x60>)
 80069cc:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <MX_TIM7_Init+0x64>)
 80069ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80069d0:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <MX_TIM7_Init+0x60>)
 80069d2:	22b3      	movs	r2, #179	; 0xb3
 80069d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <MX_TIM7_Init+0x60>)
 80069d8:	2200      	movs	r2, #0
 80069da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <MX_TIM7_Init+0x60>)
 80069de:	2231      	movs	r2, #49	; 0x31
 80069e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <MX_TIM7_Init+0x60>)
 80069e4:	2280      	movs	r2, #128	; 0x80
 80069e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80069e8:	480c      	ldr	r0, [pc, #48]	; (8006a1c <MX_TIM7_Init+0x60>)
 80069ea:	f008 fbc3 	bl	800f174 <HAL_TIM_Base_Init>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80069f4:	f000 faca 	bl	8006f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069f8:	2300      	movs	r3, #0
 80069fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006a00:	463b      	mov	r3, r7
 8006a02:	4619      	mov	r1, r3
 8006a04:	4805      	ldr	r0, [pc, #20]	; (8006a1c <MX_TIM7_Init+0x60>)
 8006a06:	f009 f9a3 	bl	800fd50 <HAL_TIMEx_MasterConfigSynchronization>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006a10:	f000 fabc 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20044ce8 	.word	0x20044ce8
 8006a20:	40001400 	.word	0x40001400

08006a24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006a2a:	f107 030c 	add.w	r3, r7, #12
 8006a2e:	2224      	movs	r2, #36	; 0x24
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f00e ffdc 	bl	80159f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a38:	1d3b      	adds	r3, r7, #4
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006a40:	4b22      	ldr	r3, [pc, #136]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a42:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <MX_TIM8_Init+0xac>)
 8006a44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006a46:	4b21      	ldr	r3, [pc, #132]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006a4c:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a4e:	2210      	movs	r2, #16
 8006a50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006a52:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a5a:	4b1c      	ldr	r3, [pc, #112]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006a60:	4b1a      	ldr	r3, [pc, #104]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a66:	4b19      	ldr	r3, [pc, #100]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a80:	2300      	movs	r3, #0
 8006a82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a84:	2301      	movs	r3, #1
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	4619      	mov	r1, r3
 8006a96:	480d      	ldr	r0, [pc, #52]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006a98:	f008 fc24 	bl	800f2e4 <HAL_TIM_Encoder_Init>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006aa2:	f000 fa73 	bl	8006f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006aae:	1d3b      	adds	r3, r7, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4806      	ldr	r0, [pc, #24]	; (8006acc <MX_TIM8_Init+0xa8>)
 8006ab4:	f009 f94c 	bl	800fd50 <HAL_TIMEx_MasterConfigSynchronization>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006abe:	f000 fa65 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006ac2:	bf00      	nop
 8006ac4:	3730      	adds	r7, #48	; 0x30
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20044868 	.word	0x20044868
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	605a      	str	r2, [r3, #4]
 8006ae2:	609a      	str	r2, [r3, #8]
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	611a      	str	r2, [r3, #16]
 8006ae8:	615a      	str	r2, [r3, #20]
 8006aea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006aec:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006aee:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <MX_TIM10_Init+0x98>)
 8006af0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006afe:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b00:	f242 3227 	movw	r2, #8999	; 0x2327
 8006b04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b0c:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006b12:	4815      	ldr	r0, [pc, #84]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b14:	f008 fb2e 	bl	800f174 <HAL_TIM_Base_Init>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006b1e:	f000 fa35 	bl	8006f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006b22:	4811      	ldr	r0, [pc, #68]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b24:	f008 fb75 	bl	800f212 <HAL_TIM_PWM_Init>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006b2e:	f000 fa2d 	bl	8006f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b32:	2360      	movs	r3, #96	; 0x60
 8006b34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b42:	1d3b      	adds	r3, r7, #4
 8006b44:	2200      	movs	r2, #0
 8006b46:	4619      	mov	r1, r3
 8006b48:	4807      	ldr	r0, [pc, #28]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b4a:	f008 fd9d 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006b54:	f000 fa1a 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006b58:	4803      	ldr	r0, [pc, #12]	; (8006b68 <MX_TIM10_Init+0x94>)
 8006b5a:	f000 fe07 	bl	800776c <HAL_TIM_MspPostInit>

}
 8006b5e:	bf00      	nop
 8006b60:	3720      	adds	r7, #32
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20044984 	.word	0x20044984
 8006b6c:	40014400 	.word	0x40014400

08006b70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	611a      	str	r2, [r3, #16]
 8006b84:	615a      	str	r2, [r3, #20]
 8006b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006b8a:	4a1f      	ldr	r2, [pc, #124]	; (8006c08 <MX_TIM11_Init+0x98>)
 8006b8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006b8e:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006b9a:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006b9c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006ba0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ba2:	4b18      	ldr	r3, [pc, #96]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ba8:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006bae:	4815      	ldr	r0, [pc, #84]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006bb0:	f008 fae0 	bl	800f174 <HAL_TIM_Base_Init>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006bba:	f000 f9e7 	bl	8006f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006bbe:	4811      	ldr	r0, [pc, #68]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006bc0:	f008 fb27 	bl	800f212 <HAL_TIM_PWM_Init>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006bca:	f000 f9df 	bl	8006f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bce:	2360      	movs	r3, #96	; 0x60
 8006bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006bde:	1d3b      	adds	r3, r7, #4
 8006be0:	2200      	movs	r2, #0
 8006be2:	4619      	mov	r1, r3
 8006be4:	4807      	ldr	r0, [pc, #28]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006be6:	f008 fd4f 	bl	800f688 <HAL_TIM_PWM_ConfigChannel>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006bf0:	f000 f9cc 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006bf4:	4803      	ldr	r0, [pc, #12]	; (8006c04 <MX_TIM11_Init+0x94>)
 8006bf6:	f000 fdb9 	bl	800776c <HAL_TIM_MspPostInit>

}
 8006bfa:	bf00      	nop
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20044aa4 	.word	0x20044aa4
 8006c08:	40014800 	.word	0x40014800

08006c0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c12:	4a0f      	ldr	r2, [pc, #60]	; (8006c50 <MX_TIM13_Init+0x44>)
 8006c14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c18:	2259      	movs	r2, #89	; 0x59
 8006c1a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c24:	f242 720f 	movw	r2, #9999	; 0x270f
 8006c28:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c2a:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006c36:	4805      	ldr	r0, [pc, #20]	; (8006c4c <MX_TIM13_Init+0x40>)
 8006c38:	f008 fa9c 	bl	800f174 <HAL_TIM_Base_Init>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006c42:	f000 f9a3 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20044a64 	.word	0x20044a64
 8006c50:	40001c00 	.word	0x40001c00

08006c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c5a:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <MX_USART2_UART_Init+0x50>)
 8006c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006c5e:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c7a:	220c      	movs	r2, #12
 8006c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006c8a:	4805      	ldr	r0, [pc, #20]	; (8006ca0 <MX_USART2_UART_Init+0x4c>)
 8006c8c:	f009 f942 	bl	800ff14 <HAL_UART_Init>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006c96:	f000 f979 	bl	8006f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20044c48 	.word	0x20044c48
 8006ca4:	40004400 	.word	0x40004400

08006ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	607b      	str	r3, [r7, #4]
 8006cb2:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <MX_DMA_Init+0x5c>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <MX_DMA_Init+0x5c>)
 8006cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <MX_DMA_Init+0x5c>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	203a      	movs	r0, #58	; 0x3a
 8006cd0:	f003 fe1b 	bl	800a90a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006cd4:	203a      	movs	r0, #58	; 0x3a
 8006cd6:	f003 fe34 	bl	800a942 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2100      	movs	r1, #0
 8006cde:	203b      	movs	r0, #59	; 0x3b
 8006ce0:	f003 fe13 	bl	800a90a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006ce4:	203b      	movs	r0, #59	; 0x3b
 8006ce6:	f003 fe2c 	bl	800a942 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	2045      	movs	r0, #69	; 0x45
 8006cf0:	f003 fe0b 	bl	800a90a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006cf4:	2045      	movs	r0, #69	; 0x45
 8006cf6:	f003 fe24 	bl	800a942 <HAL_NVIC_EnableIRQ>

}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800

08006d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08c      	sub	sp, #48	; 0x30
 8006d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0e:	f107 031c 	add.w	r3, r7, #28
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	609a      	str	r2, [r3, #8]
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	4b94      	ldr	r3, [pc, #592]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	4a93      	ldr	r2, [pc, #588]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d28:	f043 0310 	orr.w	r3, r3, #16
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	4b91      	ldr	r3, [pc, #580]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	4b8d      	ldr	r3, [pc, #564]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	4a8c      	ldr	r2, [pc, #560]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d48:	6313      	str	r3, [r2, #48]	; 0x30
 8006d4a:	4b8a      	ldr	r3, [pc, #552]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	4b86      	ldr	r3, [pc, #536]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	4a85      	ldr	r2, [pc, #532]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d60:	f043 0304 	orr.w	r3, r3, #4
 8006d64:	6313      	str	r3, [r2, #48]	; 0x30
 8006d66:	4b83      	ldr	r3, [pc, #524]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	4b7f      	ldr	r3, [pc, #508]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	4a7e      	ldr	r2, [pc, #504]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6313      	str	r3, [r2, #48]	; 0x30
 8006d82:	4b7c      	ldr	r3, [pc, #496]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	4b78      	ldr	r3, [pc, #480]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	4a77      	ldr	r2, [pc, #476]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9e:	4b75      	ldr	r3, [pc, #468]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	4b71      	ldr	r3, [pc, #452]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	4a70      	ldr	r2, [pc, #448]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006db4:	f043 0308 	orr.w	r3, r3, #8
 8006db8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dba:	4b6e      	ldr	r3, [pc, #440]	; (8006f74 <MX_GPIO_Init+0x26c>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006dcc:	486a      	ldr	r0, [pc, #424]	; (8006f78 <MX_GPIO_Init+0x270>)
 8006dce:	f004 fb31 	bl	800b434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006dd8:	4868      	ldr	r0, [pc, #416]	; (8006f7c <MX_GPIO_Init+0x274>)
 8006dda:	f004 fb2b 	bl	800b434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006de4:	4866      	ldr	r0, [pc, #408]	; (8006f80 <MX_GPIO_Init+0x278>)
 8006de6:	f004 fb25 	bl	800b434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006dea:	2200      	movs	r2, #0
 8006dec:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006df0:	4864      	ldr	r0, [pc, #400]	; (8006f84 <MX_GPIO_Init+0x27c>)
 8006df2:	f004 fb1f 	bl	800b434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006df6:	2304      	movs	r3, #4
 8006df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e02:	f107 031c 	add.w	r3, r7, #28
 8006e06:	4619      	mov	r1, r3
 8006e08:	485b      	ldr	r0, [pc, #364]	; (8006f78 <MX_GPIO_Init+0x270>)
 8006e0a:	f004 f951 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006e0e:	230f      	movs	r3, #15
 8006e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e12:	2303      	movs	r3, #3
 8006e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e1a:	f107 031c 	add.w	r3, r7, #28
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4859      	ldr	r0, [pc, #356]	; (8006f88 <MX_GPIO_Init+0x280>)
 8006e22:	f004 f945 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006e26:	23e1      	movs	r3, #225	; 0xe1
 8006e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e32:	f107 031c 	add.w	r3, r7, #28
 8006e36:	4619      	mov	r1, r3
 8006e38:	4852      	ldr	r0, [pc, #328]	; (8006f84 <MX_GPIO_Init+0x27c>)
 8006e3a:	f004 f939 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e42:	2303      	movs	r3, #3
 8006e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	4619      	mov	r1, r3
 8006e50:	484a      	ldr	r0, [pc, #296]	; (8006f7c <MX_GPIO_Init+0x274>)
 8006e52:	f004 f92d 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e56:	2304      	movs	r3, #4
 8006e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e62:	f107 031c 	add.w	r3, r7, #28
 8006e66:	4619      	mov	r1, r3
 8006e68:	4844      	ldr	r0, [pc, #272]	; (8006f7c <MX_GPIO_Init+0x274>)
 8006e6a:	f004 f921 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006e6e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e74:	2300      	movs	r3, #0
 8006e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e7c:	f107 031c 	add.w	r3, r7, #28
 8006e80:	4619      	mov	r1, r3
 8006e82:	483d      	ldr	r0, [pc, #244]	; (8006f78 <MX_GPIO_Init+0x270>)
 8006e84:	f004 f914 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e96:	2300      	movs	r3, #0
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e9a:	f107 031c 	add.w	r3, r7, #28
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4835      	ldr	r0, [pc, #212]	; (8006f78 <MX_GPIO_Init+0x270>)
 8006ea2:	f004 f905 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eac:	2301      	movs	r3, #1
 8006eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eb8:	f107 031c 	add.w	r3, r7, #28
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	482f      	ldr	r0, [pc, #188]	; (8006f7c <MX_GPIO_Init+0x274>)
 8006ec0:	f004 f8f6 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ed2:	f107 031c 	add.w	r3, r7, #28
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4829      	ldr	r0, [pc, #164]	; (8006f80 <MX_GPIO_Init+0x278>)
 8006eda:	f004 f8e9 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ef0:	f107 031c 	add.w	r3, r7, #28
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4822      	ldr	r0, [pc, #136]	; (8006f80 <MX_GPIO_Init+0x278>)
 8006ef8:	f004 f8da 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f02:	2301      	movs	r3, #1
 8006f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f06:	2301      	movs	r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f0e:	f107 031c 	add.w	r3, r7, #28
 8006f12:	4619      	mov	r1, r3
 8006f14:	481a      	ldr	r0, [pc, #104]	; (8006f80 <MX_GPIO_Init+0x278>)
 8006f16:	f004 f8cb 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006f1a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006f1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f20:	2301      	movs	r3, #1
 8006f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2c:	f107 031c 	add.w	r3, r7, #28
 8006f30:	4619      	mov	r1, r3
 8006f32:	4814      	ldr	r0, [pc, #80]	; (8006f84 <MX_GPIO_Init+0x27c>)
 8006f34:	f004 f8bc 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f46:	f107 031c 	add.w	r3, r7, #28
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	480d      	ldr	r0, [pc, #52]	; (8006f84 <MX_GPIO_Init+0x27c>)
 8006f4e:	f004 f8af 	bl	800b0b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006f52:	239b      	movs	r3, #155	; 0x9b
 8006f54:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f56:	2300      	movs	r3, #0
 8006f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f5e:	f107 031c 	add.w	r3, r7, #28
 8006f62:	4619      	mov	r1, r3
 8006f64:	4806      	ldr	r0, [pc, #24]	; (8006f80 <MX_GPIO_Init+0x278>)
 8006f66:	f004 f8a3 	bl	800b0b0 <HAL_GPIO_Init>

}
 8006f6a:	bf00      	nop
 8006f6c:	3730      	adds	r7, #48	; 0x30
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40023800 	.word	0x40023800
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40020400 	.word	0x40020400
 8006f80:	40020c00 	.word	0x40020c00
 8006f84:	40020000 	.word	0x40020000
 8006f88:	40020800 	.word	0x40020800

08006f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f90:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006f92:	e7fe      	b.n	8006f92 <Error_Handler+0x6>

08006f94 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <HAL_MspInit+0x4c>)
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <HAL_MspInit+0x4c>)
 8006fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <HAL_MspInit+0x4c>)
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc2:	607b      	str	r3, [r7, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <HAL_MspInit+0x4c>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <HAL_MspInit+0x4c>)
 8006fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_MspInit+0x4c>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40023800 	.word	0x40023800

08006ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08c      	sub	sp, #48	; 0x30
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ffc:	f107 031c 	add.w	r3, r7, #28
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	609a      	str	r2, [r3, #8]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a4a      	ldr	r2, [pc, #296]	; (800713c <HAL_ADC_MspInit+0x148>)
 8007012:	4293      	cmp	r3, r2
 8007014:	f040 808e 	bne.w	8007134 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007018:	2300      	movs	r3, #0
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	4b48      	ldr	r3, [pc, #288]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	4a47      	ldr	r2, [pc, #284]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 8007022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007026:	6453      	str	r3, [r2, #68]	; 0x44
 8007028:	4b45      	ldr	r3, [pc, #276]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	4b41      	ldr	r3, [pc, #260]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	4a40      	ldr	r2, [pc, #256]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 800703e:	f043 0304 	orr.w	r3, r3, #4
 8007042:	6313      	str	r3, [r2, #48]	; 0x30
 8007044:	4b3e      	ldr	r3, [pc, #248]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007050:	2300      	movs	r3, #0
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	4b3a      	ldr	r3, [pc, #232]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	4a39      	ldr	r2, [pc, #228]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6313      	str	r3, [r2, #48]	; 0x30
 8007060:	4b37      	ldr	r3, [pc, #220]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	4b33      	ldr	r3, [pc, #204]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	4a32      	ldr	r2, [pc, #200]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 8007076:	f043 0302 	orr.w	r3, r3, #2
 800707a:	6313      	str	r3, [r2, #48]	; 0x30
 800707c:	4b30      	ldr	r3, [pc, #192]	; (8007140 <HAL_ADC_MspInit+0x14c>)
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007088:	230f      	movs	r3, #15
 800708a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800708c:	2303      	movs	r3, #3
 800708e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	2300      	movs	r3, #0
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007094:	f107 031c 	add.w	r3, r7, #28
 8007098:	4619      	mov	r1, r3
 800709a:	482a      	ldr	r0, [pc, #168]	; (8007144 <HAL_ADC_MspInit+0x150>)
 800709c:	f004 f808 	bl	800b0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80070a0:	23ff      	movs	r3, #255	; 0xff
 80070a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070a4:	2303      	movs	r3, #3
 80070a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ac:	f107 031c 	add.w	r3, r7, #28
 80070b0:	4619      	mov	r1, r3
 80070b2:	4825      	ldr	r0, [pc, #148]	; (8007148 <HAL_ADC_MspInit+0x154>)
 80070b4:	f003 fffc 	bl	800b0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80070b8:	2303      	movs	r3, #3
 80070ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070bc:	2303      	movs	r3, #3
 80070be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070c4:	f107 031c 	add.w	r3, r7, #28
 80070c8:	4619      	mov	r1, r3
 80070ca:	4820      	ldr	r0, [pc, #128]	; (800714c <HAL_ADC_MspInit+0x158>)
 80070cc:	f003 fff0 	bl	800b0b0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80070d0:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070d2:	4a20      	ldr	r2, [pc, #128]	; (8007154 <HAL_ADC_MspInit+0x160>)
 80070d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80070d6:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070de:	4b1c      	ldr	r3, [pc, #112]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80070ea:	4b19      	ldr	r3, [pc, #100]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070f0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070f8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 80070fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007100:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 8007104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007108:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 800710c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007110:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007112:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 8007114:	2200      	movs	r2, #0
 8007116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007118:	480d      	ldr	r0, [pc, #52]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 800711a:	f003 fc2d 	bl	800a978 <HAL_DMA_Init>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8007124:	f7ff ff32 	bl	8006f8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a09      	ldr	r2, [pc, #36]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 800712c:	639a      	str	r2, [r3, #56]	; 0x38
 800712e:	4a08      	ldr	r2, [pc, #32]	; (8007150 <HAL_ADC_MspInit+0x15c>)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007134:	bf00      	nop
 8007136:	3730      	adds	r7, #48	; 0x30
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40012100 	.word	0x40012100
 8007140:	40023800 	.word	0x40023800
 8007144:	40020800 	.word	0x40020800
 8007148:	40020000 	.word	0x40020000
 800714c:	40020400 	.word	0x40020400
 8007150:	20044c88 	.word	0x20044c88
 8007154:	40026440 	.word	0x40026440

08007158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	; 0x30
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	f107 031c 	add.w	r3, r7, #28
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a32      	ldr	r2, [pc, #200]	; (8007240 <HAL_I2C_MspInit+0xe8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d12c      	bne.n	80071d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800717a:	2300      	movs	r3, #0
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	4b31      	ldr	r3, [pc, #196]	; (8007244 <HAL_I2C_MspInit+0xec>)
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	4a30      	ldr	r2, [pc, #192]	; (8007244 <HAL_I2C_MspInit+0xec>)
 8007184:	f043 0302 	orr.w	r3, r3, #2
 8007188:	6313      	str	r3, [r2, #48]	; 0x30
 800718a:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <HAL_I2C_MspInit+0xec>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007196:	23c0      	movs	r3, #192	; 0xc0
 8007198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800719a:	2312      	movs	r3, #18
 800719c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800719e:	2301      	movs	r3, #1
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a2:	2303      	movs	r3, #3
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80071a6:	2304      	movs	r3, #4
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071aa:	f107 031c 	add.w	r3, r7, #28
 80071ae:	4619      	mov	r1, r3
 80071b0:	4825      	ldr	r0, [pc, #148]	; (8007248 <HAL_I2C_MspInit+0xf0>)
 80071b2:	f003 ff7d 	bl	800b0b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	4b22      	ldr	r3, [pc, #136]	; (8007244 <HAL_I2C_MspInit+0xec>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a21      	ldr	r2, [pc, #132]	; (8007244 <HAL_I2C_MspInit+0xec>)
 80071c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
 80071c6:	4b1f      	ldr	r3, [pc, #124]	; (8007244 <HAL_I2C_MspInit+0xec>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80071d2:	e031      	b.n	8007238 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_I2C_MspInit+0xf4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d12c      	bne.n	8007238 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	4b18      	ldr	r3, [pc, #96]	; (8007244 <HAL_I2C_MspInit+0xec>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	4a17      	ldr	r2, [pc, #92]	; (8007244 <HAL_I2C_MspInit+0xec>)
 80071e8:	f043 0302 	orr.w	r3, r3, #2
 80071ec:	6313      	str	r3, [r2, #48]	; 0x30
 80071ee:	4b15      	ldr	r3, [pc, #84]	; (8007244 <HAL_I2C_MspInit+0xec>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80071fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007200:	2312      	movs	r3, #18
 8007202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007204:	2301      	movs	r3, #1
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007208:	2303      	movs	r3, #3
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800720c:	2304      	movs	r3, #4
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007210:	f107 031c 	add.w	r3, r7, #28
 8007214:	4619      	mov	r1, r3
 8007216:	480c      	ldr	r0, [pc, #48]	; (8007248 <HAL_I2C_MspInit+0xf0>)
 8007218:	f003 ff4a 	bl	800b0b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	4b08      	ldr	r3, [pc, #32]	; (8007244 <HAL_I2C_MspInit+0xec>)
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	4a07      	ldr	r2, [pc, #28]	; (8007244 <HAL_I2C_MspInit+0xec>)
 8007226:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800722a:	6413      	str	r3, [r2, #64]	; 0x40
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <HAL_I2C_MspInit+0xec>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
}
 8007238:	bf00      	nop
 800723a:	3730      	adds	r7, #48	; 0x30
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40005400 	.word	0x40005400
 8007244:	40023800 	.word	0x40023800
 8007248:	40020400 	.word	0x40020400
 800724c:	40005800 	.word	0x40005800

08007250 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007258:	f107 0314 	add.w	r3, r7, #20
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a69      	ldr	r2, [pc, #420]	; (8007414 <HAL_SD_MspInit+0x1c4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	f040 80cb 	bne.w	800740a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	4b67      	ldr	r3, [pc, #412]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	4a66      	ldr	r2, [pc, #408]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 800727e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007282:	6453      	str	r3, [r2, #68]	; 0x44
 8007284:	4b64      	ldr	r3, [pc, #400]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 8007286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	4b60      	ldr	r3, [pc, #384]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	4a5f      	ldr	r2, [pc, #380]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 800729a:	f043 0304 	orr.w	r3, r3, #4
 800729e:	6313      	str	r3, [r2, #48]	; 0x30
 80072a0:	4b5d      	ldr	r3, [pc, #372]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072ac:	2300      	movs	r3, #0
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	4a58      	ldr	r2, [pc, #352]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 80072b6:	f043 0308 	orr.w	r3, r3, #8
 80072ba:	6313      	str	r3, [r2, #48]	; 0x30
 80072bc:	4b56      	ldr	r3, [pc, #344]	; (8007418 <HAL_SD_MspInit+0x1c8>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80072c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80072cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ce:	2302      	movs	r3, #2
 80072d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d6:	2303      	movs	r3, #3
 80072d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80072da:	230c      	movs	r3, #12
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072de:	f107 0314 	add.w	r3, r7, #20
 80072e2:	4619      	mov	r1, r3
 80072e4:	484d      	ldr	r0, [pc, #308]	; (800741c <HAL_SD_MspInit+0x1cc>)
 80072e6:	f003 fee3 	bl	800b0b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072ea:	2304      	movs	r3, #4
 80072ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ee:	2302      	movs	r3, #2
 80072f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f6:	2303      	movs	r3, #3
 80072f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80072fa:	230c      	movs	r3, #12
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072fe:	f107 0314 	add.w	r3, r7, #20
 8007302:	4619      	mov	r1, r3
 8007304:	4846      	ldr	r0, [pc, #280]	; (8007420 <HAL_SD_MspInit+0x1d0>)
 8007306:	f003 fed3 	bl	800b0b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800730a:	4b46      	ldr	r3, [pc, #280]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800730c:	4a46      	ldr	r2, [pc, #280]	; (8007428 <HAL_SD_MspInit+0x1d8>)
 800730e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007310:	4b44      	ldr	r3, [pc, #272]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007316:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007318:	4b42      	ldr	r3, [pc, #264]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800731e:	4b41      	ldr	r3, [pc, #260]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007320:	2200      	movs	r2, #0
 8007322:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007324:	4b3f      	ldr	r3, [pc, #252]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800732a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800732c:	4b3d      	ldr	r3, [pc, #244]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800732e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007332:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007334:	4b3b      	ldr	r3, [pc, #236]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800733a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800733c:	4b39      	ldr	r3, [pc, #228]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800733e:	2220      	movs	r2, #32
 8007340:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007342:	4b38      	ldr	r3, [pc, #224]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007344:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007348:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800734a:	4b36      	ldr	r3, [pc, #216]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800734c:	2204      	movs	r2, #4
 800734e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007350:	4b34      	ldr	r3, [pc, #208]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007352:	2203      	movs	r2, #3
 8007354:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007356:	4b33      	ldr	r3, [pc, #204]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007358:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800735e:	4b31      	ldr	r3, [pc, #196]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007366:	482f      	ldr	r0, [pc, #188]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 8007368:	f003 fb06 	bl	800a978 <HAL_DMA_Init>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007372:	f7ff fe0b 	bl	8006f8c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
 800737c:	4a29      	ldr	r2, [pc, #164]	; (8007424 <HAL_SD_MspInit+0x1d4>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_SD_MspInit+0x1dc>)
 8007384:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <HAL_SD_MspInit+0x1e0>)
 8007386:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007388:	4b28      	ldr	r3, [pc, #160]	; (800742c <HAL_SD_MspInit+0x1dc>)
 800738a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800738e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007390:	4b26      	ldr	r3, [pc, #152]	; (800742c <HAL_SD_MspInit+0x1dc>)
 8007392:	2240      	movs	r2, #64	; 0x40
 8007394:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007396:	4b25      	ldr	r3, [pc, #148]	; (800742c <HAL_SD_MspInit+0x1dc>)
 8007398:	2200      	movs	r2, #0
 800739a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800739c:	4b23      	ldr	r3, [pc, #140]	; (800742c <HAL_SD_MspInit+0x1dc>)
 800739e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073a2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073a4:	4b21      	ldr	r3, [pc, #132]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073aa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80073ac:	4b1f      	ldr	r3, [pc, #124]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073b2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80073b4:	4b1d      	ldr	r3, [pc, #116]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073b6:	2220      	movs	r2, #32
 80073b8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80073ba:	4b1c      	ldr	r3, [pc, #112]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80073c0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073c4:	2204      	movs	r2, #4
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80073c8:	4b18      	ldr	r3, [pc, #96]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073ca:	2203      	movs	r2, #3
 80073cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80073ce:	4b17      	ldr	r3, [pc, #92]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80073d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80073d6:	4b15      	ldr	r3, [pc, #84]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80073de:	4813      	ldr	r0, [pc, #76]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073e0:	f003 faca 	bl	800a978 <HAL_DMA_Init>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80073ea:	f7ff fdcf 	bl	8006f8c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a0e      	ldr	r2, [pc, #56]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <HAL_SD_MspInit+0x1dc>)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	2031      	movs	r0, #49	; 0x31
 8007400:	f003 fa83 	bl	800a90a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007404:	2031      	movs	r0, #49	; 0x31
 8007406:	f003 fa9c 	bl	800a942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800740a:	bf00      	nop
 800740c:	3728      	adds	r7, #40	; 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40023800 	.word	0x40023800
 800741c:	40020800 	.word	0x40020800
 8007420:	40020c00 	.word	0x40020c00
 8007424:	200447b0 	.word	0x200447b0
 8007428:	40026458 	.word	0x40026458
 800742c:	20044ae4 	.word	0x20044ae4
 8007430:	400264a0 	.word	0x400264a0

08007434 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a19      	ldr	r2, [pc, #100]	; (80074b8 <HAL_SPI_MspInit+0x84>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d12c      	bne.n	80074b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	4b18      	ldr	r3, [pc, #96]	; (80074bc <HAL_SPI_MspInit+0x88>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	4a17      	ldr	r2, [pc, #92]	; (80074bc <HAL_SPI_MspInit+0x88>)
 8007460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007464:	6413      	str	r3, [r2, #64]	; 0x40
 8007466:	4b15      	ldr	r3, [pc, #84]	; (80074bc <HAL_SPI_MspInit+0x88>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <HAL_SPI_MspInit+0x88>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <HAL_SPI_MspInit+0x88>)
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	6313      	str	r3, [r2, #48]	; 0x30
 8007482:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <HAL_SPI_MspInit+0x88>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800748e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007494:	2302      	movs	r3, #2
 8007496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007498:	2300      	movs	r3, #0
 800749a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749c:	2303      	movs	r3, #3
 800749e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80074a0:	2305      	movs	r3, #5
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	4619      	mov	r1, r3
 80074aa:	4805      	ldr	r0, [pc, #20]	; (80074c0 <HAL_SPI_MspInit+0x8c>)
 80074ac:	f003 fe00 	bl	800b0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80074b0:	bf00      	nop
 80074b2:	3728      	adds	r7, #40	; 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40003800 	.word	0x40003800
 80074bc:	40023800 	.word	0x40023800
 80074c0:	40020400 	.word	0x40020400

080074c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08c      	sub	sp, #48	; 0x30
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074cc:	f107 031c 	add.w	r3, r7, #28
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	605a      	str	r2, [r3, #4]
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2d      	ldr	r2, [pc, #180]	; (8007598 <HAL_TIM_PWM_MspInit+0xd4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d12d      	bne.n	8007542 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80074e6:	2300      	movs	r3, #0
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	4b2c      	ldr	r3, [pc, #176]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 80074ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ee:	4a2b      	ldr	r2, [pc, #172]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	6453      	str	r3, [r2, #68]	; 0x44
 80074f6:	4b29      	ldr	r3, [pc, #164]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	4b25      	ldr	r3, [pc, #148]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4a24      	ldr	r2, [pc, #144]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 800750c:	f043 0310 	orr.w	r3, r3, #16
 8007510:	6313      	str	r3, [r2, #48]	; 0x30
 8007512:	4b22      	ldr	r3, [pc, #136]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800751e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007524:	2302      	movs	r3, #2
 8007526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007528:	2300      	movs	r3, #0
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800752c:	2300      	movs	r3, #0
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007530:	2301      	movs	r3, #1
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007534:	f107 031c 	add.w	r3, r7, #28
 8007538:	4619      	mov	r1, r3
 800753a:	4819      	ldr	r0, [pc, #100]	; (80075a0 <HAL_TIM_PWM_MspInit+0xdc>)
 800753c:	f003 fdb8 	bl	800b0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007540:	e026      	b.n	8007590 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <HAL_TIM_PWM_MspInit+0xe0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10e      	bne.n	800756a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	4b12      	ldr	r3, [pc, #72]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	4a11      	ldr	r2, [pc, #68]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 8007556:	f043 0302 	orr.w	r3, r3, #2
 800755a:	6413      	str	r3, [r2, #64]	; 0x40
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	693b      	ldr	r3, [r7, #16]
}
 8007568:	e012      	b.n	8007590 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a0e      	ldr	r2, [pc, #56]	; (80075a8 <HAL_TIM_PWM_MspInit+0xe4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d10d      	bne.n	8007590 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	4b08      	ldr	r3, [pc, #32]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	4a07      	ldr	r2, [pc, #28]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 800757e:	f043 0304 	orr.w	r3, r3, #4
 8007582:	6413      	str	r3, [r2, #64]	; 0x40
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <HAL_TIM_PWM_MspInit+0xd8>)
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	3730      	adds	r7, #48	; 0x30
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40010000 	.word	0x40010000
 800759c:	40023800 	.word	0x40023800
 80075a0:	40021000 	.word	0x40021000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800

080075ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a3e      	ldr	r2, [pc, #248]	; (80076b4 <HAL_TIM_Base_MspInit+0x108>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d116      	bne.n	80075ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	4b3d      	ldr	r3, [pc, #244]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	4a3c      	ldr	r2, [pc, #240]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 80075c8:	f043 0310 	orr.w	r3, r3, #16
 80075cc:	6413      	str	r3, [r2, #64]	; 0x40
 80075ce:	4b3a      	ldr	r3, [pc, #232]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80075da:	2200      	movs	r2, #0
 80075dc:	2101      	movs	r1, #1
 80075de:	2036      	movs	r0, #54	; 0x36
 80075e0:	f003 f993 	bl	800a90a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80075e4:	2036      	movs	r0, #54	; 0x36
 80075e6:	f003 f9ac 	bl	800a942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80075ea:	e05e      	b.n	80076aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a32      	ldr	r2, [pc, #200]	; (80076bc <HAL_TIM_Base_MspInit+0x110>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d116      	bne.n	8007624 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	4a2e      	ldr	r2, [pc, #184]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007600:	f043 0320 	orr.w	r3, r3, #32
 8007604:	6413      	str	r3, [r2, #64]	; 0x40
 8007606:	4b2c      	ldr	r3, [pc, #176]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	2037      	movs	r0, #55	; 0x37
 8007618:	f003 f977 	bl	800a90a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800761c:	2037      	movs	r0, #55	; 0x37
 800761e:	f003 f990 	bl	800a942 <HAL_NVIC_EnableIRQ>
}
 8007622:	e042      	b.n	80076aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <HAL_TIM_Base_MspInit+0x114>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d10e      	bne.n	800764c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800763c:	6453      	str	r3, [r2, #68]	; 0x44
 800763e:	4b1e      	ldr	r3, [pc, #120]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	697b      	ldr	r3, [r7, #20]
}
 800764a:	e02e      	b.n	80076aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_TIM_Base_MspInit+0x118>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d10e      	bne.n	8007674 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 800765c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765e:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007664:	6453      	str	r3, [r2, #68]	; 0x44
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	693b      	ldr	r3, [r7, #16]
}
 8007672:	e01a      	b.n	80076aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <HAL_TIM_Base_MspInit+0x11c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d115      	bne.n	80076aa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	6413      	str	r3, [r2, #64]	; 0x40
 800768e:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800769a:	2200      	movs	r2, #0
 800769c:	2100      	movs	r1, #0
 800769e:	202c      	movs	r0, #44	; 0x2c
 80076a0:	f003 f933 	bl	800a90a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80076a4:	202c      	movs	r0, #44	; 0x2c
 80076a6:	f003 f94c 	bl	800a942 <HAL_NVIC_EnableIRQ>
}
 80076aa:	bf00      	nop
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	40001000 	.word	0x40001000
 80076b8:	40023800 	.word	0x40023800
 80076bc:	40001400 	.word	0x40001400
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800
 80076c8:	40001c00 	.word	0x40001c00

080076cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <HAL_TIM_Encoder_MspInit+0x94>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d133      	bne.n	8007756 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <HAL_TIM_Encoder_MspInit+0x98>)
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	4a1b      	ldr	r2, [pc, #108]	; (8007764 <HAL_TIM_Encoder_MspInit+0x98>)
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	6453      	str	r3, [r2, #68]	; 0x44
 80076fe:	4b19      	ldr	r3, [pc, #100]	; (8007764 <HAL_TIM_Encoder_MspInit+0x98>)
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <HAL_TIM_Encoder_MspInit+0x98>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	4a14      	ldr	r2, [pc, #80]	; (8007764 <HAL_TIM_Encoder_MspInit+0x98>)
 8007714:	f043 0304 	orr.w	r3, r3, #4
 8007718:	6313      	str	r3, [r2, #48]	; 0x30
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <HAL_TIM_Encoder_MspInit+0x98>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007726:	23c0      	movs	r3, #192	; 0xc0
 8007728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800772a:	2302      	movs	r3, #2
 800772c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007732:	2300      	movs	r3, #0
 8007734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007736:	2303      	movs	r3, #3
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800773a:	f107 0314 	add.w	r3, r7, #20
 800773e:	4619      	mov	r1, r3
 8007740:	4809      	ldr	r0, [pc, #36]	; (8007768 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007742:	f003 fcb5 	bl	800b0b0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007746:	2200      	movs	r2, #0
 8007748:	2100      	movs	r1, #0
 800774a:	202c      	movs	r0, #44	; 0x2c
 800774c:	f003 f8dd 	bl	800a90a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007750:	202c      	movs	r0, #44	; 0x2c
 8007752:	f003 f8f6 	bl	800a942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007756:	bf00      	nop
 8007758:	3728      	adds	r7, #40	; 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	40010400 	.word	0x40010400
 8007764:	40023800 	.word	0x40023800
 8007768:	40020800 	.word	0x40020800

0800776c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007774:	f107 031c 	add.w	r3, r7, #28
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	605a      	str	r2, [r3, #4]
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a5c      	ldr	r2, [pc, #368]	; (80078fc <HAL_TIM_MspPostInit+0x190>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d11f      	bne.n	80077ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	4b5b      	ldr	r3, [pc, #364]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	4a5a      	ldr	r2, [pc, #360]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 8007798:	f043 0310 	orr.w	r3, r3, #16
 800779c:	6313      	str	r3, [r2, #48]	; 0x30
 800779e:	4b58      	ldr	r3, [pc, #352]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	61bb      	str	r3, [r7, #24]
 80077a8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80077aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b0:	2302      	movs	r3, #2
 80077b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077b8:	2300      	movs	r3, #0
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80077bc:	2301      	movs	r3, #1
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077c0:	f107 031c 	add.w	r3, r7, #28
 80077c4:	4619      	mov	r1, r3
 80077c6:	484f      	ldr	r0, [pc, #316]	; (8007904 <HAL_TIM_MspPostInit+0x198>)
 80077c8:	f003 fc72 	bl	800b0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80077cc:	e091      	b.n	80078f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a4d      	ldr	r2, [pc, #308]	; (8007908 <HAL_TIM_MspPostInit+0x19c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d11e      	bne.n	8007816 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	4b48      	ldr	r3, [pc, #288]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	4a47      	ldr	r2, [pc, #284]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	6313      	str	r3, [r2, #48]	; 0x30
 80077e8:	4b45      	ldr	r3, [pc, #276]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80077f4:	2330      	movs	r3, #48	; 0x30
 80077f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f8:	2302      	movs	r3, #2
 80077fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007800:	2300      	movs	r3, #0
 8007802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007804:	2302      	movs	r3, #2
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007808:	f107 031c 	add.w	r3, r7, #28
 800780c:	4619      	mov	r1, r3
 800780e:	483f      	ldr	r0, [pc, #252]	; (800790c <HAL_TIM_MspPostInit+0x1a0>)
 8007810:	f003 fc4e 	bl	800b0b0 <HAL_GPIO_Init>
}
 8007814:	e06d      	b.n	80078f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a3d      	ldr	r2, [pc, #244]	; (8007910 <HAL_TIM_MspPostInit+0x1a4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d11f      	bne.n	8007860 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	4b36      	ldr	r3, [pc, #216]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	4a35      	ldr	r2, [pc, #212]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 800782a:	f043 0308 	orr.w	r3, r3, #8
 800782e:	6313      	str	r3, [r2, #48]	; 0x30
 8007830:	4b33      	ldr	r3, [pc, #204]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800783c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007842:	2302      	movs	r3, #2
 8007844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007846:	2300      	movs	r3, #0
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800784a:	2300      	movs	r3, #0
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800784e:	2302      	movs	r3, #2
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007852:	f107 031c 	add.w	r3, r7, #28
 8007856:	4619      	mov	r1, r3
 8007858:	482e      	ldr	r0, [pc, #184]	; (8007914 <HAL_TIM_MspPostInit+0x1a8>)
 800785a:	f003 fc29 	bl	800b0b0 <HAL_GPIO_Init>
}
 800785e:	e048      	b.n	80078f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <HAL_TIM_MspPostInit+0x1ac>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d11f      	bne.n	80078aa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	4b24      	ldr	r3, [pc, #144]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	4a23      	ldr	r2, [pc, #140]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 8007874:	f043 0302 	orr.w	r3, r3, #2
 8007878:	6313      	str	r3, [r2, #48]	; 0x30
 800787a:	4b21      	ldr	r3, [pc, #132]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800788a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800788c:	2302      	movs	r3, #2
 800788e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007890:	2300      	movs	r3, #0
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007894:	2300      	movs	r3, #0
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007898:	2303      	movs	r3, #3
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800789c:	f107 031c 	add.w	r3, r7, #28
 80078a0:	4619      	mov	r1, r3
 80078a2:	481a      	ldr	r0, [pc, #104]	; (800790c <HAL_TIM_MspPostInit+0x1a0>)
 80078a4:	f003 fc04 	bl	800b0b0 <HAL_GPIO_Init>
}
 80078a8:	e023      	b.n	80078f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1b      	ldr	r2, [pc, #108]	; (800791c <HAL_TIM_MspPostInit+0x1b0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d11e      	bne.n	80078f2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078b4:	2300      	movs	r3, #0
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	4a10      	ldr	r2, [pc, #64]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80078be:	f043 0302 	orr.w	r3, r3, #2
 80078c2:	6313      	str	r3, [r2, #48]	; 0x30
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <HAL_TIM_MspPostInit+0x194>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80078d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d6:	2302      	movs	r3, #2
 80078d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078de:	2300      	movs	r3, #0
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80078e2:	2303      	movs	r3, #3
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078e6:	f107 031c 	add.w	r3, r7, #28
 80078ea:	4619      	mov	r1, r3
 80078ec:	4807      	ldr	r0, [pc, #28]	; (800790c <HAL_TIM_MspPostInit+0x1a0>)
 80078ee:	f003 fbdf 	bl	800b0b0 <HAL_GPIO_Init>
}
 80078f2:	bf00      	nop
 80078f4:	3730      	adds	r7, #48	; 0x30
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40010000 	.word	0x40010000
 8007900:	40023800 	.word	0x40023800
 8007904:	40021000 	.word	0x40021000
 8007908:	40000400 	.word	0x40000400
 800790c:	40020400 	.word	0x40020400
 8007910:	40000800 	.word	0x40000800
 8007914:	40020c00 	.word	0x40020c00
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800

08007920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007928:	f107 0314 	add.w	r3, r7, #20
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	609a      	str	r2, [r3, #8]
 8007934:	60da      	str	r2, [r3, #12]
 8007936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <HAL_UART_MspInit+0x84>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d12b      	bne.n	800799a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <HAL_UART_MspInit+0x88>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <HAL_UART_MspInit+0x88>)
 800794c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007950:	6413      	str	r3, [r2, #64]	; 0x40
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <HAL_UART_MspInit+0x88>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <HAL_UART_MspInit+0x88>)
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	4a10      	ldr	r2, [pc, #64]	; (80079a8 <HAL_UART_MspInit+0x88>)
 8007968:	f043 0308 	orr.w	r3, r3, #8
 800796c:	6313      	str	r3, [r2, #48]	; 0x30
 800796e:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <HAL_UART_MspInit+0x88>)
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800797a:	2360      	movs	r3, #96	; 0x60
 800797c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800797e:	2302      	movs	r3, #2
 8007980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007986:	2303      	movs	r3, #3
 8007988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800798a:	2307      	movs	r3, #7
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800798e:	f107 0314 	add.w	r3, r7, #20
 8007992:	4619      	mov	r1, r3
 8007994:	4805      	ldr	r0, [pc, #20]	; (80079ac <HAL_UART_MspInit+0x8c>)
 8007996:	f003 fb8b 	bl	800b0b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800799a:	bf00      	nop
 800799c:	3728      	adds	r7, #40	; 0x28
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40004400 	.word	0x40004400
 80079a8:	40023800 	.word	0x40023800
 80079ac:	40020c00 	.word	0x40020c00

080079b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079b4:	e7fe      	b.n	80079b4 <NMI_Handler+0x4>

080079b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079b6:	b480      	push	{r7}
 80079b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079ba:	e7fe      	b.n	80079ba <HardFault_Handler+0x4>

080079bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079c0:	e7fe      	b.n	80079c0 <MemManage_Handler+0x4>

080079c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079c6:	e7fe      	b.n	80079c6 <BusFault_Handler+0x4>

080079c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079cc:	e7fe      	b.n	80079cc <UsageFault_Handler+0x4>

080079ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079d2:	bf00      	nop
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079ea:	b480      	push	{r7}
 80079ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079fc:	f002 fa64 	bl	8009ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a00:	bf00      	nop
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007a08:	4803      	ldr	r0, [pc, #12]	; (8007a18 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007a0a:	f007 fd34 	bl	800f476 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007a10:	f007 fd31 	bl	800f476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007a14:	bf00      	nop
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20044868 	.word	0x20044868
 8007a1c:	20044a64 	.word	0x20044a64

08007a20 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <SDIO_IRQHandler+0x10>)
 8007a26:	f005 fdcd 	bl	800d5c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20044bc4 	.word	0x20044bc4

08007a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007a38:	4802      	ldr	r0, [pc, #8]	; (8007a44 <TIM6_DAC_IRQHandler+0x10>)
 8007a3a:	f007 fd1c 	bl	800f476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20044b44 	.word	0x20044b44

08007a48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007a4c:	4802      	ldr	r0, [pc, #8]	; (8007a58 <TIM7_IRQHandler+0x10>)
 8007a4e:	f007 fd12 	bl	800f476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20044ce8 	.word	0x20044ce8

08007a5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <DMA2_Stream2_IRQHandler+0x10>)
 8007a62:	f003 f8b1 	bl	800abc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20044c88 	.word	0x20044c88

08007a70 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007a74:	4802      	ldr	r0, [pc, #8]	; (8007a80 <DMA2_Stream3_IRQHandler+0x10>)
 8007a76:	f003 f8a7 	bl	800abc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007a7a:	bf00      	nop
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200447b0 	.word	0x200447b0

08007a84 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007a88:	4802      	ldr	r0, [pc, #8]	; (8007a94 <DMA2_Stream6_IRQHandler+0x10>)
 8007a8a:	f003 f89d 	bl	800abc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20044ae4 	.word	0x20044ae4

08007a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007aa0:	4a14      	ldr	r2, [pc, #80]	; (8007af4 <_sbrk+0x5c>)
 8007aa2:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <_sbrk+0x60>)
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <_sbrk+0x64>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <_sbrk+0x64>)
 8007ab6:	4a12      	ldr	r2, [pc, #72]	; (8007b00 <_sbrk+0x68>)
 8007ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <_sbrk+0x64>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d207      	bcs.n	8007ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ac8:	f00d ff68 	bl	801599c <__errno>
 8007acc:	4602      	mov	r2, r0
 8007ace:	230c      	movs	r3, #12
 8007ad0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad6:	e009      	b.n	8007aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007ad8:	4b08      	ldr	r3, [pc, #32]	; (8007afc <_sbrk+0x64>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <_sbrk+0x64>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4a05      	ldr	r2, [pc, #20]	; (8007afc <_sbrk+0x64>)
 8007ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007aea:	68fb      	ldr	r3, [r7, #12]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20050000 	.word	0x20050000
 8007af8:	00000800 	.word	0x00000800
 8007afc:	200002bc 	.word	0x200002bc
 8007b00:	20046e38 	.word	0x20046e38

08007b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <SystemInit+0x28>)
 8007b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0e:	4a07      	ldr	r2, [pc, #28]	; (8007b2c <SystemInit+0x28>)
 8007b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <SystemInit+0x28>)
 8007b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8007b20:	bf00      	nop
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000ed00 	.word	0xe000ed00

08007b30 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007b30:	b598      	push	{r3, r4, r7, lr}
 8007b32:	af00      	add	r7, sp, #0
	lcd_init();
 8007b34:	f7f9 fa70 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007b38:	483b      	ldr	r0, [pc, #236]	; (8007c28 <cppInit+0xf8>)
 8007b3a:	f7fd fcb3 	bl	80054a4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007b3e:	2064      	movs	r0, #100	; 0x64
 8007b40:	f002 f9e2 	bl	8009f08 <HAL_Delay>
	power_sensor.updateValues();
 8007b44:	4838      	ldr	r0, [pc, #224]	; (8007c28 <cppInit+0xf8>)
 8007b46:	f7fd fcbb 	bl	80054c0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007b4a:	f7f9 faa9 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007b4e:	2100      	movs	r1, #0
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7f9 fab5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007b56:	4835      	ldr	r0, [pc, #212]	; (8007c2c <cppInit+0xfc>)
 8007b58:	f7f9 fadc 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	2000      	movs	r0, #0
 8007b60:	f7f9 faae 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007b64:	4830      	ldr	r0, [pc, #192]	; (8007c28 <cppInit+0xf8>)
 8007b66:	f7fd fcd5 	bl	8005514 <_ZN11PowerSensor17getButteryVoltageEv>
 8007b6a:	ee10 3a10 	vmov	r3, s0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f8 fd02 	bl	8000578 <__aeabi_f2d>
 8007b74:	4603      	mov	r3, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	482c      	ldr	r0, [pc, #176]	; (8007c30 <cppInit+0x100>)
 8007b7e:	f7f9 fac9 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b86:	f002 f9bf 	bl	8009f08 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007b8a:	482a      	ldr	r0, [pc, #168]	; (8007c34 <cppInit+0x104>)
 8007b8c:	f7fc feac 	bl	80048e8 <_ZN6Logger10sdCardInitEv>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <cppInit+0x76>
		led.fullColor('G');
 8007b96:	2147      	movs	r1, #71	; 0x47
 8007b98:	4827      	ldr	r0, [pc, #156]	; (8007c38 <cppInit+0x108>)
 8007b9a:	f7fa fb5b 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007b9e:	2064      	movs	r0, #100	; 0x64
 8007ba0:	f002 f9b2 	bl	8009f08 <HAL_Delay>
 8007ba4:	e006      	b.n	8007bb4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007ba6:	2152      	movs	r1, #82	; 0x52
 8007ba8:	4823      	ldr	r0, [pc, #140]	; (8007c38 <cppInit+0x108>)
 8007baa:	f7fa fb53 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007bae:	2064      	movs	r0, #100	; 0x64
 8007bb0:	f002 f9aa 	bl	8009f08 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007bb4:	4821      	ldr	r0, [pc, #132]	; (8007c3c <cppInit+0x10c>)
 8007bb6:	f7fa fca9 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007bba:	4821      	ldr	r0, [pc, #132]	; (8007c40 <cppInit+0x110>)
 8007bbc:	f7fd f92a 	bl	8004e14 <_ZN5Motor4initEv>
	encoder.init();
 8007bc0:	4820      	ldr	r0, [pc, #128]	; (8007c44 <cppInit+0x114>)
 8007bc2:	f7f9 fc2f 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007bc6:	4820      	ldr	r0, [pc, #128]	; (8007c48 <cppInit+0x118>)
 8007bc8:	f7fa f8f2 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 8007bcc:	481f      	ldr	r0, [pc, #124]	; (8007c4c <cppInit+0x11c>)
 8007bce:	f7fb ff91 	bl	8003af4 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007bd2:	481a      	ldr	r0, [pc, #104]	; (8007c3c <cppInit+0x10c>)
 8007bd4:	f7fa fdfa 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bdc:	f002 f994 	bl	8009f08 <HAL_Delay>

	led.fullColor('M');
 8007be0:	214d      	movs	r1, #77	; 0x4d
 8007be2:	4815      	ldr	r0, [pc, #84]	; (8007c38 <cppInit+0x108>)
 8007be4:	f7fa fb36 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007be8:	4817      	ldr	r0, [pc, #92]	; (8007c48 <cppInit+0x118>)
 8007bea:	f7fa f9bb 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007bee:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007c50 <cppInit+0x120>
 8007bf2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007c54 <cppInit+0x124>
 8007bf6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007c58 <cppInit+0x128>
 8007bfa:	4818      	ldr	r0, [pc, #96]	; (8007c5c <cppInit+0x12c>)
 8007bfc:	f7fe f9dc 	bl	8005fb8 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007c00:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007c60 <cppInit+0x130>
 8007c04:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007c64 <cppInit+0x134>
 8007c08:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007c68 <cppInit+0x138>
 8007c0c:	4813      	ldr	r0, [pc, #76]	; (8007c5c <cppInit+0x12c>)
 8007c0e:	f7fe f9ec 	bl	8005fea <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007c12:	4816      	ldr	r0, [pc, #88]	; (8007c6c <cppInit+0x13c>)
 8007c14:	f7fd fb50 	bl	80052b8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007c18:	4815      	ldr	r0, [pc, #84]	; (8007c70 <cppInit+0x140>)
 8007c1a:	f7fd fbe7 	bl	80053ec <_ZN13PathFollowing4initEv>

	esc.init();
 8007c1e:	4815      	ldr	r0, [pc, #84]	; (8007c74 <cppInit+0x144>)
 8007c20:	f7f9 fae4 	bl	80011ec <_ZN3ESC4initEv>

}
 8007c24:	bf00      	nop
 8007c26:	bd98      	pop	{r3, r4, r7, pc}
 8007c28:	200005d4 	.word	0x200005d4
 8007c2c:	08019fe4 	.word	0x08019fe4
 8007c30:	08019fec 	.word	0x08019fec
 8007c34:	200005f4 	.word	0x200005f4
 8007c38:	200005d0 	.word	0x200005d0
 8007c3c:	200002c0 	.word	0x200002c0
 8007c40:	200005cc 	.word	0x200005cc
 8007c44:	2001dac0 	.word	0x2001dac0
 8007c48:	200005e0 	.word	0x200005e0
 8007c4c:	2001db64 	.word	0x2001db64
 8007c50:	3a8439b6 	.word	0x3a8439b6
 8007c54:	40d1a29c 	.word	0x40d1a29c
 8007c58:	3f81f8a1 	.word	0x3f81f8a1
 8007c5c:	2001dae0 	.word	0x2001dae0
 8007c60:	00000000 	.word	0x00000000
 8007c64:	3f5e3fbc 	.word	0x3f5e3fbc
 8007c68:	3d75c28f 	.word	0x3d75c28f
 8007c6c:	2001db20 	.word	0x2001db20
 8007c70:	2002acb0 	.word	0x2002acb0
 8007c74:	2001db60 	.word	0x2001db60

08007c78 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007c7c:	480e      	ldr	r0, [pc, #56]	; (8007cb8 <cppFlip1ms+0x40>)
 8007c7e:	f7fa fca3 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007c82:	480e      	ldr	r0, [pc, #56]	; (8007cbc <cppFlip1ms+0x44>)
 8007c84:	f7fa f8bc 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007c88:	480d      	ldr	r0, [pc, #52]	; (8007cc0 <cppFlip1ms+0x48>)
 8007c8a:	f7f9 fbed 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007c8e:	480d      	ldr	r0, [pc, #52]	; (8007cc4 <cppFlip1ms+0x4c>)
 8007c90:	f7fc f9d6 	bl	8004040 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007c94:	480c      	ldr	r0, [pc, #48]	; (8007cc8 <cppFlip1ms+0x50>)
 8007c96:	f7fe f9c1 	bl	800601c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007c9a:	480c      	ldr	r0, [pc, #48]	; (8007ccc <cppFlip1ms+0x54>)
 8007c9c:	f7fd faf0 	bl	8005280 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007ca0:	480b      	ldr	r0, [pc, #44]	; (8007cd0 <cppFlip1ms+0x58>)
 8007ca2:	f7fd fcb3 	bl	800560c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007ca6:	480b      	ldr	r0, [pc, #44]	; (8007cd4 <cppFlip1ms+0x5c>)
 8007ca8:	f7fd f8c6 	bl	8004e38 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007cac:	4804      	ldr	r0, [pc, #16]	; (8007cc0 <cppFlip1ms+0x48>)
 8007cae:	f7f9 fcc5 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007cb2:	bf00      	nop
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200002c0 	.word	0x200002c0
 8007cbc:	200005e0 	.word	0x200005e0
 8007cc0:	2001dac0 	.word	0x2001dac0
 8007cc4:	2001db64 	.word	0x2001db64
 8007cc8:	2001dae0 	.word	0x2001dae0
 8007ccc:	2001db20 	.word	0x2001db20
 8007cd0:	200005b8 	.word	0x200005b8
 8007cd4:	200005cc 	.word	0x200005cc

08007cd8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007cdc:	4802      	ldr	r0, [pc, #8]	; (8007ce8 <cppFlip100ns+0x10>)
 8007cde:	f7fa fc25 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007ce2:	bf00      	nop
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200002c0 	.word	0x200002c0

08007cec <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007cf0:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <cppFlip10ms+0x48>)
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <cppFlip10ms+0x48>)
 8007cfa:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <cppFlip10ms+0x48>)
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d905      	bls.n	8007d10 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007d04:	480c      	ldr	r0, [pc, #48]	; (8007d38 <cppFlip10ms+0x4c>)
 8007d06:	f7fd ffa7 	bl	8005c58 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <cppFlip10ms+0x48>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007d10:	480a      	ldr	r0, [pc, #40]	; (8007d3c <cppFlip10ms+0x50>)
 8007d12:	f7fd f953 	bl	8004fbc <_ZN5Motor20getLeftCounterPeriodEv>
 8007d16:	4603      	mov	r3, r0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4809      	ldr	r0, [pc, #36]	; (8007d40 <cppFlip10ms+0x54>)
 8007d1c:	f7fc fe2c 	bl	8004978 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007d20:	4806      	ldr	r0, [pc, #24]	; (8007d3c <cppFlip10ms+0x50>)
 8007d22:	f7fd f958 	bl	8004fd6 <_ZN5Motor21getRightCounterPeriodEv>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4805      	ldr	r0, [pc, #20]	; (8007d40 <cppFlip10ms+0x54>)
 8007d2c:	f7fc fe5d 	bl	80049ea <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007d30:	bf00      	nop
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	200423d8 	.word	0x200423d8
 8007d38:	2002aaa4 	.word	0x2002aaa4
 8007d3c:	200005cc 	.word	0x200005cc
 8007d40:	200005f4 	.word	0x200005f4
 8007d44:	00000000 	.word	0x00000000

08007d48 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007d4e:	4baf      	ldr	r3, [pc, #700]	; (800800c <cppLoop+0x2c4>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f3bf 8f5b 	dmb	ish
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d015      	beq.n	8007d96 <cppLoop+0x4e>
 8007d6a:	48a8      	ldr	r0, [pc, #672]	; (800800c <cppLoop+0x2c4>)
 8007d6c:	f00c fdb1 	bl	80148d2 <__cxa_guard_acquire>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bf14      	ite	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	2300      	moveq	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <cppLoop+0x4e>
 8007d80:	48a3      	ldr	r0, [pc, #652]	; (8008010 <cppLoop+0x2c8>)
 8007d82:	f7fb ffbe 	bl	8003d02 <_ZN9LineTrace5getKpEv>
 8007d86:	eef0 7a40 	vmov.f32	s15, s0
 8007d8a:	4ba2      	ldr	r3, [pc, #648]	; (8008014 <cppLoop+0x2cc>)
 8007d8c:	edc3 7a00 	vstr	s15, [r3]
 8007d90:	489e      	ldr	r0, [pc, #632]	; (800800c <cppLoop+0x2c4>)
 8007d92:	f00c fdaa 	bl	80148ea <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007d96:	4ba0      	ldr	r3, [pc, #640]	; (8008018 <cppLoop+0x2d0>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f3bf 8f5b 	dmb	ish
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d015      	beq.n	8007dde <cppLoop+0x96>
 8007db2:	4899      	ldr	r0, [pc, #612]	; (8008018 <cppLoop+0x2d0>)
 8007db4:	f00c fd8d 	bl	80148d2 <__cxa_guard_acquire>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bf14      	ite	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <cppLoop+0x96>
 8007dc8:	4891      	ldr	r0, [pc, #580]	; (8008010 <cppLoop+0x2c8>)
 8007dca:	f7fb ffa9 	bl	8003d20 <_ZN9LineTrace5getKiEv>
 8007dce:	eef0 7a40 	vmov.f32	s15, s0
 8007dd2:	4b92      	ldr	r3, [pc, #584]	; (800801c <cppLoop+0x2d4>)
 8007dd4:	edc3 7a00 	vstr	s15, [r3]
 8007dd8:	488f      	ldr	r0, [pc, #572]	; (8008018 <cppLoop+0x2d0>)
 8007dda:	f00c fd86 	bl	80148ea <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007dde:	4b90      	ldr	r3, [pc, #576]	; (8008020 <cppLoop+0x2d8>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f3bf 8f5b 	dmb	ish
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d015      	beq.n	8007e26 <cppLoop+0xde>
 8007dfa:	4889      	ldr	r0, [pc, #548]	; (8008020 <cppLoop+0x2d8>)
 8007dfc:	f00c fd69 	bl	80148d2 <__cxa_guard_acquire>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <cppLoop+0xde>
 8007e10:	487f      	ldr	r0, [pc, #508]	; (8008010 <cppLoop+0x2c8>)
 8007e12:	f7fb ff94 	bl	8003d3e <_ZN9LineTrace5getKdEv>
 8007e16:	eef0 7a40 	vmov.f32	s15, s0
 8007e1a:	4b82      	ldr	r3, [pc, #520]	; (8008024 <cppLoop+0x2dc>)
 8007e1c:	edc3 7a00 	vstr	s15, [r3]
 8007e20:	487f      	ldr	r0, [pc, #508]	; (8008020 <cppLoop+0x2d8>)
 8007e22:	f00c fd62 	bl	80148ea <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007e26:	4b80      	ldr	r3, [pc, #512]	; (8008028 <cppLoop+0x2e0>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f3bf 8f5b 	dmb	ish
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bf0c      	ite	eq
 8007e38:	2301      	moveq	r3, #1
 8007e3a:	2300      	movne	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d015      	beq.n	8007e6e <cppLoop+0x126>
 8007e42:	4879      	ldr	r0, [pc, #484]	; (8008028 <cppLoop+0x2e0>)
 8007e44:	f00c fd45 	bl	80148d2 <__cxa_guard_acquire>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	2300      	moveq	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <cppLoop+0x126>
 8007e58:	486d      	ldr	r0, [pc, #436]	; (8008010 <cppLoop+0x2c8>)
 8007e5a:	f7fb ff98 	bl	8003d8e <_ZN9LineTrace9getKpSlowEv>
 8007e5e:	eef0 7a40 	vmov.f32	s15, s0
 8007e62:	4b72      	ldr	r3, [pc, #456]	; (800802c <cppLoop+0x2e4>)
 8007e64:	edc3 7a00 	vstr	s15, [r3]
 8007e68:	486f      	ldr	r0, [pc, #444]	; (8008028 <cppLoop+0x2e0>)
 8007e6a:	f00c fd3e 	bl	80148ea <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007e6e:	4b70      	ldr	r3, [pc, #448]	; (8008030 <cppLoop+0x2e8>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f3bf 8f5b 	dmb	ish
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d015      	beq.n	8007eb6 <cppLoop+0x16e>
 8007e8a:	4869      	ldr	r0, [pc, #420]	; (8008030 <cppLoop+0x2e8>)
 8007e8c:	f00c fd21 	bl	80148d2 <__cxa_guard_acquire>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <cppLoop+0x16e>
 8007ea0:	485b      	ldr	r0, [pc, #364]	; (8008010 <cppLoop+0x2c8>)
 8007ea2:	f7fb ff83 	bl	8003dac <_ZN9LineTrace9getKiSlowEv>
 8007ea6:	eef0 7a40 	vmov.f32	s15, s0
 8007eaa:	4b62      	ldr	r3, [pc, #392]	; (8008034 <cppLoop+0x2ec>)
 8007eac:	edc3 7a00 	vstr	s15, [r3]
 8007eb0:	485f      	ldr	r0, [pc, #380]	; (8008030 <cppLoop+0x2e8>)
 8007eb2:	f00c fd1a 	bl	80148ea <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007eb6:	4b60      	ldr	r3, [pc, #384]	; (8008038 <cppLoop+0x2f0>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f3bf 8f5b 	dmb	ish
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d015      	beq.n	8007efe <cppLoop+0x1b6>
 8007ed2:	4859      	ldr	r0, [pc, #356]	; (8008038 <cppLoop+0x2f0>)
 8007ed4:	f00c fcfd 	bl	80148d2 <__cxa_guard_acquire>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	bf14      	ite	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	2300      	moveq	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <cppLoop+0x1b6>
 8007ee8:	4849      	ldr	r0, [pc, #292]	; (8008010 <cppLoop+0x2c8>)
 8007eea:	f7fb ff6e 	bl	8003dca <_ZN9LineTrace9getKdSlowEv>
 8007eee:	eef0 7a40 	vmov.f32	s15, s0
 8007ef2:	4b52      	ldr	r3, [pc, #328]	; (800803c <cppLoop+0x2f4>)
 8007ef4:	edc3 7a00 	vstr	s15, [r3]
 8007ef8:	484f      	ldr	r0, [pc, #316]	; (8008038 <cppLoop+0x2f0>)
 8007efa:	f00c fcf6 	bl	80148ea <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007efe:	4b50      	ldr	r3, [pc, #320]	; (8008040 <cppLoop+0x2f8>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f3bf 8f5b 	dmb	ish
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d015      	beq.n	8007f46 <cppLoop+0x1fe>
 8007f1a:	4849      	ldr	r0, [pc, #292]	; (8008040 <cppLoop+0x2f8>)
 8007f1c:	f00c fcd9 	bl	80148d2 <__cxa_guard_acquire>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bf14      	ite	ne
 8007f26:	2301      	movne	r3, #1
 8007f28:	2300      	moveq	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <cppLoop+0x1fe>
 8007f30:	4837      	ldr	r0, [pc, #220]	; (8008010 <cppLoop+0x2c8>)
 8007f32:	f7fb ffb8 	bl	8003ea6 <_ZN9LineTrace17getTargetVelocityEv>
 8007f36:	eef0 7a40 	vmov.f32	s15, s0
 8007f3a:	4b42      	ldr	r3, [pc, #264]	; (8008044 <cppLoop+0x2fc>)
 8007f3c:	edc3 7a00 	vstr	s15, [r3]
 8007f40:	483f      	ldr	r0, [pc, #252]	; (8008040 <cppLoop+0x2f8>)
 8007f42:	f00c fcd2 	bl	80148ea <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007f46:	4b40      	ldr	r3, [pc, #256]	; (8008048 <cppLoop+0x300>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f3bf 8f5b 	dmb	ish
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d015      	beq.n	8007f8e <cppLoop+0x246>
 8007f62:	4839      	ldr	r0, [pc, #228]	; (8008048 <cppLoop+0x300>)
 8007f64:	f00c fcb5 	bl	80148d2 <__cxa_guard_acquire>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <cppLoop+0x246>
 8007f78:	4825      	ldr	r0, [pc, #148]	; (8008010 <cppLoop+0x2c8>)
 8007f7a:	f7fb ffa4 	bl	8003ec6 <_ZN9LineTrace14getMaxVelocityEv>
 8007f7e:	eef0 7a40 	vmov.f32	s15, s0
 8007f82:	4b32      	ldr	r3, [pc, #200]	; (800804c <cppLoop+0x304>)
 8007f84:	edc3 7a00 	vstr	s15, [r3]
 8007f88:	482f      	ldr	r0, [pc, #188]	; (8008048 <cppLoop+0x300>)
 8007f8a:	f00c fcae 	bl	80148ea <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007f8e:	4b30      	ldr	r3, [pc, #192]	; (8008050 <cppLoop+0x308>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	f3bf 8f5b 	dmb	ish
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d015      	beq.n	8007fd6 <cppLoop+0x28e>
 8007faa:	4829      	ldr	r0, [pc, #164]	; (8008050 <cppLoop+0x308>)
 8007fac:	f00c fc91 	bl	80148d2 <__cxa_guard_acquire>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	bf14      	ite	ne
 8007fb6:	2301      	movne	r3, #1
 8007fb8:	2300      	moveq	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <cppLoop+0x28e>
 8007fc0:	4813      	ldr	r0, [pc, #76]	; (8008010 <cppLoop+0x2c8>)
 8007fc2:	f7fb ff90 	bl	8003ee6 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007fc6:	eef0 7a40 	vmov.f32	s15, s0
 8007fca:	4b22      	ldr	r3, [pc, #136]	; (8008054 <cppLoop+0x30c>)
 8007fcc:	edc3 7a00 	vstr	s15, [r3]
 8007fd0:	481f      	ldr	r0, [pc, #124]	; (8008050 <cppLoop+0x308>)
 8007fd2:	f00c fc8a 	bl	80148ea <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007fd6:	4b20      	ldr	r3, [pc, #128]	; (8008058 <cppLoop+0x310>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f3bf 8f5b 	dmb	ish
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2301      	moveq	r3, #1
 8007fea:	2300      	movne	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d03f      	beq.n	8008072 <cppLoop+0x32a>
 8007ff2:	4819      	ldr	r0, [pc, #100]	; (8008058 <cppLoop+0x310>)
 8007ff4:	f00c fc6d 	bl	80148d2 <__cxa_guard_acquire>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf14      	ite	ne
 8007ffe:	2301      	movne	r3, #1
 8008000:	2300      	moveq	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d034      	beq.n	8008072 <cppLoop+0x32a>
 8008008:	e028      	b.n	800805c <cppLoop+0x314>
 800800a:	bf00      	nop
 800800c:	200423e8 	.word	0x200423e8
 8008010:	2001db64 	.word	0x2001db64
 8008014:	200423e4 	.word	0x200423e4
 8008018:	200423f0 	.word	0x200423f0
 800801c:	200423ec 	.word	0x200423ec
 8008020:	200423f8 	.word	0x200423f8
 8008024:	200423f4 	.word	0x200423f4
 8008028:	20042400 	.word	0x20042400
 800802c:	200423fc 	.word	0x200423fc
 8008030:	20042408 	.word	0x20042408
 8008034:	20042404 	.word	0x20042404
 8008038:	20042410 	.word	0x20042410
 800803c:	2004240c 	.word	0x2004240c
 8008040:	20042418 	.word	0x20042418
 8008044:	20042414 	.word	0x20042414
 8008048:	20042420 	.word	0x20042420
 800804c:	2004241c 	.word	0x2004241c
 8008050:	20042428 	.word	0x20042428
 8008054:	20042424 	.word	0x20042424
 8008058:	20042430 	.word	0x20042430
 800805c:	48b6      	ldr	r0, [pc, #728]	; (8008338 <cppLoop+0x5f0>)
 800805e:	f7fb ff52 	bl	8003f06 <_ZN9LineTrace14getMinVelocityEv>
 8008062:	eef0 7a40 	vmov.f32	s15, s0
 8008066:	4bb5      	ldr	r3, [pc, #724]	; (800833c <cppLoop+0x5f4>)
 8008068:	edc3 7a00 	vstr	s15, [r3]
 800806c:	48b4      	ldr	r0, [pc, #720]	; (8008340 <cppLoop+0x5f8>)
 800806e:	f00c fc3c 	bl	80148ea <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8008072:	4bb4      	ldr	r3, [pc, #720]	; (8008344 <cppLoop+0x5fc>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f3bf 8f5b 	dmb	ish
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <cppLoop+0x372>
 800808e:	48ad      	ldr	r0, [pc, #692]	; (8008344 <cppLoop+0x5fc>)
 8008090:	f00c fc1f 	bl	80148d2 <__cxa_guard_acquire>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <cppLoop+0x372>
 80080a4:	48a4      	ldr	r0, [pc, #656]	; (8008338 <cppLoop+0x5f0>)
 80080a6:	f7fb ff3e 	bl	8003f26 <_ZN9LineTrace15getMinVelocity2Ev>
 80080aa:	eef0 7a40 	vmov.f32	s15, s0
 80080ae:	4ba6      	ldr	r3, [pc, #664]	; (8008348 <cppLoop+0x600>)
 80080b0:	edc3 7a00 	vstr	s15, [r3]
 80080b4:	48a3      	ldr	r0, [pc, #652]	; (8008344 <cppLoop+0x5fc>)
 80080b6:	f00c fc18 	bl	80148ea <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80080ba:	4ba4      	ldr	r3, [pc, #656]	; (800834c <cppLoop+0x604>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f3bf 8f5b 	dmb	ish
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bf0c      	ite	eq
 80080cc:	2301      	moveq	r3, #1
 80080ce:	2300      	movne	r3, #0
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d015      	beq.n	8008102 <cppLoop+0x3ba>
 80080d6:	489d      	ldr	r0, [pc, #628]	; (800834c <cppLoop+0x604>)
 80080d8:	f00c fbfb 	bl	80148d2 <__cxa_guard_acquire>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bf14      	ite	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	2300      	moveq	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <cppLoop+0x3ba>
 80080ec:	4892      	ldr	r0, [pc, #584]	; (8008338 <cppLoop+0x5f0>)
 80080ee:	f7fb ff5e 	bl	8003fae <_ZN9LineTrace9getMaxAccEv>
 80080f2:	eef0 7a40 	vmov.f32	s15, s0
 80080f6:	4b96      	ldr	r3, [pc, #600]	; (8008350 <cppLoop+0x608>)
 80080f8:	edc3 7a00 	vstr	s15, [r3]
 80080fc:	4893      	ldr	r0, [pc, #588]	; (800834c <cppLoop+0x604>)
 80080fe:	f00c fbf4 	bl	80148ea <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8008102:	4b94      	ldr	r3, [pc, #592]	; (8008354 <cppLoop+0x60c>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	f3bf 8f5b 	dmb	ish
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf0c      	ite	eq
 8008114:	2301      	moveq	r3, #1
 8008116:	2300      	movne	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d015      	beq.n	800814a <cppLoop+0x402>
 800811e:	488d      	ldr	r0, [pc, #564]	; (8008354 <cppLoop+0x60c>)
 8008120:	f00c fbd7 	bl	80148d2 <__cxa_guard_acquire>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	bf14      	ite	ne
 800812a:	2301      	movne	r3, #1
 800812c:	2300      	moveq	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <cppLoop+0x402>
 8008134:	4880      	ldr	r0, [pc, #512]	; (8008338 <cppLoop+0x5f0>)
 8008136:	f7fb ff70 	bl	800401a <_ZN9LineTrace9getMaxDecEv>
 800813a:	eef0 7a40 	vmov.f32	s15, s0
 800813e:	4b86      	ldr	r3, [pc, #536]	; (8008358 <cppLoop+0x610>)
 8008140:	edc3 7a00 	vstr	s15, [r3]
 8008144:	4883      	ldr	r0, [pc, #524]	; (8008354 <cppLoop+0x60c>)
 8008146:	f00c fbd0 	bl	80148ea <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 800814a:	4b84      	ldr	r3, [pc, #528]	; (800835c <cppLoop+0x614>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f3bf 8f5b 	dmb	ish
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d015      	beq.n	8008192 <cppLoop+0x44a>
 8008166:	487d      	ldr	r0, [pc, #500]	; (800835c <cppLoop+0x614>)
 8008168:	f00c fbb3 	bl	80148d2 <__cxa_guard_acquire>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf14      	ite	ne
 8008172:	2301      	movne	r3, #1
 8008174:	2300      	moveq	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <cppLoop+0x44a>
 800817c:	486e      	ldr	r0, [pc, #440]	; (8008338 <cppLoop+0x5f0>)
 800817e:	f7fb ff3a 	bl	8003ff6 <_ZN9LineTrace10getMaxAcc2Ev>
 8008182:	eef0 7a40 	vmov.f32	s15, s0
 8008186:	4b76      	ldr	r3, [pc, #472]	; (8008360 <cppLoop+0x618>)
 8008188:	edc3 7a00 	vstr	s15, [r3]
 800818c:	4873      	ldr	r0, [pc, #460]	; (800835c <cppLoop+0x614>)
 800818e:	f00c fbac 	bl	80148ea <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008192:	4b74      	ldr	r3, [pc, #464]	; (8008364 <cppLoop+0x61c>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f3bf 8f5b 	dmb	ish
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bf0c      	ite	eq
 80081a4:	2301      	moveq	r3, #1
 80081a6:	2300      	movne	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <cppLoop+0x492>
 80081ae:	486d      	ldr	r0, [pc, #436]	; (8008364 <cppLoop+0x61c>)
 80081b0:	f00c fb8f 	bl	80148d2 <__cxa_guard_acquire>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bf14      	ite	ne
 80081ba:	2301      	movne	r3, #1
 80081bc:	2300      	moveq	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <cppLoop+0x492>
 80081c4:	485c      	ldr	r0, [pc, #368]	; (8008338 <cppLoop+0x5f0>)
 80081c6:	f7fb ff04 	bl	8003fd2 <_ZN9LineTrace10getMaxDec2Ev>
 80081ca:	eef0 7a40 	vmov.f32	s15, s0
 80081ce:	4b66      	ldr	r3, [pc, #408]	; (8008368 <cppLoop+0x620>)
 80081d0:	edc3 7a00 	vstr	s15, [r3]
 80081d4:	4863      	ldr	r0, [pc, #396]	; (8008364 <cppLoop+0x61c>)
 80081d6:	f00c fb88 	bl	80148ea <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80081da:	4864      	ldr	r0, [pc, #400]	; (800836c <cppLoop+0x624>)
 80081dc:	f7fd f9aa 	bl	8005534 <_ZN12RotarySwitch8getValueEv>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b0f      	cmp	r3, #15
 80081e4:	f201 8546 	bhi.w	8009c74 <cppLoop+0x1f2c>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <cppLoop+0x4a8>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008231 	.word	0x08008231
 80081f4:	080085b5 	.word	0x080085b5
 80081f8:	080086d1 	.word	0x080086d1
 80081fc:	08008823 	.word	0x08008823
 8008200:	080088fd 	.word	0x080088fd
 8008204:	08008b8d 	.word	0x08008b8d
 8008208:	08008cc9 	.word	0x08008cc9
 800820c:	08008f4d 	.word	0x08008f4d
 8008210:	08009197 	.word	0x08009197
 8008214:	08009427 	.word	0x08009427
 8008218:	080094e3 	.word	0x080094e3
 800821c:	080095d9 	.word	0x080095d9
 8008220:	0800965f 	.word	0x0800965f
 8008224:	08009725 	.word	0x08009725
 8008228:	080097eb 	.word	0x080097eb
 800822c:	08009905 	.word	0x08009905
	case 0:
		led.fullColor('W');
 8008230:	2157      	movs	r1, #87	; 0x57
 8008232:	484f      	ldr	r0, [pc, #316]	; (8008370 <cppLoop+0x628>)
 8008234:	f7fa f80e 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008238:	f7f8 ff32 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800823c:	2100      	movs	r1, #0
 800823e:	2000      	movs	r0, #0
 8008240:	f7f8 ff3e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 8008244:	483c      	ldr	r0, [pc, #240]	; (8008338 <cppLoop+0x5f0>)
 8008246:	f7fb fda2 	bl	8003d8e <_ZN9LineTrace9getKpSlowEv>
 800824a:	eeb0 7a40 	vmov.f32	s14, s0
 800824e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008374 <cppLoop+0x62c>
 8008252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008256:	eeb0 0a67 	vmov.f32	s0, s15
 800825a:	f7fa fc27 	bl	8002aac <_ZSt3absf>
 800825e:	ee10 3a10 	vmov	r3, s0
 8008262:	4618      	mov	r0, r3
 8008264:	f7f8 f988 	bl	8000578 <__aeabi_f2d>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	461a      	mov	r2, r3
 800826e:	4623      	mov	r3, r4
 8008270:	4841      	ldr	r0, [pc, #260]	; (8008378 <cppLoop+0x630>)
 8008272:	f7f8 ff4f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008276:	2101      	movs	r1, #1
 8008278:	2000      	movs	r0, #0
 800827a:	f7f8 ff21 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 800827e:	482e      	ldr	r0, [pc, #184]	; (8008338 <cppLoop+0x5f0>)
 8008280:	f7fb fd94 	bl	8003dac <_ZN9LineTrace9getKiSlowEv>
 8008284:	eeb0 7a40 	vmov.f32	s14, s0
 8008288:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800837c <cppLoop+0x634>
 800828c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008290:	eeb0 0a67 	vmov.f32	s0, s15
 8008294:	f7fa fc0a 	bl	8002aac <_ZSt3absf>
 8008298:	ee10 3a10 	vmov	r3, s0
 800829c:	4618      	mov	r0, r3
 800829e:	f7f8 f96b 	bl	8000578 <__aeabi_f2d>
 80082a2:	4605      	mov	r5, r0
 80082a4:	460e      	mov	r6, r1
 80082a6:	4824      	ldr	r0, [pc, #144]	; (8008338 <cppLoop+0x5f0>)
 80082a8:	f7fb fd8f 	bl	8003dca <_ZN9LineTrace9getKdSlowEv>
 80082ac:	eeb0 7a40 	vmov.f32	s14, s0
 80082b0:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008380 <cppLoop+0x638>
 80082b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b8:	eeb0 0a67 	vmov.f32	s0, s15
 80082bc:	f7fa fbf6 	bl	8002aac <_ZSt3absf>
 80082c0:	ee10 3a10 	vmov	r3, s0
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7f8 f957 	bl	8000578 <__aeabi_f2d>
 80082ca:	4603      	mov	r3, r0
 80082cc:	460c      	mov	r4, r1
 80082ce:	e9cd 3400 	strd	r3, r4, [sp]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4633      	mov	r3, r6
 80082d6:	482b      	ldr	r0, [pc, #172]	; (8008384 <cppLoop+0x63c>)
 80082d8:	f7f8 ff1c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80082dc:	482a      	ldr	r0, [pc, #168]	; (8008388 <cppLoop+0x640>)
 80082de:	f7f9 ff55 	bl	800218c <_ZN8JoyStick8getValueEv>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	bf0c      	ite	eq
 80082e8:	2301      	moveq	r3, #1
 80082ea:	2300      	movne	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d04e      	beq.n	8008390 <cppLoop+0x648>
			led.LR(-1, 1);
 80082f2:	2201      	movs	r2, #1
 80082f4:	f04f 31ff 	mov.w	r1, #4294967295
 80082f8:	481d      	ldr	r0, [pc, #116]	; (8008370 <cppLoop+0x628>)
 80082fa:	f7fa f867 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008302:	f001 fe01 	bl	8009f08 <HAL_Delay>

			selector++;
 8008306:	4b21      	ldr	r3, [pc, #132]	; (800838c <cppLoop+0x644>)
 8008308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800830c:	b29b      	uxth	r3, r3
 800830e:	3301      	adds	r3, #1
 8008310:	b29b      	uxth	r3, r3
 8008312:	b21a      	sxth	r2, r3
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <cppLoop+0x644>)
 8008316:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008318:	4b1c      	ldr	r3, [pc, #112]	; (800838c <cppLoop+0x644>)
 800831a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800831e:	2b02      	cmp	r3, #2
 8008320:	dd02      	ble.n	8008328 <cppLoop+0x5e0>
 8008322:	4b1a      	ldr	r3, [pc, #104]	; (800838c <cppLoop+0x644>)
 8008324:	2200      	movs	r2, #0
 8008326:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008328:	2200      	movs	r2, #0
 800832a:	f04f 31ff 	mov.w	r1, #4294967295
 800832e:	4810      	ldr	r0, [pc, #64]	; (8008370 <cppLoop+0x628>)
 8008330:	f7fa f84c 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008334:	f001 bca0 	b.w	8009c78 <cppLoop+0x1f30>
 8008338:	2001db64 	.word	0x2001db64
 800833c:	2004242c 	.word	0x2004242c
 8008340:	20042430 	.word	0x20042430
 8008344:	20042438 	.word	0x20042438
 8008348:	20042434 	.word	0x20042434
 800834c:	20042440 	.word	0x20042440
 8008350:	2004243c 	.word	0x2004243c
 8008354:	20042448 	.word	0x20042448
 8008358:	20042444 	.word	0x20042444
 800835c:	20042450 	.word	0x20042450
 8008360:	2004244c 	.word	0x2004244c
 8008364:	20042458 	.word	0x20042458
 8008368:	20042454 	.word	0x20042454
 800836c:	200005c8 	.word	0x200005c8
 8008370:	200005d0 	.word	0x200005d0
 8008374:	447a0000 	.word	0x447a0000
 8008378:	08019ff0 	.word	0x08019ff0
 800837c:	42c80000 	.word	0x42c80000
 8008380:	461c4000 	.word	0x461c4000
 8008384:	08019ffc 	.word	0x08019ffc
 8008388:	200005c4 	.word	0x200005c4
 800838c:	200423da 	.word	0x200423da
		else if(joy_stick.getValue() == JOY_R){
 8008390:	48bd      	ldr	r0, [pc, #756]	; (8008688 <cppLoop+0x940>)
 8008392:	f7f9 fefb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008396:	4603      	mov	r3, r0
 8008398:	2b10      	cmp	r3, #16
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d059      	beq.n	800845a <cppLoop+0x712>
			led.LR(-1, 1);
 80083a6:	2201      	movs	r2, #1
 80083a8:	f04f 31ff 	mov.w	r1, #4294967295
 80083ac:	48b7      	ldr	r0, [pc, #732]	; (800868c <cppLoop+0x944>)
 80083ae:	f7fa f80d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083b2:	2064      	movs	r0, #100	; 0x64
 80083b4:	f001 fda8 	bl	8009f08 <HAL_Delay>
			if(selector == 0){
 80083b8:	4bb5      	ldr	r3, [pc, #724]	; (8008690 <cppLoop+0x948>)
 80083ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d113      	bne.n	80083ea <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80083c2:	4bb4      	ldr	r3, [pc, #720]	; (8008694 <cppLoop+0x94c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f8 f8d6 	bl	8000578 <__aeabi_f2d>
 80083cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008670 <cppLoop+0x928>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f7 ff73 	bl	80002bc <__adddf3>
 80083d6:	4603      	mov	r3, r0
 80083d8:	460c      	mov	r4, r1
 80083da:	4618      	mov	r0, r3
 80083dc:	4621      	mov	r1, r4
 80083de:	f7f8 fc1b 	bl	8000c18 <__aeabi_d2f>
 80083e2:	4602      	mov	r2, r0
 80083e4:	4bab      	ldr	r3, [pc, #684]	; (8008694 <cppLoop+0x94c>)
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e02b      	b.n	8008442 <cppLoop+0x6fa>
			else if(selector == 1){
 80083ea:	4ba9      	ldr	r3, [pc, #676]	; (8008690 <cppLoop+0x948>)
 80083ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d113      	bne.n	800841c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80083f4:	4ba8      	ldr	r3, [pc, #672]	; (8008698 <cppLoop+0x950>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7f8 f8bd 	bl	8000578 <__aeabi_f2d>
 80083fe:	a39e      	add	r3, pc, #632	; (adr r3, 8008678 <cppLoop+0x930>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f7 ff5a 	bl	80002bc <__adddf3>
 8008408:	4603      	mov	r3, r0
 800840a:	460c      	mov	r4, r1
 800840c:	4618      	mov	r0, r3
 800840e:	4621      	mov	r1, r4
 8008410:	f7f8 fc02 	bl	8000c18 <__aeabi_d2f>
 8008414:	4602      	mov	r2, r0
 8008416:	4ba0      	ldr	r3, [pc, #640]	; (8008698 <cppLoop+0x950>)
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	e012      	b.n	8008442 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 800841c:	4b9f      	ldr	r3, [pc, #636]	; (800869c <cppLoop+0x954>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f7f8 f8a9 	bl	8000578 <__aeabi_f2d>
 8008426:	a396      	add	r3, pc, #600	; (adr r3, 8008680 <cppLoop+0x938>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f7 ff46 	bl	80002bc <__adddf3>
 8008430:	4603      	mov	r3, r0
 8008432:	460c      	mov	r4, r1
 8008434:	4618      	mov	r0, r3
 8008436:	4621      	mov	r1, r4
 8008438:	f7f8 fbee 	bl	8000c18 <__aeabi_d2f>
 800843c:	4602      	mov	r2, r0
 800843e:	4b97      	ldr	r3, [pc, #604]	; (800869c <cppLoop+0x954>)
 8008440:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008442:	2152      	movs	r1, #82	; 0x52
 8008444:	4891      	ldr	r0, [pc, #580]	; (800868c <cppLoop+0x944>)
 8008446:	f7f9 ff05 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800844a:	2200      	movs	r2, #0
 800844c:	f04f 31ff 	mov.w	r1, #4294967295
 8008450:	488e      	ldr	r0, [pc, #568]	; (800868c <cppLoop+0x944>)
 8008452:	f7f9 ffbb 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008456:	f001 bc0f 	b.w	8009c78 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 800845a:	488b      	ldr	r0, [pc, #556]	; (8008688 <cppLoop+0x940>)
 800845c:	f7f9 fe96 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008460:	4603      	mov	r3, r0
 8008462:	2b01      	cmp	r3, #1
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d059      	beq.n	8008524 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008470:	2201      	movs	r2, #1
 8008472:	f04f 31ff 	mov.w	r1, #4294967295
 8008476:	4885      	ldr	r0, [pc, #532]	; (800868c <cppLoop+0x944>)
 8008478:	f7f9 ffa8 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800847c:	2064      	movs	r0, #100	; 0x64
 800847e:	f001 fd43 	bl	8009f08 <HAL_Delay>
			if(selector == 0){
 8008482:	4b83      	ldr	r3, [pc, #524]	; (8008690 <cppLoop+0x948>)
 8008484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d113      	bne.n	80084b4 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 800848c:	4b81      	ldr	r3, [pc, #516]	; (8008694 <cppLoop+0x94c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f7f8 f871 	bl	8000578 <__aeabi_f2d>
 8008496:	a376      	add	r3, pc, #472	; (adr r3, 8008670 <cppLoop+0x928>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f7 ff0c 	bl	80002b8 <__aeabi_dsub>
 80084a0:	4603      	mov	r3, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	4618      	mov	r0, r3
 80084a6:	4621      	mov	r1, r4
 80084a8:	f7f8 fbb6 	bl	8000c18 <__aeabi_d2f>
 80084ac:	4602      	mov	r2, r0
 80084ae:	4b79      	ldr	r3, [pc, #484]	; (8008694 <cppLoop+0x94c>)
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e02b      	b.n	800850c <cppLoop+0x7c4>
			else if(selector == 1){
 80084b4:	4b76      	ldr	r3, [pc, #472]	; (8008690 <cppLoop+0x948>)
 80084b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d113      	bne.n	80084e6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 80084be:	4b76      	ldr	r3, [pc, #472]	; (8008698 <cppLoop+0x950>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7f8 f858 	bl	8000578 <__aeabi_f2d>
 80084c8:	a36b      	add	r3, pc, #428	; (adr r3, 8008678 <cppLoop+0x930>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f7 fef3 	bl	80002b8 <__aeabi_dsub>
 80084d2:	4603      	mov	r3, r0
 80084d4:	460c      	mov	r4, r1
 80084d6:	4618      	mov	r0, r3
 80084d8:	4621      	mov	r1, r4
 80084da:	f7f8 fb9d 	bl	8000c18 <__aeabi_d2f>
 80084de:	4602      	mov	r2, r0
 80084e0:	4b6d      	ldr	r3, [pc, #436]	; (8008698 <cppLoop+0x950>)
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e012      	b.n	800850c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80084e6:	4b6d      	ldr	r3, [pc, #436]	; (800869c <cppLoop+0x954>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f8 f844 	bl	8000578 <__aeabi_f2d>
 80084f0:	a363      	add	r3, pc, #396	; (adr r3, 8008680 <cppLoop+0x938>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fedf 	bl	80002b8 <__aeabi_dsub>
 80084fa:	4603      	mov	r3, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	4618      	mov	r0, r3
 8008500:	4621      	mov	r1, r4
 8008502:	f7f8 fb89 	bl	8000c18 <__aeabi_d2f>
 8008506:	4602      	mov	r2, r0
 8008508:	4b64      	ldr	r3, [pc, #400]	; (800869c <cppLoop+0x954>)
 800850a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800850c:	2152      	movs	r1, #82	; 0x52
 800850e:	485f      	ldr	r0, [pc, #380]	; (800868c <cppLoop+0x944>)
 8008510:	f7f9 fea0 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008514:	2200      	movs	r2, #0
 8008516:	f04f 31ff 	mov.w	r1, #4294967295
 800851a:	485c      	ldr	r0, [pc, #368]	; (800868c <cppLoop+0x944>)
 800851c:	f7f9 ff56 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008520:	f001 bbaa 	b.w	8009c78 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 8008524:	4858      	ldr	r0, [pc, #352]	; (8008688 <cppLoop+0x940>)
 8008526:	f7f9 fe31 	bl	800218c <_ZN8JoyStick8getValueEv>
 800852a:	4603      	mov	r3, r0
 800852c:	2b02      	cmp	r3, #2
 800852e:	bf0c      	ite	eq
 8008530:	2301      	moveq	r3, #1
 8008532:	2300      	movne	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	f001 839e 	beq.w	8009c78 <cppLoop+0x1f30>
			led.LR(-1, 1);
 800853c:	2201      	movs	r2, #1
 800853e:	f04f 31ff 	mov.w	r1, #4294967295
 8008542:	4852      	ldr	r0, [pc, #328]	; (800868c <cppLoop+0x944>)
 8008544:	f7f9 ff42 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008548:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800854c:	f001 fcdc 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008550:	2300      	movs	r3, #0
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <cppLoop+0x94c>)
 8008556:	2201      	movs	r2, #1
 8008558:	4951      	ldr	r1, [pc, #324]	; (80086a0 <cppLoop+0x958>)
 800855a:	4852      	ldr	r0, [pc, #328]	; (80086a4 <cppLoop+0x95c>)
 800855c:	f7f9 f98e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008560:	2300      	movs	r3, #0
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	4b4c      	ldr	r3, [pc, #304]	; (8008698 <cppLoop+0x950>)
 8008566:	2201      	movs	r2, #1
 8008568:	494f      	ldr	r1, [pc, #316]	; (80086a8 <cppLoop+0x960>)
 800856a:	484e      	ldr	r0, [pc, #312]	; (80086a4 <cppLoop+0x95c>)
 800856c:	f7f9 f986 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008570:	2300      	movs	r3, #0
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4b49      	ldr	r3, [pc, #292]	; (800869c <cppLoop+0x954>)
 8008576:	2201      	movs	r2, #1
 8008578:	494c      	ldr	r1, [pc, #304]	; (80086ac <cppLoop+0x964>)
 800857a:	484a      	ldr	r0, [pc, #296]	; (80086a4 <cppLoop+0x95c>)
 800857c:	f7f9 f97e 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008580:	4b44      	ldr	r3, [pc, #272]	; (8008694 <cppLoop+0x94c>)
 8008582:	edd3 7a00 	vldr	s15, [r3]
 8008586:	4b44      	ldr	r3, [pc, #272]	; (8008698 <cppLoop+0x950>)
 8008588:	ed93 7a00 	vldr	s14, [r3]
 800858c:	4b43      	ldr	r3, [pc, #268]	; (800869c <cppLoop+0x954>)
 800858e:	edd3 6a00 	vldr	s13, [r3]
 8008592:	eeb0 1a66 	vmov.f32	s2, s13
 8008596:	eef0 0a47 	vmov.f32	s1, s14
 800859a:	eeb0 0a67 	vmov.f32	s0, s15
 800859e:	4844      	ldr	r0, [pc, #272]	; (80086b0 <cppLoop+0x968>)
 80085a0:	f7fb fbdc 	bl	8003d5c <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 80085a4:	2200      	movs	r2, #0
 80085a6:	f04f 31ff 	mov.w	r1, #4294967295
 80085aa:	4838      	ldr	r0, [pc, #224]	; (800868c <cppLoop+0x944>)
 80085ac:	f7f9 ff0e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80085b0:	f001 bb62 	b.w	8009c78 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 80085b4:	2143      	movs	r1, #67	; 0x43
 80085b6:	4835      	ldr	r0, [pc, #212]	; (800868c <cppLoop+0x944>)
 80085b8:	f7f9 fe4c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085bc:	f7f8 fd70 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085c0:	2100      	movs	r1, #0
 80085c2:	2000      	movs	r0, #0
 80085c4:	f7f8 fd7c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80085c8:	483a      	ldr	r0, [pc, #232]	; (80086b4 <cppLoop+0x96c>)
 80085ca:	f7f8 fda3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085ce:	2101      	movs	r1, #1
 80085d0:	2000      	movs	r0, #0
 80085d2:	f7f8 fd75 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80085d6:	4b38      	ldr	r3, [pc, #224]	; (80086b8 <cppLoop+0x970>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f7 ffcc 	bl	8000578 <__aeabi_f2d>
 80085e0:	4603      	mov	r3, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	461a      	mov	r2, r3
 80085e6:	4623      	mov	r3, r4
 80085e8:	4834      	ldr	r0, [pc, #208]	; (80086bc <cppLoop+0x974>)
 80085ea:	f7f8 fd93 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80085ee:	4826      	ldr	r0, [pc, #152]	; (8008688 <cppLoop+0x940>)
 80085f0:	f7f9 fdcc 	bl	800218c <_ZN8JoyStick8getValueEv>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	bf0c      	ite	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	2300      	movne	r3, #0
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	f001 833b 	beq.w	8009c7c <cppLoop+0x1f34>
			HAL_Delay(500);
 8008606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800860a:	f001 fc7d 	bl	8009f08 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800860e:	4b2a      	ldr	r3, [pc, #168]	; (80086b8 <cppLoop+0x970>)
 8008610:	edd3 7a00 	vldr	s15, [r3]
 8008614:	eeb0 0a67 	vmov.f32	s0, s15
 8008618:	4825      	ldr	r0, [pc, #148]	; (80086b0 <cppLoop+0x968>)
 800861a:	f7fb fbf4 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800861e:	f04f 32ff 	mov.w	r2, #4294967295
 8008622:	2101      	movs	r1, #1
 8008624:	4819      	ldr	r0, [pc, #100]	; (800868c <cppLoop+0x944>)
 8008626:	f7f9 fed1 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800862a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800862e:	f001 fc6b 	bl	8009f08 <HAL_Delay>
			logger.start();
 8008632:	4823      	ldr	r0, [pc, #140]	; (80086c0 <cppLoop+0x978>)
 8008634:	f7fc fbbd 	bl	8004db2 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008638:	2100      	movs	r1, #0
 800863a:	481d      	ldr	r0, [pc, #116]	; (80086b0 <cppLoop+0x968>)
 800863c:	f7fb fe26 	bl	800428c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008640:	481b      	ldr	r0, [pc, #108]	; (80086b0 <cppLoop+0x968>)
 8008642:	f7fb fe67 	bl	8004314 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 8008646:	481e      	ldr	r0, [pc, #120]	; (80086c0 <cppLoop+0x978>)
 8008648:	f7fc fbc3 	bl	8004dd2 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 800864c:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <cppLoop+0x97c>)
 800864e:	491e      	ldr	r1, [pc, #120]	; (80086c8 <cppLoop+0x980>)
 8008650:	481b      	ldr	r0, [pc, #108]	; (80086c0 <cppLoop+0x978>)
 8008652:	f7fc fab9 	bl	8004bc8 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 8008656:	4a1d      	ldr	r2, [pc, #116]	; (80086cc <cppLoop+0x984>)
 8008658:	491b      	ldr	r1, [pc, #108]	; (80086c8 <cppLoop+0x980>)
 800865a:	4819      	ldr	r0, [pc, #100]	; (80086c0 <cppLoop+0x978>)
 800865c:	f7fc faca 	bl	8004bf4 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	2100      	movs	r1, #0
 8008666:	4809      	ldr	r0, [pc, #36]	; (800868c <cppLoop+0x944>)
 8008668:	f7f9 feb0 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 800866c:	f001 bb06 	b.w	8009c7c <cppLoop+0x1f34>
 8008670:	88e368f1 	.word	0x88e368f1
 8008674:	3ee4f8b5 	.word	0x3ee4f8b5
 8008678:	eb1c432d 	.word	0xeb1c432d
 800867c:	3f1a36e2 	.word	0x3f1a36e2
 8008680:	a0b5ed8d 	.word	0xa0b5ed8d
 8008684:	3eb0c6f7 	.word	0x3eb0c6f7
 8008688:	200005c4 	.word	0x200005c4
 800868c:	200005d0 	.word	0x200005d0
 8008690:	200423da 	.word	0x200423da
 8008694:	200423fc 	.word	0x200423fc
 8008698:	20042404 	.word	0x20042404
 800869c:	2004240c 	.word	0x2004240c
 80086a0:	0801a00c 	.word	0x0801a00c
 80086a4:	0801a018 	.word	0x0801a018
 80086a8:	0801a020 	.word	0x0801a020
 80086ac:	0801a02c 	.word	0x0801a02c
 80086b0:	2001db64 	.word	0x2001db64
 80086b4:	0801a038 	.word	0x0801a038
 80086b8:	20042414 	.word	0x20042414
 80086bc:	0801a044 	.word	0x0801a044
 80086c0:	200005f4 	.word	0x200005f4
 80086c4:	0801a050 	.word	0x0801a050
 80086c8:	0801a05c 	.word	0x0801a05c
 80086cc:	0801a068 	.word	0x0801a068

	case 2:
		led.fullColor('B');
 80086d0:	2142      	movs	r1, #66	; 0x42
 80086d2:	48b9      	ldr	r0, [pc, #740]	; (80089b8 <cppLoop+0xc70>)
 80086d4:	f7f9 fdbe 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80086d8:	f7f8 fce2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086dc:	2100      	movs	r1, #0
 80086de:	2000      	movs	r0, #0
 80086e0:	f7f8 fcee 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80086e4:	48b5      	ldr	r0, [pc, #724]	; (80089bc <cppLoop+0xc74>)
 80086e6:	f7f8 fd15 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086ea:	2101      	movs	r1, #1
 80086ec:	2000      	movs	r0, #0
 80086ee:	f7f8 fce7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80086f2:	4bb3      	ldr	r3, [pc, #716]	; (80089c0 <cppLoop+0xc78>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f7 ff3e 	bl	8000578 <__aeabi_f2d>
 80086fc:	4603      	mov	r3, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	461a      	mov	r2, r3
 8008702:	4623      	mov	r3, r4
 8008704:	48af      	ldr	r0, [pc, #700]	; (80089c4 <cppLoop+0xc7c>)
 8008706:	f7f8 fd05 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800870a:	48af      	ldr	r0, [pc, #700]	; (80089c8 <cppLoop+0xc80>)
 800870c:	f7f9 fd3e 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008710:	4603      	mov	r3, r0
 8008712:	2b10      	cmp	r3, #16
 8008714:	bf0c      	ite	eq
 8008716:	2301      	moveq	r3, #1
 8008718:	2300      	movne	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d023      	beq.n	8008768 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008720:	2201      	movs	r2, #1
 8008722:	f04f 31ff 	mov.w	r1, #4294967295
 8008726:	48a4      	ldr	r0, [pc, #656]	; (80089b8 <cppLoop+0xc70>)
 8008728:	f7f9 fe50 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800872c:	2064      	movs	r0, #100	; 0x64
 800872e:	f001 fbeb 	bl	8009f08 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008732:	4ba3      	ldr	r3, [pc, #652]	; (80089c0 <cppLoop+0xc78>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f7f7 ff1e 	bl	8000578 <__aeabi_f2d>
 800873c:	a39c      	add	r3, pc, #624	; (adr r3, 80089b0 <cppLoop+0xc68>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f7f7 fdbb 	bl	80002bc <__adddf3>
 8008746:	4603      	mov	r3, r0
 8008748:	460c      	mov	r4, r1
 800874a:	4618      	mov	r0, r3
 800874c:	4621      	mov	r1, r4
 800874e:	f7f8 fa63 	bl	8000c18 <__aeabi_d2f>
 8008752:	4602      	mov	r2, r0
 8008754:	4b9a      	ldr	r3, [pc, #616]	; (80089c0 <cppLoop+0xc78>)
 8008756:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008758:	2200      	movs	r2, #0
 800875a:	f04f 31ff 	mov.w	r1, #4294967295
 800875e:	4896      	ldr	r0, [pc, #600]	; (80089b8 <cppLoop+0xc70>)
 8008760:	f7f9 fe34 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008764:	f001 ba8c 	b.w	8009c80 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 8008768:	4897      	ldr	r0, [pc, #604]	; (80089c8 <cppLoop+0xc80>)
 800876a:	f7f9 fd0f 	bl	800218c <_ZN8JoyStick8getValueEv>
 800876e:	4603      	mov	r3, r0
 8008770:	2b01      	cmp	r3, #1
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d023      	beq.n	80087c6 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800877e:	2201      	movs	r2, #1
 8008780:	f04f 31ff 	mov.w	r1, #4294967295
 8008784:	488c      	ldr	r0, [pc, #560]	; (80089b8 <cppLoop+0xc70>)
 8008786:	f7f9 fe21 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800878a:	2064      	movs	r0, #100	; 0x64
 800878c:	f001 fbbc 	bl	8009f08 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008790:	4b8b      	ldr	r3, [pc, #556]	; (80089c0 <cppLoop+0xc78>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f7f7 feef 	bl	8000578 <__aeabi_f2d>
 800879a:	a385      	add	r3, pc, #532	; (adr r3, 80089b0 <cppLoop+0xc68>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 fd8a 	bl	80002b8 <__aeabi_dsub>
 80087a4:	4603      	mov	r3, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	4618      	mov	r0, r3
 80087aa:	4621      	mov	r1, r4
 80087ac:	f7f8 fa34 	bl	8000c18 <__aeabi_d2f>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4b83      	ldr	r3, [pc, #524]	; (80089c0 <cppLoop+0xc78>)
 80087b4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087b6:	2200      	movs	r2, #0
 80087b8:	f04f 31ff 	mov.w	r1, #4294967295
 80087bc:	487e      	ldr	r0, [pc, #504]	; (80089b8 <cppLoop+0xc70>)
 80087be:	f7f9 fe05 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80087c2:	f001 ba5d 	b.w	8009c80 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 80087c6:	4880      	ldr	r0, [pc, #512]	; (80089c8 <cppLoop+0xc80>)
 80087c8:	f7f9 fce0 	bl	800218c <_ZN8JoyStick8getValueEv>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	bf0c      	ite	eq
 80087d2:	2301      	moveq	r3, #1
 80087d4:	2300      	movne	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f001 8251 	beq.w	8009c80 <cppLoop+0x1f38>
			led.LR(-1, 1);
 80087de:	2201      	movs	r2, #1
 80087e0:	f04f 31ff 	mov.w	r1, #4294967295
 80087e4:	4874      	ldr	r0, [pc, #464]	; (80089b8 <cppLoop+0xc70>)
 80087e6:	f7f9 fdf1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087ee:	f001 fb8b 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80087f2:	2300      	movs	r3, #0
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4b72      	ldr	r3, [pc, #456]	; (80089c0 <cppLoop+0xc78>)
 80087f8:	2201      	movs	r2, #1
 80087fa:	4974      	ldr	r1, [pc, #464]	; (80089cc <cppLoop+0xc84>)
 80087fc:	4874      	ldr	r0, [pc, #464]	; (80089d0 <cppLoop+0xc88>)
 80087fe:	f7f9 f83d 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008802:	4b6f      	ldr	r3, [pc, #444]	; (80089c0 <cppLoop+0xc78>)
 8008804:	edd3 7a00 	vldr	s15, [r3]
 8008808:	eeb0 0a67 	vmov.f32	s0, s15
 800880c:	4871      	ldr	r0, [pc, #452]	; (80089d4 <cppLoop+0xc8c>)
 800880e:	f7fb fafa 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008812:	2200      	movs	r2, #0
 8008814:	f04f 31ff 	mov.w	r1, #4294967295
 8008818:	4867      	ldr	r0, [pc, #412]	; (80089b8 <cppLoop+0xc70>)
 800881a:	f7f9 fdd7 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800881e:	f001 ba2f 	b.w	8009c80 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 8008822:	2159      	movs	r1, #89	; 0x59
 8008824:	4864      	ldr	r0, [pc, #400]	; (80089b8 <cppLoop+0xc70>)
 8008826:	f7f9 fd15 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800882a:	f7f8 fc39 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800882e:	2100      	movs	r1, #0
 8008830:	2000      	movs	r0, #0
 8008832:	f7f8 fc45 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008836:	4b68      	ldr	r3, [pc, #416]	; (80089d8 <cppLoop+0xc90>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fe9c 	bl	8000578 <__aeabi_f2d>
 8008840:	4603      	mov	r3, r0
 8008842:	460c      	mov	r4, r1
 8008844:	461a      	mov	r2, r3
 8008846:	4623      	mov	r3, r4
 8008848:	4864      	ldr	r0, [pc, #400]	; (80089dc <cppLoop+0xc94>)
 800884a:	f7f8 fc63 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800884e:	2101      	movs	r1, #1
 8008850:	2000      	movs	r0, #0
 8008852:	f7f8 fc35 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008856:	4b62      	ldr	r3, [pc, #392]	; (80089e0 <cppLoop+0xc98>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f7f7 fe8c 	bl	8000578 <__aeabi_f2d>
 8008860:	4603      	mov	r3, r0
 8008862:	460c      	mov	r4, r1
 8008864:	461a      	mov	r2, r3
 8008866:	4623      	mov	r3, r4
 8008868:	485e      	ldr	r0, [pc, #376]	; (80089e4 <cppLoop+0xc9c>)
 800886a:	f7f8 fc53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800886e:	4856      	ldr	r0, [pc, #344]	; (80089c8 <cppLoop+0xc80>)
 8008870:	f7f9 fc8c 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008874:	4603      	mov	r3, r0
 8008876:	2b02      	cmp	r3, #2
 8008878:	bf0c      	ite	eq
 800887a:	2301      	moveq	r3, #1
 800887c:	2300      	movne	r3, #0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	f001 81ff 	beq.w	8009c84 <cppLoop+0x1f3c>
			HAL_Delay(500);
 8008886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800888a:	f001 fb3d 	bl	8009f08 <HAL_Delay>

			led.LR(1, -1);
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	2101      	movs	r1, #1
 8008894:	4848      	ldr	r0, [pc, #288]	; (80089b8 <cppLoop+0xc70>)
 8008896:	f7f9 fd99 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800889a:	2101      	movs	r1, #1
 800889c:	484d      	ldr	r0, [pc, #308]	; (80089d4 <cppLoop+0xc8c>)
 800889e:	f7fb fcf5 	bl	800428c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80088a2:	4b4f      	ldr	r3, [pc, #316]	; (80089e0 <cppLoop+0xc98>)
 80088a4:	edd3 7a00 	vldr	s15, [r3]
 80088a8:	eeb0 0a67 	vmov.f32	s0, s15
 80088ac:	4849      	ldr	r0, [pc, #292]	; (80089d4 <cppLoop+0xc8c>)
 80088ae:	f7fb faaa 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80088b2:	4b49      	ldr	r3, [pc, #292]	; (80089d8 <cppLoop+0xc90>)
 80088b4:	edd3 7a00 	vldr	s15, [r3]
 80088b8:	eeb0 0a67 	vmov.f32	s0, s15
 80088bc:	4845      	ldr	r0, [pc, #276]	; (80089d4 <cppLoop+0xc8c>)
 80088be:	f7fb fab2 	bl	8003e26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80088c2:	4b47      	ldr	r3, [pc, #284]	; (80089e0 <cppLoop+0xc98>)
 80088c4:	edd3 7a00 	vldr	s15, [r3]
 80088c8:	eeb0 0a67 	vmov.f32	s0, s15
 80088cc:	4841      	ldr	r0, [pc, #260]	; (80089d4 <cppLoop+0xc8c>)
 80088ce:	f7fb faca 	bl	8003e66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80088d2:	4840      	ldr	r0, [pc, #256]	; (80089d4 <cppLoop+0xc8c>)
 80088d4:	f7fb fe1a 	bl	800450c <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80088d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088dc:	f001 fb14 	bl	8009f08 <HAL_Delay>

			line_trace.running();
 80088e0:	483c      	ldr	r0, [pc, #240]	; (80089d4 <cppLoop+0xc8c>)
 80088e2:	f7fb fd17 	bl	8004314 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80088e6:	4840      	ldr	r0, [pc, #256]	; (80089e8 <cppLoop+0xca0>)
 80088e8:	f7f8 fd4c 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	2100      	movs	r1, #0
 80088f2:	4831      	ldr	r0, [pc, #196]	; (80089b8 <cppLoop+0xc70>)
 80088f4:	f7f9 fd6a 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80088f8:	f001 b9c4 	b.w	8009c84 <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 80088fc:	2147      	movs	r1, #71	; 0x47
 80088fe:	482e      	ldr	r0, [pc, #184]	; (80089b8 <cppLoop+0xc70>)
 8008900:	f7f9 fca8 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008904:	f7f8 fbcc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008908:	2100      	movs	r1, #0
 800890a:	2000      	movs	r0, #0
 800890c:	f7f8 fbd8 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008910:	4830      	ldr	r0, [pc, #192]	; (80089d4 <cppLoop+0xc8c>)
 8008912:	f7fb fad8 	bl	8003ec6 <_ZN9LineTrace14getMaxVelocityEv>
 8008916:	ee10 3a10 	vmov	r3, s0
 800891a:	4618      	mov	r0, r3
 800891c:	f7f7 fe2c 	bl	8000578 <__aeabi_f2d>
 8008920:	4603      	mov	r3, r0
 8008922:	460c      	mov	r4, r1
 8008924:	461a      	mov	r2, r3
 8008926:	4623      	mov	r3, r4
 8008928:	482c      	ldr	r0, [pc, #176]	; (80089dc <cppLoop+0xc94>)
 800892a:	f7f8 fbf3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800892e:	2101      	movs	r1, #1
 8008930:	2000      	movs	r0, #0
 8008932:	f7f8 fbc5 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008936:	4827      	ldr	r0, [pc, #156]	; (80089d4 <cppLoop+0xc8c>)
 8008938:	f7fb fae5 	bl	8003f06 <_ZN9LineTrace14getMinVelocityEv>
 800893c:	ee10 3a10 	vmov	r3, s0
 8008940:	4618      	mov	r0, r3
 8008942:	f7f7 fe19 	bl	8000578 <__aeabi_f2d>
 8008946:	4603      	mov	r3, r0
 8008948:	460c      	mov	r4, r1
 800894a:	461a      	mov	r2, r3
 800894c:	4623      	mov	r3, r4
 800894e:	481d      	ldr	r0, [pc, #116]	; (80089c4 <cppLoop+0xc7c>)
 8008950:	f7f8 fbe0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008954:	481c      	ldr	r0, [pc, #112]	; (80089c8 <cppLoop+0xc80>)
 8008956:	f7f9 fc19 	bl	800218c <_ZN8JoyStick8getValueEv>
 800895a:	4603      	mov	r3, r0
 800895c:	2b08      	cmp	r3, #8
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d042      	beq.n	80089f0 <cppLoop+0xca8>
			led.LR(-1, 1);
 800896a:	2201      	movs	r2, #1
 800896c:	f04f 31ff 	mov.w	r1, #4294967295
 8008970:	4811      	ldr	r0, [pc, #68]	; (80089b8 <cppLoop+0xc70>)
 8008972:	f7f9 fd2b 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800897a:	f001 fac5 	bl	8009f08 <HAL_Delay>

			selector_vel++;
 800897e:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <cppLoop+0xca4>)
 8008980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008984:	b29b      	uxth	r3, r3
 8008986:	3301      	adds	r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	b21a      	sxth	r2, r3
 800898c:	4b17      	ldr	r3, [pc, #92]	; (80089ec <cppLoop+0xca4>)
 800898e:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008990:	4b16      	ldr	r3, [pc, #88]	; (80089ec <cppLoop+0xca4>)
 8008992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008996:	2b01      	cmp	r3, #1
 8008998:	dd02      	ble.n	80089a0 <cppLoop+0xc58>
 800899a:	4b14      	ldr	r3, [pc, #80]	; (80089ec <cppLoop+0xca4>)
 800899c:	2200      	movs	r2, #0
 800899e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089a0:	2200      	movs	r2, #0
 80089a2:	f04f 31ff 	mov.w	r1, #4294967295
 80089a6:	4804      	ldr	r0, [pc, #16]	; (80089b8 <cppLoop+0xc70>)
 80089a8:	f7f9 fd10 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80089ac:	f001 b96c 	b.w	8009c88 <cppLoop+0x1f40>
 80089b0:	9999999a 	.word	0x9999999a
 80089b4:	3fb99999 	.word	0x3fb99999
 80089b8:	200005d0 	.word	0x200005d0
 80089bc:	0801a038 	.word	0x0801a038
 80089c0:	20042414 	.word	0x20042414
 80089c4:	0801a074 	.word	0x0801a074
 80089c8:	200005c4 	.word	0x200005c4
 80089cc:	0801a080 	.word	0x0801a080
 80089d0:	0801a018 	.word	0x0801a018
 80089d4:	2001db64 	.word	0x2001db64
 80089d8:	2004241c 	.word	0x2004241c
 80089dc:	0801a08c 	.word	0x0801a08c
 80089e0:	2004242c 	.word	0x2004242c
 80089e4:	0801a044 	.word	0x0801a044
 80089e8:	2001db60 	.word	0x2001db60
 80089ec:	200423e0 	.word	0x200423e0
		else if(joy_stick.getValue() == JOY_R){
 80089f0:	48a5      	ldr	r0, [pc, #660]	; (8008c88 <cppLoop+0xf40>)
 80089f2:	f7f9 fbcb 	bl	800218c <_ZN8JoyStick8getValueEv>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	bf0c      	ite	eq
 80089fc:	2301      	moveq	r3, #1
 80089fe:	2300      	movne	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d03c      	beq.n	8008a80 <cppLoop+0xd38>
			led.LR(-1, 1);
 8008a06:	2201      	movs	r2, #1
 8008a08:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0c:	489f      	ldr	r0, [pc, #636]	; (8008c8c <cppLoop+0xf44>)
 8008a0e:	f7f9 fcdd 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a12:	2064      	movs	r0, #100	; 0x64
 8008a14:	f001 fa78 	bl	8009f08 <HAL_Delay>
			if(selector_vel == 0)
 8008a18:	4b9d      	ldr	r3, [pc, #628]	; (8008c90 <cppLoop+0xf48>)
 8008a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d113      	bne.n	8008a4a <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008a22:	4b9c      	ldr	r3, [pc, #624]	; (8008c94 <cppLoop+0xf4c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f7 fda6 	bl	8000578 <__aeabi_f2d>
 8008a2c:	a394      	add	r3, pc, #592	; (adr r3, 8008c80 <cppLoop+0xf38>)
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	f7f7 fc43 	bl	80002bc <__adddf3>
 8008a36:	4603      	mov	r3, r0
 8008a38:	460c      	mov	r4, r1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f7f8 f8eb 	bl	8000c18 <__aeabi_d2f>
 8008a42:	4602      	mov	r2, r0
 8008a44:	4b93      	ldr	r3, [pc, #588]	; (8008c94 <cppLoop+0xf4c>)
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	e012      	b.n	8008a70 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008a4a:	4b93      	ldr	r3, [pc, #588]	; (8008c98 <cppLoop+0xf50>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f7 fd92 	bl	8000578 <__aeabi_f2d>
 8008a54:	a38a      	add	r3, pc, #552	; (adr r3, 8008c80 <cppLoop+0xf38>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fc2f 	bl	80002bc <__adddf3>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	460c      	mov	r4, r1
 8008a62:	4618      	mov	r0, r3
 8008a64:	4621      	mov	r1, r4
 8008a66:	f7f8 f8d7 	bl	8000c18 <__aeabi_d2f>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	4b8a      	ldr	r3, [pc, #552]	; (8008c98 <cppLoop+0xf50>)
 8008a6e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a70:	2200      	movs	r2, #0
 8008a72:	f04f 31ff 	mov.w	r1, #4294967295
 8008a76:	4885      	ldr	r0, [pc, #532]	; (8008c8c <cppLoop+0xf44>)
 8008a78:	f7f9 fca8 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008a7c:	f001 b904 	b.w	8009c88 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 8008a80:	4881      	ldr	r0, [pc, #516]	; (8008c88 <cppLoop+0xf40>)
 8008a82:	f7f9 fb83 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	bf0c      	ite	eq
 8008a8c:	2301      	moveq	r3, #1
 8008a8e:	2300      	movne	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d03c      	beq.n	8008b10 <cppLoop+0xdc8>
			led.LR(-1, 1);
 8008a96:	2201      	movs	r2, #1
 8008a98:	f04f 31ff 	mov.w	r1, #4294967295
 8008a9c:	487b      	ldr	r0, [pc, #492]	; (8008c8c <cppLoop+0xf44>)
 8008a9e:	f7f9 fc95 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008aa2:	2064      	movs	r0, #100	; 0x64
 8008aa4:	f001 fa30 	bl	8009f08 <HAL_Delay>
			if(selector_vel == 0)
 8008aa8:	4b79      	ldr	r3, [pc, #484]	; (8008c90 <cppLoop+0xf48>)
 8008aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d113      	bne.n	8008ada <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008ab2:	4b78      	ldr	r3, [pc, #480]	; (8008c94 <cppLoop+0xf4c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f7 fd5e 	bl	8000578 <__aeabi_f2d>
 8008abc:	a370      	add	r3, pc, #448	; (adr r3, 8008c80 <cppLoop+0xf38>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fbf9 	bl	80002b8 <__aeabi_dsub>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	460c      	mov	r4, r1
 8008aca:	4618      	mov	r0, r3
 8008acc:	4621      	mov	r1, r4
 8008ace:	f7f8 f8a3 	bl	8000c18 <__aeabi_d2f>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	4b6f      	ldr	r3, [pc, #444]	; (8008c94 <cppLoop+0xf4c>)
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	e012      	b.n	8008b00 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008ada:	4b6f      	ldr	r3, [pc, #444]	; (8008c98 <cppLoop+0xf50>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f7 fd4a 	bl	8000578 <__aeabi_f2d>
 8008ae4:	a366      	add	r3, pc, #408	; (adr r3, 8008c80 <cppLoop+0xf38>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fbe5 	bl	80002b8 <__aeabi_dsub>
 8008aee:	4603      	mov	r3, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	4618      	mov	r0, r3
 8008af4:	4621      	mov	r1, r4
 8008af6:	f7f8 f88f 	bl	8000c18 <__aeabi_d2f>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b66      	ldr	r3, [pc, #408]	; (8008c98 <cppLoop+0xf50>)
 8008afe:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b00:	2200      	movs	r2, #0
 8008b02:	f04f 31ff 	mov.w	r1, #4294967295
 8008b06:	4861      	ldr	r0, [pc, #388]	; (8008c8c <cppLoop+0xf44>)
 8008b08:	f7f9 fc60 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008b0c:	f001 b8bc 	b.w	8009c88 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 8008b10:	485d      	ldr	r0, [pc, #372]	; (8008c88 <cppLoop+0xf40>)
 8008b12:	f7f9 fb3b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2301      	moveq	r3, #1
 8008b1e:	2300      	movne	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f001 80b0 	beq.w	8009c88 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2e:	4857      	ldr	r0, [pc, #348]	; (8008c8c <cppLoop+0xf44>)
 8008b30:	f7f9 fc4c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b38:	f001 f9e6 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4b54      	ldr	r3, [pc, #336]	; (8008c94 <cppLoop+0xf4c>)
 8008b42:	2201      	movs	r2, #1
 8008b44:	4955      	ldr	r1, [pc, #340]	; (8008c9c <cppLoop+0xf54>)
 8008b46:	4856      	ldr	r0, [pc, #344]	; (8008ca0 <cppLoop+0xf58>)
 8008b48:	f7f8 fe98 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4b51      	ldr	r3, [pc, #324]	; (8008c98 <cppLoop+0xf50>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	4953      	ldr	r1, [pc, #332]	; (8008ca4 <cppLoop+0xf5c>)
 8008b56:	4852      	ldr	r0, [pc, #328]	; (8008ca0 <cppLoop+0xf58>)
 8008b58:	f7f8 fe90 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008b5c:	4b4d      	ldr	r3, [pc, #308]	; (8008c94 <cppLoop+0xf4c>)
 8008b5e:	edd3 7a00 	vldr	s15, [r3]
 8008b62:	eeb0 0a67 	vmov.f32	s0, s15
 8008b66:	4850      	ldr	r0, [pc, #320]	; (8008ca8 <cppLoop+0xf60>)
 8008b68:	f7fb f95d 	bl	8003e26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008b6c:	4b4a      	ldr	r3, [pc, #296]	; (8008c98 <cppLoop+0xf50>)
 8008b6e:	edd3 7a00 	vldr	s15, [r3]
 8008b72:	eeb0 0a67 	vmov.f32	s0, s15
 8008b76:	484c      	ldr	r0, [pc, #304]	; (8008ca8 <cppLoop+0xf60>)
 8008b78:	f7fb f975 	bl	8003e66 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b82:	4842      	ldr	r0, [pc, #264]	; (8008c8c <cppLoop+0xf44>)
 8008b84:	f7f9 fc22 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008b88:	f001 b87e 	b.w	8009c88 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 8008b8c:	214d      	movs	r1, #77	; 0x4d
 8008b8e:	483f      	ldr	r0, [pc, #252]	; (8008c8c <cppLoop+0xf44>)
 8008b90:	f7f9 fb60 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b94:	f7f8 fa84 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b98:	2100      	movs	r1, #0
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	f7f8 fa90 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008ba0:	4b42      	ldr	r3, [pc, #264]	; (8008cac <cppLoop+0xf64>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f7 fce7 	bl	8000578 <__aeabi_f2d>
 8008baa:	4603      	mov	r3, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	483f      	ldr	r0, [pc, #252]	; (8008cb0 <cppLoop+0xf68>)
 8008bb4:	f7f8 faae 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bb8:	2101      	movs	r1, #1
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f7f8 fa80 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008bc0:	4b3c      	ldr	r3, [pc, #240]	; (8008cb4 <cppLoop+0xf6c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7f7 fcd7 	bl	8000578 <__aeabi_f2d>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	460c      	mov	r4, r1
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	4839      	ldr	r0, [pc, #228]	; (8008cb8 <cppLoop+0xf70>)
 8008bd4:	f7f8 fa9e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008bd8:	482b      	ldr	r0, [pc, #172]	; (8008c88 <cppLoop+0xf40>)
 8008bda:	f7f9 fad7 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	bf0c      	ite	eq
 8008be4:	2301      	moveq	r3, #1
 8008be6:	2300      	movne	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f001 804e 	beq.w	8009c8c <cppLoop+0x1f44>
			HAL_Delay(500);
 8008bf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008bf4:	f001 f988 	bl	8009f08 <HAL_Delay>

			led.LR(1, -1);
 8008bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	4823      	ldr	r0, [pc, #140]	; (8008c8c <cppLoop+0xf44>)
 8008c00:	f7f9 fbe4 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008c04:	4b2d      	ldr	r3, [pc, #180]	; (8008cbc <cppLoop+0xf74>)
 8008c06:	edd3 7a00 	vldr	s15, [r3]
 8008c0a:	4b2d      	ldr	r3, [pc, #180]	; (8008cc0 <cppLoop+0xf78>)
 8008c0c:	ed93 7a00 	vldr	s14, [r3]
 8008c10:	4b2c      	ldr	r3, [pc, #176]	; (8008cc4 <cppLoop+0xf7c>)
 8008c12:	edd3 6a00 	vldr	s13, [r3]
 8008c16:	eeb0 1a66 	vmov.f32	s2, s13
 8008c1a:	eef0 0a47 	vmov.f32	s1, s14
 8008c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c22:	4821      	ldr	r0, [pc, #132]	; (8008ca8 <cppLoop+0xf60>)
 8008c24:	f7fb f854 	bl	8003cd0 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008c28:	2102      	movs	r1, #2
 8008c2a:	481f      	ldr	r0, [pc, #124]	; (8008ca8 <cppLoop+0xf60>)
 8008c2c:	f7fb fb2e 	bl	800428c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008c30:	4b20      	ldr	r3, [pc, #128]	; (8008cb4 <cppLoop+0xf6c>)
 8008c32:	edd3 7a00 	vldr	s15, [r3]
 8008c36:	eeb0 0a67 	vmov.f32	s0, s15
 8008c3a:	481b      	ldr	r0, [pc, #108]	; (8008ca8 <cppLoop+0xf60>)
 8008c3c:	f7fb f8e3 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008c40:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <cppLoop+0xf64>)
 8008c42:	edd3 7a00 	vldr	s15, [r3]
 8008c46:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4a:	4817      	ldr	r0, [pc, #92]	; (8008ca8 <cppLoop+0xf60>)
 8008c4c:	f7fb f8fb 	bl	8003e46 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008c50:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <cppLoop+0xf6c>)
 8008c52:	edd3 7a00 	vldr	s15, [r3]
 8008c56:	eeb0 0a67 	vmov.f32	s0, s15
 8008c5a:	4813      	ldr	r0, [pc, #76]	; (8008ca8 <cppLoop+0xf60>)
 8008c5c:	f7fb f913 	bl	8003e86 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008c60:	4811      	ldr	r0, [pc, #68]	; (8008ca8 <cppLoop+0xf60>)
 8008c62:	f7fb fc53 	bl	800450c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008c66:	4810      	ldr	r0, [pc, #64]	; (8008ca8 <cppLoop+0xf60>)
 8008c68:	f7fb fb54 	bl	8004314 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	2100      	movs	r1, #0
 8008c72:	4806      	ldr	r0, [pc, #24]	; (8008c8c <cppLoop+0xf44>)
 8008c74:	f7f9 fbaa 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008c78:	f001 b808 	b.w	8009c8c <cppLoop+0x1f44>
 8008c7c:	f3af 8000 	nop.w
 8008c80:	9999999a 	.word	0x9999999a
 8008c84:	3fb99999 	.word	0x3fb99999
 8008c88:	200005c4 	.word	0x200005c4
 8008c8c:	200005d0 	.word	0x200005d0
 8008c90:	200423e0 	.word	0x200423e0
 8008c94:	2004241c 	.word	0x2004241c
 8008c98:	2004242c 	.word	0x2004242c
 8008c9c:	0801a098 	.word	0x0801a098
 8008ca0:	0801a018 	.word	0x0801a018
 8008ca4:	0801a0a4 	.word	0x0801a0a4
 8008ca8:	2001db64 	.word	0x2001db64
 8008cac:	20042424 	.word	0x20042424
 8008cb0:	0801a0b0 	.word	0x0801a0b0
 8008cb4:	20042434 	.word	0x20042434
 8008cb8:	0801a044 	.word	0x0801a044
 8008cbc:	200423e4 	.word	0x200423e4
 8008cc0:	200423ec 	.word	0x200423ec
 8008cc4:	200423f4 	.word	0x200423f4

	case 6:
		led.fullColor('R');
 8008cc8:	2152      	movs	r1, #82	; 0x52
 8008cca:	4895      	ldr	r0, [pc, #596]	; (8008f20 <cppLoop+0x11d8>)
 8008ccc:	f7f9 fac2 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008cd0:	f7f8 f9e6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	f7f8 f9f2 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008cdc:	4891      	ldr	r0, [pc, #580]	; (8008f24 <cppLoop+0x11dc>)
 8008cde:	f7fb f902 	bl	8003ee6 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008ce2:	ee10 3a10 	vmov	r3, s0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f7 fc46 	bl	8000578 <__aeabi_f2d>
 8008cec:	4603      	mov	r3, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	488c      	ldr	r0, [pc, #560]	; (8008f28 <cppLoop+0x11e0>)
 8008cf6:	f7f8 fa0d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f7f8 f9df 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008d02:	4888      	ldr	r0, [pc, #544]	; (8008f24 <cppLoop+0x11dc>)
 8008d04:	f7fb f90f 	bl	8003f26 <_ZN9LineTrace15getMinVelocity2Ev>
 8008d08:	ee10 3a10 	vmov	r3, s0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f7 fc33 	bl	8000578 <__aeabi_f2d>
 8008d12:	4603      	mov	r3, r0
 8008d14:	460c      	mov	r4, r1
 8008d16:	461a      	mov	r2, r3
 8008d18:	4623      	mov	r3, r4
 8008d1a:	4884      	ldr	r0, [pc, #528]	; (8008f2c <cppLoop+0x11e4>)
 8008d1c:	f7f8 f9fa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d20:	4883      	ldr	r0, [pc, #524]	; (8008f30 <cppLoop+0x11e8>)
 8008d22:	f7f9 fa33 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	bf0c      	ite	eq
 8008d2c:	2301      	moveq	r3, #1
 8008d2e:	2300      	movne	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d022      	beq.n	8008d7c <cppLoop+0x1034>
			led.LR(-1, 1);
 8008d36:	2201      	movs	r2, #1
 8008d38:	f04f 31ff 	mov.w	r1, #4294967295
 8008d3c:	4878      	ldr	r0, [pc, #480]	; (8008f20 <cppLoop+0x11d8>)
 8008d3e:	f7f9 fb45 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d46:	f001 f8df 	bl	8009f08 <HAL_Delay>

			selector_vel2++;
 8008d4a:	4b7a      	ldr	r3, [pc, #488]	; (8008f34 <cppLoop+0x11ec>)
 8008d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	3301      	adds	r3, #1
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	b21a      	sxth	r2, r3
 8008d58:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <cppLoop+0x11ec>)
 8008d5a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008d5c:	4b75      	ldr	r3, [pc, #468]	; (8008f34 <cppLoop+0x11ec>)
 8008d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	dd02      	ble.n	8008d6c <cppLoop+0x1024>
 8008d66:	4b73      	ldr	r3, [pc, #460]	; (8008f34 <cppLoop+0x11ec>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d72:	486b      	ldr	r0, [pc, #428]	; (8008f20 <cppLoop+0x11d8>)
 8008d74:	f7f9 fb2a 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008d78:	f000 bf8a 	b.w	8009c90 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008d7c:	486c      	ldr	r0, [pc, #432]	; (8008f30 <cppLoop+0x11e8>)
 8008d7e:	f7f9 fa05 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	bf0c      	ite	eq
 8008d88:	2301      	moveq	r3, #1
 8008d8a:	2300      	movne	r3, #0
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d03c      	beq.n	8008e0c <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008d92:	2201      	movs	r2, #1
 8008d94:	f04f 31ff 	mov.w	r1, #4294967295
 8008d98:	4861      	ldr	r0, [pc, #388]	; (8008f20 <cppLoop+0x11d8>)
 8008d9a:	f7f9 fb17 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d9e:	2064      	movs	r0, #100	; 0x64
 8008da0:	f001 f8b2 	bl	8009f08 <HAL_Delay>
			if(selector_vel2 == 0)
 8008da4:	4b63      	ldr	r3, [pc, #396]	; (8008f34 <cppLoop+0x11ec>)
 8008da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d113      	bne.n	8008dd6 <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008dae:	4b62      	ldr	r3, [pc, #392]	; (8008f38 <cppLoop+0x11f0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f7 fbe0 	bl	8000578 <__aeabi_f2d>
 8008db8:	a357      	add	r3, pc, #348	; (adr r3, 8008f18 <cppLoop+0x11d0>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fa7d 	bl	80002bc <__adddf3>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f7f7 ff25 	bl	8000c18 <__aeabi_d2f>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	4b59      	ldr	r3, [pc, #356]	; (8008f38 <cppLoop+0x11f0>)
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e012      	b.n	8008dfc <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008dd6:	4b59      	ldr	r3, [pc, #356]	; (8008f3c <cppLoop+0x11f4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f7 fbcc 	bl	8000578 <__aeabi_f2d>
 8008de0:	a34d      	add	r3, pc, #308	; (adr r3, 8008f18 <cppLoop+0x11d0>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fa69 	bl	80002bc <__adddf3>
 8008dea:	4603      	mov	r3, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	4618      	mov	r0, r3
 8008df0:	4621      	mov	r1, r4
 8008df2:	f7f7 ff11 	bl	8000c18 <__aeabi_d2f>
 8008df6:	4602      	mov	r2, r0
 8008df8:	4b50      	ldr	r3, [pc, #320]	; (8008f3c <cppLoop+0x11f4>)
 8008dfa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8008e02:	4847      	ldr	r0, [pc, #284]	; (8008f20 <cppLoop+0x11d8>)
 8008e04:	f7f9 fae2 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008e08:	f000 bf42 	b.w	8009c90 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008e0c:	4848      	ldr	r0, [pc, #288]	; (8008f30 <cppLoop+0x11e8>)
 8008e0e:	f7f9 f9bd 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	bf0c      	ite	eq
 8008e18:	2301      	moveq	r3, #1
 8008e1a:	2300      	movne	r3, #0
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d03c      	beq.n	8008e9c <cppLoop+0x1154>
			led.LR(-1, 1);
 8008e22:	2201      	movs	r2, #1
 8008e24:	f04f 31ff 	mov.w	r1, #4294967295
 8008e28:	483d      	ldr	r0, [pc, #244]	; (8008f20 <cppLoop+0x11d8>)
 8008e2a:	f7f9 facf 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e2e:	2064      	movs	r0, #100	; 0x64
 8008e30:	f001 f86a 	bl	8009f08 <HAL_Delay>
			if(selector_vel2 == 0)
 8008e34:	4b3f      	ldr	r3, [pc, #252]	; (8008f34 <cppLoop+0x11ec>)
 8008e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d113      	bne.n	8008e66 <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008e3e:	4b3e      	ldr	r3, [pc, #248]	; (8008f38 <cppLoop+0x11f0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7f7 fb98 	bl	8000578 <__aeabi_f2d>
 8008e48:	a333      	add	r3, pc, #204	; (adr r3, 8008f18 <cppLoop+0x11d0>)
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f7f7 fa33 	bl	80002b8 <__aeabi_dsub>
 8008e52:	4603      	mov	r3, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	4618      	mov	r0, r3
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f7f7 fedd 	bl	8000c18 <__aeabi_d2f>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	4b35      	ldr	r3, [pc, #212]	; (8008f38 <cppLoop+0x11f0>)
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e012      	b.n	8008e8c <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008e66:	4b35      	ldr	r3, [pc, #212]	; (8008f3c <cppLoop+0x11f4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7f7 fb84 	bl	8000578 <__aeabi_f2d>
 8008e70:	a329      	add	r3, pc, #164	; (adr r3, 8008f18 <cppLoop+0x11d0>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f7f7 fa1f 	bl	80002b8 <__aeabi_dsub>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	4618      	mov	r0, r3
 8008e80:	4621      	mov	r1, r4
 8008e82:	f7f7 fec9 	bl	8000c18 <__aeabi_d2f>
 8008e86:	4602      	mov	r2, r0
 8008e88:	4b2c      	ldr	r3, [pc, #176]	; (8008f3c <cppLoop+0x11f4>)
 8008e8a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e92:	4823      	ldr	r0, [pc, #140]	; (8008f20 <cppLoop+0x11d8>)
 8008e94:	f7f9 fa9a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008e98:	f000 befa 	b.w	8009c90 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 8008e9c:	4824      	ldr	r0, [pc, #144]	; (8008f30 <cppLoop+0x11e8>)
 8008e9e:	f7f9 f975 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 86ee 	beq.w	8009c90 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8008eba:	4819      	ldr	r0, [pc, #100]	; (8008f20 <cppLoop+0x11d8>)
 8008ebc:	f7f9 fa86 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ec0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ec4:	f001 f820 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <cppLoop+0x11f0>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	491b      	ldr	r1, [pc, #108]	; (8008f40 <cppLoop+0x11f8>)
 8008ed2:	481c      	ldr	r0, [pc, #112]	; (8008f44 <cppLoop+0x11fc>)
 8008ed4:	f7f8 fcd2 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <cppLoop+0x11f4>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	4919      	ldr	r1, [pc, #100]	; (8008f48 <cppLoop+0x1200>)
 8008ee2:	4818      	ldr	r0, [pc, #96]	; (8008f44 <cppLoop+0x11fc>)
 8008ee4:	f7f8 fcca 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008ee8:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <cppLoop+0x11f0>)
 8008eea:	edd3 7a00 	vldr	s15, [r3]
 8008eee:	eeb0 0a67 	vmov.f32	s0, s15
 8008ef2:	480c      	ldr	r0, [pc, #48]	; (8008f24 <cppLoop+0x11dc>)
 8008ef4:	f7fa ffa7 	bl	8003e46 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008ef8:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <cppLoop+0x11f4>)
 8008efa:	edd3 7a00 	vldr	s15, [r3]
 8008efe:	eeb0 0a67 	vmov.f32	s0, s15
 8008f02:	4808      	ldr	r0, [pc, #32]	; (8008f24 <cppLoop+0x11dc>)
 8008f04:	f7fa ffbf 	bl	8003e86 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f0e:	4804      	ldr	r0, [pc, #16]	; (8008f20 <cppLoop+0x11d8>)
 8008f10:	f7f9 fa5c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f14:	f000 bebc 	b.w	8009c90 <cppLoop+0x1f48>
 8008f18:	9999999a 	.word	0x9999999a
 8008f1c:	3fb99999 	.word	0x3fb99999
 8008f20:	200005d0 	.word	0x200005d0
 8008f24:	2001db64 	.word	0x2001db64
 8008f28:	0801a0b0 	.word	0x0801a0b0
 8008f2c:	0801a074 	.word	0x0801a074
 8008f30:	200005c4 	.word	0x200005c4
 8008f34:	200423e2 	.word	0x200423e2
 8008f38:	20042424 	.word	0x20042424
 8008f3c:	20042434 	.word	0x20042434
 8008f40:	0801a0bc 	.word	0x0801a0bc
 8008f44:	0801a018 	.word	0x0801a018
 8008f48:	0801a0c8 	.word	0x0801a0c8

	case 7:
		led.fullColor('W');
 8008f4c:	2157      	movs	r1, #87	; 0x57
 8008f4e:	48c2      	ldr	r0, [pc, #776]	; (8009258 <cppLoop+0x1510>)
 8008f50:	f7f9 f980 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f54:	f7f8 f8a4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f58:	2100      	movs	r1, #0
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f7f8 f8b0 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008f60:	48be      	ldr	r0, [pc, #760]	; (800925c <cppLoop+0x1514>)
 8008f62:	f7fb f824 	bl	8003fae <_ZN9LineTrace9getMaxAccEv>
 8008f66:	ee10 3a10 	vmov	r3, s0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7f7 fb04 	bl	8000578 <__aeabi_f2d>
 8008f70:	4603      	mov	r3, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	461a      	mov	r2, r3
 8008f76:	4623      	mov	r3, r4
 8008f78:	48b9      	ldr	r0, [pc, #740]	; (8009260 <cppLoop+0x1518>)
 8008f7a:	f7f8 f8cb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f7e:	2101      	movs	r1, #1
 8008f80:	2000      	movs	r0, #0
 8008f82:	f7f8 f89d 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008f86:	48b5      	ldr	r0, [pc, #724]	; (800925c <cppLoop+0x1514>)
 8008f88:	f7fb f847 	bl	800401a <_ZN9LineTrace9getMaxDecEv>
 8008f8c:	ee10 3a10 	vmov	r3, s0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f7 faf1 	bl	8000578 <__aeabi_f2d>
 8008f96:	4603      	mov	r3, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	48b1      	ldr	r0, [pc, #708]	; (8009264 <cppLoop+0x151c>)
 8008fa0:	f7f8 f8b8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fa4:	48b0      	ldr	r0, [pc, #704]	; (8009268 <cppLoop+0x1520>)
 8008fa6:	f7f9 f8f1 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d022      	beq.n	8009000 <cppLoop+0x12b8>
			led.LR(-1, 1);
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008fc0:	48a5      	ldr	r0, [pc, #660]	; (8009258 <cppLoop+0x1510>)
 8008fc2:	f7f9 fa03 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fca:	f000 ff9d 	bl	8009f08 <HAL_Delay>

			selector_acc++;
 8008fce:	4ba7      	ldr	r3, [pc, #668]	; (800926c <cppLoop+0x1524>)
 8008fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	b21a      	sxth	r2, r3
 8008fdc:	4ba3      	ldr	r3, [pc, #652]	; (800926c <cppLoop+0x1524>)
 8008fde:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008fe0:	4ba2      	ldr	r3, [pc, #648]	; (800926c <cppLoop+0x1524>)
 8008fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	dd02      	ble.n	8008ff0 <cppLoop+0x12a8>
 8008fea:	4ba0      	ldr	r3, [pc, #640]	; (800926c <cppLoop+0x1524>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff6:	4898      	ldr	r0, [pc, #608]	; (8009258 <cppLoop+0x1510>)
 8008ff8:	f7f9 f9e8 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008ffc:	f000 be4a 	b.w	8009c94 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 8009000:	4899      	ldr	r0, [pc, #612]	; (8009268 <cppLoop+0x1520>)
 8009002:	f7f9 f8c3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009006:	4603      	mov	r3, r0
 8009008:	2b10      	cmp	r3, #16
 800900a:	bf0c      	ite	eq
 800900c:	2301      	moveq	r3, #1
 800900e:	2300      	movne	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d03c      	beq.n	8009090 <cppLoop+0x1348>
			led.LR(-1, 1);
 8009016:	2201      	movs	r2, #1
 8009018:	f04f 31ff 	mov.w	r1, #4294967295
 800901c:	488e      	ldr	r0, [pc, #568]	; (8009258 <cppLoop+0x1510>)
 800901e:	f7f9 f9d5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009022:	2064      	movs	r0, #100	; 0x64
 8009024:	f000 ff70 	bl	8009f08 <HAL_Delay>
			if(selector_acc == 0){
 8009028:	4b90      	ldr	r3, [pc, #576]	; (800926c <cppLoop+0x1524>)
 800902a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d113      	bne.n	800905a <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 8009032:	4b8f      	ldr	r3, [pc, #572]	; (8009270 <cppLoop+0x1528>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f7f7 fa9e 	bl	8000578 <__aeabi_f2d>
 800903c:	a384      	add	r3, pc, #528	; (adr r3, 8009250 <cppLoop+0x1508>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 f93b 	bl	80002bc <__adddf3>
 8009046:	4603      	mov	r3, r0
 8009048:	460c      	mov	r4, r1
 800904a:	4618      	mov	r0, r3
 800904c:	4621      	mov	r1, r4
 800904e:	f7f7 fde3 	bl	8000c18 <__aeabi_d2f>
 8009052:	4602      	mov	r2, r0
 8009054:	4b86      	ldr	r3, [pc, #536]	; (8009270 <cppLoop+0x1528>)
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	e012      	b.n	8009080 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 800905a:	4b86      	ldr	r3, [pc, #536]	; (8009274 <cppLoop+0x152c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f7f7 fa8a 	bl	8000578 <__aeabi_f2d>
 8009064:	a37a      	add	r3, pc, #488	; (adr r3, 8009250 <cppLoop+0x1508>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 f927 	bl	80002bc <__adddf3>
 800906e:	4603      	mov	r3, r0
 8009070:	460c      	mov	r4, r1
 8009072:	4618      	mov	r0, r3
 8009074:	4621      	mov	r1, r4
 8009076:	f7f7 fdcf 	bl	8000c18 <__aeabi_d2f>
 800907a:	4602      	mov	r2, r0
 800907c:	4b7d      	ldr	r3, [pc, #500]	; (8009274 <cppLoop+0x152c>)
 800907e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009080:	2200      	movs	r2, #0
 8009082:	f04f 31ff 	mov.w	r1, #4294967295
 8009086:	4874      	ldr	r0, [pc, #464]	; (8009258 <cppLoop+0x1510>)
 8009088:	f7f9 f9a0 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800908c:	f000 be02 	b.w	8009c94 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 8009090:	4875      	ldr	r0, [pc, #468]	; (8009268 <cppLoop+0x1520>)
 8009092:	f7f9 f87b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009096:	4603      	mov	r3, r0
 8009098:	2b01      	cmp	r3, #1
 800909a:	bf0c      	ite	eq
 800909c:	2301      	moveq	r3, #1
 800909e:	2300      	movne	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d03c      	beq.n	8009120 <cppLoop+0x13d8>
			led.LR(-1, 1);
 80090a6:	2201      	movs	r2, #1
 80090a8:	f04f 31ff 	mov.w	r1, #4294967295
 80090ac:	486a      	ldr	r0, [pc, #424]	; (8009258 <cppLoop+0x1510>)
 80090ae:	f7f9 f98d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090b2:	2064      	movs	r0, #100	; 0x64
 80090b4:	f000 ff28 	bl	8009f08 <HAL_Delay>
			if(selector_acc == 0){
 80090b8:	4b6c      	ldr	r3, [pc, #432]	; (800926c <cppLoop+0x1524>)
 80090ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d113      	bne.n	80090ea <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 80090c2:	4b6b      	ldr	r3, [pc, #428]	; (8009270 <cppLoop+0x1528>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f7 fa56 	bl	8000578 <__aeabi_f2d>
 80090cc:	a360      	add	r3, pc, #384	; (adr r3, 8009250 <cppLoop+0x1508>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7f7 f8f1 	bl	80002b8 <__aeabi_dsub>
 80090d6:	4603      	mov	r3, r0
 80090d8:	460c      	mov	r4, r1
 80090da:	4618      	mov	r0, r3
 80090dc:	4621      	mov	r1, r4
 80090de:	f7f7 fd9b 	bl	8000c18 <__aeabi_d2f>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b62      	ldr	r3, [pc, #392]	; (8009270 <cppLoop+0x1528>)
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	e012      	b.n	8009110 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 80090ea:	4b62      	ldr	r3, [pc, #392]	; (8009274 <cppLoop+0x152c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f7 fa42 	bl	8000578 <__aeabi_f2d>
 80090f4:	a356      	add	r3, pc, #344	; (adr r3, 8009250 <cppLoop+0x1508>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f7f7 f8dd 	bl	80002b8 <__aeabi_dsub>
 80090fe:	4603      	mov	r3, r0
 8009100:	460c      	mov	r4, r1
 8009102:	4618      	mov	r0, r3
 8009104:	4621      	mov	r1, r4
 8009106:	f7f7 fd87 	bl	8000c18 <__aeabi_d2f>
 800910a:	4602      	mov	r2, r0
 800910c:	4b59      	ldr	r3, [pc, #356]	; (8009274 <cppLoop+0x152c>)
 800910e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009110:	2200      	movs	r2, #0
 8009112:	f04f 31ff 	mov.w	r1, #4294967295
 8009116:	4850      	ldr	r0, [pc, #320]	; (8009258 <cppLoop+0x1510>)
 8009118:	f7f9 f958 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800911c:	f000 bdba 	b.w	8009c94 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 8009120:	4851      	ldr	r0, [pc, #324]	; (8009268 <cppLoop+0x1520>)
 8009122:	f7f9 f833 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009126:	4603      	mov	r3, r0
 8009128:	2b02      	cmp	r3, #2
 800912a:	bf0c      	ite	eq
 800912c:	2301      	moveq	r3, #1
 800912e:	2300      	movne	r3, #0
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 85ae 	beq.w	8009c94 <cppLoop+0x1f4c>
			led.LR(-1, 1);
 8009138:	2201      	movs	r2, #1
 800913a:	f04f 31ff 	mov.w	r1, #4294967295
 800913e:	4846      	ldr	r0, [pc, #280]	; (8009258 <cppLoop+0x1510>)
 8009140:	f7f9 f944 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009144:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009148:	f000 fede 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800914c:	2300      	movs	r3, #0
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	4b47      	ldr	r3, [pc, #284]	; (8009270 <cppLoop+0x1528>)
 8009152:	2201      	movs	r2, #1
 8009154:	4948      	ldr	r1, [pc, #288]	; (8009278 <cppLoop+0x1530>)
 8009156:	4849      	ldr	r0, [pc, #292]	; (800927c <cppLoop+0x1534>)
 8009158:	f7f8 fb90 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800915c:	2300      	movs	r3, #0
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4b44      	ldr	r3, [pc, #272]	; (8009274 <cppLoop+0x152c>)
 8009162:	2201      	movs	r2, #1
 8009164:	4946      	ldr	r1, [pc, #280]	; (8009280 <cppLoop+0x1538>)
 8009166:	4845      	ldr	r0, [pc, #276]	; (800927c <cppLoop+0x1534>)
 8009168:	f7f8 fb88 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800916c:	4b40      	ldr	r3, [pc, #256]	; (8009270 <cppLoop+0x1528>)
 800916e:	edd3 7a00 	vldr	s15, [r3]
 8009172:	4b40      	ldr	r3, [pc, #256]	; (8009274 <cppLoop+0x152c>)
 8009174:	ed93 7a00 	vldr	s14, [r3]
 8009178:	eef0 0a47 	vmov.f32	s1, s14
 800917c:	eeb0 0a67 	vmov.f32	s0, s15
 8009180:	4836      	ldr	r0, [pc, #216]	; (800925c <cppLoop+0x1514>)
 8009182:	f7fa fee0 	bl	8003f46 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8009186:	2200      	movs	r2, #0
 8009188:	f04f 31ff 	mov.w	r1, #4294967295
 800918c:	4832      	ldr	r0, [pc, #200]	; (8009258 <cppLoop+0x1510>)
 800918e:	f7f9 f91d 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009192:	f000 bd7f 	b.w	8009c94 <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 8009196:	2157      	movs	r1, #87	; 0x57
 8009198:	482f      	ldr	r0, [pc, #188]	; (8009258 <cppLoop+0x1510>)
 800919a:	f7f9 f85b 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800919e:	f7f7 ff7f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091a2:	2100      	movs	r1, #0
 80091a4:	2000      	movs	r0, #0
 80091a6:	f7f7 ff8b 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 80091aa:	482c      	ldr	r0, [pc, #176]	; (800925c <cppLoop+0x1514>)
 80091ac:	f7fa ff23 	bl	8003ff6 <_ZN9LineTrace10getMaxAcc2Ev>
 80091b0:	ee10 3a10 	vmov	r3, s0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7f7 f9df 	bl	8000578 <__aeabi_f2d>
 80091ba:	4603      	mov	r3, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	461a      	mov	r2, r3
 80091c0:	4623      	mov	r3, r4
 80091c2:	4830      	ldr	r0, [pc, #192]	; (8009284 <cppLoop+0x153c>)
 80091c4:	f7f7 ffa6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091c8:	2101      	movs	r1, #1
 80091ca:	2000      	movs	r0, #0
 80091cc:	f7f7 ff78 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80091d0:	4822      	ldr	r0, [pc, #136]	; (800925c <cppLoop+0x1514>)
 80091d2:	f7fa fefe 	bl	8003fd2 <_ZN9LineTrace10getMaxDec2Ev>
 80091d6:	ee10 3a10 	vmov	r3, s0
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f7 f9cc 	bl	8000578 <__aeabi_f2d>
 80091e0:	4603      	mov	r3, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	461a      	mov	r2, r3
 80091e6:	4623      	mov	r3, r4
 80091e8:	4827      	ldr	r0, [pc, #156]	; (8009288 <cppLoop+0x1540>)
 80091ea:	f7f7 ff93 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80091ee:	481e      	ldr	r0, [pc, #120]	; (8009268 <cppLoop+0x1520>)
 80091f0:	f7f8 ffcc 	bl	800218c <_ZN8JoyStick8getValueEv>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b08      	cmp	r3, #8
 80091f8:	bf0c      	ite	eq
 80091fa:	2301      	moveq	r3, #1
 80091fc:	2300      	movne	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d045      	beq.n	8009290 <cppLoop+0x1548>
			led.LR(-1, 1);
 8009204:	2201      	movs	r2, #1
 8009206:	f04f 31ff 	mov.w	r1, #4294967295
 800920a:	4813      	ldr	r0, [pc, #76]	; (8009258 <cppLoop+0x1510>)
 800920c:	f7f9 f8de 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009210:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009214:	f000 fe78 	bl	8009f08 <HAL_Delay>

			selector_acc2++;
 8009218:	4b1c      	ldr	r3, [pc, #112]	; (800928c <cppLoop+0x1544>)
 800921a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800921e:	b29b      	uxth	r3, r3
 8009220:	3301      	adds	r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	b21a      	sxth	r2, r3
 8009226:	4b19      	ldr	r3, [pc, #100]	; (800928c <cppLoop+0x1544>)
 8009228:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 800922a:	4b18      	ldr	r3, [pc, #96]	; (800928c <cppLoop+0x1544>)
 800922c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009230:	2b01      	cmp	r3, #1
 8009232:	dd02      	ble.n	800923a <cppLoop+0x14f2>
 8009234:	4b15      	ldr	r3, [pc, #84]	; (800928c <cppLoop+0x1544>)
 8009236:	2200      	movs	r2, #0
 8009238:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800923a:	2200      	movs	r2, #0
 800923c:	f04f 31ff 	mov.w	r1, #4294967295
 8009240:	4805      	ldr	r0, [pc, #20]	; (8009258 <cppLoop+0x1510>)
 8009242:	f7f9 f8c3 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009246:	f000 bd27 	b.w	8009c98 <cppLoop+0x1f50>
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w
 8009250:	9999999a 	.word	0x9999999a
 8009254:	3fb99999 	.word	0x3fb99999
 8009258:	200005d0 	.word	0x200005d0
 800925c:	2001db64 	.word	0x2001db64
 8009260:	0801a0d4 	.word	0x0801a0d4
 8009264:	0801a0e0 	.word	0x0801a0e0
 8009268:	200005c4 	.word	0x200005c4
 800926c:	200423dc 	.word	0x200423dc
 8009270:	2004243c 	.word	0x2004243c
 8009274:	20042444 	.word	0x20042444
 8009278:	0801a0ec 	.word	0x0801a0ec
 800927c:	0801a018 	.word	0x0801a018
 8009280:	0801a0f4 	.word	0x0801a0f4
 8009284:	0801a0fc 	.word	0x0801a0fc
 8009288:	0801a108 	.word	0x0801a108
 800928c:	200423de 	.word	0x200423de
		else if(joy_stick.getValue() == JOY_R){
 8009290:	48bf      	ldr	r0, [pc, #764]	; (8009590 <cppLoop+0x1848>)
 8009292:	f7f8 ff7b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009296:	4603      	mov	r3, r0
 8009298:	2b10      	cmp	r3, #16
 800929a:	bf0c      	ite	eq
 800929c:	2301      	moveq	r3, #1
 800929e:	2300      	movne	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d03c      	beq.n	8009320 <cppLoop+0x15d8>
			led.LR(-1, 1);
 80092a6:	2201      	movs	r2, #1
 80092a8:	f04f 31ff 	mov.w	r1, #4294967295
 80092ac:	48b9      	ldr	r0, [pc, #740]	; (8009594 <cppLoop+0x184c>)
 80092ae:	f7f9 f88d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80092b2:	2064      	movs	r0, #100	; 0x64
 80092b4:	f000 fe28 	bl	8009f08 <HAL_Delay>
			if(selector_acc2 == 0){
 80092b8:	4bb7      	ldr	r3, [pc, #732]	; (8009598 <cppLoop+0x1850>)
 80092ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d113      	bne.n	80092ea <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 80092c2:	4bb6      	ldr	r3, [pc, #728]	; (800959c <cppLoop+0x1854>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7f7 f956 	bl	8000578 <__aeabi_f2d>
 80092cc:	a3ae      	add	r3, pc, #696	; (adr r3, 8009588 <cppLoop+0x1840>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f6 fff3 	bl	80002bc <__adddf3>
 80092d6:	4603      	mov	r3, r0
 80092d8:	460c      	mov	r4, r1
 80092da:	4618      	mov	r0, r3
 80092dc:	4621      	mov	r1, r4
 80092de:	f7f7 fc9b 	bl	8000c18 <__aeabi_d2f>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4bad      	ldr	r3, [pc, #692]	; (800959c <cppLoop+0x1854>)
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	e012      	b.n	8009310 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 80092ea:	4bad      	ldr	r3, [pc, #692]	; (80095a0 <cppLoop+0x1858>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f7 f942 	bl	8000578 <__aeabi_f2d>
 80092f4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009588 <cppLoop+0x1840>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f6 ffdf 	bl	80002bc <__adddf3>
 80092fe:	4603      	mov	r3, r0
 8009300:	460c      	mov	r4, r1
 8009302:	4618      	mov	r0, r3
 8009304:	4621      	mov	r1, r4
 8009306:	f7f7 fc87 	bl	8000c18 <__aeabi_d2f>
 800930a:	4602      	mov	r2, r0
 800930c:	4ba4      	ldr	r3, [pc, #656]	; (80095a0 <cppLoop+0x1858>)
 800930e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009310:	2200      	movs	r2, #0
 8009312:	f04f 31ff 	mov.w	r1, #4294967295
 8009316:	489f      	ldr	r0, [pc, #636]	; (8009594 <cppLoop+0x184c>)
 8009318:	f7f9 f858 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800931c:	f000 bcbc 	b.w	8009c98 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8009320:	489b      	ldr	r0, [pc, #620]	; (8009590 <cppLoop+0x1848>)
 8009322:	f7f8 ff33 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009326:	4603      	mov	r3, r0
 8009328:	2b01      	cmp	r3, #1
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d03c      	beq.n	80093b0 <cppLoop+0x1668>
			led.LR(-1, 1);
 8009336:	2201      	movs	r2, #1
 8009338:	f04f 31ff 	mov.w	r1, #4294967295
 800933c:	4895      	ldr	r0, [pc, #596]	; (8009594 <cppLoop+0x184c>)
 800933e:	f7f9 f845 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009342:	2064      	movs	r0, #100	; 0x64
 8009344:	f000 fde0 	bl	8009f08 <HAL_Delay>
			if(selector_acc2 == 0){
 8009348:	4b93      	ldr	r3, [pc, #588]	; (8009598 <cppLoop+0x1850>)
 800934a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d113      	bne.n	800937a <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 8009352:	4b92      	ldr	r3, [pc, #584]	; (800959c <cppLoop+0x1854>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f7f7 f90e 	bl	8000578 <__aeabi_f2d>
 800935c:	a38a      	add	r3, pc, #552	; (adr r3, 8009588 <cppLoop+0x1840>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f7f6 ffa9 	bl	80002b8 <__aeabi_dsub>
 8009366:	4603      	mov	r3, r0
 8009368:	460c      	mov	r4, r1
 800936a:	4618      	mov	r0, r3
 800936c:	4621      	mov	r1, r4
 800936e:	f7f7 fc53 	bl	8000c18 <__aeabi_d2f>
 8009372:	4602      	mov	r2, r0
 8009374:	4b89      	ldr	r3, [pc, #548]	; (800959c <cppLoop+0x1854>)
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	e012      	b.n	80093a0 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 800937a:	4b89      	ldr	r3, [pc, #548]	; (80095a0 <cppLoop+0x1858>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f7f7 f8fa 	bl	8000578 <__aeabi_f2d>
 8009384:	a380      	add	r3, pc, #512	; (adr r3, 8009588 <cppLoop+0x1840>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ff95 	bl	80002b8 <__aeabi_dsub>
 800938e:	4603      	mov	r3, r0
 8009390:	460c      	mov	r4, r1
 8009392:	4618      	mov	r0, r3
 8009394:	4621      	mov	r1, r4
 8009396:	f7f7 fc3f 	bl	8000c18 <__aeabi_d2f>
 800939a:	4602      	mov	r2, r0
 800939c:	4b80      	ldr	r3, [pc, #512]	; (80095a0 <cppLoop+0x1858>)
 800939e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80093a0:	2200      	movs	r2, #0
 80093a2:	f04f 31ff 	mov.w	r1, #4294967295
 80093a6:	487b      	ldr	r0, [pc, #492]	; (8009594 <cppLoop+0x184c>)
 80093a8:	f7f9 f810 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80093ac:	f000 bc74 	b.w	8009c98 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 80093b0:	4877      	ldr	r0, [pc, #476]	; (8009590 <cppLoop+0x1848>)
 80093b2:	f7f8 feeb 	bl	800218c <_ZN8JoyStick8getValueEv>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	bf0c      	ite	eq
 80093bc:	2301      	moveq	r3, #1
 80093be:	2300      	movne	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 8468 	beq.w	8009c98 <cppLoop+0x1f50>
			led.LR(-1, 1);
 80093c8:	2201      	movs	r2, #1
 80093ca:	f04f 31ff 	mov.w	r1, #4294967295
 80093ce:	4871      	ldr	r0, [pc, #452]	; (8009594 <cppLoop+0x184c>)
 80093d0:	f7f8 fffc 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093d8:	f000 fd96 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80093dc:	2300      	movs	r3, #0
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4b6e      	ldr	r3, [pc, #440]	; (800959c <cppLoop+0x1854>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	496f      	ldr	r1, [pc, #444]	; (80095a4 <cppLoop+0x185c>)
 80093e6:	4870      	ldr	r0, [pc, #448]	; (80095a8 <cppLoop+0x1860>)
 80093e8:	f7f8 fa48 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80093ec:	2300      	movs	r3, #0
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	4b6b      	ldr	r3, [pc, #428]	; (80095a0 <cppLoop+0x1858>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	496d      	ldr	r1, [pc, #436]	; (80095ac <cppLoop+0x1864>)
 80093f6:	486c      	ldr	r0, [pc, #432]	; (80095a8 <cppLoop+0x1860>)
 80093f8:	f7f8 fa40 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80093fc:	4b67      	ldr	r3, [pc, #412]	; (800959c <cppLoop+0x1854>)
 80093fe:	edd3 7a00 	vldr	s15, [r3]
 8009402:	4b67      	ldr	r3, [pc, #412]	; (80095a0 <cppLoop+0x1858>)
 8009404:	ed93 7a00 	vldr	s14, [r3]
 8009408:	eef0 0a47 	vmov.f32	s1, s14
 800940c:	eeb0 0a67 	vmov.f32	s0, s15
 8009410:	4867      	ldr	r0, [pc, #412]	; (80095b0 <cppLoop+0x1868>)
 8009412:	f7fa fdb2 	bl	8003f7a <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009416:	2200      	movs	r2, #0
 8009418:	f04f 31ff 	mov.w	r1, #4294967295
 800941c:	485d      	ldr	r0, [pc, #372]	; (8009594 <cppLoop+0x184c>)
 800941e:	f7f8 ffd5 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009422:	f000 bc39 	b.w	8009c98 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 8009426:	217e      	movs	r1, #126	; 0x7e
 8009428:	485a      	ldr	r0, [pc, #360]	; (8009594 <cppLoop+0x184c>)
 800942a:	f7f8 ff13 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800942e:	f7f7 fe37 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009432:	2100      	movs	r1, #0
 8009434:	2000      	movs	r0, #0
 8009436:	f7f7 fe43 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800943a:	485e      	ldr	r0, [pc, #376]	; (80095b4 <cppLoop+0x186c>)
 800943c:	f7f7 fe6a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009440:	2101      	movs	r1, #1
 8009442:	2000      	movs	r0, #0
 8009444:	f7f7 fe3c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009448:	485b      	ldr	r0, [pc, #364]	; (80095b8 <cppLoop+0x1870>)
 800944a:	f7f7 fe63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800944e:	4850      	ldr	r0, [pc, #320]	; (8009590 <cppLoop+0x1848>)
 8009450:	f7f8 fe9c 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009454:	4603      	mov	r3, r0
 8009456:	2b02      	cmp	r3, #2
 8009458:	bf0c      	ite	eq
 800945a:	2301      	moveq	r3, #1
 800945c:	2300      	movne	r3, #0
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 841b 	beq.w	8009c9c <cppLoop+0x1f54>
			led.LR(-1, 1);
 8009466:	2201      	movs	r2, #1
 8009468:	f04f 31ff 	mov.w	r1, #4294967295
 800946c:	4849      	ldr	r0, [pc, #292]	; (8009594 <cppLoop+0x184c>)
 800946e:	f7f8 ffad 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009476:	f000 fd47 	bl	8009f08 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800947a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80095bc <cppLoop+0x1874>
 800947e:	484c      	ldr	r0, [pc, #304]	; (80095b0 <cppLoop+0x1868>)
 8009480:	f7fa fcb2 	bl	8003de8 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009484:	484a      	ldr	r0, [pc, #296]	; (80095b0 <cppLoop+0x1868>)
 8009486:	f7fa ff13 	bl	80042b0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800948a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800948e:	f000 fd3b 	bl	8009f08 <HAL_Delay>

			led.fullColor('R');
 8009492:	2152      	movs	r1, #82	; 0x52
 8009494:	483f      	ldr	r0, [pc, #252]	; (8009594 <cppLoop+0x184c>)
 8009496:	f7f8 fedd 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800949a:	4849      	ldr	r0, [pc, #292]	; (80095c0 <cppLoop+0x1878>)
 800949c:	f7f8 f940 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80094a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80094a4:	f000 fd30 	bl	8009f08 <HAL_Delay>

			line_trace.stop();
 80094a8:	4841      	ldr	r0, [pc, #260]	; (80095b0 <cppLoop+0x1868>)
 80094aa:	f7fa ffad 	bl	8004408 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80094ae:	4945      	ldr	r1, [pc, #276]	; (80095c4 <cppLoop+0x187c>)
 80094b0:	4845      	ldr	r0, [pc, #276]	; (80095c8 <cppLoop+0x1880>)
 80094b2:	f7f8 f96e 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 80094b6:	4842      	ldr	r0, [pc, #264]	; (80095c0 <cppLoop+0x1878>)
 80094b8:	f7f8 f8f6 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80094bc:	eef0 7a40 	vmov.f32	s15, s0
 80094c0:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80094c4:	1d3b      	adds	r3, r7, #4
 80094c6:	2201      	movs	r2, #1
 80094c8:	4619      	mov	r1, r3
 80094ca:	2001      	movs	r0, #1
 80094cc:	f7f8 f984 	bl	80017d8 <sd_write_float>
			user_fclose();
 80094d0:	f7f8 f972 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80094d4:	2200      	movs	r2, #0
 80094d6:	f04f 31ff 	mov.w	r1, #4294967295
 80094da:	482e      	ldr	r0, [pc, #184]	; (8009594 <cppLoop+0x184c>)
 80094dc:	f7f8 ff76 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80094e0:	e3dc      	b.n	8009c9c <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 80094e2:	217e      	movs	r1, #126	; 0x7e
 80094e4:	482b      	ldr	r0, [pc, #172]	; (8009594 <cppLoop+0x184c>)
 80094e6:	f7f8 feb5 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ea:	f7f7 fdd9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094ee:	2100      	movs	r1, #0
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7f7 fde5 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80094f6:	4835      	ldr	r0, [pc, #212]	; (80095cc <cppLoop+0x1884>)
 80094f8:	f7f7 fe0c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094fc:	2101      	movs	r1, #1
 80094fe:	2000      	movs	r0, #0
 8009500:	f7f7 fdde 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009504:	4832      	ldr	r0, [pc, #200]	; (80095d0 <cppLoop+0x1888>)
 8009506:	f7f7 fe05 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800950a:	4821      	ldr	r0, [pc, #132]	; (8009590 <cppLoop+0x1848>)
 800950c:	f7f8 fe3e 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009510:	4603      	mov	r3, r0
 8009512:	2b02      	cmp	r3, #2
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 83bf 	beq.w	8009ca0 <cppLoop+0x1f58>
			HAL_Delay(500);
 8009522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009526:	f000 fcef 	bl	8009f08 <HAL_Delay>
			led.LR(-1, 1);
 800952a:	2201      	movs	r2, #1
 800952c:	f04f 31ff 	mov.w	r1, #4294967295
 8009530:	4818      	ldr	r0, [pc, #96]	; (8009594 <cppLoop+0x184c>)
 8009532:	f7f8 ff4b 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009536:	2102      	movs	r1, #2
 8009538:	481d      	ldr	r0, [pc, #116]	; (80095b0 <cppLoop+0x1868>)
 800953a:	f7fa fea7 	bl	800428c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800953e:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <cppLoop+0x188c>)
 8009540:	edd3 7a00 	vldr	s15, [r3]
 8009544:	eeb0 0a67 	vmov.f32	s0, s15
 8009548:	4819      	ldr	r0, [pc, #100]	; (80095b0 <cppLoop+0x1868>)
 800954a:	f7fa fc5c 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800954e:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <cppLoop+0x188c>)
 8009550:	edd3 7a00 	vldr	s15, [r3]
 8009554:	eeb0 0a67 	vmov.f32	s0, s15
 8009558:	4815      	ldr	r0, [pc, #84]	; (80095b0 <cppLoop+0x1868>)
 800955a:	f7fa fc64 	bl	8003e26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800955e:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <cppLoop+0x188c>)
 8009560:	edd3 7a00 	vldr	s15, [r3]
 8009564:	eeb0 0a67 	vmov.f32	s0, s15
 8009568:	4811      	ldr	r0, [pc, #68]	; (80095b0 <cppLoop+0x1868>)
 800956a:	f7fa fc7c 	bl	8003e66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800956e:	4810      	ldr	r0, [pc, #64]	; (80095b0 <cppLoop+0x1868>)
 8009570:	f7fb f89a 	bl	80046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009574:	2200      	movs	r2, #0
 8009576:	f04f 31ff 	mov.w	r1, #4294967295
 800957a:	4806      	ldr	r0, [pc, #24]	; (8009594 <cppLoop+0x184c>)
 800957c:	f7f8 ff26 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009580:	e38e      	b.n	8009ca0 <cppLoop+0x1f58>
 8009582:	bf00      	nop
 8009584:	f3af 8000 	nop.w
 8009588:	9999999a 	.word	0x9999999a
 800958c:	3fb99999 	.word	0x3fb99999
 8009590:	200005c4 	.word	0x200005c4
 8009594:	200005d0 	.word	0x200005d0
 8009598:	200423de 	.word	0x200423de
 800959c:	2004244c 	.word	0x2004244c
 80095a0:	20042454 	.word	0x20042454
 80095a4:	0801a114 	.word	0x0801a114
 80095a8:	0801a018 	.word	0x0801a018
 80095ac:	0801a120 	.word	0x0801a120
 80095b0:	2001db64 	.word	0x2001db64
 80095b4:	0801a12c 	.word	0x0801a12c
 80095b8:	0801a134 	.word	0x0801a134
 80095bc:	00000000 	.word	0x00000000
 80095c0:	2001dac0 	.word	0x2001dac0
 80095c4:	0801a140 	.word	0x0801a140
 80095c8:	0801a148 	.word	0x0801a148
 80095cc:	0801a154 	.word	0x0801a154
 80095d0:	0801a160 	.word	0x0801a160
 80095d4:	20042424 	.word	0x20042424

	case 11:
		led.fullColor('~');
 80095d8:	217e      	movs	r1, #126	; 0x7e
 80095da:	48b5      	ldr	r0, [pc, #724]	; (80098b0 <cppLoop+0x1b68>)
 80095dc:	f7f8 fe3a 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 80095e0:	f7f7 fd5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095e4:	2100      	movs	r1, #0
 80095e6:	2000      	movs	r0, #0
 80095e8:	f7f7 fd6a 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80095ec:	48b1      	ldr	r0, [pc, #708]	; (80098b4 <cppLoop+0x1b6c>)
 80095ee:	f7f7 fd91 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095f2:	2101      	movs	r1, #1
 80095f4:	2000      	movs	r0, #0
 80095f6:	f7f7 fd63 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80095fa:	48af      	ldr	r0, [pc, #700]	; (80098b8 <cppLoop+0x1b70>)
 80095fc:	f7f7 fd8a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009600:	48ae      	ldr	r0, [pc, #696]	; (80098bc <cppLoop+0x1b74>)
 8009602:	f7f8 fdc3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009606:	4603      	mov	r3, r0
 8009608:	2b02      	cmp	r3, #2
 800960a:	bf0c      	ite	eq
 800960c:	2301      	moveq	r3, #1
 800960e:	2300      	movne	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 8346 	beq.w	8009ca4 <cppLoop+0x1f5c>
			HAL_Delay(1000);
 8009618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800961c:	f000 fc74 	bl	8009f08 <HAL_Delay>
			led.LR(-1, 1);
 8009620:	2201      	movs	r2, #1
 8009622:	f04f 31ff 	mov.w	r1, #4294967295
 8009626:	48a2      	ldr	r0, [pc, #648]	; (80098b0 <cppLoop+0x1b68>)
 8009628:	f7f8 fed0 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800962c:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80098c0 <cppLoop+0x1b78>
 8009630:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80098c0 <cppLoop+0x1b78>
 8009634:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80098c0 <cppLoop+0x1b78>
 8009638:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80098c0 <cppLoop+0x1b78>
 800963c:	48a1      	ldr	r0, [pc, #644]	; (80098c4 <cppLoop+0x1b7c>)
 800963e:	f7f7 fe07 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009642:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009646:	f000 fc5f 	bl	8009f08 <HAL_Delay>
			esc.off();
 800964a:	489e      	ldr	r0, [pc, #632]	; (80098c4 <cppLoop+0x1b7c>)
 800964c:	f7f7 fe9a 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009650:	2200      	movs	r2, #0
 8009652:	f04f 31ff 	mov.w	r1, #4294967295
 8009656:	4896      	ldr	r0, [pc, #600]	; (80098b0 <cppLoop+0x1b68>)
 8009658:	f7f8 feb8 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800965c:	e322      	b.n	8009ca4 <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 800965e:	217e      	movs	r1, #126	; 0x7e
 8009660:	4893      	ldr	r0, [pc, #588]	; (80098b0 <cppLoop+0x1b68>)
 8009662:	f7f8 fdf7 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009666:	f7f7 fd1b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800966a:	2100      	movs	r1, #0
 800966c:	2000      	movs	r0, #0
 800966e:	f7f7 fd27 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009672:	4895      	ldr	r0, [pc, #596]	; (80098c8 <cppLoop+0x1b80>)
 8009674:	f7f7 fd4e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009678:	2101      	movs	r1, #1
 800967a:	2000      	movs	r0, #0
 800967c:	f7f7 fd20 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009680:	4892      	ldr	r0, [pc, #584]	; (80098cc <cppLoop+0x1b84>)
 8009682:	f7f7 fd47 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009686:	488d      	ldr	r0, [pc, #564]	; (80098bc <cppLoop+0x1b74>)
 8009688:	f7f8 fd80 	bl	800218c <_ZN8JoyStick8getValueEv>
 800968c:	4603      	mov	r3, r0
 800968e:	2b02      	cmp	r3, #2
 8009690:	bf0c      	ite	eq
 8009692:	2301      	moveq	r3, #1
 8009694:	2300      	movne	r3, #0
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8305 	beq.w	8009ca8 <cppLoop+0x1f60>
			HAL_Delay(1500);
 800969e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80096a2:	f000 fc31 	bl	8009f08 <HAL_Delay>
			led.LR(-1, 1);
 80096a6:	2201      	movs	r2, #1
 80096a8:	f04f 31ff 	mov.w	r1, #4294967295
 80096ac:	4880      	ldr	r0, [pc, #512]	; (80098b0 <cppLoop+0x1b68>)
 80096ae:	f7f8 fe8d 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80096b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096b6:	f000 fc27 	bl	8009f08 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80096ba:	eddf 1a81 	vldr	s3, [pc, #516]	; 80098c0 <cppLoop+0x1b78>
 80096be:	ed9f 1a80 	vldr	s2, [pc, #512]	; 80098c0 <cppLoop+0x1b78>
 80096c2:	eddf 0a7f 	vldr	s1, [pc, #508]	; 80098c0 <cppLoop+0x1b78>
 80096c6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80098c0 <cppLoop+0x1b78>
 80096ca:	487e      	ldr	r0, [pc, #504]	; (80098c4 <cppLoop+0x1b7c>)
 80096cc:	f7f7 fdc0 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80096d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096d4:	f000 fc18 	bl	8009f08 <HAL_Delay>

			logger.start();
 80096d8:	487d      	ldr	r0, [pc, #500]	; (80098d0 <cppLoop+0x1b88>)
 80096da:	f7fb fb6a 	bl	8004db2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80096de:	487d      	ldr	r0, [pc, #500]	; (80098d4 <cppLoop+0x1b8c>)
 80096e0:	f7fc fcaf 	bl	8006042 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80096e4:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80098d8 <cppLoop+0x1b90>
 80096e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096ec:	4879      	ldr	r0, [pc, #484]	; (80098d4 <cppLoop+0x1b8c>)
 80096ee:	f7fc fc3b 	bl	8005f68 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80096f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096f6:	f000 fc07 	bl	8009f08 <HAL_Delay>

			logger.stop();
 80096fa:	4875      	ldr	r0, [pc, #468]	; (80098d0 <cppLoop+0x1b88>)
 80096fc:	f7fb fb69 	bl	8004dd2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009700:	4874      	ldr	r0, [pc, #464]	; (80098d4 <cppLoop+0x1b8c>)
 8009702:	f7fc fcb1 	bl	8006068 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009706:	486f      	ldr	r0, [pc, #444]	; (80098c4 <cppLoop+0x1b7c>)
 8009708:	f7f7 fe3c 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800970c:	4a73      	ldr	r2, [pc, #460]	; (80098dc <cppLoop+0x1b94>)
 800970e:	4974      	ldr	r1, [pc, #464]	; (80098e0 <cppLoop+0x1b98>)
 8009710:	486f      	ldr	r0, [pc, #444]	; (80098d0 <cppLoop+0x1b88>)
 8009712:	f7fb fa45 	bl	8004ba0 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009716:	2200      	movs	r2, #0
 8009718:	f04f 31ff 	mov.w	r1, #4294967295
 800971c:	4864      	ldr	r0, [pc, #400]	; (80098b0 <cppLoop+0x1b68>)
 800971e:	f7f8 fe55 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 8009722:	e2c1      	b.n	8009ca8 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 8009724:	2157      	movs	r1, #87	; 0x57
 8009726:	4862      	ldr	r0, [pc, #392]	; (80098b0 <cppLoop+0x1b68>)
 8009728:	f7f8 fd94 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800972c:	f7f7 fcb8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009730:	2100      	movs	r1, #0
 8009732:	2000      	movs	r0, #0
 8009734:	f7f7 fcc4 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009738:	486a      	ldr	r0, [pc, #424]	; (80098e4 <cppLoop+0x1b9c>)
 800973a:	f7f7 fceb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800973e:	2101      	movs	r1, #1
 8009740:	2000      	movs	r0, #0
 8009742:	f7f7 fcbd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009746:	4b68      	ldr	r3, [pc, #416]	; (80098e8 <cppLoop+0x1ba0>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f7f6 ff14 	bl	8000578 <__aeabi_f2d>
 8009750:	4603      	mov	r3, r0
 8009752:	460c      	mov	r4, r1
 8009754:	461a      	mov	r2, r3
 8009756:	4623      	mov	r3, r4
 8009758:	4864      	ldr	r0, [pc, #400]	; (80098ec <cppLoop+0x1ba4>)
 800975a:	f7f7 fcdb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800975e:	4857      	ldr	r0, [pc, #348]	; (80098bc <cppLoop+0x1b74>)
 8009760:	f7f8 fd14 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009764:	4603      	mov	r3, r0
 8009766:	2b02      	cmp	r3, #2
 8009768:	bf0c      	ite	eq
 800976a:	2301      	moveq	r3, #1
 800976c:	2300      	movne	r3, #0
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 829b 	beq.w	8009cac <cppLoop+0x1f64>
			HAL_Delay(500);
 8009776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800977a:	f000 fbc5 	bl	8009f08 <HAL_Delay>

			led.LR(1, -1);
 800977e:	f04f 32ff 	mov.w	r2, #4294967295
 8009782:	2101      	movs	r1, #1
 8009784:	484a      	ldr	r0, [pc, #296]	; (80098b0 <cppLoop+0x1b68>)
 8009786:	f7f8 fe21 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800978a:	2102      	movs	r1, #2
 800978c:	4858      	ldr	r0, [pc, #352]	; (80098f0 <cppLoop+0x1ba8>)
 800978e:	f7fa fd7d 	bl	800428c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009792:	4b58      	ldr	r3, [pc, #352]	; (80098f4 <cppLoop+0x1bac>)
 8009794:	edd3 7a00 	vldr	s15, [r3]
 8009798:	eeb0 0a67 	vmov.f32	s0, s15
 800979c:	4854      	ldr	r0, [pc, #336]	; (80098f0 <cppLoop+0x1ba8>)
 800979e:	f7fa fb32 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80097a2:	4b51      	ldr	r3, [pc, #324]	; (80098e8 <cppLoop+0x1ba0>)
 80097a4:	edd3 7a00 	vldr	s15, [r3]
 80097a8:	eeb0 0a67 	vmov.f32	s0, s15
 80097ac:	4850      	ldr	r0, [pc, #320]	; (80098f0 <cppLoop+0x1ba8>)
 80097ae:	f7fa fb3a 	bl	8003e26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80097b2:	4b4d      	ldr	r3, [pc, #308]	; (80098e8 <cppLoop+0x1ba0>)
 80097b4:	edd3 7a00 	vldr	s15, [r3]
 80097b8:	eeb0 0a67 	vmov.f32	s0, s15
 80097bc:	484c      	ldr	r0, [pc, #304]	; (80098f0 <cppLoop+0x1ba8>)
 80097be:	f7fa fb52 	bl	8003e66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80097c2:	484b      	ldr	r0, [pc, #300]	; (80098f0 <cppLoop+0x1ba8>)
 80097c4:	f7fa ff70 	bl	80046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80097c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097cc:	f000 fb9c 	bl	8009f08 <HAL_Delay>

			line_trace.running();
 80097d0:	4847      	ldr	r0, [pc, #284]	; (80098f0 <cppLoop+0x1ba8>)
 80097d2:	f7fa fd9f 	bl	8004314 <_ZN9LineTrace7runningEv>

			esc.off();
 80097d6:	483b      	ldr	r0, [pc, #236]	; (80098c4 <cppLoop+0x1b7c>)
 80097d8:	f7f7 fdd4 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	2100      	movs	r1, #0
 80097e2:	4833      	ldr	r0, [pc, #204]	; (80098b0 <cppLoop+0x1b68>)
 80097e4:	f7f8 fdf2 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80097e8:	e260      	b.n	8009cac <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 80097ea:	2157      	movs	r1, #87	; 0x57
 80097ec:	4830      	ldr	r0, [pc, #192]	; (80098b0 <cppLoop+0x1b68>)
 80097ee:	f7f8 fd31 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80097f2:	f7f7 fc55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80097f6:	2100      	movs	r1, #0
 80097f8:	2000      	movs	r0, #0
 80097fa:	f7f7 fc61 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80097fe:	483e      	ldr	r0, [pc, #248]	; (80098f8 <cppLoop+0x1bb0>)
 8009800:	f7f7 fc88 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009804:	2101      	movs	r1, #1
 8009806:	2000      	movs	r0, #0
 8009808:	f7f7 fc5a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800980c:	4b3b      	ldr	r3, [pc, #236]	; (80098fc <cppLoop+0x1bb4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	f7f6 feb1 	bl	8000578 <__aeabi_f2d>
 8009816:	4603      	mov	r3, r0
 8009818:	460c      	mov	r4, r1
 800981a:	461a      	mov	r2, r3
 800981c:	4623      	mov	r3, r4
 800981e:	4833      	ldr	r0, [pc, #204]	; (80098ec <cppLoop+0x1ba4>)
 8009820:	f7f7 fc78 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009824:	4825      	ldr	r0, [pc, #148]	; (80098bc <cppLoop+0x1b74>)
 8009826:	f7f8 fcb1 	bl	800218c <_ZN8JoyStick8getValueEv>
 800982a:	4603      	mov	r3, r0
 800982c:	2b02      	cmp	r3, #2
 800982e:	bf0c      	ite	eq
 8009830:	2301      	moveq	r3, #1
 8009832:	2300      	movne	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 823a 	beq.w	8009cb0 <cppLoop+0x1f68>
			HAL_Delay(500);
 800983c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009840:	f000 fb62 	bl	8009f08 <HAL_Delay>

			led.LR(1, -1);
 8009844:	f04f 32ff 	mov.w	r2, #4294967295
 8009848:	2101      	movs	r1, #1
 800984a:	4819      	ldr	r0, [pc, #100]	; (80098b0 <cppLoop+0x1b68>)
 800984c:	f7f8 fdbe 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009850:	2101      	movs	r1, #1
 8009852:	4827      	ldr	r0, [pc, #156]	; (80098f0 <cppLoop+0x1ba8>)
 8009854:	f7fa fd1a 	bl	800428c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009858:	4b29      	ldr	r3, [pc, #164]	; (8009900 <cppLoop+0x1bb8>)
 800985a:	edd3 7a00 	vldr	s15, [r3]
 800985e:	eeb0 0a67 	vmov.f32	s0, s15
 8009862:	4823      	ldr	r0, [pc, #140]	; (80098f0 <cppLoop+0x1ba8>)
 8009864:	f7fa facf 	bl	8003e06 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009868:	4b24      	ldr	r3, [pc, #144]	; (80098fc <cppLoop+0x1bb4>)
 800986a:	edd3 7a00 	vldr	s15, [r3]
 800986e:	eeb0 0a67 	vmov.f32	s0, s15
 8009872:	481f      	ldr	r0, [pc, #124]	; (80098f0 <cppLoop+0x1ba8>)
 8009874:	f7fa fad7 	bl	8003e26 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009878:	4b21      	ldr	r3, [pc, #132]	; (8009900 <cppLoop+0x1bb8>)
 800987a:	edd3 7a00 	vldr	s15, [r3]
 800987e:	eeb0 0a67 	vmov.f32	s0, s15
 8009882:	481b      	ldr	r0, [pc, #108]	; (80098f0 <cppLoop+0x1ba8>)
 8009884:	f7fa faef 	bl	8003e66 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009888:	4819      	ldr	r0, [pc, #100]	; (80098f0 <cppLoop+0x1ba8>)
 800988a:	f7fa ff0d 	bl	80046a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 800988e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009892:	f000 fb39 	bl	8009f08 <HAL_Delay>

			line_trace.running();
 8009896:	4816      	ldr	r0, [pc, #88]	; (80098f0 <cppLoop+0x1ba8>)
 8009898:	f7fa fd3c 	bl	8004314 <_ZN9LineTrace7runningEv>

			esc.off();
 800989c:	4809      	ldr	r0, [pc, #36]	; (80098c4 <cppLoop+0x1b7c>)
 800989e:	f7f7 fd71 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80098a2:	f04f 32ff 	mov.w	r2, #4294967295
 80098a6:	2100      	movs	r1, #0
 80098a8:	4801      	ldr	r0, [pc, #4]	; (80098b0 <cppLoop+0x1b68>)
 80098aa:	f7f8 fd8f 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80098ae:	e1ff      	b.n	8009cb0 <cppLoop+0x1f68>
 80098b0:	200005d0 	.word	0x200005d0
 80098b4:	0801a16c 	.word	0x0801a16c
 80098b8:	0801a170 	.word	0x0801a170
 80098bc:	200005c4 	.word	0x200005c4
 80098c0:	3ea3d70a 	.word	0x3ea3d70a
 80098c4:	2001db60 	.word	0x2001db60
 80098c8:	0801a178 	.word	0x0801a178
 80098cc:	0801a17c 	.word	0x0801a17c
 80098d0:	200005f4 	.word	0x200005f4
 80098d4:	2001dae0 	.word	0x2001dae0
 80098d8:	00000000 	.word	0x00000000
 80098dc:	0801a188 	.word	0x0801a188
 80098e0:	0801a194 	.word	0x0801a194
 80098e4:	0801a1a0 	.word	0x0801a1a0
 80098e8:	20042424 	.word	0x20042424
 80098ec:	0801a044 	.word	0x0801a044
 80098f0:	2001db64 	.word	0x2001db64
 80098f4:	20042434 	.word	0x20042434
 80098f8:	0801a1ac 	.word	0x0801a1ac
 80098fc:	2004241c 	.word	0x2004241c
 8009900:	2004242c 	.word	0x2004242c

	case 15:
		led.fullColor('W');
 8009904:	2157      	movs	r1, #87	; 0x57
 8009906:	48ac      	ldr	r0, [pc, #688]	; (8009bb8 <cppLoop+0x1e70>)
 8009908:	f7f8 fca4 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800990c:	f7f7 fbc8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009910:	2100      	movs	r1, #0
 8009912:	2000      	movs	r0, #0
 8009914:	f7f7 fbd4 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009918:	48a8      	ldr	r0, [pc, #672]	; (8009bbc <cppLoop+0x1e74>)
 800991a:	f7fa f9f2 	bl	8003d02 <_ZN9LineTrace5getKpEv>
 800991e:	eeb0 7a40 	vmov.f32	s14, s0
 8009922:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009bc0 <cppLoop+0x1e78>
 8009926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992a:	eeb0 0a67 	vmov.f32	s0, s15
 800992e:	f7f9 f8bd 	bl	8002aac <_ZSt3absf>
 8009932:	ee10 3a10 	vmov	r3, s0
 8009936:	4618      	mov	r0, r3
 8009938:	f7f6 fe1e 	bl	8000578 <__aeabi_f2d>
 800993c:	4603      	mov	r3, r0
 800993e:	460c      	mov	r4, r1
 8009940:	461a      	mov	r2, r3
 8009942:	4623      	mov	r3, r4
 8009944:	489f      	ldr	r0, [pc, #636]	; (8009bc4 <cppLoop+0x1e7c>)
 8009946:	f7f7 fbe5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800994a:	2101      	movs	r1, #1
 800994c:	2000      	movs	r0, #0
 800994e:	f7f7 fbb7 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 8009952:	489a      	ldr	r0, [pc, #616]	; (8009bbc <cppLoop+0x1e74>)
 8009954:	f7fa f9e4 	bl	8003d20 <_ZN9LineTrace5getKiEv>
 8009958:	eeb0 7a40 	vmov.f32	s14, s0
 800995c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009bc8 <cppLoop+0x1e80>
 8009960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009964:	eeb0 0a67 	vmov.f32	s0, s15
 8009968:	f7f9 f8a0 	bl	8002aac <_ZSt3absf>
 800996c:	ee10 3a10 	vmov	r3, s0
 8009970:	4618      	mov	r0, r3
 8009972:	f7f6 fe01 	bl	8000578 <__aeabi_f2d>
 8009976:	4605      	mov	r5, r0
 8009978:	460e      	mov	r6, r1
 800997a:	4890      	ldr	r0, [pc, #576]	; (8009bbc <cppLoop+0x1e74>)
 800997c:	f7fa f9df 	bl	8003d3e <_ZN9LineTrace5getKdEv>
 8009980:	eeb0 7a40 	vmov.f32	s14, s0
 8009984:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009bcc <cppLoop+0x1e84>
 8009988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998c:	eeb0 0a67 	vmov.f32	s0, s15
 8009990:	f7f9 f88c 	bl	8002aac <_ZSt3absf>
 8009994:	ee10 3a10 	vmov	r3, s0
 8009998:	4618      	mov	r0, r3
 800999a:	f7f6 fded 	bl	8000578 <__aeabi_f2d>
 800999e:	4603      	mov	r3, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	e9cd 3400 	strd	r3, r4, [sp]
 80099a6:	462a      	mov	r2, r5
 80099a8:	4633      	mov	r3, r6
 80099aa:	4889      	ldr	r0, [pc, #548]	; (8009bd0 <cppLoop+0x1e88>)
 80099ac:	f7f7 fbb2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80099b0:	4888      	ldr	r0, [pc, #544]	; (8009bd4 <cppLoop+0x1e8c>)
 80099b2:	f7f8 fbeb 	bl	800218c <_ZN8JoyStick8getValueEv>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b08      	cmp	r3, #8
 80099ba:	bf0c      	ite	eq
 80099bc:	2301      	moveq	r3, #1
 80099be:	2300      	movne	r3, #0
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d021      	beq.n	8009a0a <cppLoop+0x1cc2>
			led.LR(-1, 1);
 80099c6:	2201      	movs	r2, #1
 80099c8:	f04f 31ff 	mov.w	r1, #4294967295
 80099cc:	487a      	ldr	r0, [pc, #488]	; (8009bb8 <cppLoop+0x1e70>)
 80099ce:	f7f8 fcfd 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80099d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099d6:	f000 fa97 	bl	8009f08 <HAL_Delay>

			selector++;
 80099da:	4b7f      	ldr	r3, [pc, #508]	; (8009bd8 <cppLoop+0x1e90>)
 80099dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3301      	adds	r3, #1
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	b21a      	sxth	r2, r3
 80099e8:	4b7b      	ldr	r3, [pc, #492]	; (8009bd8 <cppLoop+0x1e90>)
 80099ea:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80099ec:	4b7a      	ldr	r3, [pc, #488]	; (8009bd8 <cppLoop+0x1e90>)
 80099ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	dd02      	ble.n	80099fc <cppLoop+0x1cb4>
 80099f6:	4b78      	ldr	r3, [pc, #480]	; (8009bd8 <cppLoop+0x1e90>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80099fc:	2200      	movs	r2, #0
 80099fe:	f04f 31ff 	mov.w	r1, #4294967295
 8009a02:	486d      	ldr	r0, [pc, #436]	; (8009bb8 <cppLoop+0x1e70>)
 8009a04:	f7f8 fce2 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009a08:	e154      	b.n	8009cb4 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 8009a0a:	4872      	ldr	r0, [pc, #456]	; (8009bd4 <cppLoop+0x1e8c>)
 8009a0c:	f7f8 fbbe 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b10      	cmp	r3, #16
 8009a14:	bf0c      	ite	eq
 8009a16:	2301      	moveq	r3, #1
 8009a18:	2300      	movne	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d058      	beq.n	8009ad2 <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009a20:	2201      	movs	r2, #1
 8009a22:	f04f 31ff 	mov.w	r1, #4294967295
 8009a26:	4864      	ldr	r0, [pc, #400]	; (8009bb8 <cppLoop+0x1e70>)
 8009a28:	f7f8 fcd0 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009a2c:	2064      	movs	r0, #100	; 0x64
 8009a2e:	f000 fa6b 	bl	8009f08 <HAL_Delay>
			if(selector == 0){
 8009a32:	4b69      	ldr	r3, [pc, #420]	; (8009bd8 <cppLoop+0x1e90>)
 8009a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d113      	bne.n	8009a64 <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 8009a3c:	4b67      	ldr	r3, [pc, #412]	; (8009bdc <cppLoop+0x1e94>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7f6 fd99 	bl	8000578 <__aeabi_f2d>
 8009a46:	a356      	add	r3, pc, #344	; (adr r3, 8009ba0 <cppLoop+0x1e58>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fc36 	bl	80002bc <__adddf3>
 8009a50:	4603      	mov	r3, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	4618      	mov	r0, r3
 8009a56:	4621      	mov	r1, r4
 8009a58:	f7f7 f8de 	bl	8000c18 <__aeabi_d2f>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	4b5f      	ldr	r3, [pc, #380]	; (8009bdc <cppLoop+0x1e94>)
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	e02b      	b.n	8009abc <cppLoop+0x1d74>
			else if(selector == 1){
 8009a64:	4b5c      	ldr	r3, [pc, #368]	; (8009bd8 <cppLoop+0x1e90>)
 8009a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d113      	bne.n	8009a96 <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 8009a6e:	4b5c      	ldr	r3, [pc, #368]	; (8009be0 <cppLoop+0x1e98>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f6 fd80 	bl	8000578 <__aeabi_f2d>
 8009a78:	a34b      	add	r3, pc, #300	; (adr r3, 8009ba8 <cppLoop+0x1e60>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fc1d 	bl	80002bc <__adddf3>
 8009a82:	4603      	mov	r3, r0
 8009a84:	460c      	mov	r4, r1
 8009a86:	4618      	mov	r0, r3
 8009a88:	4621      	mov	r1, r4
 8009a8a:	f7f7 f8c5 	bl	8000c18 <__aeabi_d2f>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	4b53      	ldr	r3, [pc, #332]	; (8009be0 <cppLoop+0x1e98>)
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	e012      	b.n	8009abc <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 8009a96:	4b53      	ldr	r3, [pc, #332]	; (8009be4 <cppLoop+0x1e9c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f6 fd6c 	bl	8000578 <__aeabi_f2d>
 8009aa0:	a343      	add	r3, pc, #268	; (adr r3, 8009bb0 <cppLoop+0x1e68>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fc09 	bl	80002bc <__adddf3>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	4618      	mov	r0, r3
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	f7f7 f8b1 	bl	8000c18 <__aeabi_d2f>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b4a      	ldr	r3, [pc, #296]	; (8009be4 <cppLoop+0x1e9c>)
 8009aba:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009abc:	2152      	movs	r1, #82	; 0x52
 8009abe:	483e      	ldr	r0, [pc, #248]	; (8009bb8 <cppLoop+0x1e70>)
 8009ac0:	f7f8 fbc8 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8009aca:	483b      	ldr	r0, [pc, #236]	; (8009bb8 <cppLoop+0x1e70>)
 8009acc:	f7f8 fc7e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009ad0:	e0f0      	b.n	8009cb4 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8009ad2:	4840      	ldr	r0, [pc, #256]	; (8009bd4 <cppLoop+0x1e8c>)
 8009ad4:	f7f8 fb5a 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	bf0c      	ite	eq
 8009ade:	2301      	moveq	r3, #1
 8009ae0:	2300      	movne	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d07f      	beq.n	8009be8 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f04f 31ff 	mov.w	r1, #4294967295
 8009aee:	4832      	ldr	r0, [pc, #200]	; (8009bb8 <cppLoop+0x1e70>)
 8009af0:	f7f8 fc6c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009af4:	2064      	movs	r0, #100	; 0x64
 8009af6:	f000 fa07 	bl	8009f08 <HAL_Delay>
			if(selector == 0){
 8009afa:	4b37      	ldr	r3, [pc, #220]	; (8009bd8 <cppLoop+0x1e90>)
 8009afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d113      	bne.n	8009b2c <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 8009b04:	4b35      	ldr	r3, [pc, #212]	; (8009bdc <cppLoop+0x1e94>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f6 fd35 	bl	8000578 <__aeabi_f2d>
 8009b0e:	a324      	add	r3, pc, #144	; (adr r3, 8009ba0 <cppLoop+0x1e58>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fbd0 	bl	80002b8 <__aeabi_dsub>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f7f7 f87a 	bl	8000c18 <__aeabi_d2f>
 8009b24:	4602      	mov	r2, r0
 8009b26:	4b2d      	ldr	r3, [pc, #180]	; (8009bdc <cppLoop+0x1e94>)
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e02b      	b.n	8009b84 <cppLoop+0x1e3c>
			else if(selector == 1){
 8009b2c:	4b2a      	ldr	r3, [pc, #168]	; (8009bd8 <cppLoop+0x1e90>)
 8009b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d113      	bne.n	8009b5e <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 8009b36:	4b2a      	ldr	r3, [pc, #168]	; (8009be0 <cppLoop+0x1e98>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f6 fd1c 	bl	8000578 <__aeabi_f2d>
 8009b40:	a319      	add	r3, pc, #100	; (adr r3, 8009ba8 <cppLoop+0x1e60>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 fbb7 	bl	80002b8 <__aeabi_dsub>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	4618      	mov	r0, r3
 8009b50:	4621      	mov	r1, r4
 8009b52:	f7f7 f861 	bl	8000c18 <__aeabi_d2f>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b21      	ldr	r3, [pc, #132]	; (8009be0 <cppLoop+0x1e98>)
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	e012      	b.n	8009b84 <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 8009b5e:	4b21      	ldr	r3, [pc, #132]	; (8009be4 <cppLoop+0x1e9c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f6 fd08 	bl	8000578 <__aeabi_f2d>
 8009b68:	a311      	add	r3, pc, #68	; (adr r3, 8009bb0 <cppLoop+0x1e68>)
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f7f6 fba3 	bl	80002b8 <__aeabi_dsub>
 8009b72:	4603      	mov	r3, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	4618      	mov	r0, r3
 8009b78:	4621      	mov	r1, r4
 8009b7a:	f7f7 f84d 	bl	8000c18 <__aeabi_d2f>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <cppLoop+0x1e9c>)
 8009b82:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009b84:	2152      	movs	r1, #82	; 0x52
 8009b86:	480c      	ldr	r0, [pc, #48]	; (8009bb8 <cppLoop+0x1e70>)
 8009b88:	f7f8 fb64 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8009b92:	4809      	ldr	r0, [pc, #36]	; (8009bb8 <cppLoop+0x1e70>)
 8009b94:	f7f8 fc1a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009b98:	e08c      	b.n	8009cb4 <cppLoop+0x1f6c>
 8009b9a:	bf00      	nop
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	88e368f1 	.word	0x88e368f1
 8009ba4:	3ee4f8b5 	.word	0x3ee4f8b5
 8009ba8:	eb1c432d 	.word	0xeb1c432d
 8009bac:	3f1a36e2 	.word	0x3f1a36e2
 8009bb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8009bb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8009bb8:	200005d0 	.word	0x200005d0
 8009bbc:	2001db64 	.word	0x2001db64
 8009bc0:	447a0000 	.word	0x447a0000
 8009bc4:	0801a1b8 	.word	0x0801a1b8
 8009bc8:	42c80000 	.word	0x42c80000
 8009bcc:	461c4000 	.word	0x461c4000
 8009bd0:	08019ffc 	.word	0x08019ffc
 8009bd4:	200005c4 	.word	0x200005c4
 8009bd8:	200423da 	.word	0x200423da
 8009bdc:	200423e4 	.word	0x200423e4
 8009be0:	200423ec 	.word	0x200423ec
 8009be4:	200423f4 	.word	0x200423f4
		else if(joy_stick.getValue() == JOY_C){
 8009be8:	4836      	ldr	r0, [pc, #216]	; (8009cc4 <cppLoop+0x1f7c>)
 8009bea:	f7f8 facf 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	bf0c      	ite	eq
 8009bf4:	2301      	moveq	r3, #1
 8009bf6:	2300      	movne	r3, #0
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d05a      	beq.n	8009cb4 <cppLoop+0x1f6c>
			led.LR(-1, 1);
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f04f 31ff 	mov.w	r1, #4294967295
 8009c04:	4830      	ldr	r0, [pc, #192]	; (8009cc8 <cppLoop+0x1f80>)
 8009c06:	f7f8 fbe1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009c0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c0e:	f000 f97b 	bl	8009f08 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009c12:	2300      	movs	r3, #0
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4b2d      	ldr	r3, [pc, #180]	; (8009ccc <cppLoop+0x1f84>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	492d      	ldr	r1, [pc, #180]	; (8009cd0 <cppLoop+0x1f88>)
 8009c1c:	482d      	ldr	r0, [pc, #180]	; (8009cd4 <cppLoop+0x1f8c>)
 8009c1e:	f7f7 fe2d 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009c22:	2300      	movs	r3, #0
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4b2c      	ldr	r3, [pc, #176]	; (8009cd8 <cppLoop+0x1f90>)
 8009c28:	2201      	movs	r2, #1
 8009c2a:	492c      	ldr	r1, [pc, #176]	; (8009cdc <cppLoop+0x1f94>)
 8009c2c:	4829      	ldr	r0, [pc, #164]	; (8009cd4 <cppLoop+0x1f8c>)
 8009c2e:	f7f7 fe25 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009c32:	2300      	movs	r3, #0
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4b2a      	ldr	r3, [pc, #168]	; (8009ce0 <cppLoop+0x1f98>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	492a      	ldr	r1, [pc, #168]	; (8009ce4 <cppLoop+0x1f9c>)
 8009c3c:	4825      	ldr	r0, [pc, #148]	; (8009cd4 <cppLoop+0x1f8c>)
 8009c3e:	f7f7 fe1d 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009c42:	4b22      	ldr	r3, [pc, #136]	; (8009ccc <cppLoop+0x1f84>)
 8009c44:	edd3 7a00 	vldr	s15, [r3]
 8009c48:	4b23      	ldr	r3, [pc, #140]	; (8009cd8 <cppLoop+0x1f90>)
 8009c4a:	ed93 7a00 	vldr	s14, [r3]
 8009c4e:	4b24      	ldr	r3, [pc, #144]	; (8009ce0 <cppLoop+0x1f98>)
 8009c50:	edd3 6a00 	vldr	s13, [r3]
 8009c54:	eeb0 1a66 	vmov.f32	s2, s13
 8009c58:	eef0 0a47 	vmov.f32	s1, s14
 8009c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8009c60:	4821      	ldr	r0, [pc, #132]	; (8009ce8 <cppLoop+0x1fa0>)
 8009c62:	f7fa f835 	bl	8003cd0 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009c66:	2200      	movs	r2, #0
 8009c68:	f04f 31ff 	mov.w	r1, #4294967295
 8009c6c:	4816      	ldr	r0, [pc, #88]	; (8009cc8 <cppLoop+0x1f80>)
 8009c6e:	f7f8 fbad 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009c72:	e01f      	b.n	8009cb4 <cppLoop+0x1f6c>

	default:
		break;
 8009c74:	bf00      	nop
 8009c76:	e01e      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c78:	bf00      	nop
 8009c7a:	e01c      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c7c:	bf00      	nop
 8009c7e:	e01a      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c80:	bf00      	nop
 8009c82:	e018      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c84:	bf00      	nop
 8009c86:	e016      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c88:	bf00      	nop
 8009c8a:	e014      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c8c:	bf00      	nop
 8009c8e:	e012      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c90:	bf00      	nop
 8009c92:	e010      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c94:	bf00      	nop
 8009c96:	e00e      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c98:	bf00      	nop
 8009c9a:	e00c      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009c9c:	bf00      	nop
 8009c9e:	e00a      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009ca0:	bf00      	nop
 8009ca2:	e008      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009ca4:	bf00      	nop
 8009ca6:	e006      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009ca8:	bf00      	nop
 8009caa:	e004      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009cac:	bf00      	nop
 8009cae:	e002      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009cb0:	bf00      	nop
 8009cb2:	e000      	b.n	8009cb6 <cppLoop+0x1f6e>
		break;
 8009cb4:	bf00      	nop

	}

	HAL_Delay(30);
 8009cb6:	201e      	movs	r0, #30
 8009cb8:	f000 f926 	bl	8009f08 <HAL_Delay>

}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc4:	200005c4 	.word	0x200005c4
 8009cc8:	200005d0 	.word	0x200005d0
 8009ccc:	200423e4 	.word	0x200423e4
 8009cd0:	0801a1c4 	.word	0x0801a1c4
 8009cd4:	0801a018 	.word	0x0801a018
 8009cd8:	200423ec 	.word	0x200423ec
 8009cdc:	0801a1cc 	.word	0x0801a1cc
 8009ce0:	200423f4 	.word	0x200423f4
 8009ce4:	0801a1d4 	.word	0x0801a1d4
 8009ce8:	2001db64 	.word	0x2001db64

08009cec <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af06      	add	r7, sp, #24
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d142      	bne.n	8009d82 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d13d      	bne.n	8009d82 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009d06:	4821      	ldr	r0, [pc, #132]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d08:	f7f8 fb98 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009d0c:	4820      	ldr	r0, [pc, #128]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d0e:	f7fb fc5f 	bl	80055d0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009d12:	4820      	ldr	r0, [pc, #128]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009d14:	f7f8 fa2e 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009d18:	481f      	ldr	r0, [pc, #124]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d1a:	f7fb f86a 	bl	8004df2 <_ZN5MotorC1Ev>
IMU imu;
 8009d1e:	481f      	ldr	r0, [pc, #124]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d20:	f7f8 f824 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009d24:	481e      	ldr	r0, [pc, #120]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d26:	f7fa fdaf 	bl	8004888 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009d2a:	481e      	ldr	r0, [pc, #120]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d2c:	f7f7 fb4e 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009d30:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d32:	4a1c      	ldr	r2, [pc, #112]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d34:	4918      	ldr	r1, [pc, #96]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d36:	481c      	ldr	r0, [pc, #112]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d38:	f7fb ffe0 	bl	8005cfc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d3e:	4a17      	ldr	r2, [pc, #92]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d40:	4918      	ldr	r1, [pc, #96]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d42:	481a      	ldr	r0, [pc, #104]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d44:	f7fb f954 	bl	8004ff0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009d48:	4819      	ldr	r0, [pc, #100]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d4a:	f7f7 fa43 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009d4e:	4b18      	ldr	r3, [pc, #96]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d50:	9305      	str	r3, [sp, #20]
 8009d52:	4b12      	ldr	r3, [pc, #72]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d54:	9304      	str	r3, [sp, #16]
 8009d56:	4b12      	ldr	r3, [pc, #72]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d58:	9303      	str	r3, [sp, #12]
 8009d5a:	4b14      	ldr	r3, [pc, #80]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	4b11      	ldr	r3, [pc, #68]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d68:	4a08      	ldr	r2, [pc, #32]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d6a:	490b      	ldr	r1, [pc, #44]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d6c:	4811      	ldr	r0, [pc, #68]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009d6e:	f7f8 fead 	bl	8002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009d72:	4a09      	ldr	r2, [pc, #36]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d74:	490a      	ldr	r1, [pc, #40]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d76:	4810      	ldr	r0, [pc, #64]	; (8009db8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d78:	f7fb fda6 	bl	80058c8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009d7c:	480f      	ldr	r0, [pc, #60]	; (8009dbc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009d7e:	f7fb fab9 	bl	80052f4 <_ZN13PathFollowingC1Ev>
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	200002c0 	.word	0x200002c0
 8009d90:	200005b8 	.word	0x200005b8
 8009d94:	200005c4 	.word	0x200005c4
 8009d98:	200005cc 	.word	0x200005cc
 8009d9c:	200005e0 	.word	0x200005e0
 8009da0:	200005f4 	.word	0x200005f4
 8009da4:	2001dac0 	.word	0x2001dac0
 8009da8:	2001dae0 	.word	0x2001dae0
 8009dac:	2001db20 	.word	0x2001db20
 8009db0:	2001db60 	.word	0x2001db60
 8009db4:	2001db64 	.word	0x2001db64
 8009db8:	2002aaa4 	.word	0x2002aaa4
 8009dbc:	2002acb0 	.word	0x2002acb0

08009dc0 <_GLOBAL__sub_I_line_sensor>:
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009dc8:	2001      	movs	r0, #1
 8009dca:	f7ff ff8f 	bl	8009cec <_Z41__static_initialization_and_destruction_0ii>
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dd6:	e003      	b.n	8009de0 <LoopCopyDataInit>

08009dd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009dda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009ddc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009dde:	3104      	adds	r1, #4

08009de0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009de0:	480b      	ldr	r0, [pc, #44]	; (8009e10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009de2:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009de4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009de6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009de8:	d3f6      	bcc.n	8009dd8 <CopyDataInit>
  ldr  r2, =_sbss
 8009dea:	4a0b      	ldr	r2, [pc, #44]	; (8009e18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009dec:	e002      	b.n	8009df4 <LoopFillZerobss>

08009dee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009dee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009df0:	f842 3b04 	str.w	r3, [r2], #4

08009df4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009df6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009df8:	d3f9      	bcc.n	8009dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009dfa:	f7fd fe83 	bl	8007b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009dfe:	f00b fdd3 	bl	80159a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e02:	f7fc f9bd 	bl	8006180 <main>
  bx  lr    
 8009e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009e08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009e0c:	0801a7c8 	.word	0x0801a7c8
  ldr  r0, =_sdata
 8009e10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e14:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009e18:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009e1c:	20046e38 	.word	0x20046e38

08009e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e20:	e7fe      	b.n	8009e20 <ADC_IRQHandler>
	...

08009e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e28:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <HAL_Init+0x40>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a0d      	ldr	r2, [pc, #52]	; (8009e64 <HAL_Init+0x40>)
 8009e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e34:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <HAL_Init+0x40>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a0a      	ldr	r2, [pc, #40]	; (8009e64 <HAL_Init+0x40>)
 8009e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e40:	4b08      	ldr	r3, [pc, #32]	; (8009e64 <HAL_Init+0x40>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a07      	ldr	r2, [pc, #28]	; (8009e64 <HAL_Init+0x40>)
 8009e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e4c:	2003      	movs	r0, #3
 8009e4e:	f000 fd51 	bl	800a8f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e52:	2000      	movs	r0, #0
 8009e54:	f000 f808 	bl	8009e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e58:	f7fd f8a4 	bl	8006fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	40023c00 	.word	0x40023c00

08009e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e70:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <HAL_InitTick+0x54>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b12      	ldr	r3, [pc, #72]	; (8009ec0 <HAL_InitTick+0x58>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fd69 	bl	800a95e <HAL_SYSTICK_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e00e      	b.n	8009eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b0f      	cmp	r3, #15
 8009e9a:	d80a      	bhi.n	8009eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	f000 fd31 	bl	800a90a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ea8:	4a06      	ldr	r2, [pc, #24]	; (8009ec4 <HAL_InitTick+0x5c>)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e000      	b.n	8009eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20000000 	.word	0x20000000
 8009ec0:	20000008 	.word	0x20000008
 8009ec4:	20000004 	.word	0x20000004

08009ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <HAL_IncTick+0x20>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4b06      	ldr	r3, [pc, #24]	; (8009eec <HAL_IncTick+0x24>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	4a04      	ldr	r2, [pc, #16]	; (8009eec <HAL_IncTick+0x24>)
 8009eda:	6013      	str	r3, [r2, #0]
}
 8009edc:	bf00      	nop
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20000008 	.word	0x20000008
 8009eec:	20044dc0 	.word	0x20044dc0

08009ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8009ef4:	4b03      	ldr	r3, [pc, #12]	; (8009f04 <HAL_GetTick+0x14>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20044dc0 	.word	0x20044dc0

08009f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f10:	f7ff ffee 	bl	8009ef0 <HAL_GetTick>
 8009f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d005      	beq.n	8009f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <HAL_Delay+0x40>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f2e:	bf00      	nop
 8009f30:	f7ff ffde 	bl	8009ef0 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d8f7      	bhi.n	8009f30 <HAL_Delay+0x28>
  {
  }
}
 8009f40:	bf00      	nop
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	20000008 	.word	0x20000008

08009f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e033      	b.n	8009fca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7fd f842 	bl	8006ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f003 0310 	and.w	r3, r3, #16
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d118      	bne.n	8009fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009f92:	f023 0302 	bic.w	r3, r3, #2
 8009f96:	f043 0202 	orr.w	r2, r3, #2
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fa5a 	bl	800a458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	f023 0303 	bic.w	r3, r3, #3
 8009fb2:	f043 0201 	orr.w	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8009fba:	e001      	b.n	8009fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d101      	bne.n	8009ff2 <HAL_ADC_Start_DMA+0x1e>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e0cc      	b.n	800a18c <HAL_ADC_Start_DMA+0x1b8>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b01      	cmp	r3, #1
 800a006:	d018      	beq.n	800a03a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689a      	ldr	r2, [r3, #8]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a018:	4b5e      	ldr	r3, [pc, #376]	; (800a194 <HAL_ADC_Start_DMA+0x1c0>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a5e      	ldr	r2, [pc, #376]	; (800a198 <HAL_ADC_Start_DMA+0x1c4>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	0c9a      	lsrs	r2, r3, #18
 800a024:	4613      	mov	r3, r2
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	4413      	add	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a02c:	e002      	b.n	800a034 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	3b01      	subs	r3, #1
 800a032:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1f9      	bne.n	800a02e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b01      	cmp	r3, #1
 800a046:	f040 80a0 	bne.w	800a18a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a052:	f023 0301 	bic.w	r3, r3, #1
 800a056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a088:	d106      	bne.n	800a098 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08e:	f023 0206 	bic.w	r2, r3, #6
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	645a      	str	r2, [r3, #68]	; 0x44
 800a096:	e002      	b.n	800a09e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a0a6:	4b3d      	ldr	r3, [pc, #244]	; (800a19c <HAL_ADC_Start_DMA+0x1c8>)
 800a0a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	4a3c      	ldr	r2, [pc, #240]	; (800a1a0 <HAL_ADC_Start_DMA+0x1cc>)
 800a0b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	4a3b      	ldr	r2, [pc, #236]	; (800a1a4 <HAL_ADC_Start_DMA+0x1d0>)
 800a0b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	4a3a      	ldr	r2, [pc, #232]	; (800a1a8 <HAL_ADC_Start_DMA+0x1d4>)
 800a0c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	334c      	adds	r3, #76	; 0x4c
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f000 fcea 	bl	800aad4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f003 031f 	and.w	r3, r3, #31
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d12a      	bne.n	800a162 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a26      	ldr	r2, [pc, #152]	; (800a1ac <HAL_ADC_Start_DMA+0x1d8>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d015      	beq.n	800a142 <HAL_ADC_Start_DMA+0x16e>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a25      	ldr	r2, [pc, #148]	; (800a1b0 <HAL_ADC_Start_DMA+0x1dc>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d105      	bne.n	800a12c <HAL_ADC_Start_DMA+0x158>
 800a120:	4b1e      	ldr	r3, [pc, #120]	; (800a19c <HAL_ADC_Start_DMA+0x1c8>)
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f003 031f 	and.w	r3, r3, #31
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a20      	ldr	r2, [pc, #128]	; (800a1b4 <HAL_ADC_Start_DMA+0x1e0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d129      	bne.n	800a18a <HAL_ADC_Start_DMA+0x1b6>
 800a136:	4b19      	ldr	r3, [pc, #100]	; (800a19c <HAL_ADC_Start_DMA+0x1c8>)
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f003 031f 	and.w	r3, r3, #31
 800a13e:	2b0f      	cmp	r3, #15
 800a140:	d823      	bhi.n	800a18a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11c      	bne.n	800a18a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689a      	ldr	r2, [r3, #8]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a15e:	609a      	str	r2, [r3, #8]
 800a160:	e013      	b.n	800a18a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <HAL_ADC_Start_DMA+0x1d8>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10e      	bne.n	800a18a <HAL_ADC_Start_DMA+0x1b6>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d107      	bne.n	800a18a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a188:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000000 	.word	0x20000000
 800a198:	431bde83 	.word	0x431bde83
 800a19c:	40012300 	.word	0x40012300
 800a1a0:	0800a651 	.word	0x0800a651
 800a1a4:	0800a70b 	.word	0x0800a70b
 800a1a8:	0800a727 	.word	0x0800a727
 800a1ac:	40012000 	.word	0x40012000
 800a1b0:	40012100 	.word	0x40012100
 800a1b4:	40012200 	.word	0x40012200

0800a1b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_ADC_ConfigChannel+0x1c>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e113      	b.n	800a438 <HAL_ADC_ConfigChannel+0x244>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b09      	cmp	r3, #9
 800a21e:	d925      	bls.n	800a26c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68d9      	ldr	r1, [r3, #12]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	461a      	mov	r2, r3
 800a22e:	4613      	mov	r3, r2
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	4413      	add	r3, r2
 800a234:	3b1e      	subs	r3, #30
 800a236:	2207      	movs	r2, #7
 800a238:	fa02 f303 	lsl.w	r3, r2, r3
 800a23c:	43da      	mvns	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	400a      	ands	r2, r1
 800a244:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68d9      	ldr	r1, [r3, #12]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	4618      	mov	r0, r3
 800a258:	4603      	mov	r3, r0
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	4403      	add	r3, r0
 800a25e:	3b1e      	subs	r3, #30
 800a260:	409a      	lsls	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	60da      	str	r2, [r3, #12]
 800a26a:	e022      	b.n	800a2b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6919      	ldr	r1, [r3, #16]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	b29b      	uxth	r3, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	2207      	movs	r2, #7
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	43da      	mvns	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	400a      	ands	r2, r1
 800a28e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6919      	ldr	r1, [r3, #16]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	4403      	add	r3, r0
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2b06      	cmp	r3, #6
 800a2b8:	d824      	bhi.n	800a304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3b05      	subs	r3, #5
 800a2cc:	221f      	movs	r2, #31
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43da      	mvns	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	400a      	ands	r2, r1
 800a2da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3b05      	subs	r3, #5
 800a2f6:	fa00 f203 	lsl.w	r2, r0, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	635a      	str	r2, [r3, #52]	; 0x34
 800a302:	e04c      	b.n	800a39e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	2b0c      	cmp	r3, #12
 800a30a:	d824      	bhi.n	800a356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	3b23      	subs	r3, #35	; 0x23
 800a31e:	221f      	movs	r2, #31
 800a320:	fa02 f303 	lsl.w	r3, r2, r3
 800a324:	43da      	mvns	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	400a      	ands	r2, r1
 800a32c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	4618      	mov	r0, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	3b23      	subs	r3, #35	; 0x23
 800a348:	fa00 f203 	lsl.w	r2, r0, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	631a      	str	r2, [r3, #48]	; 0x30
 800a354:	e023      	b.n	800a39e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	3b41      	subs	r3, #65	; 0x41
 800a368:	221f      	movs	r2, #31
 800a36a:	fa02 f303 	lsl.w	r3, r2, r3
 800a36e:	43da      	mvns	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	400a      	ands	r2, r1
 800a376:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	b29b      	uxth	r3, r3
 800a384:	4618      	mov	r0, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	3b41      	subs	r3, #65	; 0x41
 800a392:	fa00 f203 	lsl.w	r2, r0, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a39e:	4b29      	ldr	r3, [pc, #164]	; (800a444 <HAL_ADC_ConfigChannel+0x250>)
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a28      	ldr	r2, [pc, #160]	; (800a448 <HAL_ADC_ConfigChannel+0x254>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d10f      	bne.n	800a3cc <HAL_ADC_ConfigChannel+0x1d8>
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b12      	cmp	r3, #18
 800a3b2:	d10b      	bne.n	800a3cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a1d      	ldr	r2, [pc, #116]	; (800a448 <HAL_ADC_ConfigChannel+0x254>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d12b      	bne.n	800a42e <HAL_ADC_ConfigChannel+0x23a>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a1c      	ldr	r2, [pc, #112]	; (800a44c <HAL_ADC_ConfigChannel+0x258>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <HAL_ADC_ConfigChannel+0x1f4>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b11      	cmp	r3, #17
 800a3e6:	d122      	bne.n	800a42e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a11      	ldr	r2, [pc, #68]	; (800a44c <HAL_ADC_ConfigChannel+0x258>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d111      	bne.n	800a42e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <HAL_ADC_ConfigChannel+0x25c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a11      	ldr	r2, [pc, #68]	; (800a454 <HAL_ADC_ConfigChannel+0x260>)
 800a410:	fba2 2303 	umull	r2, r3, r2, r3
 800a414:	0c9a      	lsrs	r2, r3, #18
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a420:	e002      	b.n	800a428 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	3b01      	subs	r3, #1
 800a426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f9      	bne.n	800a422 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	40012300 	.word	0x40012300
 800a448:	40012000 	.word	0x40012000
 800a44c:	10000012 	.word	0x10000012
 800a450:	20000000 	.word	0x20000000
 800a454:	431bde83 	.word	0x431bde83

0800a458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a460:	4b79      	ldr	r3, [pc, #484]	; (800a648 <ADC_Init+0x1f0>)
 800a462:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a48c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6859      	ldr	r1, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	021a      	lsls	r2, r3, #8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6859      	ldr	r1, [r3, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6899      	ldr	r1, [r3, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68da      	ldr	r2, [r3, #12]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	4a58      	ldr	r2, [pc, #352]	; (800a64c <ADC_Init+0x1f4>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d022      	beq.n	800a536 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a4fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6899      	ldr	r1, [r3, #8]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6899      	ldr	r1, [r3, #8]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	609a      	str	r2, [r3, #8]
 800a534:	e00f      	b.n	800a556 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a554:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0202 	bic.w	r2, r2, #2
 800a564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6899      	ldr	r1, [r3, #8]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	7e1b      	ldrb	r3, [r3, #24]
 800a570:	005a      	lsls	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d01b      	beq.n	800a5bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a592:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a5a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6859      	ldr	r1, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	035a      	lsls	r2, r3, #13
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	e007      	b.n	800a5cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	051a      	lsls	r2, r3, #20
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6899      	ldr	r1, [r3, #8]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a60e:	025a      	lsls	r2, r3, #9
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689a      	ldr	r2, [r3, #8]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6899      	ldr	r1, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	029a      	lsls	r2, r3, #10
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	609a      	str	r2, [r3, #8]
}
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	40012300 	.word	0x40012300
 800a64c:	0f000001 	.word	0x0f000001

0800a650 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a662:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a666:	2b00      	cmp	r3, #0
 800a668:	d13c      	bne.n	800a6e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d12b      	bne.n	800a6dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d127      	bne.n	800a6dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a692:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a696:	2b00      	cmp	r3, #0
 800a698:	d006      	beq.n	800a6a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d119      	bne.n	800a6dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f022 0220 	bic.w	r2, r2, #32
 800a6b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d105      	bne.n	800a6dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	f043 0201 	orr.w	r2, r3, #1
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7ff fd6b 	bl	800a1b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a6e2:	e00e      	b.n	800a702 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d003      	beq.n	800a6f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff fd75 	bl	800a1e0 <HAL_ADC_ErrorCallback>
}
 800a6f6:	e004      	b.n	800a702 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a716:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff fd57 	bl	800a1cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2240      	movs	r2, #64	; 0x40
 800a738:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73e:	f043 0204 	orr.w	r2, r3, #4
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff fd4a 	bl	800a1e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a74c:	bf00      	nop
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <__NVIC_SetPriorityGrouping+0x44>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a770:	4013      	ands	r3, r2
 800a772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a77c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a786:	4a04      	ldr	r2, [pc, #16]	; (800a798 <__NVIC_SetPriorityGrouping+0x44>)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	60d3      	str	r3, [r2, #12]
}
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	e000ed00 	.word	0xe000ed00

0800a79c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a7a0:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <__NVIC_GetPriorityGrouping+0x18>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	0a1b      	lsrs	r3, r3, #8
 800a7a6:	f003 0307 	and.w	r3, r3, #7
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	e000ed00 	.word	0xe000ed00

0800a7b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	db0b      	blt.n	800a7e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	f003 021f 	and.w	r2, r3, #31
 800a7d0:	4907      	ldr	r1, [pc, #28]	; (800a7f0 <__NVIC_EnableIRQ+0x38>)
 800a7d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	2001      	movs	r0, #1
 800a7da:	fa00 f202 	lsl.w	r2, r0, r2
 800a7de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	e000e100 	.word	0xe000e100

0800a7f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a804:	2b00      	cmp	r3, #0
 800a806:	db0a      	blt.n	800a81e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	490c      	ldr	r1, [pc, #48]	; (800a840 <__NVIC_SetPriority+0x4c>)
 800a80e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a812:	0112      	lsls	r2, r2, #4
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	440b      	add	r3, r1
 800a818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a81c:	e00a      	b.n	800a834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	b2da      	uxtb	r2, r3
 800a822:	4908      	ldr	r1, [pc, #32]	; (800a844 <__NVIC_SetPriority+0x50>)
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	f003 030f 	and.w	r3, r3, #15
 800a82a:	3b04      	subs	r3, #4
 800a82c:	0112      	lsls	r2, r2, #4
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	440b      	add	r3, r1
 800a832:	761a      	strb	r2, [r3, #24]
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	e000e100 	.word	0xe000e100
 800a844:	e000ed00 	.word	0xe000ed00

0800a848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a848:	b480      	push	{r7}
 800a84a:	b089      	sub	sp, #36	; 0x24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f1c3 0307 	rsb	r3, r3, #7
 800a862:	2b04      	cmp	r3, #4
 800a864:	bf28      	it	cs
 800a866:	2304      	movcs	r3, #4
 800a868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	3304      	adds	r3, #4
 800a86e:	2b06      	cmp	r3, #6
 800a870:	d902      	bls.n	800a878 <NVIC_EncodePriority+0x30>
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	3b03      	subs	r3, #3
 800a876:	e000      	b.n	800a87a <NVIC_EncodePriority+0x32>
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a87c:	f04f 32ff 	mov.w	r2, #4294967295
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	fa02 f303 	lsl.w	r3, r2, r3
 800a886:	43da      	mvns	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	401a      	ands	r2, r3
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a890:	f04f 31ff 	mov.w	r1, #4294967295
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	fa01 f303 	lsl.w	r3, r1, r3
 800a89a:	43d9      	mvns	r1, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8a0:	4313      	orrs	r3, r2
         );
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3724      	adds	r7, #36	; 0x24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
	...

0800a8b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8c0:	d301      	bcc.n	800a8c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e00f      	b.n	800a8e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a8c6:	4a0a      	ldr	r2, [pc, #40]	; (800a8f0 <SysTick_Config+0x40>)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8ce:	210f      	movs	r1, #15
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	f7ff ff8e 	bl	800a7f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8d8:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <SysTick_Config+0x40>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <SysTick_Config+0x40>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	e000e010 	.word	0xe000e010

0800a8f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7ff ff29 	bl	800a754 <__NVIC_SetPriorityGrouping>
}
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	4603      	mov	r3, r0
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a918:	2300      	movs	r3, #0
 800a91a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a91c:	f7ff ff3e 	bl	800a79c <__NVIC_GetPriorityGrouping>
 800a920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	6978      	ldr	r0, [r7, #20]
 800a928:	f7ff ff8e 	bl	800a848 <NVIC_EncodePriority>
 800a92c:	4602      	mov	r2, r0
 800a92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a932:	4611      	mov	r1, r2
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff ff5d 	bl	800a7f4 <__NVIC_SetPriority>
}
 800a93a:	bf00      	nop
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b082      	sub	sp, #8
 800a946:	af00      	add	r7, sp, #0
 800a948:	4603      	mov	r3, r0
 800a94a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a94c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff ff31 	bl	800a7b8 <__NVIC_EnableIRQ>
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff ffa2 	bl	800a8b0 <SysTick_Config>
 800a96c:	4603      	mov	r3, r0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a984:	f7ff fab4 	bl	8009ef0 <HAL_GetTick>
 800a988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e099      	b.n	800aac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0201 	bic.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9b4:	e00f      	b.n	800a9d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9b6:	f7ff fa9b 	bl	8009ef0 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	2b05      	cmp	r3, #5
 800a9c2:	d908      	bls.n	800a9d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2203      	movs	r2, #3
 800a9ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e078      	b.n	800aac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e8      	bne.n	800a9b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	4b38      	ldr	r3, [pc, #224]	; (800aad0 <HAL_DMA_Init+0x158>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d107      	bne.n	800aa40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f023 0307 	bic.w	r3, r3, #7
 800aa56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d117      	bne.n	800aa9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00e      	beq.n	800aa9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fa9d 	bl	800afbc <DMA_CheckFifoParam>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d008      	beq.n	800aa9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2240      	movs	r2, #64	; 0x40
 800aa8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa96:	2301      	movs	r3, #1
 800aa98:	e016      	b.n	800aac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fa54 	bl	800af50 <DMA_CalcBaseAndBitshift>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab0:	223f      	movs	r2, #63	; 0x3f
 800aab2:	409a      	lsls	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	f010803f 	.word	0xf010803f

0800aad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_DMA_Start_IT+0x26>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e040      	b.n	800ab7c <HAL_DMA_Start_IT+0xa8>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d12f      	bne.n	800ab6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2202      	movs	r2, #2
 800ab12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	68b9      	ldr	r1, [r7, #8]
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 f9e6 	bl	800aef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2c:	223f      	movs	r2, #63	; 0x3f
 800ab2e:	409a      	lsls	r2, r3
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0216 	orr.w	r2, r2, #22
 800ab42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d007      	beq.n	800ab5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0208 	orr.w	r2, r2, #8
 800ab5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0201 	orr.w	r2, r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	e005      	b.n	800ab7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab76:	2302      	movs	r3, #2
 800ab78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d004      	beq.n	800aba2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2280      	movs	r2, #128	; 0x80
 800ab9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e00c      	b.n	800abbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2205      	movs	r2, #5
 800aba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 0201 	bic.w	r2, r2, #1
 800abb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abd4:	4b92      	ldr	r3, [pc, #584]	; (800ae20 <HAL_DMA_IRQHandler+0x258>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a92      	ldr	r2, [pc, #584]	; (800ae24 <HAL_DMA_IRQHandler+0x25c>)
 800abda:	fba2 2303 	umull	r2, r3, r2, r3
 800abde:	0a9b      	lsrs	r3, r3, #10
 800abe0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf2:	2208      	movs	r2, #8
 800abf4:	409a      	lsls	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4013      	ands	r3, r2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d01a      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d013      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f022 0204 	bic.w	r2, r2, #4
 800ac1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac20:	2208      	movs	r2, #8
 800ac22:	409a      	lsls	r2, r3
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2c:	f043 0201 	orr.w	r2, r3, #1
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac38:	2201      	movs	r2, #1
 800ac3a:	409a      	lsls	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d012      	beq.n	800ac6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00b      	beq.n	800ac6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac56:	2201      	movs	r2, #1
 800ac58:	409a      	lsls	r2, r3
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac62:	f043 0202 	orr.w	r2, r3, #2
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6e:	2204      	movs	r2, #4
 800ac70:	409a      	lsls	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4013      	ands	r3, r2
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d012      	beq.n	800aca0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0302 	and.w	r3, r3, #2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00b      	beq.n	800aca0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8c:	2204      	movs	r2, #4
 800ac8e:	409a      	lsls	r2, r3
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac98:	f043 0204 	orr.w	r2, r3, #4
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca4:	2210      	movs	r2, #16
 800aca6:	409a      	lsls	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4013      	ands	r3, r2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d043      	beq.n	800ad38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0308 	and.w	r3, r3, #8
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d03c      	beq.n	800ad38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acc2:	2210      	movs	r2, #16
 800acc4:	409a      	lsls	r2, r3
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d018      	beq.n	800ad0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d108      	bne.n	800acf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	d024      	beq.n	800ad38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	e01f      	b.n	800ad38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d01b      	beq.n	800ad38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	4798      	blx	r3
 800ad08:	e016      	b.n	800ad38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d107      	bne.n	800ad28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 0208 	bic.w	r2, r2, #8
 800ad26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	409a      	lsls	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4013      	ands	r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 808e 	beq.w	800ae66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0310 	and.w	r3, r3, #16
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 8086 	beq.w	800ae66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad5e:	2220      	movs	r2, #32
 800ad60:	409a      	lsls	r2, r3
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b05      	cmp	r3, #5
 800ad70:	d136      	bne.n	800ade0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 0216 	bic.w	r2, r2, #22
 800ad80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	695a      	ldr	r2, [r3, #20]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d103      	bne.n	800ada2 <HAL_DMA_IRQHandler+0x1da>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d007      	beq.n	800adb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0208 	bic.w	r2, r2, #8
 800adb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb6:	223f      	movs	r2, #63	; 0x3f
 800adb8:	409a      	lsls	r2, r3
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add2:	2b00      	cmp	r3, #0
 800add4:	d07d      	beq.n	800aed2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
        }
        return;
 800adde:	e078      	b.n	800aed2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d01c      	beq.n	800ae28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d108      	bne.n	800ae0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d030      	beq.n	800ae66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	4798      	blx	r3
 800ae0c:	e02b      	b.n	800ae66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d027      	beq.n	800ae66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	4798      	blx	r3
 800ae1e:	e022      	b.n	800ae66 <HAL_DMA_IRQHandler+0x29e>
 800ae20:	20000000 	.word	0x20000000
 800ae24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10f      	bne.n	800ae56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f022 0210 	bic.w	r2, r2, #16
 800ae44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d032      	beq.n	800aed4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d022      	beq.n	800aec0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2205      	movs	r2, #5
 800ae7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0201 	bic.w	r2, r2, #1
 800ae90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60bb      	str	r3, [r7, #8]
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d307      	bcc.n	800aeae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f2      	bne.n	800ae92 <HAL_DMA_IRQHandler+0x2ca>
 800aeac:	e000      	b.n	800aeb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800aeae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d005      	beq.n	800aed4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	4798      	blx	r3
 800aed0:	e000      	b.n	800aed4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800aed2:	bf00      	nop
    }
  }
}
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop

0800aedc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d108      	bne.n	800af34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af32:	e007      	b.n	800af44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	60da      	str	r2, [r3, #12]
}
 800af44:	bf00      	nop
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	3b10      	subs	r3, #16
 800af60:	4a14      	ldr	r2, [pc, #80]	; (800afb4 <DMA_CalcBaseAndBitshift+0x64>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	091b      	lsrs	r3, r3, #4
 800af68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af6a:	4a13      	ldr	r2, [pc, #76]	; (800afb8 <DMA_CalcBaseAndBitshift+0x68>)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d909      	bls.n	800af92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af86:	f023 0303 	bic.w	r3, r3, #3
 800af8a:	1d1a      	adds	r2, r3, #4
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	659a      	str	r2, [r3, #88]	; 0x58
 800af90:	e007      	b.n	800afa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af9a:	f023 0303 	bic.w	r3, r3, #3
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	aaaaaaab 	.word	0xaaaaaaab
 800afb8:	0801a210 	.word	0x0801a210

0800afbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d11f      	bne.n	800b016 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d855      	bhi.n	800b088 <DMA_CheckFifoParam+0xcc>
 800afdc:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <DMA_CheckFifoParam+0x28>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800aff5 	.word	0x0800aff5
 800afe8:	0800b007 	.word	0x0800b007
 800afec:	0800aff5 	.word	0x0800aff5
 800aff0:	0800b089 	.word	0x0800b089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d045      	beq.n	800b08c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b004:	e042      	b.n	800b08c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b00e:	d13f      	bne.n	800b090 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b014:	e03c      	b.n	800b090 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b01e:	d121      	bne.n	800b064 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b03      	cmp	r3, #3
 800b024:	d836      	bhi.n	800b094 <DMA_CheckFifoParam+0xd8>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <DMA_CheckFifoParam+0x70>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b03d 	.word	0x0800b03d
 800b030:	0800b043 	.word	0x0800b043
 800b034:	0800b03d 	.word	0x0800b03d
 800b038:	0800b055 	.word	0x0800b055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	73fb      	strb	r3, [r7, #15]
      break;
 800b040:	e02f      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d024      	beq.n	800b098 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b052:	e021      	b.n	800b098 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b05c:	d11e      	bne.n	800b09c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b062:	e01b      	b.n	800b09c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d902      	bls.n	800b070 <DMA_CheckFifoParam+0xb4>
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d003      	beq.n	800b076 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b06e:	e018      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	73fb      	strb	r3, [r7, #15]
      break;
 800b074:	e015      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00e      	beq.n	800b0a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	73fb      	strb	r3, [r7, #15]
      break;
 800b086:	e00b      	b.n	800b0a0 <DMA_CheckFifoParam+0xe4>
      break;
 800b088:	bf00      	nop
 800b08a:	e00a      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800b08c:	bf00      	nop
 800b08e:	e008      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800b090:	bf00      	nop
 800b092:	e006      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800b094:	bf00      	nop
 800b096:	e004      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800b098:	bf00      	nop
 800b09a:	e002      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800b09c:	bf00      	nop
 800b09e:	e000      	b.n	800b0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800b0a0:	bf00      	nop
    }
  } 
  
  return status; 
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b089      	sub	sp, #36	; 0x24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	e177      	b.n	800b3bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	f040 8166 	bne.w	800b3b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d00b      	beq.n	800b10a <HAL_GPIO_Init+0x5a>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d007      	beq.n	800b10a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0fe:	2b11      	cmp	r3, #17
 800b100:	d003      	beq.n	800b10a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b12      	cmp	r3, #18
 800b108:	d130      	bne.n	800b16c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	2203      	movs	r2, #3
 800b116:	fa02 f303 	lsl.w	r3, r2, r3
 800b11a:	43db      	mvns	r3, r3
 800b11c:	69ba      	ldr	r2, [r7, #24]
 800b11e:	4013      	ands	r3, r2
 800b120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68da      	ldr	r2, [r3, #12]
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	4313      	orrs	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b140:	2201      	movs	r2, #1
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	fa02 f303 	lsl.w	r3, r2, r3
 800b148:	43db      	mvns	r3, r3
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	4013      	ands	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	091b      	lsrs	r3, r3, #4
 800b156:	f003 0201 	and.w	r2, r3, #1
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	fa02 f303 	lsl.w	r3, r2, r3
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	4313      	orrs	r3, r2
 800b164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	2203      	movs	r2, #3
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	43db      	mvns	r3, r3
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	4013      	ands	r3, r2
 800b182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	fa02 f303 	lsl.w	r3, r2, r3
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	4313      	orrs	r3, r2
 800b194:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d003      	beq.n	800b1ac <HAL_GPIO_Init+0xfc>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2b12      	cmp	r3, #18
 800b1aa:	d123      	bne.n	800b1f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	08da      	lsrs	r2, r3, #3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3208      	adds	r2, #8
 800b1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	f003 0307 	and.w	r3, r3, #7
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	220f      	movs	r2, #15
 800b1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c8:	43db      	mvns	r3, r3
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	08da      	lsrs	r2, r3, #3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	3208      	adds	r2, #8
 800b1ee:	69b9      	ldr	r1, [r7, #24]
 800b1f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	2203      	movs	r2, #3
 800b200:	fa02 f303 	lsl.w	r3, r2, r3
 800b204:	43db      	mvns	r3, r3
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	4013      	ands	r3, r2
 800b20a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	f003 0203 	and.w	r2, r3, #3
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	fa02 f303 	lsl.w	r3, r2, r3
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	4313      	orrs	r3, r2
 800b220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	69ba      	ldr	r2, [r7, #24]
 800b226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 80c0 	beq.w	800b3b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	4b65      	ldr	r3, [pc, #404]	; (800b3d0 <HAL_GPIO_Init+0x320>)
 800b23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23e:	4a64      	ldr	r2, [pc, #400]	; (800b3d0 <HAL_GPIO_Init+0x320>)
 800b240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b244:	6453      	str	r3, [r2, #68]	; 0x44
 800b246:	4b62      	ldr	r3, [pc, #392]	; (800b3d0 <HAL_GPIO_Init+0x320>)
 800b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b252:	4a60      	ldr	r2, [pc, #384]	; (800b3d4 <HAL_GPIO_Init+0x324>)
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	089b      	lsrs	r3, r3, #2
 800b258:	3302      	adds	r3, #2
 800b25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	220f      	movs	r2, #15
 800b26a:	fa02 f303 	lsl.w	r3, r2, r3
 800b26e:	43db      	mvns	r3, r3
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	4013      	ands	r3, r2
 800b274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a57      	ldr	r2, [pc, #348]	; (800b3d8 <HAL_GPIO_Init+0x328>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d037      	beq.n	800b2ee <HAL_GPIO_Init+0x23e>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a56      	ldr	r2, [pc, #344]	; (800b3dc <HAL_GPIO_Init+0x32c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d031      	beq.n	800b2ea <HAL_GPIO_Init+0x23a>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a55      	ldr	r2, [pc, #340]	; (800b3e0 <HAL_GPIO_Init+0x330>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d02b      	beq.n	800b2e6 <HAL_GPIO_Init+0x236>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a54      	ldr	r2, [pc, #336]	; (800b3e4 <HAL_GPIO_Init+0x334>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d025      	beq.n	800b2e2 <HAL_GPIO_Init+0x232>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a53      	ldr	r2, [pc, #332]	; (800b3e8 <HAL_GPIO_Init+0x338>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d01f      	beq.n	800b2de <HAL_GPIO_Init+0x22e>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a52      	ldr	r2, [pc, #328]	; (800b3ec <HAL_GPIO_Init+0x33c>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d019      	beq.n	800b2da <HAL_GPIO_Init+0x22a>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a51      	ldr	r2, [pc, #324]	; (800b3f0 <HAL_GPIO_Init+0x340>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d013      	beq.n	800b2d6 <HAL_GPIO_Init+0x226>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a50      	ldr	r2, [pc, #320]	; (800b3f4 <HAL_GPIO_Init+0x344>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00d      	beq.n	800b2d2 <HAL_GPIO_Init+0x222>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a4f      	ldr	r2, [pc, #316]	; (800b3f8 <HAL_GPIO_Init+0x348>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d007      	beq.n	800b2ce <HAL_GPIO_Init+0x21e>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a4e      	ldr	r2, [pc, #312]	; (800b3fc <HAL_GPIO_Init+0x34c>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d101      	bne.n	800b2ca <HAL_GPIO_Init+0x21a>
 800b2c6:	2309      	movs	r3, #9
 800b2c8:	e012      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2ca:	230a      	movs	r3, #10
 800b2cc:	e010      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2ce:	2308      	movs	r3, #8
 800b2d0:	e00e      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2d2:	2307      	movs	r3, #7
 800b2d4:	e00c      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2d6:	2306      	movs	r3, #6
 800b2d8:	e00a      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2da:	2305      	movs	r3, #5
 800b2dc:	e008      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2de:	2304      	movs	r3, #4
 800b2e0:	e006      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e004      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e002      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e000      	b.n	800b2f0 <HAL_GPIO_Init+0x240>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	69fa      	ldr	r2, [r7, #28]
 800b2f2:	f002 0203 	and.w	r2, r2, #3
 800b2f6:	0092      	lsls	r2, r2, #2
 800b2f8:	4093      	lsls	r3, r2
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b300:	4934      	ldr	r1, [pc, #208]	; (800b3d4 <HAL_GPIO_Init+0x324>)
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	089b      	lsrs	r3, r3, #2
 800b306:	3302      	adds	r3, #2
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b30e:	4b3c      	ldr	r3, [pc, #240]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	43db      	mvns	r3, r3
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	4013      	ands	r3, r2
 800b31c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	4313      	orrs	r3, r2
 800b330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b332:	4a33      	ldr	r2, [pc, #204]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b338:	4b31      	ldr	r3, [pc, #196]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	43db      	mvns	r3, r3
 800b342:	69ba      	ldr	r2, [r7, #24]
 800b344:	4013      	ands	r3, r2
 800b346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d003      	beq.n	800b35c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b354:	69ba      	ldr	r2, [r7, #24]
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	4313      	orrs	r3, r2
 800b35a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b35c:	4a28      	ldr	r2, [pc, #160]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b362:	4b27      	ldr	r3, [pc, #156]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	43db      	mvns	r3, r3
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	4013      	ands	r3, r2
 800b370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	4313      	orrs	r3, r2
 800b384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b386:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b38c:	4b1c      	ldr	r3, [pc, #112]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	43db      	mvns	r3, r3
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	4013      	ands	r3, r2
 800b39a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3b0:	4a13      	ldr	r2, [pc, #76]	; (800b400 <HAL_GPIO_Init+0x350>)
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	61fb      	str	r3, [r7, #28]
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2b0f      	cmp	r3, #15
 800b3c0:	f67f ae84 	bls.w	800b0cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	3724      	adds	r7, #36	; 0x24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	40023800 	.word	0x40023800
 800b3d4:	40013800 	.word	0x40013800
 800b3d8:	40020000 	.word	0x40020000
 800b3dc:	40020400 	.word	0x40020400
 800b3e0:	40020800 	.word	0x40020800
 800b3e4:	40020c00 	.word	0x40020c00
 800b3e8:	40021000 	.word	0x40021000
 800b3ec:	40021400 	.word	0x40021400
 800b3f0:	40021800 	.word	0x40021800
 800b3f4:	40021c00 	.word	0x40021c00
 800b3f8:	40022000 	.word	0x40022000
 800b3fc:	40022400 	.word	0x40022400
 800b400:	40013c00 	.word	0x40013c00

0800b404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	887b      	ldrh	r3, [r7, #2]
 800b416:	4013      	ands	r3, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b41c:	2301      	movs	r3, #1
 800b41e:	73fb      	strb	r3, [r7, #15]
 800b420:	e001      	b.n	800b426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	807b      	strh	r3, [r7, #2]
 800b440:	4613      	mov	r3, r2
 800b442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b444:	787b      	ldrb	r3, [r7, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b44a:	887a      	ldrh	r2, [r7, #2]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b450:	e003      	b.n	800b45a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	041a      	lsls	r2, r3, #16
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	619a      	str	r2, [r3, #24]
}
 800b45a:	bf00      	nop
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e11f      	b.n	800b6ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d106      	bne.n	800b494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7fb fe62 	bl	8007158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2224      	movs	r2, #36	; 0x24
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0201 	bic.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4cc:	f001 f96e 	bl	800c7ac <HAL_RCC_GetPCLK1Freq>
 800b4d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	4a7b      	ldr	r2, [pc, #492]	; (800b6c4 <HAL_I2C_Init+0x25c>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d807      	bhi.n	800b4ec <HAL_I2C_Init+0x84>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4a7a      	ldr	r2, [pc, #488]	; (800b6c8 <HAL_I2C_Init+0x260>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	bf94      	ite	ls
 800b4e4:	2301      	movls	r3, #1
 800b4e6:	2300      	movhi	r3, #0
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	e006      	b.n	800b4fa <HAL_I2C_Init+0x92>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4a77      	ldr	r2, [pc, #476]	; (800b6cc <HAL_I2C_Init+0x264>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	bf94      	ite	ls
 800b4f4:	2301      	movls	r3, #1
 800b4f6:	2300      	movhi	r3, #0
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e0db      	b.n	800b6ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4a72      	ldr	r2, [pc, #456]	; (800b6d0 <HAL_I2C_Init+0x268>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	0c9b      	lsrs	r3, r3, #18
 800b50c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	430a      	orrs	r2, r1
 800b520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	4a64      	ldr	r2, [pc, #400]	; (800b6c4 <HAL_I2C_Init+0x25c>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d802      	bhi.n	800b53c <HAL_I2C_Init+0xd4>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	3301      	adds	r3, #1
 800b53a:	e009      	b.n	800b550 <HAL_I2C_Init+0xe8>
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	4a63      	ldr	r2, [pc, #396]	; (800b6d4 <HAL_I2C_Init+0x26c>)
 800b548:	fba2 2303 	umull	r2, r3, r2, r3
 800b54c:	099b      	lsrs	r3, r3, #6
 800b54e:	3301      	adds	r3, #1
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6812      	ldr	r2, [r2, #0]
 800b554:	430b      	orrs	r3, r1
 800b556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	4956      	ldr	r1, [pc, #344]	; (800b6c4 <HAL_I2C_Init+0x25c>)
 800b56c:	428b      	cmp	r3, r1
 800b56e:	d80d      	bhi.n	800b58c <HAL_I2C_Init+0x124>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	1e59      	subs	r1, r3, #1
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b57e:	3301      	adds	r3, #1
 800b580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b584:	2b04      	cmp	r3, #4
 800b586:	bf38      	it	cc
 800b588:	2304      	movcc	r3, #4
 800b58a:	e04f      	b.n	800b62c <HAL_I2C_Init+0x1c4>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d111      	bne.n	800b5b8 <HAL_I2C_Init+0x150>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	1e58      	subs	r0, r3, #1
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6859      	ldr	r1, [r3, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	440b      	add	r3, r1
 800b5a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bf0c      	ite	eq
 800b5b0:	2301      	moveq	r3, #1
 800b5b2:	2300      	movne	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	e012      	b.n	800b5de <HAL_I2C_Init+0x176>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	1e58      	subs	r0, r3, #1
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6859      	ldr	r1, [r3, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	0099      	lsls	r1, r3, #2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bf0c      	ite	eq
 800b5d8:	2301      	moveq	r3, #1
 800b5da:	2300      	movne	r3, #0
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <HAL_I2C_Init+0x17e>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e022      	b.n	800b62c <HAL_I2C_Init+0x1c4>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10e      	bne.n	800b60c <HAL_I2C_Init+0x1a4>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	1e58      	subs	r0, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6859      	ldr	r1, [r3, #4]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	440b      	add	r3, r1
 800b5fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b600:	3301      	adds	r3, #1
 800b602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b60a:	e00f      	b.n	800b62c <HAL_I2C_Init+0x1c4>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1e58      	subs	r0, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6859      	ldr	r1, [r3, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	0099      	lsls	r1, r3, #2
 800b61c:	440b      	add	r3, r1
 800b61e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b622:	3301      	adds	r3, #1
 800b624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b62c:	6879      	ldr	r1, [r7, #4]
 800b62e:	6809      	ldr	r1, [r1, #0]
 800b630:	4313      	orrs	r3, r2
 800b632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	69da      	ldr	r2, [r3, #28]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b65a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	6911      	ldr	r1, [r2, #16]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	68d2      	ldr	r2, [r2, #12]
 800b666:	4311      	orrs	r1, r2
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	430b      	orrs	r3, r1
 800b66e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	695a      	ldr	r2, [r3, #20]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	431a      	orrs	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0201 	orr.w	r2, r2, #1
 800b69a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	000186a0 	.word	0x000186a0
 800b6c8:	001e847f 	.word	0x001e847f
 800b6cc:	003d08ff 	.word	0x003d08ff
 800b6d0:	431bde83 	.word	0x431bde83
 800b6d4:	10624dd3 	.word	0x10624dd3

0800b6d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	607a      	str	r2, [r7, #4]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	817b      	strh	r3, [r7, #10]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6ec:	f7fe fc00 	bl	8009ef0 <HAL_GetTick>
 800b6f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	f040 80e0 	bne.w	800b8c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	2319      	movs	r3, #25
 800b706:	2201      	movs	r2, #1
 800b708:	4970      	ldr	r1, [pc, #448]	; (800b8cc <HAL_I2C_Master_Transmit+0x1f4>)
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 fc58 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b716:	2302      	movs	r3, #2
 800b718:	e0d3      	b.n	800b8c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b720:	2b01      	cmp	r3, #1
 800b722:	d101      	bne.n	800b728 <HAL_I2C_Master_Transmit+0x50>
 800b724:	2302      	movs	r3, #2
 800b726:	e0cc      	b.n	800b8c2 <HAL_I2C_Master_Transmit+0x1ea>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d007      	beq.n	800b74e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f042 0201 	orr.w	r2, r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b75c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2221      	movs	r2, #33	; 0x21
 800b762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2210      	movs	r2, #16
 800b76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	893a      	ldrh	r2, [r7, #8]
 800b77e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4a50      	ldr	r2, [pc, #320]	; (800b8d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b78e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b790:	8979      	ldrh	r1, [r7, #10]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 fac2 	bl	800bd20 <I2C_MasterRequestWrite>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e08d      	b.n	800b8c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	613b      	str	r3, [r7, #16]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	613b      	str	r3, [r7, #16]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	613b      	str	r3, [r7, #16]
 800b7ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b7bc:	e066      	b.n	800b88c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	6a39      	ldr	r1, [r7, #32]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 fcd2 	bl	800c16c <I2C_WaitOnTXEFlagUntilTimeout>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00d      	beq.n	800b7ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d107      	bne.n	800b7e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e06b      	b.n	800b8c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	781a      	ldrb	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b804:	b29b      	uxth	r3, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	b29a      	uxth	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b812:	3b01      	subs	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b04      	cmp	r3, #4
 800b826:	d11b      	bne.n	800b860 <HAL_I2C_Master_Transmit+0x188>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d017      	beq.n	800b860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b858:	3b01      	subs	r3, #1
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	6a39      	ldr	r1, [r7, #32]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 fcc2 	bl	800c1ee <I2C_WaitOnBTFFlagUntilTimeout>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00d      	beq.n	800b88c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b874:	2b04      	cmp	r3, #4
 800b876:	d107      	bne.n	800b888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e01a      	b.n	800b8c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b890:	2b00      	cmp	r3, #0
 800b892:	d194      	bne.n	800b7be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e000      	b.n	800b8c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b8c0:	2302      	movs	r3, #2
  }
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	00100002 	.word	0x00100002
 800b8d0:	ffff0000 	.word	0xffff0000

0800b8d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08c      	sub	sp, #48	; 0x30
 800b8d8:	af02      	add	r7, sp, #8
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	607a      	str	r2, [r7, #4]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	817b      	strh	r3, [r7, #10]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8e8:	f7fe fb02 	bl	8009ef0 <HAL_GetTick>
 800b8ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	f040 820b 	bne.w	800bd12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	2319      	movs	r3, #25
 800b902:	2201      	movs	r2, #1
 800b904:	497c      	ldr	r1, [pc, #496]	; (800baf8 <HAL_I2C_Master_Receive+0x224>)
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f000 fb5a 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b912:	2302      	movs	r3, #2
 800b914:	e1fe      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d101      	bne.n	800b924 <HAL_I2C_Master_Receive+0x50>
 800b920:	2302      	movs	r3, #2
 800b922:	e1f7      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	2b01      	cmp	r3, #1
 800b938:	d007      	beq.n	800b94a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f042 0201 	orr.w	r2, r2, #1
 800b948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2222      	movs	r2, #34	; 0x22
 800b95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2210      	movs	r2, #16
 800b966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	893a      	ldrh	r2, [r7, #8]
 800b97a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4a5c      	ldr	r2, [pc, #368]	; (800bafc <HAL_I2C_Master_Receive+0x228>)
 800b98a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b98c:	8979      	ldrh	r1, [r7, #10]
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f000 fa46 	bl	800be24 <I2C_MasterRequestRead>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e1b8      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d113      	bne.n	800b9d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	623b      	str	r3, [r7, #32]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	623b      	str	r3, [r7, #32]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	623b      	str	r3, [r7, #32]
 800b9be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	e18c      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d11b      	bne.n	800ba12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	61fb      	str	r3, [r7, #28]
 800b9fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba0e:	601a      	str	r2, [r3, #0]
 800ba10:	e16c      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d11b      	bne.n	800ba52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	61bb      	str	r3, [r7, #24]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	695b      	ldr	r3, [r3, #20]
 800ba44:	61bb      	str	r3, [r7, #24]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	61bb      	str	r3, [r7, #24]
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	e14c      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	617b      	str	r3, [r7, #20]
 800ba76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba78:	e138      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	f200 80f1 	bhi.w	800bc66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d123      	bne.n	800bad4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fbed 	bl	800c270 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e139      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800babc:	3b01      	subs	r3, #1
 800babe:	b29a      	uxth	r2, r3
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac8:	b29b      	uxth	r3, r3
 800baca:	3b01      	subs	r3, #1
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bad2:	e10b      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d14e      	bne.n	800bb7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	2200      	movs	r2, #0
 800bae4:	4906      	ldr	r1, [pc, #24]	; (800bb00 <HAL_I2C_Master_Receive+0x22c>)
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f000 fa6a 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d008      	beq.n	800bb04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e10e      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
 800baf6:	bf00      	nop
 800baf8:	00100002 	.word	0x00100002
 800bafc:	ffff0000 	.word	0xffff0000
 800bb00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	691a      	ldr	r2, [r3, #16]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	b2d2      	uxtb	r2, r2
 800bb20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb30:	3b01      	subs	r3, #1
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	3b01      	subs	r3, #1
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb78:	e0b8      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	2200      	movs	r2, #0
 800bb82:	4966      	ldr	r1, [pc, #408]	; (800bd1c <HAL_I2C_Master_Receive+0x448>)
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 fa1b 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e0bf      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	691a      	ldr	r2, [r3, #16]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	b2d2      	uxtb	r2, r2
 800bbb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	1c5a      	adds	r2, r3, #1
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	2200      	movs	r2, #0
 800bbde:	494f      	ldr	r1, [pc, #316]	; (800bd1c <HAL_I2C_Master_Receive+0x448>)
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 f9ed 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e091      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	691a      	ldr	r2, [r3, #16]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	b2d2      	uxtb	r2, r2
 800bc3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc64:	e042      	b.n	800bcec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 fb00 	bl	800c270 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e04c      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	691a      	ldr	r2, [r3, #16]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc96:	3b01      	subs	r3, #1
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	3b01      	subs	r3, #1
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d118      	bne.n	800bcec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	691a      	ldr	r2, [r3, #16]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	b2d2      	uxtb	r2, r2
 800bcc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f47f aec2 	bne.w	800ba7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e000      	b.n	800bd14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd12:	2302      	movs	r3, #2
  }
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3728      	adds	r7, #40	; 0x28
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	00010004 	.word	0x00010004

0800bd20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b08      	cmp	r3, #8
 800bd3a:	d006      	beq.n	800bd4a <I2C_MasterRequestWrite+0x2a>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d003      	beq.n	800bd4a <I2C_MasterRequestWrite+0x2a>
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd48:	d108      	bne.n	800bd5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e00b      	b.n	800bd74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd60:	2b12      	cmp	r3, #18
 800bd62:	d107      	bne.n	800bd74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f91d 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00d      	beq.n	800bda8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd9a:	d103      	bne.n	800bda4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bda2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bda4:	2303      	movs	r3, #3
 800bda6:	e035      	b.n	800be14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdb0:	d108      	bne.n	800bdc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdb2:	897b      	ldrh	r3, [r7, #10]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bdc0:	611a      	str	r2, [r3, #16]
 800bdc2:	e01b      	b.n	800bdfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bdc4:	897b      	ldrh	r3, [r7, #10]
 800bdc6:	11db      	asrs	r3, r3, #7
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0306 	and.w	r3, r3, #6
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f063 030f 	orn	r3, r3, #15
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	490e      	ldr	r1, [pc, #56]	; (800be1c <I2C_MasterRequestWrite+0xfc>)
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 f943 	bl	800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e010      	b.n	800be14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bdf2:	897b      	ldrh	r3, [r7, #10]
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	4907      	ldr	r1, [pc, #28]	; (800be20 <I2C_MasterRequestWrite+0x100>)
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 f933 	bl	800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	00010008 	.word	0x00010008
 800be20:	00010002 	.word	0x00010002

0800be24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	607a      	str	r2, [r7, #4]
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	460b      	mov	r3, r1
 800be32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b08      	cmp	r3, #8
 800be4e:	d006      	beq.n	800be5e <I2C_MasterRequestRead+0x3a>
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d003      	beq.n	800be5e <I2C_MasterRequestRead+0x3a>
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be5c:	d108      	bne.n	800be70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e00b      	b.n	800be88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be74:	2b11      	cmp	r3, #17
 800be76:	d107      	bne.n	800be88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f000 f893 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00d      	beq.n	800bebc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beae:	d103      	bne.n	800beb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	e079      	b.n	800bfb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bec4:	d108      	bne.n	800bed8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bec6:	897b      	ldrh	r3, [r7, #10]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	f043 0301 	orr.w	r3, r3, #1
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	611a      	str	r2, [r3, #16]
 800bed6:	e05f      	b.n	800bf98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bed8:	897b      	ldrh	r3, [r7, #10]
 800beda:	11db      	asrs	r3, r3, #7
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	f003 0306 	and.w	r3, r3, #6
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	f063 030f 	orn	r3, r3, #15
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	4930      	ldr	r1, [pc, #192]	; (800bfb8 <I2C_MasterRequestRead+0x194>)
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f000 f8b9 	bl	800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d001      	beq.n	800bf06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	e054      	b.n	800bfb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bf06:	897b      	ldrh	r3, [r7, #10]
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	4929      	ldr	r1, [pc, #164]	; (800bfbc <I2C_MasterRequestRead+0x198>)
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 f8a9 	bl	800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e044      	b.n	800bfb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf26:	2300      	movs	r3, #0
 800bf28:	613b      	str	r3, [r7, #16]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	613b      	str	r3, [r7, #16]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	613b      	str	r3, [r7, #16]
 800bf3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f000 f831 	bl	800bfc0 <I2C_WaitOnFlagUntilTimeout>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00d      	beq.n	800bf80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf72:	d103      	bne.n	800bf7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e017      	b.n	800bfb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bf80:	897b      	ldrh	r3, [r7, #10]
 800bf82:	11db      	asrs	r3, r3, #7
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0306 	and.w	r3, r3, #6
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f063 030e 	orn	r3, r3, #14
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	4907      	ldr	r1, [pc, #28]	; (800bfbc <I2C_MasterRequestRead+0x198>)
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f000 f865 	bl	800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	00010008 	.word	0x00010008
 800bfbc:	00010002 	.word	0x00010002

0800bfc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfd0:	e025      	b.n	800c01e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd8:	d021      	beq.n	800c01e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfda:	f7fd ff89 	bl	8009ef0 <HAL_GetTick>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d302      	bcc.n	800bff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d116      	bne.n	800c01e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2220      	movs	r2, #32
 800bffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	f043 0220 	orr.w	r2, r3, #32
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e023      	b.n	800c066 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	0c1b      	lsrs	r3, r3, #16
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b01      	cmp	r3, #1
 800c026:	d10d      	bne.n	800c044 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	43da      	mvns	r2, r3
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	4013      	ands	r3, r2
 800c034:	b29b      	uxth	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	bf0c      	ite	eq
 800c03a:	2301      	moveq	r3, #1
 800c03c:	2300      	movne	r3, #0
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	461a      	mov	r2, r3
 800c042:	e00c      	b.n	800c05e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	43da      	mvns	r2, r3
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	4013      	ands	r3, r2
 800c050:	b29b      	uxth	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	bf0c      	ite	eq
 800c056:	2301      	moveq	r3, #1
 800c058:	2300      	movne	r3, #0
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	461a      	mov	r2, r3
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	429a      	cmp	r2, r3
 800c062:	d0b6      	beq.n	800bfd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
 800c07a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c07c:	e051      	b.n	800c122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c08c:	d123      	bne.n	800c0d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c09c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c0a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2220      	movs	r2, #32
 800c0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	f043 0204 	orr.w	r2, r3, #4
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e046      	b.n	800c164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0dc:	d021      	beq.n	800c122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0de:	f7fd ff07 	bl	8009ef0 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d302      	bcc.n	800c0f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d116      	bne.n	800c122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10e:	f043 0220 	orr.w	r2, r3, #32
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e020      	b.n	800c164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	0c1b      	lsrs	r3, r3, #16
 800c126:	b2db      	uxtb	r3, r3
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d10c      	bne.n	800c146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	43da      	mvns	r2, r3
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	4013      	ands	r3, r2
 800c138:	b29b      	uxth	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bf14      	ite	ne
 800c13e:	2301      	movne	r3, #1
 800c140:	2300      	moveq	r3, #0
 800c142:	b2db      	uxtb	r3, r3
 800c144:	e00b      	b.n	800c15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	43da      	mvns	r2, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	4013      	ands	r3, r2
 800c152:	b29b      	uxth	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	bf14      	ite	ne
 800c158:	2301      	movne	r3, #1
 800c15a:	2300      	moveq	r3, #0
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d18d      	bne.n	800c07e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c178:	e02d      	b.n	800c1d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 f8ce 	bl	800c31c <I2C_IsAcknowledgeFailed>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e02d      	b.n	800c1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c190:	d021      	beq.n	800c1d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c192:	f7fd fead 	bl	8009ef0 <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d302      	bcc.n	800c1a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d116      	bne.n	800c1d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c2:	f043 0220 	orr.w	r2, r3, #32
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e007      	b.n	800c1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1e0:	2b80      	cmp	r3, #128	; 0x80
 800c1e2:	d1ca      	bne.n	800c17a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c1fa:	e02d      	b.n	800c258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 f88d 	bl	800c31c <I2C_IsAcknowledgeFailed>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e02d      	b.n	800c268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d021      	beq.n	800c258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c214:	f7fd fe6c 	bl	8009ef0 <HAL_GetTick>
 800c218:	4602      	mov	r2, r0
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	429a      	cmp	r2, r3
 800c222:	d302      	bcc.n	800c22a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d116      	bne.n	800c258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c244:	f043 0220 	orr.w	r2, r3, #32
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e007      	b.n	800c268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	f003 0304 	and.w	r3, r3, #4
 800c262:	2b04      	cmp	r3, #4
 800c264:	d1ca      	bne.n	800c1fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c27c:	e042      	b.n	800c304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b10      	cmp	r3, #16
 800c28a:	d119      	bne.n	800c2c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f06f 0210 	mvn.w	r2, #16
 800c294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e029      	b.n	800c314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2c0:	f7fd fe16 	bl	8009ef0 <HAL_GetTick>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	1ad3      	subs	r3, r2, r3
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d302      	bcc.n	800c2d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d116      	bne.n	800c304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f0:	f043 0220 	orr.w	r2, r3, #32
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e007      	b.n	800c314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30e:	2b40      	cmp	r3, #64	; 0x40
 800c310:	d1b5      	bne.n	800c27e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c32e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c332:	d11b      	bne.n	800c36c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c33c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2220      	movs	r2, #32
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c358:	f043 0204 	orr.w	r2, r3, #4
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e000      	b.n	800c36e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
	...

0800c37c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c382:	2300      	movs	r3, #0
 800c384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c386:	2300      	movs	r3, #0
 800c388:	603b      	str	r3, [r7, #0]
 800c38a:	4b20      	ldr	r3, [pc, #128]	; (800c40c <HAL_PWREx_EnableOverDrive+0x90>)
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	4a1f      	ldr	r2, [pc, #124]	; (800c40c <HAL_PWREx_EnableOverDrive+0x90>)
 800c390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c394:	6413      	str	r3, [r2, #64]	; 0x40
 800c396:	4b1d      	ldr	r3, [pc, #116]	; (800c40c <HAL_PWREx_EnableOverDrive+0x90>)
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	; (800c410 <HAL_PWREx_EnableOverDrive+0x94>)
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3a8:	f7fd fda2 	bl	8009ef0 <HAL_GetTick>
 800c3ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3ae:	e009      	b.n	800c3c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3b0:	f7fd fd9e 	bl	8009ef0 <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3be:	d901      	bls.n	800c3c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e01f      	b.n	800c404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3c4:	4b13      	ldr	r3, [pc, #76]	; (800c414 <HAL_PWREx_EnableOverDrive+0x98>)
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d0:	d1ee      	bne.n	800c3b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c3d2:	4b11      	ldr	r3, [pc, #68]	; (800c418 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3d8:	f7fd fd8a 	bl	8009ef0 <HAL_GetTick>
 800c3dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3de:	e009      	b.n	800c3f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3e0:	f7fd fd86 	bl	8009ef0 <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3ee:	d901      	bls.n	800c3f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e007      	b.n	800c404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3f4:	4b07      	ldr	r3, [pc, #28]	; (800c414 <HAL_PWREx_EnableOverDrive+0x98>)
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c400:	d1ee      	bne.n	800c3e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	40023800 	.word	0x40023800
 800c410:	420e0040 	.word	0x420e0040
 800c414:	40007000 	.word	0x40007000
 800c418:	420e0044 	.word	0x420e0044

0800c41c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	e0cc      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c430:	4b68      	ldr	r3, [pc, #416]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 030f 	and.w	r3, r3, #15
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d90c      	bls.n	800c458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c43e:	4b65      	ldr	r3, [pc, #404]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	b2d2      	uxtb	r2, r2
 800c444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c446:	4b63      	ldr	r3, [pc, #396]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 030f 	and.w	r3, r3, #15
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	429a      	cmp	r2, r3
 800c452:	d001      	beq.n	800c458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e0b8      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d020      	beq.n	800c4a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 0304 	and.w	r3, r3, #4
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d005      	beq.n	800c47c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c470:	4b59      	ldr	r3, [pc, #356]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	4a58      	ldr	r2, [pc, #352]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c47a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c488:	4b53      	ldr	r3, [pc, #332]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	4a52      	ldr	r2, [pc, #328]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c494:	4b50      	ldr	r3, [pc, #320]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	494d      	ldr	r1, [pc, #308]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d044      	beq.n	800c53c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d107      	bne.n	800c4ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4ba:	4b47      	ldr	r3, [pc, #284]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d119      	bne.n	800c4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e07f      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d003      	beq.n	800c4da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d107      	bne.n	800c4ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4da:	4b3f      	ldr	r3, [pc, #252]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d109      	bne.n	800c4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e06f      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4ea:	4b3b      	ldr	r3, [pc, #236]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e067      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c4fa:	4b37      	ldr	r3, [pc, #220]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f023 0203 	bic.w	r2, r3, #3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	4934      	ldr	r1, [pc, #208]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c50c:	f7fd fcf0 	bl	8009ef0 <HAL_GetTick>
 800c510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c512:	e00a      	b.n	800c52a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c514:	f7fd fcec 	bl	8009ef0 <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c522:	4293      	cmp	r3, r2
 800c524:	d901      	bls.n	800c52a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e04f      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c52a:	4b2b      	ldr	r3, [pc, #172]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 020c 	and.w	r2, r3, #12
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	429a      	cmp	r2, r3
 800c53a:	d1eb      	bne.n	800c514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c53c:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 030f 	and.w	r3, r3, #15
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d20c      	bcs.n	800c564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c54a:	4b22      	ldr	r3, [pc, #136]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	b2d2      	uxtb	r2, r2
 800c550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c552:	4b20      	ldr	r3, [pc, #128]	; (800c5d4 <HAL_RCC_ClockConfig+0x1b8>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 030f 	and.w	r3, r3, #15
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d001      	beq.n	800c564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e032      	b.n	800c5ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d008      	beq.n	800c582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c570:	4b19      	ldr	r3, [pc, #100]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	4916      	ldr	r1, [pc, #88]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c58e:	4b12      	ldr	r3, [pc, #72]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	00db      	lsls	r3, r3, #3
 800c59c:	490e      	ldr	r1, [pc, #56]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5a2:	f000 f821 	bl	800c5e8 <HAL_RCC_GetSysClockFreq>
 800c5a6:	4601      	mov	r1, r0
 800c5a8:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <HAL_RCC_ClockConfig+0x1bc>)
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	091b      	lsrs	r3, r3, #4
 800c5ae:	f003 030f 	and.w	r3, r3, #15
 800c5b2:	4a0a      	ldr	r2, [pc, #40]	; (800c5dc <HAL_RCC_ClockConfig+0x1c0>)
 800c5b4:	5cd3      	ldrb	r3, [r2, r3]
 800c5b6:	fa21 f303 	lsr.w	r3, r1, r3
 800c5ba:	4a09      	ldr	r2, [pc, #36]	; (800c5e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c5bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5be:	4b09      	ldr	r3, [pc, #36]	; (800c5e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fd fc50 	bl	8009e68 <HAL_InitTick>

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	40023c00 	.word	0x40023c00
 800c5d8:	40023800 	.word	0x40023800
 800c5dc:	0801a1f8 	.word	0x0801a1f8
 800c5e0:	20000000 	.word	0x20000000
 800c5e4:	20000004 	.word	0x20000004

0800c5e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	607b      	str	r3, [r7, #4]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60fb      	str	r3, [r7, #12]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c5fe:	4b63      	ldr	r3, [pc, #396]	; (800c78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 030c 	and.w	r3, r3, #12
 800c606:	2b04      	cmp	r3, #4
 800c608:	d007      	beq.n	800c61a <HAL_RCC_GetSysClockFreq+0x32>
 800c60a:	2b08      	cmp	r3, #8
 800c60c:	d008      	beq.n	800c620 <HAL_RCC_GetSysClockFreq+0x38>
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f040 80b4 	bne.w	800c77c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c614:	4b5e      	ldr	r3, [pc, #376]	; (800c790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c616:	60bb      	str	r3, [r7, #8]
       break;
 800c618:	e0b3      	b.n	800c782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c61a:	4b5d      	ldr	r3, [pc, #372]	; (800c790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c61c:	60bb      	str	r3, [r7, #8]
      break;
 800c61e:	e0b0      	b.n	800c782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c620:	4b5a      	ldr	r3, [pc, #360]	; (800c78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c62a:	4b58      	ldr	r3, [pc, #352]	; (800c78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d04a      	beq.n	800c6cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c636:	4b55      	ldr	r3, [pc, #340]	; (800c78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	099b      	lsrs	r3, r3, #6
 800c63c:	f04f 0400 	mov.w	r4, #0
 800c640:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	ea03 0501 	and.w	r5, r3, r1
 800c64c:	ea04 0602 	and.w	r6, r4, r2
 800c650:	4629      	mov	r1, r5
 800c652:	4632      	mov	r2, r6
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	f04f 0400 	mov.w	r4, #0
 800c65c:	0154      	lsls	r4, r2, #5
 800c65e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c662:	014b      	lsls	r3, r1, #5
 800c664:	4619      	mov	r1, r3
 800c666:	4622      	mov	r2, r4
 800c668:	1b49      	subs	r1, r1, r5
 800c66a:	eb62 0206 	sbc.w	r2, r2, r6
 800c66e:	f04f 0300 	mov.w	r3, #0
 800c672:	f04f 0400 	mov.w	r4, #0
 800c676:	0194      	lsls	r4, r2, #6
 800c678:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c67c:	018b      	lsls	r3, r1, #6
 800c67e:	1a5b      	subs	r3, r3, r1
 800c680:	eb64 0402 	sbc.w	r4, r4, r2
 800c684:	f04f 0100 	mov.w	r1, #0
 800c688:	f04f 0200 	mov.w	r2, #0
 800c68c:	00e2      	lsls	r2, r4, #3
 800c68e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c692:	00d9      	lsls	r1, r3, #3
 800c694:	460b      	mov	r3, r1
 800c696:	4614      	mov	r4, r2
 800c698:	195b      	adds	r3, r3, r5
 800c69a:	eb44 0406 	adc.w	r4, r4, r6
 800c69e:	f04f 0100 	mov.w	r1, #0
 800c6a2:	f04f 0200 	mov.w	r2, #0
 800c6a6:	02a2      	lsls	r2, r4, #10
 800c6a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c6ac:	0299      	lsls	r1, r3, #10
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f04f 0400 	mov.w	r4, #0
 800c6bc:	461a      	mov	r2, r3
 800c6be:	4623      	mov	r3, r4
 800c6c0:	f7f4 fafa 	bl	8000cb8 <__aeabi_uldivmod>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	60fb      	str	r3, [r7, #12]
 800c6ca:	e049      	b.n	800c760 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6cc:	4b2f      	ldr	r3, [pc, #188]	; (800c78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	099b      	lsrs	r3, r3, #6
 800c6d2:	f04f 0400 	mov.w	r4, #0
 800c6d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c6da:	f04f 0200 	mov.w	r2, #0
 800c6de:	ea03 0501 	and.w	r5, r3, r1
 800c6e2:	ea04 0602 	and.w	r6, r4, r2
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	f04f 0300 	mov.w	r3, #0
 800c6ee:	f04f 0400 	mov.w	r4, #0
 800c6f2:	0154      	lsls	r4, r2, #5
 800c6f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c6f8:	014b      	lsls	r3, r1, #5
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4622      	mov	r2, r4
 800c6fe:	1b49      	subs	r1, r1, r5
 800c700:	eb62 0206 	sbc.w	r2, r2, r6
 800c704:	f04f 0300 	mov.w	r3, #0
 800c708:	f04f 0400 	mov.w	r4, #0
 800c70c:	0194      	lsls	r4, r2, #6
 800c70e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c712:	018b      	lsls	r3, r1, #6
 800c714:	1a5b      	subs	r3, r3, r1
 800c716:	eb64 0402 	sbc.w	r4, r4, r2
 800c71a:	f04f 0100 	mov.w	r1, #0
 800c71e:	f04f 0200 	mov.w	r2, #0
 800c722:	00e2      	lsls	r2, r4, #3
 800c724:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c728:	00d9      	lsls	r1, r3, #3
 800c72a:	460b      	mov	r3, r1
 800c72c:	4614      	mov	r4, r2
 800c72e:	195b      	adds	r3, r3, r5
 800c730:	eb44 0406 	adc.w	r4, r4, r6
 800c734:	f04f 0100 	mov.w	r1, #0
 800c738:	f04f 0200 	mov.w	r2, #0
 800c73c:	02a2      	lsls	r2, r4, #10
 800c73e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c742:	0299      	lsls	r1, r3, #10
 800c744:	460b      	mov	r3, r1
 800c746:	4614      	mov	r4, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	4621      	mov	r1, r4
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f04f 0400 	mov.w	r4, #0
 800c752:	461a      	mov	r2, r3
 800c754:	4623      	mov	r3, r4
 800c756:	f7f4 faaf 	bl	8000cb8 <__aeabi_uldivmod>
 800c75a:	4603      	mov	r3, r0
 800c75c:	460c      	mov	r4, r1
 800c75e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	0c1b      	lsrs	r3, r3, #16
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	3301      	adds	r3, #1
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	fbb2 f3f3 	udiv	r3, r2, r3
 800c778:	60bb      	str	r3, [r7, #8]
      break;
 800c77a:	e002      	b.n	800c782 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c77c:	4b04      	ldr	r3, [pc, #16]	; (800c790 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c77e:	60bb      	str	r3, [r7, #8]
      break;
 800c780:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c782:	68bb      	ldr	r3, [r7, #8]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c78c:	40023800 	.word	0x40023800
 800c790:	00f42400 	.word	0x00f42400

0800c794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c794:	b480      	push	{r7}
 800c796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c798:	4b03      	ldr	r3, [pc, #12]	; (800c7a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c79a:	681b      	ldr	r3, [r3, #0]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	20000000 	.word	0x20000000

0800c7ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7b0:	f7ff fff0 	bl	800c794 <HAL_RCC_GetHCLKFreq>
 800c7b4:	4601      	mov	r1, r0
 800c7b6:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	0a9b      	lsrs	r3, r3, #10
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	4a03      	ldr	r2, [pc, #12]	; (800c7d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7c2:	5cd3      	ldrb	r3, [r2, r3]
 800c7c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	40023800 	.word	0x40023800
 800c7d0:	0801a208 	.word	0x0801a208

0800c7d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7d8:	f7ff ffdc 	bl	800c794 <HAL_RCC_GetHCLKFreq>
 800c7dc:	4601      	mov	r1, r0
 800c7de:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	0b5b      	lsrs	r3, r3, #13
 800c7e4:	f003 0307 	and.w	r3, r3, #7
 800c7e8:	4a03      	ldr	r2, [pc, #12]	; (800c7f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7ea:	5cd3      	ldrb	r3, [r2, r3]
 800c7ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	40023800 	.word	0x40023800
 800c7f8:	0801a208 	.word	0x0801a208

0800c7fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c804:	2300      	movs	r3, #0
 800c806:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c810:	2300      	movs	r3, #0
 800c812:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00a      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c824:	4b66      	ldr	r3, [pc, #408]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c82a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c832:	4963      	ldr	r1, [pc, #396]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c834:	4313      	orrs	r3, r2
 800c836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c846:	4b5e      	ldr	r3, [pc, #376]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c84c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	495a      	ldr	r1, [pc, #360]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c856:	4313      	orrs	r3, r2
 800c858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10b      	bne.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d075      	beq.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c880:	4b50      	ldr	r3, [pc, #320]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c886:	f7fd fb33 	bl	8009ef0 <HAL_GetTick>
 800c88a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c88c:	e008      	b.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c88e:	f7fd fb2f 	bl	8009ef0 <HAL_GetTick>
 800c892:	4602      	mov	r2, r0
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d901      	bls.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	e1dc      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8a0:	4b47      	ldr	r3, [pc, #284]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1f0      	bne.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d009      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	019a      	lsls	r2, r3, #6
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	071b      	lsls	r3, r3, #28
 800c8c4:	493e      	ldr	r1, [pc, #248]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d01f      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8d8:	4b39      	ldr	r3, [pc, #228]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8de:	0f1b      	lsrs	r3, r3, #28
 800c8e0:	f003 0307 	and.w	r3, r3, #7
 800c8e4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	019a      	lsls	r2, r3, #6
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	061b      	lsls	r3, r3, #24
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	071b      	lsls	r3, r3, #28
 800c8f8:	4931      	ldr	r1, [pc, #196]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c900:	4b2f      	ldr	r3, [pc, #188]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c906:	f023 021f 	bic.w	r2, r3, #31
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	3b01      	subs	r3, #1
 800c910:	492b      	ldr	r1, [pc, #172]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c912:	4313      	orrs	r3, r2
 800c914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00d      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	019a      	lsls	r2, r3, #6
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	061b      	lsls	r3, r3, #24
 800c930:	431a      	orrs	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	071b      	lsls	r3, r3, #28
 800c938:	4921      	ldr	r1, [pc, #132]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c940:	4b20      	ldr	r3, [pc, #128]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c942:	2201      	movs	r2, #1
 800c944:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c946:	f7fd fad3 	bl	8009ef0 <HAL_GetTick>
 800c94a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c94c:	e008      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c94e:	f7fd facf 	bl	8009ef0 <HAL_GetTick>
 800c952:	4602      	mov	r2, r0
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d901      	bls.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e17c      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c960:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d0f0      	beq.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b00      	cmp	r3, #0
 800c976:	d112      	bne.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10c      	bne.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 80ce 	beq.w	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c99a:	f040 80c8 	bne.w	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c99e:	4b0a      	ldr	r3, [pc, #40]	; (800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c9a4:	f7fd faa4 	bl	8009ef0 <HAL_GetTick>
 800c9a8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9aa:	e00f      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c9ac:	f7fd faa0 	bl	8009ef0 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d908      	bls.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e14d      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c9be:	bf00      	nop
 800c9c0:	40023800 	.word	0x40023800
 800c9c4:	42470068 	.word	0x42470068
 800c9c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9cc:	4ba5      	ldr	r3, [pc, #660]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d8:	d0e8      	beq.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d02e      	beq.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c9e6:	4b9f      	ldr	r3, [pc, #636]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ec:	0c1b      	lsrs	r3, r3, #16
 800c9ee:	f003 0303 	and.w	r3, r3, #3
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9f8:	4b9a      	ldr	r3, [pc, #616]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9fe:	0f1b      	lsrs	r3, r3, #28
 800ca00:	f003 0307 	and.w	r3, r3, #7
 800ca04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	019a      	lsls	r2, r3, #6
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	085b      	lsrs	r3, r3, #1
 800ca10:	3b01      	subs	r3, #1
 800ca12:	041b      	lsls	r3, r3, #16
 800ca14:	431a      	orrs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	061b      	lsls	r3, r3, #24
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	071b      	lsls	r3, r3, #28
 800ca22:	4990      	ldr	r1, [pc, #576]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca24:	4313      	orrs	r3, r2
 800ca26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca2a:	4b8e      	ldr	r3, [pc, #568]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	021b      	lsls	r3, r3, #8
 800ca3c:	4989      	ldr	r1, [pc, #548]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0308 	and.w	r3, r3, #8
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d02c      	beq.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca50:	4b84      	ldr	r3, [pc, #528]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca56:	0c1b      	lsrs	r3, r3, #16
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca62:	4b80      	ldr	r3, [pc, #512]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca68:	0e1b      	lsrs	r3, r3, #24
 800ca6a:	f003 030f 	and.w	r3, r3, #15
 800ca6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	019a      	lsls	r2, r3, #6
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	085b      	lsrs	r3, r3, #1
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	041b      	lsls	r3, r3, #16
 800ca7e:	431a      	orrs	r2, r3
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	061b      	lsls	r3, r3, #24
 800ca84:	431a      	orrs	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	69db      	ldr	r3, [r3, #28]
 800ca8a:	071b      	lsls	r3, r3, #28
 800ca8c:	4975      	ldr	r1, [pc, #468]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ca94:	4b73      	ldr	r3, [pc, #460]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa2:	4970      	ldr	r1, [pc, #448]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa4:	4313      	orrs	r3, r2
 800caa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d024      	beq.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800caba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cabe:	d11f      	bne.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cac0:	4b68      	ldr	r3, [pc, #416]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac6:	0e1b      	lsrs	r3, r3, #24
 800cac8:	f003 030f 	and.w	r3, r3, #15
 800cacc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cace:	4b65      	ldr	r3, [pc, #404]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad4:	0f1b      	lsrs	r3, r3, #28
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	019a      	lsls	r2, r3, #6
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	085b      	lsrs	r3, r3, #1
 800cae8:	3b01      	subs	r3, #1
 800caea:	041b      	lsls	r3, r3, #16
 800caec:	431a      	orrs	r2, r3
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	061b      	lsls	r3, r3, #24
 800caf2:	431a      	orrs	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	071b      	lsls	r3, r3, #28
 800caf8:	495a      	ldr	r1, [pc, #360]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cafa:	4313      	orrs	r3, r2
 800cafc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cb00:	4b59      	ldr	r3, [pc, #356]	; (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb06:	f7fd f9f3 	bl	8009ef0 <HAL_GetTick>
 800cb0a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb0c:	e008      	b.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cb0e:	f7fd f9ef 	bl	8009ef0 <HAL_GetTick>
 800cb12:	4602      	mov	r2, r0
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d901      	bls.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	e09c      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb20:	4b50      	ldr	r3, [pc, #320]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb2c:	d1ef      	bne.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0320 	and.w	r3, r3, #32
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f000 8083 	beq.w	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60bb      	str	r3, [r7, #8]
 800cb40:	4b48      	ldr	r3, [pc, #288]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb44:	4a47      	ldr	r2, [pc, #284]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb4a:	6413      	str	r3, [r2, #64]	; 0x40
 800cb4c:	4b45      	ldr	r3, [pc, #276]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb54:	60bb      	str	r3, [r7, #8]
 800cb56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb58:	4b44      	ldr	r3, [pc, #272]	; (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a43      	ldr	r2, [pc, #268]	; (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb64:	f7fd f9c4 	bl	8009ef0 <HAL_GetTick>
 800cb68:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb6a:	e008      	b.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cb6c:	f7fd f9c0 	bl	8009ef0 <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d901      	bls.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e06d      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb7e:	4b3b      	ldr	r3, [pc, #236]	; (800cc6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0f0      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cb8a:	4b36      	ldr	r3, [pc, #216]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb92:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d02f      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cba2:	69ba      	ldr	r2, [r7, #24]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d028      	beq.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cba8:	4b2e      	ldr	r3, [pc, #184]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbb0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cbb2:	4b2f      	ldr	r3, [pc, #188]	; (800cc70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cbb8:	4b2d      	ldr	r3, [pc, #180]	; (800cc70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cbbe:	4a29      	ldr	r2, [pc, #164]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cbc4:	4b27      	ldr	r3, [pc, #156]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc8:	f003 0301 	and.w	r3, r3, #1
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d114      	bne.n	800cbfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cbd0:	f7fd f98e 	bl	8009ef0 <HAL_GetTick>
 800cbd4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbd6:	e00a      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbd8:	f7fd f98a 	bl	8009ef0 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d901      	bls.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e035      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbee:	4b1d      	ldr	r3, [pc, #116]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d0ee      	beq.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc06:	d10d      	bne.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cc08:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc1c:	4911      	ldr	r1, [pc, #68]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	608b      	str	r3, [r1, #8]
 800cc22:	e005      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cc24:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	4a0e      	ldr	r2, [pc, #56]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc2e:	6093      	str	r3, [r2, #8]
 800cc30:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc3c:	4909      	ldr	r1, [pc, #36]	; (800cc64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 0310 	and.w	r3, r3, #16
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cc54:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cc56:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3720      	adds	r7, #32
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	40023800 	.word	0x40023800
 800cc68:	42470070 	.word	0x42470070
 800cc6c:	40007000 	.word	0x40007000
 800cc70:	42470e40 	.word	0x42470e40
 800cc74:	424711e0 	.word	0x424711e0

0800cc78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc80:	2300      	movs	r3, #0
 800cc82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d075      	beq.n	800cd7c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cc90:	4ba2      	ldr	r3, [pc, #648]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f003 030c 	and.w	r3, r3, #12
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d00c      	beq.n	800ccb6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc9c:	4b9f      	ldr	r3, [pc, #636]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cca4:	2b08      	cmp	r3, #8
 800cca6:	d112      	bne.n	800ccce <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cca8:	4b9c      	ldr	r3, [pc, #624]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccb4:	d10b      	bne.n	800ccce <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccb6:	4b99      	ldr	r3, [pc, #612]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d05b      	beq.n	800cd7a <HAL_RCC_OscConfig+0x102>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d157      	bne.n	800cd7a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e20b      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccd6:	d106      	bne.n	800cce6 <HAL_RCC_OscConfig+0x6e>
 800ccd8:	4b90      	ldr	r3, [pc, #576]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a8f      	ldr	r2, [pc, #572]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cce2:	6013      	str	r3, [r2, #0]
 800cce4:	e01d      	b.n	800cd22 <HAL_RCC_OscConfig+0xaa>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ccee:	d10c      	bne.n	800cd0a <HAL_RCC_OscConfig+0x92>
 800ccf0:	4b8a      	ldr	r3, [pc, #552]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a89      	ldr	r2, [pc, #548]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ccfa:	6013      	str	r3, [r2, #0]
 800ccfc:	4b87      	ldr	r3, [pc, #540]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a86      	ldr	r2, [pc, #536]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	e00b      	b.n	800cd22 <HAL_RCC_OscConfig+0xaa>
 800cd0a:	4b84      	ldr	r3, [pc, #528]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a83      	ldr	r2, [pc, #524]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	4b81      	ldr	r3, [pc, #516]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a80      	ldr	r2, [pc, #512]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d013      	beq.n	800cd52 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd2a:	f7fd f8e1 	bl	8009ef0 <HAL_GetTick>
 800cd2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd30:	e008      	b.n	800cd44 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd32:	f7fd f8dd 	bl	8009ef0 <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b64      	cmp	r3, #100	; 0x64
 800cd3e:	d901      	bls.n	800cd44 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e1d0      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd44:	4b75      	ldr	r3, [pc, #468]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d0f0      	beq.n	800cd32 <HAL_RCC_OscConfig+0xba>
 800cd50:	e014      	b.n	800cd7c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd52:	f7fd f8cd 	bl	8009ef0 <HAL_GetTick>
 800cd56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd58:	e008      	b.n	800cd6c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd5a:	f7fd f8c9 	bl	8009ef0 <HAL_GetTick>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	2b64      	cmp	r3, #100	; 0x64
 800cd66:	d901      	bls.n	800cd6c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e1bc      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd6c:	4b6b      	ldr	r3, [pc, #428]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1f0      	bne.n	800cd5a <HAL_RCC_OscConfig+0xe2>
 800cd78:	e000      	b.n	800cd7c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f003 0302 	and.w	r3, r3, #2
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d063      	beq.n	800ce50 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cd88:	4b64      	ldr	r3, [pc, #400]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f003 030c 	and.w	r3, r3, #12
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd94:	4b61      	ldr	r3, [pc, #388]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d11c      	bne.n	800cdda <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cda0:	4b5e      	ldr	r3, [pc, #376]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d116      	bne.n	800cdda <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdac:	4b5b      	ldr	r3, [pc, #364]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 0302 	and.w	r3, r3, #2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d005      	beq.n	800cdc4 <HAL_RCC_OscConfig+0x14c>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d001      	beq.n	800cdc4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e190      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdc4:	4b55      	ldr	r3, [pc, #340]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	00db      	lsls	r3, r3, #3
 800cdd2:	4952      	ldr	r1, [pc, #328]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdd8:	e03a      	b.n	800ce50 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d020      	beq.n	800ce24 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cde2:	4b4f      	ldr	r3, [pc, #316]	; (800cf20 <HAL_RCC_OscConfig+0x2a8>)
 800cde4:	2201      	movs	r2, #1
 800cde6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde8:	f7fd f882 	bl	8009ef0 <HAL_GetTick>
 800cdec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdee:	e008      	b.n	800ce02 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cdf0:	f7fd f87e 	bl	8009ef0 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d901      	bls.n	800ce02 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e171      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce02:	4b46      	ldr	r3, [pc, #280]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 0302 	and.w	r3, r3, #2
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0f0      	beq.n	800cdf0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce0e:	4b43      	ldr	r3, [pc, #268]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	493f      	ldr	r1, [pc, #252]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	600b      	str	r3, [r1, #0]
 800ce22:	e015      	b.n	800ce50 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce24:	4b3e      	ldr	r3, [pc, #248]	; (800cf20 <HAL_RCC_OscConfig+0x2a8>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce2a:	f7fd f861 	bl	8009ef0 <HAL_GetTick>
 800ce2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce30:	e008      	b.n	800ce44 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce32:	f7fd f85d 	bl	8009ef0 <HAL_GetTick>
 800ce36:	4602      	mov	r2, r0
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d901      	bls.n	800ce44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ce40:	2303      	movs	r3, #3
 800ce42:	e150      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce44:	4b35      	ldr	r3, [pc, #212]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 0302 	and.w	r3, r3, #2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f0      	bne.n	800ce32 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0308 	and.w	r3, r3, #8
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d030      	beq.n	800cebe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	695b      	ldr	r3, [r3, #20]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d016      	beq.n	800ce92 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce64:	4b2f      	ldr	r3, [pc, #188]	; (800cf24 <HAL_RCC_OscConfig+0x2ac>)
 800ce66:	2201      	movs	r2, #1
 800ce68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce6a:	f7fd f841 	bl	8009ef0 <HAL_GetTick>
 800ce6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce70:	e008      	b.n	800ce84 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce72:	f7fd f83d 	bl	8009ef0 <HAL_GetTick>
 800ce76:	4602      	mov	r2, r0
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d901      	bls.n	800ce84 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ce80:	2303      	movs	r3, #3
 800ce82:	e130      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce84:	4b25      	ldr	r3, [pc, #148]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ce86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce88:	f003 0302 	and.w	r3, r3, #2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d0f0      	beq.n	800ce72 <HAL_RCC_OscConfig+0x1fa>
 800ce90:	e015      	b.n	800cebe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce92:	4b24      	ldr	r3, [pc, #144]	; (800cf24 <HAL_RCC_OscConfig+0x2ac>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce98:	f7fd f82a 	bl	8009ef0 <HAL_GetTick>
 800ce9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce9e:	e008      	b.n	800ceb2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cea0:	f7fd f826 	bl	8009ef0 <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d901      	bls.n	800ceb2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e119      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ceb2:	4b1a      	ldr	r3, [pc, #104]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ceb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f0      	bne.n	800cea0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 0304 	and.w	r3, r3, #4
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 809f 	beq.w	800d00a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cecc:	2300      	movs	r3, #0
 800cece:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ced0:	4b12      	ldr	r3, [pc, #72]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ced2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10f      	bne.n	800cefc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cedc:	2300      	movs	r3, #0
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	4b0e      	ldr	r3, [pc, #56]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee4:	4a0d      	ldr	r2, [pc, #52]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800cee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceea:	6413      	str	r3, [r2, #64]	; 0x40
 800ceec:	4b0b      	ldr	r3, [pc, #44]	; (800cf1c <HAL_RCC_OscConfig+0x2a4>)
 800ceee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cef4:	60fb      	str	r3, [r7, #12]
 800cef6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cef8:	2301      	movs	r3, #1
 800cefa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <HAL_RCC_OscConfig+0x2b0>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d120      	bne.n	800cf4a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf08:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <HAL_RCC_OscConfig+0x2b0>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a06      	ldr	r2, [pc, #24]	; (800cf28 <HAL_RCC_OscConfig+0x2b0>)
 800cf0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf14:	f7fc ffec 	bl	8009ef0 <HAL_GetTick>
 800cf18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf1a:	e010      	b.n	800cf3e <HAL_RCC_OscConfig+0x2c6>
 800cf1c:	40023800 	.word	0x40023800
 800cf20:	42470000 	.word	0x42470000
 800cf24:	42470e80 	.word	0x42470e80
 800cf28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf2c:	f7fc ffe0 	bl	8009ef0 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d901      	bls.n	800cf3e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e0d3      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf3e:	4b6c      	ldr	r3, [pc, #432]	; (800d0f0 <HAL_RCC_OscConfig+0x478>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d0f0      	beq.n	800cf2c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d106      	bne.n	800cf60 <HAL_RCC_OscConfig+0x2e8>
 800cf52:	4b68      	ldr	r3, [pc, #416]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf56:	4a67      	ldr	r2, [pc, #412]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf58:	f043 0301 	orr.w	r3, r3, #1
 800cf5c:	6713      	str	r3, [r2, #112]	; 0x70
 800cf5e:	e01c      	b.n	800cf9a <HAL_RCC_OscConfig+0x322>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	2b05      	cmp	r3, #5
 800cf66:	d10c      	bne.n	800cf82 <HAL_RCC_OscConfig+0x30a>
 800cf68:	4b62      	ldr	r3, [pc, #392]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6c:	4a61      	ldr	r2, [pc, #388]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf6e:	f043 0304 	orr.w	r3, r3, #4
 800cf72:	6713      	str	r3, [r2, #112]	; 0x70
 800cf74:	4b5f      	ldr	r3, [pc, #380]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf78:	4a5e      	ldr	r2, [pc, #376]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf7a:	f043 0301 	orr.w	r3, r3, #1
 800cf7e:	6713      	str	r3, [r2, #112]	; 0x70
 800cf80:	e00b      	b.n	800cf9a <HAL_RCC_OscConfig+0x322>
 800cf82:	4b5c      	ldr	r3, [pc, #368]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf86:	4a5b      	ldr	r2, [pc, #364]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf88:	f023 0301 	bic.w	r3, r3, #1
 800cf8c:	6713      	str	r3, [r2, #112]	; 0x70
 800cf8e:	4b59      	ldr	r3, [pc, #356]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf92:	4a58      	ldr	r2, [pc, #352]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cf94:	f023 0304 	bic.w	r3, r3, #4
 800cf98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d015      	beq.n	800cfce <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfa2:	f7fc ffa5 	bl	8009ef0 <HAL_GetTick>
 800cfa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfa8:	e00a      	b.n	800cfc0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfaa:	f7fc ffa1 	bl	8009ef0 <HAL_GetTick>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d901      	bls.n	800cfc0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	e092      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfc0:	4b4c      	ldr	r3, [pc, #304]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cfc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d0ee      	beq.n	800cfaa <HAL_RCC_OscConfig+0x332>
 800cfcc:	e014      	b.n	800cff8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfce:	f7fc ff8f 	bl	8009ef0 <HAL_GetTick>
 800cfd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfd4:	e00a      	b.n	800cfec <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfd6:	f7fc ff8b 	bl	8009ef0 <HAL_GetTick>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d901      	bls.n	800cfec <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e07c      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfec:	4b41      	ldr	r3, [pc, #260]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800cfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff0:	f003 0302 	and.w	r3, r3, #2
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1ee      	bne.n	800cfd6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cff8:	7dfb      	ldrb	r3, [r7, #23]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d105      	bne.n	800d00a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cffe:	4b3d      	ldr	r3, [pc, #244]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d002:	4a3c      	ldr	r2, [pc, #240]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d068      	beq.n	800d0e4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d012:	4b38      	ldr	r3, [pc, #224]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	f003 030c 	and.w	r3, r3, #12
 800d01a:	2b08      	cmp	r3, #8
 800d01c:	d060      	beq.n	800d0e0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	699b      	ldr	r3, [r3, #24]
 800d022:	2b02      	cmp	r3, #2
 800d024:	d145      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d026:	4b34      	ldr	r3, [pc, #208]	; (800d0f8 <HAL_RCC_OscConfig+0x480>)
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d02c:	f7fc ff60 	bl	8009ef0 <HAL_GetTick>
 800d030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d032:	e008      	b.n	800d046 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d034:	f7fc ff5c 	bl	8009ef0 <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d901      	bls.n	800d046 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e04f      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d046:	4b2b      	ldr	r3, [pc, #172]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f0      	bne.n	800d034 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	69da      	ldr	r2, [r3, #28]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	431a      	orrs	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	019b      	lsls	r3, r3, #6
 800d062:	431a      	orrs	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	085b      	lsrs	r3, r3, #1
 800d06a:	3b01      	subs	r3, #1
 800d06c:	041b      	lsls	r3, r3, #16
 800d06e:	431a      	orrs	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	061b      	lsls	r3, r3, #24
 800d076:	431a      	orrs	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07c:	071b      	lsls	r3, r3, #28
 800d07e:	491d      	ldr	r1, [pc, #116]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d080:	4313      	orrs	r3, r2
 800d082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d084:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <HAL_RCC_OscConfig+0x480>)
 800d086:	2201      	movs	r2, #1
 800d088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d08a:	f7fc ff31 	bl	8009ef0 <HAL_GetTick>
 800d08e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d090:	e008      	b.n	800d0a4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d092:	f7fc ff2d 	bl	8009ef0 <HAL_GetTick>
 800d096:	4602      	mov	r2, r0
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	2b02      	cmp	r3, #2
 800d09e:	d901      	bls.n	800d0a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	e020      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0a4:	4b13      	ldr	r3, [pc, #76]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d0f0      	beq.n	800d092 <HAL_RCC_OscConfig+0x41a>
 800d0b0:	e018      	b.n	800d0e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0b2:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <HAL_RCC_OscConfig+0x480>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0b8:	f7fc ff1a 	bl	8009ef0 <HAL_GetTick>
 800d0bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0be:	e008      	b.n	800d0d2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0c0:	f7fc ff16 	bl	8009ef0 <HAL_GetTick>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d901      	bls.n	800d0d2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	e009      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0d2:	4b08      	ldr	r3, [pc, #32]	; (800d0f4 <HAL_RCC_OscConfig+0x47c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1f0      	bne.n	800d0c0 <HAL_RCC_OscConfig+0x448>
 800d0de:	e001      	b.n	800d0e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e000      	b.n	800d0e6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	40007000 	.word	0x40007000
 800d0f4:	40023800 	.word	0x40023800
 800d0f8:	42470060 	.word	0x42470060

0800d0fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e022      	b.n	800d154 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d105      	bne.n	800d126 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7fa f895 	bl	8007250 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2203      	movs	r2, #3
 800d12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f814 	bl	800d15c <HAL_SD_InitCard>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e00a      	b.n	800d154 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d15c:	b5b0      	push	{r4, r5, r7, lr}
 800d15e:	b08e      	sub	sp, #56	; 0x38
 800d160:	af04      	add	r7, sp, #16
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d164:	2300      	movs	r3, #0
 800d166:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d170:	2300      	movs	r3, #0
 800d172:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d174:	2300      	movs	r3, #0
 800d176:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d178:	2376      	movs	r3, #118	; 0x76
 800d17a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681d      	ldr	r5, [r3, #0]
 800d180:	466c      	mov	r4, sp
 800d182:	f107 0314 	add.w	r3, r7, #20
 800d186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d194:	4628      	mov	r0, r5
 800d196:	f003 fa87 	bl	80106a8 <SDIO_Init>
 800d19a:	4603      	mov	r3, r0
 800d19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e031      	b.n	800d210 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d1ac:	4b1a      	ldr	r3, [pc, #104]	; (800d218 <HAL_SD_InitCard+0xbc>)
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f003 fabf 	bl	801073a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d1bc:	4b16      	ldr	r3, [pc, #88]	; (800d218 <HAL_SD_InitCard+0xbc>)
 800d1be:	2201      	movs	r2, #1
 800d1c0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 ffc6 	bl	800e154 <SD_PowerON>
 800d1c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00b      	beq.n	800d1e8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e013      	b.n	800d210 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fee5 	bl	800dfb8 <SD_InitCard>
 800d1ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00b      	beq.n	800d20e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	431a      	orrs	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e000      	b.n	800d210 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3728      	adds	r7, #40	; 0x28
 800d214:	46bd      	mov	sp, r7
 800d216:	bdb0      	pop	{r4, r5, r7, pc}
 800d218:	422580a0 	.word	0x422580a0

0800d21c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08c      	sub	sp, #48	; 0x30
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d107      	bne.n	800d244 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e0c7      	b.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	f040 80c0 	bne.w	800d3d2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	441a      	add	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d262:	429a      	cmp	r2, r3
 800d264:	d907      	bls.n	800d276 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e0ae      	b.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2203      	movs	r2, #3
 800d27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2200      	movs	r2, #0
 800d284:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d294:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	4a50      	ldr	r2, [pc, #320]	; (800d3dc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d29c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	4a4f      	ldr	r2, [pc, #316]	; (800d3e0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d2a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3380      	adds	r3, #128	; 0x80
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	025b      	lsls	r3, r3, #9
 800d2c0:	089b      	lsrs	r3, r3, #2
 800d2c2:	f7fd fc07 	bl	800aad4 <HAL_DMA_Start_IT>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d017      	beq.n	800d2fc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d2da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a40      	ldr	r2, [pc, #256]	; (800d3e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e06b      	b.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d2fc:	4b3a      	ldr	r3, [pc, #232]	; (800d3e8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d306:	2b01      	cmp	r3, #1
 800d308:	d002      	beq.n	800d310 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	025b      	lsls	r3, r3, #9
 800d30e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d318:	4618      	mov	r0, r3
 800d31a:	f003 faa1 	bl	8010860 <SDMMC_CmdBlockLength>
 800d31e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00f      	beq.n	800d346 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a2e      	ldr	r2, [pc, #184]	; (800d3e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d32c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d334:	431a      	orrs	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2201      	movs	r2, #1
 800d33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e046      	b.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d346:	f04f 33ff 	mov.w	r3, #4294967295
 800d34a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	025b      	lsls	r3, r3, #9
 800d350:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d352:	2390      	movs	r3, #144	; 0x90
 800d354:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d356:	2302      	movs	r3, #2
 800d358:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d35e:	2301      	movs	r3, #1
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f107 0210 	add.w	r2, r7, #16
 800d36a:	4611      	mov	r1, r2
 800d36c:	4618      	mov	r0, r3
 800d36e:	f003 fa4b 	bl	8010808 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d90a      	bls.n	800d38e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2282      	movs	r2, #130	; 0x82
 800d37c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d384:	4618      	mov	r0, r3
 800d386:	f003 faaf 	bl	80108e8 <SDMMC_CmdReadMultiBlock>
 800d38a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d38c:	e009      	b.n	800d3a2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2281      	movs	r2, #129	; 0x81
 800d392:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d39a:	4618      	mov	r0, r3
 800d39c:	f003 fa82 	bl	80108a4 <SDMMC_CmdReadSingleBlock>
 800d3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d012      	beq.n	800d3ce <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a0d      	ldr	r2, [pc, #52]	; (800d3e4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	431a      	orrs	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e002      	b.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e000      	b.n	800d3d4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3d2:	2302      	movs	r3, #2
  }
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3730      	adds	r7, #48	; 0x30
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	0800ddc7 	.word	0x0800ddc7
 800d3e0:	0800de39 	.word	0x0800de39
 800d3e4:	004005ff 	.word	0x004005ff
 800d3e8:	4225858c 	.word	0x4225858c

0800d3ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08c      	sub	sp, #48	; 0x30
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d107      	bne.n	800d414 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e0ca      	b.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	f040 80c3 	bne.w	800d5a8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	441a      	add	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d432:	429a      	cmp	r2, r3
 800d434:	d907      	bls.n	800d446 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e0b1      	b.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2203      	movs	r2, #3
 800d44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2200      	movs	r2, #0
 800d454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f042 021a 	orr.w	r2, r2, #26
 800d464:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46a:	4a52      	ldr	r2, [pc, #328]	; (800d5b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d46c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d472:	4a51      	ldr	r2, [pc, #324]	; (800d5b8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d474:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47a:	2200      	movs	r2, #0
 800d47c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d482:	2b01      	cmp	r3, #1
 800d484:	d002      	beq.n	800d48c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d488:	025b      	lsls	r3, r3, #9
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d494:	4618      	mov	r0, r3
 800d496:	f003 f9e3 	bl	8010860 <SDMMC_CmdBlockLength>
 800d49a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00f      	beq.n	800d4c2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a45      	ldr	r2, [pc, #276]	; (800d5bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e073      	b.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d90a      	bls.n	800d4de <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	22a0      	movs	r2, #160	; 0xa0
 800d4cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f003 fa4b 	bl	8010970 <SDMMC_CmdWriteMultiBlock>
 800d4da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4dc:	e009      	b.n	800d4f2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2290      	movs	r2, #144	; 0x90
 800d4e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f003 fa1e 	bl	801092c <SDMMC_CmdWriteSingleBlock>
 800d4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d012      	beq.n	800d51e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a2f      	ldr	r2, [pc, #188]	; (800d5bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	431a      	orrs	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e045      	b.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d51e:	4b28      	ldr	r3, [pc, #160]	; (800d5c0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d520:	2201      	movs	r2, #1
 800d522:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	3380      	adds	r3, #128	; 0x80
 800d530:	461a      	mov	r2, r3
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	025b      	lsls	r3, r3, #9
 800d536:	089b      	lsrs	r3, r3, #2
 800d538:	f7fd facc 	bl	800aad4 <HAL_DMA_Start_IT>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d01a      	beq.n	800d578 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f022 021a 	bic.w	r2, r2, #26
 800d550:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a19      	ldr	r2, [pc, #100]	; (800d5bc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2200      	movs	r2, #0
 800d572:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d574:	2301      	movs	r3, #1
 800d576:	e018      	b.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d578:	f04f 33ff 	mov.w	r3, #4294967295
 800d57c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	025b      	lsls	r3, r3, #9
 800d582:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d584:	2390      	movs	r3, #144	; 0x90
 800d586:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d588:	2300      	movs	r3, #0
 800d58a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d590:	2301      	movs	r3, #1
 800d592:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f107 0210 	add.w	r2, r7, #16
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f003 f932 	bl	8010808 <SDIO_ConfigData>

      return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e000      	b.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5a8:	2302      	movs	r3, #2
  }
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3730      	adds	r7, #48	; 0x30
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	0800dd9d 	.word	0x0800dd9d
 800d5b8:	0800de39 	.word	0x0800de39
 800d5bc:	004005ff 	.word	0x004005ff
 800d5c0:	4225858c 	.word	0x4225858c

0800d5c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d008      	beq.n	800d5f2 <HAL_SD_IRQHandler+0x2e>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f003 0308 	and.w	r3, r3, #8
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 ffc8 	bl	800e580 <SD_Read_IT>
 800d5f0:	e155      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 808f 	beq.w	800d720 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	6812      	ldr	r2, [r2, #0]
 800d616:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d61a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d61e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f022 0201 	bic.w	r2, r2, #1
 800d62e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f003 0308 	and.w	r3, r3, #8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d039      	beq.n	800d6ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f003 0302 	and.w	r3, r3, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d104      	bne.n	800d64e <HAL_SD_IRQHandler+0x8a>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d011      	beq.n	800d672 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4618      	mov	r0, r3
 800d654:	f003 f9ae 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800d658:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d008      	beq.n	800d672 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	431a      	orrs	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f91f 	bl	800d8b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f240 523a 	movw	r2, #1338	; 0x53a
 800d67a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d104      	bne.n	800d69e <HAL_SD_IRQHandler+0xda>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f003 0302 	and.w	r3, r3, #2
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f003 fe04 	bl	80112ac <HAL_SD_RxCpltCallback>
 800d6a4:	e0fb      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f003 fdf6 	bl	8011298 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6ac:	e0f7      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 80f2 	beq.w	800d89e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f003 0320 	and.w	r3, r3, #32
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d011      	beq.n	800d6e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f003 f973 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800d6ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d008      	beq.n	800d6e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	431a      	orrs	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f8e4 	bl	800d8b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f040 80d5 	bne.w	800d89e <HAL_SD_IRQHandler+0x2da>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f003 0302 	and.w	r3, r3, #2
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f040 80cf 	bne.w	800d89e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 0208 	bic.w	r2, r2, #8
 800d70e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f003 fdbd 	bl	8011298 <HAL_SD_TxCpltCallback>
}
 800d71e:	e0be      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d008      	beq.n	800d740 <HAL_SD_IRQHandler+0x17c>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f003 0308 	and.w	r3, r3, #8
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 ff72 	bl	800e622 <SD_Write_IT>
 800d73e:	e0ae      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d746:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 80a7 	beq.w	800d89e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d005      	beq.n	800d76a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d762:	f043 0202 	orr.w	r2, r3, #2
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d770:	f003 0308 	and.w	r3, r3, #8
 800d774:	2b00      	cmp	r3, #0
 800d776:	d005      	beq.n	800d784 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77c:	f043 0208 	orr.w	r2, r3, #8
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78a:	f003 0320 	and.w	r3, r3, #32
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d005      	beq.n	800d79e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	f043 0220 	orr.w	r2, r3, #32
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a4:	f003 0310 	and.w	r3, r3, #16
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b0:	f043 0210 	orr.w	r2, r3, #16
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f003 f8ec 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f003 0308 	and.w	r3, r3, #8
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00a      	beq.n	800d808 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f855 	bl	800d8b0 <HAL_SD_ErrorCallback>
}
 800d806:	e04a      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d045      	beq.n	800d89e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f003 0310 	and.w	r3, r3, #16
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <HAL_SD_IRQHandler+0x262>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 0320 	and.w	r3, r3, #32
 800d822:	2b00      	cmp	r3, #0
 800d824:	d011      	beq.n	800d84a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82a:	4a1f      	ldr	r2, [pc, #124]	; (800d8a8 <HAL_SD_IRQHandler+0x2e4>)
 800d82c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d832:	4618      	mov	r0, r3
 800d834:	f7fd f9a6 	bl	800ab84 <HAL_DMA_Abort_IT>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d02f      	beq.n	800d89e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d842:	4618      	mov	r0, r3
 800d844:	f000 fb4a 	bl	800dedc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d848:	e029      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <HAL_SD_IRQHandler+0x29a>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f003 0302 	and.w	r3, r3, #2
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d011      	beq.n	800d882 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d862:	4a12      	ldr	r2, [pc, #72]	; (800d8ac <HAL_SD_IRQHandler+0x2e8>)
 800d864:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fd f98a 	bl	800ab84 <HAL_DMA_Abort_IT>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d013      	beq.n	800d89e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 fb65 	bl	800df4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d880:	e00d      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f003 fcf4 	bl	8011284 <HAL_SD_AbortCallback>
}
 800d89c:	e7ff      	b.n	800d89e <HAL_SD_IRQHandler+0x2da>
 800d89e:	bf00      	nop
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	0800dedd 	.word	0x0800dedd
 800d8ac:	0800df4b 	.word	0x0800df4b

0800d8b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8d2:	0f9b      	lsrs	r3, r3, #30
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8de:	0e9b      	lsrs	r3, r3, #26
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	f003 030f 	and.w	r3, r3, #15
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f0:	0e1b      	lsrs	r3, r3, #24
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f003 0303 	and.w	r3, r3, #3
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d902:	0c1b      	lsrs	r3, r3, #16
 800d904:	b2da      	uxtb	r2, r3
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d90e:	0a1b      	lsrs	r3, r3, #8
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d924:	0d1b      	lsrs	r3, r3, #20
 800d926:	b29a      	uxth	r2, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d930:	0c1b      	lsrs	r3, r3, #16
 800d932:	b2db      	uxtb	r3, r3
 800d934:	f003 030f 	and.w	r3, r3, #15
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d942:	0bdb      	lsrs	r3, r3, #15
 800d944:	b2db      	uxtb	r3, r3
 800d946:	f003 0301 	and.w	r3, r3, #1
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d954:	0b9b      	lsrs	r3, r3, #14
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 0301 	and.w	r3, r3, #1
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d966:	0b5b      	lsrs	r3, r3, #13
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d978:	0b1b      	lsrs	r3, r3, #12
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 0301 	and.w	r3, r3, #1
 800d980:	b2da      	uxtb	r2, r3
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	2200      	movs	r2, #0
 800d98a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d990:	2b00      	cmp	r3, #0
 800d992:	d163      	bne.n	800da5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d998:	009a      	lsls	r2, r3, #2
 800d99a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d99e:	4013      	ands	r3, r2
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d9a4:	0f92      	lsrs	r2, r2, #30
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b0:	0edb      	lsrs	r3, r3, #27
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	f003 0307 	and.w	r3, r3, #7
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c2:	0e1b      	lsrs	r3, r3, #24
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	f003 0307 	and.w	r3, r3, #7
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d4:	0d5b      	lsrs	r3, r3, #21
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	f003 0307 	and.w	r3, r3, #7
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e6:	0c9b      	lsrs	r3, r3, #18
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	f003 0307 	and.w	r3, r3, #7
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f8:	0bdb      	lsrs	r3, r3, #15
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 0307 	and.w	r3, r3, #7
 800da00:	b2da      	uxtb	r2, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	7e1b      	ldrb	r3, [r3, #24]
 800da14:	b2db      	uxtb	r3, r3
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	3302      	adds	r3, #2
 800da1c:	2201      	movs	r2, #1
 800da1e:	fa02 f303 	lsl.w	r3, r2, r3
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da26:	fb02 f203 	mul.w	r2, r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	7a1b      	ldrb	r3, [r3, #8]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	2201      	movs	r2, #1
 800da3a:	409a      	lsls	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da48:	0a52      	lsrs	r2, r2, #9
 800da4a:	fb02 f203 	mul.w	r2, r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da58:	661a      	str	r2, [r3, #96]	; 0x60
 800da5a:	e031      	b.n	800dac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da60:	2b01      	cmp	r3, #1
 800da62:	d11d      	bne.n	800daa0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da68:	041b      	lsls	r3, r3, #16
 800da6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da72:	0c1b      	lsrs	r3, r3, #16
 800da74:	431a      	orrs	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	3301      	adds	r3, #1
 800da80:	029a      	lsls	r2, r3, #10
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	661a      	str	r2, [r3, #96]	; 0x60
 800da9e:	e00f      	b.n	800dac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a58      	ldr	r2, [pc, #352]	; (800dc08 <HAL_SD_GetCardCSD+0x344>)
 800daa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e09d      	b.n	800dbfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac4:	0b9b      	lsrs	r3, r3, #14
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad6:	09db      	lsrs	r3, r3, #7
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf8:	0fdb      	lsrs	r3, r3, #31
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db04:	0f5b      	lsrs	r3, r3, #29
 800db06:	b2db      	uxtb	r3, r3
 800db08:	f003 0303 	and.w	r3, r3, #3
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db16:	0e9b      	lsrs	r3, r3, #26
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	f003 0307 	and.w	r3, r3, #7
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db28:	0d9b      	lsrs	r3, r3, #22
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	f003 030f 	and.w	r3, r3, #15
 800db30:	b2da      	uxtb	r2, r3
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3a:	0d5b      	lsrs	r3, r3, #21
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db56:	0c1b      	lsrs	r3, r3, #16
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6a:	0bdb      	lsrs	r3, r3, #15
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	b2da      	uxtb	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7e:	0b9b      	lsrs	r3, r3, #14
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db92:	0b5b      	lsrs	r3, r3, #13
 800db94:	b2db      	uxtb	r3, r3
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba6:	0b1b      	lsrs	r3, r3, #12
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbba:	0a9b      	lsrs	r3, r3, #10
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	f003 0303 	and.w	r3, r3, #3
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbce:	0a1b      	lsrs	r3, r3, #8
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe2:	085b      	lsrs	r3, r3, #1
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr
 800dc08:	004005ff 	.word	0x004005ff

0800dc0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc64:	b5b0      	push	{r4, r5, r7, lr}
 800dc66:	b08e      	sub	sp, #56	; 0x38
 800dc68:	af04      	add	r7, sp, #16
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2203      	movs	r2, #3
 800dc72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d02e      	beq.n	800dcdc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc84:	d106      	bne.n	800dc94 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	639a      	str	r2, [r3, #56]	; 0x38
 800dc92:	e029      	b.n	800dce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc9a:	d10a      	bne.n	800dcb2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fb0f 	bl	800e2c0 <SD_WideBus_Enable>
 800dca2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	639a      	str	r2, [r3, #56]	; 0x38
 800dcb0:	e01a      	b.n	800dce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10a      	bne.n	800dcce <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fb4c 	bl	800e356 <SD_WideBus_Disable>
 800dcbe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	431a      	orrs	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	639a      	str	r2, [r3, #56]	; 0x38
 800dccc:	e00c      	b.n	800dce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcda:	e005      	b.n	800dce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d009      	beq.n	800dd04 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a18      	ldr	r2, [pc, #96]	; (800dd58 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e024      	b.n	800dd4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	699b      	ldr	r3, [r3, #24]
 800dd24:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681d      	ldr	r5, [r3, #0]
 800dd2a:	466c      	mov	r4, sp
 800dd2c:	f107 0318 	add.w	r3, r7, #24
 800dd30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd38:	f107 030c 	add.w	r3, r7, #12
 800dd3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f002 fcb2 	bl	80106a8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3728      	adds	r7, #40	; 0x28
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bdb0      	pop	{r4, r5, r7, pc}
 800dd56:	bf00      	nop
 800dd58:	004005ff 	.word	0x004005ff

0800dd5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dd68:	f107 030c 	add.w	r3, r7, #12
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fa7e 	bl	800e270 <SD_SendStatus>
 800dd74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d005      	beq.n	800dd88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	431a      	orrs	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	0a5b      	lsrs	r3, r3, #9
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd92:	693b      	ldr	r3, [r7, #16]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ddba:	bf00      	nop
 800ddbc:	3714      	adds	r7, #20
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b084      	sub	sp, #16
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd8:	2b82      	cmp	r3, #130	; 0x82
 800ddda:	d111      	bne.n	800de00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f002 fde7 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800dde6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d008      	beq.n	800de00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	431a      	orrs	r2, r3
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f7ff fd58 	bl	800d8b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f022 0208 	bic.w	r2, r2, #8
 800de0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f240 523a 	movw	r2, #1338	; 0x53a
 800de18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f003 fa3f 	bl	80112ac <HAL_SD_RxCpltCallback>
#endif
}
 800de2e:	bf00      	nop
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
	...

0800de38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7fd f848 	bl	800aedc <HAL_DMA_GetError>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d03e      	beq.n	800ded0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d002      	beq.n	800de6e <SD_DMAError+0x36>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d12d      	bne.n	800deca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a19      	ldr	r2, [pc, #100]	; (800ded8 <SD_DMAError+0xa0>)
 800de74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800de84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800de92:	6978      	ldr	r0, [r7, #20]
 800de94:	f7ff ff62 	bl	800dd5c <HAL_SD_GetCardState>
 800de98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b06      	cmp	r3, #6
 800de9e:	d002      	beq.n	800dea6 <SD_DMAError+0x6e>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2b05      	cmp	r3, #5
 800dea4:	d10a      	bne.n	800debc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f002 fd82 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800deb0:	4602      	mov	r2, r0
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb6:	431a      	orrs	r2, r3
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2200      	movs	r2, #0
 800dec8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800deca:	6978      	ldr	r0, [r7, #20]
 800decc:	f7ff fcf0 	bl	800d8b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ded0:	bf00      	nop
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	004005ff 	.word	0x004005ff

0800dedc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f240 523a 	movw	r2, #1338	; 0x53a
 800def2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f7ff ff31 	bl	800dd5c <HAL_SD_GetCardState>
 800defa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2201      	movs	r2, #1
 800df00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b06      	cmp	r3, #6
 800df0e:	d002      	beq.n	800df16 <SD_DMATxAbort+0x3a>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2b05      	cmp	r3, #5
 800df14:	d10a      	bne.n	800df2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f002 fd4a 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800df20:	4602      	mov	r2, r0
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df26:	431a      	orrs	r2, r3
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df30:	2b00      	cmp	r3, #0
 800df32:	d103      	bne.n	800df3c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f003 f9a5 	bl	8011284 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df3a:	e002      	b.n	800df42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f7ff fcb7 	bl	800d8b0 <HAL_SD_ErrorCallback>
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df56:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800df60:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7ff fefa 	bl	800dd5c <HAL_SD_GetCardState>
 800df68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	d002      	beq.n	800df84 <SD_DMARxAbort+0x3a>
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2b05      	cmp	r3, #5
 800df82:	d10a      	bne.n	800df9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4618      	mov	r0, r3
 800df8a:	f002 fd13 	bl	80109b4 <SDMMC_CmdStopTransfer>
 800df8e:	4602      	mov	r2, r0
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df94:	431a      	orrs	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d103      	bne.n	800dfaa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f003 f96e 	bl	8011284 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dfa8:	e002      	b.n	800dfb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff fc80 	bl	800d8b0 <HAL_SD_ErrorCallback>
}
 800dfb0:	bf00      	nop
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfb8:	b5b0      	push	{r4, r5, r7, lr}
 800dfba:	b094      	sub	sp, #80	; 0x50
 800dfbc:	af04      	add	r7, sp, #16
 800dfbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f002 fbc5 	bl	8010758 <SDIO_GetPowerState>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d102      	bne.n	800dfda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dfd8:	e0b7      	b.n	800e14a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d02f      	beq.n	800e042 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f002 fdee 	bl	8010bc8 <SDMMC_CmdSendCID>
 800dfec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <SD_InitCard+0x40>
    {
      return errorstate;
 800dff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff6:	e0a8      	b.n	800e14a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2100      	movs	r1, #0
 800dffe:	4618      	mov	r0, r3
 800e000:	f002 fbef 	bl	80107e2 <SDIO_GetResponse>
 800e004:	4602      	mov	r2, r0
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2104      	movs	r1, #4
 800e010:	4618      	mov	r0, r3
 800e012:	f002 fbe6 	bl	80107e2 <SDIO_GetResponse>
 800e016:	4602      	mov	r2, r0
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2108      	movs	r1, #8
 800e022:	4618      	mov	r0, r3
 800e024:	f002 fbdd 	bl	80107e2 <SDIO_GetResponse>
 800e028:	4602      	mov	r2, r0
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	210c      	movs	r1, #12
 800e034:	4618      	mov	r0, r3
 800e036:	f002 fbd4 	bl	80107e2 <SDIO_GetResponse>
 800e03a:	4602      	mov	r2, r0
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e046:	2b03      	cmp	r3, #3
 800e048:	d00d      	beq.n	800e066 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f107 020e 	add.w	r2, r7, #14
 800e052:	4611      	mov	r1, r2
 800e054:	4618      	mov	r0, r3
 800e056:	f002 fdf4 	bl	8010c42 <SDMMC_CmdSetRelAdd>
 800e05a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <SD_InitCard+0xae>
    {
      return errorstate;
 800e062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e064:	e071      	b.n	800e14a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d036      	beq.n	800e0dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e06e:	89fb      	ldrh	r3, [r7, #14]
 800e070:	461a      	mov	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e07e:	041b      	lsls	r3, r3, #16
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f002 fdbe 	bl	8010c04 <SDMMC_CmdSendCSD>
 800e088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e092:	e05a      	b.n	800e14a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2100      	movs	r1, #0
 800e09a:	4618      	mov	r0, r3
 800e09c:	f002 fba1 	bl	80107e2 <SDIO_GetResponse>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2104      	movs	r1, #4
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f002 fb98 	bl	80107e2 <SDIO_GetResponse>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2108      	movs	r1, #8
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f002 fb8f 	bl	80107e2 <SDIO_GetResponse>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	210c      	movs	r1, #12
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f002 fb86 	bl	80107e2 <SDIO_GetResponse>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2104      	movs	r1, #4
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f002 fb7d 	bl	80107e2 <SDIO_GetResponse>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	0d1a      	lsrs	r2, r3, #20
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0f0:	f107 0310 	add.w	r3, r7, #16
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7ff fbe4 	bl	800d8c4 <HAL_SD_GetCardCSD>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e102:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e106:	e020      	b.n	800e14a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6819      	ldr	r1, [r3, #0]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e110:	041b      	lsls	r3, r3, #16
 800e112:	f04f 0400 	mov.w	r4, #0
 800e116:	461a      	mov	r2, r3
 800e118:	4623      	mov	r3, r4
 800e11a:	4608      	mov	r0, r1
 800e11c:	f002 fc6c 	bl	80109f8 <SDMMC_CmdSelDesel>
 800e120:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <SD_InitCard+0x174>
  {
    return errorstate;
 800e128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e12a:	e00e      	b.n	800e14a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681d      	ldr	r5, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	466c      	mov	r4, sp
 800e134:	f103 0210 	add.w	r2, r3, #16
 800e138:	ca07      	ldmia	r2, {r0, r1, r2}
 800e13a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e13e:	3304      	adds	r3, #4
 800e140:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e142:	4628      	mov	r0, r5
 800e144:	f002 fab0 	bl	80106a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3740      	adds	r7, #64	; 0x40
 800e14e:	46bd      	mov	sp, r7
 800e150:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e154 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b086      	sub	sp, #24
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e15c:	2300      	movs	r3, #0
 800e15e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e160:	2300      	movs	r3, #0
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	2300      	movs	r3, #0
 800e166:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f002 fc66 	bl	8010a3e <SDMMC_CmdGoIdleState>
 800e172:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	e072      	b.n	800e264 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4618      	mov	r0, r3
 800e184:	f002 fc79 	bl	8010a7a <SDMMC_CmdOperCond>
 800e188:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00d      	beq.n	800e1ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f002 fc4f 	bl	8010a3e <SDMMC_CmdGoIdleState>
 800e1a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	e05b      	b.n	800e264 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d137      	bne.n	800e22a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2100      	movs	r1, #0
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f002 fc79 	bl	8010ab8 <SDMMC_CmdAppCommand>
 800e1c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d02d      	beq.n	800e22a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1d2:	e047      	b.n	800e264 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f002 fc6c 	bl	8010ab8 <SDMMC_CmdAppCommand>
 800e1e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <SD_PowerON+0x98>
    {
      return errorstate;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	e03b      	b.n	800e264 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	491e      	ldr	r1, [pc, #120]	; (800e26c <SD_PowerON+0x118>)
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f002 fc82 	bl	8010afc <SDMMC_CmdAppOperCommand>
 800e1f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e204:	e02e      	b.n	800e264 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2100      	movs	r1, #0
 800e20c:	4618      	mov	r0, r3
 800e20e:	f002 fae8 	bl	80107e2 <SDIO_GetResponse>
 800e212:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	0fdb      	lsrs	r3, r3, #31
 800e218:	2b01      	cmp	r3, #1
 800e21a:	d101      	bne.n	800e220 <SD_PowerON+0xcc>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e000      	b.n	800e222 <SD_PowerON+0xce>
 800e220:	2300      	movs	r3, #0
 800e222:	613b      	str	r3, [r7, #16]

    count++;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	3301      	adds	r3, #1
 800e228:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e230:	4293      	cmp	r3, r2
 800e232:	d802      	bhi.n	800e23a <SD_PowerON+0xe6>
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0cc      	beq.n	800e1d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e240:	4293      	cmp	r3, r2
 800e242:	d902      	bls.n	800e24a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e248:	e00c      	b.n	800e264 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e250:	2b00      	cmp	r3, #0
 800e252:	d003      	beq.n	800e25c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	645a      	str	r2, [r3, #68]	; 0x44
 800e25a:	e002      	b.n	800e262 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	c1100000 	.word	0xc1100000

0800e270 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e280:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e284:	e018      	b.n	800e2b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e28e:	041b      	lsls	r3, r3, #16
 800e290:	4619      	mov	r1, r3
 800e292:	4610      	mov	r0, r2
 800e294:	f002 fcf6 	bl	8010c84 <SDMMC_CmdSendStatus>
 800e298:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	e009      	b.n	800e2b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f002 fa99 	bl	80107e2 <SDIO_GetResponse>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	60fb      	str	r3, [r7, #12]
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f002 fa83 	bl	80107e2 <SDIO_GetResponse>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2e6:	d102      	bne.n	800e2ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2ec:	e02f      	b.n	800e34e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e2ee:	f107 030c 	add.w	r3, r7, #12
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f879 	bl	800e3ec <SD_FindSCR>
 800e2fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	e023      	b.n	800e34e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01c      	beq.n	800e34a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e318:	041b      	lsls	r3, r3, #16
 800e31a:	4619      	mov	r1, r3
 800e31c:	4610      	mov	r0, r2
 800e31e:	f002 fbcb 	bl	8010ab8 <SDMMC_CmdAppCommand>
 800e322:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	e00f      	b.n	800e34e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2102      	movs	r1, #2
 800e334:	4618      	mov	r0, r3
 800e336:	f002 fc04 	bl	8010b42 <SDMMC_CmdBusWidth>
 800e33a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	e003      	b.n	800e34e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e346:	2300      	movs	r3, #0
 800e348:	e001      	b.n	800e34e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e34a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3718      	adds	r7, #24
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b086      	sub	sp, #24
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e35e:	2300      	movs	r3, #0
 800e360:	60fb      	str	r3, [r7, #12]
 800e362:	2300      	movs	r3, #0
 800e364:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2100      	movs	r1, #0
 800e36c:	4618      	mov	r0, r3
 800e36e:	f002 fa38 	bl	80107e2 <SDIO_GetResponse>
 800e372:	4603      	mov	r3, r0
 800e374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e37c:	d102      	bne.n	800e384 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e382:	e02f      	b.n	800e3e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e384:	f107 030c 	add.w	r3, r7, #12
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f82e 	bl	800e3ec <SD_FindSCR>
 800e390:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	e023      	b.n	800e3e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d01c      	beq.n	800e3e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3ae:	041b      	lsls	r3, r3, #16
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f002 fb80 	bl	8010ab8 <SDMMC_CmdAppCommand>
 800e3b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	e00f      	b.n	800e3e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f002 fbb9 	bl	8010b42 <SDMMC_CmdBusWidth>
 800e3d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	e003      	b.n	800e3e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	e001      	b.n	800e3e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e3ec:	b590      	push	{r4, r7, lr}
 800e3ee:	b08f      	sub	sp, #60	; 0x3c
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e3f6:	f7fb fd7b 	bl	8009ef0 <HAL_GetTick>
 800e3fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e400:	2300      	movs	r3, #0
 800e402:	60bb      	str	r3, [r7, #8]
 800e404:	2300      	movs	r3, #0
 800e406:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2108      	movs	r1, #8
 800e412:	4618      	mov	r0, r3
 800e414:	f002 fa24 	bl	8010860 <SDMMC_CmdBlockLength>
 800e418:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	e0a9      	b.n	800e578 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e42c:	041b      	lsls	r3, r3, #16
 800e42e:	4619      	mov	r1, r3
 800e430:	4610      	mov	r0, r2
 800e432:	f002 fb41 	bl	8010ab8 <SDMMC_CmdAppCommand>
 800e436:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	e09a      	b.n	800e578 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e442:	f04f 33ff 	mov.w	r3, #4294967295
 800e446:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e448:	2308      	movs	r3, #8
 800e44a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e44c:	2330      	movs	r3, #48	; 0x30
 800e44e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e450:	2302      	movs	r3, #2
 800e452:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e454:	2300      	movs	r3, #0
 800e456:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e458:	2301      	movs	r3, #1
 800e45a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f107 0210 	add.w	r2, r7, #16
 800e464:	4611      	mov	r1, r2
 800e466:	4618      	mov	r0, r3
 800e468:	f002 f9ce 	bl	8010808 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4618      	mov	r0, r3
 800e472:	f002 fb88 	bl	8010b86 <SDMMC_CmdSendSCR>
 800e476:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d022      	beq.n	800e4c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e480:	e07a      	b.n	800e578 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00e      	beq.n	800e4ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	f107 0208 	add.w	r2, r7, #8
 800e49c:	18d4      	adds	r4, r2, r3
 800e49e:	4608      	mov	r0, r1
 800e4a0:	f002 f92d 	bl	80106fe <SDIO_ReadFIFO>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	6023      	str	r3, [r4, #0]
      index++;
 800e4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4ae:	f7fb fd1f 	bl	8009ef0 <HAL_GetTick>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4bc:	d102      	bne.n	800e4c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4c2:	e059      	b.n	800e578 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4ca:	f240 432a 	movw	r3, #1066	; 0x42a
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d0d6      	beq.n	800e482 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4da:	f003 0308 	and.w	r3, r3, #8
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d005      	beq.n	800e4ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2208      	movs	r2, #8
 800e4e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4ea:	2308      	movs	r3, #8
 800e4ec:	e044      	b.n	800e578 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f4:	f003 0302 	and.w	r3, r3, #2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d005      	beq.n	800e508 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2202      	movs	r2, #2
 800e502:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e504:	2302      	movs	r3, #2
 800e506:	e037      	b.n	800e578 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50e:	f003 0320 	and.w	r3, r3, #32
 800e512:	2b00      	cmp	r3, #0
 800e514:	d005      	beq.n	800e522 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2220      	movs	r2, #32
 800e51c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e51e:	2320      	movs	r3, #32
 800e520:	e02a      	b.n	800e578 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f240 523a 	movw	r2, #1338	; 0x53a
 800e52a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	061a      	lsls	r2, r3, #24
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	021b      	lsls	r3, r3, #8
 800e534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	0a1b      	lsrs	r3, r3, #8
 800e53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e542:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	0e1b      	lsrs	r3, r3, #24
 800e548:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54c:	601a      	str	r2, [r3, #0]
    scr++;
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	3304      	adds	r3, #4
 800e552:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	061a      	lsls	r2, r3, #24
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	021b      	lsls	r3, r3, #8
 800e55c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	0a1b      	lsrs	r3, r3, #8
 800e566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e56a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	0e1b      	lsrs	r3, r3, #24
 800e570:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e574:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	373c      	adds	r7, #60	; 0x3c
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd90      	pop	{r4, r7, pc}

0800e580 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e58c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e592:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d03f      	beq.n	800e61a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e59a:	2300      	movs	r3, #0
 800e59c:	617b      	str	r3, [r7, #20]
 800e59e:	e033      	b.n	800e608 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f002 f8aa 	bl	80106fe <SDIO_ReadFIFO>
 800e5aa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	0a1b      	lsrs	r3, r3, #8
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	0c1b      	lsrs	r3, r3, #16
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	0e1b      	lsrs	r3, r3, #24
 800e5f0:	b2da      	uxtb	r2, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	3b01      	subs	r3, #1
 800e600:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3301      	adds	r3, #1
 800e606:	617b      	str	r3, [r7, #20]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b07      	cmp	r3, #7
 800e60c:	d9c8      	bls.n	800e5a0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	693a      	ldr	r2, [r7, #16]
 800e618:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e61a:	bf00      	nop
 800e61c:	3718      	adds	r7, #24
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e622:	b580      	push	{r7, lr}
 800e624:	b086      	sub	sp, #24
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e634:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d043      	beq.n	800e6c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e63c:	2300      	movs	r3, #0
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	e037      	b.n	800e6b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3301      	adds	r3, #1
 800e64c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	3b01      	subs	r3, #1
 800e652:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	021a      	lsls	r2, r3, #8
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	4313      	orrs	r3, r2
 800e65e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	3301      	adds	r3, #1
 800e664:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	3b01      	subs	r3, #1
 800e66a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	041a      	lsls	r2, r3, #16
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	4313      	orrs	r3, r2
 800e676:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3301      	adds	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	3b01      	subs	r3, #1
 800e682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	061a      	lsls	r2, r3, #24
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	3301      	adds	r3, #1
 800e694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	3b01      	subs	r3, #1
 800e69a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f107 0208 	add.w	r2, r7, #8
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f002 f836 	bl	8010718 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	617b      	str	r3, [r7, #20]
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	2b07      	cmp	r3, #7
 800e6b6:	d9c4      	bls.n	800e642 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e6c4:	bf00      	nop
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d101      	bne.n	800e6de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e056      	b.n	800e78c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d106      	bne.n	800e6fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7f8 fe9b 	bl	8007434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2202      	movs	r2, #2
 800e702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e714:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	431a      	orrs	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	431a      	orrs	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	431a      	orrs	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	695b      	ldr	r3, [r3, #20]
 800e730:	431a      	orrs	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e73a:	431a      	orrs	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	69db      	ldr	r3, [r3, #28]
 800e740:	431a      	orrs	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a1b      	ldr	r3, [r3, #32]
 800e746:	ea42 0103 	orr.w	r1, r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	430a      	orrs	r2, r1
 800e754:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	699b      	ldr	r3, [r3, #24]
 800e75a:	0c1b      	lsrs	r3, r3, #16
 800e75c:	f003 0104 	and.w	r1, r3, #4
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	430a      	orrs	r2, r1
 800e76a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	69da      	ldr	r2, [r3, #28]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e77a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2201      	movs	r2, #1
 800e786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	603b      	str	r3, [r7, #0]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_SPI_Transmit+0x22>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e11e      	b.n	800e9f4 <HAL_SPI_Transmit+0x260>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7be:	f7fb fb97 	bl	8009ef0 <HAL_GetTick>
 800e7c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e7c4:	88fb      	ldrh	r3, [r7, #6]
 800e7c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d002      	beq.n	800e7da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e7d4:	2302      	movs	r3, #2
 800e7d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7d8:	e103      	b.n	800e9e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <HAL_SPI_Transmit+0x52>
 800e7e0:	88fb      	ldrh	r3, [r7, #6]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d102      	bne.n	800e7ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7ea:	e0fa      	b.n	800e9e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2203      	movs	r2, #3
 800e7f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	88fa      	ldrh	r2, [r7, #6]
 800e804:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	88fa      	ldrh	r2, [r7, #6]
 800e80a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2200      	movs	r2, #0
 800e810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2200      	movs	r2, #0
 800e816:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2200      	movs	r2, #0
 800e81c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e832:	d107      	bne.n	800e844 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e842:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e84e:	2b40      	cmp	r3, #64	; 0x40
 800e850:	d007      	beq.n	800e862 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e860:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e86a:	d14b      	bne.n	800e904 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <HAL_SPI_Transmit+0xe6>
 800e874:	8afb      	ldrh	r3, [r7, #22]
 800e876:	2b01      	cmp	r3, #1
 800e878:	d13e      	bne.n	800e8f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87e:	881a      	ldrh	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88a:	1c9a      	adds	r2, r3, #2
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e894:	b29b      	uxth	r3, r3
 800e896:	3b01      	subs	r3, #1
 800e898:	b29a      	uxth	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e89e:	e02b      	b.n	800e8f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	f003 0302 	and.w	r3, r3, #2
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d112      	bne.n	800e8d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b2:	881a      	ldrh	r2, [r3, #0]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8be:	1c9a      	adds	r2, r3, #2
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e8d2:	e011      	b.n	800e8f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8d4:	f7fb fb0c 	bl	8009ef0 <HAL_GetTick>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	1ad3      	subs	r3, r2, r3
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d803      	bhi.n	800e8ec <HAL_SPI_Transmit+0x158>
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ea:	d102      	bne.n	800e8f2 <HAL_SPI_Transmit+0x15e>
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e8f6:	e074      	b.n	800e9e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1ce      	bne.n	800e8a0 <HAL_SPI_Transmit+0x10c>
 800e902:	e04c      	b.n	800e99e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <HAL_SPI_Transmit+0x17e>
 800e90c:	8afb      	ldrh	r3, [r7, #22]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d140      	bne.n	800e994 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	330c      	adds	r3, #12
 800e91c:	7812      	ldrb	r2, [r2, #0]
 800e91e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e924:	1c5a      	adds	r2, r3, #1
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e92e:	b29b      	uxth	r3, r3
 800e930:	3b01      	subs	r3, #1
 800e932:	b29a      	uxth	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e938:	e02c      	b.n	800e994 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	f003 0302 	and.w	r3, r3, #2
 800e944:	2b02      	cmp	r3, #2
 800e946:	d113      	bne.n	800e970 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	330c      	adds	r3, #12
 800e952:	7812      	ldrb	r2, [r2, #0]
 800e954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e964:	b29b      	uxth	r3, r3
 800e966:	3b01      	subs	r3, #1
 800e968:	b29a      	uxth	r2, r3
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e96e:	e011      	b.n	800e994 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e970:	f7fb fabe 	bl	8009ef0 <HAL_GetTick>
 800e974:	4602      	mov	r2, r0
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d803      	bhi.n	800e988 <HAL_SPI_Transmit+0x1f4>
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e986:	d102      	bne.n	800e98e <HAL_SPI_Transmit+0x1fa>
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e98e:	2303      	movs	r3, #3
 800e990:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e992:	e026      	b.n	800e9e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e998:	b29b      	uxth	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1cd      	bne.n	800e93a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e99e:	69ba      	ldr	r2, [r7, #24]
 800e9a0:	6839      	ldr	r1, [r7, #0]
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f000 fba4 	bl	800f0f0 <SPI_EndRxTxTransaction>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2220      	movs	r2, #32
 800e9b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10a      	bne.n	800e9d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9bc:	2300      	movs	r3, #0
 800e9be:	613b      	str	r3, [r7, #16]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	613b      	str	r3, [r7, #16]
 800e9d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	77fb      	strb	r3, [r7, #31]
 800e9de:	e000      	b.n	800e9e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e9e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3720      	adds	r7, #32
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b088      	sub	sp, #32
 800ea00:	af02      	add	r7, sp, #8
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	603b      	str	r3, [r7, #0]
 800ea08:	4613      	mov	r3, r2
 800ea0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea18:	d112      	bne.n	800ea40 <HAL_SPI_Receive+0x44>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10e      	bne.n	800ea40 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2204      	movs	r2, #4
 800ea26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea2a:	88fa      	ldrh	r2, [r7, #6]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	4613      	mov	r3, r2
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	68b9      	ldr	r1, [r7, #8]
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f000 f8e9 	bl	800ec0e <HAL_SPI_TransmitReceive>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	e0e2      	b.n	800ec06 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d101      	bne.n	800ea4e <HAL_SPI_Receive+0x52>
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	e0db      	b.n	800ec06 <HAL_SPI_Receive+0x20a>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea56:	f7fb fa4b 	bl	8009ef0 <HAL_GetTick>
 800ea5a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d002      	beq.n	800ea6e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ea68:	2302      	movs	r3, #2
 800ea6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea6c:	e0c2      	b.n	800ebf4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <HAL_SPI_Receive+0x7e>
 800ea74:	88fb      	ldrh	r3, [r7, #6]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d102      	bne.n	800ea80 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea7e:	e0b9      	b.n	800ebf4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2204      	movs	r2, #4
 800ea84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	88fa      	ldrh	r2, [r7, #6]
 800ea98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	88fa      	ldrh	r2, [r7, #6]
 800ea9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eac6:	d107      	bne.n	800ead8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ead6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae2:	2b40      	cmp	r3, #64	; 0x40
 800eae4:	d007      	beq.n	800eaf6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eaf4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d162      	bne.n	800ebc4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eafe:	e02e      	b.n	800eb5e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	f003 0301 	and.w	r3, r3, #1
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d115      	bne.n	800eb3a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f103 020c 	add.w	r2, r3, #12
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1a:	7812      	ldrb	r2, [r2, #0]
 800eb1c:	b2d2      	uxtb	r2, r2
 800eb1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	1c5a      	adds	r2, r3, #1
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	3b01      	subs	r3, #1
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb38:	e011      	b.n	800eb5e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb3a:	f7fb f9d9 	bl	8009ef0 <HAL_GetTick>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d803      	bhi.n	800eb52 <HAL_SPI_Receive+0x156>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb50:	d102      	bne.n	800eb58 <HAL_SPI_Receive+0x15c>
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d102      	bne.n	800eb5e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb5c:	e04a      	b.n	800ebf4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1cb      	bne.n	800eb00 <HAL_SPI_Receive+0x104>
 800eb68:	e031      	b.n	800ebce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d113      	bne.n	800eba0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb82:	b292      	uxth	r2, r2
 800eb84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8a:	1c9a      	adds	r2, r3, #2
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	3b01      	subs	r3, #1
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb9e:	e011      	b.n	800ebc4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eba0:	f7fb f9a6 	bl	8009ef0 <HAL_GetTick>
 800eba4:	4602      	mov	r2, r0
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d803      	bhi.n	800ebb8 <HAL_SPI_Receive+0x1bc>
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb6:	d102      	bne.n	800ebbe <HAL_SPI_Receive+0x1c2>
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d102      	bne.n	800ebc4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ebc2:	e017      	b.n	800ebf4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1cd      	bne.n	800eb6a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebce:	693a      	ldr	r2, [r7, #16]
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 fa27 	bl	800f026 <SPI_EndRxTransaction>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d002      	beq.n	800ebe4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2220      	movs	r2, #32
 800ebe2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	75fb      	strb	r3, [r7, #23]
 800ebf0:	e000      	b.n	800ebf4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ebf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b08c      	sub	sp, #48	; 0x30
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	60f8      	str	r0, [r7, #12]
 800ec16:	60b9      	str	r1, [r7, #8]
 800ec18:	607a      	str	r2, [r7, #4]
 800ec1a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d101      	bne.n	800ec34 <HAL_SPI_TransmitReceive+0x26>
 800ec30:	2302      	movs	r3, #2
 800ec32:	e18a      	b.n	800ef4a <HAL_SPI_TransmitReceive+0x33c>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec3c:	f7fb f958 	bl	8009ef0 <HAL_GetTick>
 800ec40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ec52:	887b      	ldrh	r3, [r7, #2]
 800ec54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d00f      	beq.n	800ec7e <HAL_SPI_TransmitReceive+0x70>
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec64:	d107      	bne.n	800ec76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d103      	bne.n	800ec76 <HAL_SPI_TransmitReceive+0x68>
 800ec6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec72:	2b04      	cmp	r3, #4
 800ec74:	d003      	beq.n	800ec7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ec76:	2302      	movs	r3, #2
 800ec78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec7c:	e15b      	b.n	800ef36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d005      	beq.n	800ec90 <HAL_SPI_TransmitReceive+0x82>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d002      	beq.n	800ec90 <HAL_SPI_TransmitReceive+0x82>
 800ec8a:	887b      	ldrh	r3, [r7, #2]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d103      	bne.n	800ec98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec96:	e14e      	b.n	800ef36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	d003      	beq.n	800ecac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2205      	movs	r2, #5
 800eca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	887a      	ldrh	r2, [r7, #2]
 800ecbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	887a      	ldrh	r2, [r7, #2]
 800ecc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	68ba      	ldr	r2, [r7, #8]
 800ecc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	887a      	ldrh	r2, [r7, #2]
 800ecce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	887a      	ldrh	r2, [r7, #2]
 800ecd4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecec:	2b40      	cmp	r3, #64	; 0x40
 800ecee:	d007      	beq.n	800ed00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ecfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed08:	d178      	bne.n	800edfc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d002      	beq.n	800ed18 <HAL_SPI_TransmitReceive+0x10a>
 800ed12:	8b7b      	ldrh	r3, [r7, #26]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d166      	bne.n	800ede6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1c:	881a      	ldrh	r2, [r3, #0]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed28:	1c9a      	adds	r2, r3, #2
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	3b01      	subs	r3, #1
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed3c:	e053      	b.n	800ede6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f003 0302 	and.w	r3, r3, #2
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d11b      	bne.n	800ed84 <HAL_SPI_TransmitReceive+0x176>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d016      	beq.n	800ed84 <HAL_SPI_TransmitReceive+0x176>
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d113      	bne.n	800ed84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed60:	881a      	ldrh	r2, [r3, #0]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6c:	1c9a      	adds	r2, r3, #2
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed80:	2300      	movs	r3, #0
 800ed82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f003 0301 	and.w	r3, r3, #1
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d119      	bne.n	800edc6 <HAL_SPI_TransmitReceive+0x1b8>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d014      	beq.n	800edc6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68da      	ldr	r2, [r3, #12]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda6:	b292      	uxth	r2, r2
 800eda8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edae:	1c9a      	adds	r2, r3, #2
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edb8:	b29b      	uxth	r3, r3
 800edba:	3b01      	subs	r3, #1
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edc2:	2301      	movs	r3, #1
 800edc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800edc6:	f7fb f893 	bl	8009ef0 <HAL_GetTick>
 800edca:	4602      	mov	r2, r0
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d807      	bhi.n	800ede6 <HAL_SPI_TransmitReceive+0x1d8>
 800edd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eddc:	d003      	beq.n	800ede6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800edde:	2303      	movs	r3, #3
 800ede0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ede4:	e0a7      	b.n	800ef36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edea:	b29b      	uxth	r3, r3
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1a6      	bne.n	800ed3e <HAL_SPI_TransmitReceive+0x130>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1a1      	bne.n	800ed3e <HAL_SPI_TransmitReceive+0x130>
 800edfa:	e07c      	b.n	800eef6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <HAL_SPI_TransmitReceive+0x1fc>
 800ee04:	8b7b      	ldrh	r3, [r7, #26]
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d16b      	bne.n	800eee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	330c      	adds	r3, #12
 800ee14:	7812      	ldrb	r2, [r2, #0]
 800ee16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1c:	1c5a      	adds	r2, r3, #1
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee30:	e057      	b.n	800eee2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	f003 0302 	and.w	r3, r3, #2
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d11c      	bne.n	800ee7a <HAL_SPI_TransmitReceive+0x26c>
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d017      	beq.n	800ee7a <HAL_SPI_TransmitReceive+0x26c>
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d114      	bne.n	800ee7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	330c      	adds	r3, #12
 800ee5a:	7812      	ldrb	r2, [r2, #0]
 800ee5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee62:	1c5a      	adds	r2, r3, #1
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	3b01      	subs	r3, #1
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee76:	2300      	movs	r3, #0
 800ee78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	f003 0301 	and.w	r3, r3, #1
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d119      	bne.n	800eebc <HAL_SPI_TransmitReceive+0x2ae>
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d014      	beq.n	800eebc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	68da      	ldr	r2, [r3, #12]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9c:	b2d2      	uxtb	r2, r2
 800ee9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea4:	1c5a      	adds	r2, r3, #1
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	3b01      	subs	r3, #1
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eebc:	f7fb f818 	bl	8009ef0 <HAL_GetTick>
 800eec0:	4602      	mov	r2, r0
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d803      	bhi.n	800eed4 <HAL_SPI_TransmitReceive+0x2c6>
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed2:	d102      	bne.n	800eeda <HAL_SPI_TransmitReceive+0x2cc>
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d103      	bne.n	800eee2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eeda:	2303      	movs	r3, #3
 800eedc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eee0:	e029      	b.n	800ef36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1a2      	bne.n	800ee32 <HAL_SPI_TransmitReceive+0x224>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d19d      	bne.n	800ee32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 f8f8 	bl	800f0f0 <SPI_EndRxTxTransaction>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ef06:	2301      	movs	r3, #1
 800ef08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2220      	movs	r2, #32
 800ef10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ef12:	e010      	b.n	800ef36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d10b      	bne.n	800ef34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	617b      	str	r3, [r7, #20]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	617b      	str	r3, [r7, #20]
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	e000      	b.n	800ef36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ef34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3730      	adds	r7, #48	; 0x30
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	60f8      	str	r0, [r7, #12]
 800ef5a:	60b9      	str	r1, [r7, #8]
 800ef5c:	603b      	str	r3, [r7, #0]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef62:	e04c      	b.n	800effe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef6a:	d048      	beq.n	800effe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ef6c:	f7fa ffc0 	bl	8009ef0 <HAL_GetTick>
 800ef70:	4602      	mov	r2, r0
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d902      	bls.n	800ef82 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d13d      	bne.n	800effe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	685a      	ldr	r2, [r3, #4]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ef90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef9a:	d111      	bne.n	800efc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efa4:	d004      	beq.n	800efb0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efae:	d107      	bne.n	800efc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efc8:	d10f      	bne.n	800efea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681a      	ldr	r2, [r3, #0]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800efe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800effa:	2303      	movs	r3, #3
 800effc:	e00f      	b.n	800f01e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	4013      	ands	r3, r2
 800f008:	68ba      	ldr	r2, [r7, #8]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	bf0c      	ite	eq
 800f00e:	2301      	moveq	r3, #1
 800f010:	2300      	movne	r3, #0
 800f012:	b2db      	uxtb	r3, r3
 800f014:	461a      	mov	r2, r3
 800f016:	79fb      	ldrb	r3, [r7, #7]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d1a3      	bne.n	800ef64 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b086      	sub	sp, #24
 800f02a:	af02      	add	r7, sp, #8
 800f02c:	60f8      	str	r0, [r7, #12]
 800f02e:	60b9      	str	r1, [r7, #8]
 800f030:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f03a:	d111      	bne.n	800f060 <SPI_EndRxTransaction+0x3a>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f044:	d004      	beq.n	800f050 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f04e:	d107      	bne.n	800f060 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f05e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f068:	d12a      	bne.n	800f0c0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f072:	d012      	beq.n	800f09a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2200      	movs	r2, #0
 800f07c:	2180      	movs	r1, #128	; 0x80
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f7ff ff67 	bl	800ef52 <SPI_WaitFlagStateUntilTimeout>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d02d      	beq.n	800f0e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	f043 0220 	orr.w	r2, r3, #32
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f096:	2303      	movs	r3, #3
 800f098:	e026      	b.n	800f0e8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2101      	movs	r1, #1
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f7ff ff54 	bl	800ef52 <SPI_WaitFlagStateUntilTimeout>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d01a      	beq.n	800f0e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0b4:	f043 0220 	orr.w	r2, r3, #32
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e013      	b.n	800f0e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	2101      	movs	r1, #1
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f7ff ff41 	bl	800ef52 <SPI_WaitFlagStateUntilTimeout>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d007      	beq.n	800f0e6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0da:	f043 0220 	orr.w	r2, r3, #32
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f0e2:	2303      	movs	r3, #3
 800f0e4:	e000      	b.n	800f0e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f0e6:	2300      	movs	r3, #0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b088      	sub	sp, #32
 800f0f4:	af02      	add	r7, sp, #8
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f0fc:	4b1b      	ldr	r3, [pc, #108]	; (800f16c <SPI_EndRxTxTransaction+0x7c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a1b      	ldr	r2, [pc, #108]	; (800f170 <SPI_EndRxTxTransaction+0x80>)
 800f102:	fba2 2303 	umull	r2, r3, r2, r3
 800f106:	0d5b      	lsrs	r3, r3, #21
 800f108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f10c:	fb02 f303 	mul.w	r3, r2, r3
 800f110:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f11a:	d112      	bne.n	800f142 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	2200      	movs	r2, #0
 800f124:	2180      	movs	r1, #128	; 0x80
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f7ff ff13 	bl	800ef52 <SPI_WaitFlagStateUntilTimeout>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d016      	beq.n	800f160 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f136:	f043 0220 	orr.w	r2, r3, #32
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f13e:	2303      	movs	r3, #3
 800f140:	e00f      	b.n	800f162 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00a      	beq.n	800f15e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f158:	2b80      	cmp	r3, #128	; 0x80
 800f15a:	d0f2      	beq.n	800f142 <SPI_EndRxTxTransaction+0x52>
 800f15c:	e000      	b.n	800f160 <SPI_EndRxTxTransaction+0x70>
        break;
 800f15e:	bf00      	nop
  }

  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3718      	adds	r7, #24
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	20000000 	.word	0x20000000
 800f170:	165e9f81 	.word	0x165e9f81

0800f174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	e01d      	b.n	800f1c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d106      	bne.n	800f1a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2200      	movs	r2, #0
 800f196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7f8 fa06 	bl	80075ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2202      	movs	r2, #2
 800f1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	f000 fb56 	bl	800f864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f1ca:	b480      	push	{r7}
 800f1cc:	b085      	sub	sp, #20
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68da      	ldr	r2, [r3, #12]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f042 0201 	orr.w	r2, r2, #1
 800f1e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	f003 0307 	and.w	r3, r3, #7
 800f1ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b06      	cmp	r3, #6
 800f1f2:	d007      	beq.n	800f204 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f042 0201 	orr.w	r2, r2, #1
 800f202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3714      	adds	r7, #20
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d101      	bne.n	800f224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f220:	2301      	movs	r3, #1
 800f222:	e01d      	b.n	800f260 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d106      	bne.n	800f23e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7f8 f943 	bl	80074c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2202      	movs	r2, #2
 800f242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f000 fb07 	bl	800f864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f25e:	2300      	movs	r3, #0
}
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	2201      	movs	r2, #1
 800f278:	6839      	ldr	r1, [r7, #0]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 fd42 	bl	800fd04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a15      	ldr	r2, [pc, #84]	; (800f2dc <HAL_TIM_PWM_Start+0x74>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d004      	beq.n	800f294 <HAL_TIM_PWM_Start+0x2c>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a14      	ldr	r2, [pc, #80]	; (800f2e0 <HAL_TIM_PWM_Start+0x78>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d101      	bne.n	800f298 <HAL_TIM_PWM_Start+0x30>
 800f294:	2301      	movs	r3, #1
 800f296:	e000      	b.n	800f29a <HAL_TIM_PWM_Start+0x32>
 800f298:	2300      	movs	r3, #0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d007      	beq.n	800f2ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f2ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	f003 0307 	and.w	r3, r3, #7
 800f2b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2b06      	cmp	r3, #6
 800f2be:	d007      	beq.n	800f2d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f042 0201 	orr.w	r2, r2, #1
 800f2ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	40010000 	.word	0x40010000
 800f2e0:	40010400 	.word	0x40010400

0800f2e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d101      	bne.n	800f2f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e083      	b.n	800f400 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d106      	bne.n	800f312 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7f8 f9dd 	bl	80076cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2202      	movs	r2, #2
 800f316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	689b      	ldr	r3, [r3, #8]
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	6812      	ldr	r2, [r2, #0]
 800f324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f328:	f023 0307 	bic.w	r3, r3, #7
 800f32c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3304      	adds	r3, #4
 800f336:	4619      	mov	r1, r3
 800f338:	4610      	mov	r0, r2
 800f33a:	f000 fa93 	bl	800f864 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	6a1b      	ldr	r3, [r3, #32]
 800f354:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	4313      	orrs	r3, r2
 800f35e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f366:	f023 0303 	bic.w	r3, r3, #3
 800f36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	689a      	ldr	r2, [r3, #8]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	021b      	lsls	r3, r3, #8
 800f376:	4313      	orrs	r3, r2
 800f378:	693a      	ldr	r2, [r7, #16]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f384:	f023 030c 	bic.w	r3, r3, #12
 800f388:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	68da      	ldr	r2, [r3, #12]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	69db      	ldr	r3, [r3, #28]
 800f39e:	021b      	lsls	r3, r3, #8
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	693a      	ldr	r2, [r7, #16]
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	011a      	lsls	r2, r3, #4
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	031b      	lsls	r3, r3, #12
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	693a      	ldr	r2, [r7, #16]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f3c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f3ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	695b      	ldr	r3, [r3, #20]
 800f3d4:	011b      	lsls	r3, r3, #4
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	693a      	ldr	r2, [r7, #16]
 800f3ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d002      	beq.n	800f41e <HAL_TIM_Encoder_Start+0x16>
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d008      	beq.n	800f42e <HAL_TIM_Encoder_Start+0x26>
 800f41c:	e00f      	b.n	800f43e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2201      	movs	r2, #1
 800f424:	2100      	movs	r1, #0
 800f426:	4618      	mov	r0, r3
 800f428:	f000 fc6c 	bl	800fd04 <TIM_CCxChannelCmd>
      break;
 800f42c:	e016      	b.n	800f45c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2201      	movs	r2, #1
 800f434:	2104      	movs	r1, #4
 800f436:	4618      	mov	r0, r3
 800f438:	f000 fc64 	bl	800fd04 <TIM_CCxChannelCmd>
      break;
 800f43c:	e00e      	b.n	800f45c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2201      	movs	r2, #1
 800f444:	2100      	movs	r1, #0
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fc5c 	bl	800fd04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2201      	movs	r2, #1
 800f452:	2104      	movs	r1, #4
 800f454:	4618      	mov	r0, r3
 800f456:	f000 fc55 	bl	800fd04 <TIM_CCxChannelCmd>
      break;
 800f45a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f042 0201 	orr.w	r2, r2, #1
 800f46a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	f003 0302 	and.w	r3, r3, #2
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d122      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	f003 0302 	and.w	r3, r3, #2
 800f496:	2b02      	cmp	r3, #2
 800f498:	d11b      	bne.n	800f4d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f06f 0202 	mvn.w	r2, #2
 800f4a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	f003 0303 	and.w	r3, r3, #3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f9b5 	bl	800f828 <HAL_TIM_IC_CaptureCallback>
 800f4be:	e005      	b.n	800f4cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f9a7 	bl	800f814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f9b8 	bl	800f83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	f003 0304 	and.w	r3, r3, #4
 800f4dc:	2b04      	cmp	r3, #4
 800f4de:	d122      	bne.n	800f526 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	f003 0304 	and.w	r3, r3, #4
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	d11b      	bne.n	800f526 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f06f 0204 	mvn.w	r2, #4
 800f4f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2202      	movs	r2, #2
 800f4fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f98b 	bl	800f828 <HAL_TIM_IC_CaptureCallback>
 800f512:	e005      	b.n	800f520 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f97d 	bl	800f814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f98e 	bl	800f83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b08      	cmp	r3, #8
 800f532:	d122      	bne.n	800f57a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	f003 0308 	and.w	r3, r3, #8
 800f53e:	2b08      	cmp	r3, #8
 800f540:	d11b      	bne.n	800f57a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f06f 0208 	mvn.w	r2, #8
 800f54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2204      	movs	r2, #4
 800f550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	69db      	ldr	r3, [r3, #28]
 800f558:	f003 0303 	and.w	r3, r3, #3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d003      	beq.n	800f568 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f961 	bl	800f828 <HAL_TIM_IC_CaptureCallback>
 800f566:	e005      	b.n	800f574 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f953 	bl	800f814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f964 	bl	800f83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	f003 0310 	and.w	r3, r3, #16
 800f584:	2b10      	cmp	r3, #16
 800f586:	d122      	bne.n	800f5ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	f003 0310 	and.w	r3, r3, #16
 800f592:	2b10      	cmp	r3, #16
 800f594:	d11b      	bne.n	800f5ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f06f 0210 	mvn.w	r2, #16
 800f59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	69db      	ldr	r3, [r3, #28]
 800f5ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d003      	beq.n	800f5bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f937 	bl	800f828 <HAL_TIM_IC_CaptureCallback>
 800f5ba:	e005      	b.n	800f5c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f929 	bl	800f814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 f93a 	bl	800f83c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d10e      	bne.n	800f5fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d107      	bne.n	800f5fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f06f 0201 	mvn.w	r2, #1
 800f5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7f6 fd53 	bl	80060a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f604:	2b80      	cmp	r3, #128	; 0x80
 800f606:	d10e      	bne.n	800f626 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f612:	2b80      	cmp	r3, #128	; 0x80
 800f614:	d107      	bne.n	800f626 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fc6d 	bl	800ff00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f630:	2b40      	cmp	r3, #64	; 0x40
 800f632:	d10e      	bne.n	800f652 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f63e:	2b40      	cmp	r3, #64	; 0x40
 800f640:	d107      	bne.n	800f652 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f8ff 	bl	800f850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	f003 0320 	and.w	r3, r3, #32
 800f65c:	2b20      	cmp	r3, #32
 800f65e:	d10e      	bne.n	800f67e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f003 0320 	and.w	r3, r3, #32
 800f66a:	2b20      	cmp	r3, #32
 800f66c:	d107      	bne.n	800f67e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f06f 0220 	mvn.w	r2, #32
 800f676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 fc37 	bl	800feec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f67e:	bf00      	nop
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
	...

0800f688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d101      	bne.n	800f6a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f69e:	2302      	movs	r3, #2
 800f6a0:	e0b4      	b.n	800f80c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2202      	movs	r2, #2
 800f6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b0c      	cmp	r3, #12
 800f6b6:	f200 809f 	bhi.w	800f7f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f6ba:	a201      	add	r2, pc, #4	; (adr r2, 800f6c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c0:	0800f6f5 	.word	0x0800f6f5
 800f6c4:	0800f7f9 	.word	0x0800f7f9
 800f6c8:	0800f7f9 	.word	0x0800f7f9
 800f6cc:	0800f7f9 	.word	0x0800f7f9
 800f6d0:	0800f735 	.word	0x0800f735
 800f6d4:	0800f7f9 	.word	0x0800f7f9
 800f6d8:	0800f7f9 	.word	0x0800f7f9
 800f6dc:	0800f7f9 	.word	0x0800f7f9
 800f6e0:	0800f777 	.word	0x0800f777
 800f6e4:	0800f7f9 	.word	0x0800f7f9
 800f6e8:	0800f7f9 	.word	0x0800f7f9
 800f6ec:	0800f7f9 	.word	0x0800f7f9
 800f6f0:	0800f7b7 	.word	0x0800f7b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68b9      	ldr	r1, [r7, #8]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 f952 	bl	800f9a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	699a      	ldr	r2, [r3, #24]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f042 0208 	orr.w	r2, r2, #8
 800f70e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	699a      	ldr	r2, [r3, #24]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f022 0204 	bic.w	r2, r2, #4
 800f71e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	6999      	ldr	r1, [r3, #24]
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	691a      	ldr	r2, [r3, #16]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	430a      	orrs	r2, r1
 800f730:	619a      	str	r2, [r3, #24]
      break;
 800f732:	e062      	b.n	800f7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68b9      	ldr	r1, [r7, #8]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f000 f9a2 	bl	800fa84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	699a      	ldr	r2, [r3, #24]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f74e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	699a      	ldr	r2, [r3, #24]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f75e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	6999      	ldr	r1, [r3, #24]
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	021a      	lsls	r2, r3, #8
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	430a      	orrs	r2, r1
 800f772:	619a      	str	r2, [r3, #24]
      break;
 800f774:	e041      	b.n	800f7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68b9      	ldr	r1, [r7, #8]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f000 f9f7 	bl	800fb70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69da      	ldr	r2, [r3, #28]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f042 0208 	orr.w	r2, r2, #8
 800f790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	69da      	ldr	r2, [r3, #28]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f022 0204 	bic.w	r2, r2, #4
 800f7a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	69d9      	ldr	r1, [r3, #28]
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	691a      	ldr	r2, [r3, #16]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	430a      	orrs	r2, r1
 800f7b2:	61da      	str	r2, [r3, #28]
      break;
 800f7b4:	e021      	b.n	800f7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68b9      	ldr	r1, [r7, #8]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 fa4b 	bl	800fc58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	69da      	ldr	r2, [r3, #28]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	69da      	ldr	r2, [r3, #28]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	69d9      	ldr	r1, [r3, #28]
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	691b      	ldr	r3, [r3, #16]
 800f7ec:	021a      	lsls	r2, r3, #8
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	430a      	orrs	r2, r1
 800f7f4:	61da      	str	r2, [r3, #28]
      break;
 800f7f6:	e000      	b.n	800f7fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f7f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2200      	movs	r2, #0
 800f806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f81c:	bf00      	nop
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f830:	bf00      	nop
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f844:	bf00      	nop
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f858:	bf00      	nop
 800f85a:	370c      	adds	r7, #12
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a40      	ldr	r2, [pc, #256]	; (800f978 <TIM_Base_SetConfig+0x114>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d013      	beq.n	800f8a4 <TIM_Base_SetConfig+0x40>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f882:	d00f      	beq.n	800f8a4 <TIM_Base_SetConfig+0x40>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a3d      	ldr	r2, [pc, #244]	; (800f97c <TIM_Base_SetConfig+0x118>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d00b      	beq.n	800f8a4 <TIM_Base_SetConfig+0x40>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a3c      	ldr	r2, [pc, #240]	; (800f980 <TIM_Base_SetConfig+0x11c>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d007      	beq.n	800f8a4 <TIM_Base_SetConfig+0x40>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a3b      	ldr	r2, [pc, #236]	; (800f984 <TIM_Base_SetConfig+0x120>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d003      	beq.n	800f8a4 <TIM_Base_SetConfig+0x40>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a3a      	ldr	r2, [pc, #232]	; (800f988 <TIM_Base_SetConfig+0x124>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d108      	bne.n	800f8b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a2f      	ldr	r2, [pc, #188]	; (800f978 <TIM_Base_SetConfig+0x114>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d02b      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c4:	d027      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a2c      	ldr	r2, [pc, #176]	; (800f97c <TIM_Base_SetConfig+0x118>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d023      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a2b      	ldr	r2, [pc, #172]	; (800f980 <TIM_Base_SetConfig+0x11c>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d01f      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a2a      	ldr	r2, [pc, #168]	; (800f984 <TIM_Base_SetConfig+0x120>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d01b      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a29      	ldr	r2, [pc, #164]	; (800f988 <TIM_Base_SetConfig+0x124>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d017      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a28      	ldr	r2, [pc, #160]	; (800f98c <TIM_Base_SetConfig+0x128>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d013      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a27      	ldr	r2, [pc, #156]	; (800f990 <TIM_Base_SetConfig+0x12c>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d00f      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a26      	ldr	r2, [pc, #152]	; (800f994 <TIM_Base_SetConfig+0x130>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d00b      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a25      	ldr	r2, [pc, #148]	; (800f998 <TIM_Base_SetConfig+0x134>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d007      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a24      	ldr	r2, [pc, #144]	; (800f99c <TIM_Base_SetConfig+0x138>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d003      	beq.n	800f916 <TIM_Base_SetConfig+0xb2>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a23      	ldr	r2, [pc, #140]	; (800f9a0 <TIM_Base_SetConfig+0x13c>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d108      	bne.n	800f928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f91c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	4313      	orrs	r3, r2
 800f926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	695b      	ldr	r3, [r3, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	689a      	ldr	r2, [r3, #8]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a0a      	ldr	r2, [pc, #40]	; (800f978 <TIM_Base_SetConfig+0x114>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d003      	beq.n	800f95c <TIM_Base_SetConfig+0xf8>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a0c      	ldr	r2, [pc, #48]	; (800f988 <TIM_Base_SetConfig+0x124>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d103      	bne.n	800f964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	691a      	ldr	r2, [r3, #16]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	615a      	str	r2, [r3, #20]
}
 800f96a:	bf00      	nop
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	40010000 	.word	0x40010000
 800f97c:	40000400 	.word	0x40000400
 800f980:	40000800 	.word	0x40000800
 800f984:	40000c00 	.word	0x40000c00
 800f988:	40010400 	.word	0x40010400
 800f98c:	40014000 	.word	0x40014000
 800f990:	40014400 	.word	0x40014400
 800f994:	40014800 	.word	0x40014800
 800f998:	40001800 	.word	0x40001800
 800f99c:	40001c00 	.word	0x40001c00
 800f9a0:	40002000 	.word	0x40002000

0800f9a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b087      	sub	sp, #28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	f023 0201 	bic.w	r2, r3, #1
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6a1b      	ldr	r3, [r3, #32]
 800f9be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	699b      	ldr	r3, [r3, #24]
 800f9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f023 0303 	bic.w	r3, r3, #3
 800f9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f023 0302 	bic.w	r3, r3, #2
 800f9ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a20      	ldr	r2, [pc, #128]	; (800fa7c <TIM_OC1_SetConfig+0xd8>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d003      	beq.n	800fa08 <TIM_OC1_SetConfig+0x64>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a1f      	ldr	r2, [pc, #124]	; (800fa80 <TIM_OC1_SetConfig+0xdc>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d10c      	bne.n	800fa22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f023 0308 	bic.w	r3, r3, #8
 800fa0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	f023 0304 	bic.w	r3, r3, #4
 800fa20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a15      	ldr	r2, [pc, #84]	; (800fa7c <TIM_OC1_SetConfig+0xd8>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d003      	beq.n	800fa32 <TIM_OC1_SetConfig+0x8e>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a14      	ldr	r2, [pc, #80]	; (800fa80 <TIM_OC1_SetConfig+0xdc>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d111      	bne.n	800fa56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	695b      	ldr	r3, [r3, #20]
 800fa46:	693a      	ldr	r2, [r7, #16]
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	699b      	ldr	r3, [r3, #24]
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	693a      	ldr	r2, [r7, #16]
 800fa5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	697a      	ldr	r2, [r7, #20]
 800fa6e:	621a      	str	r2, [r3, #32]
}
 800fa70:	bf00      	nop
 800fa72:	371c      	adds	r7, #28
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	40010000 	.word	0x40010000
 800fa80:	40010400 	.word	0x40010400

0800fa84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	f023 0210 	bic.w	r2, r3, #16
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	699b      	ldr	r3, [r3, #24]
 800faaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800faba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	021b      	lsls	r3, r3, #8
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	4313      	orrs	r3, r2
 800fac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f023 0320 	bic.w	r3, r3, #32
 800face:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	011b      	lsls	r3, r3, #4
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	4313      	orrs	r3, r2
 800fada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4a22      	ldr	r2, [pc, #136]	; (800fb68 <TIM_OC2_SetConfig+0xe4>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d003      	beq.n	800faec <TIM_OC2_SetConfig+0x68>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4a21      	ldr	r2, [pc, #132]	; (800fb6c <TIM_OC2_SetConfig+0xe8>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d10d      	bne.n	800fb08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	011b      	lsls	r3, r3, #4
 800fafa:	697a      	ldr	r2, [r7, #20]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4a17      	ldr	r2, [pc, #92]	; (800fb68 <TIM_OC2_SetConfig+0xe4>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d003      	beq.n	800fb18 <TIM_OC2_SetConfig+0x94>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4a16      	ldr	r2, [pc, #88]	; (800fb6c <TIM_OC2_SetConfig+0xe8>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d113      	bne.n	800fb40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	695b      	ldr	r3, [r3, #20]
 800fb2c:	009b      	lsls	r3, r3, #2
 800fb2e:	693a      	ldr	r2, [r7, #16]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	699b      	ldr	r3, [r3, #24]
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	685a      	ldr	r2, [r3, #4]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	621a      	str	r2, [r3, #32]
}
 800fb5a:	bf00      	nop
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	40010000 	.word	0x40010000
 800fb6c:	40010400 	.word	0x40010400

0800fb70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b087      	sub	sp, #28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6a1b      	ldr	r3, [r3, #32]
 800fb7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f023 0303 	bic.w	r3, r3, #3
 800fba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	021b      	lsls	r3, r3, #8
 800fbc0:	697a      	ldr	r2, [r7, #20]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a21      	ldr	r2, [pc, #132]	; (800fc50 <TIM_OC3_SetConfig+0xe0>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d003      	beq.n	800fbd6 <TIM_OC3_SetConfig+0x66>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a20      	ldr	r2, [pc, #128]	; (800fc54 <TIM_OC3_SetConfig+0xe4>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d10d      	bne.n	800fbf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	68db      	ldr	r3, [r3, #12]
 800fbe2:	021b      	lsls	r3, r3, #8
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fbf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4a16      	ldr	r2, [pc, #88]	; (800fc50 <TIM_OC3_SetConfig+0xe0>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d003      	beq.n	800fc02 <TIM_OC3_SetConfig+0x92>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4a15      	ldr	r2, [pc, #84]	; (800fc54 <TIM_OC3_SetConfig+0xe4>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d113      	bne.n	800fc2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	699b      	ldr	r3, [r3, #24]
 800fc22:	011b      	lsls	r3, r3, #4
 800fc24:	693a      	ldr	r2, [r7, #16]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	68fa      	ldr	r2, [r7, #12]
 800fc34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	685a      	ldr	r2, [r3, #4]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	621a      	str	r2, [r3, #32]
}
 800fc44:	bf00      	nop
 800fc46:	371c      	adds	r7, #28
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr
 800fc50:	40010000 	.word	0x40010000
 800fc54:	40010400 	.word	0x40010400

0800fc58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b087      	sub	sp, #28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a1b      	ldr	r3, [r3, #32]
 800fc66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	69db      	ldr	r3, [r3, #28]
 800fc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	021b      	lsls	r3, r3, #8
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	689b      	ldr	r3, [r3, #8]
 800fca8:	031b      	lsls	r3, r3, #12
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a12      	ldr	r2, [pc, #72]	; (800fcfc <TIM_OC4_SetConfig+0xa4>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d003      	beq.n	800fcc0 <TIM_OC4_SetConfig+0x68>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4a11      	ldr	r2, [pc, #68]	; (800fd00 <TIM_OC4_SetConfig+0xa8>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d109      	bne.n	800fcd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	695b      	ldr	r3, [r3, #20]
 800fccc:	019b      	lsls	r3, r3, #6
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	697a      	ldr	r2, [r7, #20]
 800fcd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	685a      	ldr	r2, [r3, #4]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	621a      	str	r2, [r3, #32]
}
 800fcee:	bf00      	nop
 800fcf0:	371c      	adds	r7, #28
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	40010000 	.word	0x40010000
 800fd00:	40010400 	.word	0x40010400

0800fd04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	f003 031f 	and.w	r3, r3, #31
 800fd16:	2201      	movs	r2, #1
 800fd18:	fa02 f303 	lsl.w	r3, r2, r3
 800fd1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	6a1a      	ldr	r2, [r3, #32]
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	43db      	mvns	r3, r3
 800fd26:	401a      	ands	r2, r3
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6a1a      	ldr	r2, [r3, #32]
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	f003 031f 	and.w	r3, r3, #31
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	fa01 f303 	lsl.w	r3, r1, r3
 800fd3c:	431a      	orrs	r2, r3
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	621a      	str	r2, [r3, #32]
}
 800fd42:	bf00      	nop
 800fd44:	371c      	adds	r7, #28
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
	...

0800fd50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e05a      	b.n	800fe1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2202      	movs	r2, #2
 800fd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	689b      	ldr	r3, [r3, #8]
 800fd86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a21      	ldr	r2, [pc, #132]	; (800fe2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d022      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdb4:	d01d      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a1d      	ldr	r2, [pc, #116]	; (800fe30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d018      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a1b      	ldr	r2, [pc, #108]	; (800fe34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d013      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a1a      	ldr	r2, [pc, #104]	; (800fe38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d00e      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a18      	ldr	r2, [pc, #96]	; (800fe3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d009      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a17      	ldr	r2, [pc, #92]	; (800fe40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d004      	beq.n	800fdf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a15      	ldr	r2, [pc, #84]	; (800fe44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d10c      	bne.n	800fe0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	68ba      	ldr	r2, [r7, #8]
 800fe00:	4313      	orrs	r3, r2
 800fe02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68ba      	ldr	r2, [r7, #8]
 800fe0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2200      	movs	r2, #0
 800fe18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3714      	adds	r7, #20
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	40010000 	.word	0x40010000
 800fe30:	40000400 	.word	0x40000400
 800fe34:	40000800 	.word	0x40000800
 800fe38:	40000c00 	.word	0x40000c00
 800fe3c:	40010400 	.word	0x40010400
 800fe40:	40014000 	.word	0x40014000
 800fe44:	40001800 	.word	0x40001800

0800fe48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d101      	bne.n	800fe64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe60:	2302      	movs	r3, #2
 800fe62:	e03d      	b.n	800fee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2201      	movs	r2, #1
 800fe68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	4313      	orrs	r3, r2
 800fe86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4313      	orrs	r3, r2
 800fea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	4313      	orrs	r3, r2
 800feb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	4313      	orrs	r3, r2
 800febe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	69db      	ldr	r3, [r3, #28]
 800feca:	4313      	orrs	r3, r2
 800fecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fef4:	bf00      	nop
 800fef6:	370c      	adds	r7, #12
 800fef8:	46bd      	mov	sp, r7
 800fefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefe:	4770      	bx	lr

0800ff00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff22:	2301      	movs	r3, #1
 800ff24:	e03f      	b.n	800ffa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d106      	bne.n	800ff40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7f7 fcf0 	bl	8007920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2224      	movs	r2, #36	; 0x24
 800ff44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68da      	ldr	r2, [r3, #12]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f829 	bl	800ffb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	691a      	ldr	r2, [r3, #16]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	695a      	ldr	r2, [r3, #20]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68da      	ldr	r2, [r3, #12]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2220      	movs	r2, #32
 800ff98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2220      	movs	r2, #32
 800ffa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3708      	adds	r7, #8
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
	...

0800ffb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb4:	b085      	sub	sp, #20
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	691b      	ldr	r3, [r3, #16]
 800ffc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	68da      	ldr	r2, [r3, #12]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	430a      	orrs	r2, r1
 800ffce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	689a      	ldr	r2, [r3, #8]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	431a      	orrs	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	695b      	ldr	r3, [r3, #20]
 800ffde:	431a      	orrs	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69db      	ldr	r3, [r3, #28]
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fff2:	f023 030c 	bic.w	r3, r3, #12
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6812      	ldr	r2, [r2, #0]
 800fffa:	68f9      	ldr	r1, [r7, #12]
 800fffc:	430b      	orrs	r3, r1
 800fffe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	695b      	ldr	r3, [r3, #20]
 8010006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	699a      	ldr	r2, [r3, #24]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	430a      	orrs	r2, r1
 8010014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	69db      	ldr	r3, [r3, #28]
 801001a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801001e:	f040 818b 	bne.w	8010338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4ac1      	ldr	r2, [pc, #772]	; (801032c <UART_SetConfig+0x37c>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d005      	beq.n	8010038 <UART_SetConfig+0x88>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4abf      	ldr	r2, [pc, #764]	; (8010330 <UART_SetConfig+0x380>)
 8010032:	4293      	cmp	r3, r2
 8010034:	f040 80bd 	bne.w	80101b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010038:	f7fc fbcc 	bl	800c7d4 <HAL_RCC_GetPCLK2Freq>
 801003c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	461d      	mov	r5, r3
 8010042:	f04f 0600 	mov.w	r6, #0
 8010046:	46a8      	mov	r8, r5
 8010048:	46b1      	mov	r9, r6
 801004a:	eb18 0308 	adds.w	r3, r8, r8
 801004e:	eb49 0409 	adc.w	r4, r9, r9
 8010052:	4698      	mov	r8, r3
 8010054:	46a1      	mov	r9, r4
 8010056:	eb18 0805 	adds.w	r8, r8, r5
 801005a:	eb49 0906 	adc.w	r9, r9, r6
 801005e:	f04f 0100 	mov.w	r1, #0
 8010062:	f04f 0200 	mov.w	r2, #0
 8010066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801006a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801006e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010072:	4688      	mov	r8, r1
 8010074:	4691      	mov	r9, r2
 8010076:	eb18 0005 	adds.w	r0, r8, r5
 801007a:	eb49 0106 	adc.w	r1, r9, r6
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	461d      	mov	r5, r3
 8010084:	f04f 0600 	mov.w	r6, #0
 8010088:	196b      	adds	r3, r5, r5
 801008a:	eb46 0406 	adc.w	r4, r6, r6
 801008e:	461a      	mov	r2, r3
 8010090:	4623      	mov	r3, r4
 8010092:	f7f0 fe11 	bl	8000cb8 <__aeabi_uldivmod>
 8010096:	4603      	mov	r3, r0
 8010098:	460c      	mov	r4, r1
 801009a:	461a      	mov	r2, r3
 801009c:	4ba5      	ldr	r3, [pc, #660]	; (8010334 <UART_SetConfig+0x384>)
 801009e:	fba3 2302 	umull	r2, r3, r3, r2
 80100a2:	095b      	lsrs	r3, r3, #5
 80100a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	461d      	mov	r5, r3
 80100ac:	f04f 0600 	mov.w	r6, #0
 80100b0:	46a9      	mov	r9, r5
 80100b2:	46b2      	mov	sl, r6
 80100b4:	eb19 0309 	adds.w	r3, r9, r9
 80100b8:	eb4a 040a 	adc.w	r4, sl, sl
 80100bc:	4699      	mov	r9, r3
 80100be:	46a2      	mov	sl, r4
 80100c0:	eb19 0905 	adds.w	r9, r9, r5
 80100c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80100c8:	f04f 0100 	mov.w	r1, #0
 80100cc:	f04f 0200 	mov.w	r2, #0
 80100d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100dc:	4689      	mov	r9, r1
 80100de:	4692      	mov	sl, r2
 80100e0:	eb19 0005 	adds.w	r0, r9, r5
 80100e4:	eb4a 0106 	adc.w	r1, sl, r6
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	461d      	mov	r5, r3
 80100ee:	f04f 0600 	mov.w	r6, #0
 80100f2:	196b      	adds	r3, r5, r5
 80100f4:	eb46 0406 	adc.w	r4, r6, r6
 80100f8:	461a      	mov	r2, r3
 80100fa:	4623      	mov	r3, r4
 80100fc:	f7f0 fddc 	bl	8000cb8 <__aeabi_uldivmod>
 8010100:	4603      	mov	r3, r0
 8010102:	460c      	mov	r4, r1
 8010104:	461a      	mov	r2, r3
 8010106:	4b8b      	ldr	r3, [pc, #556]	; (8010334 <UART_SetConfig+0x384>)
 8010108:	fba3 1302 	umull	r1, r3, r3, r2
 801010c:	095b      	lsrs	r3, r3, #5
 801010e:	2164      	movs	r1, #100	; 0x64
 8010110:	fb01 f303 	mul.w	r3, r1, r3
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	00db      	lsls	r3, r3, #3
 8010118:	3332      	adds	r3, #50	; 0x32
 801011a:	4a86      	ldr	r2, [pc, #536]	; (8010334 <UART_SetConfig+0x384>)
 801011c:	fba2 2303 	umull	r2, r3, r2, r3
 8010120:	095b      	lsrs	r3, r3, #5
 8010122:	005b      	lsls	r3, r3, #1
 8010124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010128:	4498      	add	r8, r3
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	461d      	mov	r5, r3
 801012e:	f04f 0600 	mov.w	r6, #0
 8010132:	46a9      	mov	r9, r5
 8010134:	46b2      	mov	sl, r6
 8010136:	eb19 0309 	adds.w	r3, r9, r9
 801013a:	eb4a 040a 	adc.w	r4, sl, sl
 801013e:	4699      	mov	r9, r3
 8010140:	46a2      	mov	sl, r4
 8010142:	eb19 0905 	adds.w	r9, r9, r5
 8010146:	eb4a 0a06 	adc.w	sl, sl, r6
 801014a:	f04f 0100 	mov.w	r1, #0
 801014e:	f04f 0200 	mov.w	r2, #0
 8010152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801015a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801015e:	4689      	mov	r9, r1
 8010160:	4692      	mov	sl, r2
 8010162:	eb19 0005 	adds.w	r0, r9, r5
 8010166:	eb4a 0106 	adc.w	r1, sl, r6
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	461d      	mov	r5, r3
 8010170:	f04f 0600 	mov.w	r6, #0
 8010174:	196b      	adds	r3, r5, r5
 8010176:	eb46 0406 	adc.w	r4, r6, r6
 801017a:	461a      	mov	r2, r3
 801017c:	4623      	mov	r3, r4
 801017e:	f7f0 fd9b 	bl	8000cb8 <__aeabi_uldivmod>
 8010182:	4603      	mov	r3, r0
 8010184:	460c      	mov	r4, r1
 8010186:	461a      	mov	r2, r3
 8010188:	4b6a      	ldr	r3, [pc, #424]	; (8010334 <UART_SetConfig+0x384>)
 801018a:	fba3 1302 	umull	r1, r3, r3, r2
 801018e:	095b      	lsrs	r3, r3, #5
 8010190:	2164      	movs	r1, #100	; 0x64
 8010192:	fb01 f303 	mul.w	r3, r1, r3
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	00db      	lsls	r3, r3, #3
 801019a:	3332      	adds	r3, #50	; 0x32
 801019c:	4a65      	ldr	r2, [pc, #404]	; (8010334 <UART_SetConfig+0x384>)
 801019e:	fba2 2303 	umull	r2, r3, r2, r3
 80101a2:	095b      	lsrs	r3, r3, #5
 80101a4:	f003 0207 	and.w	r2, r3, #7
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4442      	add	r2, r8
 80101ae:	609a      	str	r2, [r3, #8]
 80101b0:	e26f      	b.n	8010692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101b2:	f7fc fafb 	bl	800c7ac <HAL_RCC_GetPCLK1Freq>
 80101b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	461d      	mov	r5, r3
 80101bc:	f04f 0600 	mov.w	r6, #0
 80101c0:	46a8      	mov	r8, r5
 80101c2:	46b1      	mov	r9, r6
 80101c4:	eb18 0308 	adds.w	r3, r8, r8
 80101c8:	eb49 0409 	adc.w	r4, r9, r9
 80101cc:	4698      	mov	r8, r3
 80101ce:	46a1      	mov	r9, r4
 80101d0:	eb18 0805 	adds.w	r8, r8, r5
 80101d4:	eb49 0906 	adc.w	r9, r9, r6
 80101d8:	f04f 0100 	mov.w	r1, #0
 80101dc:	f04f 0200 	mov.w	r2, #0
 80101e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80101e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101ec:	4688      	mov	r8, r1
 80101ee:	4691      	mov	r9, r2
 80101f0:	eb18 0005 	adds.w	r0, r8, r5
 80101f4:	eb49 0106 	adc.w	r1, r9, r6
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	461d      	mov	r5, r3
 80101fe:	f04f 0600 	mov.w	r6, #0
 8010202:	196b      	adds	r3, r5, r5
 8010204:	eb46 0406 	adc.w	r4, r6, r6
 8010208:	461a      	mov	r2, r3
 801020a:	4623      	mov	r3, r4
 801020c:	f7f0 fd54 	bl	8000cb8 <__aeabi_uldivmod>
 8010210:	4603      	mov	r3, r0
 8010212:	460c      	mov	r4, r1
 8010214:	461a      	mov	r2, r3
 8010216:	4b47      	ldr	r3, [pc, #284]	; (8010334 <UART_SetConfig+0x384>)
 8010218:	fba3 2302 	umull	r2, r3, r3, r2
 801021c:	095b      	lsrs	r3, r3, #5
 801021e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	461d      	mov	r5, r3
 8010226:	f04f 0600 	mov.w	r6, #0
 801022a:	46a9      	mov	r9, r5
 801022c:	46b2      	mov	sl, r6
 801022e:	eb19 0309 	adds.w	r3, r9, r9
 8010232:	eb4a 040a 	adc.w	r4, sl, sl
 8010236:	4699      	mov	r9, r3
 8010238:	46a2      	mov	sl, r4
 801023a:	eb19 0905 	adds.w	r9, r9, r5
 801023e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010242:	f04f 0100 	mov.w	r1, #0
 8010246:	f04f 0200 	mov.w	r2, #0
 801024a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801024e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010256:	4689      	mov	r9, r1
 8010258:	4692      	mov	sl, r2
 801025a:	eb19 0005 	adds.w	r0, r9, r5
 801025e:	eb4a 0106 	adc.w	r1, sl, r6
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	461d      	mov	r5, r3
 8010268:	f04f 0600 	mov.w	r6, #0
 801026c:	196b      	adds	r3, r5, r5
 801026e:	eb46 0406 	adc.w	r4, r6, r6
 8010272:	461a      	mov	r2, r3
 8010274:	4623      	mov	r3, r4
 8010276:	f7f0 fd1f 	bl	8000cb8 <__aeabi_uldivmod>
 801027a:	4603      	mov	r3, r0
 801027c:	460c      	mov	r4, r1
 801027e:	461a      	mov	r2, r3
 8010280:	4b2c      	ldr	r3, [pc, #176]	; (8010334 <UART_SetConfig+0x384>)
 8010282:	fba3 1302 	umull	r1, r3, r3, r2
 8010286:	095b      	lsrs	r3, r3, #5
 8010288:	2164      	movs	r1, #100	; 0x64
 801028a:	fb01 f303 	mul.w	r3, r1, r3
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	3332      	adds	r3, #50	; 0x32
 8010294:	4a27      	ldr	r2, [pc, #156]	; (8010334 <UART_SetConfig+0x384>)
 8010296:	fba2 2303 	umull	r2, r3, r2, r3
 801029a:	095b      	lsrs	r3, r3, #5
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80102a2:	4498      	add	r8, r3
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	461d      	mov	r5, r3
 80102a8:	f04f 0600 	mov.w	r6, #0
 80102ac:	46a9      	mov	r9, r5
 80102ae:	46b2      	mov	sl, r6
 80102b0:	eb19 0309 	adds.w	r3, r9, r9
 80102b4:	eb4a 040a 	adc.w	r4, sl, sl
 80102b8:	4699      	mov	r9, r3
 80102ba:	46a2      	mov	sl, r4
 80102bc:	eb19 0905 	adds.w	r9, r9, r5
 80102c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80102c4:	f04f 0100 	mov.w	r1, #0
 80102c8:	f04f 0200 	mov.w	r2, #0
 80102cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102d8:	4689      	mov	r9, r1
 80102da:	4692      	mov	sl, r2
 80102dc:	eb19 0005 	adds.w	r0, r9, r5
 80102e0:	eb4a 0106 	adc.w	r1, sl, r6
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	461d      	mov	r5, r3
 80102ea:	f04f 0600 	mov.w	r6, #0
 80102ee:	196b      	adds	r3, r5, r5
 80102f0:	eb46 0406 	adc.w	r4, r6, r6
 80102f4:	461a      	mov	r2, r3
 80102f6:	4623      	mov	r3, r4
 80102f8:	f7f0 fcde 	bl	8000cb8 <__aeabi_uldivmod>
 80102fc:	4603      	mov	r3, r0
 80102fe:	460c      	mov	r4, r1
 8010300:	461a      	mov	r2, r3
 8010302:	4b0c      	ldr	r3, [pc, #48]	; (8010334 <UART_SetConfig+0x384>)
 8010304:	fba3 1302 	umull	r1, r3, r3, r2
 8010308:	095b      	lsrs	r3, r3, #5
 801030a:	2164      	movs	r1, #100	; 0x64
 801030c:	fb01 f303 	mul.w	r3, r1, r3
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	00db      	lsls	r3, r3, #3
 8010314:	3332      	adds	r3, #50	; 0x32
 8010316:	4a07      	ldr	r2, [pc, #28]	; (8010334 <UART_SetConfig+0x384>)
 8010318:	fba2 2303 	umull	r2, r3, r2, r3
 801031c:	095b      	lsrs	r3, r3, #5
 801031e:	f003 0207 	and.w	r2, r3, #7
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4442      	add	r2, r8
 8010328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801032a:	e1b2      	b.n	8010692 <UART_SetConfig+0x6e2>
 801032c:	40011000 	.word	0x40011000
 8010330:	40011400 	.word	0x40011400
 8010334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4ad7      	ldr	r2, [pc, #860]	; (801069c <UART_SetConfig+0x6ec>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d005      	beq.n	801034e <UART_SetConfig+0x39e>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4ad6      	ldr	r2, [pc, #856]	; (80106a0 <UART_SetConfig+0x6f0>)
 8010348:	4293      	cmp	r3, r2
 801034a:	f040 80d1 	bne.w	80104f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801034e:	f7fc fa41 	bl	800c7d4 <HAL_RCC_GetPCLK2Freq>
 8010352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	469a      	mov	sl, r3
 8010358:	f04f 0b00 	mov.w	fp, #0
 801035c:	46d0      	mov	r8, sl
 801035e:	46d9      	mov	r9, fp
 8010360:	eb18 0308 	adds.w	r3, r8, r8
 8010364:	eb49 0409 	adc.w	r4, r9, r9
 8010368:	4698      	mov	r8, r3
 801036a:	46a1      	mov	r9, r4
 801036c:	eb18 080a 	adds.w	r8, r8, sl
 8010370:	eb49 090b 	adc.w	r9, r9, fp
 8010374:	f04f 0100 	mov.w	r1, #0
 8010378:	f04f 0200 	mov.w	r2, #0
 801037c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010388:	4688      	mov	r8, r1
 801038a:	4691      	mov	r9, r2
 801038c:	eb1a 0508 	adds.w	r5, sl, r8
 8010390:	eb4b 0609 	adc.w	r6, fp, r9
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	4619      	mov	r1, r3
 801039a:	f04f 0200 	mov.w	r2, #0
 801039e:	f04f 0300 	mov.w	r3, #0
 80103a2:	f04f 0400 	mov.w	r4, #0
 80103a6:	0094      	lsls	r4, r2, #2
 80103a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103ac:	008b      	lsls	r3, r1, #2
 80103ae:	461a      	mov	r2, r3
 80103b0:	4623      	mov	r3, r4
 80103b2:	4628      	mov	r0, r5
 80103b4:	4631      	mov	r1, r6
 80103b6:	f7f0 fc7f 	bl	8000cb8 <__aeabi_uldivmod>
 80103ba:	4603      	mov	r3, r0
 80103bc:	460c      	mov	r4, r1
 80103be:	461a      	mov	r2, r3
 80103c0:	4bb8      	ldr	r3, [pc, #736]	; (80106a4 <UART_SetConfig+0x6f4>)
 80103c2:	fba3 2302 	umull	r2, r3, r3, r2
 80103c6:	095b      	lsrs	r3, r3, #5
 80103c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	469b      	mov	fp, r3
 80103d0:	f04f 0c00 	mov.w	ip, #0
 80103d4:	46d9      	mov	r9, fp
 80103d6:	46e2      	mov	sl, ip
 80103d8:	eb19 0309 	adds.w	r3, r9, r9
 80103dc:	eb4a 040a 	adc.w	r4, sl, sl
 80103e0:	4699      	mov	r9, r3
 80103e2:	46a2      	mov	sl, r4
 80103e4:	eb19 090b 	adds.w	r9, r9, fp
 80103e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103ec:	f04f 0100 	mov.w	r1, #0
 80103f0:	f04f 0200 	mov.w	r2, #0
 80103f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010400:	4689      	mov	r9, r1
 8010402:	4692      	mov	sl, r2
 8010404:	eb1b 0509 	adds.w	r5, fp, r9
 8010408:	eb4c 060a 	adc.w	r6, ip, sl
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	4619      	mov	r1, r3
 8010412:	f04f 0200 	mov.w	r2, #0
 8010416:	f04f 0300 	mov.w	r3, #0
 801041a:	f04f 0400 	mov.w	r4, #0
 801041e:	0094      	lsls	r4, r2, #2
 8010420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010424:	008b      	lsls	r3, r1, #2
 8010426:	461a      	mov	r2, r3
 8010428:	4623      	mov	r3, r4
 801042a:	4628      	mov	r0, r5
 801042c:	4631      	mov	r1, r6
 801042e:	f7f0 fc43 	bl	8000cb8 <__aeabi_uldivmod>
 8010432:	4603      	mov	r3, r0
 8010434:	460c      	mov	r4, r1
 8010436:	461a      	mov	r2, r3
 8010438:	4b9a      	ldr	r3, [pc, #616]	; (80106a4 <UART_SetConfig+0x6f4>)
 801043a:	fba3 1302 	umull	r1, r3, r3, r2
 801043e:	095b      	lsrs	r3, r3, #5
 8010440:	2164      	movs	r1, #100	; 0x64
 8010442:	fb01 f303 	mul.w	r3, r1, r3
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	011b      	lsls	r3, r3, #4
 801044a:	3332      	adds	r3, #50	; 0x32
 801044c:	4a95      	ldr	r2, [pc, #596]	; (80106a4 <UART_SetConfig+0x6f4>)
 801044e:	fba2 2303 	umull	r2, r3, r2, r3
 8010452:	095b      	lsrs	r3, r3, #5
 8010454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010458:	4498      	add	r8, r3
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	469b      	mov	fp, r3
 801045e:	f04f 0c00 	mov.w	ip, #0
 8010462:	46d9      	mov	r9, fp
 8010464:	46e2      	mov	sl, ip
 8010466:	eb19 0309 	adds.w	r3, r9, r9
 801046a:	eb4a 040a 	adc.w	r4, sl, sl
 801046e:	4699      	mov	r9, r3
 8010470:	46a2      	mov	sl, r4
 8010472:	eb19 090b 	adds.w	r9, r9, fp
 8010476:	eb4a 0a0c 	adc.w	sl, sl, ip
 801047a:	f04f 0100 	mov.w	r1, #0
 801047e:	f04f 0200 	mov.w	r2, #0
 8010482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801048a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801048e:	4689      	mov	r9, r1
 8010490:	4692      	mov	sl, r2
 8010492:	eb1b 0509 	adds.w	r5, fp, r9
 8010496:	eb4c 060a 	adc.w	r6, ip, sl
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	4619      	mov	r1, r3
 80104a0:	f04f 0200 	mov.w	r2, #0
 80104a4:	f04f 0300 	mov.w	r3, #0
 80104a8:	f04f 0400 	mov.w	r4, #0
 80104ac:	0094      	lsls	r4, r2, #2
 80104ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104b2:	008b      	lsls	r3, r1, #2
 80104b4:	461a      	mov	r2, r3
 80104b6:	4623      	mov	r3, r4
 80104b8:	4628      	mov	r0, r5
 80104ba:	4631      	mov	r1, r6
 80104bc:	f7f0 fbfc 	bl	8000cb8 <__aeabi_uldivmod>
 80104c0:	4603      	mov	r3, r0
 80104c2:	460c      	mov	r4, r1
 80104c4:	461a      	mov	r2, r3
 80104c6:	4b77      	ldr	r3, [pc, #476]	; (80106a4 <UART_SetConfig+0x6f4>)
 80104c8:	fba3 1302 	umull	r1, r3, r3, r2
 80104cc:	095b      	lsrs	r3, r3, #5
 80104ce:	2164      	movs	r1, #100	; 0x64
 80104d0:	fb01 f303 	mul.w	r3, r1, r3
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	011b      	lsls	r3, r3, #4
 80104d8:	3332      	adds	r3, #50	; 0x32
 80104da:	4a72      	ldr	r2, [pc, #456]	; (80106a4 <UART_SetConfig+0x6f4>)
 80104dc:	fba2 2303 	umull	r2, r3, r2, r3
 80104e0:	095b      	lsrs	r3, r3, #5
 80104e2:	f003 020f 	and.w	r2, r3, #15
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4442      	add	r2, r8
 80104ec:	609a      	str	r2, [r3, #8]
 80104ee:	e0d0      	b.n	8010692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80104f0:	f7fc f95c 	bl	800c7ac <HAL_RCC_GetPCLK1Freq>
 80104f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	469a      	mov	sl, r3
 80104fa:	f04f 0b00 	mov.w	fp, #0
 80104fe:	46d0      	mov	r8, sl
 8010500:	46d9      	mov	r9, fp
 8010502:	eb18 0308 	adds.w	r3, r8, r8
 8010506:	eb49 0409 	adc.w	r4, r9, r9
 801050a:	4698      	mov	r8, r3
 801050c:	46a1      	mov	r9, r4
 801050e:	eb18 080a 	adds.w	r8, r8, sl
 8010512:	eb49 090b 	adc.w	r9, r9, fp
 8010516:	f04f 0100 	mov.w	r1, #0
 801051a:	f04f 0200 	mov.w	r2, #0
 801051e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801052a:	4688      	mov	r8, r1
 801052c:	4691      	mov	r9, r2
 801052e:	eb1a 0508 	adds.w	r5, sl, r8
 8010532:	eb4b 0609 	adc.w	r6, fp, r9
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	4619      	mov	r1, r3
 801053c:	f04f 0200 	mov.w	r2, #0
 8010540:	f04f 0300 	mov.w	r3, #0
 8010544:	f04f 0400 	mov.w	r4, #0
 8010548:	0094      	lsls	r4, r2, #2
 801054a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801054e:	008b      	lsls	r3, r1, #2
 8010550:	461a      	mov	r2, r3
 8010552:	4623      	mov	r3, r4
 8010554:	4628      	mov	r0, r5
 8010556:	4631      	mov	r1, r6
 8010558:	f7f0 fbae 	bl	8000cb8 <__aeabi_uldivmod>
 801055c:	4603      	mov	r3, r0
 801055e:	460c      	mov	r4, r1
 8010560:	461a      	mov	r2, r3
 8010562:	4b50      	ldr	r3, [pc, #320]	; (80106a4 <UART_SetConfig+0x6f4>)
 8010564:	fba3 2302 	umull	r2, r3, r3, r2
 8010568:	095b      	lsrs	r3, r3, #5
 801056a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	469b      	mov	fp, r3
 8010572:	f04f 0c00 	mov.w	ip, #0
 8010576:	46d9      	mov	r9, fp
 8010578:	46e2      	mov	sl, ip
 801057a:	eb19 0309 	adds.w	r3, r9, r9
 801057e:	eb4a 040a 	adc.w	r4, sl, sl
 8010582:	4699      	mov	r9, r3
 8010584:	46a2      	mov	sl, r4
 8010586:	eb19 090b 	adds.w	r9, r9, fp
 801058a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801058e:	f04f 0100 	mov.w	r1, #0
 8010592:	f04f 0200 	mov.w	r2, #0
 8010596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801059a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801059e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80105a2:	4689      	mov	r9, r1
 80105a4:	4692      	mov	sl, r2
 80105a6:	eb1b 0509 	adds.w	r5, fp, r9
 80105aa:	eb4c 060a 	adc.w	r6, ip, sl
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	4619      	mov	r1, r3
 80105b4:	f04f 0200 	mov.w	r2, #0
 80105b8:	f04f 0300 	mov.w	r3, #0
 80105bc:	f04f 0400 	mov.w	r4, #0
 80105c0:	0094      	lsls	r4, r2, #2
 80105c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80105c6:	008b      	lsls	r3, r1, #2
 80105c8:	461a      	mov	r2, r3
 80105ca:	4623      	mov	r3, r4
 80105cc:	4628      	mov	r0, r5
 80105ce:	4631      	mov	r1, r6
 80105d0:	f7f0 fb72 	bl	8000cb8 <__aeabi_uldivmod>
 80105d4:	4603      	mov	r3, r0
 80105d6:	460c      	mov	r4, r1
 80105d8:	461a      	mov	r2, r3
 80105da:	4b32      	ldr	r3, [pc, #200]	; (80106a4 <UART_SetConfig+0x6f4>)
 80105dc:	fba3 1302 	umull	r1, r3, r3, r2
 80105e0:	095b      	lsrs	r3, r3, #5
 80105e2:	2164      	movs	r1, #100	; 0x64
 80105e4:	fb01 f303 	mul.w	r3, r1, r3
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	011b      	lsls	r3, r3, #4
 80105ec:	3332      	adds	r3, #50	; 0x32
 80105ee:	4a2d      	ldr	r2, [pc, #180]	; (80106a4 <UART_SetConfig+0x6f4>)
 80105f0:	fba2 2303 	umull	r2, r3, r2, r3
 80105f4:	095b      	lsrs	r3, r3, #5
 80105f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105fa:	4498      	add	r8, r3
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	469b      	mov	fp, r3
 8010600:	f04f 0c00 	mov.w	ip, #0
 8010604:	46d9      	mov	r9, fp
 8010606:	46e2      	mov	sl, ip
 8010608:	eb19 0309 	adds.w	r3, r9, r9
 801060c:	eb4a 040a 	adc.w	r4, sl, sl
 8010610:	4699      	mov	r9, r3
 8010612:	46a2      	mov	sl, r4
 8010614:	eb19 090b 	adds.w	r9, r9, fp
 8010618:	eb4a 0a0c 	adc.w	sl, sl, ip
 801061c:	f04f 0100 	mov.w	r1, #0
 8010620:	f04f 0200 	mov.w	r2, #0
 8010624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801062c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010630:	4689      	mov	r9, r1
 8010632:	4692      	mov	sl, r2
 8010634:	eb1b 0509 	adds.w	r5, fp, r9
 8010638:	eb4c 060a 	adc.w	r6, ip, sl
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	4619      	mov	r1, r3
 8010642:	f04f 0200 	mov.w	r2, #0
 8010646:	f04f 0300 	mov.w	r3, #0
 801064a:	f04f 0400 	mov.w	r4, #0
 801064e:	0094      	lsls	r4, r2, #2
 8010650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010654:	008b      	lsls	r3, r1, #2
 8010656:	461a      	mov	r2, r3
 8010658:	4623      	mov	r3, r4
 801065a:	4628      	mov	r0, r5
 801065c:	4631      	mov	r1, r6
 801065e:	f7f0 fb2b 	bl	8000cb8 <__aeabi_uldivmod>
 8010662:	4603      	mov	r3, r0
 8010664:	460c      	mov	r4, r1
 8010666:	461a      	mov	r2, r3
 8010668:	4b0e      	ldr	r3, [pc, #56]	; (80106a4 <UART_SetConfig+0x6f4>)
 801066a:	fba3 1302 	umull	r1, r3, r3, r2
 801066e:	095b      	lsrs	r3, r3, #5
 8010670:	2164      	movs	r1, #100	; 0x64
 8010672:	fb01 f303 	mul.w	r3, r1, r3
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	011b      	lsls	r3, r3, #4
 801067a:	3332      	adds	r3, #50	; 0x32
 801067c:	4a09      	ldr	r2, [pc, #36]	; (80106a4 <UART_SetConfig+0x6f4>)
 801067e:	fba2 2303 	umull	r2, r3, r2, r3
 8010682:	095b      	lsrs	r3, r3, #5
 8010684:	f003 020f 	and.w	r2, r3, #15
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4442      	add	r2, r8
 801068e:	609a      	str	r2, [r3, #8]
}
 8010690:	e7ff      	b.n	8010692 <UART_SetConfig+0x6e2>
 8010692:	bf00      	nop
 8010694:	3714      	adds	r7, #20
 8010696:	46bd      	mov	sp, r7
 8010698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069c:	40011000 	.word	0x40011000
 80106a0:	40011400 	.word	0x40011400
 80106a4:	51eb851f 	.word	0x51eb851f

080106a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80106a8:	b084      	sub	sp, #16
 80106aa:	b480      	push	{r7}
 80106ac:	b085      	sub	sp, #20
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
 80106b2:	f107 001c 	add.w	r0, r7, #28
 80106b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80106be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80106c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80106c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80106c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80106ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80106cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80106ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80106d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	4313      	orrs	r3, r2
 80106d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80106e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	431a      	orrs	r2, r3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	b004      	add	sp, #16
 80106fc:	4770      	bx	lr

080106fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80106fe:	b480      	push	{r7}
 8010700:	b083      	sub	sp, #12
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801070c:	4618      	mov	r0, r3
 801070e:	370c      	adds	r7, #12
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	370c      	adds	r7, #12
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr

0801073a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801073a:	b580      	push	{r7, lr}
 801073c:	b082      	sub	sp, #8
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2203      	movs	r2, #3
 8010746:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010748:	2002      	movs	r0, #2
 801074a:	f7f9 fbdd 	bl	8009f08 <HAL_Delay>
  
  return HAL_OK;
 801074e:	2300      	movs	r3, #0
}
 8010750:	4618      	mov	r0, r3
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010758:	b480      	push	{r7}
 801075a:	b083      	sub	sp, #12
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f003 0303 	and.w	r3, r3, #3
}
 8010768:	4618      	mov	r0, r3
 801076a:	370c      	adds	r7, #12
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr

08010774 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801077e:	2300      	movs	r3, #0
 8010780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010792:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010798:	431a      	orrs	r2, r3
                       Command->CPSM);
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801079e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	4313      	orrs	r3, r2
 80107a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80107ae:	f023 030f 	bic.w	r3, r3, #15
 80107b2:	68fa      	ldr	r2, [r7, #12]
 80107b4:	431a      	orrs	r2, r3
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3714      	adds	r7, #20
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr

080107c8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	b2db      	uxtb	r3, r3
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	370c      	adds	r7, #12
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr

080107e2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80107e2:	b480      	push	{r7}
 80107e4:	b085      	sub	sp, #20
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
 80107ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	3314      	adds	r3, #20
 80107f0:	461a      	mov	r2, r3
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	4413      	add	r3, r2
 80107f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
}  
 80107fc:	4618      	mov	r0, r3
 80107fe:	3714      	adds	r7, #20
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr

08010808 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010812:	2300      	movs	r3, #0
 8010814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	685a      	ldr	r2, [r3, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801082e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010834:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801083a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	4313      	orrs	r3, r2
 8010840:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010846:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	431a      	orrs	r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010852:	2300      	movs	r3, #0

}
 8010854:	4618      	mov	r0, r3
 8010856:	3714      	adds	r7, #20
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b088      	sub	sp, #32
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801086e:	2310      	movs	r3, #16
 8010870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010872:	2340      	movs	r3, #64	; 0x40
 8010874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010876:	2300      	movs	r3, #0
 8010878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801087e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010880:	f107 0308 	add.w	r3, r7, #8
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7ff ff74 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801088c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010890:	2110      	movs	r1, #16
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 fa40 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801089a:	69fb      	ldr	r3, [r7, #28]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3720      	adds	r7, #32
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b088      	sub	sp, #32
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80108b2:	2311      	movs	r3, #17
 80108b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108b6:	2340      	movs	r3, #64	; 0x40
 80108b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108ba:	2300      	movs	r3, #0
 80108bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108c4:	f107 0308 	add.w	r3, r7, #8
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7ff ff52 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80108d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108d4:	2111      	movs	r1, #17
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fa1e 	bl	8010d18 <SDMMC_GetCmdResp1>
 80108dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108de:	69fb      	ldr	r3, [r7, #28]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3720      	adds	r7, #32
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b088      	sub	sp, #32
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80108f6:	2312      	movs	r3, #18
 80108f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108fa:	2340      	movs	r3, #64	; 0x40
 80108fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108fe:	2300      	movs	r3, #0
 8010900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010906:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010908:	f107 0308 	add.w	r3, r7, #8
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f7ff ff30 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010914:	f241 3288 	movw	r2, #5000	; 0x1388
 8010918:	2112      	movs	r1, #18
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 f9fc 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010922:	69fb      	ldr	r3, [r7, #28]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3720      	adds	r7, #32
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b088      	sub	sp, #32
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801093a:	2318      	movs	r3, #24
 801093c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801093e:	2340      	movs	r3, #64	; 0x40
 8010940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010942:	2300      	movs	r3, #0
 8010944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801094a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801094c:	f107 0308 	add.w	r3, r7, #8
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff ff0e 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010958:	f241 3288 	movw	r2, #5000	; 0x1388
 801095c:	2118      	movs	r1, #24
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f000 f9da 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010966:	69fb      	ldr	r3, [r7, #28]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3720      	adds	r7, #32
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b088      	sub	sp, #32
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801097e:	2319      	movs	r3, #25
 8010980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010982:	2340      	movs	r3, #64	; 0x40
 8010984:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010986:	2300      	movs	r3, #0
 8010988:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801098e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010990:	f107 0308 	add.w	r3, r7, #8
 8010994:	4619      	mov	r1, r3
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff feec 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801099c:	f241 3288 	movw	r2, #5000	; 0x1388
 80109a0:	2119      	movs	r1, #25
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 f9b8 	bl	8010d18 <SDMMC_GetCmdResp1>
 80109a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109aa:	69fb      	ldr	r3, [r7, #28]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3720      	adds	r7, #32
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b088      	sub	sp, #32
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109bc:	2300      	movs	r3, #0
 80109be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109c0:	230c      	movs	r3, #12
 80109c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109c4:	2340      	movs	r3, #64	; 0x40
 80109c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109c8:	2300      	movs	r3, #0
 80109ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109d2:	f107 0308 	add.w	r3, r7, #8
 80109d6:	4619      	mov	r1, r3
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7ff fecb 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80109de:	4a05      	ldr	r2, [pc, #20]	; (80109f4 <SDMMC_CmdStopTransfer+0x40>)
 80109e0:	210c      	movs	r1, #12
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f998 	bl	8010d18 <SDMMC_GetCmdResp1>
 80109e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ea:	69fb      	ldr	r3, [r7, #28]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3720      	adds	r7, #32
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	05f5e100 	.word	0x05f5e100

080109f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b08a      	sub	sp, #40	; 0x28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a08:	2307      	movs	r3, #7
 8010a0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a0c:	2340      	movs	r3, #64	; 0x40
 8010a0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a10:	2300      	movs	r3, #0
 8010a12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a1a:	f107 0310 	add.w	r3, r7, #16
 8010a1e:	4619      	mov	r1, r3
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	f7ff fea7 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a2a:	2107      	movs	r1, #7
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f000 f973 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010a32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3728      	adds	r7, #40	; 0x28
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b088      	sub	sp, #32
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010a46:	2300      	movs	r3, #0
 8010a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a5c:	f107 0308 	add.w	r3, r7, #8
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff fe86 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 f92d 	bl	8010cc8 <SDMMC_GetCmdError>
 8010a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a70:	69fb      	ldr	r3, [r7, #28]
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3720      	adds	r7, #32
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b088      	sub	sp, #32
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010a88:	2308      	movs	r3, #8
 8010a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a8c:	2340      	movs	r3, #64	; 0x40
 8010a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a90:	2300      	movs	r3, #0
 8010a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a9a:	f107 0308 	add.w	r3, r7, #8
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff fe67 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 fb16 	bl	80110d8 <SDMMC_GetCmdResp7>
 8010aac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aae:	69fb      	ldr	r3, [r7, #28]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3720      	adds	r7, #32
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b088      	sub	sp, #32
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ac6:	2337      	movs	r3, #55	; 0x37
 8010ac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aca:	2340      	movs	r3, #64	; 0x40
 8010acc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ad8:	f107 0308 	add.w	r3, r7, #8
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7ff fe48 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ae8:	2137      	movs	r1, #55	; 0x37
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f000 f914 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010af2:	69fb      	ldr	r3, [r7, #28]
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3720      	adds	r7, #32
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b088      	sub	sp, #32
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b12:	2329      	movs	r3, #41	; 0x29
 8010b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b16:	2340      	movs	r3, #64	; 0x40
 8010b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b24:	f107 0308 	add.w	r3, r7, #8
 8010b28:	4619      	mov	r1, r3
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7ff fe22 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 fa23 	bl	8010f7c <SDMMC_GetCmdResp3>
 8010b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b38:	69fb      	ldr	r3, [r7, #28]
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3720      	adds	r7, #32
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b088      	sub	sp, #32
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
 8010b4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b50:	2306      	movs	r3, #6
 8010b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b54:	2340      	movs	r3, #64	; 0x40
 8010b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b62:	f107 0308 	add.w	r3, r7, #8
 8010b66:	4619      	mov	r1, r3
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7ff fe03 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b72:	2106      	movs	r1, #6
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f8cf 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010b7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b7c:	69fb      	ldr	r3, [r7, #28]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3720      	adds	r7, #32
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b088      	sub	sp, #32
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010b92:	2333      	movs	r3, #51	; 0x33
 8010b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b96:	2340      	movs	r3, #64	; 0x40
 8010b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ba4:	f107 0308 	add.w	r3, r7, #8
 8010ba8:	4619      	mov	r1, r3
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff fde2 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bb4:	2133      	movs	r1, #51	; 0x33
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f8ae 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bbe:	69fb      	ldr	r3, [r7, #28]
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3720      	adds	r7, #32
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b088      	sub	sp, #32
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bd4:	2302      	movs	r3, #2
 8010bd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010bd8:	23c0      	movs	r3, #192	; 0xc0
 8010bda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010be4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010be6:	f107 0308 	add.w	r3, r7, #8
 8010bea:	4619      	mov	r1, r3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7ff fdc1 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f97c 	bl	8010ef0 <SDMMC_GetCmdResp2>
 8010bf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bfa:	69fb      	ldr	r3, [r7, #28]
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3720      	adds	r7, #32
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b088      	sub	sp, #32
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c12:	2309      	movs	r3, #9
 8010c14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c16:	23c0      	movs	r3, #192	; 0xc0
 8010c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c24:	f107 0308 	add.w	r3, r7, #8
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f7ff fda2 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 f95d 	bl	8010ef0 <SDMMC_GetCmdResp2>
 8010c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c38:	69fb      	ldr	r3, [r7, #28]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3720      	adds	r7, #32
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b088      	sub	sp, #32
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c50:	2303      	movs	r3, #3
 8010c52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c62:	f107 0308 	add.w	r3, r7, #8
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff fd83 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	2103      	movs	r1, #3
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 f9bc 	bl	8010ff0 <SDMMC_GetCmdResp6>
 8010c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c7a:	69fb      	ldr	r3, [r7, #28]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3720      	adds	r7, #32
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b088      	sub	sp, #32
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010c92:	230d      	movs	r3, #13
 8010c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c96:	2340      	movs	r3, #64	; 0x40
 8010c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ca4:	f107 0308 	add.w	r3, r7, #8
 8010ca8:	4619      	mov	r1, r3
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7ff fd62 	bl	8010774 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cb4:	210d      	movs	r1, #13
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 f82e 	bl	8010d18 <SDMMC_GetCmdResp1>
 8010cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cbe:	69fb      	ldr	r3, [r7, #28]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3720      	adds	r7, #32
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010cc8:	b490      	push	{r4, r7}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cd0:	4b0f      	ldr	r3, [pc, #60]	; (8010d10 <SDMMC_GetCmdError+0x48>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	4a0f      	ldr	r2, [pc, #60]	; (8010d14 <SDMMC_GetCmdError+0x4c>)
 8010cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cda:	0a5b      	lsrs	r3, r3, #9
 8010cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ce0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ce4:	4623      	mov	r3, r4
 8010ce6:	1e5c      	subs	r4, r3, #1
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d102      	bne.n	8010cf2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cf0:	e009      	b.n	8010d06 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d0f2      	beq.n	8010ce4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	22c5      	movs	r2, #197	; 0xc5
 8010d02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010d04:	2300      	movs	r3, #0
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bc90      	pop	{r4, r7}
 8010d0e:	4770      	bx	lr
 8010d10:	20000000 	.word	0x20000000
 8010d14:	10624dd3 	.word	0x10624dd3

08010d18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d18:	b590      	push	{r4, r7, lr}
 8010d1a:	b087      	sub	sp, #28
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	460b      	mov	r3, r1
 8010d22:	607a      	str	r2, [r7, #4]
 8010d24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010d26:	4b6f      	ldr	r3, [pc, #444]	; (8010ee4 <SDMMC_GetCmdResp1+0x1cc>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a6f      	ldr	r2, [pc, #444]	; (8010ee8 <SDMMC_GetCmdResp1+0x1d0>)
 8010d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d30:	0a5b      	lsrs	r3, r3, #9
 8010d32:	687a      	ldr	r2, [r7, #4]
 8010d34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d38:	4623      	mov	r3, r4
 8010d3a:	1e5c      	subs	r4, r3, #1
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d102      	bne.n	8010d46 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d44:	e0c9      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d4a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d0f0      	beq.n	8010d38 <SDMMC_GetCmdResp1+0x20>
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d1eb      	bne.n	8010d38 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d64:	f003 0304 	and.w	r3, r3, #4
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2204      	movs	r2, #4
 8010d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d72:	2304      	movs	r3, #4
 8010d74:	e0b1      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7a:	f003 0301 	and.w	r3, r3, #1
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d004      	beq.n	8010d8c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2201      	movs	r2, #1
 8010d86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e0a6      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	22c5      	movs	r2, #197	; 0xc5
 8010d90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	f7ff fd18 	bl	80107c8 <SDIO_GetCommandResponse>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	7afb      	ldrb	r3, [r7, #11]
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d001      	beq.n	8010da6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010da2:	2301      	movs	r3, #1
 8010da4:	e099      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010da6:	2100      	movs	r1, #0
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f7ff fd1a 	bl	80107e2 <SDIO_GetResponse>
 8010dae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010db0:	693a      	ldr	r2, [r7, #16]
 8010db2:	4b4e      	ldr	r3, [pc, #312]	; (8010eec <SDMMC_GetCmdResp1+0x1d4>)
 8010db4:	4013      	ands	r3, r2
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d101      	bne.n	8010dbe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	e08d      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	da02      	bge.n	8010dca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010dc8:	e087      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d001      	beq.n	8010dd8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	e080      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d001      	beq.n	8010de6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010de2:	2380      	movs	r3, #128	; 0x80
 8010de4:	e079      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010df4:	e071      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e04:	e069      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e14:	e061      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e24:	e059      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e34:	e051      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e44:	e049      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e54:	e041      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e64:	e039      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e74:	e031      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e84:	e029      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010e94:	e021      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010ea4:	e019      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010eb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010eb4:	e011      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d002      	beq.n	8010ec6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ec0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010ec4:	e009      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	f003 0308 	and.w	r3, r3, #8
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ed0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ed4:	e001      	b.n	8010eda <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	371c      	adds	r7, #28
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd90      	pop	{r4, r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20000000 	.word	0x20000000
 8010ee8:	10624dd3 	.word	0x10624dd3
 8010eec:	fdffe008 	.word	0xfdffe008

08010ef0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010ef0:	b490      	push	{r4, r7}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ef8:	4b1e      	ldr	r3, [pc, #120]	; (8010f74 <SDMMC_GetCmdResp2+0x84>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	4a1e      	ldr	r2, [pc, #120]	; (8010f78 <SDMMC_GetCmdResp2+0x88>)
 8010efe:	fba2 2303 	umull	r2, r3, r2, r3
 8010f02:	0a5b      	lsrs	r3, r3, #9
 8010f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f0c:	4623      	mov	r3, r4
 8010f0e:	1e5c      	subs	r4, r3, #1
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d102      	bne.n	8010f1a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f18:	e026      	b.n	8010f68 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d0f0      	beq.n	8010f0c <SDMMC_GetCmdResp2+0x1c>
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1eb      	bne.n	8010f0c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f38:	f003 0304 	and.w	r3, r3, #4
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d004      	beq.n	8010f4a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2204      	movs	r2, #4
 8010f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f46:	2304      	movs	r3, #4
 8010f48:	e00e      	b.n	8010f68 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d004      	beq.n	8010f60 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	e003      	b.n	8010f68 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	22c5      	movs	r2, #197	; 0xc5
 8010f64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3710      	adds	r7, #16
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bc90      	pop	{r4, r7}
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	20000000 	.word	0x20000000
 8010f78:	10624dd3 	.word	0x10624dd3

08010f7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010f7c:	b490      	push	{r4, r7}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f84:	4b18      	ldr	r3, [pc, #96]	; (8010fe8 <SDMMC_GetCmdResp3+0x6c>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4a18      	ldr	r2, [pc, #96]	; (8010fec <SDMMC_GetCmdResp3+0x70>)
 8010f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f8e:	0a5b      	lsrs	r3, r3, #9
 8010f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f98:	4623      	mov	r3, r4
 8010f9a:	1e5c      	subs	r4, r3, #1
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d102      	bne.n	8010fa6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fa4:	e01b      	b.n	8010fde <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010faa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d0f0      	beq.n	8010f98 <SDMMC_GetCmdResp3+0x1c>
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d1eb      	bne.n	8010f98 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fc4:	f003 0304 	and.w	r3, r3, #4
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d004      	beq.n	8010fd6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2204      	movs	r2, #4
 8010fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fd2:	2304      	movs	r3, #4
 8010fd4:	e003      	b.n	8010fde <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	22c5      	movs	r2, #197	; 0xc5
 8010fda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bc90      	pop	{r4, r7}
 8010fe6:	4770      	bx	lr
 8010fe8:	20000000 	.word	0x20000000
 8010fec:	10624dd3 	.word	0x10624dd3

08010ff0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ff0:	b590      	push	{r4, r7, lr}
 8010ff2:	b087      	sub	sp, #28
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	607a      	str	r2, [r7, #4]
 8010ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ffe:	4b34      	ldr	r3, [pc, #208]	; (80110d0 <SDMMC_GetCmdResp6+0xe0>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	4a34      	ldr	r2, [pc, #208]	; (80110d4 <SDMMC_GetCmdResp6+0xe4>)
 8011004:	fba2 2303 	umull	r2, r3, r2, r3
 8011008:	0a5b      	lsrs	r3, r3, #9
 801100a:	f241 3288 	movw	r2, #5000	; 0x1388
 801100e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011012:	4623      	mov	r3, r4
 8011014:	1e5c      	subs	r4, r3, #1
 8011016:	2b00      	cmp	r3, #0
 8011018:	d102      	bne.n	8011020 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801101a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801101e:	e052      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011024:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801102c:	2b00      	cmp	r3, #0
 801102e:	d0f0      	beq.n	8011012 <SDMMC_GetCmdResp6+0x22>
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1eb      	bne.n	8011012 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b00      	cmp	r3, #0
 8011044:	d004      	beq.n	8011050 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2204      	movs	r2, #4
 801104a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801104c:	2304      	movs	r3, #4
 801104e:	e03a      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011054:	f003 0301 	and.w	r3, r3, #1
 8011058:	2b00      	cmp	r3, #0
 801105a:	d004      	beq.n	8011066 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	2201      	movs	r2, #1
 8011060:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011062:	2301      	movs	r3, #1
 8011064:	e02f      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f7ff fbae 	bl	80107c8 <SDIO_GetCommandResponse>
 801106c:	4603      	mov	r3, r0
 801106e:	461a      	mov	r2, r3
 8011070:	7afb      	ldrb	r3, [r7, #11]
 8011072:	4293      	cmp	r3, r2
 8011074:	d001      	beq.n	801107a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011076:	2301      	movs	r3, #1
 8011078:	e025      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	22c5      	movs	r2, #197	; 0xc5
 801107e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011080:	2100      	movs	r1, #0
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f7ff fbad 	bl	80107e2 <SDIO_GetResponse>
 8011088:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	0c1b      	lsrs	r3, r3, #16
 8011098:	b29a      	uxth	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801109e:	2300      	movs	r3, #0
 80110a0:	e011      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d002      	beq.n	80110b2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80110b0:	e009      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d002      	beq.n	80110c2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80110bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110c0:	e001      	b.n	80110c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	371c      	adds	r7, #28
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd90      	pop	{r4, r7, pc}
 80110ce:	bf00      	nop
 80110d0:	20000000 	.word	0x20000000
 80110d4:	10624dd3 	.word	0x10624dd3

080110d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80110d8:	b490      	push	{r4, r7}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110e0:	4b21      	ldr	r3, [pc, #132]	; (8011168 <SDMMC_GetCmdResp7+0x90>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4a21      	ldr	r2, [pc, #132]	; (801116c <SDMMC_GetCmdResp7+0x94>)
 80110e6:	fba2 2303 	umull	r2, r3, r2, r3
 80110ea:	0a5b      	lsrs	r3, r3, #9
 80110ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80110f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80110f4:	4623      	mov	r3, r4
 80110f6:	1e5c      	subs	r4, r3, #1
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d102      	bne.n	8011102 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011100:	e02c      	b.n	801115c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011106:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801110e:	2b00      	cmp	r3, #0
 8011110:	d0f0      	beq.n	80110f4 <SDMMC_GetCmdResp7+0x1c>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011118:	2b00      	cmp	r3, #0
 801111a:	d1eb      	bne.n	80110f4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011120:	f003 0304 	and.w	r3, r3, #4
 8011124:	2b00      	cmp	r3, #0
 8011126:	d004      	beq.n	8011132 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2204      	movs	r2, #4
 801112c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801112e:	2304      	movs	r3, #4
 8011130:	e014      	b.n	801115c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011136:	f003 0301 	and.w	r3, r3, #1
 801113a:	2b00      	cmp	r3, #0
 801113c:	d004      	beq.n	8011148 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2201      	movs	r2, #1
 8011142:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011144:	2301      	movs	r3, #1
 8011146:	e009      	b.n	801115c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801114c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011150:	2b00      	cmp	r3, #0
 8011152:	d002      	beq.n	801115a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2240      	movs	r2, #64	; 0x40
 8011158:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801115a:	2300      	movs	r3, #0
  
}
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bc90      	pop	{r4, r7}
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	20000000 	.word	0x20000000
 801116c:	10624dd3 	.word	0x10624dd3

08011170 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011174:	4904      	ldr	r1, [pc, #16]	; (8011188 <MX_FATFS_Init+0x18>)
 8011176:	4805      	ldr	r0, [pc, #20]	; (801118c <MX_FATFS_Init+0x1c>)
 8011178:	f003 fb9c 	bl	80148b4 <FATFS_LinkDriver>
 801117c:	4603      	mov	r3, r0
 801117e:	461a      	mov	r2, r3
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <MX_FATFS_Init+0x20>)
 8011182:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011184:	bf00      	nop
 8011186:	bd80      	pop	{r7, pc}
 8011188:	20044dc8 	.word	0x20044dc8
 801118c:	0801a218 	.word	0x0801a218
 8011190:	20044dc4 	.word	0x20044dc4

08011194 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801119a:	2300      	movs	r3, #0
 801119c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801119e:	f000 f896 	bl	80112ce <BSP_SD_IsDetected>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d001      	beq.n	80111ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80111a8:	2301      	movs	r3, #1
 80111aa:	e012      	b.n	80111d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80111ac:	480b      	ldr	r0, [pc, #44]	; (80111dc <BSP_SD_Init+0x48>)
 80111ae:	f7fb ffa5 	bl	800d0fc <HAL_SD_Init>
 80111b2:	4603      	mov	r3, r0
 80111b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80111b6:	79fb      	ldrb	r3, [r7, #7]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d109      	bne.n	80111d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80111bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80111c0:	4806      	ldr	r0, [pc, #24]	; (80111dc <BSP_SD_Init+0x48>)
 80111c2:	f7fc fd4f 	bl	800dc64 <HAL_SD_ConfigWideBusOperation>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111cc:	2301      	movs	r3, #1
 80111ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111d0:	79fb      	ldrb	r3, [r7, #7]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	20044bc4 	.word	0x20044bc4

080111e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80111ec:	2300      	movs	r3, #0
 80111ee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	68f9      	ldr	r1, [r7, #12]
 80111f6:	4806      	ldr	r0, [pc, #24]	; (8011210 <BSP_SD_ReadBlocks_DMA+0x30>)
 80111f8:	f7fc f810 	bl	800d21c <HAL_SD_ReadBlocks_DMA>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011206:	7dfb      	ldrb	r3, [r7, #23]
}
 8011208:	4618      	mov	r0, r3
 801120a:	3718      	adds	r7, #24
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20044bc4 	.word	0x20044bc4

08011214 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011220:	2300      	movs	r3, #0
 8011222:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	68ba      	ldr	r2, [r7, #8]
 8011228:	68f9      	ldr	r1, [r7, #12]
 801122a:	4806      	ldr	r0, [pc, #24]	; (8011244 <BSP_SD_WriteBlocks_DMA+0x30>)
 801122c:	f7fc f8de 	bl	800d3ec <HAL_SD_WriteBlocks_DMA>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011236:	2301      	movs	r3, #1
 8011238:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801123a:	7dfb      	ldrb	r3, [r7, #23]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3718      	adds	r7, #24
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	20044bc4 	.word	0x20044bc4

08011248 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801124c:	4805      	ldr	r0, [pc, #20]	; (8011264 <BSP_SD_GetCardState+0x1c>)
 801124e:	f7fc fd85 	bl	800dd5c <HAL_SD_GetCardState>
 8011252:	4603      	mov	r3, r0
 8011254:	2b04      	cmp	r3, #4
 8011256:	bf14      	ite	ne
 8011258:	2301      	movne	r3, #1
 801125a:	2300      	moveq	r3, #0
 801125c:	b2db      	uxtb	r3, r3
}
 801125e:	4618      	mov	r0, r3
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	20044bc4 	.word	0x20044bc4

08011268 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011270:	6879      	ldr	r1, [r7, #4]
 8011272:	4803      	ldr	r0, [pc, #12]	; (8011280 <BSP_SD_GetCardInfo+0x18>)
 8011274:	f7fc fcca 	bl	800dc0c <HAL_SD_GetCardInfo>
}
 8011278:	bf00      	nop
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	20044bc4 	.word	0x20044bc4

08011284 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801128c:	f000 f818 	bl	80112c0 <BSP_SD_AbortCallback>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80112a0:	f000 f9a8 	bl	80115f4 <BSP_SD_WriteCpltCallback>
}
 80112a4:	bf00      	nop
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80112b4:	f000 f9aa 	bl	801160c <BSP_SD_ReadCpltCallback>
}
 80112b8:	bf00      	nop
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80112c0:	b480      	push	{r7}
 80112c2:	af00      	add	r7, sp, #0

}
 80112c4:	bf00      	nop
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr

080112ce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112ce:	b580      	push	{r7, lr}
 80112d0:	b082      	sub	sp, #8
 80112d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112d4:	2301      	movs	r3, #1
 80112d6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80112d8:	f000 f80c 	bl	80112f4 <BSP_PlatformIsDetected>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d101      	bne.n	80112e6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80112e2:	2300      	movs	r3, #0
 80112e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80112e6:	79fb      	ldrb	r3, [r7, #7]
 80112e8:	b2db      	uxtb	r3, r3
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
	...

080112f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80112fa:	2301      	movs	r3, #1
 80112fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80112fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011302:	4806      	ldr	r0, [pc, #24]	; (801131c <BSP_PlatformIsDetected+0x28>)
 8011304:	f7fa f87e 	bl	800b404 <HAL_GPIO_ReadPin>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801130e:	2300      	movs	r3, #0
 8011310:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011312:	79fb      	ldrb	r3, [r7, #7]
}
 8011314:	4618      	mov	r0, r3
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	40020000 	.word	0x40020000

08011320 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011328:	f7f8 fde2 	bl	8009ef0 <HAL_GetTick>
 801132c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801132e:	e006      	b.n	801133e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011330:	f7ff ff8a 	bl	8011248 <BSP_SD_GetCardState>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d101      	bne.n	801133e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801133a:	2300      	movs	r3, #0
 801133c:	e009      	b.n	8011352 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801133e:	f7f8 fdd7 	bl	8009ef0 <HAL_GetTick>
 8011342:	4602      	mov	r2, r0
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	1ad3      	subs	r3, r2, r3
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	429a      	cmp	r2, r3
 801134c:	d8f0      	bhi.n	8011330 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801134e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011352:	4618      	mov	r0, r3
 8011354:	3710      	adds	r7, #16
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
	...

0801135c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	4603      	mov	r3, r0
 8011364:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011366:	4b0b      	ldr	r3, [pc, #44]	; (8011394 <SD_CheckStatus+0x38>)
 8011368:	2201      	movs	r2, #1
 801136a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801136c:	f7ff ff6c 	bl	8011248 <BSP_SD_GetCardState>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d107      	bne.n	8011386 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011376:	4b07      	ldr	r3, [pc, #28]	; (8011394 <SD_CheckStatus+0x38>)
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	b2db      	uxtb	r3, r3
 801137c:	f023 0301 	bic.w	r3, r3, #1
 8011380:	b2da      	uxtb	r2, r3
 8011382:	4b04      	ldr	r3, [pc, #16]	; (8011394 <SD_CheckStatus+0x38>)
 8011384:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011386:	4b03      	ldr	r3, [pc, #12]	; (8011394 <SD_CheckStatus+0x38>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	b2db      	uxtb	r3, r3
}
 801138c:	4618      	mov	r0, r3
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	20000009 	.word	0x20000009

08011398 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	4603      	mov	r3, r0
 80113a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80113a2:	f7ff fef7 	bl	8011194 <BSP_SD_Init>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d107      	bne.n	80113bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80113ac:	79fb      	ldrb	r3, [r7, #7]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff ffd4 	bl	801135c <SD_CheckStatus>
 80113b4:	4603      	mov	r3, r0
 80113b6:	461a      	mov	r2, r3
 80113b8:	4b04      	ldr	r3, [pc, #16]	; (80113cc <SD_initialize+0x34>)
 80113ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80113bc:	4b03      	ldr	r3, [pc, #12]	; (80113cc <SD_initialize+0x34>)
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	b2db      	uxtb	r3, r3
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	20000009 	.word	0x20000009

080113d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80113da:	79fb      	ldrb	r3, [r7, #7]
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff ffbd 	bl	801135c <SD_CheckStatus>
 80113e2:	4603      	mov	r3, r0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b086      	sub	sp, #24
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60b9      	str	r1, [r7, #8]
 80113f4:	607a      	str	r2, [r7, #4]
 80113f6:	603b      	str	r3, [r7, #0]
 80113f8:	4603      	mov	r3, r0
 80113fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113fc:	2301      	movs	r3, #1
 80113fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011400:	f247 5030 	movw	r0, #30000	; 0x7530
 8011404:	f7ff ff8c 	bl	8011320 <SD_CheckStatusWithTimeout>
 8011408:	4603      	mov	r3, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	da01      	bge.n	8011412 <SD_read+0x26>
  {
    return res;
 801140e:	7dfb      	ldrb	r3, [r7, #23]
 8011410:	e03b      	b.n	801148a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011412:	683a      	ldr	r2, [r7, #0]
 8011414:	6879      	ldr	r1, [r7, #4]
 8011416:	68b8      	ldr	r0, [r7, #8]
 8011418:	f7ff fee2 	bl	80111e0 <BSP_SD_ReadBlocks_DMA>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d132      	bne.n	8011488 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011422:	4b1c      	ldr	r3, [pc, #112]	; (8011494 <SD_read+0xa8>)
 8011424:	2200      	movs	r2, #0
 8011426:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011428:	f7f8 fd62 	bl	8009ef0 <HAL_GetTick>
 801142c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801142e:	bf00      	nop
 8011430:	4b18      	ldr	r3, [pc, #96]	; (8011494 <SD_read+0xa8>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d108      	bne.n	801144a <SD_read+0x5e>
 8011438:	f7f8 fd5a 	bl	8009ef0 <HAL_GetTick>
 801143c:	4602      	mov	r2, r0
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	f247 522f 	movw	r2, #29999	; 0x752f
 8011446:	4293      	cmp	r3, r2
 8011448:	d9f2      	bls.n	8011430 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801144a:	4b12      	ldr	r3, [pc, #72]	; (8011494 <SD_read+0xa8>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d102      	bne.n	8011458 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011452:	2301      	movs	r3, #1
 8011454:	75fb      	strb	r3, [r7, #23]
 8011456:	e017      	b.n	8011488 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011458:	4b0e      	ldr	r3, [pc, #56]	; (8011494 <SD_read+0xa8>)
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801145e:	f7f8 fd47 	bl	8009ef0 <HAL_GetTick>
 8011462:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011464:	e007      	b.n	8011476 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011466:	f7ff feef 	bl	8011248 <BSP_SD_GetCardState>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d102      	bne.n	8011476 <SD_read+0x8a>
          {
            res = RES_OK;
 8011470:	2300      	movs	r3, #0
 8011472:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011474:	e008      	b.n	8011488 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011476:	f7f8 fd3b 	bl	8009ef0 <HAL_GetTick>
 801147a:	4602      	mov	r2, r0
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	f247 522f 	movw	r2, #29999	; 0x752f
 8011484:	4293      	cmp	r3, r2
 8011486:	d9ee      	bls.n	8011466 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011488:	7dfb      	ldrb	r3, [r7, #23]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	20042460 	.word	0x20042460

08011498 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60b9      	str	r1, [r7, #8]
 80114a0:	607a      	str	r2, [r7, #4]
 80114a2:	603b      	str	r3, [r7, #0]
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114a8:	2301      	movs	r3, #1
 80114aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80114ac:	4b24      	ldr	r3, [pc, #144]	; (8011540 <SD_write+0xa8>)
 80114ae:	2200      	movs	r2, #0
 80114b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80114b6:	f7ff ff33 	bl	8011320 <SD_CheckStatusWithTimeout>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	da01      	bge.n	80114c4 <SD_write+0x2c>
  {
    return res;
 80114c0:	7dfb      	ldrb	r3, [r7, #23]
 80114c2:	e038      	b.n	8011536 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	6879      	ldr	r1, [r7, #4]
 80114c8:	68b8      	ldr	r0, [r7, #8]
 80114ca:	f7ff fea3 	bl	8011214 <BSP_SD_WriteBlocks_DMA>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d12f      	bne.n	8011534 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80114d4:	f7f8 fd0c 	bl	8009ef0 <HAL_GetTick>
 80114d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114da:	bf00      	nop
 80114dc:	4b18      	ldr	r3, [pc, #96]	; (8011540 <SD_write+0xa8>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d108      	bne.n	80114f6 <SD_write+0x5e>
 80114e4:	f7f8 fd04 	bl	8009ef0 <HAL_GetTick>
 80114e8:	4602      	mov	r2, r0
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d9f2      	bls.n	80114dc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80114f6:	4b12      	ldr	r3, [pc, #72]	; (8011540 <SD_write+0xa8>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d102      	bne.n	8011504 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80114fe:	2301      	movs	r3, #1
 8011500:	75fb      	strb	r3, [r7, #23]
 8011502:	e017      	b.n	8011534 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011504:	4b0e      	ldr	r3, [pc, #56]	; (8011540 <SD_write+0xa8>)
 8011506:	2200      	movs	r2, #0
 8011508:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801150a:	f7f8 fcf1 	bl	8009ef0 <HAL_GetTick>
 801150e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011510:	e007      	b.n	8011522 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011512:	f7ff fe99 	bl	8011248 <BSP_SD_GetCardState>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d102      	bne.n	8011522 <SD_write+0x8a>
          {
            res = RES_OK;
 801151c:	2300      	movs	r3, #0
 801151e:	75fb      	strb	r3, [r7, #23]
            break;
 8011520:	e008      	b.n	8011534 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011522:	f7f8 fce5 	bl	8009ef0 <HAL_GetTick>
 8011526:	4602      	mov	r2, r0
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011530:	4293      	cmp	r3, r2
 8011532:	d9ee      	bls.n	8011512 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011534:	7dfb      	ldrb	r3, [r7, #23]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3718      	adds	r7, #24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	2004245c 	.word	0x2004245c

08011544 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08c      	sub	sp, #48	; 0x30
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	603a      	str	r2, [r7, #0]
 801154e:	71fb      	strb	r3, [r7, #7]
 8011550:	460b      	mov	r3, r1
 8011552:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011554:	2301      	movs	r3, #1
 8011556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801155a:	4b25      	ldr	r3, [pc, #148]	; (80115f0 <SD_ioctl+0xac>)
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	b2db      	uxtb	r3, r3
 8011560:	f003 0301 	and.w	r3, r3, #1
 8011564:	2b00      	cmp	r3, #0
 8011566:	d001      	beq.n	801156c <SD_ioctl+0x28>
 8011568:	2303      	movs	r3, #3
 801156a:	e03c      	b.n	80115e6 <SD_ioctl+0xa2>

  switch (cmd)
 801156c:	79bb      	ldrb	r3, [r7, #6]
 801156e:	2b03      	cmp	r3, #3
 8011570:	d834      	bhi.n	80115dc <SD_ioctl+0x98>
 8011572:	a201      	add	r2, pc, #4	; (adr r2, 8011578 <SD_ioctl+0x34>)
 8011574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011578:	08011589 	.word	0x08011589
 801157c:	08011591 	.word	0x08011591
 8011580:	080115a9 	.word	0x080115a9
 8011584:	080115c3 	.word	0x080115c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011588:	2300      	movs	r3, #0
 801158a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801158e:	e028      	b.n	80115e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011590:	f107 030c 	add.w	r3, r7, #12
 8011594:	4618      	mov	r0, r3
 8011596:	f7ff fe67 	bl	8011268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115a0:	2300      	movs	r3, #0
 80115a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115a6:	e01c      	b.n	80115e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115a8:	f107 030c 	add.w	r3, r7, #12
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff fe5b 	bl	8011268 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80115ba:	2300      	movs	r3, #0
 80115bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115c0:	e00f      	b.n	80115e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115c2:	f107 030c 	add.w	r3, r7, #12
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7ff fe4e 	bl	8011268 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	0a5a      	lsrs	r2, r3, #9
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115da:	e002      	b.n	80115e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80115dc:	2304      	movs	r3, #4
 80115de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80115e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3730      	adds	r7, #48	; 0x30
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	20000009 	.word	0x20000009

080115f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80115f4:	b480      	push	{r7}
 80115f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80115f8:	4b03      	ldr	r3, [pc, #12]	; (8011608 <BSP_SD_WriteCpltCallback+0x14>)
 80115fa:	2201      	movs	r2, #1
 80115fc:	601a      	str	r2, [r3, #0]
}
 80115fe:	bf00      	nop
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	2004245c 	.word	0x2004245c

0801160c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801160c:	b480      	push	{r7}
 801160e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011610:	4b03      	ldr	r3, [pc, #12]	; (8011620 <BSP_SD_ReadCpltCallback+0x14>)
 8011612:	2201      	movs	r2, #1
 8011614:	601a      	str	r2, [r3, #0]
}
 8011616:	bf00      	nop
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr
 8011620:	20042460 	.word	0x20042460

08011624 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	4603      	mov	r3, r0
 801162c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801162e:	79fb      	ldrb	r3, [r7, #7]
 8011630:	4a08      	ldr	r2, [pc, #32]	; (8011654 <disk_status+0x30>)
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	4413      	add	r3, r2
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	79fa      	ldrb	r2, [r7, #7]
 801163c:	4905      	ldr	r1, [pc, #20]	; (8011654 <disk_status+0x30>)
 801163e:	440a      	add	r2, r1
 8011640:	7a12      	ldrb	r2, [r2, #8]
 8011642:	4610      	mov	r0, r2
 8011644:	4798      	blx	r3
 8011646:	4603      	mov	r3, r0
 8011648:	73fb      	strb	r3, [r7, #15]
  return stat;
 801164a:	7bfb      	ldrb	r3, [r7, #15]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}
 8011654:	2004248c 	.word	0x2004248c

08011658 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	4603      	mov	r3, r0
 8011660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011662:	2300      	movs	r3, #0
 8011664:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011666:	79fb      	ldrb	r3, [r7, #7]
 8011668:	4a0d      	ldr	r2, [pc, #52]	; (80116a0 <disk_initialize+0x48>)
 801166a:	5cd3      	ldrb	r3, [r2, r3]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d111      	bne.n	8011694 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011670:	79fb      	ldrb	r3, [r7, #7]
 8011672:	4a0b      	ldr	r2, [pc, #44]	; (80116a0 <disk_initialize+0x48>)
 8011674:	2101      	movs	r1, #1
 8011676:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011678:	79fb      	ldrb	r3, [r7, #7]
 801167a:	4a09      	ldr	r2, [pc, #36]	; (80116a0 <disk_initialize+0x48>)
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	4413      	add	r3, r2
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	79fa      	ldrb	r2, [r7, #7]
 8011686:	4906      	ldr	r1, [pc, #24]	; (80116a0 <disk_initialize+0x48>)
 8011688:	440a      	add	r2, r1
 801168a:	7a12      	ldrb	r2, [r2, #8]
 801168c:	4610      	mov	r0, r2
 801168e:	4798      	blx	r3
 8011690:	4603      	mov	r3, r0
 8011692:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011694:	7bfb      	ldrb	r3, [r7, #15]
}
 8011696:	4618      	mov	r0, r3
 8011698:	3710      	adds	r7, #16
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	2004248c 	.word	0x2004248c

080116a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80116a4:	b590      	push	{r4, r7, lr}
 80116a6:	b087      	sub	sp, #28
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60b9      	str	r1, [r7, #8]
 80116ac:	607a      	str	r2, [r7, #4]
 80116ae:	603b      	str	r3, [r7, #0]
 80116b0:	4603      	mov	r3, r0
 80116b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
 80116b6:	4a0a      	ldr	r2, [pc, #40]	; (80116e0 <disk_read+0x3c>)
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	4413      	add	r3, r2
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	689c      	ldr	r4, [r3, #8]
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
 80116c2:	4a07      	ldr	r2, [pc, #28]	; (80116e0 <disk_read+0x3c>)
 80116c4:	4413      	add	r3, r2
 80116c6:	7a18      	ldrb	r0, [r3, #8]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	68b9      	ldr	r1, [r7, #8]
 80116ce:	47a0      	blx	r4
 80116d0:	4603      	mov	r3, r0
 80116d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80116d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	371c      	adds	r7, #28
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd90      	pop	{r4, r7, pc}
 80116de:	bf00      	nop
 80116e0:	2004248c 	.word	0x2004248c

080116e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80116e4:	b590      	push	{r4, r7, lr}
 80116e6:	b087      	sub	sp, #28
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60b9      	str	r1, [r7, #8]
 80116ec:	607a      	str	r2, [r7, #4]
 80116ee:	603b      	str	r3, [r7, #0]
 80116f0:	4603      	mov	r3, r0
 80116f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
 80116f6:	4a0a      	ldr	r2, [pc, #40]	; (8011720 <disk_write+0x3c>)
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4413      	add	r3, r2
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	68dc      	ldr	r4, [r3, #12]
 8011700:	7bfb      	ldrb	r3, [r7, #15]
 8011702:	4a07      	ldr	r2, [pc, #28]	; (8011720 <disk_write+0x3c>)
 8011704:	4413      	add	r3, r2
 8011706:	7a18      	ldrb	r0, [r3, #8]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	68b9      	ldr	r1, [r7, #8]
 801170e:	47a0      	blx	r4
 8011710:	4603      	mov	r3, r0
 8011712:	75fb      	strb	r3, [r7, #23]
  return res;
 8011714:	7dfb      	ldrb	r3, [r7, #23]
}
 8011716:	4618      	mov	r0, r3
 8011718:	371c      	adds	r7, #28
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}
 801171e:	bf00      	nop
 8011720:	2004248c 	.word	0x2004248c

08011724 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	4603      	mov	r3, r0
 801172c:	603a      	str	r2, [r7, #0]
 801172e:	71fb      	strb	r3, [r7, #7]
 8011730:	460b      	mov	r3, r1
 8011732:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011734:	79fb      	ldrb	r3, [r7, #7]
 8011736:	4a09      	ldr	r2, [pc, #36]	; (801175c <disk_ioctl+0x38>)
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	691b      	ldr	r3, [r3, #16]
 8011740:	79fa      	ldrb	r2, [r7, #7]
 8011742:	4906      	ldr	r1, [pc, #24]	; (801175c <disk_ioctl+0x38>)
 8011744:	440a      	add	r2, r1
 8011746:	7a10      	ldrb	r0, [r2, #8]
 8011748:	79b9      	ldrb	r1, [r7, #6]
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	4798      	blx	r3
 801174e:	4603      	mov	r3, r0
 8011750:	73fb      	strb	r3, [r7, #15]
  return res;
 8011752:	7bfb      	ldrb	r3, [r7, #15]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	2004248c 	.word	0x2004248c

08011760 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011760:	b480      	push	{r7}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	3301      	adds	r3, #1
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011770:	89fb      	ldrh	r3, [r7, #14]
 8011772:	021b      	lsls	r3, r3, #8
 8011774:	b21a      	sxth	r2, r3
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	b21b      	sxth	r3, r3
 801177c:	4313      	orrs	r3, r2
 801177e:	b21b      	sxth	r3, r3
 8011780:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011782:	89fb      	ldrh	r3, [r7, #14]
}
 8011784:	4618      	mov	r0, r3
 8011786:	3714      	adds	r7, #20
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	3303      	adds	r3, #3
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	021b      	lsls	r3, r3, #8
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	3202      	adds	r2, #2
 80117a8:	7812      	ldrb	r2, [r2, #0]
 80117aa:	4313      	orrs	r3, r2
 80117ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	021b      	lsls	r3, r3, #8
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	3201      	adds	r2, #1
 80117b6:	7812      	ldrb	r2, [r2, #0]
 80117b8:	4313      	orrs	r3, r2
 80117ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	021b      	lsls	r3, r3, #8
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	7812      	ldrb	r2, [r2, #0]
 80117c4:	4313      	orrs	r3, r2
 80117c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80117c8:	68fb      	ldr	r3, [r7, #12]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3714      	adds	r7, #20
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80117d6:	b480      	push	{r7}
 80117d8:	b083      	sub	sp, #12
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
 80117de:	460b      	mov	r3, r1
 80117e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	1c5a      	adds	r2, r3, #1
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	887a      	ldrh	r2, [r7, #2]
 80117ea:	b2d2      	uxtb	r2, r2
 80117ec:	701a      	strb	r2, [r3, #0]
 80117ee:	887b      	ldrh	r3, [r7, #2]
 80117f0:	0a1b      	lsrs	r3, r3, #8
 80117f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	1c5a      	adds	r2, r3, #1
 80117f8:	607a      	str	r2, [r7, #4]
 80117fa:	887a      	ldrh	r2, [r7, #2]
 80117fc:	b2d2      	uxtb	r2, r2
 80117fe:	701a      	strb	r2, [r3, #0]
}
 8011800:	bf00      	nop
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr

0801180c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	1c5a      	adds	r2, r3, #1
 801181a:	607a      	str	r2, [r7, #4]
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	b2d2      	uxtb	r2, r2
 8011820:	701a      	strb	r2, [r3, #0]
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	0a1b      	lsrs	r3, r3, #8
 8011826:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	1c5a      	adds	r2, r3, #1
 801182c:	607a      	str	r2, [r7, #4]
 801182e:	683a      	ldr	r2, [r7, #0]
 8011830:	b2d2      	uxtb	r2, r2
 8011832:	701a      	strb	r2, [r3, #0]
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	0a1b      	lsrs	r3, r3, #8
 8011838:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	1c5a      	adds	r2, r3, #1
 801183e:	607a      	str	r2, [r7, #4]
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	b2d2      	uxtb	r2, r2
 8011844:	701a      	strb	r2, [r3, #0]
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	0a1b      	lsrs	r3, r3, #8
 801184a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	607a      	str	r2, [r7, #4]
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	b2d2      	uxtb	r2, r2
 8011856:	701a      	strb	r2, [r3, #0]
}
 8011858:	bf00      	nop
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr

08011864 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011864:	b480      	push	{r7}
 8011866:	b087      	sub	sp, #28
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00d      	beq.n	801189a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801187e:	693a      	ldr	r2, [r7, #16]
 8011880:	1c53      	adds	r3, r2, #1
 8011882:	613b      	str	r3, [r7, #16]
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	1c59      	adds	r1, r3, #1
 8011888:	6179      	str	r1, [r7, #20]
 801188a:	7812      	ldrb	r2, [r2, #0]
 801188c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	3b01      	subs	r3, #1
 8011892:	607b      	str	r3, [r7, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1f1      	bne.n	801187e <mem_cpy+0x1a>
	}
}
 801189a:	bf00      	nop
 801189c:	371c      	adds	r7, #28
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr

080118a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80118a6:	b480      	push	{r7}
 80118a8:	b087      	sub	sp, #28
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	60f8      	str	r0, [r7, #12]
 80118ae:	60b9      	str	r1, [r7, #8]
 80118b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	1c5a      	adds	r2, r3, #1
 80118ba:	617a      	str	r2, [r7, #20]
 80118bc:	68ba      	ldr	r2, [r7, #8]
 80118be:	b2d2      	uxtb	r2, r2
 80118c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	3b01      	subs	r3, #1
 80118c6:	607b      	str	r3, [r7, #4]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d1f3      	bne.n	80118b6 <mem_set+0x10>
}
 80118ce:	bf00      	nop
 80118d0:	371c      	adds	r7, #28
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr

080118da <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80118da:	b480      	push	{r7}
 80118dc:	b089      	sub	sp, #36	; 0x24
 80118de:	af00      	add	r7, sp, #0
 80118e0:	60f8      	str	r0, [r7, #12]
 80118e2:	60b9      	str	r1, [r7, #8]
 80118e4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	61fb      	str	r3, [r7, #28]
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	1c5a      	adds	r2, r3, #1
 80118f6:	61fa      	str	r2, [r7, #28]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	4619      	mov	r1, r3
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	1c5a      	adds	r2, r3, #1
 8011900:	61ba      	str	r2, [r7, #24]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	1acb      	subs	r3, r1, r3
 8011906:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	3b01      	subs	r3, #1
 801190c:	607b      	str	r3, [r7, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <mem_cmp+0x40>
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d0eb      	beq.n	80118f2 <mem_cmp+0x18>

	return r;
 801191a:	697b      	ldr	r3, [r7, #20]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3724      	adds	r7, #36	; 0x24
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr

08011928 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011932:	e002      	b.n	801193a <chk_chr+0x12>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	3301      	adds	r3, #1
 8011938:	607b      	str	r3, [r7, #4]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d005      	beq.n	801194e <chk_chr+0x26>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	461a      	mov	r2, r3
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	4293      	cmp	r3, r2
 801194c:	d1f2      	bne.n	8011934 <chk_chr+0xc>
	return *str;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	781b      	ldrb	r3, [r3, #0]
}
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
	...

08011960 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011960:	b480      	push	{r7}
 8011962:	b085      	sub	sp, #20
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801196a:	2300      	movs	r3, #0
 801196c:	60bb      	str	r3, [r7, #8]
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	60fb      	str	r3, [r7, #12]
 8011972:	e029      	b.n	80119c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011974:	4a27      	ldr	r2, [pc, #156]	; (8011a14 <chk_lock+0xb4>)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	4413      	add	r3, r2
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d01d      	beq.n	80119be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011982:	4a24      	ldr	r2, [pc, #144]	; (8011a14 <chk_lock+0xb4>)
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	011b      	lsls	r3, r3, #4
 8011988:	4413      	add	r3, r2
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	429a      	cmp	r2, r3
 8011992:	d116      	bne.n	80119c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011994:	4a1f      	ldr	r2, [pc, #124]	; (8011a14 <chk_lock+0xb4>)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	011b      	lsls	r3, r3, #4
 801199a:	4413      	add	r3, r2
 801199c:	3304      	adds	r3, #4
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d10c      	bne.n	80119c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119a8:	4a1a      	ldr	r2, [pc, #104]	; (8011a14 <chk_lock+0xb4>)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	011b      	lsls	r3, r3, #4
 80119ae:	4413      	add	r3, r2
 80119b0:	3308      	adds	r3, #8
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d102      	bne.n	80119c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119bc:	e007      	b.n	80119ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80119be:	2301      	movs	r3, #1
 80119c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	3301      	adds	r3, #1
 80119c6:	60fb      	str	r3, [r7, #12]
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d9d2      	bls.n	8011974 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2b02      	cmp	r3, #2
 80119d2:	d109      	bne.n	80119e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d102      	bne.n	80119e0 <chk_lock+0x80>
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	2b02      	cmp	r3, #2
 80119de:	d101      	bne.n	80119e4 <chk_lock+0x84>
 80119e0:	2300      	movs	r3, #0
 80119e2:	e010      	b.n	8011a06 <chk_lock+0xa6>
 80119e4:	2312      	movs	r3, #18
 80119e6:	e00e      	b.n	8011a06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d108      	bne.n	8011a00 <chk_lock+0xa0>
 80119ee:	4a09      	ldr	r2, [pc, #36]	; (8011a14 <chk_lock+0xb4>)
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	011b      	lsls	r3, r3, #4
 80119f4:	4413      	add	r3, r2
 80119f6:	330c      	adds	r3, #12
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119fe:	d101      	bne.n	8011a04 <chk_lock+0xa4>
 8011a00:	2310      	movs	r3, #16
 8011a02:	e000      	b.n	8011a06 <chk_lock+0xa6>
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	2004246c 	.word	0x2004246c

08011a18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	607b      	str	r3, [r7, #4]
 8011a22:	e002      	b.n	8011a2a <enq_lock+0x12>
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	3301      	adds	r3, #1
 8011a28:	607b      	str	r3, [r7, #4]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d806      	bhi.n	8011a3e <enq_lock+0x26>
 8011a30:	4a09      	ldr	r2, [pc, #36]	; (8011a58 <enq_lock+0x40>)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	011b      	lsls	r3, r3, #4
 8011a36:	4413      	add	r3, r2
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1f2      	bne.n	8011a24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	bf14      	ite	ne
 8011a44:	2301      	movne	r3, #1
 8011a46:	2300      	moveq	r3, #0
 8011a48:	b2db      	uxtb	r3, r3
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	370c      	adds	r7, #12
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	2004246c 	.word	0x2004246c

08011a5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b085      	sub	sp, #20
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a66:	2300      	movs	r3, #0
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	e01f      	b.n	8011aac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a6c:	4a41      	ldr	r2, [pc, #260]	; (8011b74 <inc_lock+0x118>)
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	011b      	lsls	r3, r3, #4
 8011a72:	4413      	add	r3, r2
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d113      	bne.n	8011aa6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011a7e:	4a3d      	ldr	r2, [pc, #244]	; (8011b74 <inc_lock+0x118>)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	011b      	lsls	r3, r3, #4
 8011a84:	4413      	add	r3, r2
 8011a86:	3304      	adds	r3, #4
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d109      	bne.n	8011aa6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011a92:	4a38      	ldr	r2, [pc, #224]	; (8011b74 <inc_lock+0x118>)
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	011b      	lsls	r3, r3, #4
 8011a98:	4413      	add	r3, r2
 8011a9a:	3308      	adds	r3, #8
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d006      	beq.n	8011ab4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	60fb      	str	r3, [r7, #12]
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d9dc      	bls.n	8011a6c <inc_lock+0x10>
 8011ab2:	e000      	b.n	8011ab6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011ab4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d132      	bne.n	8011b22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011abc:	2300      	movs	r3, #0
 8011abe:	60fb      	str	r3, [r7, #12]
 8011ac0:	e002      	b.n	8011ac8 <inc_lock+0x6c>
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	60fb      	str	r3, [r7, #12]
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d806      	bhi.n	8011adc <inc_lock+0x80>
 8011ace:	4a29      	ldr	r2, [pc, #164]	; (8011b74 <inc_lock+0x118>)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	011b      	lsls	r3, r3, #4
 8011ad4:	4413      	add	r3, r2
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1f2      	bne.n	8011ac2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	d101      	bne.n	8011ae6 <inc_lock+0x8a>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	e040      	b.n	8011b68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681a      	ldr	r2, [r3, #0]
 8011aea:	4922      	ldr	r1, [pc, #136]	; (8011b74 <inc_lock+0x118>)
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	011b      	lsls	r3, r3, #4
 8011af0:	440b      	add	r3, r1
 8011af2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	689a      	ldr	r2, [r3, #8]
 8011af8:	491e      	ldr	r1, [pc, #120]	; (8011b74 <inc_lock+0x118>)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	011b      	lsls	r3, r3, #4
 8011afe:	440b      	add	r3, r1
 8011b00:	3304      	adds	r3, #4
 8011b02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	695a      	ldr	r2, [r3, #20]
 8011b08:	491a      	ldr	r1, [pc, #104]	; (8011b74 <inc_lock+0x118>)
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	011b      	lsls	r3, r3, #4
 8011b0e:	440b      	add	r3, r1
 8011b10:	3308      	adds	r3, #8
 8011b12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b14:	4a17      	ldr	r2, [pc, #92]	; (8011b74 <inc_lock+0x118>)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	011b      	lsls	r3, r3, #4
 8011b1a:	4413      	add	r3, r2
 8011b1c:	330c      	adds	r3, #12
 8011b1e:	2200      	movs	r2, #0
 8011b20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d009      	beq.n	8011b3c <inc_lock+0xe0>
 8011b28:	4a12      	ldr	r2, [pc, #72]	; (8011b74 <inc_lock+0x118>)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	011b      	lsls	r3, r3, #4
 8011b2e:	4413      	add	r3, r2
 8011b30:	330c      	adds	r3, #12
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d001      	beq.n	8011b3c <inc_lock+0xe0>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	e015      	b.n	8011b68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d108      	bne.n	8011b54 <inc_lock+0xf8>
 8011b42:	4a0c      	ldr	r2, [pc, #48]	; (8011b74 <inc_lock+0x118>)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	011b      	lsls	r3, r3, #4
 8011b48:	4413      	add	r3, r2
 8011b4a:	330c      	adds	r3, #12
 8011b4c:	881b      	ldrh	r3, [r3, #0]
 8011b4e:	3301      	adds	r3, #1
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	e001      	b.n	8011b58 <inc_lock+0xfc>
 8011b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b58:	4906      	ldr	r1, [pc, #24]	; (8011b74 <inc_lock+0x118>)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	011b      	lsls	r3, r3, #4
 8011b5e:	440b      	add	r3, r1
 8011b60:	330c      	adds	r3, #12
 8011b62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	3301      	adds	r3, #1
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3714      	adds	r7, #20
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	2004246c 	.word	0x2004246c

08011b78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b085      	sub	sp, #20
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	607b      	str	r3, [r7, #4]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d825      	bhi.n	8011bd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8011b8c:	4a17      	ldr	r2, [pc, #92]	; (8011bec <dec_lock+0x74>)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	011b      	lsls	r3, r3, #4
 8011b92:	4413      	add	r3, r2
 8011b94:	330c      	adds	r3, #12
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011b9a:	89fb      	ldrh	r3, [r7, #14]
 8011b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ba0:	d101      	bne.n	8011ba6 <dec_lock+0x2e>
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011ba6:	89fb      	ldrh	r3, [r7, #14]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <dec_lock+0x3a>
 8011bac:	89fb      	ldrh	r3, [r7, #14]
 8011bae:	3b01      	subs	r3, #1
 8011bb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011bb2:	4a0e      	ldr	r2, [pc, #56]	; (8011bec <dec_lock+0x74>)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	011b      	lsls	r3, r3, #4
 8011bb8:	4413      	add	r3, r2
 8011bba:	330c      	adds	r3, #12
 8011bbc:	89fa      	ldrh	r2, [r7, #14]
 8011bbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011bc0:	89fb      	ldrh	r3, [r7, #14]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d105      	bne.n	8011bd2 <dec_lock+0x5a>
 8011bc6:	4a09      	ldr	r2, [pc, #36]	; (8011bec <dec_lock+0x74>)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	011b      	lsls	r3, r3, #4
 8011bcc:	4413      	add	r3, r2
 8011bce:	2200      	movs	r2, #0
 8011bd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	737b      	strb	r3, [r7, #13]
 8011bd6:	e001      	b.n	8011bdc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011bd8:	2302      	movs	r3, #2
 8011bda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011bdc:	7b7b      	ldrb	r3, [r7, #13]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3714      	adds	r7, #20
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	2004246c 	.word	0x2004246c

08011bf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b085      	sub	sp, #20
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	60fb      	str	r3, [r7, #12]
 8011bfc:	e010      	b.n	8011c20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011bfe:	4a0d      	ldr	r2, [pc, #52]	; (8011c34 <clear_lock+0x44>)
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	011b      	lsls	r3, r3, #4
 8011c04:	4413      	add	r3, r2
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d105      	bne.n	8011c1a <clear_lock+0x2a>
 8011c0e:	4a09      	ldr	r2, [pc, #36]	; (8011c34 <clear_lock+0x44>)
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	011b      	lsls	r3, r3, #4
 8011c14:	4413      	add	r3, r2
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	60fb      	str	r3, [r7, #12]
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d9eb      	bls.n	8011bfe <clear_lock+0xe>
	}
}
 8011c26:	bf00      	nop
 8011c28:	3714      	adds	r7, #20
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	2004246c 	.word	0x2004246c

08011c38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c40:	2300      	movs	r3, #0
 8011c42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	78db      	ldrb	r3, [r3, #3]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d034      	beq.n	8011cb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	7858      	ldrb	r0, [r3, #1]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	697a      	ldr	r2, [r7, #20]
 8011c60:	f7ff fd40 	bl	80116e4 <disk_write>
 8011c64:	4603      	mov	r3, r0
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d002      	beq.n	8011c70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	73fb      	strb	r3, [r7, #15]
 8011c6e:	e022      	b.n	8011cb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c7a:	697a      	ldr	r2, [r7, #20]
 8011c7c:	1ad2      	subs	r2, r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6a1b      	ldr	r3, [r3, #32]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d217      	bcs.n	8011cb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	789b      	ldrb	r3, [r3, #2]
 8011c8a:	613b      	str	r3, [r7, #16]
 8011c8c:	e010      	b.n	8011cb0 <sync_window+0x78>
					wsect += fs->fsize;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a1b      	ldr	r3, [r3, #32]
 8011c92:	697a      	ldr	r2, [r7, #20]
 8011c94:	4413      	add	r3, r2
 8011c96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	7858      	ldrb	r0, [r3, #1]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	697a      	ldr	r2, [r7, #20]
 8011ca6:	f7ff fd1d 	bl	80116e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	3b01      	subs	r3, #1
 8011cae:	613b      	str	r3, [r7, #16]
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d8eb      	bhi.n	8011c8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cd2:	683a      	ldr	r2, [r7, #0]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d01b      	beq.n	8011d10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff ffad 	bl	8011c38 <sync_window>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d113      	bne.n	8011d10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	7858      	ldrb	r0, [r3, #1]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	f7ff fcd5 	bl	80116a4 <disk_read>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d004      	beq.n	8011d0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011d00:	f04f 33ff 	mov.w	r3, #4294967295
 8011d04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
	...

08011d1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ff87 	bl	8011c38 <sync_window>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d2e:	7bfb      	ldrb	r3, [r7, #15]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d159      	bne.n	8011de8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b03      	cmp	r3, #3
 8011d3a:	d149      	bne.n	8011dd0 <sync_fs+0xb4>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	791b      	ldrb	r3, [r3, #4]
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d145      	bne.n	8011dd0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	899b      	ldrh	r3, [r3, #12]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	2100      	movs	r1, #0
 8011d52:	f7ff fda8 	bl	80118a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	3338      	adds	r3, #56	; 0x38
 8011d5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d5e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff fd37 	bl	80117d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	3338      	adds	r3, #56	; 0x38
 8011d6c:	4921      	ldr	r1, [pc, #132]	; (8011df4 <sync_fs+0xd8>)
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7ff fd4c 	bl	801180c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	3338      	adds	r3, #56	; 0x38
 8011d78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011d7c:	491e      	ldr	r1, [pc, #120]	; (8011df8 <sync_fs+0xdc>)
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7ff fd44 	bl	801180c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3338      	adds	r3, #56	; 0x38
 8011d88:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	4619      	mov	r1, r3
 8011d92:	4610      	mov	r0, r2
 8011d94:	f7ff fd3a 	bl	801180c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3338      	adds	r3, #56	; 0x38
 8011d9c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	691b      	ldr	r3, [r3, #16]
 8011da4:	4619      	mov	r1, r3
 8011da6:	4610      	mov	r0, r2
 8011da8:	f7ff fd30 	bl	801180c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db0:	1c5a      	adds	r2, r3, #1
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	7858      	ldrb	r0, [r3, #1]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	f7ff fc8d 	bl	80116e4 <disk_write>
			fs->fsi_flag = 0;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	785b      	ldrb	r3, [r3, #1]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	2100      	movs	r1, #0
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7ff fca3 	bl	8011724 <disk_ioctl>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d001      	beq.n	8011de8 <sync_fs+0xcc>
 8011de4:	2301      	movs	r3, #1
 8011de6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	41615252 	.word	0x41615252
 8011df8:	61417272 	.word	0x61417272

08011dfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	3b02      	subs	r3, #2
 8011e0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	69db      	ldr	r3, [r3, #28]
 8011e10:	3b02      	subs	r3, #2
 8011e12:	683a      	ldr	r2, [r7, #0]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d301      	bcc.n	8011e1c <clust2sect+0x20>
 8011e18:	2300      	movs	r3, #0
 8011e1a:	e008      	b.n	8011e2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	895b      	ldrh	r3, [r3, #10]
 8011e20:	461a      	mov	r2, r3
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	fb03 f202 	mul.w	r2, r3, r2
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e2c:	4413      	add	r3, r2
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	370c      	adds	r7, #12
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr

08011e3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b086      	sub	sp, #24
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
 8011e42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d904      	bls.n	8011e5a <get_fat+0x20>
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	69db      	ldr	r3, [r3, #28]
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d302      	bcc.n	8011e60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	617b      	str	r3, [r7, #20]
 8011e5e:	e0b7      	b.n	8011fd0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e60:	f04f 33ff 	mov.w	r3, #4294967295
 8011e64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d05a      	beq.n	8011f24 <get_fat+0xea>
 8011e6e:	2b03      	cmp	r3, #3
 8011e70:	d07d      	beq.n	8011f6e <get_fat+0x134>
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	f040 80a2 	bne.w	8011fbc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	60fb      	str	r3, [r7, #12]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	085b      	lsrs	r3, r3, #1
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	4413      	add	r3, r2
 8011e84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	899b      	ldrh	r3, [r3, #12]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e96:	4413      	add	r3, r2
 8011e98:	4619      	mov	r1, r3
 8011e9a:	6938      	ldr	r0, [r7, #16]
 8011e9c:	f7ff ff10 	bl	8011cc0 <move_window>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	f040 808d 	bne.w	8011fc2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	1c5a      	adds	r2, r3, #1
 8011eac:	60fa      	str	r2, [r7, #12]
 8011eae:	693a      	ldr	r2, [r7, #16]
 8011eb0:	8992      	ldrh	r2, [r2, #12]
 8011eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eb6:	fb02 f201 	mul.w	r2, r2, r1
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	693a      	ldr	r2, [r7, #16]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ec4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	899b      	ldrh	r3, [r3, #12]
 8011ece:	4619      	mov	r1, r3
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ed6:	4413      	add	r3, r2
 8011ed8:	4619      	mov	r1, r3
 8011eda:	6938      	ldr	r0, [r7, #16]
 8011edc:	f7ff fef0 	bl	8011cc0 <move_window>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d16f      	bne.n	8011fc6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	899b      	ldrh	r3, [r3, #12]
 8011eea:	461a      	mov	r2, r3
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ef2:	fb02 f201 	mul.w	r2, r2, r1
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	693a      	ldr	r2, [r7, #16]
 8011efa:	4413      	add	r3, r2
 8011efc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f00:	021b      	lsls	r3, r3, #8
 8011f02:	461a      	mov	r2, r3
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	4313      	orrs	r3, r2
 8011f08:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	f003 0301 	and.w	r3, r3, #1
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d002      	beq.n	8011f1a <get_fat+0xe0>
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	091b      	lsrs	r3, r3, #4
 8011f18:	e002      	b.n	8011f20 <get_fat+0xe6>
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f20:	617b      	str	r3, [r7, #20]
			break;
 8011f22:	e055      	b.n	8011fd0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	899b      	ldrh	r3, [r3, #12]
 8011f2c:	085b      	lsrs	r3, r3, #1
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4619      	mov	r1, r3
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f38:	4413      	add	r3, r2
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	6938      	ldr	r0, [r7, #16]
 8011f3e:	f7ff febf 	bl	8011cc0 <move_window>
 8011f42:	4603      	mov	r3, r0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d140      	bne.n	8011fca <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	005b      	lsls	r3, r3, #1
 8011f52:	693a      	ldr	r2, [r7, #16]
 8011f54:	8992      	ldrh	r2, [r2, #12]
 8011f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f5a:	fb02 f200 	mul.w	r2, r2, r0
 8011f5e:	1a9b      	subs	r3, r3, r2
 8011f60:	440b      	add	r3, r1
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7ff fbfc 	bl	8011760 <ld_word>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	617b      	str	r3, [r7, #20]
			break;
 8011f6c:	e030      	b.n	8011fd0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	899b      	ldrh	r3, [r3, #12]
 8011f76:	089b      	lsrs	r3, r3, #2
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f82:	4413      	add	r3, r2
 8011f84:	4619      	mov	r1, r3
 8011f86:	6938      	ldr	r0, [r7, #16]
 8011f88:	f7ff fe9a 	bl	8011cc0 <move_window>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d11d      	bne.n	8011fce <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	693a      	ldr	r2, [r7, #16]
 8011f9e:	8992      	ldrh	r2, [r2, #12]
 8011fa0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fa4:	fb02 f200 	mul.w	r2, r2, r0
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	440b      	add	r3, r1
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7ff fbef 	bl	8011790 <ld_dword>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011fb8:	617b      	str	r3, [r7, #20]
			break;
 8011fba:	e009      	b.n	8011fd0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	617b      	str	r3, [r7, #20]
 8011fc0:	e006      	b.n	8011fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fc2:	bf00      	nop
 8011fc4:	e004      	b.n	8011fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fc6:	bf00      	nop
 8011fc8:	e002      	b.n	8011fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fca:	bf00      	nop
 8011fcc:	e000      	b.n	8011fd0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fce:	bf00      	nop
		}
	}

	return val;
 8011fd0:	697b      	ldr	r3, [r7, #20]
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3718      	adds	r7, #24
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011fda:	b590      	push	{r4, r7, lr}
 8011fdc:	b089      	sub	sp, #36	; 0x24
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	60b9      	str	r1, [r7, #8]
 8011fe4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011fe6:	2302      	movs	r3, #2
 8011fe8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	f240 8106 	bls.w	80121fe <put_fat+0x224>
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	69db      	ldr	r3, [r3, #28]
 8011ff6:	68ba      	ldr	r2, [r7, #8]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	f080 8100 	bcs.w	80121fe <put_fat+0x224>
		switch (fs->fs_type) {
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	2b02      	cmp	r3, #2
 8012004:	f000 8088 	beq.w	8012118 <put_fat+0x13e>
 8012008:	2b03      	cmp	r3, #3
 801200a:	f000 80b0 	beq.w	801216e <put_fat+0x194>
 801200e:	2b01      	cmp	r3, #1
 8012010:	f040 80f5 	bne.w	80121fe <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	61bb      	str	r3, [r7, #24]
 8012018:	69bb      	ldr	r3, [r7, #24]
 801201a:	085b      	lsrs	r3, r3, #1
 801201c:	69ba      	ldr	r2, [r7, #24]
 801201e:	4413      	add	r3, r2
 8012020:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	899b      	ldrh	r3, [r3, #12]
 801202a:	4619      	mov	r1, r3
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012032:	4413      	add	r3, r2
 8012034:	4619      	mov	r1, r3
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f7ff fe42 	bl	8011cc0 <move_window>
 801203c:	4603      	mov	r3, r0
 801203e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012040:	7ffb      	ldrb	r3, [r7, #31]
 8012042:	2b00      	cmp	r3, #0
 8012044:	f040 80d4 	bne.w	80121f0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	1c5a      	adds	r2, r3, #1
 8012052:	61ba      	str	r2, [r7, #24]
 8012054:	68fa      	ldr	r2, [r7, #12]
 8012056:	8992      	ldrh	r2, [r2, #12]
 8012058:	fbb3 f0f2 	udiv	r0, r3, r2
 801205c:	fb02 f200 	mul.w	r2, r2, r0
 8012060:	1a9b      	subs	r3, r3, r2
 8012062:	440b      	add	r3, r1
 8012064:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	f003 0301 	and.w	r3, r3, #1
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00d      	beq.n	801208c <put_fat+0xb2>
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	b25b      	sxtb	r3, r3
 8012076:	f003 030f 	and.w	r3, r3, #15
 801207a:	b25a      	sxtb	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	b2db      	uxtb	r3, r3
 8012080:	011b      	lsls	r3, r3, #4
 8012082:	b25b      	sxtb	r3, r3
 8012084:	4313      	orrs	r3, r2
 8012086:	b25b      	sxtb	r3, r3
 8012088:	b2db      	uxtb	r3, r3
 801208a:	e001      	b.n	8012090 <put_fat+0xb6>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	b2db      	uxtb	r3, r3
 8012090:	697a      	ldr	r2, [r7, #20]
 8012092:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2201      	movs	r2, #1
 8012098:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	899b      	ldrh	r3, [r3, #12]
 80120a2:	4619      	mov	r1, r3
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80120aa:	4413      	add	r3, r2
 80120ac:	4619      	mov	r1, r3
 80120ae:	68f8      	ldr	r0, [r7, #12]
 80120b0:	f7ff fe06 	bl	8011cc0 <move_window>
 80120b4:	4603      	mov	r3, r0
 80120b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120b8:	7ffb      	ldrb	r3, [r7, #31]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f040 809a 	bne.w	80121f4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	899b      	ldrh	r3, [r3, #12]
 80120ca:	461a      	mov	r2, r3
 80120cc:	69bb      	ldr	r3, [r7, #24]
 80120ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80120d2:	fb02 f200 	mul.w	r2, r2, r0
 80120d6:	1a9b      	subs	r3, r3, r2
 80120d8:	440b      	add	r3, r1
 80120da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	f003 0301 	and.w	r3, r3, #1
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <put_fat+0x114>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	091b      	lsrs	r3, r3, #4
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	e00e      	b.n	801210c <put_fat+0x132>
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	b25b      	sxtb	r3, r3
 80120f4:	f023 030f 	bic.w	r3, r3, #15
 80120f8:	b25a      	sxtb	r2, r3
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	0a1b      	lsrs	r3, r3, #8
 80120fe:	b25b      	sxtb	r3, r3
 8012100:	f003 030f 	and.w	r3, r3, #15
 8012104:	b25b      	sxtb	r3, r3
 8012106:	4313      	orrs	r3, r2
 8012108:	b25b      	sxtb	r3, r3
 801210a:	b2db      	uxtb	r3, r3
 801210c:	697a      	ldr	r2, [r7, #20]
 801210e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2201      	movs	r2, #1
 8012114:	70da      	strb	r2, [r3, #3]
			break;
 8012116:	e072      	b.n	80121fe <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	899b      	ldrh	r3, [r3, #12]
 8012120:	085b      	lsrs	r3, r3, #1
 8012122:	b29b      	uxth	r3, r3
 8012124:	4619      	mov	r1, r3
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	fbb3 f3f1 	udiv	r3, r3, r1
 801212c:	4413      	add	r3, r2
 801212e:	4619      	mov	r1, r3
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7ff fdc5 	bl	8011cc0 <move_window>
 8012136:	4603      	mov	r3, r0
 8012138:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801213a:	7ffb      	ldrb	r3, [r7, #31]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d15b      	bne.n	80121f8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	005b      	lsls	r3, r3, #1
 801214a:	68fa      	ldr	r2, [r7, #12]
 801214c:	8992      	ldrh	r2, [r2, #12]
 801214e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012152:	fb02 f200 	mul.w	r2, r2, r0
 8012156:	1a9b      	subs	r3, r3, r2
 8012158:	440b      	add	r3, r1
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	b292      	uxth	r2, r2
 801215e:	4611      	mov	r1, r2
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff fb38 	bl	80117d6 <st_word>
			fs->wflag = 1;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2201      	movs	r2, #1
 801216a:	70da      	strb	r2, [r3, #3]
			break;
 801216c:	e047      	b.n	80121fe <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	899b      	ldrh	r3, [r3, #12]
 8012176:	089b      	lsrs	r3, r3, #2
 8012178:	b29b      	uxth	r3, r3
 801217a:	4619      	mov	r1, r3
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012182:	4413      	add	r3, r2
 8012184:	4619      	mov	r1, r3
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f7ff fd9a 	bl	8011cc0 <move_window>
 801218c:	4603      	mov	r3, r0
 801218e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012190:	7ffb      	ldrb	r3, [r7, #31]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d132      	bne.n	80121fc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	68fa      	ldr	r2, [r7, #12]
 80121a8:	8992      	ldrh	r2, [r2, #12]
 80121aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80121ae:	fb02 f200 	mul.w	r2, r2, r0
 80121b2:	1a9b      	subs	r3, r3, r2
 80121b4:	440b      	add	r3, r1
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7ff faea 	bl	8011790 <ld_dword>
 80121bc:	4603      	mov	r3, r0
 80121be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121c2:	4323      	orrs	r3, r4
 80121c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	009b      	lsls	r3, r3, #2
 80121d0:	68fa      	ldr	r2, [r7, #12]
 80121d2:	8992      	ldrh	r2, [r2, #12]
 80121d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80121d8:	fb02 f200 	mul.w	r2, r2, r0
 80121dc:	1a9b      	subs	r3, r3, r2
 80121de:	440b      	add	r3, r1
 80121e0:	6879      	ldr	r1, [r7, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7ff fb12 	bl	801180c <st_dword>
			fs->wflag = 1;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2201      	movs	r2, #1
 80121ec:	70da      	strb	r2, [r3, #3]
			break;
 80121ee:	e006      	b.n	80121fe <put_fat+0x224>
			if (res != FR_OK) break;
 80121f0:	bf00      	nop
 80121f2:	e004      	b.n	80121fe <put_fat+0x224>
			if (res != FR_OK) break;
 80121f4:	bf00      	nop
 80121f6:	e002      	b.n	80121fe <put_fat+0x224>
			if (res != FR_OK) break;
 80121f8:	bf00      	nop
 80121fa:	e000      	b.n	80121fe <put_fat+0x224>
			if (res != FR_OK) break;
 80121fc:	bf00      	nop
		}
	}
	return res;
 80121fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8012200:	4618      	mov	r0, r3
 8012202:	3724      	adds	r7, #36	; 0x24
 8012204:	46bd      	mov	sp, r7
 8012206:	bd90      	pop	{r4, r7, pc}

08012208 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b088      	sub	sp, #32
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012214:	2300      	movs	r3, #0
 8012216:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	2b01      	cmp	r3, #1
 8012222:	d904      	bls.n	801222e <remove_chain+0x26>
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	69db      	ldr	r3, [r3, #28]
 8012228:	68ba      	ldr	r2, [r7, #8]
 801222a:	429a      	cmp	r2, r3
 801222c:	d301      	bcc.n	8012232 <remove_chain+0x2a>
 801222e:	2302      	movs	r3, #2
 8012230:	e04b      	b.n	80122ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d00c      	beq.n	8012252 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012238:	f04f 32ff 	mov.w	r2, #4294967295
 801223c:	6879      	ldr	r1, [r7, #4]
 801223e:	69b8      	ldr	r0, [r7, #24]
 8012240:	f7ff fecb 	bl	8011fda <put_fat>
 8012244:	4603      	mov	r3, r0
 8012246:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012248:	7ffb      	ldrb	r3, [r7, #31]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d001      	beq.n	8012252 <remove_chain+0x4a>
 801224e:	7ffb      	ldrb	r3, [r7, #31]
 8012250:	e03b      	b.n	80122ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012252:	68b9      	ldr	r1, [r7, #8]
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f7ff fdf0 	bl	8011e3a <get_fat>
 801225a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d031      	beq.n	80122c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d101      	bne.n	801226c <remove_chain+0x64>
 8012268:	2302      	movs	r3, #2
 801226a:	e02e      	b.n	80122ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012272:	d101      	bne.n	8012278 <remove_chain+0x70>
 8012274:	2301      	movs	r3, #1
 8012276:	e028      	b.n	80122ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012278:	2200      	movs	r2, #0
 801227a:	68b9      	ldr	r1, [r7, #8]
 801227c:	69b8      	ldr	r0, [r7, #24]
 801227e:	f7ff feac 	bl	8011fda <put_fat>
 8012282:	4603      	mov	r3, r0
 8012284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012286:	7ffb      	ldrb	r3, [r7, #31]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d001      	beq.n	8012290 <remove_chain+0x88>
 801228c:	7ffb      	ldrb	r3, [r7, #31]
 801228e:	e01c      	b.n	80122ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	695a      	ldr	r2, [r3, #20]
 8012294:	69bb      	ldr	r3, [r7, #24]
 8012296:	69db      	ldr	r3, [r3, #28]
 8012298:	3b02      	subs	r3, #2
 801229a:	429a      	cmp	r2, r3
 801229c:	d20b      	bcs.n	80122b6 <remove_chain+0xae>
			fs->free_clst++;
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	695b      	ldr	r3, [r3, #20]
 80122a2:	1c5a      	adds	r2, r3, #1
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	791b      	ldrb	r3, [r3, #4]
 80122ac:	f043 0301 	orr.w	r3, r3, #1
 80122b0:	b2da      	uxtb	r2, r3
 80122b2:	69bb      	ldr	r3, [r7, #24]
 80122b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	69db      	ldr	r3, [r3, #28]
 80122be:	68ba      	ldr	r2, [r7, #8]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d3c6      	bcc.n	8012252 <remove_chain+0x4a>
 80122c4:	e000      	b.n	80122c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3720      	adds	r7, #32
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b088      	sub	sp, #32
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
 80122da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d10d      	bne.n	8012304 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	691b      	ldr	r3, [r3, #16]
 80122ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d004      	beq.n	80122fe <create_chain+0x2c>
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	69db      	ldr	r3, [r3, #28]
 80122f8:	69ba      	ldr	r2, [r7, #24]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d31b      	bcc.n	8012336 <create_chain+0x64>
 80122fe:	2301      	movs	r3, #1
 8012300:	61bb      	str	r3, [r7, #24]
 8012302:	e018      	b.n	8012336 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012304:	6839      	ldr	r1, [r7, #0]
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f7ff fd97 	bl	8011e3a <get_fat>
 801230c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2b01      	cmp	r3, #1
 8012312:	d801      	bhi.n	8012318 <create_chain+0x46>
 8012314:	2301      	movs	r3, #1
 8012316:	e070      	b.n	80123fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801231e:	d101      	bne.n	8012324 <create_chain+0x52>
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	e06a      	b.n	80123fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	69db      	ldr	r3, [r3, #28]
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	429a      	cmp	r2, r3
 801232c:	d201      	bcs.n	8012332 <create_chain+0x60>
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	e063      	b.n	80123fa <create_chain+0x128>
		scl = clst;
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	3301      	adds	r3, #1
 801233e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	69db      	ldr	r3, [r3, #28]
 8012344:	69fa      	ldr	r2, [r7, #28]
 8012346:	429a      	cmp	r2, r3
 8012348:	d307      	bcc.n	801235a <create_chain+0x88>
				ncl = 2;
 801234a:	2302      	movs	r3, #2
 801234c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801234e:	69fa      	ldr	r2, [r7, #28]
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	429a      	cmp	r2, r3
 8012354:	d901      	bls.n	801235a <create_chain+0x88>
 8012356:	2300      	movs	r3, #0
 8012358:	e04f      	b.n	80123fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801235a:	69f9      	ldr	r1, [r7, #28]
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7ff fd6c 	bl	8011e3a <get_fat>
 8012362:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00e      	beq.n	8012388 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d003      	beq.n	8012378 <create_chain+0xa6>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012376:	d101      	bne.n	801237c <create_chain+0xaa>
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	e03e      	b.n	80123fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801237c:	69fa      	ldr	r2, [r7, #28]
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	429a      	cmp	r2, r3
 8012382:	d1da      	bne.n	801233a <create_chain+0x68>
 8012384:	2300      	movs	r3, #0
 8012386:	e038      	b.n	80123fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012388:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801238a:	f04f 32ff 	mov.w	r2, #4294967295
 801238e:	69f9      	ldr	r1, [r7, #28]
 8012390:	6938      	ldr	r0, [r7, #16]
 8012392:	f7ff fe22 	bl	8011fda <put_fat>
 8012396:	4603      	mov	r3, r0
 8012398:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801239a:	7dfb      	ldrb	r3, [r7, #23]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d109      	bne.n	80123b4 <create_chain+0xe2>
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d006      	beq.n	80123b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80123a6:	69fa      	ldr	r2, [r7, #28]
 80123a8:	6839      	ldr	r1, [r7, #0]
 80123aa:	6938      	ldr	r0, [r7, #16]
 80123ac:	f7ff fe15 	bl	8011fda <put_fat>
 80123b0:	4603      	mov	r3, r0
 80123b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123b4:	7dfb      	ldrb	r3, [r7, #23]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d116      	bne.n	80123e8 <create_chain+0x116>
		fs->last_clst = ncl;
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	69fa      	ldr	r2, [r7, #28]
 80123be:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	695a      	ldr	r2, [r3, #20]
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	69db      	ldr	r3, [r3, #28]
 80123c8:	3b02      	subs	r3, #2
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d804      	bhi.n	80123d8 <create_chain+0x106>
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	695b      	ldr	r3, [r3, #20]
 80123d2:	1e5a      	subs	r2, r3, #1
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	791b      	ldrb	r3, [r3, #4]
 80123dc:	f043 0301 	orr.w	r3, r3, #1
 80123e0:	b2da      	uxtb	r2, r3
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	711a      	strb	r2, [r3, #4]
 80123e6:	e007      	b.n	80123f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d102      	bne.n	80123f4 <create_chain+0x122>
 80123ee:	f04f 33ff 	mov.w	r3, #4294967295
 80123f2:	e000      	b.n	80123f6 <create_chain+0x124>
 80123f4:	2301      	movs	r3, #1
 80123f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80123f8:	69fb      	ldr	r3, [r7, #28]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3720      	adds	r7, #32
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012402:	b480      	push	{r7}
 8012404:	b087      	sub	sp, #28
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
 801240a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012416:	3304      	adds	r3, #4
 8012418:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	899b      	ldrh	r3, [r3, #12]
 801241e:	461a      	mov	r2, r3
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	fbb3 f3f2 	udiv	r3, r3, r2
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	8952      	ldrh	r2, [r2, #10]
 801242a:	fbb3 f3f2 	udiv	r3, r3, r2
 801242e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	1d1a      	adds	r2, r3, #4
 8012434:	613a      	str	r2, [r7, #16]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <clmt_clust+0x42>
 8012440:	2300      	movs	r3, #0
 8012442:	e010      	b.n	8012466 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012444:	697a      	ldr	r2, [r7, #20]
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	429a      	cmp	r2, r3
 801244a:	d307      	bcc.n	801245c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801244c:	697a      	ldr	r2, [r7, #20]
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	1ad3      	subs	r3, r2, r3
 8012452:	617b      	str	r3, [r7, #20]
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	3304      	adds	r3, #4
 8012458:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801245a:	e7e9      	b.n	8012430 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801245c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	4413      	add	r3, r2
}
 8012466:	4618      	mov	r0, r3
 8012468:	371c      	adds	r7, #28
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr

08012472 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012472:	b580      	push	{r7, lr}
 8012474:	b086      	sub	sp, #24
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
 801247a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012488:	d204      	bcs.n	8012494 <dir_sdi+0x22>
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	f003 031f 	and.w	r3, r3, #31
 8012490:	2b00      	cmp	r3, #0
 8012492:	d001      	beq.n	8012498 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012494:	2302      	movs	r3, #2
 8012496:	e071      	b.n	801257c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	683a      	ldr	r2, [r7, #0]
 801249c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <dir_sdi+0x46>
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	2b02      	cmp	r3, #2
 80124b0:	d902      	bls.n	80124b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10c      	bne.n	80124d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	095b      	lsrs	r3, r3, #5
 80124c2:	693a      	ldr	r2, [r7, #16]
 80124c4:	8912      	ldrh	r2, [r2, #8]
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d301      	bcc.n	80124ce <dir_sdi+0x5c>
 80124ca:	2302      	movs	r3, #2
 80124cc:	e056      	b.n	801257c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	61da      	str	r2, [r3, #28]
 80124d6:	e02d      	b.n	8012534 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	895b      	ldrh	r3, [r3, #10]
 80124dc:	461a      	mov	r2, r3
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	899b      	ldrh	r3, [r3, #12]
 80124e2:	fb03 f302 	mul.w	r3, r3, r2
 80124e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124e8:	e019      	b.n	801251e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6979      	ldr	r1, [r7, #20]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7ff fca3 	bl	8011e3a <get_fat>
 80124f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124fc:	d101      	bne.n	8012502 <dir_sdi+0x90>
 80124fe:	2301      	movs	r3, #1
 8012500:	e03c      	b.n	801257c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	2b01      	cmp	r3, #1
 8012506:	d904      	bls.n	8012512 <dir_sdi+0xa0>
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	69db      	ldr	r3, [r3, #28]
 801250c:	697a      	ldr	r2, [r7, #20]
 801250e:	429a      	cmp	r2, r3
 8012510:	d301      	bcc.n	8012516 <dir_sdi+0xa4>
 8012512:	2302      	movs	r3, #2
 8012514:	e032      	b.n	801257c <dir_sdi+0x10a>
			ofs -= csz;
 8012516:	683a      	ldr	r2, [r7, #0]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801251e:	683a      	ldr	r2, [r7, #0]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	429a      	cmp	r2, r3
 8012524:	d2e1      	bcs.n	80124ea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012526:	6979      	ldr	r1, [r7, #20]
 8012528:	6938      	ldr	r0, [r7, #16]
 801252a:	f7ff fc67 	bl	8011dfc <clust2sect>
 801252e:	4602      	mov	r2, r0
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	697a      	ldr	r2, [r7, #20]
 8012538:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	69db      	ldr	r3, [r3, #28]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d101      	bne.n	8012546 <dir_sdi+0xd4>
 8012542:	2302      	movs	r3, #2
 8012544:	e01a      	b.n	801257c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	69da      	ldr	r2, [r3, #28]
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	899b      	ldrh	r3, [r3, #12]
 801254e:	4619      	mov	r1, r3
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	fbb3 f3f1 	udiv	r3, r3, r1
 8012556:	441a      	add	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	899b      	ldrh	r3, [r3, #12]
 8012566:	461a      	mov	r2, r3
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	fbb3 f0f2 	udiv	r0, r3, r2
 801256e:	fb02 f200 	mul.w	r2, r2, r0
 8012572:	1a9b      	subs	r3, r3, r2
 8012574:	18ca      	adds	r2, r1, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	3718      	adds	r7, #24
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b086      	sub	sp, #24
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	695b      	ldr	r3, [r3, #20]
 8012598:	3320      	adds	r3, #32
 801259a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	69db      	ldr	r3, [r3, #28]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d003      	beq.n	80125ac <dir_next+0x28>
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125aa:	d301      	bcc.n	80125b0 <dir_next+0x2c>
 80125ac:	2304      	movs	r3, #4
 80125ae:	e0bb      	b.n	8012728 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	899b      	ldrh	r3, [r3, #12]
 80125b4:	461a      	mov	r2, r3
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80125bc:	fb02 f201 	mul.w	r2, r2, r1
 80125c0:	1a9b      	subs	r3, r3, r2
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f040 809d 	bne.w	8012702 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	69db      	ldr	r3, [r3, #28]
 80125cc:	1c5a      	adds	r2, r3, #1
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	699b      	ldr	r3, [r3, #24]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10b      	bne.n	80125f2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	095b      	lsrs	r3, r3, #5
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	8912      	ldrh	r2, [r2, #8]
 80125e2:	4293      	cmp	r3, r2
 80125e4:	f0c0 808d 	bcc.w	8012702 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	61da      	str	r2, [r3, #28]
 80125ee:	2304      	movs	r3, #4
 80125f0:	e09a      	b.n	8012728 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	899b      	ldrh	r3, [r3, #12]
 80125f6:	461a      	mov	r2, r3
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	8952      	ldrh	r2, [r2, #10]
 8012602:	3a01      	subs	r2, #1
 8012604:	4013      	ands	r3, r2
 8012606:	2b00      	cmp	r3, #0
 8012608:	d17b      	bne.n	8012702 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	4619      	mov	r1, r3
 8012612:	4610      	mov	r0, r2
 8012614:	f7ff fc11 	bl	8011e3a <get_fat>
 8012618:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d801      	bhi.n	8012624 <dir_next+0xa0>
 8012620:	2302      	movs	r3, #2
 8012622:	e081      	b.n	8012728 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801262a:	d101      	bne.n	8012630 <dir_next+0xac>
 801262c:	2301      	movs	r3, #1
 801262e:	e07b      	b.n	8012728 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	69db      	ldr	r3, [r3, #28]
 8012634:	697a      	ldr	r2, [r7, #20]
 8012636:	429a      	cmp	r2, r3
 8012638:	d359      	bcc.n	80126ee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d104      	bne.n	801264a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	61da      	str	r2, [r3, #28]
 8012646:	2304      	movs	r3, #4
 8012648:	e06e      	b.n	8012728 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	699b      	ldr	r3, [r3, #24]
 8012650:	4619      	mov	r1, r3
 8012652:	4610      	mov	r0, r2
 8012654:	f7ff fe3d 	bl	80122d2 <create_chain>
 8012658:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d101      	bne.n	8012664 <dir_next+0xe0>
 8012660:	2307      	movs	r3, #7
 8012662:	e061      	b.n	8012728 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	2b01      	cmp	r3, #1
 8012668:	d101      	bne.n	801266e <dir_next+0xea>
 801266a:	2302      	movs	r3, #2
 801266c:	e05c      	b.n	8012728 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012674:	d101      	bne.n	801267a <dir_next+0xf6>
 8012676:	2301      	movs	r3, #1
 8012678:	e056      	b.n	8012728 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f7ff fadc 	bl	8011c38 <sync_window>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d001      	beq.n	801268a <dir_next+0x106>
 8012686:	2301      	movs	r3, #1
 8012688:	e04e      	b.n	8012728 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	899b      	ldrh	r3, [r3, #12]
 8012694:	461a      	mov	r2, r3
 8012696:	2100      	movs	r1, #0
 8012698:	f7ff f905 	bl	80118a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801269c:	2300      	movs	r3, #0
 801269e:	613b      	str	r3, [r7, #16]
 80126a0:	6979      	ldr	r1, [r7, #20]
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7ff fbaa 	bl	8011dfc <clust2sect>
 80126a8:	4602      	mov	r2, r0
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	635a      	str	r2, [r3, #52]	; 0x34
 80126ae:	e012      	b.n	80126d6 <dir_next+0x152>
						fs->wflag = 1;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2201      	movs	r2, #1
 80126b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f7ff fabe 	bl	8011c38 <sync_window>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d001      	beq.n	80126c6 <dir_next+0x142>
 80126c2:	2301      	movs	r3, #1
 80126c4:	e030      	b.n	8012728 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	3301      	adds	r3, #1
 80126ca:	613b      	str	r3, [r7, #16]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d0:	1c5a      	adds	r2, r3, #1
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	635a      	str	r2, [r3, #52]	; 0x34
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	895b      	ldrh	r3, [r3, #10]
 80126da:	461a      	mov	r2, r3
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	4293      	cmp	r3, r2
 80126e0:	d3e6      	bcc.n	80126b0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	1ad2      	subs	r2, r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	697a      	ldr	r2, [r7, #20]
 80126f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80126f4:	6979      	ldr	r1, [r7, #20]
 80126f6:	68f8      	ldr	r0, [r7, #12]
 80126f8:	f7ff fb80 	bl	8011dfc <clust2sect>
 80126fc:	4602      	mov	r2, r0
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	899b      	ldrh	r3, [r3, #12]
 8012712:	461a      	mov	r2, r3
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	fbb3 f0f2 	udiv	r0, r3, r2
 801271a:	fb02 f200 	mul.w	r2, r2, r0
 801271e:	1a9b      	subs	r3, r3, r2
 8012720:	18ca      	adds	r2, r1, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012740:	2100      	movs	r1, #0
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7ff fe95 	bl	8012472 <dir_sdi>
 8012748:	4603      	mov	r3, r0
 801274a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801274c:	7dfb      	ldrb	r3, [r7, #23]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d12b      	bne.n	80127aa <dir_alloc+0x7a>
		n = 0;
 8012752:	2300      	movs	r3, #0
 8012754:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	69db      	ldr	r3, [r3, #28]
 801275a:	4619      	mov	r1, r3
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f7ff faaf 	bl	8011cc0 <move_window>
 8012762:	4603      	mov	r3, r0
 8012764:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012766:	7dfb      	ldrb	r3, [r7, #23]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d11d      	bne.n	80127a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6a1b      	ldr	r3, [r3, #32]
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	2be5      	cmp	r3, #229	; 0xe5
 8012774:	d004      	beq.n	8012780 <dir_alloc+0x50>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6a1b      	ldr	r3, [r3, #32]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d107      	bne.n	8012790 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	3301      	adds	r3, #1
 8012784:	613b      	str	r3, [r7, #16]
 8012786:	693a      	ldr	r2, [r7, #16]
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	429a      	cmp	r2, r3
 801278c:	d102      	bne.n	8012794 <dir_alloc+0x64>
 801278e:	e00c      	b.n	80127aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012790:	2300      	movs	r3, #0
 8012792:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012794:	2101      	movs	r1, #1
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f7ff fef4 	bl	8012584 <dir_next>
 801279c:	4603      	mov	r3, r0
 801279e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80127a0:	7dfb      	ldrb	r3, [r7, #23]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d0d7      	beq.n	8012756 <dir_alloc+0x26>
 80127a6:	e000      	b.n	80127aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127aa:	7dfb      	ldrb	r3, [r7, #23]
 80127ac:	2b04      	cmp	r3, #4
 80127ae:	d101      	bne.n	80127b4 <dir_alloc+0x84>
 80127b0:	2307      	movs	r3, #7
 80127b2:	75fb      	strb	r3, [r7, #23]
	return res;
 80127b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3718      	adds	r7, #24
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}

080127be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80127be:	b580      	push	{r7, lr}
 80127c0:	b084      	sub	sp, #16
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	6078      	str	r0, [r7, #4]
 80127c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	331a      	adds	r3, #26
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fe ffc7 	bl	8011760 <ld_word>
 80127d2:	4603      	mov	r3, r0
 80127d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	2b03      	cmp	r3, #3
 80127dc:	d109      	bne.n	80127f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	3314      	adds	r3, #20
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe ffbc 	bl	8011760 <ld_word>
 80127e8:	4603      	mov	r3, r0
 80127ea:	041b      	lsls	r3, r3, #16
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	4313      	orrs	r3, r2
 80127f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80127f2:	68fb      	ldr	r3, [r7, #12]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	60f8      	str	r0, [r7, #12]
 8012804:	60b9      	str	r1, [r7, #8]
 8012806:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	331a      	adds	r3, #26
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	b292      	uxth	r2, r2
 8012810:	4611      	mov	r1, r2
 8012812:	4618      	mov	r0, r3
 8012814:	f7fe ffdf 	bl	80117d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	2b03      	cmp	r3, #3
 801281e:	d109      	bne.n	8012834 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	f103 0214 	add.w	r2, r3, #20
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	0c1b      	lsrs	r3, r3, #16
 801282a:	b29b      	uxth	r3, r3
 801282c:	4619      	mov	r1, r3
 801282e:	4610      	mov	r0, r2
 8012830:	f7fe ffd1 	bl	80117d6 <st_word>
	}
}
 8012834:	bf00      	nop
 8012836:	3710      	adds	r7, #16
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012846:	2304      	movs	r3, #4
 8012848:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012850:	e03c      	b.n	80128cc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	69db      	ldr	r3, [r3, #28]
 8012856:	4619      	mov	r1, r3
 8012858:	6938      	ldr	r0, [r7, #16]
 801285a:	f7ff fa31 	bl	8011cc0 <move_window>
 801285e:	4603      	mov	r3, r0
 8012860:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012862:	7dfb      	ldrb	r3, [r7, #23]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d136      	bne.n	80128d6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6a1b      	ldr	r3, [r3, #32]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012870:	7bfb      	ldrb	r3, [r7, #15]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d102      	bne.n	801287c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012876:	2304      	movs	r3, #4
 8012878:	75fb      	strb	r3, [r7, #23]
 801287a:	e031      	b.n	80128e0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6a1b      	ldr	r3, [r3, #32]
 8012880:	330b      	adds	r3, #11
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012888:	73bb      	strb	r3, [r7, #14]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	7bba      	ldrb	r2, [r7, #14]
 801288e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012890:	7bfb      	ldrb	r3, [r7, #15]
 8012892:	2be5      	cmp	r3, #229	; 0xe5
 8012894:	d011      	beq.n	80128ba <dir_read+0x7e>
 8012896:	7bfb      	ldrb	r3, [r7, #15]
 8012898:	2b2e      	cmp	r3, #46	; 0x2e
 801289a:	d00e      	beq.n	80128ba <dir_read+0x7e>
 801289c:	7bbb      	ldrb	r3, [r7, #14]
 801289e:	2b0f      	cmp	r3, #15
 80128a0:	d00b      	beq.n	80128ba <dir_read+0x7e>
 80128a2:	7bbb      	ldrb	r3, [r7, #14]
 80128a4:	f023 0320 	bic.w	r3, r3, #32
 80128a8:	2b08      	cmp	r3, #8
 80128aa:	bf0c      	ite	eq
 80128ac:	2301      	moveq	r3, #1
 80128ae:	2300      	movne	r3, #0
 80128b0:	b2db      	uxtb	r3, r3
 80128b2:	461a      	mov	r2, r3
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d00f      	beq.n	80128da <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80128ba:	2100      	movs	r1, #0
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f7ff fe61 	bl	8012584 <dir_next>
 80128c2:	4603      	mov	r3, r0
 80128c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128c6:	7dfb      	ldrb	r3, [r7, #23]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d108      	bne.n	80128de <dir_read+0xa2>
	while (dp->sect) {
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	69db      	ldr	r3, [r3, #28]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d1be      	bne.n	8012852 <dir_read+0x16>
 80128d4:	e004      	b.n	80128e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128d6:	bf00      	nop
 80128d8:	e002      	b.n	80128e0 <dir_read+0xa4>
				break;
 80128da:	bf00      	nop
 80128dc:	e000      	b.n	80128e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128de:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80128e0:	7dfb      	ldrb	r3, [r7, #23]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d002      	beq.n	80128ec <dir_read+0xb0>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2200      	movs	r2, #0
 80128ea:	61da      	str	r2, [r3, #28]
	return res;
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3718      	adds	r7, #24
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b086      	sub	sp, #24
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012904:	2100      	movs	r1, #0
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f7ff fdb3 	bl	8012472 <dir_sdi>
 801290c:	4603      	mov	r3, r0
 801290e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012910:	7dfb      	ldrb	r3, [r7, #23]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d001      	beq.n	801291a <dir_find+0x24>
 8012916:	7dfb      	ldrb	r3, [r7, #23]
 8012918:	e03e      	b.n	8012998 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	69db      	ldr	r3, [r3, #28]
 801291e:	4619      	mov	r1, r3
 8012920:	6938      	ldr	r0, [r7, #16]
 8012922:	f7ff f9cd 	bl	8011cc0 <move_window>
 8012926:	4603      	mov	r3, r0
 8012928:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801292a:	7dfb      	ldrb	r3, [r7, #23]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d12f      	bne.n	8012990 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a1b      	ldr	r3, [r3, #32]
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012938:	7bfb      	ldrb	r3, [r7, #15]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d102      	bne.n	8012944 <dir_find+0x4e>
 801293e:	2304      	movs	r3, #4
 8012940:	75fb      	strb	r3, [r7, #23]
 8012942:	e028      	b.n	8012996 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6a1b      	ldr	r3, [r3, #32]
 8012948:	330b      	adds	r3, #11
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012950:	b2da      	uxtb	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6a1b      	ldr	r3, [r3, #32]
 801295a:	330b      	adds	r3, #11
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	f003 0308 	and.w	r3, r3, #8
 8012962:	2b00      	cmp	r3, #0
 8012964:	d10a      	bne.n	801297c <dir_find+0x86>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6a18      	ldr	r0, [r3, #32]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	3324      	adds	r3, #36	; 0x24
 801296e:	220b      	movs	r2, #11
 8012970:	4619      	mov	r1, r3
 8012972:	f7fe ffb2 	bl	80118da <mem_cmp>
 8012976:	4603      	mov	r3, r0
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00b      	beq.n	8012994 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801297c:	2100      	movs	r1, #0
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f7ff fe00 	bl	8012584 <dir_next>
 8012984:	4603      	mov	r3, r0
 8012986:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012988:	7dfb      	ldrb	r3, [r7, #23]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d0c5      	beq.n	801291a <dir_find+0x24>
 801298e:	e002      	b.n	8012996 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012990:	bf00      	nop
 8012992:	e000      	b.n	8012996 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012994:	bf00      	nop

	return res;
 8012996:	7dfb      	ldrb	r3, [r7, #23]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3718      	adds	r7, #24
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80129ae:	2101      	movs	r1, #1
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f7ff febd 	bl	8012730 <dir_alloc>
 80129b6:	4603      	mov	r3, r0
 80129b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129ba:	7bfb      	ldrb	r3, [r7, #15]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d11c      	bne.n	80129fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	69db      	ldr	r3, [r3, #28]
 80129c4:	4619      	mov	r1, r3
 80129c6:	68b8      	ldr	r0, [r7, #8]
 80129c8:	f7ff f97a 	bl	8011cc0 <move_window>
 80129cc:	4603      	mov	r3, r0
 80129ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129d0:	7bfb      	ldrb	r3, [r7, #15]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d111      	bne.n	80129fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6a1b      	ldr	r3, [r3, #32]
 80129da:	2220      	movs	r2, #32
 80129dc:	2100      	movs	r1, #0
 80129de:	4618      	mov	r0, r3
 80129e0:	f7fe ff61 	bl	80118a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6a18      	ldr	r0, [r3, #32]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	3324      	adds	r3, #36	; 0x24
 80129ec:	220b      	movs	r2, #11
 80129ee:	4619      	mov	r1, r3
 80129f0:	f7fe ff38 	bl	8011864 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	2201      	movs	r2, #1
 80129f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80129fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	69db      	ldr	r3, [r3, #28]
 8012a16:	4619      	mov	r1, r3
 8012a18:	68f8      	ldr	r0, [r7, #12]
 8012a1a:	f7ff f951 	bl	8011cc0 <move_window>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012a22:	7afb      	ldrb	r3, [r7, #11]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d106      	bne.n	8012a36 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6a1b      	ldr	r3, [r3, #32]
 8012a2c:	22e5      	movs	r2, #229	; 0xe5
 8012a2e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2201      	movs	r2, #1
 8012a34:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012a36:	7afb      	ldrb	r3, [r7, #11]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3710      	adds	r7, #16
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b088      	sub	sp, #32
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	60fb      	str	r3, [r7, #12]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3324      	adds	r3, #36	; 0x24
 8012a54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012a56:	220b      	movs	r2, #11
 8012a58:	2120      	movs	r1, #32
 8012a5a:	68b8      	ldr	r0, [r7, #8]
 8012a5c:	f7fe ff23 	bl	80118a6 <mem_set>
	si = i = 0; ni = 8;
 8012a60:	2300      	movs	r3, #0
 8012a62:	613b      	str	r3, [r7, #16]
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	617b      	str	r3, [r7, #20]
 8012a68:	2308      	movs	r3, #8
 8012a6a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012a6c:	68fa      	ldr	r2, [r7, #12]
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	4413      	add	r3, r2
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	2b2e      	cmp	r3, #46	; 0x2e
 8012a76:	d12f      	bne.n	8012ad8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	1c5a      	adds	r2, r3, #1
 8012a7c:	617a      	str	r2, [r7, #20]
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	4413      	add	r3, r2
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012a86:	7ffb      	ldrb	r3, [r7, #31]
 8012a88:	2b2e      	cmp	r3, #46	; 0x2e
 8012a8a:	d10a      	bne.n	8012aa2 <create_name+0x62>
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	2b02      	cmp	r3, #2
 8012a90:	d807      	bhi.n	8012aa2 <create_name+0x62>
			sfn[i++] = c;
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	1c5a      	adds	r2, r3, #1
 8012a96:	613a      	str	r2, [r7, #16]
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	7ffa      	ldrb	r2, [r7, #31]
 8012a9e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012aa0:	e7ea      	b.n	8012a78 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012aa2:	7ffb      	ldrb	r3, [r7, #31]
 8012aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8012aa6:	d007      	beq.n	8012ab8 <create_name+0x78>
 8012aa8:	7ffb      	ldrb	r3, [r7, #31]
 8012aaa:	2b5c      	cmp	r3, #92	; 0x5c
 8012aac:	d004      	beq.n	8012ab8 <create_name+0x78>
 8012aae:	7ffb      	ldrb	r3, [r7, #31]
 8012ab0:	2b20      	cmp	r3, #32
 8012ab2:	d901      	bls.n	8012ab8 <create_name+0x78>
 8012ab4:	2306      	movs	r3, #6
 8012ab6:	e084      	b.n	8012bc2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	441a      	add	r2, r3
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012ac2:	7ffb      	ldrb	r3, [r7, #31]
 8012ac4:	2b20      	cmp	r3, #32
 8012ac6:	d801      	bhi.n	8012acc <create_name+0x8c>
 8012ac8:	2224      	movs	r2, #36	; 0x24
 8012aca:	e000      	b.n	8012ace <create_name+0x8e>
 8012acc:	2220      	movs	r2, #32
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	330b      	adds	r3, #11
 8012ad2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	e074      	b.n	8012bc2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	1c5a      	adds	r2, r3, #1
 8012adc:	617a      	str	r2, [r7, #20]
 8012ade:	68fa      	ldr	r2, [r7, #12]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012ae6:	7ffb      	ldrb	r3, [r7, #31]
 8012ae8:	2b20      	cmp	r3, #32
 8012aea:	d94e      	bls.n	8012b8a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012aec:	7ffb      	ldrb	r3, [r7, #31]
 8012aee:	2b2f      	cmp	r3, #47	; 0x2f
 8012af0:	d006      	beq.n	8012b00 <create_name+0xc0>
 8012af2:	7ffb      	ldrb	r3, [r7, #31]
 8012af4:	2b5c      	cmp	r3, #92	; 0x5c
 8012af6:	d110      	bne.n	8012b1a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012af8:	e002      	b.n	8012b00 <create_name+0xc0>
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	3301      	adds	r3, #1
 8012afe:	617b      	str	r3, [r7, #20]
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	4413      	add	r3, r2
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b2f      	cmp	r3, #47	; 0x2f
 8012b0a:	d0f6      	beq.n	8012afa <create_name+0xba>
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	4413      	add	r3, r2
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	2b5c      	cmp	r3, #92	; 0x5c
 8012b16:	d0f0      	beq.n	8012afa <create_name+0xba>
			break;
 8012b18:	e038      	b.n	8012b8c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012b1a:	7ffb      	ldrb	r3, [r7, #31]
 8012b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b1e:	d003      	beq.n	8012b28 <create_name+0xe8>
 8012b20:	693a      	ldr	r2, [r7, #16]
 8012b22:	69bb      	ldr	r3, [r7, #24]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d30c      	bcc.n	8012b42 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b28:	69bb      	ldr	r3, [r7, #24]
 8012b2a:	2b0b      	cmp	r3, #11
 8012b2c:	d002      	beq.n	8012b34 <create_name+0xf4>
 8012b2e:	7ffb      	ldrb	r3, [r7, #31]
 8012b30:	2b2e      	cmp	r3, #46	; 0x2e
 8012b32:	d001      	beq.n	8012b38 <create_name+0xf8>
 8012b34:	2306      	movs	r3, #6
 8012b36:	e044      	b.n	8012bc2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012b38:	2308      	movs	r3, #8
 8012b3a:	613b      	str	r3, [r7, #16]
 8012b3c:	230b      	movs	r3, #11
 8012b3e:	61bb      	str	r3, [r7, #24]
			continue;
 8012b40:	e022      	b.n	8012b88 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	da04      	bge.n	8012b54 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b4a:	7ffb      	ldrb	r3, [r7, #31]
 8012b4c:	3b80      	subs	r3, #128	; 0x80
 8012b4e:	4a1f      	ldr	r2, [pc, #124]	; (8012bcc <create_name+0x18c>)
 8012b50:	5cd3      	ldrb	r3, [r2, r3]
 8012b52:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b54:	7ffb      	ldrb	r3, [r7, #31]
 8012b56:	4619      	mov	r1, r3
 8012b58:	481d      	ldr	r0, [pc, #116]	; (8012bd0 <create_name+0x190>)
 8012b5a:	f7fe fee5 	bl	8011928 <chk_chr>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d001      	beq.n	8012b68 <create_name+0x128>
 8012b64:	2306      	movs	r3, #6
 8012b66:	e02c      	b.n	8012bc2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012b68:	7ffb      	ldrb	r3, [r7, #31]
 8012b6a:	2b60      	cmp	r3, #96	; 0x60
 8012b6c:	d905      	bls.n	8012b7a <create_name+0x13a>
 8012b6e:	7ffb      	ldrb	r3, [r7, #31]
 8012b70:	2b7a      	cmp	r3, #122	; 0x7a
 8012b72:	d802      	bhi.n	8012b7a <create_name+0x13a>
 8012b74:	7ffb      	ldrb	r3, [r7, #31]
 8012b76:	3b20      	subs	r3, #32
 8012b78:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	1c5a      	adds	r2, r3, #1
 8012b7e:	613a      	str	r2, [r7, #16]
 8012b80:	68ba      	ldr	r2, [r7, #8]
 8012b82:	4413      	add	r3, r2
 8012b84:	7ffa      	ldrb	r2, [r7, #31]
 8012b86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012b88:	e7a6      	b.n	8012ad8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012b8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	441a      	add	r2, r3
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d101      	bne.n	8012ba0 <create_name+0x160>
 8012b9c:	2306      	movs	r3, #6
 8012b9e:	e010      	b.n	8012bc2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	2be5      	cmp	r3, #229	; 0xe5
 8012ba6:	d102      	bne.n	8012bae <create_name+0x16e>
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	2205      	movs	r2, #5
 8012bac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012bae:	7ffb      	ldrb	r3, [r7, #31]
 8012bb0:	2b20      	cmp	r3, #32
 8012bb2:	d801      	bhi.n	8012bb8 <create_name+0x178>
 8012bb4:	2204      	movs	r2, #4
 8012bb6:	e000      	b.n	8012bba <create_name+0x17a>
 8012bb8:	2200      	movs	r2, #0
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	330b      	adds	r3, #11
 8012bbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012bc0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3720      	adds	r7, #32
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	0801a22c 	.word	0x0801a22c
 8012bd0:	0801a1dc 	.word	0x0801a1dc

08012bd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b086      	sub	sp, #24
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b2f      	cmp	r3, #47	; 0x2f
 8012bee:	d00b      	beq.n	8012c08 <follow_path+0x34>
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	2b5c      	cmp	r3, #92	; 0x5c
 8012bf6:	d007      	beq.n	8012c08 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	699a      	ldr	r2, [r3, #24]
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	609a      	str	r2, [r3, #8]
 8012c00:	e00d      	b.n	8012c1e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	3301      	adds	r3, #1
 8012c06:	603b      	str	r3, [r7, #0]
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8012c0e:	d0f8      	beq.n	8012c02 <follow_path+0x2e>
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	2b5c      	cmp	r3, #92	; 0x5c
 8012c16:	d0f4      	beq.n	8012c02 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	2b1f      	cmp	r3, #31
 8012c24:	d80a      	bhi.n	8012c3c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2280      	movs	r2, #128	; 0x80
 8012c2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c2e:	2100      	movs	r1, #0
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff fc1e 	bl	8012472 <dir_sdi>
 8012c36:	4603      	mov	r3, r0
 8012c38:	75fb      	strb	r3, [r7, #23]
 8012c3a:	e05b      	b.n	8012cf4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c3c:	463b      	mov	r3, r7
 8012c3e:	4619      	mov	r1, r3
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7ff fefd 	bl	8012a40 <create_name>
 8012c46:	4603      	mov	r3, r0
 8012c48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c4a:	7dfb      	ldrb	r3, [r7, #23]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d14c      	bne.n	8012cea <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f7ff fe50 	bl	80128f6 <dir_find>
 8012c56:	4603      	mov	r3, r0
 8012c58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d01b      	beq.n	8012ca0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c68:	7dfb      	ldrb	r3, [r7, #23]
 8012c6a:	2b04      	cmp	r3, #4
 8012c6c:	d13f      	bne.n	8012cee <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012c6e:	7afb      	ldrb	r3, [r7, #11]
 8012c70:	f003 0320 	and.w	r3, r3, #32
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00b      	beq.n	8012c90 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012c78:	7afb      	ldrb	r3, [r7, #11]
 8012c7a:	f003 0304 	and.w	r3, r3, #4
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d031      	beq.n	8012ce6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2280      	movs	r2, #128	; 0x80
 8012c86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012c8e:	e02e      	b.n	8012cee <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012c90:	7afb      	ldrb	r3, [r7, #11]
 8012c92:	f003 0304 	and.w	r3, r3, #4
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d129      	bne.n	8012cee <follow_path+0x11a>
 8012c9a:	2305      	movs	r3, #5
 8012c9c:	75fb      	strb	r3, [r7, #23]
				break;
 8012c9e:	e026      	b.n	8012cee <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ca0:	7afb      	ldrb	r3, [r7, #11]
 8012ca2:	f003 0304 	and.w	r3, r3, #4
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d123      	bne.n	8012cf2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	799b      	ldrb	r3, [r3, #6]
 8012cae:	f003 0310 	and.w	r3, r3, #16
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d102      	bne.n	8012cbc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012cb6:	2305      	movs	r3, #5
 8012cb8:	75fb      	strb	r3, [r7, #23]
 8012cba:	e01b      	b.n	8012cf4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	695b      	ldr	r3, [r3, #20]
 8012cc6:	68fa      	ldr	r2, [r7, #12]
 8012cc8:	8992      	ldrh	r2, [r2, #12]
 8012cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8012cce:	fb02 f200 	mul.w	r2, r2, r0
 8012cd2:	1a9b      	subs	r3, r3, r2
 8012cd4:	440b      	add	r3, r1
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	68f8      	ldr	r0, [r7, #12]
 8012cda:	f7ff fd70 	bl	80127be <ld_clust>
 8012cde:	4602      	mov	r2, r0
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	609a      	str	r2, [r3, #8]
 8012ce4:	e7aa      	b.n	8012c3c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012ce6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ce8:	e7a8      	b.n	8012c3c <follow_path+0x68>
			if (res != FR_OK) break;
 8012cea:	bf00      	nop
 8012cec:	e002      	b.n	8012cf4 <follow_path+0x120>
				break;
 8012cee:	bf00      	nop
 8012cf0:	e000      	b.n	8012cf4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012cf2:	bf00      	nop
			}
		}
	}

	return res;
 8012cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3718      	adds	r7, #24
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012cfe:	b480      	push	{r7}
 8012d00:	b087      	sub	sp, #28
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012d06:	f04f 33ff 	mov.w	r3, #4294967295
 8012d0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d031      	beq.n	8012d78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	617b      	str	r3, [r7, #20]
 8012d1a:	e002      	b.n	8012d22 <get_ldnumber+0x24>
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	617b      	str	r3, [r7, #20]
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	2b20      	cmp	r3, #32
 8012d28:	d903      	bls.n	8012d32 <get_ldnumber+0x34>
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d30:	d1f4      	bne.n	8012d1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	2b3a      	cmp	r3, #58	; 0x3a
 8012d38:	d11c      	bne.n	8012d74 <get_ldnumber+0x76>
			tp = *path;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	1c5a      	adds	r2, r3, #1
 8012d44:	60fa      	str	r2, [r7, #12]
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	3b30      	subs	r3, #48	; 0x30
 8012d4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	2b09      	cmp	r3, #9
 8012d50:	d80e      	bhi.n	8012d70 <get_ldnumber+0x72>
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d10a      	bne.n	8012d70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d107      	bne.n	8012d70 <get_ldnumber+0x72>
					vol = (int)i;
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	3301      	adds	r3, #1
 8012d68:	617b      	str	r3, [r7, #20]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	697a      	ldr	r2, [r7, #20]
 8012d6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	e002      	b.n	8012d7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d74:	2300      	movs	r3, #0
 8012d76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d78:	693b      	ldr	r3, [r7, #16]
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	371c      	adds	r7, #28
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr
	...

08012d88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2200      	movs	r2, #0
 8012d96:	70da      	strb	r2, [r3, #3]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012da0:	6839      	ldr	r1, [r7, #0]
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7fe ff8c 	bl	8011cc0 <move_window>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d001      	beq.n	8012db2 <check_fs+0x2a>
 8012dae:	2304      	movs	r3, #4
 8012db0:	e038      	b.n	8012e24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	3338      	adds	r3, #56	; 0x38
 8012db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fe fcd0 	bl	8011760 <ld_word>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d001      	beq.n	8012dd0 <check_fs+0x48>
 8012dcc:	2303      	movs	r3, #3
 8012dce:	e029      	b.n	8012e24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012dd6:	2be9      	cmp	r3, #233	; 0xe9
 8012dd8:	d009      	beq.n	8012dee <check_fs+0x66>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012de0:	2beb      	cmp	r3, #235	; 0xeb
 8012de2:	d11e      	bne.n	8012e22 <check_fs+0x9a>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012dea:	2b90      	cmp	r3, #144	; 0x90
 8012dec:	d119      	bne.n	8012e22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	3338      	adds	r3, #56	; 0x38
 8012df2:	3336      	adds	r3, #54	; 0x36
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7fe fccb 	bl	8011790 <ld_dword>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e00:	4a0a      	ldr	r2, [pc, #40]	; (8012e2c <check_fs+0xa4>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d101      	bne.n	8012e0a <check_fs+0x82>
 8012e06:	2300      	movs	r3, #0
 8012e08:	e00c      	b.n	8012e24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	3338      	adds	r3, #56	; 0x38
 8012e0e:	3352      	adds	r3, #82	; 0x52
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe fcbd 	bl	8011790 <ld_dword>
 8012e16:	4602      	mov	r2, r0
 8012e18:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <check_fs+0xa8>)
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d101      	bne.n	8012e22 <check_fs+0x9a>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	e000      	b.n	8012e24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012e22:	2302      	movs	r3, #2
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}
 8012e2c:	00544146 	.word	0x00544146
 8012e30:	33544146 	.word	0x33544146

08012e34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b096      	sub	sp, #88	; 0x58
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	2200      	movs	r2, #0
 8012e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f7ff ff58 	bl	8012cfe <get_ldnumber>
 8012e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	da01      	bge.n	8012e5a <find_volume+0x26>
 8012e56:	230b      	movs	r3, #11
 8012e58:	e268      	b.n	801332c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e5a:	4ab0      	ldr	r2, [pc, #704]	; (801311c <find_volume+0x2e8>)
 8012e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d101      	bne.n	8012e6e <find_volume+0x3a>
 8012e6a:	230c      	movs	r3, #12
 8012e6c:	e25e      	b.n	801332c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e74:	79fb      	ldrb	r3, [r7, #7]
 8012e76:	f023 0301 	bic.w	r3, r3, #1
 8012e7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d01a      	beq.n	8012eba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e86:	785b      	ldrb	r3, [r3, #1]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fe fbcb 	bl	8011624 <disk_status>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e98:	f003 0301 	and.w	r3, r3, #1
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d10c      	bne.n	8012eba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d007      	beq.n	8012eb6 <find_volume+0x82>
 8012ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eaa:	f003 0304 	and.w	r3, r3, #4
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d001      	beq.n	8012eb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012eb2:	230a      	movs	r3, #10
 8012eb4:	e23a      	b.n	801332c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	e238      	b.n	801332c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	785b      	ldrb	r3, [r3, #1]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7fe fbc3 	bl	8011658 <disk_initialize>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012edc:	f003 0301 	and.w	r3, r3, #1
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	e221      	b.n	801332c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ee8:	79fb      	ldrb	r3, [r7, #7]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d007      	beq.n	8012efe <find_volume+0xca>
 8012eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ef2:	f003 0304 	and.w	r3, r3, #4
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d001      	beq.n	8012efe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012efa:	230a      	movs	r3, #10
 8012efc:	e216      	b.n	801332c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f00:	7858      	ldrb	r0, [r3, #1]
 8012f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f04:	330c      	adds	r3, #12
 8012f06:	461a      	mov	r2, r3
 8012f08:	2102      	movs	r1, #2
 8012f0a:	f7fe fc0b 	bl	8011724 <disk_ioctl>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d001      	beq.n	8012f18 <find_volume+0xe4>
 8012f14:	2301      	movs	r3, #1
 8012f16:	e209      	b.n	801332c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	899b      	ldrh	r3, [r3, #12]
 8012f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f20:	d80d      	bhi.n	8012f3e <find_volume+0x10a>
 8012f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f24:	899b      	ldrh	r3, [r3, #12]
 8012f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f2a:	d308      	bcc.n	8012f3e <find_volume+0x10a>
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	899b      	ldrh	r3, [r3, #12]
 8012f30:	461a      	mov	r2, r3
 8012f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f34:	899b      	ldrh	r3, [r3, #12]
 8012f36:	3b01      	subs	r3, #1
 8012f38:	4013      	ands	r3, r2
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d001      	beq.n	8012f42 <find_volume+0x10e>
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e1f4      	b.n	801332c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012f46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f4a:	f7ff ff1d 	bl	8012d88 <check_fs>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012f54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d14b      	bne.n	8012ff4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8012f60:	e01f      	b.n	8012fa2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f6a:	011b      	lsls	r3, r3, #4
 8012f6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012f70:	4413      	add	r3, r2
 8012f72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f76:	3304      	adds	r3, #4
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d006      	beq.n	8012f8c <find_volume+0x158>
 8012f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f80:	3308      	adds	r3, #8
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fe fc04 	bl	8011790 <ld_dword>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	e000      	b.n	8012f8e <find_volume+0x15a>
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012f96:	440b      	add	r3, r1
 8012f98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8012fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa4:	2b03      	cmp	r3, #3
 8012fa6:	d9dc      	bls.n	8012f62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012fa8:	2300      	movs	r3, #0
 8012faa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d002      	beq.n	8012fb8 <find_volume+0x184>
 8012fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb4:	3b01      	subs	r3, #1
 8012fb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012fc0:	4413      	add	r3, r2
 8012fc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012fc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d005      	beq.n	8012fda <find_volume+0x1a6>
 8012fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fd2:	f7ff fed9 	bl	8012d88 <check_fs>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	e000      	b.n	8012fdc <find_volume+0x1a8>
 8012fda:	2303      	movs	r3, #3
 8012fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fe4:	2b01      	cmp	r3, #1
 8012fe6:	d905      	bls.n	8012ff4 <find_volume+0x1c0>
 8012fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fea:	3301      	adds	r3, #1
 8012fec:	643b      	str	r3, [r7, #64]	; 0x40
 8012fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ff0:	2b03      	cmp	r3, #3
 8012ff2:	d9e1      	bls.n	8012fb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ff8:	2b04      	cmp	r3, #4
 8012ffa:	d101      	bne.n	8013000 <find_volume+0x1cc>
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	e195      	b.n	801332c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013004:	2b01      	cmp	r3, #1
 8013006:	d901      	bls.n	801300c <find_volume+0x1d8>
 8013008:	230d      	movs	r3, #13
 801300a:	e18f      	b.n	801332c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	3338      	adds	r3, #56	; 0x38
 8013010:	330b      	adds	r3, #11
 8013012:	4618      	mov	r0, r3
 8013014:	f7fe fba4 	bl	8011760 <ld_word>
 8013018:	4603      	mov	r3, r0
 801301a:	461a      	mov	r2, r3
 801301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301e:	899b      	ldrh	r3, [r3, #12]
 8013020:	429a      	cmp	r2, r3
 8013022:	d001      	beq.n	8013028 <find_volume+0x1f4>
 8013024:	230d      	movs	r3, #13
 8013026:	e181      	b.n	801332c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302a:	3338      	adds	r3, #56	; 0x38
 801302c:	3316      	adds	r3, #22
 801302e:	4618      	mov	r0, r3
 8013030:	f7fe fb96 	bl	8011760 <ld_word>
 8013034:	4603      	mov	r3, r0
 8013036:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801303a:	2b00      	cmp	r3, #0
 801303c:	d106      	bne.n	801304c <find_volume+0x218>
 801303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013040:	3338      	adds	r3, #56	; 0x38
 8013042:	3324      	adds	r3, #36	; 0x24
 8013044:	4618      	mov	r0, r3
 8013046:	f7fe fba3 	bl	8011790 <ld_dword>
 801304a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013050:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013054:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305e:	789b      	ldrb	r3, [r3, #2]
 8013060:	2b01      	cmp	r3, #1
 8013062:	d005      	beq.n	8013070 <find_volume+0x23c>
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	789b      	ldrb	r3, [r3, #2]
 8013068:	2b02      	cmp	r3, #2
 801306a:	d001      	beq.n	8013070 <find_volume+0x23c>
 801306c:	230d      	movs	r3, #13
 801306e:	e15d      	b.n	801332c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013072:	789b      	ldrb	r3, [r3, #2]
 8013074:	461a      	mov	r2, r3
 8013076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013078:	fb02 f303 	mul.w	r3, r2, r3
 801307c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013084:	b29a      	uxth	r2, r3
 8013086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013088:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308c:	895b      	ldrh	r3, [r3, #10]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d008      	beq.n	80130a4 <find_volume+0x270>
 8013092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013094:	895b      	ldrh	r3, [r3, #10]
 8013096:	461a      	mov	r2, r3
 8013098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309a:	895b      	ldrh	r3, [r3, #10]
 801309c:	3b01      	subs	r3, #1
 801309e:	4013      	ands	r3, r2
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d001      	beq.n	80130a8 <find_volume+0x274>
 80130a4:	230d      	movs	r3, #13
 80130a6:	e141      	b.n	801332c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	3338      	adds	r3, #56	; 0x38
 80130ac:	3311      	adds	r3, #17
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fe fb56 	bl	8011760 <ld_word>
 80130b4:	4603      	mov	r3, r0
 80130b6:	461a      	mov	r2, r3
 80130b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80130bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130be:	891b      	ldrh	r3, [r3, #8]
 80130c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130c2:	8992      	ldrh	r2, [r2, #12]
 80130c4:	0952      	lsrs	r2, r2, #5
 80130c6:	b292      	uxth	r2, r2
 80130c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80130cc:	fb02 f201 	mul.w	r2, r2, r1
 80130d0:	1a9b      	subs	r3, r3, r2
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d001      	beq.n	80130dc <find_volume+0x2a8>
 80130d8:	230d      	movs	r3, #13
 80130da:	e127      	b.n	801332c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	3338      	adds	r3, #56	; 0x38
 80130e0:	3313      	adds	r3, #19
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fe fb3c 	bl	8011760 <ld_word>
 80130e8:	4603      	mov	r3, r0
 80130ea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80130ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d106      	bne.n	8013100 <find_volume+0x2cc>
 80130f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f4:	3338      	adds	r3, #56	; 0x38
 80130f6:	3320      	adds	r3, #32
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fe fb49 	bl	8011790 <ld_dword>
 80130fe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013102:	3338      	adds	r3, #56	; 0x38
 8013104:	330e      	adds	r3, #14
 8013106:	4618      	mov	r0, r3
 8013108:	f7fe fb2a 	bl	8011760 <ld_word>
 801310c:	4603      	mov	r3, r0
 801310e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013112:	2b00      	cmp	r3, #0
 8013114:	d104      	bne.n	8013120 <find_volume+0x2ec>
 8013116:	230d      	movs	r3, #13
 8013118:	e108      	b.n	801332c <find_volume+0x4f8>
 801311a:	bf00      	nop
 801311c:	20042464 	.word	0x20042464

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013124:	4413      	add	r3, r2
 8013126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013128:	8911      	ldrh	r1, [r2, #8]
 801312a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801312c:	8992      	ldrh	r2, [r2, #12]
 801312e:	0952      	lsrs	r2, r2, #5
 8013130:	b292      	uxth	r2, r2
 8013132:	fbb1 f2f2 	udiv	r2, r1, r2
 8013136:	b292      	uxth	r2, r2
 8013138:	4413      	add	r3, r2
 801313a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801313c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	429a      	cmp	r2, r3
 8013142:	d201      	bcs.n	8013148 <find_volume+0x314>
 8013144:	230d      	movs	r3, #13
 8013146:	e0f1      	b.n	801332c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314c:	1ad3      	subs	r3, r2, r3
 801314e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013150:	8952      	ldrh	r2, [r2, #10]
 8013152:	fbb3 f3f2 	udiv	r3, r3, r2
 8013156:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	2b00      	cmp	r3, #0
 801315c:	d101      	bne.n	8013162 <find_volume+0x32e>
 801315e:	230d      	movs	r3, #13
 8013160:	e0e4      	b.n	801332c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013162:	2303      	movs	r3, #3
 8013164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801316e:	4293      	cmp	r3, r2
 8013170:	d802      	bhi.n	8013178 <find_volume+0x344>
 8013172:	2302      	movs	r3, #2
 8013174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801317e:	4293      	cmp	r3, r2
 8013180:	d802      	bhi.n	8013188 <find_volume+0x354>
 8013182:	2301      	movs	r3, #1
 8013184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318a:	1c9a      	adds	r2, r3, #2
 801318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013194:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801319a:	441a      	add	r2, r3
 801319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80131a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a4:	441a      	add	r2, r3
 80131a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80131aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131ae:	2b03      	cmp	r3, #3
 80131b0:	d11e      	bne.n	80131f0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80131b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b4:	3338      	adds	r3, #56	; 0x38
 80131b6:	332a      	adds	r3, #42	; 0x2a
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7fe fad1 	bl	8011760 <ld_word>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <find_volume+0x394>
 80131c4:	230d      	movs	r3, #13
 80131c6:	e0b1      	b.n	801332c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	891b      	ldrh	r3, [r3, #8]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <find_volume+0x3a0>
 80131d0:	230d      	movs	r3, #13
 80131d2:	e0ab      	b.n	801332c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80131d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d6:	3338      	adds	r3, #56	; 0x38
 80131d8:	332c      	adds	r3, #44	; 0x2c
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fe fad8 	bl	8011790 <ld_dword>
 80131e0:	4602      	mov	r2, r0
 80131e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80131e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e8:	69db      	ldr	r3, [r3, #28]
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	647b      	str	r3, [r7, #68]	; 0x44
 80131ee:	e01f      	b.n	8013230 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80131f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f2:	891b      	ldrh	r3, [r3, #8]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d101      	bne.n	80131fc <find_volume+0x3c8>
 80131f8:	230d      	movs	r3, #13
 80131fa:	e097      	b.n	801332c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013202:	441a      	add	r2, r3
 8013204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013206:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801320c:	2b02      	cmp	r3, #2
 801320e:	d103      	bne.n	8013218 <find_volume+0x3e4>
 8013210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013212:	69db      	ldr	r3, [r3, #28]
 8013214:	005b      	lsls	r3, r3, #1
 8013216:	e00a      	b.n	801322e <find_volume+0x3fa>
 8013218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321a:	69da      	ldr	r2, [r3, #28]
 801321c:	4613      	mov	r3, r2
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	4413      	add	r3, r2
 8013222:	085a      	lsrs	r2, r3, #1
 8013224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013226:	69db      	ldr	r3, [r3, #28]
 8013228:	f003 0301 	and.w	r3, r3, #1
 801322c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801322e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013232:	6a1a      	ldr	r2, [r3, #32]
 8013234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013236:	899b      	ldrh	r3, [r3, #12]
 8013238:	4619      	mov	r1, r3
 801323a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801323c:	440b      	add	r3, r1
 801323e:	3b01      	subs	r3, #1
 8013240:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013242:	8989      	ldrh	r1, [r1, #12]
 8013244:	fbb3 f3f1 	udiv	r3, r3, r1
 8013248:	429a      	cmp	r2, r3
 801324a:	d201      	bcs.n	8013250 <find_volume+0x41c>
 801324c:	230d      	movs	r3, #13
 801324e:	e06d      	b.n	801332c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	f04f 32ff 	mov.w	r2, #4294967295
 8013256:	615a      	str	r2, [r3, #20]
 8013258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325a:	695a      	ldr	r2, [r3, #20]
 801325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801325e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013262:	2280      	movs	r2, #128	; 0x80
 8013264:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801326a:	2b03      	cmp	r3, #3
 801326c:	d149      	bne.n	8013302 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801326e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013270:	3338      	adds	r3, #56	; 0x38
 8013272:	3330      	adds	r3, #48	; 0x30
 8013274:	4618      	mov	r0, r3
 8013276:	f7fe fa73 	bl	8011760 <ld_word>
 801327a:	4603      	mov	r3, r0
 801327c:	2b01      	cmp	r3, #1
 801327e:	d140      	bne.n	8013302 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013282:	3301      	adds	r3, #1
 8013284:	4619      	mov	r1, r3
 8013286:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013288:	f7fe fd1a 	bl	8011cc0 <move_window>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d137      	bne.n	8013302 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8013292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013294:	2200      	movs	r2, #0
 8013296:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329a:	3338      	adds	r3, #56	; 0x38
 801329c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fe fa5d 	bl	8011760 <ld_word>
 80132a6:	4603      	mov	r3, r0
 80132a8:	461a      	mov	r2, r3
 80132aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d127      	bne.n	8013302 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80132b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b4:	3338      	adds	r3, #56	; 0x38
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe fa6a 	bl	8011790 <ld_dword>
 80132bc:	4602      	mov	r2, r0
 80132be:	4b1d      	ldr	r3, [pc, #116]	; (8013334 <find_volume+0x500>)
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d11e      	bne.n	8013302 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80132c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c6:	3338      	adds	r3, #56	; 0x38
 80132c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fe fa5f 	bl	8011790 <ld_dword>
 80132d2:	4602      	mov	r2, r0
 80132d4:	4b18      	ldr	r3, [pc, #96]	; (8013338 <find_volume+0x504>)
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d113      	bne.n	8013302 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80132da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132dc:	3338      	adds	r3, #56	; 0x38
 80132de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fe fa54 	bl	8011790 <ld_dword>
 80132e8:	4602      	mov	r2, r0
 80132ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80132ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f0:	3338      	adds	r3, #56	; 0x38
 80132f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fe fa4a 	bl	8011790 <ld_dword>
 80132fc:	4602      	mov	r2, r0
 80132fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013300:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013304:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013308:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801330a:	4b0c      	ldr	r3, [pc, #48]	; (801333c <find_volume+0x508>)
 801330c:	881b      	ldrh	r3, [r3, #0]
 801330e:	3301      	adds	r3, #1
 8013310:	b29a      	uxth	r2, r3
 8013312:	4b0a      	ldr	r3, [pc, #40]	; (801333c <find_volume+0x508>)
 8013314:	801a      	strh	r2, [r3, #0]
 8013316:	4b09      	ldr	r3, [pc, #36]	; (801333c <find_volume+0x508>)
 8013318:	881a      	ldrh	r2, [r3, #0]
 801331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013320:	2200      	movs	r2, #0
 8013322:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013326:	f7fe fc63 	bl	8011bf0 <clear_lock>
#endif
	return FR_OK;
 801332a:	2300      	movs	r3, #0
}
 801332c:	4618      	mov	r0, r3
 801332e:	3758      	adds	r7, #88	; 0x58
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	41615252 	.word	0x41615252
 8013338:	61417272 	.word	0x61417272
 801333c:	20042468 	.word	0x20042468

08013340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801334a:	2309      	movs	r3, #9
 801334c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d01c      	beq.n	801338e <validate+0x4e>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d018      	beq.n	801338e <validate+0x4e>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d013      	beq.n	801338e <validate+0x4e>
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	889a      	ldrh	r2, [r3, #4]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	88db      	ldrh	r3, [r3, #6]
 8013370:	429a      	cmp	r2, r3
 8013372:	d10c      	bne.n	801338e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	785b      	ldrb	r3, [r3, #1]
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe f952 	bl	8011624 <disk_status>
 8013380:	4603      	mov	r3, r0
 8013382:	f003 0301 	and.w	r3, r3, #1
 8013386:	2b00      	cmp	r3, #0
 8013388:	d101      	bne.n	801338e <validate+0x4e>
			res = FR_OK;
 801338a:	2300      	movs	r3, #0
 801338c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801338e:	7bfb      	ldrb	r3, [r7, #15]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d102      	bne.n	801339a <validate+0x5a>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	e000      	b.n	801339c <validate+0x5c>
 801339a:	2300      	movs	r3, #0
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	6013      	str	r3, [r2, #0]
	return res;
 80133a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3710      	adds	r7, #16
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
	...

080133ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b088      	sub	sp, #32
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	60f8      	str	r0, [r7, #12]
 80133b4:	60b9      	str	r1, [r7, #8]
 80133b6:	4613      	mov	r3, r2
 80133b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80133be:	f107 0310 	add.w	r3, r7, #16
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7ff fc9b 	bl	8012cfe <get_ldnumber>
 80133c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	da01      	bge.n	80133d4 <f_mount+0x28>
 80133d0:	230b      	movs	r3, #11
 80133d2:	e02b      	b.n	801342c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80133d4:	4a17      	ldr	r2, [pc, #92]	; (8013434 <f_mount+0x88>)
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d005      	beq.n	80133f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80133e4:	69b8      	ldr	r0, [r7, #24]
 80133e6:	f7fe fc03 	bl	8011bf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	2200      	movs	r2, #0
 80133ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d002      	beq.n	80133fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2200      	movs	r2, #0
 80133fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	490d      	ldr	r1, [pc, #52]	; (8013434 <f_mount+0x88>)
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d002      	beq.n	8013412 <f_mount+0x66>
 801340c:	79fb      	ldrb	r3, [r7, #7]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d001      	beq.n	8013416 <f_mount+0x6a>
 8013412:	2300      	movs	r3, #0
 8013414:	e00a      	b.n	801342c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013416:	f107 010c 	add.w	r1, r7, #12
 801341a:	f107 0308 	add.w	r3, r7, #8
 801341e:	2200      	movs	r2, #0
 8013420:	4618      	mov	r0, r3
 8013422:	f7ff fd07 	bl	8012e34 <find_volume>
 8013426:	4603      	mov	r3, r0
 8013428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801342a:	7dfb      	ldrb	r3, [r7, #23]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3720      	adds	r7, #32
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	20042464 	.word	0x20042464

08013438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b098      	sub	sp, #96	; 0x60
 801343c:	af00      	add	r7, sp, #0
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	4613      	mov	r3, r2
 8013444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d101      	bne.n	8013450 <f_open+0x18>
 801344c:	2309      	movs	r3, #9
 801344e:	e1ba      	b.n	80137c6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013450:	79fb      	ldrb	r3, [r7, #7]
 8013452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013458:	79fa      	ldrb	r2, [r7, #7]
 801345a:	f107 0110 	add.w	r1, r7, #16
 801345e:	f107 0308 	add.w	r3, r7, #8
 8013462:	4618      	mov	r0, r3
 8013464:	f7ff fce6 	bl	8012e34 <find_volume>
 8013468:	4603      	mov	r3, r0
 801346a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801346e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013472:	2b00      	cmp	r3, #0
 8013474:	f040 819e 	bne.w	80137b4 <f_open+0x37c>
		dj.obj.fs = fs;
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	f107 0314 	add.w	r3, r7, #20
 8013482:	4611      	mov	r1, r2
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff fba5 	bl	8012bd4 <follow_path>
 801348a:	4603      	mov	r3, r0
 801348c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013494:	2b00      	cmp	r3, #0
 8013496:	d11a      	bne.n	80134ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801349c:	b25b      	sxtb	r3, r3
 801349e:	2b00      	cmp	r3, #0
 80134a0:	da03      	bge.n	80134aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80134a2:	2306      	movs	r3, #6
 80134a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134a8:	e011      	b.n	80134ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134aa:	79fb      	ldrb	r3, [r7, #7]
 80134ac:	f023 0301 	bic.w	r3, r3, #1
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	bf14      	ite	ne
 80134b4:	2301      	movne	r3, #1
 80134b6:	2300      	moveq	r3, #0
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	461a      	mov	r2, r3
 80134bc:	f107 0314 	add.w	r3, r7, #20
 80134c0:	4611      	mov	r1, r2
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fe fa4c 	bl	8011960 <chk_lock>
 80134c8:	4603      	mov	r3, r0
 80134ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134ce:	79fb      	ldrb	r3, [r7, #7]
 80134d0:	f003 031c 	and.w	r3, r3, #28
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d07e      	beq.n	80135d6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80134d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d017      	beq.n	8013510 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80134e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134e4:	2b04      	cmp	r3, #4
 80134e6:	d10e      	bne.n	8013506 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80134e8:	f7fe fa96 	bl	8011a18 <enq_lock>
 80134ec:	4603      	mov	r3, r0
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d006      	beq.n	8013500 <f_open+0xc8>
 80134f2:	f107 0314 	add.w	r3, r7, #20
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ff fa52 	bl	80129a0 <dir_register>
 80134fc:	4603      	mov	r3, r0
 80134fe:	e000      	b.n	8013502 <f_open+0xca>
 8013500:	2312      	movs	r3, #18
 8013502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013506:	79fb      	ldrb	r3, [r7, #7]
 8013508:	f043 0308 	orr.w	r3, r3, #8
 801350c:	71fb      	strb	r3, [r7, #7]
 801350e:	e010      	b.n	8013532 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013510:	7ebb      	ldrb	r3, [r7, #26]
 8013512:	f003 0311 	and.w	r3, r3, #17
 8013516:	2b00      	cmp	r3, #0
 8013518:	d003      	beq.n	8013522 <f_open+0xea>
					res = FR_DENIED;
 801351a:	2307      	movs	r3, #7
 801351c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013520:	e007      	b.n	8013532 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013522:	79fb      	ldrb	r3, [r7, #7]
 8013524:	f003 0304 	and.w	r3, r3, #4
 8013528:	2b00      	cmp	r3, #0
 801352a:	d002      	beq.n	8013532 <f_open+0xfa>
 801352c:	2308      	movs	r3, #8
 801352e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013536:	2b00      	cmp	r3, #0
 8013538:	d167      	bne.n	801360a <f_open+0x1d2>
 801353a:	79fb      	ldrb	r3, [r7, #7]
 801353c:	f003 0308 	and.w	r3, r3, #8
 8013540:	2b00      	cmp	r3, #0
 8013542:	d062      	beq.n	801360a <f_open+0x1d2>
				dw = GET_FATTIME();
 8013544:	4ba2      	ldr	r3, [pc, #648]	; (80137d0 <f_open+0x398>)
 8013546:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801354a:	330e      	adds	r3, #14
 801354c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801354e:	4618      	mov	r0, r3
 8013550:	f7fe f95c 	bl	801180c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013556:	3316      	adds	r3, #22
 8013558:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801355a:	4618      	mov	r0, r3
 801355c:	f7fe f956 	bl	801180c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013562:	330b      	adds	r3, #11
 8013564:	2220      	movs	r2, #32
 8013566:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801356c:	4611      	mov	r1, r2
 801356e:	4618      	mov	r0, r3
 8013570:	f7ff f925 	bl	80127be <ld_clust>
 8013574:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801357a:	2200      	movs	r2, #0
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff f93d 	bl	80127fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013584:	331c      	adds	r3, #28
 8013586:	2100      	movs	r1, #0
 8013588:	4618      	mov	r0, r3
 801358a:	f7fe f93f 	bl	801180c <st_dword>
					fs->wflag = 1;
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	2201      	movs	r2, #1
 8013592:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013596:	2b00      	cmp	r3, #0
 8013598:	d037      	beq.n	801360a <f_open+0x1d2>
						dw = fs->winsect;
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801359e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80135a0:	f107 0314 	add.w	r3, r7, #20
 80135a4:	2200      	movs	r2, #0
 80135a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fe fe2d 	bl	8012208 <remove_chain>
 80135ae:	4603      	mov	r3, r0
 80135b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80135b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d126      	bne.n	801360a <f_open+0x1d2>
							res = move_window(fs, dw);
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fe fb7d 	bl	8011cc0 <move_window>
 80135c6:	4603      	mov	r3, r0
 80135c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135d0:	3a01      	subs	r2, #1
 80135d2:	611a      	str	r2, [r3, #16]
 80135d4:	e019      	b.n	801360a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80135d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d115      	bne.n	801360a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80135de:	7ebb      	ldrb	r3, [r7, #26]
 80135e0:	f003 0310 	and.w	r3, r3, #16
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d003      	beq.n	80135f0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80135e8:	2304      	movs	r3, #4
 80135ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135ee:	e00c      	b.n	801360a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80135f0:	79fb      	ldrb	r3, [r7, #7]
 80135f2:	f003 0302 	and.w	r3, r3, #2
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d007      	beq.n	801360a <f_open+0x1d2>
 80135fa:	7ebb      	ldrb	r3, [r7, #26]
 80135fc:	f003 0301 	and.w	r3, r3, #1
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <f_open+0x1d2>
						res = FR_DENIED;
 8013604:	2307      	movs	r3, #7
 8013606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801360a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801360e:	2b00      	cmp	r3, #0
 8013610:	d128      	bne.n	8013664 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013612:	79fb      	ldrb	r3, [r7, #7]
 8013614:	f003 0308 	and.w	r3, r3, #8
 8013618:	2b00      	cmp	r3, #0
 801361a:	d003      	beq.n	8013624 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801361c:	79fb      	ldrb	r3, [r7, #7]
 801361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013622:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801362c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013632:	79fb      	ldrb	r3, [r7, #7]
 8013634:	f023 0301 	bic.w	r3, r3, #1
 8013638:	2b00      	cmp	r3, #0
 801363a:	bf14      	ite	ne
 801363c:	2301      	movne	r3, #1
 801363e:	2300      	moveq	r3, #0
 8013640:	b2db      	uxtb	r3, r3
 8013642:	461a      	mov	r2, r3
 8013644:	f107 0314 	add.w	r3, r7, #20
 8013648:	4611      	mov	r1, r2
 801364a:	4618      	mov	r0, r3
 801364c:	f7fe fa06 	bl	8011a5c <inc_lock>
 8013650:	4602      	mov	r2, r0
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	691b      	ldr	r3, [r3, #16]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d102      	bne.n	8013664 <f_open+0x22c>
 801365e:	2302      	movs	r3, #2
 8013660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013668:	2b00      	cmp	r3, #0
 801366a:	f040 80a3 	bne.w	80137b4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013672:	4611      	mov	r1, r2
 8013674:	4618      	mov	r0, r3
 8013676:	f7ff f8a2 	bl	80127be <ld_clust>
 801367a:	4602      	mov	r2, r0
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013682:	331c      	adds	r3, #28
 8013684:	4618      	mov	r0, r3
 8013686:	f7fe f883 	bl	8011790 <ld_dword>
 801368a:	4602      	mov	r2, r0
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2200      	movs	r2, #0
 8013694:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013696:	693a      	ldr	r2, [r7, #16]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	88da      	ldrh	r2, [r3, #6]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	79fa      	ldrb	r2, [r7, #7]
 80136a8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2200      	movs	r2, #0
 80136ae:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2200      	movs	r2, #0
 80136b4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2200      	movs	r2, #0
 80136ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	3330      	adds	r3, #48	; 0x30
 80136c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80136c4:	2100      	movs	r1, #0
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fe f8ed 	bl	80118a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80136cc:	79fb      	ldrb	r3, [r7, #7]
 80136ce:	f003 0320 	and.w	r3, r3, #32
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d06e      	beq.n	80137b4 <f_open+0x37c>
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	68db      	ldr	r3, [r3, #12]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d06a      	beq.n	80137b4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	68da      	ldr	r2, [r3, #12]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	895b      	ldrh	r3, [r3, #10]
 80136ea:	461a      	mov	r2, r3
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	899b      	ldrh	r3, [r3, #12]
 80136f0:	fb03 f302 	mul.w	r3, r3, r2
 80136f4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	689b      	ldr	r3, [r3, #8]
 80136fa:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	657b      	str	r3, [r7, #84]	; 0x54
 8013702:	e016      	b.n	8013732 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013708:	4618      	mov	r0, r3
 801370a:	f7fe fb96 	bl	8011e3a <get_fat>
 801370e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013712:	2b01      	cmp	r3, #1
 8013714:	d802      	bhi.n	801371c <f_open+0x2e4>
 8013716:	2302      	movs	r3, #2
 8013718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801371c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013722:	d102      	bne.n	801372a <f_open+0x2f2>
 8013724:	2301      	movs	r3, #1
 8013726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801372a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801372c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801372e:	1ad3      	subs	r3, r2, r3
 8013730:	657b      	str	r3, [r7, #84]	; 0x54
 8013732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013736:	2b00      	cmp	r3, #0
 8013738:	d103      	bne.n	8013742 <f_open+0x30a>
 801373a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801373c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801373e:	429a      	cmp	r2, r3
 8013740:	d8e0      	bhi.n	8013704 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013746:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801374c:	2b00      	cmp	r3, #0
 801374e:	d131      	bne.n	80137b4 <f_open+0x37c>
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	899b      	ldrh	r3, [r3, #12]
 8013754:	461a      	mov	r2, r3
 8013756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013758:	fbb3 f1f2 	udiv	r1, r3, r2
 801375c:	fb02 f201 	mul.w	r2, r2, r1
 8013760:	1a9b      	subs	r3, r3, r2
 8013762:	2b00      	cmp	r3, #0
 8013764:	d026      	beq.n	80137b4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801376a:	4618      	mov	r0, r3
 801376c:	f7fe fb46 	bl	8011dfc <clust2sect>
 8013770:	6478      	str	r0, [r7, #68]	; 0x44
 8013772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013774:	2b00      	cmp	r3, #0
 8013776:	d103      	bne.n	8013780 <f_open+0x348>
						res = FR_INT_ERR;
 8013778:	2302      	movs	r3, #2
 801377a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801377e:	e019      	b.n	80137b4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	899b      	ldrh	r3, [r3, #12]
 8013784:	461a      	mov	r2, r3
 8013786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013788:	fbb3 f2f2 	udiv	r2, r3, r2
 801378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801378e:	441a      	add	r2, r3
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	7858      	ldrb	r0, [r3, #1]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	6a1a      	ldr	r2, [r3, #32]
 80137a2:	2301      	movs	r3, #1
 80137a4:	f7fd ff7e 	bl	80116a4 <disk_read>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d002      	beq.n	80137b4 <f_open+0x37c>
 80137ae:	2301      	movs	r3, #1
 80137b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80137b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d002      	beq.n	80137c2 <f_open+0x38a>
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2200      	movs	r2, #0
 80137c0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3760      	adds	r7, #96	; 0x60
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	274a0000 	.word	0x274a0000

080137d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b08e      	sub	sp, #56	; 0x38
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	607a      	str	r2, [r7, #4]
 80137e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2200      	movs	r2, #0
 80137ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f107 0214 	add.w	r2, r7, #20
 80137f2:	4611      	mov	r1, r2
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7ff fda3 	bl	8013340 <validate>
 80137fa:	4603      	mov	r3, r0
 80137fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013804:	2b00      	cmp	r3, #0
 8013806:	d107      	bne.n	8013818 <f_read+0x44>
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	7d5b      	ldrb	r3, [r3, #21]
 801380c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013814:	2b00      	cmp	r3, #0
 8013816:	d002      	beq.n	801381e <f_read+0x4a>
 8013818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801381c:	e135      	b.n	8013a8a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	7d1b      	ldrb	r3, [r3, #20]
 8013822:	f003 0301 	and.w	r3, r3, #1
 8013826:	2b00      	cmp	r3, #0
 8013828:	d101      	bne.n	801382e <f_read+0x5a>
 801382a:	2307      	movs	r3, #7
 801382c:	e12d      	b.n	8013a8a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	68da      	ldr	r2, [r3, #12]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	699b      	ldr	r3, [r3, #24]
 8013836:	1ad3      	subs	r3, r2, r3
 8013838:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	6a3b      	ldr	r3, [r7, #32]
 801383e:	429a      	cmp	r2, r3
 8013840:	f240 811e 	bls.w	8013a80 <f_read+0x2ac>
 8013844:	6a3b      	ldr	r3, [r7, #32]
 8013846:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013848:	e11a      	b.n	8013a80 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	699b      	ldr	r3, [r3, #24]
 801384e:	697a      	ldr	r2, [r7, #20]
 8013850:	8992      	ldrh	r2, [r2, #12]
 8013852:	fbb3 f1f2 	udiv	r1, r3, r2
 8013856:	fb02 f201 	mul.w	r2, r2, r1
 801385a:	1a9b      	subs	r3, r3, r2
 801385c:	2b00      	cmp	r3, #0
 801385e:	f040 80d5 	bne.w	8013a0c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	699b      	ldr	r3, [r3, #24]
 8013866:	697a      	ldr	r2, [r7, #20]
 8013868:	8992      	ldrh	r2, [r2, #12]
 801386a:	fbb3 f3f2 	udiv	r3, r3, r2
 801386e:	697a      	ldr	r2, [r7, #20]
 8013870:	8952      	ldrh	r2, [r2, #10]
 8013872:	3a01      	subs	r2, #1
 8013874:	4013      	ands	r3, r2
 8013876:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d12f      	bne.n	80138de <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	699b      	ldr	r3, [r3, #24]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d103      	bne.n	801388e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	633b      	str	r3, [r7, #48]	; 0x30
 801388c:	e013      	b.n	80138b6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013892:	2b00      	cmp	r3, #0
 8013894:	d007      	beq.n	80138a6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	699b      	ldr	r3, [r3, #24]
 801389a:	4619      	mov	r1, r3
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f7fe fdb0 	bl	8012402 <clmt_clust>
 80138a2:	6338      	str	r0, [r7, #48]	; 0x30
 80138a4:	e007      	b.n	80138b6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80138a6:	68fa      	ldr	r2, [r7, #12]
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	69db      	ldr	r3, [r3, #28]
 80138ac:	4619      	mov	r1, r3
 80138ae:	4610      	mov	r0, r2
 80138b0:	f7fe fac3 	bl	8011e3a <get_fat>
 80138b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80138b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b8:	2b01      	cmp	r3, #1
 80138ba:	d804      	bhi.n	80138c6 <f_read+0xf2>
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2202      	movs	r2, #2
 80138c0:	755a      	strb	r2, [r3, #21]
 80138c2:	2302      	movs	r3, #2
 80138c4:	e0e1      	b.n	8013a8a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138cc:	d104      	bne.n	80138d8 <f_read+0x104>
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2201      	movs	r2, #1
 80138d2:	755a      	strb	r2, [r3, #21]
 80138d4:	2301      	movs	r3, #1
 80138d6:	e0d8      	b.n	8013a8a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80138de:	697a      	ldr	r2, [r7, #20]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	69db      	ldr	r3, [r3, #28]
 80138e4:	4619      	mov	r1, r3
 80138e6:	4610      	mov	r0, r2
 80138e8:	f7fe fa88 	bl	8011dfc <clust2sect>
 80138ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d104      	bne.n	80138fe <f_read+0x12a>
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2202      	movs	r2, #2
 80138f8:	755a      	strb	r2, [r3, #21]
 80138fa:	2302      	movs	r3, #2
 80138fc:	e0c5      	b.n	8013a8a <f_read+0x2b6>
			sect += csect;
 80138fe:	69ba      	ldr	r2, [r7, #24]
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	4413      	add	r3, r2
 8013904:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	899b      	ldrh	r3, [r3, #12]
 801390a:	461a      	mov	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013912:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013916:	2b00      	cmp	r3, #0
 8013918:	d041      	beq.n	801399e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801391a:	69fa      	ldr	r2, [r7, #28]
 801391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801391e:	4413      	add	r3, r2
 8013920:	697a      	ldr	r2, [r7, #20]
 8013922:	8952      	ldrh	r2, [r2, #10]
 8013924:	4293      	cmp	r3, r2
 8013926:	d905      	bls.n	8013934 <f_read+0x160>
					cc = fs->csize - csect;
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	895b      	ldrh	r3, [r3, #10]
 801392c:	461a      	mov	r2, r3
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	1ad3      	subs	r3, r2, r3
 8013932:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	7858      	ldrb	r0, [r3, #1]
 8013938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393a:	69ba      	ldr	r2, [r7, #24]
 801393c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801393e:	f7fd feb1 	bl	80116a4 <disk_read>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d004      	beq.n	8013952 <f_read+0x17e>
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	2201      	movs	r2, #1
 801394c:	755a      	strb	r2, [r3, #21]
 801394e:	2301      	movs	r3, #1
 8013950:	e09b      	b.n	8013a8a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	7d1b      	ldrb	r3, [r3, #20]
 8013956:	b25b      	sxtb	r3, r3
 8013958:	2b00      	cmp	r3, #0
 801395a:	da18      	bge.n	801398e <f_read+0x1ba>
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	6a1a      	ldr	r2, [r3, #32]
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013966:	429a      	cmp	r2, r3
 8013968:	d911      	bls.n	801398e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	6a1a      	ldr	r2, [r3, #32]
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	1ad3      	subs	r3, r2, r3
 8013972:	697a      	ldr	r2, [r7, #20]
 8013974:	8992      	ldrh	r2, [r2, #12]
 8013976:	fb02 f303 	mul.w	r3, r2, r3
 801397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801397c:	18d0      	adds	r0, r2, r3
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	899b      	ldrh	r3, [r3, #12]
 8013988:	461a      	mov	r2, r3
 801398a:	f7fd ff6b 	bl	8011864 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	899b      	ldrh	r3, [r3, #12]
 8013992:	461a      	mov	r2, r3
 8013994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013996:	fb02 f303 	mul.w	r3, r2, r3
 801399a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801399c:	e05c      	b.n	8013a58 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	6a1b      	ldr	r3, [r3, #32]
 80139a2:	69ba      	ldr	r2, [r7, #24]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d02e      	beq.n	8013a06 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	7d1b      	ldrb	r3, [r3, #20]
 80139ac:	b25b      	sxtb	r3, r3
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	da18      	bge.n	80139e4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139b2:	697b      	ldr	r3, [r7, #20]
 80139b4:	7858      	ldrb	r0, [r3, #1]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	6a1a      	ldr	r2, [r3, #32]
 80139c0:	2301      	movs	r3, #1
 80139c2:	f7fd fe8f 	bl	80116e4 <disk_write>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d004      	beq.n	80139d6 <f_read+0x202>
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2201      	movs	r2, #1
 80139d0:	755a      	strb	r2, [r3, #21]
 80139d2:	2301      	movs	r3, #1
 80139d4:	e059      	b.n	8013a8a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	7d1b      	ldrb	r3, [r3, #20]
 80139da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139de:	b2da      	uxtb	r2, r3
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	7858      	ldrb	r0, [r3, #1]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139ee:	2301      	movs	r3, #1
 80139f0:	69ba      	ldr	r2, [r7, #24]
 80139f2:	f7fd fe57 	bl	80116a4 <disk_read>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d004      	beq.n	8013a06 <f_read+0x232>
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2201      	movs	r2, #1
 8013a00:	755a      	strb	r2, [r3, #21]
 8013a02:	2301      	movs	r3, #1
 8013a04:	e041      	b.n	8013a8a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	69ba      	ldr	r2, [r7, #24]
 8013a0a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	899b      	ldrh	r3, [r3, #12]
 8013a10:	4618      	mov	r0, r3
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	699b      	ldr	r3, [r3, #24]
 8013a16:	697a      	ldr	r2, [r7, #20]
 8013a18:	8992      	ldrh	r2, [r2, #12]
 8013a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a1e:	fb02 f201 	mul.w	r2, r2, r1
 8013a22:	1a9b      	subs	r3, r3, r2
 8013a24:	1ac3      	subs	r3, r0, r3
 8013a26:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d901      	bls.n	8013a34 <f_read+0x260>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	699b      	ldr	r3, [r3, #24]
 8013a3e:	697a      	ldr	r2, [r7, #20]
 8013a40:	8992      	ldrh	r2, [r2, #12]
 8013a42:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a46:	fb02 f200 	mul.w	r2, r2, r0
 8013a4a:	1a9b      	subs	r3, r3, r2
 8013a4c:	440b      	add	r3, r1
 8013a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a50:	4619      	mov	r1, r3
 8013a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a54:	f7fd ff06 	bl	8011864 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5c:	4413      	add	r3, r2
 8013a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	699a      	ldr	r2, [r3, #24]
 8013a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a66:	441a      	add	r2, r3
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	619a      	str	r2, [r3, #24]
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a72:	441a      	add	r2, r3
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	601a      	str	r2, [r3, #0]
 8013a78:	687a      	ldr	r2, [r7, #4]
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	1ad3      	subs	r3, r2, r3
 8013a7e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	f47f aee1 	bne.w	801384a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3738      	adds	r7, #56	; 0x38
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}

08013a92 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b08c      	sub	sp, #48	; 0x30
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	60f8      	str	r0, [r7, #12]
 8013a9a:	60b9      	str	r1, [r7, #8]
 8013a9c:	607a      	str	r2, [r7, #4]
 8013a9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f107 0210 	add.w	r2, r7, #16
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7ff fc44 	bl	8013340 <validate>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d107      	bne.n	8013ad6 <f_write+0x44>
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	7d5b      	ldrb	r3, [r3, #21]
 8013aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <f_write+0x4a>
 8013ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ada:	e16a      	b.n	8013db2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	7d1b      	ldrb	r3, [r3, #20]
 8013ae0:	f003 0302 	and.w	r3, r3, #2
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d101      	bne.n	8013aec <f_write+0x5a>
 8013ae8:	2307      	movs	r3, #7
 8013aea:	e162      	b.n	8013db2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	699a      	ldr	r2, [r3, #24]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	441a      	add	r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	699b      	ldr	r3, [r3, #24]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	f080 814c 	bcs.w	8013d96 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	43db      	mvns	r3, r3
 8013b04:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013b06:	e146      	b.n	8013d96 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	699b      	ldr	r3, [r3, #24]
 8013b0c:	693a      	ldr	r2, [r7, #16]
 8013b0e:	8992      	ldrh	r2, [r2, #12]
 8013b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b14:	fb02 f201 	mul.w	r2, r2, r1
 8013b18:	1a9b      	subs	r3, r3, r2
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f040 80f1 	bne.w	8013d02 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	8992      	ldrh	r2, [r2, #12]
 8013b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	8952      	ldrh	r2, [r2, #10]
 8013b30:	3a01      	subs	r2, #1
 8013b32:	4013      	ands	r3, r2
 8013b34:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d143      	bne.n	8013bc4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	699b      	ldr	r3, [r3, #24]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d10c      	bne.n	8013b5e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d11a      	bne.n	8013b86 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2100      	movs	r1, #0
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7fe fbbc 	bl	80122d2 <create_chain>
 8013b5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b5c:	e013      	b.n	8013b86 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d007      	beq.n	8013b76 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	699b      	ldr	r3, [r3, #24]
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f7fe fc48 	bl	8012402 <clmt_clust>
 8013b72:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b74:	e007      	b.n	8013b86 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b76:	68fa      	ldr	r2, [r7, #12]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	69db      	ldr	r3, [r3, #28]
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	4610      	mov	r0, r2
 8013b80:	f7fe fba7 	bl	80122d2 <create_chain>
 8013b84:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f000 8109 	beq.w	8013da0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d104      	bne.n	8013b9e <f_write+0x10c>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2202      	movs	r2, #2
 8013b98:	755a      	strb	r2, [r3, #21]
 8013b9a:	2302      	movs	r3, #2
 8013b9c:	e109      	b.n	8013db2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba4:	d104      	bne.n	8013bb0 <f_write+0x11e>
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2201      	movs	r2, #1
 8013baa:	755a      	strb	r2, [r3, #21]
 8013bac:	2301      	movs	r3, #1
 8013bae:	e100      	b.n	8013db2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bb4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	689b      	ldr	r3, [r3, #8]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d102      	bne.n	8013bc4 <f_write+0x132>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bc2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	b25b      	sxtb	r3, r3
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	da18      	bge.n	8013c00 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	7858      	ldrb	r0, [r3, #1]
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6a1a      	ldr	r2, [r3, #32]
 8013bdc:	2301      	movs	r3, #1
 8013bde:	f7fd fd81 	bl	80116e4 <disk_write>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d004      	beq.n	8013bf2 <f_write+0x160>
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2201      	movs	r2, #1
 8013bec:	755a      	strb	r2, [r3, #21]
 8013bee:	2301      	movs	r3, #1
 8013bf0:	e0df      	b.n	8013db2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	7d1b      	ldrb	r3, [r3, #20]
 8013bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bfa:	b2da      	uxtb	r2, r3
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013c00:	693a      	ldr	r2, [r7, #16]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	69db      	ldr	r3, [r3, #28]
 8013c06:	4619      	mov	r1, r3
 8013c08:	4610      	mov	r0, r2
 8013c0a:	f7fe f8f7 	bl	8011dfc <clust2sect>
 8013c0e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d104      	bne.n	8013c20 <f_write+0x18e>
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2202      	movs	r2, #2
 8013c1a:	755a      	strb	r2, [r3, #21]
 8013c1c:	2302      	movs	r3, #2
 8013c1e:	e0c8      	b.n	8013db2 <f_write+0x320>
			sect += csect;
 8013c20:	697a      	ldr	r2, [r7, #20]
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	4413      	add	r3, r2
 8013c26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	899b      	ldrh	r3, [r3, #12]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d043      	beq.n	8013cc4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c3c:	69ba      	ldr	r2, [r7, #24]
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	4413      	add	r3, r2
 8013c42:	693a      	ldr	r2, [r7, #16]
 8013c44:	8952      	ldrh	r2, [r2, #10]
 8013c46:	4293      	cmp	r3, r2
 8013c48:	d905      	bls.n	8013c56 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	895b      	ldrh	r3, [r3, #10]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	69bb      	ldr	r3, [r7, #24]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	7858      	ldrb	r0, [r3, #1]
 8013c5a:	6a3b      	ldr	r3, [r7, #32]
 8013c5c:	697a      	ldr	r2, [r7, #20]
 8013c5e:	69f9      	ldr	r1, [r7, #28]
 8013c60:	f7fd fd40 	bl	80116e4 <disk_write>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d004      	beq.n	8013c74 <f_write+0x1e2>
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	755a      	strb	r2, [r3, #21]
 8013c70:	2301      	movs	r3, #1
 8013c72:	e09e      	b.n	8013db2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	6a1a      	ldr	r2, [r3, #32]
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	1ad3      	subs	r3, r2, r3
 8013c7c:	6a3a      	ldr	r2, [r7, #32]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d918      	bls.n	8013cb4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6a1a      	ldr	r2, [r3, #32]
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	1ad3      	subs	r3, r2, r3
 8013c90:	693a      	ldr	r2, [r7, #16]
 8013c92:	8992      	ldrh	r2, [r2, #12]
 8013c94:	fb02 f303 	mul.w	r3, r2, r3
 8013c98:	69fa      	ldr	r2, [r7, #28]
 8013c9a:	18d1      	adds	r1, r2, r3
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	899b      	ldrh	r3, [r3, #12]
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	f7fd fddf 	bl	8011864 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	7d1b      	ldrb	r3, [r3, #20]
 8013caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cae:	b2da      	uxtb	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	899b      	ldrh	r3, [r3, #12]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	6a3b      	ldr	r3, [r7, #32]
 8013cbc:	fb02 f303 	mul.w	r3, r2, r3
 8013cc0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013cc2:	e04b      	b.n	8013d5c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	6a1b      	ldr	r3, [r3, #32]
 8013cc8:	697a      	ldr	r2, [r7, #20]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d016      	beq.n	8013cfc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	699a      	ldr	r2, [r3, #24]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d210      	bcs.n	8013cfc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	7858      	ldrb	r0, [r3, #1]
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	697a      	ldr	r2, [r7, #20]
 8013ce8:	f7fd fcdc 	bl	80116a4 <disk_read>
 8013cec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d004      	beq.n	8013cfc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	755a      	strb	r2, [r3, #21]
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e05a      	b.n	8013db2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	697a      	ldr	r2, [r7, #20]
 8013d00:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	899b      	ldrh	r3, [r3, #12]
 8013d06:	4618      	mov	r0, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	699b      	ldr	r3, [r3, #24]
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	8992      	ldrh	r2, [r2, #12]
 8013d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d14:	fb02 f201 	mul.w	r2, r2, r1
 8013d18:	1a9b      	subs	r3, r3, r2
 8013d1a:	1ac3      	subs	r3, r0, r3
 8013d1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d901      	bls.n	8013d2a <f_write+0x298>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	699b      	ldr	r3, [r3, #24]
 8013d34:	693a      	ldr	r2, [r7, #16]
 8013d36:	8992      	ldrh	r2, [r2, #12]
 8013d38:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d3c:	fb02 f200 	mul.w	r2, r2, r0
 8013d40:	1a9b      	subs	r3, r3, r2
 8013d42:	440b      	add	r3, r1
 8013d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d46:	69f9      	ldr	r1, [r7, #28]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fd fd8b 	bl	8011864 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	7d1b      	ldrb	r3, [r3, #20]
 8013d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013d5c:	69fa      	ldr	r2, [r7, #28]
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d60:	4413      	add	r3, r2
 8013d62:	61fb      	str	r3, [r7, #28]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	699a      	ldr	r2, [r3, #24]
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	441a      	add	r2, r3
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	619a      	str	r2, [r3, #24]
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	68da      	ldr	r2, [r3, #12]
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	699b      	ldr	r3, [r3, #24]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	bf38      	it	cc
 8013d7c:	461a      	movcc	r2, r3
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	60da      	str	r2, [r3, #12]
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d88:	441a      	add	r2, r3
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	601a      	str	r2, [r3, #0]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d92:	1ad3      	subs	r3, r2, r3
 8013d94:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f47f aeb5 	bne.w	8013b08 <f_write+0x76>
 8013d9e:	e000      	b.n	8013da2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013da0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	7d1b      	ldrb	r3, [r3, #20]
 8013da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3730      	adds	r7, #48	; 0x30
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
	...

08013dbc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b086      	sub	sp, #24
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f107 0208 	add.w	r2, r7, #8
 8013dca:	4611      	mov	r1, r2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7ff fab7 	bl	8013340 <validate>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013dd6:	7dfb      	ldrb	r3, [r7, #23]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d167      	bne.n	8013eac <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	7d1b      	ldrb	r3, [r3, #20]
 8013de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d061      	beq.n	8013eac <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	7d1b      	ldrb	r3, [r3, #20]
 8013dec:	b25b      	sxtb	r3, r3
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	da15      	bge.n	8013e1e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	7858      	ldrb	r0, [r3, #1]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6a1a      	ldr	r2, [r3, #32]
 8013e00:	2301      	movs	r3, #1
 8013e02:	f7fd fc6f 	bl	80116e4 <disk_write>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d001      	beq.n	8013e10 <f_sync+0x54>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e04e      	b.n	8013eae <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	7d1b      	ldrb	r3, [r3, #20]
 8013e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e18:	b2da      	uxtb	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013e1e:	4b26      	ldr	r3, [pc, #152]	; (8013eb8 <f_sync+0xfc>)
 8013e20:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e28:	4619      	mov	r1, r3
 8013e2a:	4610      	mov	r0, r2
 8013e2c:	f7fd ff48 	bl	8011cc0 <move_window>
 8013e30:	4603      	mov	r3, r0
 8013e32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013e34:	7dfb      	ldrb	r3, [r7, #23]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d138      	bne.n	8013eac <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e3e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	330b      	adds	r3, #11
 8013e44:	781a      	ldrb	r2, [r3, #0]
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	330b      	adds	r3, #11
 8013e4a:	f042 0220 	orr.w	r2, r2, #32
 8013e4e:	b2d2      	uxtb	r2, r2
 8013e50:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6818      	ldr	r0, [r3, #0]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	461a      	mov	r2, r3
 8013e5c:	68f9      	ldr	r1, [r7, #12]
 8013e5e:	f7fe fccd 	bl	80127fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f103 021c 	add.w	r2, r3, #28
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	4610      	mov	r0, r2
 8013e70:	f7fd fccc 	bl	801180c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	3316      	adds	r3, #22
 8013e78:	6939      	ldr	r1, [r7, #16]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fd fcc6 	bl	801180c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	3312      	adds	r3, #18
 8013e84:	2100      	movs	r1, #0
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7fd fca5 	bl	80117d6 <st_word>
					fs->wflag = 1;
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	2201      	movs	r2, #1
 8013e90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fd ff41 	bl	8011d1c <sync_fs>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	7d1b      	ldrb	r3, [r3, #20]
 8013ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ea6:	b2da      	uxtb	r2, r3
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3718      	adds	r7, #24
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	274a0000 	.word	0x274a0000

08013ebc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f7ff ff79 	bl	8013dbc <f_sync>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d118      	bne.n	8013f06 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f107 0208 	add.w	r2, r7, #8
 8013eda:	4611      	mov	r1, r2
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7ff fa2f 	bl	8013340 <validate>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013ee6:	7bfb      	ldrb	r3, [r7, #15]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d10c      	bne.n	8013f06 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	691b      	ldr	r3, [r3, #16]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7fd fe41 	bl	8011b78 <dec_lock>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013efa:	7bfb      	ldrb	r3, [r7, #15]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d102      	bne.n	8013f06 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2200      	movs	r2, #0
 8013f04:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f10:	b590      	push	{r4, r7, lr}
 8013f12:	b091      	sub	sp, #68	; 0x44
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013f18:	f107 0108 	add.w	r1, r7, #8
 8013f1c:	1d3b      	adds	r3, r7, #4
 8013f1e:	2200      	movs	r2, #0
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fe ff87 	bl	8012e34 <find_volume>
 8013f26:	4603      	mov	r3, r0
 8013f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013f2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d131      	bne.n	8013f98 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	f107 030c 	add.w	r3, r7, #12
 8013f3e:	4611      	mov	r1, r2
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fe fe47 	bl	8012bd4 <follow_path>
 8013f46:	4603      	mov	r3, r0
 8013f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d11a      	bne.n	8013f8a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013f58:	b25b      	sxtb	r3, r3
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	da03      	bge.n	8013f66 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	697a      	ldr	r2, [r7, #20]
 8013f62:	619a      	str	r2, [r3, #24]
 8013f64:	e011      	b.n	8013f8a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013f66:	7cbb      	ldrb	r3, [r7, #18]
 8013f68:	f003 0310 	and.w	r3, r3, #16
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d009      	beq.n	8013f84 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f74:	68bc      	ldr	r4, [r7, #8]
 8013f76:	4611      	mov	r1, r2
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7fe fc20 	bl	80127be <ld_clust>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	61a3      	str	r3, [r4, #24]
 8013f82:	e002      	b.n	8013f8a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013f84:	2305      	movs	r3, #5
 8013f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f8e:	2b04      	cmp	r3, #4
 8013f90:	d102      	bne.n	8013f98 <f_chdir+0x88>
 8013f92:	2305      	movs	r3, #5
 8013f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013f98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3744      	adds	r7, #68	; 0x44
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd90      	pop	{r4, r7, pc}

08013fa4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b090      	sub	sp, #64	; 0x40
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f107 0208 	add.w	r2, r7, #8
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff f9c2 	bl	8013340 <validate>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013fc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d103      	bne.n	8013fd2 <f_lseek+0x2e>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	7d5b      	ldrb	r3, [r3, #21]
 8013fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d002      	beq.n	8013fe0 <f_lseek+0x3c>
 8013fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fde:	e201      	b.n	80143e4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	f000 80d9 	beq.w	801419c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ff0:	d15a      	bne.n	80140a8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffa:	1d1a      	adds	r2, r3, #4
 8013ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	617b      	str	r3, [r7, #20]
 8014002:	2302      	movs	r3, #2
 8014004:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	689b      	ldr	r3, [r3, #8]
 801400a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400e:	2b00      	cmp	r3, #0
 8014010:	d03a      	beq.n	8014088 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014014:	613b      	str	r3, [r7, #16]
 8014016:	2300      	movs	r3, #0
 8014018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401c:	3302      	adds	r3, #2
 801401e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014022:	60fb      	str	r3, [r7, #12]
 8014024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014026:	3301      	adds	r3, #1
 8014028:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801402e:	4618      	mov	r0, r3
 8014030:	f7fd ff03 	bl	8011e3a <get_fat>
 8014034:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014038:	2b01      	cmp	r3, #1
 801403a:	d804      	bhi.n	8014046 <f_lseek+0xa2>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2202      	movs	r2, #2
 8014040:	755a      	strb	r2, [r3, #21]
 8014042:	2302      	movs	r3, #2
 8014044:	e1ce      	b.n	80143e4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801404c:	d104      	bne.n	8014058 <f_lseek+0xb4>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2201      	movs	r2, #1
 8014052:	755a      	strb	r2, [r3, #21]
 8014054:	2301      	movs	r3, #1
 8014056:	e1c5      	b.n	80143e4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	3301      	adds	r3, #1
 801405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801405e:	429a      	cmp	r2, r3
 8014060:	d0de      	beq.n	8014020 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	429a      	cmp	r2, r3
 8014068:	d809      	bhi.n	801407e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406c:	1d1a      	adds	r2, r3, #4
 801406e:	627a      	str	r2, [r7, #36]	; 0x24
 8014070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014072:	601a      	str	r2, [r3, #0]
 8014074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014076:	1d1a      	adds	r2, r3, #4
 8014078:	627a      	str	r2, [r7, #36]	; 0x24
 801407a:	693a      	ldr	r2, [r7, #16]
 801407c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	69db      	ldr	r3, [r3, #28]
 8014082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014084:	429a      	cmp	r2, r3
 8014086:	d3c4      	bcc.n	8014012 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801408c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801408e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	429a      	cmp	r2, r3
 8014096:	d803      	bhi.n	80140a0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	2200      	movs	r2, #0
 801409c:	601a      	str	r2, [r3, #0]
 801409e:	e19f      	b.n	80143e0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80140a0:	2311      	movs	r3, #17
 80140a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80140a6:	e19b      	b.n	80143e0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d902      	bls.n	80140b8 <f_lseek+0x114>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	683a      	ldr	r2, [r7, #0]
 80140bc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 818d 	beq.w	80143e0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	3b01      	subs	r3, #1
 80140ca:	4619      	mov	r1, r3
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7fe f998 	bl	8012402 <clmt_clust>
 80140d2:	4602      	mov	r2, r0
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	69db      	ldr	r3, [r3, #28]
 80140de:	4619      	mov	r1, r3
 80140e0:	4610      	mov	r0, r2
 80140e2:	f7fd fe8b 	bl	8011dfc <clust2sect>
 80140e6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d104      	bne.n	80140f8 <f_lseek+0x154>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2202      	movs	r2, #2
 80140f2:	755a      	strb	r2, [r3, #21]
 80140f4:	2302      	movs	r3, #2
 80140f6:	e175      	b.n	80143e4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	3b01      	subs	r3, #1
 80140fc:	68ba      	ldr	r2, [r7, #8]
 80140fe:	8992      	ldrh	r2, [r2, #12]
 8014100:	fbb3 f3f2 	udiv	r3, r3, r2
 8014104:	68ba      	ldr	r2, [r7, #8]
 8014106:	8952      	ldrh	r2, [r2, #10]
 8014108:	3a01      	subs	r2, #1
 801410a:	4013      	ands	r3, r2
 801410c:	69ba      	ldr	r2, [r7, #24]
 801410e:	4413      	add	r3, r2
 8014110:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	699b      	ldr	r3, [r3, #24]
 8014116:	68ba      	ldr	r2, [r7, #8]
 8014118:	8992      	ldrh	r2, [r2, #12]
 801411a:	fbb3 f1f2 	udiv	r1, r3, r2
 801411e:	fb02 f201 	mul.w	r2, r2, r1
 8014122:	1a9b      	subs	r3, r3, r2
 8014124:	2b00      	cmp	r3, #0
 8014126:	f000 815b 	beq.w	80143e0 <f_lseek+0x43c>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	69ba      	ldr	r2, [r7, #24]
 8014130:	429a      	cmp	r2, r3
 8014132:	f000 8155 	beq.w	80143e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	7d1b      	ldrb	r3, [r3, #20]
 801413a:	b25b      	sxtb	r3, r3
 801413c:	2b00      	cmp	r3, #0
 801413e:	da18      	bge.n	8014172 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	7858      	ldrb	r0, [r3, #1]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6a1a      	ldr	r2, [r3, #32]
 801414e:	2301      	movs	r3, #1
 8014150:	f7fd fac8 	bl	80116e4 <disk_write>
 8014154:	4603      	mov	r3, r0
 8014156:	2b00      	cmp	r3, #0
 8014158:	d004      	beq.n	8014164 <f_lseek+0x1c0>
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2201      	movs	r2, #1
 801415e:	755a      	strb	r2, [r3, #21]
 8014160:	2301      	movs	r3, #1
 8014162:	e13f      	b.n	80143e4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	7d1b      	ldrb	r3, [r3, #20]
 8014168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801416c:	b2da      	uxtb	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	7858      	ldrb	r0, [r3, #1]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801417c:	2301      	movs	r3, #1
 801417e:	69ba      	ldr	r2, [r7, #24]
 8014180:	f7fd fa90 	bl	80116a4 <disk_read>
 8014184:	4603      	mov	r3, r0
 8014186:	2b00      	cmp	r3, #0
 8014188:	d004      	beq.n	8014194 <f_lseek+0x1f0>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2201      	movs	r2, #1
 801418e:	755a      	strb	r2, [r3, #21]
 8014190:	2301      	movs	r3, #1
 8014192:	e127      	b.n	80143e4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	69ba      	ldr	r2, [r7, #24]
 8014198:	621a      	str	r2, [r3, #32]
 801419a:	e121      	b.n	80143e0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	68db      	ldr	r3, [r3, #12]
 80141a0:	683a      	ldr	r2, [r7, #0]
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d908      	bls.n	80141b8 <f_lseek+0x214>
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	7d1b      	ldrb	r3, [r3, #20]
 80141aa:	f003 0302 	and.w	r3, r3, #2
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d102      	bne.n	80141b8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	699b      	ldr	r3, [r3, #24]
 80141bc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80141be:	2300      	movs	r3, #0
 80141c0:	637b      	str	r3, [r7, #52]	; 0x34
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141c6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	f000 80b5 	beq.w	801433a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	895b      	ldrh	r3, [r3, #10]
 80141d4:	461a      	mov	r2, r3
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	899b      	ldrh	r3, [r3, #12]
 80141da:	fb03 f302 	mul.w	r3, r3, r2
 80141de:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80141e0:	6a3b      	ldr	r3, [r7, #32]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d01b      	beq.n	801421e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	1e5a      	subs	r2, r3, #1
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80141f0:	6a3b      	ldr	r3, [r7, #32]
 80141f2:	1e59      	subs	r1, r3, #1
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d30f      	bcc.n	801421e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	1e5a      	subs	r2, r3, #1
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	425b      	negs	r3, r3
 8014206:	401a      	ands	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	699b      	ldr	r3, [r3, #24]
 8014210:	683a      	ldr	r2, [r7, #0]
 8014212:	1ad3      	subs	r3, r2, r3
 8014214:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	69db      	ldr	r3, [r3, #28]
 801421a:	63bb      	str	r3, [r7, #56]	; 0x38
 801421c:	e022      	b.n	8014264 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	689b      	ldr	r3, [r3, #8]
 8014222:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014226:	2b00      	cmp	r3, #0
 8014228:	d119      	bne.n	801425e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2100      	movs	r1, #0
 801422e:	4618      	mov	r0, r3
 8014230:	f7fe f84f 	bl	80122d2 <create_chain>
 8014234:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014238:	2b01      	cmp	r3, #1
 801423a:	d104      	bne.n	8014246 <f_lseek+0x2a2>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2202      	movs	r2, #2
 8014240:	755a      	strb	r2, [r3, #21]
 8014242:	2302      	movs	r3, #2
 8014244:	e0ce      	b.n	80143e4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801424c:	d104      	bne.n	8014258 <f_lseek+0x2b4>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2201      	movs	r2, #1
 8014252:	755a      	strb	r2, [r3, #21]
 8014254:	2301      	movs	r3, #1
 8014256:	e0c5      	b.n	80143e4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801425c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014262:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014266:	2b00      	cmp	r3, #0
 8014268:	d067      	beq.n	801433a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801426a:	e03a      	b.n	80142e2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	1ad3      	subs	r3, r2, r3
 8014272:	603b      	str	r3, [r7, #0]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	699a      	ldr	r2, [r3, #24]
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	441a      	add	r2, r3
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	7d1b      	ldrb	r3, [r3, #20]
 8014284:	f003 0302 	and.w	r3, r3, #2
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00b      	beq.n	80142a4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014290:	4618      	mov	r0, r3
 8014292:	f7fe f81e 	bl	80122d2 <create_chain>
 8014296:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429a:	2b00      	cmp	r3, #0
 801429c:	d108      	bne.n	80142b0 <f_lseek+0x30c>
							ofs = 0; break;
 801429e:	2300      	movs	r3, #0
 80142a0:	603b      	str	r3, [r7, #0]
 80142a2:	e022      	b.n	80142ea <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fd fdc6 	bl	8011e3a <get_fat>
 80142ae:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142b6:	d104      	bne.n	80142c2 <f_lseek+0x31e>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2201      	movs	r2, #1
 80142bc:	755a      	strb	r2, [r3, #21]
 80142be:	2301      	movs	r3, #1
 80142c0:	e090      	b.n	80143e4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80142c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d904      	bls.n	80142d2 <f_lseek+0x32e>
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	69db      	ldr	r3, [r3, #28]
 80142cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d304      	bcc.n	80142dc <f_lseek+0x338>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2202      	movs	r2, #2
 80142d6:	755a      	strb	r2, [r3, #21]
 80142d8:	2302      	movs	r3, #2
 80142da:	e083      	b.n	80143e4 <f_lseek+0x440>
					fp->clust = clst;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142e0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80142e2:	683a      	ldr	r2, [r7, #0]
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d8c0      	bhi.n	801426c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	699a      	ldr	r2, [r3, #24]
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	441a      	add	r2, r3
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	899b      	ldrh	r3, [r3, #12]
 80142fa:	461a      	mov	r2, r3
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8014302:	fb02 f201 	mul.w	r2, r2, r1
 8014306:	1a9b      	subs	r3, r3, r2
 8014308:	2b00      	cmp	r3, #0
 801430a:	d016      	beq.n	801433a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014310:	4618      	mov	r0, r3
 8014312:	f7fd fd73 	bl	8011dfc <clust2sect>
 8014316:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801431a:	2b00      	cmp	r3, #0
 801431c:	d104      	bne.n	8014328 <f_lseek+0x384>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2202      	movs	r2, #2
 8014322:	755a      	strb	r2, [r3, #21]
 8014324:	2302      	movs	r3, #2
 8014326:	e05d      	b.n	80143e4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	899b      	ldrh	r3, [r3, #12]
 801432c:	461a      	mov	r2, r3
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	fbb3 f3f2 	udiv	r3, r3, r2
 8014334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014336:	4413      	add	r3, r2
 8014338:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	699a      	ldr	r2, [r3, #24]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	429a      	cmp	r2, r3
 8014344:	d90a      	bls.n	801435c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	699a      	ldr	r2, [r3, #24]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	7d1b      	ldrb	r3, [r3, #20]
 8014352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014356:	b2da      	uxtb	r2, r3
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	699b      	ldr	r3, [r3, #24]
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	8992      	ldrh	r2, [r2, #12]
 8014364:	fbb3 f1f2 	udiv	r1, r3, r2
 8014368:	fb02 f201 	mul.w	r2, r2, r1
 801436c:	1a9b      	subs	r3, r3, r2
 801436e:	2b00      	cmp	r3, #0
 8014370:	d036      	beq.n	80143e0 <f_lseek+0x43c>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6a1b      	ldr	r3, [r3, #32]
 8014376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014378:	429a      	cmp	r2, r3
 801437a:	d031      	beq.n	80143e0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	7d1b      	ldrb	r3, [r3, #20]
 8014380:	b25b      	sxtb	r3, r3
 8014382:	2b00      	cmp	r3, #0
 8014384:	da18      	bge.n	80143b8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	7858      	ldrb	r0, [r3, #1]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6a1a      	ldr	r2, [r3, #32]
 8014394:	2301      	movs	r3, #1
 8014396:	f7fd f9a5 	bl	80116e4 <disk_write>
 801439a:	4603      	mov	r3, r0
 801439c:	2b00      	cmp	r3, #0
 801439e:	d004      	beq.n	80143aa <f_lseek+0x406>
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2201      	movs	r2, #1
 80143a4:	755a      	strb	r2, [r3, #21]
 80143a6:	2301      	movs	r3, #1
 80143a8:	e01c      	b.n	80143e4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	7d1b      	ldrb	r3, [r3, #20]
 80143ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143b2:	b2da      	uxtb	r2, r3
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	7858      	ldrb	r0, [r3, #1]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143c2:	2301      	movs	r3, #1
 80143c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143c6:	f7fd f96d 	bl	80116a4 <disk_read>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d004      	beq.n	80143da <f_lseek+0x436>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2201      	movs	r2, #1
 80143d4:	755a      	strb	r2, [r3, #21]
 80143d6:	2301      	movs	r3, #1
 80143d8:	e004      	b.n	80143e4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80143e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3740      	adds	r7, #64	; 0x40
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b09e      	sub	sp, #120	; 0x78
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80143f4:	2300      	movs	r3, #0
 80143f6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143f8:	f107 010c 	add.w	r1, r7, #12
 80143fc:	1d3b      	adds	r3, r7, #4
 80143fe:	2202      	movs	r2, #2
 8014400:	4618      	mov	r0, r3
 8014402:	f7fe fd17 	bl	8012e34 <find_volume>
 8014406:	4603      	mov	r3, r0
 8014408:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014410:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014414:	2b00      	cmp	r3, #0
 8014416:	f040 80a4 	bne.w	8014562 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014420:	4611      	mov	r1, r2
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe fbd6 	bl	8012bd4 <follow_path>
 8014428:	4603      	mov	r3, r0
 801442a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801442e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014432:	2b00      	cmp	r3, #0
 8014434:	d108      	bne.n	8014448 <f_unlink+0x5c>
 8014436:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801443a:	f003 0320 	and.w	r3, r3, #32
 801443e:	2b00      	cmp	r3, #0
 8014440:	d002      	beq.n	8014448 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014442:	2306      	movs	r3, #6
 8014444:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014448:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801444c:	2b00      	cmp	r3, #0
 801444e:	d108      	bne.n	8014462 <f_unlink+0x76>
 8014450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014454:	2102      	movs	r1, #2
 8014456:	4618      	mov	r0, r3
 8014458:	f7fd fa82 	bl	8011960 <chk_lock>
 801445c:	4603      	mov	r3, r0
 801445e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014462:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014466:	2b00      	cmp	r3, #0
 8014468:	d17b      	bne.n	8014562 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801446a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801446e:	b25b      	sxtb	r3, r3
 8014470:	2b00      	cmp	r3, #0
 8014472:	da03      	bge.n	801447c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014474:	2306      	movs	r3, #6
 8014476:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801447a:	e008      	b.n	801448e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801447c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014480:	f003 0301 	and.w	r3, r3, #1
 8014484:	2b00      	cmp	r3, #0
 8014486:	d002      	beq.n	801448e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014488:	2307      	movs	r3, #7
 801448a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801448e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014492:	2b00      	cmp	r3, #0
 8014494:	d13d      	bne.n	8014512 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801449a:	4611      	mov	r1, r2
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe f98e 	bl	80127be <ld_clust>
 80144a2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80144a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144a8:	f003 0310 	and.w	r3, r3, #16
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d030      	beq.n	8014512 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	699b      	ldr	r3, [r3, #24]
 80144b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d103      	bne.n	80144c2 <f_unlink+0xd6>
						res = FR_DENIED;
 80144ba:	2307      	movs	r3, #7
 80144bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80144c0:	e027      	b.n	8014512 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80144c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144c8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80144ca:	f107 0310 	add.w	r3, r7, #16
 80144ce:	2100      	movs	r1, #0
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7fd ffce 	bl	8012472 <dir_sdi>
 80144d6:	4603      	mov	r3, r0
 80144d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80144dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d116      	bne.n	8014512 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80144e4:	f107 0310 	add.w	r3, r7, #16
 80144e8:	2100      	movs	r1, #0
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fe f9a6 	bl	801283c <dir_read>
 80144f0:	4603      	mov	r3, r0
 80144f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80144f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d102      	bne.n	8014504 <f_unlink+0x118>
 80144fe:	2307      	movs	r3, #7
 8014500:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014504:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014508:	2b04      	cmp	r3, #4
 801450a:	d102      	bne.n	8014512 <f_unlink+0x126>
 801450c:	2300      	movs	r3, #0
 801450e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014512:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014516:	2b00      	cmp	r3, #0
 8014518:	d123      	bne.n	8014562 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801451a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801451e:	4618      	mov	r0, r3
 8014520:	f7fe fa70 	bl	8012a04 <dir_remove>
 8014524:	4603      	mov	r3, r0
 8014526:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801452a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801452e:	2b00      	cmp	r3, #0
 8014530:	d10c      	bne.n	801454c <f_unlink+0x160>
 8014532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014534:	2b00      	cmp	r3, #0
 8014536:	d009      	beq.n	801454c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014538:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801453c:	2200      	movs	r2, #0
 801453e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014540:	4618      	mov	r0, r3
 8014542:	f7fd fe61 	bl	8012208 <remove_chain>
 8014546:	4603      	mov	r3, r0
 8014548:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801454c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014550:	2b00      	cmp	r3, #0
 8014552:	d106      	bne.n	8014562 <f_unlink+0x176>
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	4618      	mov	r0, r3
 8014558:	f7fd fbe0 	bl	8011d1c <sync_fs>
 801455c:	4603      	mov	r3, r0
 801455e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014562:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014566:	4618      	mov	r0, r3
 8014568:	3778      	adds	r7, #120	; 0x78
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
	...

08014570 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b096      	sub	sp, #88	; 0x58
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014578:	f107 0108 	add.w	r1, r7, #8
 801457c:	1d3b      	adds	r3, r7, #4
 801457e:	2202      	movs	r2, #2
 8014580:	4618      	mov	r0, r3
 8014582:	f7fe fc57 	bl	8012e34 <find_volume>
 8014586:	4603      	mov	r3, r0
 8014588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014594:	2b00      	cmp	r3, #0
 8014596:	f040 80fe 	bne.w	8014796 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	f107 030c 	add.w	r3, r7, #12
 80145a0:	4611      	mov	r1, r2
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fe fb16 	bl	8012bd4 <follow_path>
 80145a8:	4603      	mov	r3, r0
 80145aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80145ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d102      	bne.n	80145bc <f_mkdir+0x4c>
 80145b6:	2308      	movs	r3, #8
 80145b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80145bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145c0:	2b04      	cmp	r3, #4
 80145c2:	d108      	bne.n	80145d6 <f_mkdir+0x66>
 80145c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80145c8:	f003 0320 	and.w	r3, r3, #32
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d002      	beq.n	80145d6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80145d0:	2306      	movs	r3, #6
 80145d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80145d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145da:	2b04      	cmp	r3, #4
 80145dc:	f040 80db 	bne.w	8014796 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80145e0:	f107 030c 	add.w	r3, r7, #12
 80145e4:	2100      	movs	r1, #0
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fd fe73 	bl	80122d2 <create_chain>
 80145ec:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	895b      	ldrh	r3, [r3, #10]
 80145f2:	461a      	mov	r2, r3
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	899b      	ldrh	r3, [r3, #12]
 80145f8:	fb03 f302 	mul.w	r3, r3, r2
 80145fc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80145fe:	2300      	movs	r3, #0
 8014600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014606:	2b00      	cmp	r3, #0
 8014608:	d102      	bne.n	8014610 <f_mkdir+0xa0>
 801460a:	2307      	movs	r3, #7
 801460c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014612:	2b01      	cmp	r3, #1
 8014614:	d102      	bne.n	801461c <f_mkdir+0xac>
 8014616:	2302      	movs	r3, #2
 8014618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801461c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014622:	d102      	bne.n	801462a <f_mkdir+0xba>
 8014624:	2301      	movs	r3, #1
 8014626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801462a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <f_mkdir+0xd0>
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	4618      	mov	r0, r3
 8014636:	f7fd faff 	bl	8011c38 <sync_window>
 801463a:	4603      	mov	r3, r0
 801463c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014640:	4b58      	ldr	r3, [pc, #352]	; (80147a4 <f_mkdir+0x234>)
 8014642:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014648:	2b00      	cmp	r3, #0
 801464a:	d16c      	bne.n	8014726 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014650:	4618      	mov	r0, r3
 8014652:	f7fd fbd3 	bl	8011dfc <clust2sect>
 8014656:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	3338      	adds	r3, #56	; 0x38
 801465c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	899b      	ldrh	r3, [r3, #12]
 8014662:	461a      	mov	r2, r3
 8014664:	2100      	movs	r1, #0
 8014666:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014668:	f7fd f91d 	bl	80118a6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801466c:	220b      	movs	r2, #11
 801466e:	2120      	movs	r1, #32
 8014670:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014672:	f7fd f918 	bl	80118a6 <mem_set>
					dir[DIR_Name] = '.';
 8014676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014678:	222e      	movs	r2, #46	; 0x2e
 801467a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801467e:	330b      	adds	r3, #11
 8014680:	2210      	movs	r2, #16
 8014682:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014686:	3316      	adds	r3, #22
 8014688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801468a:	4618      	mov	r0, r3
 801468c:	f7fd f8be 	bl	801180c <st_dword>
					st_clust(fs, dir, dcl);
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014696:	4618      	mov	r0, r3
 8014698:	f7fe f8b0 	bl	80127fc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801469e:	3320      	adds	r3, #32
 80146a0:	2220      	movs	r2, #32
 80146a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7fd f8dd 	bl	8011864 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80146aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ac:	3321      	adds	r3, #33	; 0x21
 80146ae:	222e      	movs	r2, #46	; 0x2e
 80146b0:	701a      	strb	r2, [r3, #0]
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	2b03      	cmp	r3, #3
 80146bc:	d106      	bne.n	80146cc <f_mkdir+0x15c>
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d101      	bne.n	80146cc <f_mkdir+0x15c>
 80146c8:	2300      	movs	r3, #0
 80146ca:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80146cc:	68b8      	ldr	r0, [r7, #8]
 80146ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146d0:	3320      	adds	r3, #32
 80146d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146d4:	4619      	mov	r1, r3
 80146d6:	f7fe f891 	bl	80127fc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	895b      	ldrh	r3, [r3, #10]
 80146de:	653b      	str	r3, [r7, #80]	; 0x50
 80146e0:	e01c      	b.n	801471c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80146e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146e4:	1c5a      	adds	r2, r3, #1
 80146e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80146e8:	68ba      	ldr	r2, [r7, #8]
 80146ea:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	2201      	movs	r2, #1
 80146f0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fd fa9f 	bl	8011c38 <sync_window>
 80146fa:	4603      	mov	r3, r0
 80146fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014704:	2b00      	cmp	r3, #0
 8014706:	d10d      	bne.n	8014724 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	899b      	ldrh	r3, [r3, #12]
 801470c:	461a      	mov	r2, r3
 801470e:	2100      	movs	r1, #0
 8014710:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014712:	f7fd f8c8 	bl	80118a6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014718:	3b01      	subs	r3, #1
 801471a:	653b      	str	r3, [r7, #80]	; 0x50
 801471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1df      	bne.n	80146e2 <f_mkdir+0x172>
 8014722:	e000      	b.n	8014726 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014724:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801472a:	2b00      	cmp	r3, #0
 801472c:	d107      	bne.n	801473e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801472e:	f107 030c 	add.w	r3, r7, #12
 8014732:	4618      	mov	r0, r3
 8014734:	f7fe f934 	bl	80129a0 <dir_register>
 8014738:	4603      	mov	r3, r0
 801473a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801473e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014742:	2b00      	cmp	r3, #0
 8014744:	d120      	bne.n	8014788 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014748:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801474c:	3316      	adds	r3, #22
 801474e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014750:	4618      	mov	r0, r3
 8014752:	f7fd f85b 	bl	801180c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801475a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801475c:	4618      	mov	r0, r3
 801475e:	f7fe f84d 	bl	80127fc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014764:	330b      	adds	r3, #11
 8014766:	2210      	movs	r2, #16
 8014768:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	2201      	movs	r2, #1
 801476e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014774:	2b00      	cmp	r3, #0
 8014776:	d10e      	bne.n	8014796 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	4618      	mov	r0, r3
 801477c:	f7fd face 	bl	8011d1c <sync_fs>
 8014780:	4603      	mov	r3, r0
 8014782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014786:	e006      	b.n	8014796 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014788:	f107 030c 	add.w	r3, r7, #12
 801478c:	2200      	movs	r2, #0
 801478e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014790:	4618      	mov	r0, r3
 8014792:	f7fd fd39 	bl	8012208 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801479a:	4618      	mov	r0, r3
 801479c:	3758      	adds	r7, #88	; 0x58
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	274a0000 	.word	0x274a0000

080147a8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b088      	sub	sp, #32
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147b4:	2300      	movs	r3, #0
 80147b6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147bc:	e017      	b.n	80147ee <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147be:	f107 0310 	add.w	r3, r7, #16
 80147c2:	f107 0114 	add.w	r1, r7, #20
 80147c6:	2201      	movs	r2, #1
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7ff f803 	bl	80137d4 <f_read>
		if (rc != 1) break;
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	d112      	bne.n	80147fa <f_gets+0x52>
		c = s[0];
 80147d4:	7d3b      	ldrb	r3, [r7, #20]
 80147d6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	1c5a      	adds	r2, r3, #1
 80147dc:	61ba      	str	r2, [r7, #24]
 80147de:	7dfa      	ldrb	r2, [r7, #23]
 80147e0:	701a      	strb	r2, [r3, #0]
		n++;
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	3301      	adds	r3, #1
 80147e6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80147e8:	7dfb      	ldrb	r3, [r7, #23]
 80147ea:	2b0a      	cmp	r3, #10
 80147ec:	d007      	beq.n	80147fe <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	3b01      	subs	r3, #1
 80147f2:	69fa      	ldr	r2, [r7, #28]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	dbe2      	blt.n	80147be <f_gets+0x16>
 80147f8:	e002      	b.n	8014800 <f_gets+0x58>
		if (rc != 1) break;
 80147fa:	bf00      	nop
 80147fc:	e000      	b.n	8014800 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80147fe:	bf00      	nop
	}
	*p = 0;
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	2200      	movs	r2, #0
 8014804:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d001      	beq.n	8014810 <f_gets+0x68>
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	e000      	b.n	8014812 <f_gets+0x6a>
 8014810:	2300      	movs	r3, #0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3720      	adds	r7, #32
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
	...

0801481c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801481c:	b480      	push	{r7}
 801481e:	b087      	sub	sp, #28
 8014820:	af00      	add	r7, sp, #0
 8014822:	60f8      	str	r0, [r7, #12]
 8014824:	60b9      	str	r1, [r7, #8]
 8014826:	4613      	mov	r3, r2
 8014828:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801482a:	2301      	movs	r3, #1
 801482c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801482e:	2300      	movs	r3, #0
 8014830:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014832:	4b1f      	ldr	r3, [pc, #124]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 8014834:	7a5b      	ldrb	r3, [r3, #9]
 8014836:	b2db      	uxtb	r3, r3
 8014838:	2b00      	cmp	r3, #0
 801483a:	d131      	bne.n	80148a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801483c:	4b1c      	ldr	r3, [pc, #112]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 801483e:	7a5b      	ldrb	r3, [r3, #9]
 8014840:	b2db      	uxtb	r3, r3
 8014842:	461a      	mov	r2, r3
 8014844:	4b1a      	ldr	r3, [pc, #104]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 8014846:	2100      	movs	r1, #0
 8014848:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801484a:	4b19      	ldr	r3, [pc, #100]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 801484c:	7a5b      	ldrb	r3, [r3, #9]
 801484e:	b2db      	uxtb	r3, r3
 8014850:	4a17      	ldr	r2, [pc, #92]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4413      	add	r3, r2
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801485a:	4b15      	ldr	r3, [pc, #84]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 801485c:	7a5b      	ldrb	r3, [r3, #9]
 801485e:	b2db      	uxtb	r3, r3
 8014860:	461a      	mov	r2, r3
 8014862:	4b13      	ldr	r3, [pc, #76]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 8014864:	4413      	add	r3, r2
 8014866:	79fa      	ldrb	r2, [r7, #7]
 8014868:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801486a:	4b11      	ldr	r3, [pc, #68]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 801486c:	7a5b      	ldrb	r3, [r3, #9]
 801486e:	b2db      	uxtb	r3, r3
 8014870:	1c5a      	adds	r2, r3, #1
 8014872:	b2d1      	uxtb	r1, r2
 8014874:	4a0e      	ldr	r2, [pc, #56]	; (80148b0 <FATFS_LinkDriverEx+0x94>)
 8014876:	7251      	strb	r1, [r2, #9]
 8014878:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801487a:	7dbb      	ldrb	r3, [r7, #22]
 801487c:	3330      	adds	r3, #48	; 0x30
 801487e:	b2da      	uxtb	r2, r3
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	3301      	adds	r3, #1
 8014888:	223a      	movs	r2, #58	; 0x3a
 801488a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	3302      	adds	r3, #2
 8014890:	222f      	movs	r2, #47	; 0x2f
 8014892:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	3303      	adds	r3, #3
 8014898:	2200      	movs	r2, #0
 801489a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801489c:	2300      	movs	r3, #0
 801489e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	371c      	adds	r7, #28
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	2004248c 	.word	0x2004248c

080148b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148be:	2200      	movs	r2, #0
 80148c0:	6839      	ldr	r1, [r7, #0]
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f7ff ffaa 	bl	801481c <FATFS_LinkDriverEx>
 80148c8:	4603      	mov	r3, r0
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3708      	adds	r7, #8
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <__cxa_guard_acquire>:
 80148d2:	6803      	ldr	r3, [r0, #0]
 80148d4:	07db      	lsls	r3, r3, #31
 80148d6:	d406      	bmi.n	80148e6 <__cxa_guard_acquire+0x14>
 80148d8:	7843      	ldrb	r3, [r0, #1]
 80148da:	b103      	cbz	r3, 80148de <__cxa_guard_acquire+0xc>
 80148dc:	deff      	udf	#255	; 0xff
 80148de:	2301      	movs	r3, #1
 80148e0:	7043      	strb	r3, [r0, #1]
 80148e2:	4618      	mov	r0, r3
 80148e4:	4770      	bx	lr
 80148e6:	2000      	movs	r0, #0
 80148e8:	4770      	bx	lr

080148ea <__cxa_guard_release>:
 80148ea:	2301      	movs	r3, #1
 80148ec:	6003      	str	r3, [r0, #0]
 80148ee:	4770      	bx	lr

080148f0 <cos>:
 80148f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148f2:	ec51 0b10 	vmov	r0, r1, d0
 80148f6:	4a1e      	ldr	r2, [pc, #120]	; (8014970 <cos+0x80>)
 80148f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148fc:	4293      	cmp	r3, r2
 80148fe:	dc06      	bgt.n	801490e <cos+0x1e>
 8014900:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014968 <cos+0x78>
 8014904:	f000 fa74 	bl	8014df0 <__kernel_cos>
 8014908:	ec51 0b10 	vmov	r0, r1, d0
 801490c:	e007      	b.n	801491e <cos+0x2e>
 801490e:	4a19      	ldr	r2, [pc, #100]	; (8014974 <cos+0x84>)
 8014910:	4293      	cmp	r3, r2
 8014912:	dd09      	ble.n	8014928 <cos+0x38>
 8014914:	ee10 2a10 	vmov	r2, s0
 8014918:	460b      	mov	r3, r1
 801491a:	f7eb fccd 	bl	80002b8 <__aeabi_dsub>
 801491e:	ec41 0b10 	vmov	d0, r0, r1
 8014922:	b005      	add	sp, #20
 8014924:	f85d fb04 	ldr.w	pc, [sp], #4
 8014928:	4668      	mov	r0, sp
 801492a:	f000 f86d 	bl	8014a08 <__ieee754_rem_pio2>
 801492e:	f000 0003 	and.w	r0, r0, #3
 8014932:	2801      	cmp	r0, #1
 8014934:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014938:	ed9d 0b00 	vldr	d0, [sp]
 801493c:	d007      	beq.n	801494e <cos+0x5e>
 801493e:	2802      	cmp	r0, #2
 8014940:	d00e      	beq.n	8014960 <cos+0x70>
 8014942:	2800      	cmp	r0, #0
 8014944:	d0de      	beq.n	8014904 <cos+0x14>
 8014946:	2001      	movs	r0, #1
 8014948:	f000 fe5a 	bl	8015600 <__kernel_sin>
 801494c:	e7dc      	b.n	8014908 <cos+0x18>
 801494e:	f000 fe57 	bl	8015600 <__kernel_sin>
 8014952:	ec53 2b10 	vmov	r2, r3, d0
 8014956:	ee10 0a10 	vmov	r0, s0
 801495a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801495e:	e7de      	b.n	801491e <cos+0x2e>
 8014960:	f000 fa46 	bl	8014df0 <__kernel_cos>
 8014964:	e7f5      	b.n	8014952 <cos+0x62>
 8014966:	bf00      	nop
	...
 8014970:	3fe921fb 	.word	0x3fe921fb
 8014974:	7fefffff 	.word	0x7fefffff

08014978 <sin>:
 8014978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801497a:	ec51 0b10 	vmov	r0, r1, d0
 801497e:	4a20      	ldr	r2, [pc, #128]	; (8014a00 <sin+0x88>)
 8014980:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014984:	4293      	cmp	r3, r2
 8014986:	dc07      	bgt.n	8014998 <sin+0x20>
 8014988:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80149f8 <sin+0x80>
 801498c:	2000      	movs	r0, #0
 801498e:	f000 fe37 	bl	8015600 <__kernel_sin>
 8014992:	ec51 0b10 	vmov	r0, r1, d0
 8014996:	e007      	b.n	80149a8 <sin+0x30>
 8014998:	4a1a      	ldr	r2, [pc, #104]	; (8014a04 <sin+0x8c>)
 801499a:	4293      	cmp	r3, r2
 801499c:	dd09      	ble.n	80149b2 <sin+0x3a>
 801499e:	ee10 2a10 	vmov	r2, s0
 80149a2:	460b      	mov	r3, r1
 80149a4:	f7eb fc88 	bl	80002b8 <__aeabi_dsub>
 80149a8:	ec41 0b10 	vmov	d0, r0, r1
 80149ac:	b005      	add	sp, #20
 80149ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80149b2:	4668      	mov	r0, sp
 80149b4:	f000 f828 	bl	8014a08 <__ieee754_rem_pio2>
 80149b8:	f000 0003 	and.w	r0, r0, #3
 80149bc:	2801      	cmp	r0, #1
 80149be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149c2:	ed9d 0b00 	vldr	d0, [sp]
 80149c6:	d004      	beq.n	80149d2 <sin+0x5a>
 80149c8:	2802      	cmp	r0, #2
 80149ca:	d005      	beq.n	80149d8 <sin+0x60>
 80149cc:	b970      	cbnz	r0, 80149ec <sin+0x74>
 80149ce:	2001      	movs	r0, #1
 80149d0:	e7dd      	b.n	801498e <sin+0x16>
 80149d2:	f000 fa0d 	bl	8014df0 <__kernel_cos>
 80149d6:	e7dc      	b.n	8014992 <sin+0x1a>
 80149d8:	2001      	movs	r0, #1
 80149da:	f000 fe11 	bl	8015600 <__kernel_sin>
 80149de:	ec53 2b10 	vmov	r2, r3, d0
 80149e2:	ee10 0a10 	vmov	r0, s0
 80149e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80149ea:	e7dd      	b.n	80149a8 <sin+0x30>
 80149ec:	f000 fa00 	bl	8014df0 <__kernel_cos>
 80149f0:	e7f5      	b.n	80149de <sin+0x66>
 80149f2:	bf00      	nop
 80149f4:	f3af 8000 	nop.w
	...
 8014a00:	3fe921fb 	.word	0x3fe921fb
 8014a04:	7fefffff 	.word	0x7fefffff

08014a08 <__ieee754_rem_pio2>:
 8014a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a0c:	ec57 6b10 	vmov	r6, r7, d0
 8014a10:	4bc3      	ldr	r3, [pc, #780]	; (8014d20 <__ieee754_rem_pio2+0x318>)
 8014a12:	b08d      	sub	sp, #52	; 0x34
 8014a14:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014a18:	4598      	cmp	r8, r3
 8014a1a:	4604      	mov	r4, r0
 8014a1c:	9704      	str	r7, [sp, #16]
 8014a1e:	dc07      	bgt.n	8014a30 <__ieee754_rem_pio2+0x28>
 8014a20:	2200      	movs	r2, #0
 8014a22:	2300      	movs	r3, #0
 8014a24:	ed84 0b00 	vstr	d0, [r4]
 8014a28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014a2c:	2500      	movs	r5, #0
 8014a2e:	e027      	b.n	8014a80 <__ieee754_rem_pio2+0x78>
 8014a30:	4bbc      	ldr	r3, [pc, #752]	; (8014d24 <__ieee754_rem_pio2+0x31c>)
 8014a32:	4598      	cmp	r8, r3
 8014a34:	dc75      	bgt.n	8014b22 <__ieee754_rem_pio2+0x11a>
 8014a36:	9b04      	ldr	r3, [sp, #16]
 8014a38:	4dbb      	ldr	r5, [pc, #748]	; (8014d28 <__ieee754_rem_pio2+0x320>)
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	ee10 0a10 	vmov	r0, s0
 8014a40:	a3a9      	add	r3, pc, #676	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e0>)
 8014a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a46:	4639      	mov	r1, r7
 8014a48:	dd36      	ble.n	8014ab8 <__ieee754_rem_pio2+0xb0>
 8014a4a:	f7eb fc35 	bl	80002b8 <__aeabi_dsub>
 8014a4e:	45a8      	cmp	r8, r5
 8014a50:	4606      	mov	r6, r0
 8014a52:	460f      	mov	r7, r1
 8014a54:	d018      	beq.n	8014a88 <__ieee754_rem_pio2+0x80>
 8014a56:	a3a6      	add	r3, pc, #664	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2e8>)
 8014a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a5c:	f7eb fc2c 	bl	80002b8 <__aeabi_dsub>
 8014a60:	4602      	mov	r2, r0
 8014a62:	460b      	mov	r3, r1
 8014a64:	e9c4 2300 	strd	r2, r3, [r4]
 8014a68:	4630      	mov	r0, r6
 8014a6a:	4639      	mov	r1, r7
 8014a6c:	f7eb fc24 	bl	80002b8 <__aeabi_dsub>
 8014a70:	a39f      	add	r3, pc, #636	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2e8>)
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	f7eb fc1f 	bl	80002b8 <__aeabi_dsub>
 8014a7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a7e:	2501      	movs	r5, #1
 8014a80:	4628      	mov	r0, r5
 8014a82:	b00d      	add	sp, #52	; 0x34
 8014a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a88:	a39b      	add	r3, pc, #620	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f0>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	f7eb fc13 	bl	80002b8 <__aeabi_dsub>
 8014a92:	a39b      	add	r3, pc, #620	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2f8>)
 8014a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a98:	4606      	mov	r6, r0
 8014a9a:	460f      	mov	r7, r1
 8014a9c:	f7eb fc0c 	bl	80002b8 <__aeabi_dsub>
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	e9c4 2300 	strd	r2, r3, [r4]
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	4639      	mov	r1, r7
 8014aac:	f7eb fc04 	bl	80002b8 <__aeabi_dsub>
 8014ab0:	a393      	add	r3, pc, #588	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2f8>)
 8014ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab6:	e7de      	b.n	8014a76 <__ieee754_rem_pio2+0x6e>
 8014ab8:	f7eb fc00 	bl	80002bc <__adddf3>
 8014abc:	45a8      	cmp	r8, r5
 8014abe:	4606      	mov	r6, r0
 8014ac0:	460f      	mov	r7, r1
 8014ac2:	d016      	beq.n	8014af2 <__ieee754_rem_pio2+0xea>
 8014ac4:	a38a      	add	r3, pc, #552	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2e8>)
 8014ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aca:	f7eb fbf7 	bl	80002bc <__adddf3>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	e9c4 2300 	strd	r2, r3, [r4]
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	4639      	mov	r1, r7
 8014ada:	f7eb fbed 	bl	80002b8 <__aeabi_dsub>
 8014ade:	a384      	add	r3, pc, #528	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2e8>)
 8014ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae4:	f7eb fbea 	bl	80002bc <__adddf3>
 8014ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8014aec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014af0:	e7c6      	b.n	8014a80 <__ieee754_rem_pio2+0x78>
 8014af2:	a381      	add	r3, pc, #516	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f0>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	f7eb fbe0 	bl	80002bc <__adddf3>
 8014afc:	a380      	add	r3, pc, #512	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2f8>)
 8014afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b02:	4606      	mov	r6, r0
 8014b04:	460f      	mov	r7, r1
 8014b06:	f7eb fbd9 	bl	80002bc <__adddf3>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	e9c4 2300 	strd	r2, r3, [r4]
 8014b12:	4630      	mov	r0, r6
 8014b14:	4639      	mov	r1, r7
 8014b16:	f7eb fbcf 	bl	80002b8 <__aeabi_dsub>
 8014b1a:	a379      	add	r3, pc, #484	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2f8>)
 8014b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b20:	e7e0      	b.n	8014ae4 <__ieee754_rem_pio2+0xdc>
 8014b22:	4b82      	ldr	r3, [pc, #520]	; (8014d2c <__ieee754_rem_pio2+0x324>)
 8014b24:	4598      	cmp	r8, r3
 8014b26:	f300 80d0 	bgt.w	8014cca <__ieee754_rem_pio2+0x2c2>
 8014b2a:	f000 fe23 	bl	8015774 <fabs>
 8014b2e:	ec57 6b10 	vmov	r6, r7, d0
 8014b32:	ee10 0a10 	vmov	r0, s0
 8014b36:	a374      	add	r3, pc, #464	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x300>)
 8014b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3c:	4639      	mov	r1, r7
 8014b3e:	f7eb fd73 	bl	8000628 <__aeabi_dmul>
 8014b42:	2200      	movs	r2, #0
 8014b44:	4b7a      	ldr	r3, [pc, #488]	; (8014d30 <__ieee754_rem_pio2+0x328>)
 8014b46:	f7eb fbb9 	bl	80002bc <__adddf3>
 8014b4a:	f7ec f81d 	bl	8000b88 <__aeabi_d2iz>
 8014b4e:	4605      	mov	r5, r0
 8014b50:	f7eb fd00 	bl	8000554 <__aeabi_i2d>
 8014b54:	a364      	add	r3, pc, #400	; (adr r3, 8014ce8 <__ieee754_rem_pio2+0x2e0>)
 8014b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b5e:	f7eb fd63 	bl	8000628 <__aeabi_dmul>
 8014b62:	4602      	mov	r2, r0
 8014b64:	460b      	mov	r3, r1
 8014b66:	4630      	mov	r0, r6
 8014b68:	4639      	mov	r1, r7
 8014b6a:	f7eb fba5 	bl	80002b8 <__aeabi_dsub>
 8014b6e:	a360      	add	r3, pc, #384	; (adr r3, 8014cf0 <__ieee754_rem_pio2+0x2e8>)
 8014b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b74:	4682      	mov	sl, r0
 8014b76:	468b      	mov	fp, r1
 8014b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b7c:	f7eb fd54 	bl	8000628 <__aeabi_dmul>
 8014b80:	2d1f      	cmp	r5, #31
 8014b82:	4606      	mov	r6, r0
 8014b84:	460f      	mov	r7, r1
 8014b86:	dc0c      	bgt.n	8014ba2 <__ieee754_rem_pio2+0x19a>
 8014b88:	1e6a      	subs	r2, r5, #1
 8014b8a:	4b6a      	ldr	r3, [pc, #424]	; (8014d34 <__ieee754_rem_pio2+0x32c>)
 8014b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b90:	4543      	cmp	r3, r8
 8014b92:	d006      	beq.n	8014ba2 <__ieee754_rem_pio2+0x19a>
 8014b94:	4632      	mov	r2, r6
 8014b96:	463b      	mov	r3, r7
 8014b98:	4650      	mov	r0, sl
 8014b9a:	4659      	mov	r1, fp
 8014b9c:	f7eb fb8c 	bl	80002b8 <__aeabi_dsub>
 8014ba0:	e00e      	b.n	8014bc0 <__ieee754_rem_pio2+0x1b8>
 8014ba2:	4632      	mov	r2, r6
 8014ba4:	463b      	mov	r3, r7
 8014ba6:	4650      	mov	r0, sl
 8014ba8:	4659      	mov	r1, fp
 8014baa:	f7eb fb85 	bl	80002b8 <__aeabi_dsub>
 8014bae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014bb2:	9305      	str	r3, [sp, #20]
 8014bb4:	9a05      	ldr	r2, [sp, #20]
 8014bb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014bba:	1ad3      	subs	r3, r2, r3
 8014bbc:	2b10      	cmp	r3, #16
 8014bbe:	dc02      	bgt.n	8014bc6 <__ieee754_rem_pio2+0x1be>
 8014bc0:	e9c4 0100 	strd	r0, r1, [r4]
 8014bc4:	e039      	b.n	8014c3a <__ieee754_rem_pio2+0x232>
 8014bc6:	a34c      	add	r3, pc, #304	; (adr r3, 8014cf8 <__ieee754_rem_pio2+0x2f0>)
 8014bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bd0:	f7eb fd2a 	bl	8000628 <__aeabi_dmul>
 8014bd4:	4606      	mov	r6, r0
 8014bd6:	460f      	mov	r7, r1
 8014bd8:	4602      	mov	r2, r0
 8014bda:	460b      	mov	r3, r1
 8014bdc:	4650      	mov	r0, sl
 8014bde:	4659      	mov	r1, fp
 8014be0:	f7eb fb6a 	bl	80002b8 <__aeabi_dsub>
 8014be4:	4602      	mov	r2, r0
 8014be6:	460b      	mov	r3, r1
 8014be8:	4680      	mov	r8, r0
 8014bea:	4689      	mov	r9, r1
 8014bec:	4650      	mov	r0, sl
 8014bee:	4659      	mov	r1, fp
 8014bf0:	f7eb fb62 	bl	80002b8 <__aeabi_dsub>
 8014bf4:	4632      	mov	r2, r6
 8014bf6:	463b      	mov	r3, r7
 8014bf8:	f7eb fb5e 	bl	80002b8 <__aeabi_dsub>
 8014bfc:	a340      	add	r3, pc, #256	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2f8>)
 8014bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c02:	4606      	mov	r6, r0
 8014c04:	460f      	mov	r7, r1
 8014c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c0a:	f7eb fd0d 	bl	8000628 <__aeabi_dmul>
 8014c0e:	4632      	mov	r2, r6
 8014c10:	463b      	mov	r3, r7
 8014c12:	f7eb fb51 	bl	80002b8 <__aeabi_dsub>
 8014c16:	4602      	mov	r2, r0
 8014c18:	460b      	mov	r3, r1
 8014c1a:	4606      	mov	r6, r0
 8014c1c:	460f      	mov	r7, r1
 8014c1e:	4640      	mov	r0, r8
 8014c20:	4649      	mov	r1, r9
 8014c22:	f7eb fb49 	bl	80002b8 <__aeabi_dsub>
 8014c26:	9a05      	ldr	r2, [sp, #20]
 8014c28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c2c:	1ad3      	subs	r3, r2, r3
 8014c2e:	2b31      	cmp	r3, #49	; 0x31
 8014c30:	dc20      	bgt.n	8014c74 <__ieee754_rem_pio2+0x26c>
 8014c32:	e9c4 0100 	strd	r0, r1, [r4]
 8014c36:	46c2      	mov	sl, r8
 8014c38:	46cb      	mov	fp, r9
 8014c3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014c3e:	4650      	mov	r0, sl
 8014c40:	4642      	mov	r2, r8
 8014c42:	464b      	mov	r3, r9
 8014c44:	4659      	mov	r1, fp
 8014c46:	f7eb fb37 	bl	80002b8 <__aeabi_dsub>
 8014c4a:	463b      	mov	r3, r7
 8014c4c:	4632      	mov	r2, r6
 8014c4e:	f7eb fb33 	bl	80002b8 <__aeabi_dsub>
 8014c52:	9b04      	ldr	r3, [sp, #16]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c5a:	f6bf af11 	bge.w	8014a80 <__ieee754_rem_pio2+0x78>
 8014c5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c62:	6063      	str	r3, [r4, #4]
 8014c64:	f8c4 8000 	str.w	r8, [r4]
 8014c68:	60a0      	str	r0, [r4, #8]
 8014c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c6e:	60e3      	str	r3, [r4, #12]
 8014c70:	426d      	negs	r5, r5
 8014c72:	e705      	b.n	8014a80 <__ieee754_rem_pio2+0x78>
 8014c74:	a326      	add	r3, pc, #152	; (adr r3, 8014d10 <__ieee754_rem_pio2+0x308>)
 8014c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c7e:	f7eb fcd3 	bl	8000628 <__aeabi_dmul>
 8014c82:	4606      	mov	r6, r0
 8014c84:	460f      	mov	r7, r1
 8014c86:	4602      	mov	r2, r0
 8014c88:	460b      	mov	r3, r1
 8014c8a:	4640      	mov	r0, r8
 8014c8c:	4649      	mov	r1, r9
 8014c8e:	f7eb fb13 	bl	80002b8 <__aeabi_dsub>
 8014c92:	4602      	mov	r2, r0
 8014c94:	460b      	mov	r3, r1
 8014c96:	4682      	mov	sl, r0
 8014c98:	468b      	mov	fp, r1
 8014c9a:	4640      	mov	r0, r8
 8014c9c:	4649      	mov	r1, r9
 8014c9e:	f7eb fb0b 	bl	80002b8 <__aeabi_dsub>
 8014ca2:	4632      	mov	r2, r6
 8014ca4:	463b      	mov	r3, r7
 8014ca6:	f7eb fb07 	bl	80002b8 <__aeabi_dsub>
 8014caa:	a31b      	add	r3, pc, #108	; (adr r3, 8014d18 <__ieee754_rem_pio2+0x310>)
 8014cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb0:	4606      	mov	r6, r0
 8014cb2:	460f      	mov	r7, r1
 8014cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cb8:	f7eb fcb6 	bl	8000628 <__aeabi_dmul>
 8014cbc:	4632      	mov	r2, r6
 8014cbe:	463b      	mov	r3, r7
 8014cc0:	f7eb fafa 	bl	80002b8 <__aeabi_dsub>
 8014cc4:	4606      	mov	r6, r0
 8014cc6:	460f      	mov	r7, r1
 8014cc8:	e764      	b.n	8014b94 <__ieee754_rem_pio2+0x18c>
 8014cca:	4b1b      	ldr	r3, [pc, #108]	; (8014d38 <__ieee754_rem_pio2+0x330>)
 8014ccc:	4598      	cmp	r8, r3
 8014cce:	dd35      	ble.n	8014d3c <__ieee754_rem_pio2+0x334>
 8014cd0:	ee10 2a10 	vmov	r2, s0
 8014cd4:	463b      	mov	r3, r7
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	4639      	mov	r1, r7
 8014cda:	f7eb faed 	bl	80002b8 <__aeabi_dsub>
 8014cde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014ce2:	e9c4 0100 	strd	r0, r1, [r4]
 8014ce6:	e6a1      	b.n	8014a2c <__ieee754_rem_pio2+0x24>
 8014ce8:	54400000 	.word	0x54400000
 8014cec:	3ff921fb 	.word	0x3ff921fb
 8014cf0:	1a626331 	.word	0x1a626331
 8014cf4:	3dd0b461 	.word	0x3dd0b461
 8014cf8:	1a600000 	.word	0x1a600000
 8014cfc:	3dd0b461 	.word	0x3dd0b461
 8014d00:	2e037073 	.word	0x2e037073
 8014d04:	3ba3198a 	.word	0x3ba3198a
 8014d08:	6dc9c883 	.word	0x6dc9c883
 8014d0c:	3fe45f30 	.word	0x3fe45f30
 8014d10:	2e000000 	.word	0x2e000000
 8014d14:	3ba3198a 	.word	0x3ba3198a
 8014d18:	252049c1 	.word	0x252049c1
 8014d1c:	397b839a 	.word	0x397b839a
 8014d20:	3fe921fb 	.word	0x3fe921fb
 8014d24:	4002d97b 	.word	0x4002d97b
 8014d28:	3ff921fb 	.word	0x3ff921fb
 8014d2c:	413921fb 	.word	0x413921fb
 8014d30:	3fe00000 	.word	0x3fe00000
 8014d34:	0801a2ac 	.word	0x0801a2ac
 8014d38:	7fefffff 	.word	0x7fefffff
 8014d3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014d40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014d44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014d48:	4630      	mov	r0, r6
 8014d4a:	460f      	mov	r7, r1
 8014d4c:	f7eb ff1c 	bl	8000b88 <__aeabi_d2iz>
 8014d50:	f7eb fc00 	bl	8000554 <__aeabi_i2d>
 8014d54:	4602      	mov	r2, r0
 8014d56:	460b      	mov	r3, r1
 8014d58:	4630      	mov	r0, r6
 8014d5a:	4639      	mov	r1, r7
 8014d5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d60:	f7eb faaa 	bl	80002b8 <__aeabi_dsub>
 8014d64:	2200      	movs	r2, #0
 8014d66:	4b1f      	ldr	r3, [pc, #124]	; (8014de4 <__ieee754_rem_pio2+0x3dc>)
 8014d68:	f7eb fc5e 	bl	8000628 <__aeabi_dmul>
 8014d6c:	460f      	mov	r7, r1
 8014d6e:	4606      	mov	r6, r0
 8014d70:	f7eb ff0a 	bl	8000b88 <__aeabi_d2iz>
 8014d74:	f7eb fbee 	bl	8000554 <__aeabi_i2d>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	4639      	mov	r1, r7
 8014d80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d84:	f7eb fa98 	bl	80002b8 <__aeabi_dsub>
 8014d88:	2200      	movs	r2, #0
 8014d8a:	4b16      	ldr	r3, [pc, #88]	; (8014de4 <__ieee754_rem_pio2+0x3dc>)
 8014d8c:	f7eb fc4c 	bl	8000628 <__aeabi_dmul>
 8014d90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014d94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014d98:	f04f 0803 	mov.w	r8, #3
 8014d9c:	2600      	movs	r6, #0
 8014d9e:	2700      	movs	r7, #0
 8014da0:	4632      	mov	r2, r6
 8014da2:	463b      	mov	r3, r7
 8014da4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8014dac:	f7eb fea4 	bl	8000af8 <__aeabi_dcmpeq>
 8014db0:	b9b0      	cbnz	r0, 8014de0 <__ieee754_rem_pio2+0x3d8>
 8014db2:	4b0d      	ldr	r3, [pc, #52]	; (8014de8 <__ieee754_rem_pio2+0x3e0>)
 8014db4:	9301      	str	r3, [sp, #4]
 8014db6:	2302      	movs	r3, #2
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	462a      	mov	r2, r5
 8014dbc:	4643      	mov	r3, r8
 8014dbe:	4621      	mov	r1, r4
 8014dc0:	a806      	add	r0, sp, #24
 8014dc2:	f000 f8dd 	bl	8014f80 <__kernel_rem_pio2>
 8014dc6:	9b04      	ldr	r3, [sp, #16]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	4605      	mov	r5, r0
 8014dcc:	f6bf ae58 	bge.w	8014a80 <__ieee754_rem_pio2+0x78>
 8014dd0:	6863      	ldr	r3, [r4, #4]
 8014dd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014dd6:	6063      	str	r3, [r4, #4]
 8014dd8:	68e3      	ldr	r3, [r4, #12]
 8014dda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014dde:	e746      	b.n	8014c6e <__ieee754_rem_pio2+0x266>
 8014de0:	46d0      	mov	r8, sl
 8014de2:	e7dd      	b.n	8014da0 <__ieee754_rem_pio2+0x398>
 8014de4:	41700000 	.word	0x41700000
 8014de8:	0801a32c 	.word	0x0801a32c
 8014dec:	00000000 	.word	0x00000000

08014df0 <__kernel_cos>:
 8014df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	ec59 8b10 	vmov	r8, r9, d0
 8014df8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014dfc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014e00:	ed2d 8b02 	vpush	{d8}
 8014e04:	eeb0 8a41 	vmov.f32	s16, s2
 8014e08:	eef0 8a61 	vmov.f32	s17, s3
 8014e0c:	da07      	bge.n	8014e1e <__kernel_cos+0x2e>
 8014e0e:	ee10 0a10 	vmov	r0, s0
 8014e12:	4649      	mov	r1, r9
 8014e14:	f7eb feb8 	bl	8000b88 <__aeabi_d2iz>
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	f000 8089 	beq.w	8014f30 <__kernel_cos+0x140>
 8014e1e:	4642      	mov	r2, r8
 8014e20:	464b      	mov	r3, r9
 8014e22:	4640      	mov	r0, r8
 8014e24:	4649      	mov	r1, r9
 8014e26:	f7eb fbff 	bl	8000628 <__aeabi_dmul>
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	4b4e      	ldr	r3, [pc, #312]	; (8014f68 <__kernel_cos+0x178>)
 8014e2e:	4604      	mov	r4, r0
 8014e30:	460d      	mov	r5, r1
 8014e32:	f7eb fbf9 	bl	8000628 <__aeabi_dmul>
 8014e36:	a340      	add	r3, pc, #256	; (adr r3, 8014f38 <__kernel_cos+0x148>)
 8014e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3c:	4682      	mov	sl, r0
 8014e3e:	468b      	mov	fp, r1
 8014e40:	4620      	mov	r0, r4
 8014e42:	4629      	mov	r1, r5
 8014e44:	f7eb fbf0 	bl	8000628 <__aeabi_dmul>
 8014e48:	a33d      	add	r3, pc, #244	; (adr r3, 8014f40 <__kernel_cos+0x150>)
 8014e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4e:	f7eb fa35 	bl	80002bc <__adddf3>
 8014e52:	4622      	mov	r2, r4
 8014e54:	462b      	mov	r3, r5
 8014e56:	f7eb fbe7 	bl	8000628 <__aeabi_dmul>
 8014e5a:	a33b      	add	r3, pc, #236	; (adr r3, 8014f48 <__kernel_cos+0x158>)
 8014e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e60:	f7eb fa2a 	bl	80002b8 <__aeabi_dsub>
 8014e64:	4622      	mov	r2, r4
 8014e66:	462b      	mov	r3, r5
 8014e68:	f7eb fbde 	bl	8000628 <__aeabi_dmul>
 8014e6c:	a338      	add	r3, pc, #224	; (adr r3, 8014f50 <__kernel_cos+0x160>)
 8014e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e72:	f7eb fa23 	bl	80002bc <__adddf3>
 8014e76:	4622      	mov	r2, r4
 8014e78:	462b      	mov	r3, r5
 8014e7a:	f7eb fbd5 	bl	8000628 <__aeabi_dmul>
 8014e7e:	a336      	add	r3, pc, #216	; (adr r3, 8014f58 <__kernel_cos+0x168>)
 8014e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e84:	f7eb fa18 	bl	80002b8 <__aeabi_dsub>
 8014e88:	4622      	mov	r2, r4
 8014e8a:	462b      	mov	r3, r5
 8014e8c:	f7eb fbcc 	bl	8000628 <__aeabi_dmul>
 8014e90:	a333      	add	r3, pc, #204	; (adr r3, 8014f60 <__kernel_cos+0x170>)
 8014e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e96:	f7eb fa11 	bl	80002bc <__adddf3>
 8014e9a:	4622      	mov	r2, r4
 8014e9c:	462b      	mov	r3, r5
 8014e9e:	f7eb fbc3 	bl	8000628 <__aeabi_dmul>
 8014ea2:	4622      	mov	r2, r4
 8014ea4:	462b      	mov	r3, r5
 8014ea6:	f7eb fbbf 	bl	8000628 <__aeabi_dmul>
 8014eaa:	ec53 2b18 	vmov	r2, r3, d8
 8014eae:	4604      	mov	r4, r0
 8014eb0:	460d      	mov	r5, r1
 8014eb2:	4640      	mov	r0, r8
 8014eb4:	4649      	mov	r1, r9
 8014eb6:	f7eb fbb7 	bl	8000628 <__aeabi_dmul>
 8014eba:	460b      	mov	r3, r1
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	4629      	mov	r1, r5
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f7eb f9f9 	bl	80002b8 <__aeabi_dsub>
 8014ec6:	4b29      	ldr	r3, [pc, #164]	; (8014f6c <__kernel_cos+0x17c>)
 8014ec8:	429e      	cmp	r6, r3
 8014eca:	4680      	mov	r8, r0
 8014ecc:	4689      	mov	r9, r1
 8014ece:	dc11      	bgt.n	8014ef4 <__kernel_cos+0x104>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	4650      	mov	r0, sl
 8014ed6:	4659      	mov	r1, fp
 8014ed8:	f7eb f9ee 	bl	80002b8 <__aeabi_dsub>
 8014edc:	460b      	mov	r3, r1
 8014ede:	4924      	ldr	r1, [pc, #144]	; (8014f70 <__kernel_cos+0x180>)
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	2000      	movs	r0, #0
 8014ee4:	f7eb f9e8 	bl	80002b8 <__aeabi_dsub>
 8014ee8:	ecbd 8b02 	vpop	{d8}
 8014eec:	ec41 0b10 	vmov	d0, r0, r1
 8014ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef4:	4b1f      	ldr	r3, [pc, #124]	; (8014f74 <__kernel_cos+0x184>)
 8014ef6:	491e      	ldr	r1, [pc, #120]	; (8014f70 <__kernel_cos+0x180>)
 8014ef8:	429e      	cmp	r6, r3
 8014efa:	bfcc      	ite	gt
 8014efc:	4d1e      	ldrgt	r5, [pc, #120]	; (8014f78 <__kernel_cos+0x188>)
 8014efe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014f02:	2400      	movs	r4, #0
 8014f04:	4622      	mov	r2, r4
 8014f06:	462b      	mov	r3, r5
 8014f08:	2000      	movs	r0, #0
 8014f0a:	f7eb f9d5 	bl	80002b8 <__aeabi_dsub>
 8014f0e:	4622      	mov	r2, r4
 8014f10:	4606      	mov	r6, r0
 8014f12:	460f      	mov	r7, r1
 8014f14:	462b      	mov	r3, r5
 8014f16:	4650      	mov	r0, sl
 8014f18:	4659      	mov	r1, fp
 8014f1a:	f7eb f9cd 	bl	80002b8 <__aeabi_dsub>
 8014f1e:	4642      	mov	r2, r8
 8014f20:	464b      	mov	r3, r9
 8014f22:	f7eb f9c9 	bl	80002b8 <__aeabi_dsub>
 8014f26:	4602      	mov	r2, r0
 8014f28:	460b      	mov	r3, r1
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	4639      	mov	r1, r7
 8014f2e:	e7d9      	b.n	8014ee4 <__kernel_cos+0xf4>
 8014f30:	2000      	movs	r0, #0
 8014f32:	490f      	ldr	r1, [pc, #60]	; (8014f70 <__kernel_cos+0x180>)
 8014f34:	e7d8      	b.n	8014ee8 <__kernel_cos+0xf8>
 8014f36:	bf00      	nop
 8014f38:	be8838d4 	.word	0xbe8838d4
 8014f3c:	bda8fae9 	.word	0xbda8fae9
 8014f40:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f44:	3e21ee9e 	.word	0x3e21ee9e
 8014f48:	809c52ad 	.word	0x809c52ad
 8014f4c:	3e927e4f 	.word	0x3e927e4f
 8014f50:	19cb1590 	.word	0x19cb1590
 8014f54:	3efa01a0 	.word	0x3efa01a0
 8014f58:	16c15177 	.word	0x16c15177
 8014f5c:	3f56c16c 	.word	0x3f56c16c
 8014f60:	5555554c 	.word	0x5555554c
 8014f64:	3fa55555 	.word	0x3fa55555
 8014f68:	3fe00000 	.word	0x3fe00000
 8014f6c:	3fd33332 	.word	0x3fd33332
 8014f70:	3ff00000 	.word	0x3ff00000
 8014f74:	3fe90000 	.word	0x3fe90000
 8014f78:	3fd20000 	.word	0x3fd20000
 8014f7c:	00000000 	.word	0x00000000

08014f80 <__kernel_rem_pio2>:
 8014f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f84:	ed2d 8b02 	vpush	{d8}
 8014f88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014f8c:	1ed4      	subs	r4, r2, #3
 8014f8e:	9308      	str	r3, [sp, #32]
 8014f90:	9101      	str	r1, [sp, #4]
 8014f92:	4bc5      	ldr	r3, [pc, #788]	; (80152a8 <__kernel_rem_pio2+0x328>)
 8014f94:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014f96:	9009      	str	r0, [sp, #36]	; 0x24
 8014f98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f9c:	9304      	str	r3, [sp, #16]
 8014f9e:	9b08      	ldr	r3, [sp, #32]
 8014fa0:	3b01      	subs	r3, #1
 8014fa2:	9307      	str	r3, [sp, #28]
 8014fa4:	2318      	movs	r3, #24
 8014fa6:	fb94 f4f3 	sdiv	r4, r4, r3
 8014faa:	f06f 0317 	mvn.w	r3, #23
 8014fae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014fb2:	fb04 3303 	mla	r3, r4, r3, r3
 8014fb6:	eb03 0a02 	add.w	sl, r3, r2
 8014fba:	9b04      	ldr	r3, [sp, #16]
 8014fbc:	9a07      	ldr	r2, [sp, #28]
 8014fbe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015298 <__kernel_rem_pio2+0x318>
 8014fc2:	eb03 0802 	add.w	r8, r3, r2
 8014fc6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014fc8:	1aa7      	subs	r7, r4, r2
 8014fca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014fce:	ae22      	add	r6, sp, #136	; 0x88
 8014fd0:	2500      	movs	r5, #0
 8014fd2:	4545      	cmp	r5, r8
 8014fd4:	dd13      	ble.n	8014ffe <__kernel_rem_pio2+0x7e>
 8014fd6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015298 <__kernel_rem_pio2+0x318>
 8014fda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014fde:	2600      	movs	r6, #0
 8014fe0:	9b04      	ldr	r3, [sp, #16]
 8014fe2:	429e      	cmp	r6, r3
 8014fe4:	dc32      	bgt.n	801504c <__kernel_rem_pio2+0xcc>
 8014fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe8:	9302      	str	r3, [sp, #8]
 8014fea:	9b08      	ldr	r3, [sp, #32]
 8014fec:	199d      	adds	r5, r3, r6
 8014fee:	ab22      	add	r3, sp, #136	; 0x88
 8014ff0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014ff4:	9306      	str	r3, [sp, #24]
 8014ff6:	ec59 8b18 	vmov	r8, r9, d8
 8014ffa:	2700      	movs	r7, #0
 8014ffc:	e01f      	b.n	801503e <__kernel_rem_pio2+0xbe>
 8014ffe:	42ef      	cmn	r7, r5
 8015000:	d407      	bmi.n	8015012 <__kernel_rem_pio2+0x92>
 8015002:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015006:	f7eb faa5 	bl	8000554 <__aeabi_i2d>
 801500a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801500e:	3501      	adds	r5, #1
 8015010:	e7df      	b.n	8014fd2 <__kernel_rem_pio2+0x52>
 8015012:	ec51 0b18 	vmov	r0, r1, d8
 8015016:	e7f8      	b.n	801500a <__kernel_rem_pio2+0x8a>
 8015018:	9906      	ldr	r1, [sp, #24]
 801501a:	9d02      	ldr	r5, [sp, #8]
 801501c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8015020:	9106      	str	r1, [sp, #24]
 8015022:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8015026:	9502      	str	r5, [sp, #8]
 8015028:	f7eb fafe 	bl	8000628 <__aeabi_dmul>
 801502c:	4602      	mov	r2, r0
 801502e:	460b      	mov	r3, r1
 8015030:	4640      	mov	r0, r8
 8015032:	4649      	mov	r1, r9
 8015034:	f7eb f942 	bl	80002bc <__adddf3>
 8015038:	3701      	adds	r7, #1
 801503a:	4680      	mov	r8, r0
 801503c:	4689      	mov	r9, r1
 801503e:	9b07      	ldr	r3, [sp, #28]
 8015040:	429f      	cmp	r7, r3
 8015042:	dde9      	ble.n	8015018 <__kernel_rem_pio2+0x98>
 8015044:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015048:	3601      	adds	r6, #1
 801504a:	e7c9      	b.n	8014fe0 <__kernel_rem_pio2+0x60>
 801504c:	9b04      	ldr	r3, [sp, #16]
 801504e:	aa0e      	add	r2, sp, #56	; 0x38
 8015050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015054:	930c      	str	r3, [sp, #48]	; 0x30
 8015056:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015058:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801505c:	9c04      	ldr	r4, [sp, #16]
 801505e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015060:	ab9a      	add	r3, sp, #616	; 0x268
 8015062:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8015066:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801506a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801506e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8015072:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015076:	ab9a      	add	r3, sp, #616	; 0x268
 8015078:	445b      	add	r3, fp
 801507a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801507e:	2500      	movs	r5, #0
 8015080:	1b63      	subs	r3, r4, r5
 8015082:	2b00      	cmp	r3, #0
 8015084:	dc78      	bgt.n	8015178 <__kernel_rem_pio2+0x1f8>
 8015086:	4650      	mov	r0, sl
 8015088:	ec49 8b10 	vmov	d0, r8, r9
 801508c:	f000 fc00 	bl	8015890 <scalbn>
 8015090:	ec57 6b10 	vmov	r6, r7, d0
 8015094:	2200      	movs	r2, #0
 8015096:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801509a:	ee10 0a10 	vmov	r0, s0
 801509e:	4639      	mov	r1, r7
 80150a0:	f7eb fac2 	bl	8000628 <__aeabi_dmul>
 80150a4:	ec41 0b10 	vmov	d0, r0, r1
 80150a8:	f000 fb6e 	bl	8015788 <floor>
 80150ac:	2200      	movs	r2, #0
 80150ae:	ec51 0b10 	vmov	r0, r1, d0
 80150b2:	4b7e      	ldr	r3, [pc, #504]	; (80152ac <__kernel_rem_pio2+0x32c>)
 80150b4:	f7eb fab8 	bl	8000628 <__aeabi_dmul>
 80150b8:	4602      	mov	r2, r0
 80150ba:	460b      	mov	r3, r1
 80150bc:	4630      	mov	r0, r6
 80150be:	4639      	mov	r1, r7
 80150c0:	f7eb f8fa 	bl	80002b8 <__aeabi_dsub>
 80150c4:	460f      	mov	r7, r1
 80150c6:	4606      	mov	r6, r0
 80150c8:	f7eb fd5e 	bl	8000b88 <__aeabi_d2iz>
 80150cc:	9006      	str	r0, [sp, #24]
 80150ce:	f7eb fa41 	bl	8000554 <__aeabi_i2d>
 80150d2:	4602      	mov	r2, r0
 80150d4:	460b      	mov	r3, r1
 80150d6:	4630      	mov	r0, r6
 80150d8:	4639      	mov	r1, r7
 80150da:	f7eb f8ed 	bl	80002b8 <__aeabi_dsub>
 80150de:	f1ba 0f00 	cmp.w	sl, #0
 80150e2:	4606      	mov	r6, r0
 80150e4:	460f      	mov	r7, r1
 80150e6:	dd6c      	ble.n	80151c2 <__kernel_rem_pio2+0x242>
 80150e8:	1e62      	subs	r2, r4, #1
 80150ea:	ab0e      	add	r3, sp, #56	; 0x38
 80150ec:	f1ca 0118 	rsb	r1, sl, #24
 80150f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80150f4:	9d06      	ldr	r5, [sp, #24]
 80150f6:	fa40 f301 	asr.w	r3, r0, r1
 80150fa:	441d      	add	r5, r3
 80150fc:	408b      	lsls	r3, r1
 80150fe:	1ac0      	subs	r0, r0, r3
 8015100:	ab0e      	add	r3, sp, #56	; 0x38
 8015102:	9506      	str	r5, [sp, #24]
 8015104:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015108:	f1ca 0317 	rsb	r3, sl, #23
 801510c:	fa40 f303 	asr.w	r3, r0, r3
 8015110:	9302      	str	r3, [sp, #8]
 8015112:	9b02      	ldr	r3, [sp, #8]
 8015114:	2b00      	cmp	r3, #0
 8015116:	dd62      	ble.n	80151de <__kernel_rem_pio2+0x25e>
 8015118:	9b06      	ldr	r3, [sp, #24]
 801511a:	2200      	movs	r2, #0
 801511c:	3301      	adds	r3, #1
 801511e:	9306      	str	r3, [sp, #24]
 8015120:	4615      	mov	r5, r2
 8015122:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015126:	4294      	cmp	r4, r2
 8015128:	f300 8095 	bgt.w	8015256 <__kernel_rem_pio2+0x2d6>
 801512c:	f1ba 0f00 	cmp.w	sl, #0
 8015130:	dd07      	ble.n	8015142 <__kernel_rem_pio2+0x1c2>
 8015132:	f1ba 0f01 	cmp.w	sl, #1
 8015136:	f000 80a2 	beq.w	801527e <__kernel_rem_pio2+0x2fe>
 801513a:	f1ba 0f02 	cmp.w	sl, #2
 801513e:	f000 80c1 	beq.w	80152c4 <__kernel_rem_pio2+0x344>
 8015142:	9b02      	ldr	r3, [sp, #8]
 8015144:	2b02      	cmp	r3, #2
 8015146:	d14a      	bne.n	80151de <__kernel_rem_pio2+0x25e>
 8015148:	4632      	mov	r2, r6
 801514a:	463b      	mov	r3, r7
 801514c:	2000      	movs	r0, #0
 801514e:	4958      	ldr	r1, [pc, #352]	; (80152b0 <__kernel_rem_pio2+0x330>)
 8015150:	f7eb f8b2 	bl	80002b8 <__aeabi_dsub>
 8015154:	4606      	mov	r6, r0
 8015156:	460f      	mov	r7, r1
 8015158:	2d00      	cmp	r5, #0
 801515a:	d040      	beq.n	80151de <__kernel_rem_pio2+0x25e>
 801515c:	4650      	mov	r0, sl
 801515e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80152a0 <__kernel_rem_pio2+0x320>
 8015162:	f000 fb95 	bl	8015890 <scalbn>
 8015166:	4630      	mov	r0, r6
 8015168:	4639      	mov	r1, r7
 801516a:	ec53 2b10 	vmov	r2, r3, d0
 801516e:	f7eb f8a3 	bl	80002b8 <__aeabi_dsub>
 8015172:	4606      	mov	r6, r0
 8015174:	460f      	mov	r7, r1
 8015176:	e032      	b.n	80151de <__kernel_rem_pio2+0x25e>
 8015178:	2200      	movs	r2, #0
 801517a:	4b4e      	ldr	r3, [pc, #312]	; (80152b4 <__kernel_rem_pio2+0x334>)
 801517c:	4640      	mov	r0, r8
 801517e:	4649      	mov	r1, r9
 8015180:	f7eb fa52 	bl	8000628 <__aeabi_dmul>
 8015184:	f7eb fd00 	bl	8000b88 <__aeabi_d2iz>
 8015188:	f7eb f9e4 	bl	8000554 <__aeabi_i2d>
 801518c:	2200      	movs	r2, #0
 801518e:	4b4a      	ldr	r3, [pc, #296]	; (80152b8 <__kernel_rem_pio2+0x338>)
 8015190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015194:	f7eb fa48 	bl	8000628 <__aeabi_dmul>
 8015198:	4602      	mov	r2, r0
 801519a:	460b      	mov	r3, r1
 801519c:	4640      	mov	r0, r8
 801519e:	4649      	mov	r1, r9
 80151a0:	f7eb f88a 	bl	80002b8 <__aeabi_dsub>
 80151a4:	f7eb fcf0 	bl	8000b88 <__aeabi_d2iz>
 80151a8:	ab0e      	add	r3, sp, #56	; 0x38
 80151aa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80151ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80151b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151b6:	f7eb f881 	bl	80002bc <__adddf3>
 80151ba:	3501      	adds	r5, #1
 80151bc:	4680      	mov	r8, r0
 80151be:	4689      	mov	r9, r1
 80151c0:	e75e      	b.n	8015080 <__kernel_rem_pio2+0x100>
 80151c2:	d105      	bne.n	80151d0 <__kernel_rem_pio2+0x250>
 80151c4:	1e63      	subs	r3, r4, #1
 80151c6:	aa0e      	add	r2, sp, #56	; 0x38
 80151c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151cc:	15c3      	asrs	r3, r0, #23
 80151ce:	e79f      	b.n	8015110 <__kernel_rem_pio2+0x190>
 80151d0:	2200      	movs	r2, #0
 80151d2:	4b3a      	ldr	r3, [pc, #232]	; (80152bc <__kernel_rem_pio2+0x33c>)
 80151d4:	f7eb fcae 	bl	8000b34 <__aeabi_dcmpge>
 80151d8:	2800      	cmp	r0, #0
 80151da:	d139      	bne.n	8015250 <__kernel_rem_pio2+0x2d0>
 80151dc:	9002      	str	r0, [sp, #8]
 80151de:	2200      	movs	r2, #0
 80151e0:	2300      	movs	r3, #0
 80151e2:	4630      	mov	r0, r6
 80151e4:	4639      	mov	r1, r7
 80151e6:	f7eb fc87 	bl	8000af8 <__aeabi_dcmpeq>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	f000 80c7 	beq.w	801537e <__kernel_rem_pio2+0x3fe>
 80151f0:	1e65      	subs	r5, r4, #1
 80151f2:	462b      	mov	r3, r5
 80151f4:	2200      	movs	r2, #0
 80151f6:	9904      	ldr	r1, [sp, #16]
 80151f8:	428b      	cmp	r3, r1
 80151fa:	da6a      	bge.n	80152d2 <__kernel_rem_pio2+0x352>
 80151fc:	2a00      	cmp	r2, #0
 80151fe:	f000 8088 	beq.w	8015312 <__kernel_rem_pio2+0x392>
 8015202:	ab0e      	add	r3, sp, #56	; 0x38
 8015204:	f1aa 0a18 	sub.w	sl, sl, #24
 8015208:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801520c:	2b00      	cmp	r3, #0
 801520e:	f000 80b4 	beq.w	801537a <__kernel_rem_pio2+0x3fa>
 8015212:	4650      	mov	r0, sl
 8015214:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80152a0 <__kernel_rem_pio2+0x320>
 8015218:	f000 fb3a 	bl	8015890 <scalbn>
 801521c:	00ec      	lsls	r4, r5, #3
 801521e:	ab72      	add	r3, sp, #456	; 0x1c8
 8015220:	191e      	adds	r6, r3, r4
 8015222:	ec59 8b10 	vmov	r8, r9, d0
 8015226:	f106 0a08 	add.w	sl, r6, #8
 801522a:	462f      	mov	r7, r5
 801522c:	2f00      	cmp	r7, #0
 801522e:	f280 80df 	bge.w	80153f0 <__kernel_rem_pio2+0x470>
 8015232:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015298 <__kernel_rem_pio2+0x318>
 8015236:	f04f 0a00 	mov.w	sl, #0
 801523a:	eba5 030a 	sub.w	r3, r5, sl
 801523e:	2b00      	cmp	r3, #0
 8015240:	f2c0 810a 	blt.w	8015458 <__kernel_rem_pio2+0x4d8>
 8015244:	f8df b078 	ldr.w	fp, [pc, #120]	; 80152c0 <__kernel_rem_pio2+0x340>
 8015248:	ec59 8b18 	vmov	r8, r9, d8
 801524c:	2700      	movs	r7, #0
 801524e:	e0f5      	b.n	801543c <__kernel_rem_pio2+0x4bc>
 8015250:	2302      	movs	r3, #2
 8015252:	9302      	str	r3, [sp, #8]
 8015254:	e760      	b.n	8015118 <__kernel_rem_pio2+0x198>
 8015256:	ab0e      	add	r3, sp, #56	; 0x38
 8015258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525c:	b94d      	cbnz	r5, 8015272 <__kernel_rem_pio2+0x2f2>
 801525e:	b12b      	cbz	r3, 801526c <__kernel_rem_pio2+0x2ec>
 8015260:	a80e      	add	r0, sp, #56	; 0x38
 8015262:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015266:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801526a:	2301      	movs	r3, #1
 801526c:	3201      	adds	r2, #1
 801526e:	461d      	mov	r5, r3
 8015270:	e759      	b.n	8015126 <__kernel_rem_pio2+0x1a6>
 8015272:	a80e      	add	r0, sp, #56	; 0x38
 8015274:	1acb      	subs	r3, r1, r3
 8015276:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801527a:	462b      	mov	r3, r5
 801527c:	e7f6      	b.n	801526c <__kernel_rem_pio2+0x2ec>
 801527e:	1e62      	subs	r2, r4, #1
 8015280:	ab0e      	add	r3, sp, #56	; 0x38
 8015282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015286:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801528a:	a90e      	add	r1, sp, #56	; 0x38
 801528c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015290:	e757      	b.n	8015142 <__kernel_rem_pio2+0x1c2>
 8015292:	bf00      	nop
 8015294:	f3af 8000 	nop.w
	...
 80152a4:	3ff00000 	.word	0x3ff00000
 80152a8:	0801a478 	.word	0x0801a478
 80152ac:	40200000 	.word	0x40200000
 80152b0:	3ff00000 	.word	0x3ff00000
 80152b4:	3e700000 	.word	0x3e700000
 80152b8:	41700000 	.word	0x41700000
 80152bc:	3fe00000 	.word	0x3fe00000
 80152c0:	0801a438 	.word	0x0801a438
 80152c4:	1e62      	subs	r2, r4, #1
 80152c6:	ab0e      	add	r3, sp, #56	; 0x38
 80152c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80152d0:	e7db      	b.n	801528a <__kernel_rem_pio2+0x30a>
 80152d2:	a90e      	add	r1, sp, #56	; 0x38
 80152d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80152d8:	3b01      	subs	r3, #1
 80152da:	430a      	orrs	r2, r1
 80152dc:	e78b      	b.n	80151f6 <__kernel_rem_pio2+0x276>
 80152de:	3301      	adds	r3, #1
 80152e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80152e4:	2900      	cmp	r1, #0
 80152e6:	d0fa      	beq.n	80152de <__kernel_rem_pio2+0x35e>
 80152e8:	9a08      	ldr	r2, [sp, #32]
 80152ea:	4422      	add	r2, r4
 80152ec:	00d2      	lsls	r2, r2, #3
 80152ee:	a922      	add	r1, sp, #136	; 0x88
 80152f0:	18e3      	adds	r3, r4, r3
 80152f2:	9206      	str	r2, [sp, #24]
 80152f4:	440a      	add	r2, r1
 80152f6:	9302      	str	r3, [sp, #8]
 80152f8:	f10b 0108 	add.w	r1, fp, #8
 80152fc:	f102 0308 	add.w	r3, r2, #8
 8015300:	1c66      	adds	r6, r4, #1
 8015302:	910a      	str	r1, [sp, #40]	; 0x28
 8015304:	2500      	movs	r5, #0
 8015306:	930d      	str	r3, [sp, #52]	; 0x34
 8015308:	9b02      	ldr	r3, [sp, #8]
 801530a:	42b3      	cmp	r3, r6
 801530c:	da04      	bge.n	8015318 <__kernel_rem_pio2+0x398>
 801530e:	461c      	mov	r4, r3
 8015310:	e6a6      	b.n	8015060 <__kernel_rem_pio2+0xe0>
 8015312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015314:	2301      	movs	r3, #1
 8015316:	e7e3      	b.n	80152e0 <__kernel_rem_pio2+0x360>
 8015318:	9b06      	ldr	r3, [sp, #24]
 801531a:	18ef      	adds	r7, r5, r3
 801531c:	ab22      	add	r3, sp, #136	; 0x88
 801531e:	441f      	add	r7, r3
 8015320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015322:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015326:	f7eb f915 	bl	8000554 <__aeabi_i2d>
 801532a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801532c:	461c      	mov	r4, r3
 801532e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015330:	e9c7 0100 	strd	r0, r1, [r7]
 8015334:	eb03 0b05 	add.w	fp, r3, r5
 8015338:	2700      	movs	r7, #0
 801533a:	f04f 0800 	mov.w	r8, #0
 801533e:	f04f 0900 	mov.w	r9, #0
 8015342:	9b07      	ldr	r3, [sp, #28]
 8015344:	429f      	cmp	r7, r3
 8015346:	dd08      	ble.n	801535a <__kernel_rem_pio2+0x3da>
 8015348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801534a:	aa72      	add	r2, sp, #456	; 0x1c8
 801534c:	18eb      	adds	r3, r5, r3
 801534e:	4413      	add	r3, r2
 8015350:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8015354:	3601      	adds	r6, #1
 8015356:	3508      	adds	r5, #8
 8015358:	e7d6      	b.n	8015308 <__kernel_rem_pio2+0x388>
 801535a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801535e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015362:	f7eb f961 	bl	8000628 <__aeabi_dmul>
 8015366:	4602      	mov	r2, r0
 8015368:	460b      	mov	r3, r1
 801536a:	4640      	mov	r0, r8
 801536c:	4649      	mov	r1, r9
 801536e:	f7ea ffa5 	bl	80002bc <__adddf3>
 8015372:	3701      	adds	r7, #1
 8015374:	4680      	mov	r8, r0
 8015376:	4689      	mov	r9, r1
 8015378:	e7e3      	b.n	8015342 <__kernel_rem_pio2+0x3c2>
 801537a:	3d01      	subs	r5, #1
 801537c:	e741      	b.n	8015202 <__kernel_rem_pio2+0x282>
 801537e:	f1ca 0000 	rsb	r0, sl, #0
 8015382:	ec47 6b10 	vmov	d0, r6, r7
 8015386:	f000 fa83 	bl	8015890 <scalbn>
 801538a:	ec57 6b10 	vmov	r6, r7, d0
 801538e:	2200      	movs	r2, #0
 8015390:	4b99      	ldr	r3, [pc, #612]	; (80155f8 <__kernel_rem_pio2+0x678>)
 8015392:	ee10 0a10 	vmov	r0, s0
 8015396:	4639      	mov	r1, r7
 8015398:	f7eb fbcc 	bl	8000b34 <__aeabi_dcmpge>
 801539c:	b1f8      	cbz	r0, 80153de <__kernel_rem_pio2+0x45e>
 801539e:	2200      	movs	r2, #0
 80153a0:	4b96      	ldr	r3, [pc, #600]	; (80155fc <__kernel_rem_pio2+0x67c>)
 80153a2:	4630      	mov	r0, r6
 80153a4:	4639      	mov	r1, r7
 80153a6:	f7eb f93f 	bl	8000628 <__aeabi_dmul>
 80153aa:	f7eb fbed 	bl	8000b88 <__aeabi_d2iz>
 80153ae:	4680      	mov	r8, r0
 80153b0:	f7eb f8d0 	bl	8000554 <__aeabi_i2d>
 80153b4:	2200      	movs	r2, #0
 80153b6:	4b90      	ldr	r3, [pc, #576]	; (80155f8 <__kernel_rem_pio2+0x678>)
 80153b8:	f7eb f936 	bl	8000628 <__aeabi_dmul>
 80153bc:	460b      	mov	r3, r1
 80153be:	4602      	mov	r2, r0
 80153c0:	4639      	mov	r1, r7
 80153c2:	4630      	mov	r0, r6
 80153c4:	f7ea ff78 	bl	80002b8 <__aeabi_dsub>
 80153c8:	f7eb fbde 	bl	8000b88 <__aeabi_d2iz>
 80153cc:	1c65      	adds	r5, r4, #1
 80153ce:	ab0e      	add	r3, sp, #56	; 0x38
 80153d0:	f10a 0a18 	add.w	sl, sl, #24
 80153d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153d8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80153dc:	e719      	b.n	8015212 <__kernel_rem_pio2+0x292>
 80153de:	4630      	mov	r0, r6
 80153e0:	4639      	mov	r1, r7
 80153e2:	f7eb fbd1 	bl	8000b88 <__aeabi_d2iz>
 80153e6:	ab0e      	add	r3, sp, #56	; 0x38
 80153e8:	4625      	mov	r5, r4
 80153ea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153ee:	e710      	b.n	8015212 <__kernel_rem_pio2+0x292>
 80153f0:	ab0e      	add	r3, sp, #56	; 0x38
 80153f2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80153f6:	f7eb f8ad 	bl	8000554 <__aeabi_i2d>
 80153fa:	4642      	mov	r2, r8
 80153fc:	464b      	mov	r3, r9
 80153fe:	f7eb f913 	bl	8000628 <__aeabi_dmul>
 8015402:	2200      	movs	r2, #0
 8015404:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015408:	4b7c      	ldr	r3, [pc, #496]	; (80155fc <__kernel_rem_pio2+0x67c>)
 801540a:	4640      	mov	r0, r8
 801540c:	4649      	mov	r1, r9
 801540e:	f7eb f90b 	bl	8000628 <__aeabi_dmul>
 8015412:	3f01      	subs	r7, #1
 8015414:	4680      	mov	r8, r0
 8015416:	4689      	mov	r9, r1
 8015418:	e708      	b.n	801522c <__kernel_rem_pio2+0x2ac>
 801541a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015422:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8015426:	f7eb f8ff 	bl	8000628 <__aeabi_dmul>
 801542a:	4602      	mov	r2, r0
 801542c:	460b      	mov	r3, r1
 801542e:	4640      	mov	r0, r8
 8015430:	4649      	mov	r1, r9
 8015432:	f7ea ff43 	bl	80002bc <__adddf3>
 8015436:	3701      	adds	r7, #1
 8015438:	4680      	mov	r8, r0
 801543a:	4689      	mov	r9, r1
 801543c:	9b04      	ldr	r3, [sp, #16]
 801543e:	429f      	cmp	r7, r3
 8015440:	dc01      	bgt.n	8015446 <__kernel_rem_pio2+0x4c6>
 8015442:	45ba      	cmp	sl, r7
 8015444:	dae9      	bge.n	801541a <__kernel_rem_pio2+0x49a>
 8015446:	ab4a      	add	r3, sp, #296	; 0x128
 8015448:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801544c:	e9c3 8900 	strd	r8, r9, [r3]
 8015450:	f10a 0a01 	add.w	sl, sl, #1
 8015454:	3e08      	subs	r6, #8
 8015456:	e6f0      	b.n	801523a <__kernel_rem_pio2+0x2ba>
 8015458:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801545a:	2b03      	cmp	r3, #3
 801545c:	d85b      	bhi.n	8015516 <__kernel_rem_pio2+0x596>
 801545e:	e8df f003 	tbb	[pc, r3]
 8015462:	264a      	.short	0x264a
 8015464:	0226      	.short	0x0226
 8015466:	ab9a      	add	r3, sp, #616	; 0x268
 8015468:	441c      	add	r4, r3
 801546a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801546e:	46a2      	mov	sl, r4
 8015470:	46ab      	mov	fp, r5
 8015472:	f1bb 0f00 	cmp.w	fp, #0
 8015476:	dc6c      	bgt.n	8015552 <__kernel_rem_pio2+0x5d2>
 8015478:	46a2      	mov	sl, r4
 801547a:	46ab      	mov	fp, r5
 801547c:	f1bb 0f01 	cmp.w	fp, #1
 8015480:	f300 8086 	bgt.w	8015590 <__kernel_rem_pio2+0x610>
 8015484:	2000      	movs	r0, #0
 8015486:	2100      	movs	r1, #0
 8015488:	2d01      	cmp	r5, #1
 801548a:	f300 80a0 	bgt.w	80155ce <__kernel_rem_pio2+0x64e>
 801548e:	9b02      	ldr	r3, [sp, #8]
 8015490:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015494:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015498:	2b00      	cmp	r3, #0
 801549a:	f040 809e 	bne.w	80155da <__kernel_rem_pio2+0x65a>
 801549e:	9b01      	ldr	r3, [sp, #4]
 80154a0:	e9c3 7800 	strd	r7, r8, [r3]
 80154a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80154a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80154ac:	e033      	b.n	8015516 <__kernel_rem_pio2+0x596>
 80154ae:	3408      	adds	r4, #8
 80154b0:	ab4a      	add	r3, sp, #296	; 0x128
 80154b2:	441c      	add	r4, r3
 80154b4:	462e      	mov	r6, r5
 80154b6:	2000      	movs	r0, #0
 80154b8:	2100      	movs	r1, #0
 80154ba:	2e00      	cmp	r6, #0
 80154bc:	da3a      	bge.n	8015534 <__kernel_rem_pio2+0x5b4>
 80154be:	9b02      	ldr	r3, [sp, #8]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d03d      	beq.n	8015540 <__kernel_rem_pio2+0x5c0>
 80154c4:	4602      	mov	r2, r0
 80154c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154ca:	9c01      	ldr	r4, [sp, #4]
 80154cc:	e9c4 2300 	strd	r2, r3, [r4]
 80154d0:	4602      	mov	r2, r0
 80154d2:	460b      	mov	r3, r1
 80154d4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80154d8:	f7ea feee 	bl	80002b8 <__aeabi_dsub>
 80154dc:	ae4c      	add	r6, sp, #304	; 0x130
 80154de:	2401      	movs	r4, #1
 80154e0:	42a5      	cmp	r5, r4
 80154e2:	da30      	bge.n	8015546 <__kernel_rem_pio2+0x5c6>
 80154e4:	9b02      	ldr	r3, [sp, #8]
 80154e6:	b113      	cbz	r3, 80154ee <__kernel_rem_pio2+0x56e>
 80154e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154ec:	4619      	mov	r1, r3
 80154ee:	9b01      	ldr	r3, [sp, #4]
 80154f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80154f4:	e00f      	b.n	8015516 <__kernel_rem_pio2+0x596>
 80154f6:	ab9a      	add	r3, sp, #616	; 0x268
 80154f8:	441c      	add	r4, r3
 80154fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80154fe:	2000      	movs	r0, #0
 8015500:	2100      	movs	r1, #0
 8015502:	2d00      	cmp	r5, #0
 8015504:	da10      	bge.n	8015528 <__kernel_rem_pio2+0x5a8>
 8015506:	9b02      	ldr	r3, [sp, #8]
 8015508:	b113      	cbz	r3, 8015510 <__kernel_rem_pio2+0x590>
 801550a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801550e:	4619      	mov	r1, r3
 8015510:	9b01      	ldr	r3, [sp, #4]
 8015512:	e9c3 0100 	strd	r0, r1, [r3]
 8015516:	9b06      	ldr	r3, [sp, #24]
 8015518:	f003 0007 	and.w	r0, r3, #7
 801551c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015520:	ecbd 8b02 	vpop	{d8}
 8015524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015528:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801552c:	f7ea fec6 	bl	80002bc <__adddf3>
 8015530:	3d01      	subs	r5, #1
 8015532:	e7e6      	b.n	8015502 <__kernel_rem_pio2+0x582>
 8015534:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015538:	f7ea fec0 	bl	80002bc <__adddf3>
 801553c:	3e01      	subs	r6, #1
 801553e:	e7bc      	b.n	80154ba <__kernel_rem_pio2+0x53a>
 8015540:	4602      	mov	r2, r0
 8015542:	460b      	mov	r3, r1
 8015544:	e7c1      	b.n	80154ca <__kernel_rem_pio2+0x54a>
 8015546:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801554a:	f7ea feb7 	bl	80002bc <__adddf3>
 801554e:	3401      	adds	r4, #1
 8015550:	e7c6      	b.n	80154e0 <__kernel_rem_pio2+0x560>
 8015552:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8015556:	ed3a 7b02 	vldmdb	sl!, {d7}
 801555a:	4640      	mov	r0, r8
 801555c:	ec53 2b17 	vmov	r2, r3, d7
 8015560:	4649      	mov	r1, r9
 8015562:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015566:	f7ea fea9 	bl	80002bc <__adddf3>
 801556a:	4602      	mov	r2, r0
 801556c:	460b      	mov	r3, r1
 801556e:	4606      	mov	r6, r0
 8015570:	460f      	mov	r7, r1
 8015572:	4640      	mov	r0, r8
 8015574:	4649      	mov	r1, r9
 8015576:	f7ea fe9f 	bl	80002b8 <__aeabi_dsub>
 801557a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801557e:	f7ea fe9d 	bl	80002bc <__adddf3>
 8015582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015586:	e9ca 0100 	strd	r0, r1, [sl]
 801558a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801558e:	e770      	b.n	8015472 <__kernel_rem_pio2+0x4f2>
 8015590:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015594:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015598:	4630      	mov	r0, r6
 801559a:	ec53 2b17 	vmov	r2, r3, d7
 801559e:	4639      	mov	r1, r7
 80155a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80155a4:	f7ea fe8a 	bl	80002bc <__adddf3>
 80155a8:	4602      	mov	r2, r0
 80155aa:	460b      	mov	r3, r1
 80155ac:	4680      	mov	r8, r0
 80155ae:	4689      	mov	r9, r1
 80155b0:	4630      	mov	r0, r6
 80155b2:	4639      	mov	r1, r7
 80155b4:	f7ea fe80 	bl	80002b8 <__aeabi_dsub>
 80155b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155bc:	f7ea fe7e 	bl	80002bc <__adddf3>
 80155c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80155c4:	e9ca 0100 	strd	r0, r1, [sl]
 80155c8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80155cc:	e756      	b.n	801547c <__kernel_rem_pio2+0x4fc>
 80155ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155d2:	f7ea fe73 	bl	80002bc <__adddf3>
 80155d6:	3d01      	subs	r5, #1
 80155d8:	e756      	b.n	8015488 <__kernel_rem_pio2+0x508>
 80155da:	9b01      	ldr	r3, [sp, #4]
 80155dc:	9a01      	ldr	r2, [sp, #4]
 80155de:	601f      	str	r7, [r3, #0]
 80155e0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80155e4:	605c      	str	r4, [r3, #4]
 80155e6:	609d      	str	r5, [r3, #8]
 80155e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80155ec:	60d3      	str	r3, [r2, #12]
 80155ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155f2:	6110      	str	r0, [r2, #16]
 80155f4:	6153      	str	r3, [r2, #20]
 80155f6:	e78e      	b.n	8015516 <__kernel_rem_pio2+0x596>
 80155f8:	41700000 	.word	0x41700000
 80155fc:	3e700000 	.word	0x3e700000

08015600 <__kernel_sin>:
 8015600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	ec55 4b10 	vmov	r4, r5, d0
 8015608:	b085      	sub	sp, #20
 801560a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801560e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015612:	ed8d 1b00 	vstr	d1, [sp]
 8015616:	9002      	str	r0, [sp, #8]
 8015618:	da06      	bge.n	8015628 <__kernel_sin+0x28>
 801561a:	ee10 0a10 	vmov	r0, s0
 801561e:	4629      	mov	r1, r5
 8015620:	f7eb fab2 	bl	8000b88 <__aeabi_d2iz>
 8015624:	2800      	cmp	r0, #0
 8015626:	d051      	beq.n	80156cc <__kernel_sin+0xcc>
 8015628:	4622      	mov	r2, r4
 801562a:	462b      	mov	r3, r5
 801562c:	4620      	mov	r0, r4
 801562e:	4629      	mov	r1, r5
 8015630:	f7ea fffa 	bl	8000628 <__aeabi_dmul>
 8015634:	4682      	mov	sl, r0
 8015636:	468b      	mov	fp, r1
 8015638:	4602      	mov	r2, r0
 801563a:	460b      	mov	r3, r1
 801563c:	4620      	mov	r0, r4
 801563e:	4629      	mov	r1, r5
 8015640:	f7ea fff2 	bl	8000628 <__aeabi_dmul>
 8015644:	a341      	add	r3, pc, #260	; (adr r3, 801574c <__kernel_sin+0x14c>)
 8015646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801564a:	4680      	mov	r8, r0
 801564c:	4689      	mov	r9, r1
 801564e:	4650      	mov	r0, sl
 8015650:	4659      	mov	r1, fp
 8015652:	f7ea ffe9 	bl	8000628 <__aeabi_dmul>
 8015656:	a33f      	add	r3, pc, #252	; (adr r3, 8015754 <__kernel_sin+0x154>)
 8015658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565c:	f7ea fe2c 	bl	80002b8 <__aeabi_dsub>
 8015660:	4652      	mov	r2, sl
 8015662:	465b      	mov	r3, fp
 8015664:	f7ea ffe0 	bl	8000628 <__aeabi_dmul>
 8015668:	a33c      	add	r3, pc, #240	; (adr r3, 801575c <__kernel_sin+0x15c>)
 801566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566e:	f7ea fe25 	bl	80002bc <__adddf3>
 8015672:	4652      	mov	r2, sl
 8015674:	465b      	mov	r3, fp
 8015676:	f7ea ffd7 	bl	8000628 <__aeabi_dmul>
 801567a:	a33a      	add	r3, pc, #232	; (adr r3, 8015764 <__kernel_sin+0x164>)
 801567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015680:	f7ea fe1a 	bl	80002b8 <__aeabi_dsub>
 8015684:	4652      	mov	r2, sl
 8015686:	465b      	mov	r3, fp
 8015688:	f7ea ffce 	bl	8000628 <__aeabi_dmul>
 801568c:	a337      	add	r3, pc, #220	; (adr r3, 801576c <__kernel_sin+0x16c>)
 801568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015692:	f7ea fe13 	bl	80002bc <__adddf3>
 8015696:	9b02      	ldr	r3, [sp, #8]
 8015698:	4606      	mov	r6, r0
 801569a:	460f      	mov	r7, r1
 801569c:	b9db      	cbnz	r3, 80156d6 <__kernel_sin+0xd6>
 801569e:	4602      	mov	r2, r0
 80156a0:	460b      	mov	r3, r1
 80156a2:	4650      	mov	r0, sl
 80156a4:	4659      	mov	r1, fp
 80156a6:	f7ea ffbf 	bl	8000628 <__aeabi_dmul>
 80156aa:	a325      	add	r3, pc, #148	; (adr r3, 8015740 <__kernel_sin+0x140>)
 80156ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b0:	f7ea fe02 	bl	80002b8 <__aeabi_dsub>
 80156b4:	4642      	mov	r2, r8
 80156b6:	464b      	mov	r3, r9
 80156b8:	f7ea ffb6 	bl	8000628 <__aeabi_dmul>
 80156bc:	4602      	mov	r2, r0
 80156be:	460b      	mov	r3, r1
 80156c0:	4620      	mov	r0, r4
 80156c2:	4629      	mov	r1, r5
 80156c4:	f7ea fdfa 	bl	80002bc <__adddf3>
 80156c8:	4604      	mov	r4, r0
 80156ca:	460d      	mov	r5, r1
 80156cc:	ec45 4b10 	vmov	d0, r4, r5
 80156d0:	b005      	add	sp, #20
 80156d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156d6:	2200      	movs	r2, #0
 80156d8:	4b1b      	ldr	r3, [pc, #108]	; (8015748 <__kernel_sin+0x148>)
 80156da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156de:	f7ea ffa3 	bl	8000628 <__aeabi_dmul>
 80156e2:	4632      	mov	r2, r6
 80156e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80156e8:	463b      	mov	r3, r7
 80156ea:	4640      	mov	r0, r8
 80156ec:	4649      	mov	r1, r9
 80156ee:	f7ea ff9b 	bl	8000628 <__aeabi_dmul>
 80156f2:	4602      	mov	r2, r0
 80156f4:	460b      	mov	r3, r1
 80156f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156fa:	f7ea fddd 	bl	80002b8 <__aeabi_dsub>
 80156fe:	4652      	mov	r2, sl
 8015700:	465b      	mov	r3, fp
 8015702:	f7ea ff91 	bl	8000628 <__aeabi_dmul>
 8015706:	e9dd 2300 	ldrd	r2, r3, [sp]
 801570a:	f7ea fdd5 	bl	80002b8 <__aeabi_dsub>
 801570e:	a30c      	add	r3, pc, #48	; (adr r3, 8015740 <__kernel_sin+0x140>)
 8015710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015714:	4606      	mov	r6, r0
 8015716:	460f      	mov	r7, r1
 8015718:	4640      	mov	r0, r8
 801571a:	4649      	mov	r1, r9
 801571c:	f7ea ff84 	bl	8000628 <__aeabi_dmul>
 8015720:	4602      	mov	r2, r0
 8015722:	460b      	mov	r3, r1
 8015724:	4630      	mov	r0, r6
 8015726:	4639      	mov	r1, r7
 8015728:	f7ea fdc8 	bl	80002bc <__adddf3>
 801572c:	4602      	mov	r2, r0
 801572e:	460b      	mov	r3, r1
 8015730:	4620      	mov	r0, r4
 8015732:	4629      	mov	r1, r5
 8015734:	f7ea fdc0 	bl	80002b8 <__aeabi_dsub>
 8015738:	e7c6      	b.n	80156c8 <__kernel_sin+0xc8>
 801573a:	bf00      	nop
 801573c:	f3af 8000 	nop.w
 8015740:	55555549 	.word	0x55555549
 8015744:	3fc55555 	.word	0x3fc55555
 8015748:	3fe00000 	.word	0x3fe00000
 801574c:	5acfd57c 	.word	0x5acfd57c
 8015750:	3de5d93a 	.word	0x3de5d93a
 8015754:	8a2b9ceb 	.word	0x8a2b9ceb
 8015758:	3e5ae5e6 	.word	0x3e5ae5e6
 801575c:	57b1fe7d 	.word	0x57b1fe7d
 8015760:	3ec71de3 	.word	0x3ec71de3
 8015764:	19c161d5 	.word	0x19c161d5
 8015768:	3f2a01a0 	.word	0x3f2a01a0
 801576c:	1110f8a6 	.word	0x1110f8a6
 8015770:	3f811111 	.word	0x3f811111

08015774 <fabs>:
 8015774:	ec51 0b10 	vmov	r0, r1, d0
 8015778:	ee10 2a10 	vmov	r2, s0
 801577c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015780:	ec43 2b10 	vmov	d0, r2, r3
 8015784:	4770      	bx	lr
	...

08015788 <floor>:
 8015788:	ec51 0b10 	vmov	r0, r1, d0
 801578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015790:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015794:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015798:	2e13      	cmp	r6, #19
 801579a:	460c      	mov	r4, r1
 801579c:	ee10 5a10 	vmov	r5, s0
 80157a0:	4680      	mov	r8, r0
 80157a2:	dc34      	bgt.n	801580e <floor+0x86>
 80157a4:	2e00      	cmp	r6, #0
 80157a6:	da16      	bge.n	80157d6 <floor+0x4e>
 80157a8:	a335      	add	r3, pc, #212	; (adr r3, 8015880 <floor+0xf8>)
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	f7ea fd85 	bl	80002bc <__adddf3>
 80157b2:	2200      	movs	r2, #0
 80157b4:	2300      	movs	r3, #0
 80157b6:	f7eb f9c7 	bl	8000b48 <__aeabi_dcmpgt>
 80157ba:	b148      	cbz	r0, 80157d0 <floor+0x48>
 80157bc:	2c00      	cmp	r4, #0
 80157be:	da59      	bge.n	8015874 <floor+0xec>
 80157c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80157c4:	4a30      	ldr	r2, [pc, #192]	; (8015888 <floor+0x100>)
 80157c6:	432b      	orrs	r3, r5
 80157c8:	2500      	movs	r5, #0
 80157ca:	42ab      	cmp	r3, r5
 80157cc:	bf18      	it	ne
 80157ce:	4614      	movne	r4, r2
 80157d0:	4621      	mov	r1, r4
 80157d2:	4628      	mov	r0, r5
 80157d4:	e025      	b.n	8015822 <floor+0x9a>
 80157d6:	4f2d      	ldr	r7, [pc, #180]	; (801588c <floor+0x104>)
 80157d8:	4137      	asrs	r7, r6
 80157da:	ea01 0307 	and.w	r3, r1, r7
 80157de:	4303      	orrs	r3, r0
 80157e0:	d01f      	beq.n	8015822 <floor+0x9a>
 80157e2:	a327      	add	r3, pc, #156	; (adr r3, 8015880 <floor+0xf8>)
 80157e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e8:	f7ea fd68 	bl	80002bc <__adddf3>
 80157ec:	2200      	movs	r2, #0
 80157ee:	2300      	movs	r3, #0
 80157f0:	f7eb f9aa 	bl	8000b48 <__aeabi_dcmpgt>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d0eb      	beq.n	80157d0 <floor+0x48>
 80157f8:	2c00      	cmp	r4, #0
 80157fa:	bfbe      	ittt	lt
 80157fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015800:	fa43 f606 	asrlt.w	r6, r3, r6
 8015804:	19a4      	addlt	r4, r4, r6
 8015806:	ea24 0407 	bic.w	r4, r4, r7
 801580a:	2500      	movs	r5, #0
 801580c:	e7e0      	b.n	80157d0 <floor+0x48>
 801580e:	2e33      	cmp	r6, #51	; 0x33
 8015810:	dd0b      	ble.n	801582a <floor+0xa2>
 8015812:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015816:	d104      	bne.n	8015822 <floor+0x9a>
 8015818:	ee10 2a10 	vmov	r2, s0
 801581c:	460b      	mov	r3, r1
 801581e:	f7ea fd4d 	bl	80002bc <__adddf3>
 8015822:	ec41 0b10 	vmov	d0, r0, r1
 8015826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801582a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801582e:	f04f 33ff 	mov.w	r3, #4294967295
 8015832:	fa23 f707 	lsr.w	r7, r3, r7
 8015836:	4207      	tst	r7, r0
 8015838:	d0f3      	beq.n	8015822 <floor+0x9a>
 801583a:	a311      	add	r3, pc, #68	; (adr r3, 8015880 <floor+0xf8>)
 801583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015840:	f7ea fd3c 	bl	80002bc <__adddf3>
 8015844:	2200      	movs	r2, #0
 8015846:	2300      	movs	r3, #0
 8015848:	f7eb f97e 	bl	8000b48 <__aeabi_dcmpgt>
 801584c:	2800      	cmp	r0, #0
 801584e:	d0bf      	beq.n	80157d0 <floor+0x48>
 8015850:	2c00      	cmp	r4, #0
 8015852:	da02      	bge.n	801585a <floor+0xd2>
 8015854:	2e14      	cmp	r6, #20
 8015856:	d103      	bne.n	8015860 <floor+0xd8>
 8015858:	3401      	adds	r4, #1
 801585a:	ea25 0507 	bic.w	r5, r5, r7
 801585e:	e7b7      	b.n	80157d0 <floor+0x48>
 8015860:	2301      	movs	r3, #1
 8015862:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015866:	fa03 f606 	lsl.w	r6, r3, r6
 801586a:	4435      	add	r5, r6
 801586c:	4545      	cmp	r5, r8
 801586e:	bf38      	it	cc
 8015870:	18e4      	addcc	r4, r4, r3
 8015872:	e7f2      	b.n	801585a <floor+0xd2>
 8015874:	2500      	movs	r5, #0
 8015876:	462c      	mov	r4, r5
 8015878:	e7aa      	b.n	80157d0 <floor+0x48>
 801587a:	bf00      	nop
 801587c:	f3af 8000 	nop.w
 8015880:	8800759c 	.word	0x8800759c
 8015884:	7e37e43c 	.word	0x7e37e43c
 8015888:	bff00000 	.word	0xbff00000
 801588c:	000fffff 	.word	0x000fffff

08015890 <scalbn>:
 8015890:	b570      	push	{r4, r5, r6, lr}
 8015892:	ec55 4b10 	vmov	r4, r5, d0
 8015896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801589a:	4606      	mov	r6, r0
 801589c:	462b      	mov	r3, r5
 801589e:	b9aa      	cbnz	r2, 80158cc <scalbn+0x3c>
 80158a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80158a4:	4323      	orrs	r3, r4
 80158a6:	d03b      	beq.n	8015920 <scalbn+0x90>
 80158a8:	4b31      	ldr	r3, [pc, #196]	; (8015970 <scalbn+0xe0>)
 80158aa:	4629      	mov	r1, r5
 80158ac:	2200      	movs	r2, #0
 80158ae:	ee10 0a10 	vmov	r0, s0
 80158b2:	f7ea feb9 	bl	8000628 <__aeabi_dmul>
 80158b6:	4b2f      	ldr	r3, [pc, #188]	; (8015974 <scalbn+0xe4>)
 80158b8:	429e      	cmp	r6, r3
 80158ba:	4604      	mov	r4, r0
 80158bc:	460d      	mov	r5, r1
 80158be:	da12      	bge.n	80158e6 <scalbn+0x56>
 80158c0:	a327      	add	r3, pc, #156	; (adr r3, 8015960 <scalbn+0xd0>)
 80158c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c6:	f7ea feaf 	bl	8000628 <__aeabi_dmul>
 80158ca:	e009      	b.n	80158e0 <scalbn+0x50>
 80158cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80158d0:	428a      	cmp	r2, r1
 80158d2:	d10c      	bne.n	80158ee <scalbn+0x5e>
 80158d4:	ee10 2a10 	vmov	r2, s0
 80158d8:	4620      	mov	r0, r4
 80158da:	4629      	mov	r1, r5
 80158dc:	f7ea fcee 	bl	80002bc <__adddf3>
 80158e0:	4604      	mov	r4, r0
 80158e2:	460d      	mov	r5, r1
 80158e4:	e01c      	b.n	8015920 <scalbn+0x90>
 80158e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80158ea:	460b      	mov	r3, r1
 80158ec:	3a36      	subs	r2, #54	; 0x36
 80158ee:	4432      	add	r2, r6
 80158f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80158f4:	428a      	cmp	r2, r1
 80158f6:	dd0b      	ble.n	8015910 <scalbn+0x80>
 80158f8:	ec45 4b11 	vmov	d1, r4, r5
 80158fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015968 <scalbn+0xd8>
 8015900:	f000 f83c 	bl	801597c <copysign>
 8015904:	a318      	add	r3, pc, #96	; (adr r3, 8015968 <scalbn+0xd8>)
 8015906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801590a:	ec51 0b10 	vmov	r0, r1, d0
 801590e:	e7da      	b.n	80158c6 <scalbn+0x36>
 8015910:	2a00      	cmp	r2, #0
 8015912:	dd08      	ble.n	8015926 <scalbn+0x96>
 8015914:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015918:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801591c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015920:	ec45 4b10 	vmov	d0, r4, r5
 8015924:	bd70      	pop	{r4, r5, r6, pc}
 8015926:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801592a:	da0d      	bge.n	8015948 <scalbn+0xb8>
 801592c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015930:	429e      	cmp	r6, r3
 8015932:	ec45 4b11 	vmov	d1, r4, r5
 8015936:	dce1      	bgt.n	80158fc <scalbn+0x6c>
 8015938:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015960 <scalbn+0xd0>
 801593c:	f000 f81e 	bl	801597c <copysign>
 8015940:	a307      	add	r3, pc, #28	; (adr r3, 8015960 <scalbn+0xd0>)
 8015942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015946:	e7e0      	b.n	801590a <scalbn+0x7a>
 8015948:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801594c:	3236      	adds	r2, #54	; 0x36
 801594e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015952:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015956:	4620      	mov	r0, r4
 8015958:	4629      	mov	r1, r5
 801595a:	2200      	movs	r2, #0
 801595c:	4b06      	ldr	r3, [pc, #24]	; (8015978 <scalbn+0xe8>)
 801595e:	e7b2      	b.n	80158c6 <scalbn+0x36>
 8015960:	c2f8f359 	.word	0xc2f8f359
 8015964:	01a56e1f 	.word	0x01a56e1f
 8015968:	8800759c 	.word	0x8800759c
 801596c:	7e37e43c 	.word	0x7e37e43c
 8015970:	43500000 	.word	0x43500000
 8015974:	ffff3cb0 	.word	0xffff3cb0
 8015978:	3c900000 	.word	0x3c900000

0801597c <copysign>:
 801597c:	ec51 0b10 	vmov	r0, r1, d0
 8015980:	ee11 0a90 	vmov	r0, s3
 8015984:	ee10 2a10 	vmov	r2, s0
 8015988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801598c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015990:	ea41 0300 	orr.w	r3, r1, r0
 8015994:	ec43 2b10 	vmov	d0, r2, r3
 8015998:	4770      	bx	lr
	...

0801599c <__errno>:
 801599c:	4b01      	ldr	r3, [pc, #4]	; (80159a4 <__errno+0x8>)
 801599e:	6818      	ldr	r0, [r3, #0]
 80159a0:	4770      	bx	lr
 80159a2:	bf00      	nop
 80159a4:	2000000c 	.word	0x2000000c

080159a8 <__libc_init_array>:
 80159a8:	b570      	push	{r4, r5, r6, lr}
 80159aa:	4e0d      	ldr	r6, [pc, #52]	; (80159e0 <__libc_init_array+0x38>)
 80159ac:	4c0d      	ldr	r4, [pc, #52]	; (80159e4 <__libc_init_array+0x3c>)
 80159ae:	1ba4      	subs	r4, r4, r6
 80159b0:	10a4      	asrs	r4, r4, #2
 80159b2:	2500      	movs	r5, #0
 80159b4:	42a5      	cmp	r5, r4
 80159b6:	d109      	bne.n	80159cc <__libc_init_array+0x24>
 80159b8:	4e0b      	ldr	r6, [pc, #44]	; (80159e8 <__libc_init_array+0x40>)
 80159ba:	4c0c      	ldr	r4, [pc, #48]	; (80159ec <__libc_init_array+0x44>)
 80159bc:	f004 f9e6 	bl	8019d8c <_init>
 80159c0:	1ba4      	subs	r4, r4, r6
 80159c2:	10a4      	asrs	r4, r4, #2
 80159c4:	2500      	movs	r5, #0
 80159c6:	42a5      	cmp	r5, r4
 80159c8:	d105      	bne.n	80159d6 <__libc_init_array+0x2e>
 80159ca:	bd70      	pop	{r4, r5, r6, pc}
 80159cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159d0:	4798      	blx	r3
 80159d2:	3501      	adds	r5, #1
 80159d4:	e7ee      	b.n	80159b4 <__libc_init_array+0xc>
 80159d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159da:	4798      	blx	r3
 80159dc:	3501      	adds	r5, #1
 80159de:	e7f2      	b.n	80159c6 <__libc_init_array+0x1e>
 80159e0:	0801a7bc 	.word	0x0801a7bc
 80159e4:	0801a7bc 	.word	0x0801a7bc
 80159e8:	0801a7bc 	.word	0x0801a7bc
 80159ec:	0801a7c4 	.word	0x0801a7c4

080159f0 <memset>:
 80159f0:	4402      	add	r2, r0
 80159f2:	4603      	mov	r3, r0
 80159f4:	4293      	cmp	r3, r2
 80159f6:	d100      	bne.n	80159fa <memset+0xa>
 80159f8:	4770      	bx	lr
 80159fa:	f803 1b01 	strb.w	r1, [r3], #1
 80159fe:	e7f9      	b.n	80159f4 <memset+0x4>

08015a00 <__cvt>:
 8015a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a04:	ec55 4b10 	vmov	r4, r5, d0
 8015a08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015a0a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015a0e:	2d00      	cmp	r5, #0
 8015a10:	460e      	mov	r6, r1
 8015a12:	4691      	mov	r9, r2
 8015a14:	4619      	mov	r1, r3
 8015a16:	bfb8      	it	lt
 8015a18:	4622      	movlt	r2, r4
 8015a1a:	462b      	mov	r3, r5
 8015a1c:	f027 0720 	bic.w	r7, r7, #32
 8015a20:	bfbb      	ittet	lt
 8015a22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015a26:	461d      	movlt	r5, r3
 8015a28:	2300      	movge	r3, #0
 8015a2a:	232d      	movlt	r3, #45	; 0x2d
 8015a2c:	bfb8      	it	lt
 8015a2e:	4614      	movlt	r4, r2
 8015a30:	2f46      	cmp	r7, #70	; 0x46
 8015a32:	700b      	strb	r3, [r1, #0]
 8015a34:	d004      	beq.n	8015a40 <__cvt+0x40>
 8015a36:	2f45      	cmp	r7, #69	; 0x45
 8015a38:	d100      	bne.n	8015a3c <__cvt+0x3c>
 8015a3a:	3601      	adds	r6, #1
 8015a3c:	2102      	movs	r1, #2
 8015a3e:	e000      	b.n	8015a42 <__cvt+0x42>
 8015a40:	2103      	movs	r1, #3
 8015a42:	ab03      	add	r3, sp, #12
 8015a44:	9301      	str	r3, [sp, #4]
 8015a46:	ab02      	add	r3, sp, #8
 8015a48:	9300      	str	r3, [sp, #0]
 8015a4a:	4632      	mov	r2, r6
 8015a4c:	4653      	mov	r3, sl
 8015a4e:	ec45 4b10 	vmov	d0, r4, r5
 8015a52:	f001 fdfd 	bl	8017650 <_dtoa_r>
 8015a56:	2f47      	cmp	r7, #71	; 0x47
 8015a58:	4680      	mov	r8, r0
 8015a5a:	d102      	bne.n	8015a62 <__cvt+0x62>
 8015a5c:	f019 0f01 	tst.w	r9, #1
 8015a60:	d026      	beq.n	8015ab0 <__cvt+0xb0>
 8015a62:	2f46      	cmp	r7, #70	; 0x46
 8015a64:	eb08 0906 	add.w	r9, r8, r6
 8015a68:	d111      	bne.n	8015a8e <__cvt+0x8e>
 8015a6a:	f898 3000 	ldrb.w	r3, [r8]
 8015a6e:	2b30      	cmp	r3, #48	; 0x30
 8015a70:	d10a      	bne.n	8015a88 <__cvt+0x88>
 8015a72:	2200      	movs	r2, #0
 8015a74:	2300      	movs	r3, #0
 8015a76:	4620      	mov	r0, r4
 8015a78:	4629      	mov	r1, r5
 8015a7a:	f7eb f83d 	bl	8000af8 <__aeabi_dcmpeq>
 8015a7e:	b918      	cbnz	r0, 8015a88 <__cvt+0x88>
 8015a80:	f1c6 0601 	rsb	r6, r6, #1
 8015a84:	f8ca 6000 	str.w	r6, [sl]
 8015a88:	f8da 3000 	ldr.w	r3, [sl]
 8015a8c:	4499      	add	r9, r3
 8015a8e:	2200      	movs	r2, #0
 8015a90:	2300      	movs	r3, #0
 8015a92:	4620      	mov	r0, r4
 8015a94:	4629      	mov	r1, r5
 8015a96:	f7eb f82f 	bl	8000af8 <__aeabi_dcmpeq>
 8015a9a:	b938      	cbnz	r0, 8015aac <__cvt+0xac>
 8015a9c:	2230      	movs	r2, #48	; 0x30
 8015a9e:	9b03      	ldr	r3, [sp, #12]
 8015aa0:	454b      	cmp	r3, r9
 8015aa2:	d205      	bcs.n	8015ab0 <__cvt+0xb0>
 8015aa4:	1c59      	adds	r1, r3, #1
 8015aa6:	9103      	str	r1, [sp, #12]
 8015aa8:	701a      	strb	r2, [r3, #0]
 8015aaa:	e7f8      	b.n	8015a9e <__cvt+0x9e>
 8015aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ab0:	9b03      	ldr	r3, [sp, #12]
 8015ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ab4:	eba3 0308 	sub.w	r3, r3, r8
 8015ab8:	4640      	mov	r0, r8
 8015aba:	6013      	str	r3, [r2, #0]
 8015abc:	b004      	add	sp, #16
 8015abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015ac2 <__exponent>:
 8015ac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ac4:	2900      	cmp	r1, #0
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	bfba      	itte	lt
 8015aca:	4249      	neglt	r1, r1
 8015acc:	232d      	movlt	r3, #45	; 0x2d
 8015ace:	232b      	movge	r3, #43	; 0x2b
 8015ad0:	2909      	cmp	r1, #9
 8015ad2:	f804 2b02 	strb.w	r2, [r4], #2
 8015ad6:	7043      	strb	r3, [r0, #1]
 8015ad8:	dd20      	ble.n	8015b1c <__exponent+0x5a>
 8015ada:	f10d 0307 	add.w	r3, sp, #7
 8015ade:	461f      	mov	r7, r3
 8015ae0:	260a      	movs	r6, #10
 8015ae2:	fb91 f5f6 	sdiv	r5, r1, r6
 8015ae6:	fb06 1115 	mls	r1, r6, r5, r1
 8015aea:	3130      	adds	r1, #48	; 0x30
 8015aec:	2d09      	cmp	r5, #9
 8015aee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015af2:	f103 32ff 	add.w	r2, r3, #4294967295
 8015af6:	4629      	mov	r1, r5
 8015af8:	dc09      	bgt.n	8015b0e <__exponent+0x4c>
 8015afa:	3130      	adds	r1, #48	; 0x30
 8015afc:	3b02      	subs	r3, #2
 8015afe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015b02:	42bb      	cmp	r3, r7
 8015b04:	4622      	mov	r2, r4
 8015b06:	d304      	bcc.n	8015b12 <__exponent+0x50>
 8015b08:	1a10      	subs	r0, r2, r0
 8015b0a:	b003      	add	sp, #12
 8015b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b0e:	4613      	mov	r3, r2
 8015b10:	e7e7      	b.n	8015ae2 <__exponent+0x20>
 8015b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b16:	f804 2b01 	strb.w	r2, [r4], #1
 8015b1a:	e7f2      	b.n	8015b02 <__exponent+0x40>
 8015b1c:	2330      	movs	r3, #48	; 0x30
 8015b1e:	4419      	add	r1, r3
 8015b20:	7083      	strb	r3, [r0, #2]
 8015b22:	1d02      	adds	r2, r0, #4
 8015b24:	70c1      	strb	r1, [r0, #3]
 8015b26:	e7ef      	b.n	8015b08 <__exponent+0x46>

08015b28 <_printf_float>:
 8015b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b2c:	b08d      	sub	sp, #52	; 0x34
 8015b2e:	460c      	mov	r4, r1
 8015b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015b34:	4616      	mov	r6, r2
 8015b36:	461f      	mov	r7, r3
 8015b38:	4605      	mov	r5, r0
 8015b3a:	f002 fe7b 	bl	8018834 <_localeconv_r>
 8015b3e:	6803      	ldr	r3, [r0, #0]
 8015b40:	9304      	str	r3, [sp, #16]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7ea fb5c 	bl	8000200 <strlen>
 8015b48:	2300      	movs	r3, #0
 8015b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8015b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8015b50:	9005      	str	r0, [sp, #20]
 8015b52:	3307      	adds	r3, #7
 8015b54:	f023 0307 	bic.w	r3, r3, #7
 8015b58:	f103 0208 	add.w	r2, r3, #8
 8015b5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015b60:	f8d4 b000 	ldr.w	fp, [r4]
 8015b64:	f8c8 2000 	str.w	r2, [r8]
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015b70:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015b74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b78:	9307      	str	r3, [sp, #28]
 8015b7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b82:	4ba7      	ldr	r3, [pc, #668]	; (8015e20 <_printf_float+0x2f8>)
 8015b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b88:	f7ea ffe8 	bl	8000b5c <__aeabi_dcmpun>
 8015b8c:	bb70      	cbnz	r0, 8015bec <_printf_float+0xc4>
 8015b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b92:	4ba3      	ldr	r3, [pc, #652]	; (8015e20 <_printf_float+0x2f8>)
 8015b94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b98:	f7ea ffc2 	bl	8000b20 <__aeabi_dcmple>
 8015b9c:	bb30      	cbnz	r0, 8015bec <_printf_float+0xc4>
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	4640      	mov	r0, r8
 8015ba4:	4649      	mov	r1, r9
 8015ba6:	f7ea ffb1 	bl	8000b0c <__aeabi_dcmplt>
 8015baa:	b110      	cbz	r0, 8015bb2 <_printf_float+0x8a>
 8015bac:	232d      	movs	r3, #45	; 0x2d
 8015bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bb2:	4a9c      	ldr	r2, [pc, #624]	; (8015e24 <_printf_float+0x2fc>)
 8015bb4:	4b9c      	ldr	r3, [pc, #624]	; (8015e28 <_printf_float+0x300>)
 8015bb6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bba:	bf8c      	ite	hi
 8015bbc:	4690      	movhi	r8, r2
 8015bbe:	4698      	movls	r8, r3
 8015bc0:	2303      	movs	r3, #3
 8015bc2:	f02b 0204 	bic.w	r2, fp, #4
 8015bc6:	6123      	str	r3, [r4, #16]
 8015bc8:	6022      	str	r2, [r4, #0]
 8015bca:	f04f 0900 	mov.w	r9, #0
 8015bce:	9700      	str	r7, [sp, #0]
 8015bd0:	4633      	mov	r3, r6
 8015bd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8015bd4:	4621      	mov	r1, r4
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	f000 f9e6 	bl	8015fa8 <_printf_common>
 8015bdc:	3001      	adds	r0, #1
 8015bde:	f040 808d 	bne.w	8015cfc <_printf_float+0x1d4>
 8015be2:	f04f 30ff 	mov.w	r0, #4294967295
 8015be6:	b00d      	add	sp, #52	; 0x34
 8015be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bec:	4642      	mov	r2, r8
 8015bee:	464b      	mov	r3, r9
 8015bf0:	4640      	mov	r0, r8
 8015bf2:	4649      	mov	r1, r9
 8015bf4:	f7ea ffb2 	bl	8000b5c <__aeabi_dcmpun>
 8015bf8:	b110      	cbz	r0, 8015c00 <_printf_float+0xd8>
 8015bfa:	4a8c      	ldr	r2, [pc, #560]	; (8015e2c <_printf_float+0x304>)
 8015bfc:	4b8c      	ldr	r3, [pc, #560]	; (8015e30 <_printf_float+0x308>)
 8015bfe:	e7da      	b.n	8015bb6 <_printf_float+0x8e>
 8015c00:	6861      	ldr	r1, [r4, #4]
 8015c02:	1c4b      	adds	r3, r1, #1
 8015c04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015c08:	a80a      	add	r0, sp, #40	; 0x28
 8015c0a:	d13e      	bne.n	8015c8a <_printf_float+0x162>
 8015c0c:	2306      	movs	r3, #6
 8015c0e:	6063      	str	r3, [r4, #4]
 8015c10:	2300      	movs	r3, #0
 8015c12:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015c16:	ab09      	add	r3, sp, #36	; 0x24
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	ec49 8b10 	vmov	d0, r8, r9
 8015c1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015c22:	6022      	str	r2, [r4, #0]
 8015c24:	f8cd a004 	str.w	sl, [sp, #4]
 8015c28:	6861      	ldr	r1, [r4, #4]
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	f7ff fee8 	bl	8015a00 <__cvt>
 8015c30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015c34:	2b47      	cmp	r3, #71	; 0x47
 8015c36:	4680      	mov	r8, r0
 8015c38:	d109      	bne.n	8015c4e <_printf_float+0x126>
 8015c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c3c:	1cd8      	adds	r0, r3, #3
 8015c3e:	db02      	blt.n	8015c46 <_printf_float+0x11e>
 8015c40:	6862      	ldr	r2, [r4, #4]
 8015c42:	4293      	cmp	r3, r2
 8015c44:	dd47      	ble.n	8015cd6 <_printf_float+0x1ae>
 8015c46:	f1aa 0a02 	sub.w	sl, sl, #2
 8015c4a:	fa5f fa8a 	uxtb.w	sl, sl
 8015c4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c54:	d824      	bhi.n	8015ca0 <_printf_float+0x178>
 8015c56:	3901      	subs	r1, #1
 8015c58:	4652      	mov	r2, sl
 8015c5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c5e:	9109      	str	r1, [sp, #36]	; 0x24
 8015c60:	f7ff ff2f 	bl	8015ac2 <__exponent>
 8015c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c66:	1813      	adds	r3, r2, r0
 8015c68:	2a01      	cmp	r2, #1
 8015c6a:	4681      	mov	r9, r0
 8015c6c:	6123      	str	r3, [r4, #16]
 8015c6e:	dc02      	bgt.n	8015c76 <_printf_float+0x14e>
 8015c70:	6822      	ldr	r2, [r4, #0]
 8015c72:	07d1      	lsls	r1, r2, #31
 8015c74:	d501      	bpl.n	8015c7a <_printf_float+0x152>
 8015c76:	3301      	adds	r3, #1
 8015c78:	6123      	str	r3, [r4, #16]
 8015c7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d0a5      	beq.n	8015bce <_printf_float+0xa6>
 8015c82:	232d      	movs	r3, #45	; 0x2d
 8015c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c88:	e7a1      	b.n	8015bce <_printf_float+0xa6>
 8015c8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015c8e:	f000 8177 	beq.w	8015f80 <_printf_float+0x458>
 8015c92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015c96:	d1bb      	bne.n	8015c10 <_printf_float+0xe8>
 8015c98:	2900      	cmp	r1, #0
 8015c9a:	d1b9      	bne.n	8015c10 <_printf_float+0xe8>
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	e7b6      	b.n	8015c0e <_printf_float+0xe6>
 8015ca0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015ca4:	d119      	bne.n	8015cda <_printf_float+0x1b2>
 8015ca6:	2900      	cmp	r1, #0
 8015ca8:	6863      	ldr	r3, [r4, #4]
 8015caa:	dd0c      	ble.n	8015cc6 <_printf_float+0x19e>
 8015cac:	6121      	str	r1, [r4, #16]
 8015cae:	b913      	cbnz	r3, 8015cb6 <_printf_float+0x18e>
 8015cb0:	6822      	ldr	r2, [r4, #0]
 8015cb2:	07d2      	lsls	r2, r2, #31
 8015cb4:	d502      	bpl.n	8015cbc <_printf_float+0x194>
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	440b      	add	r3, r1
 8015cba:	6123      	str	r3, [r4, #16]
 8015cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8015cc0:	f04f 0900 	mov.w	r9, #0
 8015cc4:	e7d9      	b.n	8015c7a <_printf_float+0x152>
 8015cc6:	b913      	cbnz	r3, 8015cce <_printf_float+0x1a6>
 8015cc8:	6822      	ldr	r2, [r4, #0]
 8015cca:	07d0      	lsls	r0, r2, #31
 8015ccc:	d501      	bpl.n	8015cd2 <_printf_float+0x1aa>
 8015cce:	3302      	adds	r3, #2
 8015cd0:	e7f3      	b.n	8015cba <_printf_float+0x192>
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	e7f1      	b.n	8015cba <_printf_float+0x192>
 8015cd6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015cda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cde:	4293      	cmp	r3, r2
 8015ce0:	db05      	blt.n	8015cee <_printf_float+0x1c6>
 8015ce2:	6822      	ldr	r2, [r4, #0]
 8015ce4:	6123      	str	r3, [r4, #16]
 8015ce6:	07d1      	lsls	r1, r2, #31
 8015ce8:	d5e8      	bpl.n	8015cbc <_printf_float+0x194>
 8015cea:	3301      	adds	r3, #1
 8015cec:	e7e5      	b.n	8015cba <_printf_float+0x192>
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	bfd4      	ite	le
 8015cf2:	f1c3 0302 	rsble	r3, r3, #2
 8015cf6:	2301      	movgt	r3, #1
 8015cf8:	4413      	add	r3, r2
 8015cfa:	e7de      	b.n	8015cba <_printf_float+0x192>
 8015cfc:	6823      	ldr	r3, [r4, #0]
 8015cfe:	055a      	lsls	r2, r3, #21
 8015d00:	d407      	bmi.n	8015d12 <_printf_float+0x1ea>
 8015d02:	6923      	ldr	r3, [r4, #16]
 8015d04:	4642      	mov	r2, r8
 8015d06:	4631      	mov	r1, r6
 8015d08:	4628      	mov	r0, r5
 8015d0a:	47b8      	blx	r7
 8015d0c:	3001      	adds	r0, #1
 8015d0e:	d12b      	bne.n	8015d68 <_printf_float+0x240>
 8015d10:	e767      	b.n	8015be2 <_printf_float+0xba>
 8015d12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d16:	f240 80dc 	bls.w	8015ed2 <_printf_float+0x3aa>
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d22:	f7ea fee9 	bl	8000af8 <__aeabi_dcmpeq>
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d033      	beq.n	8015d92 <_printf_float+0x26a>
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	4a41      	ldr	r2, [pc, #260]	; (8015e34 <_printf_float+0x30c>)
 8015d2e:	4631      	mov	r1, r6
 8015d30:	4628      	mov	r0, r5
 8015d32:	47b8      	blx	r7
 8015d34:	3001      	adds	r0, #1
 8015d36:	f43f af54 	beq.w	8015be2 <_printf_float+0xba>
 8015d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	db02      	blt.n	8015d48 <_printf_float+0x220>
 8015d42:	6823      	ldr	r3, [r4, #0]
 8015d44:	07d8      	lsls	r0, r3, #31
 8015d46:	d50f      	bpl.n	8015d68 <_printf_float+0x240>
 8015d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	4628      	mov	r0, r5
 8015d50:	47b8      	blx	r7
 8015d52:	3001      	adds	r0, #1
 8015d54:	f43f af45 	beq.w	8015be2 <_printf_float+0xba>
 8015d58:	f04f 0800 	mov.w	r8, #0
 8015d5c:	f104 091a 	add.w	r9, r4, #26
 8015d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d62:	3b01      	subs	r3, #1
 8015d64:	4543      	cmp	r3, r8
 8015d66:	dc09      	bgt.n	8015d7c <_printf_float+0x254>
 8015d68:	6823      	ldr	r3, [r4, #0]
 8015d6a:	079b      	lsls	r3, r3, #30
 8015d6c:	f100 8103 	bmi.w	8015f76 <_printf_float+0x44e>
 8015d70:	68e0      	ldr	r0, [r4, #12]
 8015d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d74:	4298      	cmp	r0, r3
 8015d76:	bfb8      	it	lt
 8015d78:	4618      	movlt	r0, r3
 8015d7a:	e734      	b.n	8015be6 <_printf_float+0xbe>
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	464a      	mov	r2, r9
 8015d80:	4631      	mov	r1, r6
 8015d82:	4628      	mov	r0, r5
 8015d84:	47b8      	blx	r7
 8015d86:	3001      	adds	r0, #1
 8015d88:	f43f af2b 	beq.w	8015be2 <_printf_float+0xba>
 8015d8c:	f108 0801 	add.w	r8, r8, #1
 8015d90:	e7e6      	b.n	8015d60 <_printf_float+0x238>
 8015d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	dc2b      	bgt.n	8015df0 <_printf_float+0x2c8>
 8015d98:	2301      	movs	r3, #1
 8015d9a:	4a26      	ldr	r2, [pc, #152]	; (8015e34 <_printf_float+0x30c>)
 8015d9c:	4631      	mov	r1, r6
 8015d9e:	4628      	mov	r0, r5
 8015da0:	47b8      	blx	r7
 8015da2:	3001      	adds	r0, #1
 8015da4:	f43f af1d 	beq.w	8015be2 <_printf_float+0xba>
 8015da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015daa:	b923      	cbnz	r3, 8015db6 <_printf_float+0x28e>
 8015dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dae:	b913      	cbnz	r3, 8015db6 <_printf_float+0x28e>
 8015db0:	6823      	ldr	r3, [r4, #0]
 8015db2:	07d9      	lsls	r1, r3, #31
 8015db4:	d5d8      	bpl.n	8015d68 <_printf_float+0x240>
 8015db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dba:	4631      	mov	r1, r6
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	47b8      	blx	r7
 8015dc0:	3001      	adds	r0, #1
 8015dc2:	f43f af0e 	beq.w	8015be2 <_printf_float+0xba>
 8015dc6:	f04f 0900 	mov.w	r9, #0
 8015dca:	f104 0a1a 	add.w	sl, r4, #26
 8015dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd0:	425b      	negs	r3, r3
 8015dd2:	454b      	cmp	r3, r9
 8015dd4:	dc01      	bgt.n	8015dda <_printf_float+0x2b2>
 8015dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dd8:	e794      	b.n	8015d04 <_printf_float+0x1dc>
 8015dda:	2301      	movs	r3, #1
 8015ddc:	4652      	mov	r2, sl
 8015dde:	4631      	mov	r1, r6
 8015de0:	4628      	mov	r0, r5
 8015de2:	47b8      	blx	r7
 8015de4:	3001      	adds	r0, #1
 8015de6:	f43f aefc 	beq.w	8015be2 <_printf_float+0xba>
 8015dea:	f109 0901 	add.w	r9, r9, #1
 8015dee:	e7ee      	b.n	8015dce <_printf_float+0x2a6>
 8015df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015df4:	429a      	cmp	r2, r3
 8015df6:	bfa8      	it	ge
 8015df8:	461a      	movge	r2, r3
 8015dfa:	2a00      	cmp	r2, #0
 8015dfc:	4691      	mov	r9, r2
 8015dfe:	dd07      	ble.n	8015e10 <_printf_float+0x2e8>
 8015e00:	4613      	mov	r3, r2
 8015e02:	4631      	mov	r1, r6
 8015e04:	4642      	mov	r2, r8
 8015e06:	4628      	mov	r0, r5
 8015e08:	47b8      	blx	r7
 8015e0a:	3001      	adds	r0, #1
 8015e0c:	f43f aee9 	beq.w	8015be2 <_printf_float+0xba>
 8015e10:	f104 031a 	add.w	r3, r4, #26
 8015e14:	f04f 0b00 	mov.w	fp, #0
 8015e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e1c:	9306      	str	r3, [sp, #24]
 8015e1e:	e015      	b.n	8015e4c <_printf_float+0x324>
 8015e20:	7fefffff 	.word	0x7fefffff
 8015e24:	0801a48c 	.word	0x0801a48c
 8015e28:	0801a488 	.word	0x0801a488
 8015e2c:	0801a494 	.word	0x0801a494
 8015e30:	0801a490 	.word	0x0801a490
 8015e34:	0801a64b 	.word	0x0801a64b
 8015e38:	2301      	movs	r3, #1
 8015e3a:	9a06      	ldr	r2, [sp, #24]
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	4628      	mov	r0, r5
 8015e40:	47b8      	blx	r7
 8015e42:	3001      	adds	r0, #1
 8015e44:	f43f aecd 	beq.w	8015be2 <_printf_float+0xba>
 8015e48:	f10b 0b01 	add.w	fp, fp, #1
 8015e4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015e50:	ebaa 0309 	sub.w	r3, sl, r9
 8015e54:	455b      	cmp	r3, fp
 8015e56:	dcef      	bgt.n	8015e38 <_printf_float+0x310>
 8015e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	44d0      	add	r8, sl
 8015e60:	db15      	blt.n	8015e8e <_printf_float+0x366>
 8015e62:	6823      	ldr	r3, [r4, #0]
 8015e64:	07da      	lsls	r2, r3, #31
 8015e66:	d412      	bmi.n	8015e8e <_printf_float+0x366>
 8015e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e6c:	eba3 020a 	sub.w	r2, r3, sl
 8015e70:	eba3 0a01 	sub.w	sl, r3, r1
 8015e74:	4592      	cmp	sl, r2
 8015e76:	bfa8      	it	ge
 8015e78:	4692      	movge	sl, r2
 8015e7a:	f1ba 0f00 	cmp.w	sl, #0
 8015e7e:	dc0e      	bgt.n	8015e9e <_printf_float+0x376>
 8015e80:	f04f 0800 	mov.w	r8, #0
 8015e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e88:	f104 091a 	add.w	r9, r4, #26
 8015e8c:	e019      	b.n	8015ec2 <_printf_float+0x39a>
 8015e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e92:	4631      	mov	r1, r6
 8015e94:	4628      	mov	r0, r5
 8015e96:	47b8      	blx	r7
 8015e98:	3001      	adds	r0, #1
 8015e9a:	d1e5      	bne.n	8015e68 <_printf_float+0x340>
 8015e9c:	e6a1      	b.n	8015be2 <_printf_float+0xba>
 8015e9e:	4653      	mov	r3, sl
 8015ea0:	4642      	mov	r2, r8
 8015ea2:	4631      	mov	r1, r6
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	47b8      	blx	r7
 8015ea8:	3001      	adds	r0, #1
 8015eaa:	d1e9      	bne.n	8015e80 <_printf_float+0x358>
 8015eac:	e699      	b.n	8015be2 <_printf_float+0xba>
 8015eae:	2301      	movs	r3, #1
 8015eb0:	464a      	mov	r2, r9
 8015eb2:	4631      	mov	r1, r6
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	47b8      	blx	r7
 8015eb8:	3001      	adds	r0, #1
 8015eba:	f43f ae92 	beq.w	8015be2 <_printf_float+0xba>
 8015ebe:	f108 0801 	add.w	r8, r8, #1
 8015ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ec6:	1a9b      	subs	r3, r3, r2
 8015ec8:	eba3 030a 	sub.w	r3, r3, sl
 8015ecc:	4543      	cmp	r3, r8
 8015ece:	dcee      	bgt.n	8015eae <_printf_float+0x386>
 8015ed0:	e74a      	b.n	8015d68 <_printf_float+0x240>
 8015ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ed4:	2a01      	cmp	r2, #1
 8015ed6:	dc01      	bgt.n	8015edc <_printf_float+0x3b4>
 8015ed8:	07db      	lsls	r3, r3, #31
 8015eda:	d53a      	bpl.n	8015f52 <_printf_float+0x42a>
 8015edc:	2301      	movs	r3, #1
 8015ede:	4642      	mov	r2, r8
 8015ee0:	4631      	mov	r1, r6
 8015ee2:	4628      	mov	r0, r5
 8015ee4:	47b8      	blx	r7
 8015ee6:	3001      	adds	r0, #1
 8015ee8:	f43f ae7b 	beq.w	8015be2 <_printf_float+0xba>
 8015eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ef0:	4631      	mov	r1, r6
 8015ef2:	4628      	mov	r0, r5
 8015ef4:	47b8      	blx	r7
 8015ef6:	3001      	adds	r0, #1
 8015ef8:	f108 0801 	add.w	r8, r8, #1
 8015efc:	f43f ae71 	beq.w	8015be2 <_printf_float+0xba>
 8015f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f02:	2200      	movs	r2, #0
 8015f04:	f103 3aff 	add.w	sl, r3, #4294967295
 8015f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	f7ea fdf3 	bl	8000af8 <__aeabi_dcmpeq>
 8015f12:	b9c8      	cbnz	r0, 8015f48 <_printf_float+0x420>
 8015f14:	4653      	mov	r3, sl
 8015f16:	4642      	mov	r2, r8
 8015f18:	4631      	mov	r1, r6
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	47b8      	blx	r7
 8015f1e:	3001      	adds	r0, #1
 8015f20:	d10e      	bne.n	8015f40 <_printf_float+0x418>
 8015f22:	e65e      	b.n	8015be2 <_printf_float+0xba>
 8015f24:	2301      	movs	r3, #1
 8015f26:	4652      	mov	r2, sl
 8015f28:	4631      	mov	r1, r6
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	47b8      	blx	r7
 8015f2e:	3001      	adds	r0, #1
 8015f30:	f43f ae57 	beq.w	8015be2 <_printf_float+0xba>
 8015f34:	f108 0801 	add.w	r8, r8, #1
 8015f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f3a:	3b01      	subs	r3, #1
 8015f3c:	4543      	cmp	r3, r8
 8015f3e:	dcf1      	bgt.n	8015f24 <_printf_float+0x3fc>
 8015f40:	464b      	mov	r3, r9
 8015f42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f46:	e6de      	b.n	8015d06 <_printf_float+0x1de>
 8015f48:	f04f 0800 	mov.w	r8, #0
 8015f4c:	f104 0a1a 	add.w	sl, r4, #26
 8015f50:	e7f2      	b.n	8015f38 <_printf_float+0x410>
 8015f52:	2301      	movs	r3, #1
 8015f54:	e7df      	b.n	8015f16 <_printf_float+0x3ee>
 8015f56:	2301      	movs	r3, #1
 8015f58:	464a      	mov	r2, r9
 8015f5a:	4631      	mov	r1, r6
 8015f5c:	4628      	mov	r0, r5
 8015f5e:	47b8      	blx	r7
 8015f60:	3001      	adds	r0, #1
 8015f62:	f43f ae3e 	beq.w	8015be2 <_printf_float+0xba>
 8015f66:	f108 0801 	add.w	r8, r8, #1
 8015f6a:	68e3      	ldr	r3, [r4, #12]
 8015f6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f6e:	1a9b      	subs	r3, r3, r2
 8015f70:	4543      	cmp	r3, r8
 8015f72:	dcf0      	bgt.n	8015f56 <_printf_float+0x42e>
 8015f74:	e6fc      	b.n	8015d70 <_printf_float+0x248>
 8015f76:	f04f 0800 	mov.w	r8, #0
 8015f7a:	f104 0919 	add.w	r9, r4, #25
 8015f7e:	e7f4      	b.n	8015f6a <_printf_float+0x442>
 8015f80:	2900      	cmp	r1, #0
 8015f82:	f43f ae8b 	beq.w	8015c9c <_printf_float+0x174>
 8015f86:	2300      	movs	r3, #0
 8015f88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015f8c:	ab09      	add	r3, sp, #36	; 0x24
 8015f8e:	9300      	str	r3, [sp, #0]
 8015f90:	ec49 8b10 	vmov	d0, r8, r9
 8015f94:	6022      	str	r2, [r4, #0]
 8015f96:	f8cd a004 	str.w	sl, [sp, #4]
 8015f9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015f9e:	4628      	mov	r0, r5
 8015fa0:	f7ff fd2e 	bl	8015a00 <__cvt>
 8015fa4:	4680      	mov	r8, r0
 8015fa6:	e648      	b.n	8015c3a <_printf_float+0x112>

08015fa8 <_printf_common>:
 8015fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fac:	4691      	mov	r9, r2
 8015fae:	461f      	mov	r7, r3
 8015fb0:	688a      	ldr	r2, [r1, #8]
 8015fb2:	690b      	ldr	r3, [r1, #16]
 8015fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	bfb8      	it	lt
 8015fbc:	4613      	movlt	r3, r2
 8015fbe:	f8c9 3000 	str.w	r3, [r9]
 8015fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015fc6:	4606      	mov	r6, r0
 8015fc8:	460c      	mov	r4, r1
 8015fca:	b112      	cbz	r2, 8015fd2 <_printf_common+0x2a>
 8015fcc:	3301      	adds	r3, #1
 8015fce:	f8c9 3000 	str.w	r3, [r9]
 8015fd2:	6823      	ldr	r3, [r4, #0]
 8015fd4:	0699      	lsls	r1, r3, #26
 8015fd6:	bf42      	ittt	mi
 8015fd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015fdc:	3302      	addmi	r3, #2
 8015fde:	f8c9 3000 	strmi.w	r3, [r9]
 8015fe2:	6825      	ldr	r5, [r4, #0]
 8015fe4:	f015 0506 	ands.w	r5, r5, #6
 8015fe8:	d107      	bne.n	8015ffa <_printf_common+0x52>
 8015fea:	f104 0a19 	add.w	sl, r4, #25
 8015fee:	68e3      	ldr	r3, [r4, #12]
 8015ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8015ff4:	1a9b      	subs	r3, r3, r2
 8015ff6:	42ab      	cmp	r3, r5
 8015ff8:	dc28      	bgt.n	801604c <_printf_common+0xa4>
 8015ffa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015ffe:	6822      	ldr	r2, [r4, #0]
 8016000:	3300      	adds	r3, #0
 8016002:	bf18      	it	ne
 8016004:	2301      	movne	r3, #1
 8016006:	0692      	lsls	r2, r2, #26
 8016008:	d42d      	bmi.n	8016066 <_printf_common+0xbe>
 801600a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801600e:	4639      	mov	r1, r7
 8016010:	4630      	mov	r0, r6
 8016012:	47c0      	blx	r8
 8016014:	3001      	adds	r0, #1
 8016016:	d020      	beq.n	801605a <_printf_common+0xb2>
 8016018:	6823      	ldr	r3, [r4, #0]
 801601a:	68e5      	ldr	r5, [r4, #12]
 801601c:	f8d9 2000 	ldr.w	r2, [r9]
 8016020:	f003 0306 	and.w	r3, r3, #6
 8016024:	2b04      	cmp	r3, #4
 8016026:	bf08      	it	eq
 8016028:	1aad      	subeq	r5, r5, r2
 801602a:	68a3      	ldr	r3, [r4, #8]
 801602c:	6922      	ldr	r2, [r4, #16]
 801602e:	bf0c      	ite	eq
 8016030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016034:	2500      	movne	r5, #0
 8016036:	4293      	cmp	r3, r2
 8016038:	bfc4      	itt	gt
 801603a:	1a9b      	subgt	r3, r3, r2
 801603c:	18ed      	addgt	r5, r5, r3
 801603e:	f04f 0900 	mov.w	r9, #0
 8016042:	341a      	adds	r4, #26
 8016044:	454d      	cmp	r5, r9
 8016046:	d11a      	bne.n	801607e <_printf_common+0xd6>
 8016048:	2000      	movs	r0, #0
 801604a:	e008      	b.n	801605e <_printf_common+0xb6>
 801604c:	2301      	movs	r3, #1
 801604e:	4652      	mov	r2, sl
 8016050:	4639      	mov	r1, r7
 8016052:	4630      	mov	r0, r6
 8016054:	47c0      	blx	r8
 8016056:	3001      	adds	r0, #1
 8016058:	d103      	bne.n	8016062 <_printf_common+0xba>
 801605a:	f04f 30ff 	mov.w	r0, #4294967295
 801605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016062:	3501      	adds	r5, #1
 8016064:	e7c3      	b.n	8015fee <_printf_common+0x46>
 8016066:	18e1      	adds	r1, r4, r3
 8016068:	1c5a      	adds	r2, r3, #1
 801606a:	2030      	movs	r0, #48	; 0x30
 801606c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016070:	4422      	add	r2, r4
 8016072:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801607a:	3302      	adds	r3, #2
 801607c:	e7c5      	b.n	801600a <_printf_common+0x62>
 801607e:	2301      	movs	r3, #1
 8016080:	4622      	mov	r2, r4
 8016082:	4639      	mov	r1, r7
 8016084:	4630      	mov	r0, r6
 8016086:	47c0      	blx	r8
 8016088:	3001      	adds	r0, #1
 801608a:	d0e6      	beq.n	801605a <_printf_common+0xb2>
 801608c:	f109 0901 	add.w	r9, r9, #1
 8016090:	e7d8      	b.n	8016044 <_printf_common+0x9c>
	...

08016094 <_printf_i>:
 8016094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016098:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801609c:	460c      	mov	r4, r1
 801609e:	7e09      	ldrb	r1, [r1, #24]
 80160a0:	b085      	sub	sp, #20
 80160a2:	296e      	cmp	r1, #110	; 0x6e
 80160a4:	4617      	mov	r7, r2
 80160a6:	4606      	mov	r6, r0
 80160a8:	4698      	mov	r8, r3
 80160aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160ac:	f000 80b3 	beq.w	8016216 <_printf_i+0x182>
 80160b0:	d822      	bhi.n	80160f8 <_printf_i+0x64>
 80160b2:	2963      	cmp	r1, #99	; 0x63
 80160b4:	d036      	beq.n	8016124 <_printf_i+0x90>
 80160b6:	d80a      	bhi.n	80160ce <_printf_i+0x3a>
 80160b8:	2900      	cmp	r1, #0
 80160ba:	f000 80b9 	beq.w	8016230 <_printf_i+0x19c>
 80160be:	2958      	cmp	r1, #88	; 0x58
 80160c0:	f000 8083 	beq.w	80161ca <_printf_i+0x136>
 80160c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80160cc:	e032      	b.n	8016134 <_printf_i+0xa0>
 80160ce:	2964      	cmp	r1, #100	; 0x64
 80160d0:	d001      	beq.n	80160d6 <_printf_i+0x42>
 80160d2:	2969      	cmp	r1, #105	; 0x69
 80160d4:	d1f6      	bne.n	80160c4 <_printf_i+0x30>
 80160d6:	6820      	ldr	r0, [r4, #0]
 80160d8:	6813      	ldr	r3, [r2, #0]
 80160da:	0605      	lsls	r5, r0, #24
 80160dc:	f103 0104 	add.w	r1, r3, #4
 80160e0:	d52a      	bpl.n	8016138 <_printf_i+0xa4>
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	6011      	str	r1, [r2, #0]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	da03      	bge.n	80160f2 <_printf_i+0x5e>
 80160ea:	222d      	movs	r2, #45	; 0x2d
 80160ec:	425b      	negs	r3, r3
 80160ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80160f2:	486f      	ldr	r0, [pc, #444]	; (80162b0 <_printf_i+0x21c>)
 80160f4:	220a      	movs	r2, #10
 80160f6:	e039      	b.n	801616c <_printf_i+0xd8>
 80160f8:	2973      	cmp	r1, #115	; 0x73
 80160fa:	f000 809d 	beq.w	8016238 <_printf_i+0x1a4>
 80160fe:	d808      	bhi.n	8016112 <_printf_i+0x7e>
 8016100:	296f      	cmp	r1, #111	; 0x6f
 8016102:	d020      	beq.n	8016146 <_printf_i+0xb2>
 8016104:	2970      	cmp	r1, #112	; 0x70
 8016106:	d1dd      	bne.n	80160c4 <_printf_i+0x30>
 8016108:	6823      	ldr	r3, [r4, #0]
 801610a:	f043 0320 	orr.w	r3, r3, #32
 801610e:	6023      	str	r3, [r4, #0]
 8016110:	e003      	b.n	801611a <_printf_i+0x86>
 8016112:	2975      	cmp	r1, #117	; 0x75
 8016114:	d017      	beq.n	8016146 <_printf_i+0xb2>
 8016116:	2978      	cmp	r1, #120	; 0x78
 8016118:	d1d4      	bne.n	80160c4 <_printf_i+0x30>
 801611a:	2378      	movs	r3, #120	; 0x78
 801611c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016120:	4864      	ldr	r0, [pc, #400]	; (80162b4 <_printf_i+0x220>)
 8016122:	e055      	b.n	80161d0 <_printf_i+0x13c>
 8016124:	6813      	ldr	r3, [r2, #0]
 8016126:	1d19      	adds	r1, r3, #4
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	6011      	str	r1, [r2, #0]
 801612c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016134:	2301      	movs	r3, #1
 8016136:	e08c      	b.n	8016252 <_printf_i+0x1be>
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	6011      	str	r1, [r2, #0]
 801613c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016140:	bf18      	it	ne
 8016142:	b21b      	sxthne	r3, r3
 8016144:	e7cf      	b.n	80160e6 <_printf_i+0x52>
 8016146:	6813      	ldr	r3, [r2, #0]
 8016148:	6825      	ldr	r5, [r4, #0]
 801614a:	1d18      	adds	r0, r3, #4
 801614c:	6010      	str	r0, [r2, #0]
 801614e:	0628      	lsls	r0, r5, #24
 8016150:	d501      	bpl.n	8016156 <_printf_i+0xc2>
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	e002      	b.n	801615c <_printf_i+0xc8>
 8016156:	0668      	lsls	r0, r5, #25
 8016158:	d5fb      	bpl.n	8016152 <_printf_i+0xbe>
 801615a:	881b      	ldrh	r3, [r3, #0]
 801615c:	4854      	ldr	r0, [pc, #336]	; (80162b0 <_printf_i+0x21c>)
 801615e:	296f      	cmp	r1, #111	; 0x6f
 8016160:	bf14      	ite	ne
 8016162:	220a      	movne	r2, #10
 8016164:	2208      	moveq	r2, #8
 8016166:	2100      	movs	r1, #0
 8016168:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801616c:	6865      	ldr	r5, [r4, #4]
 801616e:	60a5      	str	r5, [r4, #8]
 8016170:	2d00      	cmp	r5, #0
 8016172:	f2c0 8095 	blt.w	80162a0 <_printf_i+0x20c>
 8016176:	6821      	ldr	r1, [r4, #0]
 8016178:	f021 0104 	bic.w	r1, r1, #4
 801617c:	6021      	str	r1, [r4, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d13d      	bne.n	80161fe <_printf_i+0x16a>
 8016182:	2d00      	cmp	r5, #0
 8016184:	f040 808e 	bne.w	80162a4 <_printf_i+0x210>
 8016188:	4665      	mov	r5, ip
 801618a:	2a08      	cmp	r2, #8
 801618c:	d10b      	bne.n	80161a6 <_printf_i+0x112>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	07db      	lsls	r3, r3, #31
 8016192:	d508      	bpl.n	80161a6 <_printf_i+0x112>
 8016194:	6923      	ldr	r3, [r4, #16]
 8016196:	6862      	ldr	r2, [r4, #4]
 8016198:	429a      	cmp	r2, r3
 801619a:	bfde      	ittt	le
 801619c:	2330      	movle	r3, #48	; 0x30
 801619e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80161a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80161a6:	ebac 0305 	sub.w	r3, ip, r5
 80161aa:	6123      	str	r3, [r4, #16]
 80161ac:	f8cd 8000 	str.w	r8, [sp]
 80161b0:	463b      	mov	r3, r7
 80161b2:	aa03      	add	r2, sp, #12
 80161b4:	4621      	mov	r1, r4
 80161b6:	4630      	mov	r0, r6
 80161b8:	f7ff fef6 	bl	8015fa8 <_printf_common>
 80161bc:	3001      	adds	r0, #1
 80161be:	d14d      	bne.n	801625c <_printf_i+0x1c8>
 80161c0:	f04f 30ff 	mov.w	r0, #4294967295
 80161c4:	b005      	add	sp, #20
 80161c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161ca:	4839      	ldr	r0, [pc, #228]	; (80162b0 <_printf_i+0x21c>)
 80161cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80161d0:	6813      	ldr	r3, [r2, #0]
 80161d2:	6821      	ldr	r1, [r4, #0]
 80161d4:	1d1d      	adds	r5, r3, #4
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	6015      	str	r5, [r2, #0]
 80161da:	060a      	lsls	r2, r1, #24
 80161dc:	d50b      	bpl.n	80161f6 <_printf_i+0x162>
 80161de:	07ca      	lsls	r2, r1, #31
 80161e0:	bf44      	itt	mi
 80161e2:	f041 0120 	orrmi.w	r1, r1, #32
 80161e6:	6021      	strmi	r1, [r4, #0]
 80161e8:	b91b      	cbnz	r3, 80161f2 <_printf_i+0x15e>
 80161ea:	6822      	ldr	r2, [r4, #0]
 80161ec:	f022 0220 	bic.w	r2, r2, #32
 80161f0:	6022      	str	r2, [r4, #0]
 80161f2:	2210      	movs	r2, #16
 80161f4:	e7b7      	b.n	8016166 <_printf_i+0xd2>
 80161f6:	064d      	lsls	r5, r1, #25
 80161f8:	bf48      	it	mi
 80161fa:	b29b      	uxthmi	r3, r3
 80161fc:	e7ef      	b.n	80161de <_printf_i+0x14a>
 80161fe:	4665      	mov	r5, ip
 8016200:	fbb3 f1f2 	udiv	r1, r3, r2
 8016204:	fb02 3311 	mls	r3, r2, r1, r3
 8016208:	5cc3      	ldrb	r3, [r0, r3]
 801620a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801620e:	460b      	mov	r3, r1
 8016210:	2900      	cmp	r1, #0
 8016212:	d1f5      	bne.n	8016200 <_printf_i+0x16c>
 8016214:	e7b9      	b.n	801618a <_printf_i+0xf6>
 8016216:	6813      	ldr	r3, [r2, #0]
 8016218:	6825      	ldr	r5, [r4, #0]
 801621a:	6961      	ldr	r1, [r4, #20]
 801621c:	1d18      	adds	r0, r3, #4
 801621e:	6010      	str	r0, [r2, #0]
 8016220:	0628      	lsls	r0, r5, #24
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	d501      	bpl.n	801622a <_printf_i+0x196>
 8016226:	6019      	str	r1, [r3, #0]
 8016228:	e002      	b.n	8016230 <_printf_i+0x19c>
 801622a:	066a      	lsls	r2, r5, #25
 801622c:	d5fb      	bpl.n	8016226 <_printf_i+0x192>
 801622e:	8019      	strh	r1, [r3, #0]
 8016230:	2300      	movs	r3, #0
 8016232:	6123      	str	r3, [r4, #16]
 8016234:	4665      	mov	r5, ip
 8016236:	e7b9      	b.n	80161ac <_printf_i+0x118>
 8016238:	6813      	ldr	r3, [r2, #0]
 801623a:	1d19      	adds	r1, r3, #4
 801623c:	6011      	str	r1, [r2, #0]
 801623e:	681d      	ldr	r5, [r3, #0]
 8016240:	6862      	ldr	r2, [r4, #4]
 8016242:	2100      	movs	r1, #0
 8016244:	4628      	mov	r0, r5
 8016246:	f7e9 ffe3 	bl	8000210 <memchr>
 801624a:	b108      	cbz	r0, 8016250 <_printf_i+0x1bc>
 801624c:	1b40      	subs	r0, r0, r5
 801624e:	6060      	str	r0, [r4, #4]
 8016250:	6863      	ldr	r3, [r4, #4]
 8016252:	6123      	str	r3, [r4, #16]
 8016254:	2300      	movs	r3, #0
 8016256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801625a:	e7a7      	b.n	80161ac <_printf_i+0x118>
 801625c:	6923      	ldr	r3, [r4, #16]
 801625e:	462a      	mov	r2, r5
 8016260:	4639      	mov	r1, r7
 8016262:	4630      	mov	r0, r6
 8016264:	47c0      	blx	r8
 8016266:	3001      	adds	r0, #1
 8016268:	d0aa      	beq.n	80161c0 <_printf_i+0x12c>
 801626a:	6823      	ldr	r3, [r4, #0]
 801626c:	079b      	lsls	r3, r3, #30
 801626e:	d413      	bmi.n	8016298 <_printf_i+0x204>
 8016270:	68e0      	ldr	r0, [r4, #12]
 8016272:	9b03      	ldr	r3, [sp, #12]
 8016274:	4298      	cmp	r0, r3
 8016276:	bfb8      	it	lt
 8016278:	4618      	movlt	r0, r3
 801627a:	e7a3      	b.n	80161c4 <_printf_i+0x130>
 801627c:	2301      	movs	r3, #1
 801627e:	464a      	mov	r2, r9
 8016280:	4639      	mov	r1, r7
 8016282:	4630      	mov	r0, r6
 8016284:	47c0      	blx	r8
 8016286:	3001      	adds	r0, #1
 8016288:	d09a      	beq.n	80161c0 <_printf_i+0x12c>
 801628a:	3501      	adds	r5, #1
 801628c:	68e3      	ldr	r3, [r4, #12]
 801628e:	9a03      	ldr	r2, [sp, #12]
 8016290:	1a9b      	subs	r3, r3, r2
 8016292:	42ab      	cmp	r3, r5
 8016294:	dcf2      	bgt.n	801627c <_printf_i+0x1e8>
 8016296:	e7eb      	b.n	8016270 <_printf_i+0x1dc>
 8016298:	2500      	movs	r5, #0
 801629a:	f104 0919 	add.w	r9, r4, #25
 801629e:	e7f5      	b.n	801628c <_printf_i+0x1f8>
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d1ac      	bne.n	80161fe <_printf_i+0x16a>
 80162a4:	7803      	ldrb	r3, [r0, #0]
 80162a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162ae:	e76c      	b.n	801618a <_printf_i+0xf6>
 80162b0:	0801a498 	.word	0x0801a498
 80162b4:	0801a4a9 	.word	0x0801a4a9

080162b8 <_scanf_float>:
 80162b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162bc:	469a      	mov	sl, r3
 80162be:	688b      	ldr	r3, [r1, #8]
 80162c0:	4616      	mov	r6, r2
 80162c2:	1e5a      	subs	r2, r3, #1
 80162c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80162c8:	b087      	sub	sp, #28
 80162ca:	bf83      	ittte	hi
 80162cc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80162d0:	189b      	addhi	r3, r3, r2
 80162d2:	9301      	strhi	r3, [sp, #4]
 80162d4:	2300      	movls	r3, #0
 80162d6:	bf86      	itte	hi
 80162d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80162dc:	608b      	strhi	r3, [r1, #8]
 80162de:	9301      	strls	r3, [sp, #4]
 80162e0:	680b      	ldr	r3, [r1, #0]
 80162e2:	4688      	mov	r8, r1
 80162e4:	f04f 0b00 	mov.w	fp, #0
 80162e8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80162ec:	f848 3b1c 	str.w	r3, [r8], #28
 80162f0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80162f4:	4607      	mov	r7, r0
 80162f6:	460c      	mov	r4, r1
 80162f8:	4645      	mov	r5, r8
 80162fa:	465a      	mov	r2, fp
 80162fc:	46d9      	mov	r9, fp
 80162fe:	f8cd b008 	str.w	fp, [sp, #8]
 8016302:	68a1      	ldr	r1, [r4, #8]
 8016304:	b181      	cbz	r1, 8016328 <_scanf_float+0x70>
 8016306:	6833      	ldr	r3, [r6, #0]
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	2b49      	cmp	r3, #73	; 0x49
 801630c:	d071      	beq.n	80163f2 <_scanf_float+0x13a>
 801630e:	d84d      	bhi.n	80163ac <_scanf_float+0xf4>
 8016310:	2b39      	cmp	r3, #57	; 0x39
 8016312:	d840      	bhi.n	8016396 <_scanf_float+0xde>
 8016314:	2b31      	cmp	r3, #49	; 0x31
 8016316:	f080 8088 	bcs.w	801642a <_scanf_float+0x172>
 801631a:	2b2d      	cmp	r3, #45	; 0x2d
 801631c:	f000 8090 	beq.w	8016440 <_scanf_float+0x188>
 8016320:	d815      	bhi.n	801634e <_scanf_float+0x96>
 8016322:	2b2b      	cmp	r3, #43	; 0x2b
 8016324:	f000 808c 	beq.w	8016440 <_scanf_float+0x188>
 8016328:	f1b9 0f00 	cmp.w	r9, #0
 801632c:	d003      	beq.n	8016336 <_scanf_float+0x7e>
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016334:	6023      	str	r3, [r4, #0]
 8016336:	3a01      	subs	r2, #1
 8016338:	2a01      	cmp	r2, #1
 801633a:	f200 80ea 	bhi.w	8016512 <_scanf_float+0x25a>
 801633e:	4545      	cmp	r5, r8
 8016340:	f200 80dc 	bhi.w	80164fc <_scanf_float+0x244>
 8016344:	2601      	movs	r6, #1
 8016346:	4630      	mov	r0, r6
 8016348:	b007      	add	sp, #28
 801634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634e:	2b2e      	cmp	r3, #46	; 0x2e
 8016350:	f000 809f 	beq.w	8016492 <_scanf_float+0x1da>
 8016354:	2b30      	cmp	r3, #48	; 0x30
 8016356:	d1e7      	bne.n	8016328 <_scanf_float+0x70>
 8016358:	6820      	ldr	r0, [r4, #0]
 801635a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801635e:	d064      	beq.n	801642a <_scanf_float+0x172>
 8016360:	9b01      	ldr	r3, [sp, #4]
 8016362:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016366:	6020      	str	r0, [r4, #0]
 8016368:	f109 0901 	add.w	r9, r9, #1
 801636c:	b11b      	cbz	r3, 8016376 <_scanf_float+0xbe>
 801636e:	3b01      	subs	r3, #1
 8016370:	3101      	adds	r1, #1
 8016372:	9301      	str	r3, [sp, #4]
 8016374:	60a1      	str	r1, [r4, #8]
 8016376:	68a3      	ldr	r3, [r4, #8]
 8016378:	3b01      	subs	r3, #1
 801637a:	60a3      	str	r3, [r4, #8]
 801637c:	6923      	ldr	r3, [r4, #16]
 801637e:	3301      	adds	r3, #1
 8016380:	6123      	str	r3, [r4, #16]
 8016382:	6873      	ldr	r3, [r6, #4]
 8016384:	3b01      	subs	r3, #1
 8016386:	2b00      	cmp	r3, #0
 8016388:	6073      	str	r3, [r6, #4]
 801638a:	f340 80ac 	ble.w	80164e6 <_scanf_float+0x22e>
 801638e:	6833      	ldr	r3, [r6, #0]
 8016390:	3301      	adds	r3, #1
 8016392:	6033      	str	r3, [r6, #0]
 8016394:	e7b5      	b.n	8016302 <_scanf_float+0x4a>
 8016396:	2b45      	cmp	r3, #69	; 0x45
 8016398:	f000 8085 	beq.w	80164a6 <_scanf_float+0x1ee>
 801639c:	2b46      	cmp	r3, #70	; 0x46
 801639e:	d06a      	beq.n	8016476 <_scanf_float+0x1be>
 80163a0:	2b41      	cmp	r3, #65	; 0x41
 80163a2:	d1c1      	bne.n	8016328 <_scanf_float+0x70>
 80163a4:	2a01      	cmp	r2, #1
 80163a6:	d1bf      	bne.n	8016328 <_scanf_float+0x70>
 80163a8:	2202      	movs	r2, #2
 80163aa:	e046      	b.n	801643a <_scanf_float+0x182>
 80163ac:	2b65      	cmp	r3, #101	; 0x65
 80163ae:	d07a      	beq.n	80164a6 <_scanf_float+0x1ee>
 80163b0:	d818      	bhi.n	80163e4 <_scanf_float+0x12c>
 80163b2:	2b54      	cmp	r3, #84	; 0x54
 80163b4:	d066      	beq.n	8016484 <_scanf_float+0x1cc>
 80163b6:	d811      	bhi.n	80163dc <_scanf_float+0x124>
 80163b8:	2b4e      	cmp	r3, #78	; 0x4e
 80163ba:	d1b5      	bne.n	8016328 <_scanf_float+0x70>
 80163bc:	2a00      	cmp	r2, #0
 80163be:	d146      	bne.n	801644e <_scanf_float+0x196>
 80163c0:	f1b9 0f00 	cmp.w	r9, #0
 80163c4:	d145      	bne.n	8016452 <_scanf_float+0x19a>
 80163c6:	6821      	ldr	r1, [r4, #0]
 80163c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80163cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80163d0:	d13f      	bne.n	8016452 <_scanf_float+0x19a>
 80163d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163d6:	6021      	str	r1, [r4, #0]
 80163d8:	2201      	movs	r2, #1
 80163da:	e02e      	b.n	801643a <_scanf_float+0x182>
 80163dc:	2b59      	cmp	r3, #89	; 0x59
 80163de:	d01e      	beq.n	801641e <_scanf_float+0x166>
 80163e0:	2b61      	cmp	r3, #97	; 0x61
 80163e2:	e7de      	b.n	80163a2 <_scanf_float+0xea>
 80163e4:	2b6e      	cmp	r3, #110	; 0x6e
 80163e6:	d0e9      	beq.n	80163bc <_scanf_float+0x104>
 80163e8:	d815      	bhi.n	8016416 <_scanf_float+0x15e>
 80163ea:	2b66      	cmp	r3, #102	; 0x66
 80163ec:	d043      	beq.n	8016476 <_scanf_float+0x1be>
 80163ee:	2b69      	cmp	r3, #105	; 0x69
 80163f0:	d19a      	bne.n	8016328 <_scanf_float+0x70>
 80163f2:	f1bb 0f00 	cmp.w	fp, #0
 80163f6:	d138      	bne.n	801646a <_scanf_float+0x1b2>
 80163f8:	f1b9 0f00 	cmp.w	r9, #0
 80163fc:	d197      	bne.n	801632e <_scanf_float+0x76>
 80163fe:	6821      	ldr	r1, [r4, #0]
 8016400:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016404:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016408:	d195      	bne.n	8016336 <_scanf_float+0x7e>
 801640a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801640e:	6021      	str	r1, [r4, #0]
 8016410:	f04f 0b01 	mov.w	fp, #1
 8016414:	e011      	b.n	801643a <_scanf_float+0x182>
 8016416:	2b74      	cmp	r3, #116	; 0x74
 8016418:	d034      	beq.n	8016484 <_scanf_float+0x1cc>
 801641a:	2b79      	cmp	r3, #121	; 0x79
 801641c:	d184      	bne.n	8016328 <_scanf_float+0x70>
 801641e:	f1bb 0f07 	cmp.w	fp, #7
 8016422:	d181      	bne.n	8016328 <_scanf_float+0x70>
 8016424:	f04f 0b08 	mov.w	fp, #8
 8016428:	e007      	b.n	801643a <_scanf_float+0x182>
 801642a:	eb12 0f0b 	cmn.w	r2, fp
 801642e:	f47f af7b 	bne.w	8016328 <_scanf_float+0x70>
 8016432:	6821      	ldr	r1, [r4, #0]
 8016434:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016438:	6021      	str	r1, [r4, #0]
 801643a:	702b      	strb	r3, [r5, #0]
 801643c:	3501      	adds	r5, #1
 801643e:	e79a      	b.n	8016376 <_scanf_float+0xbe>
 8016440:	6821      	ldr	r1, [r4, #0]
 8016442:	0608      	lsls	r0, r1, #24
 8016444:	f57f af70 	bpl.w	8016328 <_scanf_float+0x70>
 8016448:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801644c:	e7f4      	b.n	8016438 <_scanf_float+0x180>
 801644e:	2a02      	cmp	r2, #2
 8016450:	d047      	beq.n	80164e2 <_scanf_float+0x22a>
 8016452:	f1bb 0f01 	cmp.w	fp, #1
 8016456:	d003      	beq.n	8016460 <_scanf_float+0x1a8>
 8016458:	f1bb 0f04 	cmp.w	fp, #4
 801645c:	f47f af64 	bne.w	8016328 <_scanf_float+0x70>
 8016460:	f10b 0b01 	add.w	fp, fp, #1
 8016464:	fa5f fb8b 	uxtb.w	fp, fp
 8016468:	e7e7      	b.n	801643a <_scanf_float+0x182>
 801646a:	f1bb 0f03 	cmp.w	fp, #3
 801646e:	d0f7      	beq.n	8016460 <_scanf_float+0x1a8>
 8016470:	f1bb 0f05 	cmp.w	fp, #5
 8016474:	e7f2      	b.n	801645c <_scanf_float+0x1a4>
 8016476:	f1bb 0f02 	cmp.w	fp, #2
 801647a:	f47f af55 	bne.w	8016328 <_scanf_float+0x70>
 801647e:	f04f 0b03 	mov.w	fp, #3
 8016482:	e7da      	b.n	801643a <_scanf_float+0x182>
 8016484:	f1bb 0f06 	cmp.w	fp, #6
 8016488:	f47f af4e 	bne.w	8016328 <_scanf_float+0x70>
 801648c:	f04f 0b07 	mov.w	fp, #7
 8016490:	e7d3      	b.n	801643a <_scanf_float+0x182>
 8016492:	6821      	ldr	r1, [r4, #0]
 8016494:	0588      	lsls	r0, r1, #22
 8016496:	f57f af47 	bpl.w	8016328 <_scanf_float+0x70>
 801649a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801649e:	6021      	str	r1, [r4, #0]
 80164a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80164a4:	e7c9      	b.n	801643a <_scanf_float+0x182>
 80164a6:	6821      	ldr	r1, [r4, #0]
 80164a8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80164ac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80164b0:	d006      	beq.n	80164c0 <_scanf_float+0x208>
 80164b2:	0548      	lsls	r0, r1, #21
 80164b4:	f57f af38 	bpl.w	8016328 <_scanf_float+0x70>
 80164b8:	f1b9 0f00 	cmp.w	r9, #0
 80164bc:	f43f af3b 	beq.w	8016336 <_scanf_float+0x7e>
 80164c0:	0588      	lsls	r0, r1, #22
 80164c2:	bf58      	it	pl
 80164c4:	9802      	ldrpl	r0, [sp, #8]
 80164c6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164ca:	bf58      	it	pl
 80164cc:	eba9 0000 	subpl.w	r0, r9, r0
 80164d0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80164d4:	bf58      	it	pl
 80164d6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80164da:	6021      	str	r1, [r4, #0]
 80164dc:	f04f 0900 	mov.w	r9, #0
 80164e0:	e7ab      	b.n	801643a <_scanf_float+0x182>
 80164e2:	2203      	movs	r2, #3
 80164e4:	e7a9      	b.n	801643a <_scanf_float+0x182>
 80164e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80164ea:	9205      	str	r2, [sp, #20]
 80164ec:	4631      	mov	r1, r6
 80164ee:	4638      	mov	r0, r7
 80164f0:	4798      	blx	r3
 80164f2:	9a05      	ldr	r2, [sp, #20]
 80164f4:	2800      	cmp	r0, #0
 80164f6:	f43f af04 	beq.w	8016302 <_scanf_float+0x4a>
 80164fa:	e715      	b.n	8016328 <_scanf_float+0x70>
 80164fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016500:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016504:	4632      	mov	r2, r6
 8016506:	4638      	mov	r0, r7
 8016508:	4798      	blx	r3
 801650a:	6923      	ldr	r3, [r4, #16]
 801650c:	3b01      	subs	r3, #1
 801650e:	6123      	str	r3, [r4, #16]
 8016510:	e715      	b.n	801633e <_scanf_float+0x86>
 8016512:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016516:	2b06      	cmp	r3, #6
 8016518:	d80a      	bhi.n	8016530 <_scanf_float+0x278>
 801651a:	f1bb 0f02 	cmp.w	fp, #2
 801651e:	d968      	bls.n	80165f2 <_scanf_float+0x33a>
 8016520:	f1ab 0b03 	sub.w	fp, fp, #3
 8016524:	fa5f fb8b 	uxtb.w	fp, fp
 8016528:	eba5 0b0b 	sub.w	fp, r5, fp
 801652c:	455d      	cmp	r5, fp
 801652e:	d14b      	bne.n	80165c8 <_scanf_float+0x310>
 8016530:	6823      	ldr	r3, [r4, #0]
 8016532:	05da      	lsls	r2, r3, #23
 8016534:	d51f      	bpl.n	8016576 <_scanf_float+0x2be>
 8016536:	055b      	lsls	r3, r3, #21
 8016538:	d468      	bmi.n	801660c <_scanf_float+0x354>
 801653a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801653e:	6923      	ldr	r3, [r4, #16]
 8016540:	2965      	cmp	r1, #101	; 0x65
 8016542:	f103 33ff 	add.w	r3, r3, #4294967295
 8016546:	f105 3bff 	add.w	fp, r5, #4294967295
 801654a:	6123      	str	r3, [r4, #16]
 801654c:	d00d      	beq.n	801656a <_scanf_float+0x2b2>
 801654e:	2945      	cmp	r1, #69	; 0x45
 8016550:	d00b      	beq.n	801656a <_scanf_float+0x2b2>
 8016552:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016556:	4632      	mov	r2, r6
 8016558:	4638      	mov	r0, r7
 801655a:	4798      	blx	r3
 801655c:	6923      	ldr	r3, [r4, #16]
 801655e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016562:	3b01      	subs	r3, #1
 8016564:	f1a5 0b02 	sub.w	fp, r5, #2
 8016568:	6123      	str	r3, [r4, #16]
 801656a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801656e:	4632      	mov	r2, r6
 8016570:	4638      	mov	r0, r7
 8016572:	4798      	blx	r3
 8016574:	465d      	mov	r5, fp
 8016576:	6826      	ldr	r6, [r4, #0]
 8016578:	f016 0610 	ands.w	r6, r6, #16
 801657c:	d17a      	bne.n	8016674 <_scanf_float+0x3bc>
 801657e:	702e      	strb	r6, [r5, #0]
 8016580:	6823      	ldr	r3, [r4, #0]
 8016582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801658a:	d142      	bne.n	8016612 <_scanf_float+0x35a>
 801658c:	9b02      	ldr	r3, [sp, #8]
 801658e:	eba9 0303 	sub.w	r3, r9, r3
 8016592:	425a      	negs	r2, r3
 8016594:	2b00      	cmp	r3, #0
 8016596:	d149      	bne.n	801662c <_scanf_float+0x374>
 8016598:	2200      	movs	r2, #0
 801659a:	4641      	mov	r1, r8
 801659c:	4638      	mov	r0, r7
 801659e:	f000 ff0b 	bl	80173b8 <_strtod_r>
 80165a2:	6825      	ldr	r5, [r4, #0]
 80165a4:	f8da 3000 	ldr.w	r3, [sl]
 80165a8:	f015 0f02 	tst.w	r5, #2
 80165ac:	f103 0204 	add.w	r2, r3, #4
 80165b0:	ec59 8b10 	vmov	r8, r9, d0
 80165b4:	f8ca 2000 	str.w	r2, [sl]
 80165b8:	d043      	beq.n	8016642 <_scanf_float+0x38a>
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	e9c3 8900 	strd	r8, r9, [r3]
 80165c0:	68e3      	ldr	r3, [r4, #12]
 80165c2:	3301      	adds	r3, #1
 80165c4:	60e3      	str	r3, [r4, #12]
 80165c6:	e6be      	b.n	8016346 <_scanf_float+0x8e>
 80165c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165d0:	4632      	mov	r2, r6
 80165d2:	4638      	mov	r0, r7
 80165d4:	4798      	blx	r3
 80165d6:	6923      	ldr	r3, [r4, #16]
 80165d8:	3b01      	subs	r3, #1
 80165da:	6123      	str	r3, [r4, #16]
 80165dc:	e7a6      	b.n	801652c <_scanf_float+0x274>
 80165de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165e6:	4632      	mov	r2, r6
 80165e8:	4638      	mov	r0, r7
 80165ea:	4798      	blx	r3
 80165ec:	6923      	ldr	r3, [r4, #16]
 80165ee:	3b01      	subs	r3, #1
 80165f0:	6123      	str	r3, [r4, #16]
 80165f2:	4545      	cmp	r5, r8
 80165f4:	d8f3      	bhi.n	80165de <_scanf_float+0x326>
 80165f6:	e6a5      	b.n	8016344 <_scanf_float+0x8c>
 80165f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016600:	4632      	mov	r2, r6
 8016602:	4638      	mov	r0, r7
 8016604:	4798      	blx	r3
 8016606:	6923      	ldr	r3, [r4, #16]
 8016608:	3b01      	subs	r3, #1
 801660a:	6123      	str	r3, [r4, #16]
 801660c:	4545      	cmp	r5, r8
 801660e:	d8f3      	bhi.n	80165f8 <_scanf_float+0x340>
 8016610:	e698      	b.n	8016344 <_scanf_float+0x8c>
 8016612:	9b03      	ldr	r3, [sp, #12]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d0bf      	beq.n	8016598 <_scanf_float+0x2e0>
 8016618:	9904      	ldr	r1, [sp, #16]
 801661a:	230a      	movs	r3, #10
 801661c:	4632      	mov	r2, r6
 801661e:	3101      	adds	r1, #1
 8016620:	4638      	mov	r0, r7
 8016622:	f000 ff55 	bl	80174d0 <_strtol_r>
 8016626:	9b03      	ldr	r3, [sp, #12]
 8016628:	9d04      	ldr	r5, [sp, #16]
 801662a:	1ac2      	subs	r2, r0, r3
 801662c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016630:	429d      	cmp	r5, r3
 8016632:	bf28      	it	cs
 8016634:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016638:	490f      	ldr	r1, [pc, #60]	; (8016678 <_scanf_float+0x3c0>)
 801663a:	4628      	mov	r0, r5
 801663c:	f000 f858 	bl	80166f0 <siprintf>
 8016640:	e7aa      	b.n	8016598 <_scanf_float+0x2e0>
 8016642:	f015 0504 	ands.w	r5, r5, #4
 8016646:	d1b8      	bne.n	80165ba <_scanf_float+0x302>
 8016648:	681f      	ldr	r7, [r3, #0]
 801664a:	ee10 2a10 	vmov	r2, s0
 801664e:	464b      	mov	r3, r9
 8016650:	ee10 0a10 	vmov	r0, s0
 8016654:	4649      	mov	r1, r9
 8016656:	f7ea fa81 	bl	8000b5c <__aeabi_dcmpun>
 801665a:	b128      	cbz	r0, 8016668 <_scanf_float+0x3b0>
 801665c:	4628      	mov	r0, r5
 801665e:	f000 f80d 	bl	801667c <nanf>
 8016662:	ed87 0a00 	vstr	s0, [r7]
 8016666:	e7ab      	b.n	80165c0 <_scanf_float+0x308>
 8016668:	4640      	mov	r0, r8
 801666a:	4649      	mov	r1, r9
 801666c:	f7ea fad4 	bl	8000c18 <__aeabi_d2f>
 8016670:	6038      	str	r0, [r7, #0]
 8016672:	e7a5      	b.n	80165c0 <_scanf_float+0x308>
 8016674:	2600      	movs	r6, #0
 8016676:	e666      	b.n	8016346 <_scanf_float+0x8e>
 8016678:	0801a4ba 	.word	0x0801a4ba

0801667c <nanf>:
 801667c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016684 <nanf+0x8>
 8016680:	4770      	bx	lr
 8016682:	bf00      	nop
 8016684:	7fc00000 	.word	0x7fc00000

08016688 <sniprintf>:
 8016688:	b40c      	push	{r2, r3}
 801668a:	b530      	push	{r4, r5, lr}
 801668c:	4b17      	ldr	r3, [pc, #92]	; (80166ec <sniprintf+0x64>)
 801668e:	1e0c      	subs	r4, r1, #0
 8016690:	b09d      	sub	sp, #116	; 0x74
 8016692:	681d      	ldr	r5, [r3, #0]
 8016694:	da08      	bge.n	80166a8 <sniprintf+0x20>
 8016696:	238b      	movs	r3, #139	; 0x8b
 8016698:	602b      	str	r3, [r5, #0]
 801669a:	f04f 30ff 	mov.w	r0, #4294967295
 801669e:	b01d      	add	sp, #116	; 0x74
 80166a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166a4:	b002      	add	sp, #8
 80166a6:	4770      	bx	lr
 80166a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80166ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166b0:	bf14      	ite	ne
 80166b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80166b6:	4623      	moveq	r3, r4
 80166b8:	9304      	str	r3, [sp, #16]
 80166ba:	9307      	str	r3, [sp, #28]
 80166bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166c0:	9002      	str	r0, [sp, #8]
 80166c2:	9006      	str	r0, [sp, #24]
 80166c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166ca:	ab21      	add	r3, sp, #132	; 0x84
 80166cc:	a902      	add	r1, sp, #8
 80166ce:	4628      	mov	r0, r5
 80166d0:	9301      	str	r3, [sp, #4]
 80166d2:	f002 fdf1 	bl	80192b8 <_svfiprintf_r>
 80166d6:	1c43      	adds	r3, r0, #1
 80166d8:	bfbc      	itt	lt
 80166da:	238b      	movlt	r3, #139	; 0x8b
 80166dc:	602b      	strlt	r3, [r5, #0]
 80166de:	2c00      	cmp	r4, #0
 80166e0:	d0dd      	beq.n	801669e <sniprintf+0x16>
 80166e2:	9b02      	ldr	r3, [sp, #8]
 80166e4:	2200      	movs	r2, #0
 80166e6:	701a      	strb	r2, [r3, #0]
 80166e8:	e7d9      	b.n	801669e <sniprintf+0x16>
 80166ea:	bf00      	nop
 80166ec:	2000000c 	.word	0x2000000c

080166f0 <siprintf>:
 80166f0:	b40e      	push	{r1, r2, r3}
 80166f2:	b500      	push	{lr}
 80166f4:	b09c      	sub	sp, #112	; 0x70
 80166f6:	ab1d      	add	r3, sp, #116	; 0x74
 80166f8:	9002      	str	r0, [sp, #8]
 80166fa:	9006      	str	r0, [sp, #24]
 80166fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016700:	4809      	ldr	r0, [pc, #36]	; (8016728 <siprintf+0x38>)
 8016702:	9107      	str	r1, [sp, #28]
 8016704:	9104      	str	r1, [sp, #16]
 8016706:	4909      	ldr	r1, [pc, #36]	; (801672c <siprintf+0x3c>)
 8016708:	f853 2b04 	ldr.w	r2, [r3], #4
 801670c:	9105      	str	r1, [sp, #20]
 801670e:	6800      	ldr	r0, [r0, #0]
 8016710:	9301      	str	r3, [sp, #4]
 8016712:	a902      	add	r1, sp, #8
 8016714:	f002 fdd0 	bl	80192b8 <_svfiprintf_r>
 8016718:	9b02      	ldr	r3, [sp, #8]
 801671a:	2200      	movs	r2, #0
 801671c:	701a      	strb	r2, [r3, #0]
 801671e:	b01c      	add	sp, #112	; 0x70
 8016720:	f85d eb04 	ldr.w	lr, [sp], #4
 8016724:	b003      	add	sp, #12
 8016726:	4770      	bx	lr
 8016728:	2000000c 	.word	0x2000000c
 801672c:	ffff0208 	.word	0xffff0208

08016730 <siscanf>:
 8016730:	b40e      	push	{r1, r2, r3}
 8016732:	b530      	push	{r4, r5, lr}
 8016734:	b09c      	sub	sp, #112	; 0x70
 8016736:	ac1f      	add	r4, sp, #124	; 0x7c
 8016738:	f44f 7201 	mov.w	r2, #516	; 0x204
 801673c:	f854 5b04 	ldr.w	r5, [r4], #4
 8016740:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016744:	9002      	str	r0, [sp, #8]
 8016746:	9006      	str	r0, [sp, #24]
 8016748:	f7e9 fd5a 	bl	8000200 <strlen>
 801674c:	4b0b      	ldr	r3, [pc, #44]	; (801677c <siscanf+0x4c>)
 801674e:	9003      	str	r0, [sp, #12]
 8016750:	9007      	str	r0, [sp, #28]
 8016752:	930b      	str	r3, [sp, #44]	; 0x2c
 8016754:	480a      	ldr	r0, [pc, #40]	; (8016780 <siscanf+0x50>)
 8016756:	9401      	str	r4, [sp, #4]
 8016758:	2300      	movs	r3, #0
 801675a:	930f      	str	r3, [sp, #60]	; 0x3c
 801675c:	9314      	str	r3, [sp, #80]	; 0x50
 801675e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016762:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016766:	462a      	mov	r2, r5
 8016768:	4623      	mov	r3, r4
 801676a:	a902      	add	r1, sp, #8
 801676c:	6800      	ldr	r0, [r0, #0]
 801676e:	f002 fef5 	bl	801955c <__ssvfiscanf_r>
 8016772:	b01c      	add	sp, #112	; 0x70
 8016774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016778:	b003      	add	sp, #12
 801677a:	4770      	bx	lr
 801677c:	08016785 	.word	0x08016785
 8016780:	2000000c 	.word	0x2000000c

08016784 <__seofread>:
 8016784:	2000      	movs	r0, #0
 8016786:	4770      	bx	lr

08016788 <strcpy>:
 8016788:	4603      	mov	r3, r0
 801678a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801678e:	f803 2b01 	strb.w	r2, [r3], #1
 8016792:	2a00      	cmp	r2, #0
 8016794:	d1f9      	bne.n	801678a <strcpy+0x2>
 8016796:	4770      	bx	lr

08016798 <sulp>:
 8016798:	b570      	push	{r4, r5, r6, lr}
 801679a:	4604      	mov	r4, r0
 801679c:	460d      	mov	r5, r1
 801679e:	ec45 4b10 	vmov	d0, r4, r5
 80167a2:	4616      	mov	r6, r2
 80167a4:	f002 fb44 	bl	8018e30 <__ulp>
 80167a8:	ec51 0b10 	vmov	r0, r1, d0
 80167ac:	b17e      	cbz	r6, 80167ce <sulp+0x36>
 80167ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80167b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	dd09      	ble.n	80167ce <sulp+0x36>
 80167ba:	051b      	lsls	r3, r3, #20
 80167bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80167c0:	2400      	movs	r4, #0
 80167c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80167c6:	4622      	mov	r2, r4
 80167c8:	462b      	mov	r3, r5
 80167ca:	f7e9 ff2d 	bl	8000628 <__aeabi_dmul>
 80167ce:	bd70      	pop	{r4, r5, r6, pc}

080167d0 <_strtod_l>:
 80167d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d4:	461f      	mov	r7, r3
 80167d6:	b0a1      	sub	sp, #132	; 0x84
 80167d8:	2300      	movs	r3, #0
 80167da:	4681      	mov	r9, r0
 80167dc:	4638      	mov	r0, r7
 80167de:	460e      	mov	r6, r1
 80167e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80167e2:	931c      	str	r3, [sp, #112]	; 0x70
 80167e4:	f002 f824 	bl	8018830 <__localeconv_l>
 80167e8:	4680      	mov	r8, r0
 80167ea:	6800      	ldr	r0, [r0, #0]
 80167ec:	f7e9 fd08 	bl	8000200 <strlen>
 80167f0:	f04f 0a00 	mov.w	sl, #0
 80167f4:	4604      	mov	r4, r0
 80167f6:	f04f 0b00 	mov.w	fp, #0
 80167fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80167fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167fe:	781a      	ldrb	r2, [r3, #0]
 8016800:	2a0d      	cmp	r2, #13
 8016802:	d832      	bhi.n	801686a <_strtod_l+0x9a>
 8016804:	2a09      	cmp	r2, #9
 8016806:	d236      	bcs.n	8016876 <_strtod_l+0xa6>
 8016808:	2a00      	cmp	r2, #0
 801680a:	d03e      	beq.n	801688a <_strtod_l+0xba>
 801680c:	2300      	movs	r3, #0
 801680e:	930d      	str	r3, [sp, #52]	; 0x34
 8016810:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016812:	782b      	ldrb	r3, [r5, #0]
 8016814:	2b30      	cmp	r3, #48	; 0x30
 8016816:	f040 80ac 	bne.w	8016972 <_strtod_l+0x1a2>
 801681a:	786b      	ldrb	r3, [r5, #1]
 801681c:	2b58      	cmp	r3, #88	; 0x58
 801681e:	d001      	beq.n	8016824 <_strtod_l+0x54>
 8016820:	2b78      	cmp	r3, #120	; 0x78
 8016822:	d167      	bne.n	80168f4 <_strtod_l+0x124>
 8016824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016826:	9301      	str	r3, [sp, #4]
 8016828:	ab1c      	add	r3, sp, #112	; 0x70
 801682a:	9300      	str	r3, [sp, #0]
 801682c:	9702      	str	r7, [sp, #8]
 801682e:	ab1d      	add	r3, sp, #116	; 0x74
 8016830:	4a88      	ldr	r2, [pc, #544]	; (8016a54 <_strtod_l+0x284>)
 8016832:	a91b      	add	r1, sp, #108	; 0x6c
 8016834:	4648      	mov	r0, r9
 8016836:	f001 fd12 	bl	801825e <__gethex>
 801683a:	f010 0407 	ands.w	r4, r0, #7
 801683e:	4606      	mov	r6, r0
 8016840:	d005      	beq.n	801684e <_strtod_l+0x7e>
 8016842:	2c06      	cmp	r4, #6
 8016844:	d12b      	bne.n	801689e <_strtod_l+0xce>
 8016846:	3501      	adds	r5, #1
 8016848:	2300      	movs	r3, #0
 801684a:	951b      	str	r5, [sp, #108]	; 0x6c
 801684c:	930d      	str	r3, [sp, #52]	; 0x34
 801684e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016850:	2b00      	cmp	r3, #0
 8016852:	f040 859a 	bne.w	801738a <_strtod_l+0xbba>
 8016856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016858:	b1e3      	cbz	r3, 8016894 <_strtod_l+0xc4>
 801685a:	4652      	mov	r2, sl
 801685c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016860:	ec43 2b10 	vmov	d0, r2, r3
 8016864:	b021      	add	sp, #132	; 0x84
 8016866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801686a:	2a2b      	cmp	r2, #43	; 0x2b
 801686c:	d015      	beq.n	801689a <_strtod_l+0xca>
 801686e:	2a2d      	cmp	r2, #45	; 0x2d
 8016870:	d004      	beq.n	801687c <_strtod_l+0xac>
 8016872:	2a20      	cmp	r2, #32
 8016874:	d1ca      	bne.n	801680c <_strtod_l+0x3c>
 8016876:	3301      	adds	r3, #1
 8016878:	931b      	str	r3, [sp, #108]	; 0x6c
 801687a:	e7bf      	b.n	80167fc <_strtod_l+0x2c>
 801687c:	2201      	movs	r2, #1
 801687e:	920d      	str	r2, [sp, #52]	; 0x34
 8016880:	1c5a      	adds	r2, r3, #1
 8016882:	921b      	str	r2, [sp, #108]	; 0x6c
 8016884:	785b      	ldrb	r3, [r3, #1]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d1c2      	bne.n	8016810 <_strtod_l+0x40>
 801688a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801688c:	961b      	str	r6, [sp, #108]	; 0x6c
 801688e:	2b00      	cmp	r3, #0
 8016890:	f040 8579 	bne.w	8017386 <_strtod_l+0xbb6>
 8016894:	4652      	mov	r2, sl
 8016896:	465b      	mov	r3, fp
 8016898:	e7e2      	b.n	8016860 <_strtod_l+0x90>
 801689a:	2200      	movs	r2, #0
 801689c:	e7ef      	b.n	801687e <_strtod_l+0xae>
 801689e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80168a0:	b13a      	cbz	r2, 80168b2 <_strtod_l+0xe2>
 80168a2:	2135      	movs	r1, #53	; 0x35
 80168a4:	a81e      	add	r0, sp, #120	; 0x78
 80168a6:	f002 fbbb 	bl	8019020 <__copybits>
 80168aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80168ac:	4648      	mov	r0, r9
 80168ae:	f002 f828 	bl	8018902 <_Bfree>
 80168b2:	3c01      	subs	r4, #1
 80168b4:	2c04      	cmp	r4, #4
 80168b6:	d806      	bhi.n	80168c6 <_strtod_l+0xf6>
 80168b8:	e8df f004 	tbb	[pc, r4]
 80168bc:	1714030a 	.word	0x1714030a
 80168c0:	0a          	.byte	0x0a
 80168c1:	00          	.byte	0x00
 80168c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80168c6:	0730      	lsls	r0, r6, #28
 80168c8:	d5c1      	bpl.n	801684e <_strtod_l+0x7e>
 80168ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80168ce:	e7be      	b.n	801684e <_strtod_l+0x7e>
 80168d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80168d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80168d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80168da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80168de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80168e2:	e7f0      	b.n	80168c6 <_strtod_l+0xf6>
 80168e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016a58 <_strtod_l+0x288>
 80168e8:	e7ed      	b.n	80168c6 <_strtod_l+0xf6>
 80168ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80168ee:	f04f 3aff 	mov.w	sl, #4294967295
 80168f2:	e7e8      	b.n	80168c6 <_strtod_l+0xf6>
 80168f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168f6:	1c5a      	adds	r2, r3, #1
 80168f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80168fa:	785b      	ldrb	r3, [r3, #1]
 80168fc:	2b30      	cmp	r3, #48	; 0x30
 80168fe:	d0f9      	beq.n	80168f4 <_strtod_l+0x124>
 8016900:	2b00      	cmp	r3, #0
 8016902:	d0a4      	beq.n	801684e <_strtod_l+0x7e>
 8016904:	2301      	movs	r3, #1
 8016906:	2500      	movs	r5, #0
 8016908:	9306      	str	r3, [sp, #24]
 801690a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801690c:	9308      	str	r3, [sp, #32]
 801690e:	9507      	str	r5, [sp, #28]
 8016910:	9505      	str	r5, [sp, #20]
 8016912:	220a      	movs	r2, #10
 8016914:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016916:	7807      	ldrb	r7, [r0, #0]
 8016918:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801691c:	b2d9      	uxtb	r1, r3
 801691e:	2909      	cmp	r1, #9
 8016920:	d929      	bls.n	8016976 <_strtod_l+0x1a6>
 8016922:	4622      	mov	r2, r4
 8016924:	f8d8 1000 	ldr.w	r1, [r8]
 8016928:	f003 f902 	bl	8019b30 <strncmp>
 801692c:	2800      	cmp	r0, #0
 801692e:	d031      	beq.n	8016994 <_strtod_l+0x1c4>
 8016930:	2000      	movs	r0, #0
 8016932:	9c05      	ldr	r4, [sp, #20]
 8016934:	9004      	str	r0, [sp, #16]
 8016936:	463b      	mov	r3, r7
 8016938:	4602      	mov	r2, r0
 801693a:	2b65      	cmp	r3, #101	; 0x65
 801693c:	d001      	beq.n	8016942 <_strtod_l+0x172>
 801693e:	2b45      	cmp	r3, #69	; 0x45
 8016940:	d114      	bne.n	801696c <_strtod_l+0x19c>
 8016942:	b924      	cbnz	r4, 801694e <_strtod_l+0x17e>
 8016944:	b910      	cbnz	r0, 801694c <_strtod_l+0x17c>
 8016946:	9b06      	ldr	r3, [sp, #24]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d09e      	beq.n	801688a <_strtod_l+0xba>
 801694c:	2400      	movs	r4, #0
 801694e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016950:	1c73      	adds	r3, r6, #1
 8016952:	931b      	str	r3, [sp, #108]	; 0x6c
 8016954:	7873      	ldrb	r3, [r6, #1]
 8016956:	2b2b      	cmp	r3, #43	; 0x2b
 8016958:	d078      	beq.n	8016a4c <_strtod_l+0x27c>
 801695a:	2b2d      	cmp	r3, #45	; 0x2d
 801695c:	d070      	beq.n	8016a40 <_strtod_l+0x270>
 801695e:	f04f 0c00 	mov.w	ip, #0
 8016962:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016966:	2f09      	cmp	r7, #9
 8016968:	d97c      	bls.n	8016a64 <_strtod_l+0x294>
 801696a:	961b      	str	r6, [sp, #108]	; 0x6c
 801696c:	f04f 0e00 	mov.w	lr, #0
 8016970:	e09a      	b.n	8016aa8 <_strtod_l+0x2d8>
 8016972:	2300      	movs	r3, #0
 8016974:	e7c7      	b.n	8016906 <_strtod_l+0x136>
 8016976:	9905      	ldr	r1, [sp, #20]
 8016978:	2908      	cmp	r1, #8
 801697a:	bfdd      	ittte	le
 801697c:	9907      	ldrle	r1, [sp, #28]
 801697e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016982:	9307      	strle	r3, [sp, #28]
 8016984:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016988:	9b05      	ldr	r3, [sp, #20]
 801698a:	3001      	adds	r0, #1
 801698c:	3301      	adds	r3, #1
 801698e:	9305      	str	r3, [sp, #20]
 8016990:	901b      	str	r0, [sp, #108]	; 0x6c
 8016992:	e7bf      	b.n	8016914 <_strtod_l+0x144>
 8016994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016996:	191a      	adds	r2, r3, r4
 8016998:	921b      	str	r2, [sp, #108]	; 0x6c
 801699a:	9a05      	ldr	r2, [sp, #20]
 801699c:	5d1b      	ldrb	r3, [r3, r4]
 801699e:	2a00      	cmp	r2, #0
 80169a0:	d037      	beq.n	8016a12 <_strtod_l+0x242>
 80169a2:	9c05      	ldr	r4, [sp, #20]
 80169a4:	4602      	mov	r2, r0
 80169a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80169aa:	2909      	cmp	r1, #9
 80169ac:	d913      	bls.n	80169d6 <_strtod_l+0x206>
 80169ae:	2101      	movs	r1, #1
 80169b0:	9104      	str	r1, [sp, #16]
 80169b2:	e7c2      	b.n	801693a <_strtod_l+0x16a>
 80169b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80169ba:	785b      	ldrb	r3, [r3, #1]
 80169bc:	3001      	adds	r0, #1
 80169be:	2b30      	cmp	r3, #48	; 0x30
 80169c0:	d0f8      	beq.n	80169b4 <_strtod_l+0x1e4>
 80169c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80169c6:	2a08      	cmp	r2, #8
 80169c8:	f200 84e4 	bhi.w	8017394 <_strtod_l+0xbc4>
 80169cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169ce:	9208      	str	r2, [sp, #32]
 80169d0:	4602      	mov	r2, r0
 80169d2:	2000      	movs	r0, #0
 80169d4:	4604      	mov	r4, r0
 80169d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80169da:	f100 0101 	add.w	r1, r0, #1
 80169de:	d012      	beq.n	8016a06 <_strtod_l+0x236>
 80169e0:	440a      	add	r2, r1
 80169e2:	eb00 0c04 	add.w	ip, r0, r4
 80169e6:	4621      	mov	r1, r4
 80169e8:	270a      	movs	r7, #10
 80169ea:	458c      	cmp	ip, r1
 80169ec:	d113      	bne.n	8016a16 <_strtod_l+0x246>
 80169ee:	1821      	adds	r1, r4, r0
 80169f0:	2908      	cmp	r1, #8
 80169f2:	f104 0401 	add.w	r4, r4, #1
 80169f6:	4404      	add	r4, r0
 80169f8:	dc19      	bgt.n	8016a2e <_strtod_l+0x25e>
 80169fa:	9b07      	ldr	r3, [sp, #28]
 80169fc:	210a      	movs	r1, #10
 80169fe:	fb01 e303 	mla	r3, r1, r3, lr
 8016a02:	9307      	str	r3, [sp, #28]
 8016a04:	2100      	movs	r1, #0
 8016a06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a08:	1c58      	adds	r0, r3, #1
 8016a0a:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a0c:	785b      	ldrb	r3, [r3, #1]
 8016a0e:	4608      	mov	r0, r1
 8016a10:	e7c9      	b.n	80169a6 <_strtod_l+0x1d6>
 8016a12:	9805      	ldr	r0, [sp, #20]
 8016a14:	e7d3      	b.n	80169be <_strtod_l+0x1ee>
 8016a16:	2908      	cmp	r1, #8
 8016a18:	f101 0101 	add.w	r1, r1, #1
 8016a1c:	dc03      	bgt.n	8016a26 <_strtod_l+0x256>
 8016a1e:	9b07      	ldr	r3, [sp, #28]
 8016a20:	437b      	muls	r3, r7
 8016a22:	9307      	str	r3, [sp, #28]
 8016a24:	e7e1      	b.n	80169ea <_strtod_l+0x21a>
 8016a26:	2910      	cmp	r1, #16
 8016a28:	bfd8      	it	le
 8016a2a:	437d      	mulle	r5, r7
 8016a2c:	e7dd      	b.n	80169ea <_strtod_l+0x21a>
 8016a2e:	2c10      	cmp	r4, #16
 8016a30:	bfdc      	itt	le
 8016a32:	210a      	movle	r1, #10
 8016a34:	fb01 e505 	mlale	r5, r1, r5, lr
 8016a38:	e7e4      	b.n	8016a04 <_strtod_l+0x234>
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	9304      	str	r3, [sp, #16]
 8016a3e:	e781      	b.n	8016944 <_strtod_l+0x174>
 8016a40:	f04f 0c01 	mov.w	ip, #1
 8016a44:	1cb3      	adds	r3, r6, #2
 8016a46:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a48:	78b3      	ldrb	r3, [r6, #2]
 8016a4a:	e78a      	b.n	8016962 <_strtod_l+0x192>
 8016a4c:	f04f 0c00 	mov.w	ip, #0
 8016a50:	e7f8      	b.n	8016a44 <_strtod_l+0x274>
 8016a52:	bf00      	nop
 8016a54:	0801a4c0 	.word	0x0801a4c0
 8016a58:	7ff00000 	.word	0x7ff00000
 8016a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a5e:	1c5f      	adds	r7, r3, #1
 8016a60:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a62:	785b      	ldrb	r3, [r3, #1]
 8016a64:	2b30      	cmp	r3, #48	; 0x30
 8016a66:	d0f9      	beq.n	8016a5c <_strtod_l+0x28c>
 8016a68:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016a6c:	2f08      	cmp	r7, #8
 8016a6e:	f63f af7d 	bhi.w	801696c <_strtod_l+0x19c>
 8016a72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a78:	930a      	str	r3, [sp, #40]	; 0x28
 8016a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a7c:	1c5f      	adds	r7, r3, #1
 8016a7e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a80:	785b      	ldrb	r3, [r3, #1]
 8016a82:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016a86:	f1b8 0f09 	cmp.w	r8, #9
 8016a8a:	d937      	bls.n	8016afc <_strtod_l+0x32c>
 8016a8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a8e:	1a7f      	subs	r7, r7, r1
 8016a90:	2f08      	cmp	r7, #8
 8016a92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016a96:	dc37      	bgt.n	8016b08 <_strtod_l+0x338>
 8016a98:	45be      	cmp	lr, r7
 8016a9a:	bfa8      	it	ge
 8016a9c:	46be      	movge	lr, r7
 8016a9e:	f1bc 0f00 	cmp.w	ip, #0
 8016aa2:	d001      	beq.n	8016aa8 <_strtod_l+0x2d8>
 8016aa4:	f1ce 0e00 	rsb	lr, lr, #0
 8016aa8:	2c00      	cmp	r4, #0
 8016aaa:	d151      	bne.n	8016b50 <_strtod_l+0x380>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	f47f aece 	bne.w	801684e <_strtod_l+0x7e>
 8016ab2:	9a06      	ldr	r2, [sp, #24]
 8016ab4:	2a00      	cmp	r2, #0
 8016ab6:	f47f aeca 	bne.w	801684e <_strtod_l+0x7e>
 8016aba:	9a04      	ldr	r2, [sp, #16]
 8016abc:	2a00      	cmp	r2, #0
 8016abe:	f47f aee4 	bne.w	801688a <_strtod_l+0xba>
 8016ac2:	2b4e      	cmp	r3, #78	; 0x4e
 8016ac4:	d027      	beq.n	8016b16 <_strtod_l+0x346>
 8016ac6:	dc21      	bgt.n	8016b0c <_strtod_l+0x33c>
 8016ac8:	2b49      	cmp	r3, #73	; 0x49
 8016aca:	f47f aede 	bne.w	801688a <_strtod_l+0xba>
 8016ace:	49a0      	ldr	r1, [pc, #640]	; (8016d50 <_strtod_l+0x580>)
 8016ad0:	a81b      	add	r0, sp, #108	; 0x6c
 8016ad2:	f001 fdf7 	bl	80186c4 <__match>
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	f43f aed7 	beq.w	801688a <_strtod_l+0xba>
 8016adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ade:	499d      	ldr	r1, [pc, #628]	; (8016d54 <_strtod_l+0x584>)
 8016ae0:	3b01      	subs	r3, #1
 8016ae2:	a81b      	add	r0, sp, #108	; 0x6c
 8016ae4:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ae6:	f001 fded 	bl	80186c4 <__match>
 8016aea:	b910      	cbnz	r0, 8016af2 <_strtod_l+0x322>
 8016aec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016aee:	3301      	adds	r3, #1
 8016af0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016af2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016d68 <_strtod_l+0x598>
 8016af6:	f04f 0a00 	mov.w	sl, #0
 8016afa:	e6a8      	b.n	801684e <_strtod_l+0x7e>
 8016afc:	210a      	movs	r1, #10
 8016afe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016b02:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016b06:	e7b8      	b.n	8016a7a <_strtod_l+0x2aa>
 8016b08:	46be      	mov	lr, r7
 8016b0a:	e7c8      	b.n	8016a9e <_strtod_l+0x2ce>
 8016b0c:	2b69      	cmp	r3, #105	; 0x69
 8016b0e:	d0de      	beq.n	8016ace <_strtod_l+0x2fe>
 8016b10:	2b6e      	cmp	r3, #110	; 0x6e
 8016b12:	f47f aeba 	bne.w	801688a <_strtod_l+0xba>
 8016b16:	4990      	ldr	r1, [pc, #576]	; (8016d58 <_strtod_l+0x588>)
 8016b18:	a81b      	add	r0, sp, #108	; 0x6c
 8016b1a:	f001 fdd3 	bl	80186c4 <__match>
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	f43f aeb3 	beq.w	801688a <_strtod_l+0xba>
 8016b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	2b28      	cmp	r3, #40	; 0x28
 8016b2a:	d10e      	bne.n	8016b4a <_strtod_l+0x37a>
 8016b2c:	aa1e      	add	r2, sp, #120	; 0x78
 8016b2e:	498b      	ldr	r1, [pc, #556]	; (8016d5c <_strtod_l+0x58c>)
 8016b30:	a81b      	add	r0, sp, #108	; 0x6c
 8016b32:	f001 fddb 	bl	80186ec <__hexnan>
 8016b36:	2805      	cmp	r0, #5
 8016b38:	d107      	bne.n	8016b4a <_strtod_l+0x37a>
 8016b3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b3c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016b40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016b44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016b48:	e681      	b.n	801684e <_strtod_l+0x7e>
 8016b4a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016d70 <_strtod_l+0x5a0>
 8016b4e:	e7d2      	b.n	8016af6 <_strtod_l+0x326>
 8016b50:	ebae 0302 	sub.w	r3, lr, r2
 8016b54:	9306      	str	r3, [sp, #24]
 8016b56:	9b05      	ldr	r3, [sp, #20]
 8016b58:	9807      	ldr	r0, [sp, #28]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	bf08      	it	eq
 8016b5e:	4623      	moveq	r3, r4
 8016b60:	2c10      	cmp	r4, #16
 8016b62:	9305      	str	r3, [sp, #20]
 8016b64:	46a0      	mov	r8, r4
 8016b66:	bfa8      	it	ge
 8016b68:	f04f 0810 	movge.w	r8, #16
 8016b6c:	f7e9 fce2 	bl	8000534 <__aeabi_ui2d>
 8016b70:	2c09      	cmp	r4, #9
 8016b72:	4682      	mov	sl, r0
 8016b74:	468b      	mov	fp, r1
 8016b76:	dc13      	bgt.n	8016ba0 <_strtod_l+0x3d0>
 8016b78:	9b06      	ldr	r3, [sp, #24]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	f43f ae67 	beq.w	801684e <_strtod_l+0x7e>
 8016b80:	9b06      	ldr	r3, [sp, #24]
 8016b82:	dd7a      	ble.n	8016c7a <_strtod_l+0x4aa>
 8016b84:	2b16      	cmp	r3, #22
 8016b86:	dc61      	bgt.n	8016c4c <_strtod_l+0x47c>
 8016b88:	4a75      	ldr	r2, [pc, #468]	; (8016d60 <_strtod_l+0x590>)
 8016b8a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016b8e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016b92:	4652      	mov	r2, sl
 8016b94:	465b      	mov	r3, fp
 8016b96:	f7e9 fd47 	bl	8000628 <__aeabi_dmul>
 8016b9a:	4682      	mov	sl, r0
 8016b9c:	468b      	mov	fp, r1
 8016b9e:	e656      	b.n	801684e <_strtod_l+0x7e>
 8016ba0:	4b6f      	ldr	r3, [pc, #444]	; (8016d60 <_strtod_l+0x590>)
 8016ba2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016ba6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016baa:	f7e9 fd3d 	bl	8000628 <__aeabi_dmul>
 8016bae:	4606      	mov	r6, r0
 8016bb0:	4628      	mov	r0, r5
 8016bb2:	460f      	mov	r7, r1
 8016bb4:	f7e9 fcbe 	bl	8000534 <__aeabi_ui2d>
 8016bb8:	4602      	mov	r2, r0
 8016bba:	460b      	mov	r3, r1
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	4639      	mov	r1, r7
 8016bc0:	f7e9 fb7c 	bl	80002bc <__adddf3>
 8016bc4:	2c0f      	cmp	r4, #15
 8016bc6:	4682      	mov	sl, r0
 8016bc8:	468b      	mov	fp, r1
 8016bca:	ddd5      	ble.n	8016b78 <_strtod_l+0x3a8>
 8016bcc:	9b06      	ldr	r3, [sp, #24]
 8016bce:	eba4 0808 	sub.w	r8, r4, r8
 8016bd2:	4498      	add	r8, r3
 8016bd4:	f1b8 0f00 	cmp.w	r8, #0
 8016bd8:	f340 8096 	ble.w	8016d08 <_strtod_l+0x538>
 8016bdc:	f018 030f 	ands.w	r3, r8, #15
 8016be0:	d00a      	beq.n	8016bf8 <_strtod_l+0x428>
 8016be2:	495f      	ldr	r1, [pc, #380]	; (8016d60 <_strtod_l+0x590>)
 8016be4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016be8:	4652      	mov	r2, sl
 8016bea:	465b      	mov	r3, fp
 8016bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bf0:	f7e9 fd1a 	bl	8000628 <__aeabi_dmul>
 8016bf4:	4682      	mov	sl, r0
 8016bf6:	468b      	mov	fp, r1
 8016bf8:	f038 080f 	bics.w	r8, r8, #15
 8016bfc:	d073      	beq.n	8016ce6 <_strtod_l+0x516>
 8016bfe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016c02:	dd47      	ble.n	8016c94 <_strtod_l+0x4c4>
 8016c04:	2400      	movs	r4, #0
 8016c06:	46a0      	mov	r8, r4
 8016c08:	9407      	str	r4, [sp, #28]
 8016c0a:	9405      	str	r4, [sp, #20]
 8016c0c:	2322      	movs	r3, #34	; 0x22
 8016c0e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016d68 <_strtod_l+0x598>
 8016c12:	f8c9 3000 	str.w	r3, [r9]
 8016c16:	f04f 0a00 	mov.w	sl, #0
 8016c1a:	9b07      	ldr	r3, [sp, #28]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f43f ae16 	beq.w	801684e <_strtod_l+0x7e>
 8016c22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c24:	4648      	mov	r0, r9
 8016c26:	f001 fe6c 	bl	8018902 <_Bfree>
 8016c2a:	9905      	ldr	r1, [sp, #20]
 8016c2c:	4648      	mov	r0, r9
 8016c2e:	f001 fe68 	bl	8018902 <_Bfree>
 8016c32:	4641      	mov	r1, r8
 8016c34:	4648      	mov	r0, r9
 8016c36:	f001 fe64 	bl	8018902 <_Bfree>
 8016c3a:	9907      	ldr	r1, [sp, #28]
 8016c3c:	4648      	mov	r0, r9
 8016c3e:	f001 fe60 	bl	8018902 <_Bfree>
 8016c42:	4621      	mov	r1, r4
 8016c44:	4648      	mov	r0, r9
 8016c46:	f001 fe5c 	bl	8018902 <_Bfree>
 8016c4a:	e600      	b.n	801684e <_strtod_l+0x7e>
 8016c4c:	9a06      	ldr	r2, [sp, #24]
 8016c4e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016c52:	4293      	cmp	r3, r2
 8016c54:	dbba      	blt.n	8016bcc <_strtod_l+0x3fc>
 8016c56:	4d42      	ldr	r5, [pc, #264]	; (8016d60 <_strtod_l+0x590>)
 8016c58:	f1c4 040f 	rsb	r4, r4, #15
 8016c5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016c60:	4652      	mov	r2, sl
 8016c62:	465b      	mov	r3, fp
 8016c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c68:	f7e9 fcde 	bl	8000628 <__aeabi_dmul>
 8016c6c:	9b06      	ldr	r3, [sp, #24]
 8016c6e:	1b1c      	subs	r4, r3, r4
 8016c70:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016c74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c78:	e78d      	b.n	8016b96 <_strtod_l+0x3c6>
 8016c7a:	f113 0f16 	cmn.w	r3, #22
 8016c7e:	dba5      	blt.n	8016bcc <_strtod_l+0x3fc>
 8016c80:	4a37      	ldr	r2, [pc, #220]	; (8016d60 <_strtod_l+0x590>)
 8016c82:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016c86:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016c8a:	4650      	mov	r0, sl
 8016c8c:	4659      	mov	r1, fp
 8016c8e:	f7e9 fdf5 	bl	800087c <__aeabi_ddiv>
 8016c92:	e782      	b.n	8016b9a <_strtod_l+0x3ca>
 8016c94:	2300      	movs	r3, #0
 8016c96:	4e33      	ldr	r6, [pc, #204]	; (8016d64 <_strtod_l+0x594>)
 8016c98:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016c9c:	4650      	mov	r0, sl
 8016c9e:	4659      	mov	r1, fp
 8016ca0:	461d      	mov	r5, r3
 8016ca2:	f1b8 0f01 	cmp.w	r8, #1
 8016ca6:	dc21      	bgt.n	8016cec <_strtod_l+0x51c>
 8016ca8:	b10b      	cbz	r3, 8016cae <_strtod_l+0x4de>
 8016caa:	4682      	mov	sl, r0
 8016cac:	468b      	mov	fp, r1
 8016cae:	4b2d      	ldr	r3, [pc, #180]	; (8016d64 <_strtod_l+0x594>)
 8016cb0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016cb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016cb8:	4652      	mov	r2, sl
 8016cba:	465b      	mov	r3, fp
 8016cbc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016cc0:	f7e9 fcb2 	bl	8000628 <__aeabi_dmul>
 8016cc4:	4b28      	ldr	r3, [pc, #160]	; (8016d68 <_strtod_l+0x598>)
 8016cc6:	460a      	mov	r2, r1
 8016cc8:	400b      	ands	r3, r1
 8016cca:	4928      	ldr	r1, [pc, #160]	; (8016d6c <_strtod_l+0x59c>)
 8016ccc:	428b      	cmp	r3, r1
 8016cce:	4682      	mov	sl, r0
 8016cd0:	d898      	bhi.n	8016c04 <_strtod_l+0x434>
 8016cd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016cd6:	428b      	cmp	r3, r1
 8016cd8:	bf86      	itte	hi
 8016cda:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016d74 <_strtod_l+0x5a4>
 8016cde:	f04f 3aff 	movhi.w	sl, #4294967295
 8016ce2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	9304      	str	r3, [sp, #16]
 8016cea:	e077      	b.n	8016ddc <_strtod_l+0x60c>
 8016cec:	f018 0f01 	tst.w	r8, #1
 8016cf0:	d006      	beq.n	8016d00 <_strtod_l+0x530>
 8016cf2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfa:	f7e9 fc95 	bl	8000628 <__aeabi_dmul>
 8016cfe:	2301      	movs	r3, #1
 8016d00:	3501      	adds	r5, #1
 8016d02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d06:	e7cc      	b.n	8016ca2 <_strtod_l+0x4d2>
 8016d08:	d0ed      	beq.n	8016ce6 <_strtod_l+0x516>
 8016d0a:	f1c8 0800 	rsb	r8, r8, #0
 8016d0e:	f018 020f 	ands.w	r2, r8, #15
 8016d12:	d00a      	beq.n	8016d2a <_strtod_l+0x55a>
 8016d14:	4b12      	ldr	r3, [pc, #72]	; (8016d60 <_strtod_l+0x590>)
 8016d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d1a:	4650      	mov	r0, sl
 8016d1c:	4659      	mov	r1, fp
 8016d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d22:	f7e9 fdab 	bl	800087c <__aeabi_ddiv>
 8016d26:	4682      	mov	sl, r0
 8016d28:	468b      	mov	fp, r1
 8016d2a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016d2e:	d0da      	beq.n	8016ce6 <_strtod_l+0x516>
 8016d30:	f1b8 0f1f 	cmp.w	r8, #31
 8016d34:	dd20      	ble.n	8016d78 <_strtod_l+0x5a8>
 8016d36:	2400      	movs	r4, #0
 8016d38:	46a0      	mov	r8, r4
 8016d3a:	9407      	str	r4, [sp, #28]
 8016d3c:	9405      	str	r4, [sp, #20]
 8016d3e:	2322      	movs	r3, #34	; 0x22
 8016d40:	f04f 0a00 	mov.w	sl, #0
 8016d44:	f04f 0b00 	mov.w	fp, #0
 8016d48:	f8c9 3000 	str.w	r3, [r9]
 8016d4c:	e765      	b.n	8016c1a <_strtod_l+0x44a>
 8016d4e:	bf00      	nop
 8016d50:	0801a48d 	.word	0x0801a48d
 8016d54:	0801a513 	.word	0x0801a513
 8016d58:	0801a495 	.word	0x0801a495
 8016d5c:	0801a4d4 	.word	0x0801a4d4
 8016d60:	0801a550 	.word	0x0801a550
 8016d64:	0801a528 	.word	0x0801a528
 8016d68:	7ff00000 	.word	0x7ff00000
 8016d6c:	7ca00000 	.word	0x7ca00000
 8016d70:	fff80000 	.word	0xfff80000
 8016d74:	7fefffff 	.word	0x7fefffff
 8016d78:	f018 0310 	ands.w	r3, r8, #16
 8016d7c:	bf18      	it	ne
 8016d7e:	236a      	movne	r3, #106	; 0x6a
 8016d80:	4da0      	ldr	r5, [pc, #640]	; (8017004 <_strtod_l+0x834>)
 8016d82:	9304      	str	r3, [sp, #16]
 8016d84:	4650      	mov	r0, sl
 8016d86:	4659      	mov	r1, fp
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f1b8 0f00 	cmp.w	r8, #0
 8016d8e:	f300 810a 	bgt.w	8016fa6 <_strtod_l+0x7d6>
 8016d92:	b10b      	cbz	r3, 8016d98 <_strtod_l+0x5c8>
 8016d94:	4682      	mov	sl, r0
 8016d96:	468b      	mov	fp, r1
 8016d98:	9b04      	ldr	r3, [sp, #16]
 8016d9a:	b1bb      	cbz	r3, 8016dcc <_strtod_l+0x5fc>
 8016d9c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016da0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	4659      	mov	r1, fp
 8016da8:	dd10      	ble.n	8016dcc <_strtod_l+0x5fc>
 8016daa:	2b1f      	cmp	r3, #31
 8016dac:	f340 8107 	ble.w	8016fbe <_strtod_l+0x7ee>
 8016db0:	2b34      	cmp	r3, #52	; 0x34
 8016db2:	bfde      	ittt	le
 8016db4:	3b20      	suble	r3, #32
 8016db6:	f04f 32ff 	movle.w	r2, #4294967295
 8016dba:	fa02 f303 	lslle.w	r3, r2, r3
 8016dbe:	f04f 0a00 	mov.w	sl, #0
 8016dc2:	bfcc      	ite	gt
 8016dc4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016dc8:	ea03 0b01 	andle.w	fp, r3, r1
 8016dcc:	2200      	movs	r2, #0
 8016dce:	2300      	movs	r3, #0
 8016dd0:	4650      	mov	r0, sl
 8016dd2:	4659      	mov	r1, fp
 8016dd4:	f7e9 fe90 	bl	8000af8 <__aeabi_dcmpeq>
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d1ac      	bne.n	8016d36 <_strtod_l+0x566>
 8016ddc:	9b07      	ldr	r3, [sp, #28]
 8016dde:	9300      	str	r3, [sp, #0]
 8016de0:	9a05      	ldr	r2, [sp, #20]
 8016de2:	9908      	ldr	r1, [sp, #32]
 8016de4:	4623      	mov	r3, r4
 8016de6:	4648      	mov	r0, r9
 8016de8:	f001 fddd 	bl	80189a6 <__s2b>
 8016dec:	9007      	str	r0, [sp, #28]
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f43f af08 	beq.w	8016c04 <_strtod_l+0x434>
 8016df4:	9a06      	ldr	r2, [sp, #24]
 8016df6:	9b06      	ldr	r3, [sp, #24]
 8016df8:	2a00      	cmp	r2, #0
 8016dfa:	f1c3 0300 	rsb	r3, r3, #0
 8016dfe:	bfa8      	it	ge
 8016e00:	2300      	movge	r3, #0
 8016e02:	930e      	str	r3, [sp, #56]	; 0x38
 8016e04:	2400      	movs	r4, #0
 8016e06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016e0a:	9316      	str	r3, [sp, #88]	; 0x58
 8016e0c:	46a0      	mov	r8, r4
 8016e0e:	9b07      	ldr	r3, [sp, #28]
 8016e10:	4648      	mov	r0, r9
 8016e12:	6859      	ldr	r1, [r3, #4]
 8016e14:	f001 fd41 	bl	801889a <_Balloc>
 8016e18:	9005      	str	r0, [sp, #20]
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	f43f aef6 	beq.w	8016c0c <_strtod_l+0x43c>
 8016e20:	9b07      	ldr	r3, [sp, #28]
 8016e22:	691a      	ldr	r2, [r3, #16]
 8016e24:	3202      	adds	r2, #2
 8016e26:	f103 010c 	add.w	r1, r3, #12
 8016e2a:	0092      	lsls	r2, r2, #2
 8016e2c:	300c      	adds	r0, #12
 8016e2e:	f001 fd29 	bl	8018884 <memcpy>
 8016e32:	aa1e      	add	r2, sp, #120	; 0x78
 8016e34:	a91d      	add	r1, sp, #116	; 0x74
 8016e36:	ec4b ab10 	vmov	d0, sl, fp
 8016e3a:	4648      	mov	r0, r9
 8016e3c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016e40:	f002 f86c 	bl	8018f1c <__d2b>
 8016e44:	901c      	str	r0, [sp, #112]	; 0x70
 8016e46:	2800      	cmp	r0, #0
 8016e48:	f43f aee0 	beq.w	8016c0c <_strtod_l+0x43c>
 8016e4c:	2101      	movs	r1, #1
 8016e4e:	4648      	mov	r0, r9
 8016e50:	f001 fe35 	bl	8018abe <__i2b>
 8016e54:	4680      	mov	r8, r0
 8016e56:	2800      	cmp	r0, #0
 8016e58:	f43f aed8 	beq.w	8016c0c <_strtod_l+0x43c>
 8016e5c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016e5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e60:	2e00      	cmp	r6, #0
 8016e62:	bfab      	itete	ge
 8016e64:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016e66:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016e68:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016e6a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016e6c:	bfac      	ite	ge
 8016e6e:	18f7      	addge	r7, r6, r3
 8016e70:	1b9d      	sublt	r5, r3, r6
 8016e72:	9b04      	ldr	r3, [sp, #16]
 8016e74:	1af6      	subs	r6, r6, r3
 8016e76:	4416      	add	r6, r2
 8016e78:	4b63      	ldr	r3, [pc, #396]	; (8017008 <_strtod_l+0x838>)
 8016e7a:	3e01      	subs	r6, #1
 8016e7c:	429e      	cmp	r6, r3
 8016e7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016e82:	f280 80af 	bge.w	8016fe4 <_strtod_l+0x814>
 8016e86:	1b9b      	subs	r3, r3, r6
 8016e88:	2b1f      	cmp	r3, #31
 8016e8a:	eba2 0203 	sub.w	r2, r2, r3
 8016e8e:	f04f 0101 	mov.w	r1, #1
 8016e92:	f300 809b 	bgt.w	8016fcc <_strtod_l+0x7fc>
 8016e96:	fa01 f303 	lsl.w	r3, r1, r3
 8016e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8016ea0:	18be      	adds	r6, r7, r2
 8016ea2:	9b04      	ldr	r3, [sp, #16]
 8016ea4:	42b7      	cmp	r7, r6
 8016ea6:	4415      	add	r5, r2
 8016ea8:	441d      	add	r5, r3
 8016eaa:	463b      	mov	r3, r7
 8016eac:	bfa8      	it	ge
 8016eae:	4633      	movge	r3, r6
 8016eb0:	42ab      	cmp	r3, r5
 8016eb2:	bfa8      	it	ge
 8016eb4:	462b      	movge	r3, r5
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	bfc2      	ittt	gt
 8016eba:	1af6      	subgt	r6, r6, r3
 8016ebc:	1aed      	subgt	r5, r5, r3
 8016ebe:	1aff      	subgt	r7, r7, r3
 8016ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ec2:	b1bb      	cbz	r3, 8016ef4 <_strtod_l+0x724>
 8016ec4:	4641      	mov	r1, r8
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	4648      	mov	r0, r9
 8016eca:	f001 fe97 	bl	8018bfc <__pow5mult>
 8016ece:	4680      	mov	r8, r0
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	f43f ae9b 	beq.w	8016c0c <_strtod_l+0x43c>
 8016ed6:	4601      	mov	r1, r0
 8016ed8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016eda:	4648      	mov	r0, r9
 8016edc:	f001 fdf8 	bl	8018ad0 <__multiply>
 8016ee0:	900c      	str	r0, [sp, #48]	; 0x30
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	f43f ae92 	beq.w	8016c0c <_strtod_l+0x43c>
 8016ee8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016eea:	4648      	mov	r0, r9
 8016eec:	f001 fd09 	bl	8018902 <_Bfree>
 8016ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ef2:	931c      	str	r3, [sp, #112]	; 0x70
 8016ef4:	2e00      	cmp	r6, #0
 8016ef6:	dc7a      	bgt.n	8016fee <_strtod_l+0x81e>
 8016ef8:	9b06      	ldr	r3, [sp, #24]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	dd08      	ble.n	8016f10 <_strtod_l+0x740>
 8016efe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f00:	9905      	ldr	r1, [sp, #20]
 8016f02:	4648      	mov	r0, r9
 8016f04:	f001 fe7a 	bl	8018bfc <__pow5mult>
 8016f08:	9005      	str	r0, [sp, #20]
 8016f0a:	2800      	cmp	r0, #0
 8016f0c:	f43f ae7e 	beq.w	8016c0c <_strtod_l+0x43c>
 8016f10:	2d00      	cmp	r5, #0
 8016f12:	dd08      	ble.n	8016f26 <_strtod_l+0x756>
 8016f14:	462a      	mov	r2, r5
 8016f16:	9905      	ldr	r1, [sp, #20]
 8016f18:	4648      	mov	r0, r9
 8016f1a:	f001 febd 	bl	8018c98 <__lshift>
 8016f1e:	9005      	str	r0, [sp, #20]
 8016f20:	2800      	cmp	r0, #0
 8016f22:	f43f ae73 	beq.w	8016c0c <_strtod_l+0x43c>
 8016f26:	2f00      	cmp	r7, #0
 8016f28:	dd08      	ble.n	8016f3c <_strtod_l+0x76c>
 8016f2a:	4641      	mov	r1, r8
 8016f2c:	463a      	mov	r2, r7
 8016f2e:	4648      	mov	r0, r9
 8016f30:	f001 feb2 	bl	8018c98 <__lshift>
 8016f34:	4680      	mov	r8, r0
 8016f36:	2800      	cmp	r0, #0
 8016f38:	f43f ae68 	beq.w	8016c0c <_strtod_l+0x43c>
 8016f3c:	9a05      	ldr	r2, [sp, #20]
 8016f3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f40:	4648      	mov	r0, r9
 8016f42:	f001 ff17 	bl	8018d74 <__mdiff>
 8016f46:	4604      	mov	r4, r0
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	f43f ae5f 	beq.w	8016c0c <_strtod_l+0x43c>
 8016f4e:	68c3      	ldr	r3, [r0, #12]
 8016f50:	930c      	str	r3, [sp, #48]	; 0x30
 8016f52:	2300      	movs	r3, #0
 8016f54:	60c3      	str	r3, [r0, #12]
 8016f56:	4641      	mov	r1, r8
 8016f58:	f001 fef2 	bl	8018d40 <__mcmp>
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	da55      	bge.n	801700c <_strtod_l+0x83c>
 8016f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f62:	b9e3      	cbnz	r3, 8016f9e <_strtod_l+0x7ce>
 8016f64:	f1ba 0f00 	cmp.w	sl, #0
 8016f68:	d119      	bne.n	8016f9e <_strtod_l+0x7ce>
 8016f6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f6e:	b9b3      	cbnz	r3, 8016f9e <_strtod_l+0x7ce>
 8016f70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f74:	0d1b      	lsrs	r3, r3, #20
 8016f76:	051b      	lsls	r3, r3, #20
 8016f78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016f7c:	d90f      	bls.n	8016f9e <_strtod_l+0x7ce>
 8016f7e:	6963      	ldr	r3, [r4, #20]
 8016f80:	b913      	cbnz	r3, 8016f88 <_strtod_l+0x7b8>
 8016f82:	6923      	ldr	r3, [r4, #16]
 8016f84:	2b01      	cmp	r3, #1
 8016f86:	dd0a      	ble.n	8016f9e <_strtod_l+0x7ce>
 8016f88:	4621      	mov	r1, r4
 8016f8a:	2201      	movs	r2, #1
 8016f8c:	4648      	mov	r0, r9
 8016f8e:	f001 fe83 	bl	8018c98 <__lshift>
 8016f92:	4641      	mov	r1, r8
 8016f94:	4604      	mov	r4, r0
 8016f96:	f001 fed3 	bl	8018d40 <__mcmp>
 8016f9a:	2800      	cmp	r0, #0
 8016f9c:	dc67      	bgt.n	801706e <_strtod_l+0x89e>
 8016f9e:	9b04      	ldr	r3, [sp, #16]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d171      	bne.n	8017088 <_strtod_l+0x8b8>
 8016fa4:	e63d      	b.n	8016c22 <_strtod_l+0x452>
 8016fa6:	f018 0f01 	tst.w	r8, #1
 8016faa:	d004      	beq.n	8016fb6 <_strtod_l+0x7e6>
 8016fac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016fb0:	f7e9 fb3a 	bl	8000628 <__aeabi_dmul>
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016fba:	3508      	adds	r5, #8
 8016fbc:	e6e5      	b.n	8016d8a <_strtod_l+0x5ba>
 8016fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8016fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8016fc6:	ea03 0a0a 	and.w	sl, r3, sl
 8016fca:	e6ff      	b.n	8016dcc <_strtod_l+0x5fc>
 8016fcc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016fd0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016fd4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016fd8:	36e2      	adds	r6, #226	; 0xe2
 8016fda:	fa01 f306 	lsl.w	r3, r1, r6
 8016fde:	930a      	str	r3, [sp, #40]	; 0x28
 8016fe0:	910f      	str	r1, [sp, #60]	; 0x3c
 8016fe2:	e75d      	b.n	8016ea0 <_strtod_l+0x6d0>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fe8:	2301      	movs	r3, #1
 8016fea:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fec:	e758      	b.n	8016ea0 <_strtod_l+0x6d0>
 8016fee:	4632      	mov	r2, r6
 8016ff0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ff2:	4648      	mov	r0, r9
 8016ff4:	f001 fe50 	bl	8018c98 <__lshift>
 8016ff8:	901c      	str	r0, [sp, #112]	; 0x70
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	f47f af7c 	bne.w	8016ef8 <_strtod_l+0x728>
 8017000:	e604      	b.n	8016c0c <_strtod_l+0x43c>
 8017002:	bf00      	nop
 8017004:	0801a4e8 	.word	0x0801a4e8
 8017008:	fffffc02 	.word	0xfffffc02
 801700c:	465d      	mov	r5, fp
 801700e:	f040 8086 	bne.w	801711e <_strtod_l+0x94e>
 8017012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017018:	b32a      	cbz	r2, 8017066 <_strtod_l+0x896>
 801701a:	4aaf      	ldr	r2, [pc, #700]	; (80172d8 <_strtod_l+0xb08>)
 801701c:	4293      	cmp	r3, r2
 801701e:	d153      	bne.n	80170c8 <_strtod_l+0x8f8>
 8017020:	9b04      	ldr	r3, [sp, #16]
 8017022:	4650      	mov	r0, sl
 8017024:	b1d3      	cbz	r3, 801705c <_strtod_l+0x88c>
 8017026:	4aad      	ldr	r2, [pc, #692]	; (80172dc <_strtod_l+0xb0c>)
 8017028:	402a      	ands	r2, r5
 801702a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801702e:	f04f 31ff 	mov.w	r1, #4294967295
 8017032:	d816      	bhi.n	8017062 <_strtod_l+0x892>
 8017034:	0d12      	lsrs	r2, r2, #20
 8017036:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801703a:	fa01 f303 	lsl.w	r3, r1, r3
 801703e:	4298      	cmp	r0, r3
 8017040:	d142      	bne.n	80170c8 <_strtod_l+0x8f8>
 8017042:	4ba7      	ldr	r3, [pc, #668]	; (80172e0 <_strtod_l+0xb10>)
 8017044:	429d      	cmp	r5, r3
 8017046:	d102      	bne.n	801704e <_strtod_l+0x87e>
 8017048:	3001      	adds	r0, #1
 801704a:	f43f addf 	beq.w	8016c0c <_strtod_l+0x43c>
 801704e:	4ba3      	ldr	r3, [pc, #652]	; (80172dc <_strtod_l+0xb0c>)
 8017050:	402b      	ands	r3, r5
 8017052:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017056:	f04f 0a00 	mov.w	sl, #0
 801705a:	e7a0      	b.n	8016f9e <_strtod_l+0x7ce>
 801705c:	f04f 33ff 	mov.w	r3, #4294967295
 8017060:	e7ed      	b.n	801703e <_strtod_l+0x86e>
 8017062:	460b      	mov	r3, r1
 8017064:	e7eb      	b.n	801703e <_strtod_l+0x86e>
 8017066:	bb7b      	cbnz	r3, 80170c8 <_strtod_l+0x8f8>
 8017068:	f1ba 0f00 	cmp.w	sl, #0
 801706c:	d12c      	bne.n	80170c8 <_strtod_l+0x8f8>
 801706e:	9904      	ldr	r1, [sp, #16]
 8017070:	4a9a      	ldr	r2, [pc, #616]	; (80172dc <_strtod_l+0xb0c>)
 8017072:	465b      	mov	r3, fp
 8017074:	b1f1      	cbz	r1, 80170b4 <_strtod_l+0x8e4>
 8017076:	ea02 010b 	and.w	r1, r2, fp
 801707a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801707e:	dc19      	bgt.n	80170b4 <_strtod_l+0x8e4>
 8017080:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017084:	f77f ae5b 	ble.w	8016d3e <_strtod_l+0x56e>
 8017088:	4a96      	ldr	r2, [pc, #600]	; (80172e4 <_strtod_l+0xb14>)
 801708a:	2300      	movs	r3, #0
 801708c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017090:	4650      	mov	r0, sl
 8017092:	4659      	mov	r1, fp
 8017094:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017098:	f7e9 fac6 	bl	8000628 <__aeabi_dmul>
 801709c:	4682      	mov	sl, r0
 801709e:	468b      	mov	fp, r1
 80170a0:	2900      	cmp	r1, #0
 80170a2:	f47f adbe 	bne.w	8016c22 <_strtod_l+0x452>
 80170a6:	2800      	cmp	r0, #0
 80170a8:	f47f adbb 	bne.w	8016c22 <_strtod_l+0x452>
 80170ac:	2322      	movs	r3, #34	; 0x22
 80170ae:	f8c9 3000 	str.w	r3, [r9]
 80170b2:	e5b6      	b.n	8016c22 <_strtod_l+0x452>
 80170b4:	4013      	ands	r3, r2
 80170b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80170ba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80170be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80170c2:	f04f 3aff 	mov.w	sl, #4294967295
 80170c6:	e76a      	b.n	8016f9e <_strtod_l+0x7ce>
 80170c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170ca:	b193      	cbz	r3, 80170f2 <_strtod_l+0x922>
 80170cc:	422b      	tst	r3, r5
 80170ce:	f43f af66 	beq.w	8016f9e <_strtod_l+0x7ce>
 80170d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170d4:	9a04      	ldr	r2, [sp, #16]
 80170d6:	4650      	mov	r0, sl
 80170d8:	4659      	mov	r1, fp
 80170da:	b173      	cbz	r3, 80170fa <_strtod_l+0x92a>
 80170dc:	f7ff fb5c 	bl	8016798 <sulp>
 80170e0:	4602      	mov	r2, r0
 80170e2:	460b      	mov	r3, r1
 80170e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80170e8:	f7e9 f8e8 	bl	80002bc <__adddf3>
 80170ec:	4682      	mov	sl, r0
 80170ee:	468b      	mov	fp, r1
 80170f0:	e755      	b.n	8016f9e <_strtod_l+0x7ce>
 80170f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170f4:	ea13 0f0a 	tst.w	r3, sl
 80170f8:	e7e9      	b.n	80170ce <_strtod_l+0x8fe>
 80170fa:	f7ff fb4d 	bl	8016798 <sulp>
 80170fe:	4602      	mov	r2, r0
 8017100:	460b      	mov	r3, r1
 8017102:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017106:	f7e9 f8d7 	bl	80002b8 <__aeabi_dsub>
 801710a:	2200      	movs	r2, #0
 801710c:	2300      	movs	r3, #0
 801710e:	4682      	mov	sl, r0
 8017110:	468b      	mov	fp, r1
 8017112:	f7e9 fcf1 	bl	8000af8 <__aeabi_dcmpeq>
 8017116:	2800      	cmp	r0, #0
 8017118:	f47f ae11 	bne.w	8016d3e <_strtod_l+0x56e>
 801711c:	e73f      	b.n	8016f9e <_strtod_l+0x7ce>
 801711e:	4641      	mov	r1, r8
 8017120:	4620      	mov	r0, r4
 8017122:	f001 ff4a 	bl	8018fba <__ratio>
 8017126:	ec57 6b10 	vmov	r6, r7, d0
 801712a:	2200      	movs	r2, #0
 801712c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017130:	ee10 0a10 	vmov	r0, s0
 8017134:	4639      	mov	r1, r7
 8017136:	f7e9 fcf3 	bl	8000b20 <__aeabi_dcmple>
 801713a:	2800      	cmp	r0, #0
 801713c:	d077      	beq.n	801722e <_strtod_l+0xa5e>
 801713e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017140:	2b00      	cmp	r3, #0
 8017142:	d04a      	beq.n	80171da <_strtod_l+0xa0a>
 8017144:	4b68      	ldr	r3, [pc, #416]	; (80172e8 <_strtod_l+0xb18>)
 8017146:	2200      	movs	r2, #0
 8017148:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801714c:	4f66      	ldr	r7, [pc, #408]	; (80172e8 <_strtod_l+0xb18>)
 801714e:	2600      	movs	r6, #0
 8017150:	4b62      	ldr	r3, [pc, #392]	; (80172dc <_strtod_l+0xb0c>)
 8017152:	402b      	ands	r3, r5
 8017154:	930f      	str	r3, [sp, #60]	; 0x3c
 8017156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017158:	4b64      	ldr	r3, [pc, #400]	; (80172ec <_strtod_l+0xb1c>)
 801715a:	429a      	cmp	r2, r3
 801715c:	f040 80ce 	bne.w	80172fc <_strtod_l+0xb2c>
 8017160:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017168:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801716c:	ec4b ab10 	vmov	d0, sl, fp
 8017170:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017174:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017178:	f001 fe5a 	bl	8018e30 <__ulp>
 801717c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017180:	ec53 2b10 	vmov	r2, r3, d0
 8017184:	f7e9 fa50 	bl	8000628 <__aeabi_dmul>
 8017188:	4652      	mov	r2, sl
 801718a:	465b      	mov	r3, fp
 801718c:	f7e9 f896 	bl	80002bc <__adddf3>
 8017190:	460b      	mov	r3, r1
 8017192:	4952      	ldr	r1, [pc, #328]	; (80172dc <_strtod_l+0xb0c>)
 8017194:	4a56      	ldr	r2, [pc, #344]	; (80172f0 <_strtod_l+0xb20>)
 8017196:	4019      	ands	r1, r3
 8017198:	4291      	cmp	r1, r2
 801719a:	4682      	mov	sl, r0
 801719c:	d95b      	bls.n	8017256 <_strtod_l+0xa86>
 801719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80171a4:	4293      	cmp	r3, r2
 80171a6:	d103      	bne.n	80171b0 <_strtod_l+0x9e0>
 80171a8:	9b08      	ldr	r3, [sp, #32]
 80171aa:	3301      	adds	r3, #1
 80171ac:	f43f ad2e 	beq.w	8016c0c <_strtod_l+0x43c>
 80171b0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80172e0 <_strtod_l+0xb10>
 80171b4:	f04f 3aff 	mov.w	sl, #4294967295
 80171b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171ba:	4648      	mov	r0, r9
 80171bc:	f001 fba1 	bl	8018902 <_Bfree>
 80171c0:	9905      	ldr	r1, [sp, #20]
 80171c2:	4648      	mov	r0, r9
 80171c4:	f001 fb9d 	bl	8018902 <_Bfree>
 80171c8:	4641      	mov	r1, r8
 80171ca:	4648      	mov	r0, r9
 80171cc:	f001 fb99 	bl	8018902 <_Bfree>
 80171d0:	4621      	mov	r1, r4
 80171d2:	4648      	mov	r0, r9
 80171d4:	f001 fb95 	bl	8018902 <_Bfree>
 80171d8:	e619      	b.n	8016e0e <_strtod_l+0x63e>
 80171da:	f1ba 0f00 	cmp.w	sl, #0
 80171de:	d11a      	bne.n	8017216 <_strtod_l+0xa46>
 80171e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171e4:	b9eb      	cbnz	r3, 8017222 <_strtod_l+0xa52>
 80171e6:	2200      	movs	r2, #0
 80171e8:	4b3f      	ldr	r3, [pc, #252]	; (80172e8 <_strtod_l+0xb18>)
 80171ea:	4630      	mov	r0, r6
 80171ec:	4639      	mov	r1, r7
 80171ee:	f7e9 fc8d 	bl	8000b0c <__aeabi_dcmplt>
 80171f2:	b9c8      	cbnz	r0, 8017228 <_strtod_l+0xa58>
 80171f4:	4630      	mov	r0, r6
 80171f6:	4639      	mov	r1, r7
 80171f8:	2200      	movs	r2, #0
 80171fa:	4b3e      	ldr	r3, [pc, #248]	; (80172f4 <_strtod_l+0xb24>)
 80171fc:	f7e9 fa14 	bl	8000628 <__aeabi_dmul>
 8017200:	4606      	mov	r6, r0
 8017202:	460f      	mov	r7, r1
 8017204:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017208:	9618      	str	r6, [sp, #96]	; 0x60
 801720a:	9319      	str	r3, [sp, #100]	; 0x64
 801720c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017210:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017214:	e79c      	b.n	8017150 <_strtod_l+0x980>
 8017216:	f1ba 0f01 	cmp.w	sl, #1
 801721a:	d102      	bne.n	8017222 <_strtod_l+0xa52>
 801721c:	2d00      	cmp	r5, #0
 801721e:	f43f ad8e 	beq.w	8016d3e <_strtod_l+0x56e>
 8017222:	2200      	movs	r2, #0
 8017224:	4b34      	ldr	r3, [pc, #208]	; (80172f8 <_strtod_l+0xb28>)
 8017226:	e78f      	b.n	8017148 <_strtod_l+0x978>
 8017228:	2600      	movs	r6, #0
 801722a:	4f32      	ldr	r7, [pc, #200]	; (80172f4 <_strtod_l+0xb24>)
 801722c:	e7ea      	b.n	8017204 <_strtod_l+0xa34>
 801722e:	4b31      	ldr	r3, [pc, #196]	; (80172f4 <_strtod_l+0xb24>)
 8017230:	4630      	mov	r0, r6
 8017232:	4639      	mov	r1, r7
 8017234:	2200      	movs	r2, #0
 8017236:	f7e9 f9f7 	bl	8000628 <__aeabi_dmul>
 801723a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801723c:	4606      	mov	r6, r0
 801723e:	460f      	mov	r7, r1
 8017240:	b933      	cbnz	r3, 8017250 <_strtod_l+0xa80>
 8017242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017246:	9010      	str	r0, [sp, #64]	; 0x40
 8017248:	9311      	str	r3, [sp, #68]	; 0x44
 801724a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801724e:	e7df      	b.n	8017210 <_strtod_l+0xa40>
 8017250:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017254:	e7f9      	b.n	801724a <_strtod_l+0xa7a>
 8017256:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801725a:	9b04      	ldr	r3, [sp, #16]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d1ab      	bne.n	80171b8 <_strtod_l+0x9e8>
 8017260:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017264:	0d1b      	lsrs	r3, r3, #20
 8017266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017268:	051b      	lsls	r3, r3, #20
 801726a:	429a      	cmp	r2, r3
 801726c:	465d      	mov	r5, fp
 801726e:	d1a3      	bne.n	80171b8 <_strtod_l+0x9e8>
 8017270:	4639      	mov	r1, r7
 8017272:	4630      	mov	r0, r6
 8017274:	f7e9 fc88 	bl	8000b88 <__aeabi_d2iz>
 8017278:	f7e9 f96c 	bl	8000554 <__aeabi_i2d>
 801727c:	460b      	mov	r3, r1
 801727e:	4602      	mov	r2, r0
 8017280:	4639      	mov	r1, r7
 8017282:	4630      	mov	r0, r6
 8017284:	f7e9 f818 	bl	80002b8 <__aeabi_dsub>
 8017288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801728a:	4606      	mov	r6, r0
 801728c:	460f      	mov	r7, r1
 801728e:	b933      	cbnz	r3, 801729e <_strtod_l+0xace>
 8017290:	f1ba 0f00 	cmp.w	sl, #0
 8017294:	d103      	bne.n	801729e <_strtod_l+0xace>
 8017296:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801729a:	2d00      	cmp	r5, #0
 801729c:	d06d      	beq.n	801737a <_strtod_l+0xbaa>
 801729e:	a30a      	add	r3, pc, #40	; (adr r3, 80172c8 <_strtod_l+0xaf8>)
 80172a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a4:	4630      	mov	r0, r6
 80172a6:	4639      	mov	r1, r7
 80172a8:	f7e9 fc30 	bl	8000b0c <__aeabi_dcmplt>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	f47f acb8 	bne.w	8016c22 <_strtod_l+0x452>
 80172b2:	a307      	add	r3, pc, #28	; (adr r3, 80172d0 <_strtod_l+0xb00>)
 80172b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b8:	4630      	mov	r0, r6
 80172ba:	4639      	mov	r1, r7
 80172bc:	f7e9 fc44 	bl	8000b48 <__aeabi_dcmpgt>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	f43f af79 	beq.w	80171b8 <_strtod_l+0x9e8>
 80172c6:	e4ac      	b.n	8016c22 <_strtod_l+0x452>
 80172c8:	94a03595 	.word	0x94a03595
 80172cc:	3fdfffff 	.word	0x3fdfffff
 80172d0:	35afe535 	.word	0x35afe535
 80172d4:	3fe00000 	.word	0x3fe00000
 80172d8:	000fffff 	.word	0x000fffff
 80172dc:	7ff00000 	.word	0x7ff00000
 80172e0:	7fefffff 	.word	0x7fefffff
 80172e4:	39500000 	.word	0x39500000
 80172e8:	3ff00000 	.word	0x3ff00000
 80172ec:	7fe00000 	.word	0x7fe00000
 80172f0:	7c9fffff 	.word	0x7c9fffff
 80172f4:	3fe00000 	.word	0x3fe00000
 80172f8:	bff00000 	.word	0xbff00000
 80172fc:	9b04      	ldr	r3, [sp, #16]
 80172fe:	b333      	cbz	r3, 801734e <_strtod_l+0xb7e>
 8017300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017302:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017306:	d822      	bhi.n	801734e <_strtod_l+0xb7e>
 8017308:	a327      	add	r3, pc, #156	; (adr r3, 80173a8 <_strtod_l+0xbd8>)
 801730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730e:	4630      	mov	r0, r6
 8017310:	4639      	mov	r1, r7
 8017312:	f7e9 fc05 	bl	8000b20 <__aeabi_dcmple>
 8017316:	b1a0      	cbz	r0, 8017342 <_strtod_l+0xb72>
 8017318:	4639      	mov	r1, r7
 801731a:	4630      	mov	r0, r6
 801731c:	f7e9 fc5c 	bl	8000bd8 <__aeabi_d2uiz>
 8017320:	2800      	cmp	r0, #0
 8017322:	bf08      	it	eq
 8017324:	2001      	moveq	r0, #1
 8017326:	f7e9 f905 	bl	8000534 <__aeabi_ui2d>
 801732a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801732c:	4606      	mov	r6, r0
 801732e:	460f      	mov	r7, r1
 8017330:	bb03      	cbnz	r3, 8017374 <_strtod_l+0xba4>
 8017332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017336:	9012      	str	r0, [sp, #72]	; 0x48
 8017338:	9313      	str	r3, [sp, #76]	; 0x4c
 801733a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801733e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017346:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801734a:	1a9b      	subs	r3, r3, r2
 801734c:	930b      	str	r3, [sp, #44]	; 0x2c
 801734e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017352:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017356:	f001 fd6b 	bl	8018e30 <__ulp>
 801735a:	4650      	mov	r0, sl
 801735c:	ec53 2b10 	vmov	r2, r3, d0
 8017360:	4659      	mov	r1, fp
 8017362:	f7e9 f961 	bl	8000628 <__aeabi_dmul>
 8017366:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801736a:	f7e8 ffa7 	bl	80002bc <__adddf3>
 801736e:	4682      	mov	sl, r0
 8017370:	468b      	mov	fp, r1
 8017372:	e772      	b.n	801725a <_strtod_l+0xa8a>
 8017374:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017378:	e7df      	b.n	801733a <_strtod_l+0xb6a>
 801737a:	a30d      	add	r3, pc, #52	; (adr r3, 80173b0 <_strtod_l+0xbe0>)
 801737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017380:	f7e9 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 8017384:	e79c      	b.n	80172c0 <_strtod_l+0xaf0>
 8017386:	2300      	movs	r3, #0
 8017388:	930d      	str	r3, [sp, #52]	; 0x34
 801738a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801738c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801738e:	6013      	str	r3, [r2, #0]
 8017390:	f7ff ba61 	b.w	8016856 <_strtod_l+0x86>
 8017394:	2b65      	cmp	r3, #101	; 0x65
 8017396:	f04f 0200 	mov.w	r2, #0
 801739a:	f43f ab4e 	beq.w	8016a3a <_strtod_l+0x26a>
 801739e:	2101      	movs	r1, #1
 80173a0:	4614      	mov	r4, r2
 80173a2:	9104      	str	r1, [sp, #16]
 80173a4:	f7ff bacb 	b.w	801693e <_strtod_l+0x16e>
 80173a8:	ffc00000 	.word	0xffc00000
 80173ac:	41dfffff 	.word	0x41dfffff
 80173b0:	94a03595 	.word	0x94a03595
 80173b4:	3fcfffff 	.word	0x3fcfffff

080173b8 <_strtod_r>:
 80173b8:	4b05      	ldr	r3, [pc, #20]	; (80173d0 <_strtod_r+0x18>)
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	b410      	push	{r4}
 80173be:	6a1b      	ldr	r3, [r3, #32]
 80173c0:	4c04      	ldr	r4, [pc, #16]	; (80173d4 <_strtod_r+0x1c>)
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	bf08      	it	eq
 80173c6:	4623      	moveq	r3, r4
 80173c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173cc:	f7ff ba00 	b.w	80167d0 <_strtod_l>
 80173d0:	2000000c 	.word	0x2000000c
 80173d4:	20000070 	.word	0x20000070

080173d8 <_strtol_l.isra.0>:
 80173d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173dc:	4680      	mov	r8, r0
 80173de:	4689      	mov	r9, r1
 80173e0:	4692      	mov	sl, r2
 80173e2:	461e      	mov	r6, r3
 80173e4:	460f      	mov	r7, r1
 80173e6:	463d      	mov	r5, r7
 80173e8:	9808      	ldr	r0, [sp, #32]
 80173ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173ee:	f001 fa0d 	bl	801880c <__locale_ctype_ptr_l>
 80173f2:	4420      	add	r0, r4
 80173f4:	7843      	ldrb	r3, [r0, #1]
 80173f6:	f013 0308 	ands.w	r3, r3, #8
 80173fa:	d132      	bne.n	8017462 <_strtol_l.isra.0+0x8a>
 80173fc:	2c2d      	cmp	r4, #45	; 0x2d
 80173fe:	d132      	bne.n	8017466 <_strtol_l.isra.0+0x8e>
 8017400:	787c      	ldrb	r4, [r7, #1]
 8017402:	1cbd      	adds	r5, r7, #2
 8017404:	2201      	movs	r2, #1
 8017406:	2e00      	cmp	r6, #0
 8017408:	d05d      	beq.n	80174c6 <_strtol_l.isra.0+0xee>
 801740a:	2e10      	cmp	r6, #16
 801740c:	d109      	bne.n	8017422 <_strtol_l.isra.0+0x4a>
 801740e:	2c30      	cmp	r4, #48	; 0x30
 8017410:	d107      	bne.n	8017422 <_strtol_l.isra.0+0x4a>
 8017412:	782b      	ldrb	r3, [r5, #0]
 8017414:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017418:	2b58      	cmp	r3, #88	; 0x58
 801741a:	d14f      	bne.n	80174bc <_strtol_l.isra.0+0xe4>
 801741c:	786c      	ldrb	r4, [r5, #1]
 801741e:	2610      	movs	r6, #16
 8017420:	3502      	adds	r5, #2
 8017422:	2a00      	cmp	r2, #0
 8017424:	bf14      	ite	ne
 8017426:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801742a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801742e:	2700      	movs	r7, #0
 8017430:	fbb1 fcf6 	udiv	ip, r1, r6
 8017434:	4638      	mov	r0, r7
 8017436:	fb06 1e1c 	mls	lr, r6, ip, r1
 801743a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801743e:	2b09      	cmp	r3, #9
 8017440:	d817      	bhi.n	8017472 <_strtol_l.isra.0+0x9a>
 8017442:	461c      	mov	r4, r3
 8017444:	42a6      	cmp	r6, r4
 8017446:	dd23      	ble.n	8017490 <_strtol_l.isra.0+0xb8>
 8017448:	1c7b      	adds	r3, r7, #1
 801744a:	d007      	beq.n	801745c <_strtol_l.isra.0+0x84>
 801744c:	4584      	cmp	ip, r0
 801744e:	d31c      	bcc.n	801748a <_strtol_l.isra.0+0xb2>
 8017450:	d101      	bne.n	8017456 <_strtol_l.isra.0+0x7e>
 8017452:	45a6      	cmp	lr, r4
 8017454:	db19      	blt.n	801748a <_strtol_l.isra.0+0xb2>
 8017456:	fb00 4006 	mla	r0, r0, r6, r4
 801745a:	2701      	movs	r7, #1
 801745c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017460:	e7eb      	b.n	801743a <_strtol_l.isra.0+0x62>
 8017462:	462f      	mov	r7, r5
 8017464:	e7bf      	b.n	80173e6 <_strtol_l.isra.0+0xe>
 8017466:	2c2b      	cmp	r4, #43	; 0x2b
 8017468:	bf04      	itt	eq
 801746a:	1cbd      	addeq	r5, r7, #2
 801746c:	787c      	ldrbeq	r4, [r7, #1]
 801746e:	461a      	mov	r2, r3
 8017470:	e7c9      	b.n	8017406 <_strtol_l.isra.0+0x2e>
 8017472:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017476:	2b19      	cmp	r3, #25
 8017478:	d801      	bhi.n	801747e <_strtol_l.isra.0+0xa6>
 801747a:	3c37      	subs	r4, #55	; 0x37
 801747c:	e7e2      	b.n	8017444 <_strtol_l.isra.0+0x6c>
 801747e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017482:	2b19      	cmp	r3, #25
 8017484:	d804      	bhi.n	8017490 <_strtol_l.isra.0+0xb8>
 8017486:	3c57      	subs	r4, #87	; 0x57
 8017488:	e7dc      	b.n	8017444 <_strtol_l.isra.0+0x6c>
 801748a:	f04f 37ff 	mov.w	r7, #4294967295
 801748e:	e7e5      	b.n	801745c <_strtol_l.isra.0+0x84>
 8017490:	1c7b      	adds	r3, r7, #1
 8017492:	d108      	bne.n	80174a6 <_strtol_l.isra.0+0xce>
 8017494:	2322      	movs	r3, #34	; 0x22
 8017496:	f8c8 3000 	str.w	r3, [r8]
 801749a:	4608      	mov	r0, r1
 801749c:	f1ba 0f00 	cmp.w	sl, #0
 80174a0:	d107      	bne.n	80174b2 <_strtol_l.isra.0+0xda>
 80174a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174a6:	b102      	cbz	r2, 80174aa <_strtol_l.isra.0+0xd2>
 80174a8:	4240      	negs	r0, r0
 80174aa:	f1ba 0f00 	cmp.w	sl, #0
 80174ae:	d0f8      	beq.n	80174a2 <_strtol_l.isra.0+0xca>
 80174b0:	b10f      	cbz	r7, 80174b6 <_strtol_l.isra.0+0xde>
 80174b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80174b6:	f8ca 9000 	str.w	r9, [sl]
 80174ba:	e7f2      	b.n	80174a2 <_strtol_l.isra.0+0xca>
 80174bc:	2430      	movs	r4, #48	; 0x30
 80174be:	2e00      	cmp	r6, #0
 80174c0:	d1af      	bne.n	8017422 <_strtol_l.isra.0+0x4a>
 80174c2:	2608      	movs	r6, #8
 80174c4:	e7ad      	b.n	8017422 <_strtol_l.isra.0+0x4a>
 80174c6:	2c30      	cmp	r4, #48	; 0x30
 80174c8:	d0a3      	beq.n	8017412 <_strtol_l.isra.0+0x3a>
 80174ca:	260a      	movs	r6, #10
 80174cc:	e7a9      	b.n	8017422 <_strtol_l.isra.0+0x4a>
	...

080174d0 <_strtol_r>:
 80174d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174d2:	4c06      	ldr	r4, [pc, #24]	; (80174ec <_strtol_r+0x1c>)
 80174d4:	4d06      	ldr	r5, [pc, #24]	; (80174f0 <_strtol_r+0x20>)
 80174d6:	6824      	ldr	r4, [r4, #0]
 80174d8:	6a24      	ldr	r4, [r4, #32]
 80174da:	2c00      	cmp	r4, #0
 80174dc:	bf08      	it	eq
 80174de:	462c      	moveq	r4, r5
 80174e0:	9400      	str	r4, [sp, #0]
 80174e2:	f7ff ff79 	bl	80173d8 <_strtol_l.isra.0>
 80174e6:	b003      	add	sp, #12
 80174e8:	bd30      	pop	{r4, r5, pc}
 80174ea:	bf00      	nop
 80174ec:	2000000c 	.word	0x2000000c
 80174f0:	20000070 	.word	0x20000070

080174f4 <_vsiprintf_r>:
 80174f4:	b500      	push	{lr}
 80174f6:	b09b      	sub	sp, #108	; 0x6c
 80174f8:	9100      	str	r1, [sp, #0]
 80174fa:	9104      	str	r1, [sp, #16]
 80174fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017500:	9105      	str	r1, [sp, #20]
 8017502:	9102      	str	r1, [sp, #8]
 8017504:	4905      	ldr	r1, [pc, #20]	; (801751c <_vsiprintf_r+0x28>)
 8017506:	9103      	str	r1, [sp, #12]
 8017508:	4669      	mov	r1, sp
 801750a:	f001 fed5 	bl	80192b8 <_svfiprintf_r>
 801750e:	9b00      	ldr	r3, [sp, #0]
 8017510:	2200      	movs	r2, #0
 8017512:	701a      	strb	r2, [r3, #0]
 8017514:	b01b      	add	sp, #108	; 0x6c
 8017516:	f85d fb04 	ldr.w	pc, [sp], #4
 801751a:	bf00      	nop
 801751c:	ffff0208 	.word	0xffff0208

08017520 <vsiprintf>:
 8017520:	4613      	mov	r3, r2
 8017522:	460a      	mov	r2, r1
 8017524:	4601      	mov	r1, r0
 8017526:	4802      	ldr	r0, [pc, #8]	; (8017530 <vsiprintf+0x10>)
 8017528:	6800      	ldr	r0, [r0, #0]
 801752a:	f7ff bfe3 	b.w	80174f4 <_vsiprintf_r>
 801752e:	bf00      	nop
 8017530:	2000000c 	.word	0x2000000c

08017534 <quorem>:
 8017534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017538:	6903      	ldr	r3, [r0, #16]
 801753a:	690c      	ldr	r4, [r1, #16]
 801753c:	42a3      	cmp	r3, r4
 801753e:	4680      	mov	r8, r0
 8017540:	f2c0 8082 	blt.w	8017648 <quorem+0x114>
 8017544:	3c01      	subs	r4, #1
 8017546:	f101 0714 	add.w	r7, r1, #20
 801754a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801754e:	f100 0614 	add.w	r6, r0, #20
 8017552:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017556:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801755a:	eb06 030c 	add.w	r3, r6, ip
 801755e:	3501      	adds	r5, #1
 8017560:	eb07 090c 	add.w	r9, r7, ip
 8017564:	9301      	str	r3, [sp, #4]
 8017566:	fbb0 f5f5 	udiv	r5, r0, r5
 801756a:	b395      	cbz	r5, 80175d2 <quorem+0x9e>
 801756c:	f04f 0a00 	mov.w	sl, #0
 8017570:	4638      	mov	r0, r7
 8017572:	46b6      	mov	lr, r6
 8017574:	46d3      	mov	fp, sl
 8017576:	f850 2b04 	ldr.w	r2, [r0], #4
 801757a:	b293      	uxth	r3, r2
 801757c:	fb05 a303 	mla	r3, r5, r3, sl
 8017580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017584:	b29b      	uxth	r3, r3
 8017586:	ebab 0303 	sub.w	r3, fp, r3
 801758a:	0c12      	lsrs	r2, r2, #16
 801758c:	f8de b000 	ldr.w	fp, [lr]
 8017590:	fb05 a202 	mla	r2, r5, r2, sl
 8017594:	fa13 f38b 	uxtah	r3, r3, fp
 8017598:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801759c:	fa1f fb82 	uxth.w	fp, r2
 80175a0:	f8de 2000 	ldr.w	r2, [lr]
 80175a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80175a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175b2:	4581      	cmp	r9, r0
 80175b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80175b8:	f84e 3b04 	str.w	r3, [lr], #4
 80175bc:	d2db      	bcs.n	8017576 <quorem+0x42>
 80175be:	f856 300c 	ldr.w	r3, [r6, ip]
 80175c2:	b933      	cbnz	r3, 80175d2 <quorem+0x9e>
 80175c4:	9b01      	ldr	r3, [sp, #4]
 80175c6:	3b04      	subs	r3, #4
 80175c8:	429e      	cmp	r6, r3
 80175ca:	461a      	mov	r2, r3
 80175cc:	d330      	bcc.n	8017630 <quorem+0xfc>
 80175ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80175d2:	4640      	mov	r0, r8
 80175d4:	f001 fbb4 	bl	8018d40 <__mcmp>
 80175d8:	2800      	cmp	r0, #0
 80175da:	db25      	blt.n	8017628 <quorem+0xf4>
 80175dc:	3501      	adds	r5, #1
 80175de:	4630      	mov	r0, r6
 80175e0:	f04f 0c00 	mov.w	ip, #0
 80175e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80175e8:	f8d0 e000 	ldr.w	lr, [r0]
 80175ec:	b293      	uxth	r3, r2
 80175ee:	ebac 0303 	sub.w	r3, ip, r3
 80175f2:	0c12      	lsrs	r2, r2, #16
 80175f4:	fa13 f38e 	uxtah	r3, r3, lr
 80175f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80175fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017600:	b29b      	uxth	r3, r3
 8017602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017606:	45b9      	cmp	r9, r7
 8017608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801760c:	f840 3b04 	str.w	r3, [r0], #4
 8017610:	d2e8      	bcs.n	80175e4 <quorem+0xb0>
 8017612:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017616:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801761a:	b92a      	cbnz	r2, 8017628 <quorem+0xf4>
 801761c:	3b04      	subs	r3, #4
 801761e:	429e      	cmp	r6, r3
 8017620:	461a      	mov	r2, r3
 8017622:	d30b      	bcc.n	801763c <quorem+0x108>
 8017624:	f8c8 4010 	str.w	r4, [r8, #16]
 8017628:	4628      	mov	r0, r5
 801762a:	b003      	add	sp, #12
 801762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017630:	6812      	ldr	r2, [r2, #0]
 8017632:	3b04      	subs	r3, #4
 8017634:	2a00      	cmp	r2, #0
 8017636:	d1ca      	bne.n	80175ce <quorem+0x9a>
 8017638:	3c01      	subs	r4, #1
 801763a:	e7c5      	b.n	80175c8 <quorem+0x94>
 801763c:	6812      	ldr	r2, [r2, #0]
 801763e:	3b04      	subs	r3, #4
 8017640:	2a00      	cmp	r2, #0
 8017642:	d1ef      	bne.n	8017624 <quorem+0xf0>
 8017644:	3c01      	subs	r4, #1
 8017646:	e7ea      	b.n	801761e <quorem+0xea>
 8017648:	2000      	movs	r0, #0
 801764a:	e7ee      	b.n	801762a <quorem+0xf6>
 801764c:	0000      	movs	r0, r0
	...

08017650 <_dtoa_r>:
 8017650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017654:	ec57 6b10 	vmov	r6, r7, d0
 8017658:	b097      	sub	sp, #92	; 0x5c
 801765a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801765c:	9106      	str	r1, [sp, #24]
 801765e:	4604      	mov	r4, r0
 8017660:	920b      	str	r2, [sp, #44]	; 0x2c
 8017662:	9312      	str	r3, [sp, #72]	; 0x48
 8017664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017668:	e9cd 6700 	strd	r6, r7, [sp]
 801766c:	b93d      	cbnz	r5, 801767e <_dtoa_r+0x2e>
 801766e:	2010      	movs	r0, #16
 8017670:	f001 f8ee 	bl	8018850 <malloc>
 8017674:	6260      	str	r0, [r4, #36]	; 0x24
 8017676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801767a:	6005      	str	r5, [r0, #0]
 801767c:	60c5      	str	r5, [r0, #12]
 801767e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017680:	6819      	ldr	r1, [r3, #0]
 8017682:	b151      	cbz	r1, 801769a <_dtoa_r+0x4a>
 8017684:	685a      	ldr	r2, [r3, #4]
 8017686:	604a      	str	r2, [r1, #4]
 8017688:	2301      	movs	r3, #1
 801768a:	4093      	lsls	r3, r2
 801768c:	608b      	str	r3, [r1, #8]
 801768e:	4620      	mov	r0, r4
 8017690:	f001 f937 	bl	8018902 <_Bfree>
 8017694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017696:	2200      	movs	r2, #0
 8017698:	601a      	str	r2, [r3, #0]
 801769a:	1e3b      	subs	r3, r7, #0
 801769c:	bfbb      	ittet	lt
 801769e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80176a2:	9301      	strlt	r3, [sp, #4]
 80176a4:	2300      	movge	r3, #0
 80176a6:	2201      	movlt	r2, #1
 80176a8:	bfac      	ite	ge
 80176aa:	f8c8 3000 	strge.w	r3, [r8]
 80176ae:	f8c8 2000 	strlt.w	r2, [r8]
 80176b2:	4baf      	ldr	r3, [pc, #700]	; (8017970 <_dtoa_r+0x320>)
 80176b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80176b8:	ea33 0308 	bics.w	r3, r3, r8
 80176bc:	d114      	bne.n	80176e8 <_dtoa_r+0x98>
 80176be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80176c4:	6013      	str	r3, [r2, #0]
 80176c6:	9b00      	ldr	r3, [sp, #0]
 80176c8:	b923      	cbnz	r3, 80176d4 <_dtoa_r+0x84>
 80176ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f000 8542 	beq.w	8018158 <_dtoa_r+0xb08>
 80176d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017984 <_dtoa_r+0x334>
 80176da:	2b00      	cmp	r3, #0
 80176dc:	f000 8544 	beq.w	8018168 <_dtoa_r+0xb18>
 80176e0:	f10b 0303 	add.w	r3, fp, #3
 80176e4:	f000 bd3e 	b.w	8018164 <_dtoa_r+0xb14>
 80176e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80176ec:	2200      	movs	r2, #0
 80176ee:	2300      	movs	r3, #0
 80176f0:	4630      	mov	r0, r6
 80176f2:	4639      	mov	r1, r7
 80176f4:	f7e9 fa00 	bl	8000af8 <__aeabi_dcmpeq>
 80176f8:	4681      	mov	r9, r0
 80176fa:	b168      	cbz	r0, 8017718 <_dtoa_r+0xc8>
 80176fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176fe:	2301      	movs	r3, #1
 8017700:	6013      	str	r3, [r2, #0]
 8017702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017704:	2b00      	cmp	r3, #0
 8017706:	f000 8524 	beq.w	8018152 <_dtoa_r+0xb02>
 801770a:	4b9a      	ldr	r3, [pc, #616]	; (8017974 <_dtoa_r+0x324>)
 801770c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801770e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017712:	6013      	str	r3, [r2, #0]
 8017714:	f000 bd28 	b.w	8018168 <_dtoa_r+0xb18>
 8017718:	aa14      	add	r2, sp, #80	; 0x50
 801771a:	a915      	add	r1, sp, #84	; 0x54
 801771c:	ec47 6b10 	vmov	d0, r6, r7
 8017720:	4620      	mov	r0, r4
 8017722:	f001 fbfb 	bl	8018f1c <__d2b>
 8017726:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801772a:	9004      	str	r0, [sp, #16]
 801772c:	2d00      	cmp	r5, #0
 801772e:	d07c      	beq.n	801782a <_dtoa_r+0x1da>
 8017730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017734:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017738:	46b2      	mov	sl, r6
 801773a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801773e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017742:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017746:	2200      	movs	r2, #0
 8017748:	4b8b      	ldr	r3, [pc, #556]	; (8017978 <_dtoa_r+0x328>)
 801774a:	4650      	mov	r0, sl
 801774c:	4659      	mov	r1, fp
 801774e:	f7e8 fdb3 	bl	80002b8 <__aeabi_dsub>
 8017752:	a381      	add	r3, pc, #516	; (adr r3, 8017958 <_dtoa_r+0x308>)
 8017754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017758:	f7e8 ff66 	bl	8000628 <__aeabi_dmul>
 801775c:	a380      	add	r3, pc, #512	; (adr r3, 8017960 <_dtoa_r+0x310>)
 801775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017762:	f7e8 fdab 	bl	80002bc <__adddf3>
 8017766:	4606      	mov	r6, r0
 8017768:	4628      	mov	r0, r5
 801776a:	460f      	mov	r7, r1
 801776c:	f7e8 fef2 	bl	8000554 <__aeabi_i2d>
 8017770:	a37d      	add	r3, pc, #500	; (adr r3, 8017968 <_dtoa_r+0x318>)
 8017772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017776:	f7e8 ff57 	bl	8000628 <__aeabi_dmul>
 801777a:	4602      	mov	r2, r0
 801777c:	460b      	mov	r3, r1
 801777e:	4630      	mov	r0, r6
 8017780:	4639      	mov	r1, r7
 8017782:	f7e8 fd9b 	bl	80002bc <__adddf3>
 8017786:	4606      	mov	r6, r0
 8017788:	460f      	mov	r7, r1
 801778a:	f7e9 f9fd 	bl	8000b88 <__aeabi_d2iz>
 801778e:	2200      	movs	r2, #0
 8017790:	4682      	mov	sl, r0
 8017792:	2300      	movs	r3, #0
 8017794:	4630      	mov	r0, r6
 8017796:	4639      	mov	r1, r7
 8017798:	f7e9 f9b8 	bl	8000b0c <__aeabi_dcmplt>
 801779c:	b148      	cbz	r0, 80177b2 <_dtoa_r+0x162>
 801779e:	4650      	mov	r0, sl
 80177a0:	f7e8 fed8 	bl	8000554 <__aeabi_i2d>
 80177a4:	4632      	mov	r2, r6
 80177a6:	463b      	mov	r3, r7
 80177a8:	f7e9 f9a6 	bl	8000af8 <__aeabi_dcmpeq>
 80177ac:	b908      	cbnz	r0, 80177b2 <_dtoa_r+0x162>
 80177ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177b2:	f1ba 0f16 	cmp.w	sl, #22
 80177b6:	d859      	bhi.n	801786c <_dtoa_r+0x21c>
 80177b8:	4970      	ldr	r1, [pc, #448]	; (801797c <_dtoa_r+0x32c>)
 80177ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80177be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80177c6:	f7e9 f9bf 	bl	8000b48 <__aeabi_dcmpgt>
 80177ca:	2800      	cmp	r0, #0
 80177cc:	d050      	beq.n	8017870 <_dtoa_r+0x220>
 80177ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177d2:	2300      	movs	r3, #0
 80177d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80177d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177d8:	1b5d      	subs	r5, r3, r5
 80177da:	f1b5 0801 	subs.w	r8, r5, #1
 80177de:	bf49      	itett	mi
 80177e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80177e4:	2300      	movpl	r3, #0
 80177e6:	9305      	strmi	r3, [sp, #20]
 80177e8:	f04f 0800 	movmi.w	r8, #0
 80177ec:	bf58      	it	pl
 80177ee:	9305      	strpl	r3, [sp, #20]
 80177f0:	f1ba 0f00 	cmp.w	sl, #0
 80177f4:	db3e      	blt.n	8017874 <_dtoa_r+0x224>
 80177f6:	2300      	movs	r3, #0
 80177f8:	44d0      	add	r8, sl
 80177fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80177fe:	9307      	str	r3, [sp, #28]
 8017800:	9b06      	ldr	r3, [sp, #24]
 8017802:	2b09      	cmp	r3, #9
 8017804:	f200 8090 	bhi.w	8017928 <_dtoa_r+0x2d8>
 8017808:	2b05      	cmp	r3, #5
 801780a:	bfc4      	itt	gt
 801780c:	3b04      	subgt	r3, #4
 801780e:	9306      	strgt	r3, [sp, #24]
 8017810:	9b06      	ldr	r3, [sp, #24]
 8017812:	f1a3 0302 	sub.w	r3, r3, #2
 8017816:	bfcc      	ite	gt
 8017818:	2500      	movgt	r5, #0
 801781a:	2501      	movle	r5, #1
 801781c:	2b03      	cmp	r3, #3
 801781e:	f200 808f 	bhi.w	8017940 <_dtoa_r+0x2f0>
 8017822:	e8df f003 	tbb	[pc, r3]
 8017826:	7f7d      	.short	0x7f7d
 8017828:	7131      	.short	0x7131
 801782a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801782e:	441d      	add	r5, r3
 8017830:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017834:	2820      	cmp	r0, #32
 8017836:	dd13      	ble.n	8017860 <_dtoa_r+0x210>
 8017838:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801783c:	9b00      	ldr	r3, [sp, #0]
 801783e:	fa08 f800 	lsl.w	r8, r8, r0
 8017842:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017846:	fa23 f000 	lsr.w	r0, r3, r0
 801784a:	ea48 0000 	orr.w	r0, r8, r0
 801784e:	f7e8 fe71 	bl	8000534 <__aeabi_ui2d>
 8017852:	2301      	movs	r3, #1
 8017854:	4682      	mov	sl, r0
 8017856:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801785a:	3d01      	subs	r5, #1
 801785c:	9313      	str	r3, [sp, #76]	; 0x4c
 801785e:	e772      	b.n	8017746 <_dtoa_r+0xf6>
 8017860:	9b00      	ldr	r3, [sp, #0]
 8017862:	f1c0 0020 	rsb	r0, r0, #32
 8017866:	fa03 f000 	lsl.w	r0, r3, r0
 801786a:	e7f0      	b.n	801784e <_dtoa_r+0x1fe>
 801786c:	2301      	movs	r3, #1
 801786e:	e7b1      	b.n	80177d4 <_dtoa_r+0x184>
 8017870:	900f      	str	r0, [sp, #60]	; 0x3c
 8017872:	e7b0      	b.n	80177d6 <_dtoa_r+0x186>
 8017874:	9b05      	ldr	r3, [sp, #20]
 8017876:	eba3 030a 	sub.w	r3, r3, sl
 801787a:	9305      	str	r3, [sp, #20]
 801787c:	f1ca 0300 	rsb	r3, sl, #0
 8017880:	9307      	str	r3, [sp, #28]
 8017882:	2300      	movs	r3, #0
 8017884:	930e      	str	r3, [sp, #56]	; 0x38
 8017886:	e7bb      	b.n	8017800 <_dtoa_r+0x1b0>
 8017888:	2301      	movs	r3, #1
 801788a:	930a      	str	r3, [sp, #40]	; 0x28
 801788c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801788e:	2b00      	cmp	r3, #0
 8017890:	dd59      	ble.n	8017946 <_dtoa_r+0x2f6>
 8017892:	9302      	str	r3, [sp, #8]
 8017894:	4699      	mov	r9, r3
 8017896:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017898:	2200      	movs	r2, #0
 801789a:	6072      	str	r2, [r6, #4]
 801789c:	2204      	movs	r2, #4
 801789e:	f102 0014 	add.w	r0, r2, #20
 80178a2:	4298      	cmp	r0, r3
 80178a4:	6871      	ldr	r1, [r6, #4]
 80178a6:	d953      	bls.n	8017950 <_dtoa_r+0x300>
 80178a8:	4620      	mov	r0, r4
 80178aa:	f000 fff6 	bl	801889a <_Balloc>
 80178ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178b0:	6030      	str	r0, [r6, #0]
 80178b2:	f1b9 0f0e 	cmp.w	r9, #14
 80178b6:	f8d3 b000 	ldr.w	fp, [r3]
 80178ba:	f200 80e6 	bhi.w	8017a8a <_dtoa_r+0x43a>
 80178be:	2d00      	cmp	r5, #0
 80178c0:	f000 80e3 	beq.w	8017a8a <_dtoa_r+0x43a>
 80178c4:	ed9d 7b00 	vldr	d7, [sp]
 80178c8:	f1ba 0f00 	cmp.w	sl, #0
 80178cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80178d0:	dd74      	ble.n	80179bc <_dtoa_r+0x36c>
 80178d2:	4a2a      	ldr	r2, [pc, #168]	; (801797c <_dtoa_r+0x32c>)
 80178d4:	f00a 030f 	and.w	r3, sl, #15
 80178d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80178dc:	ed93 7b00 	vldr	d7, [r3]
 80178e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80178e4:	06f0      	lsls	r0, r6, #27
 80178e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80178ea:	d565      	bpl.n	80179b8 <_dtoa_r+0x368>
 80178ec:	4b24      	ldr	r3, [pc, #144]	; (8017980 <_dtoa_r+0x330>)
 80178ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80178f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80178f6:	f7e8 ffc1 	bl	800087c <__aeabi_ddiv>
 80178fa:	e9cd 0100 	strd	r0, r1, [sp]
 80178fe:	f006 060f 	and.w	r6, r6, #15
 8017902:	2503      	movs	r5, #3
 8017904:	4f1e      	ldr	r7, [pc, #120]	; (8017980 <_dtoa_r+0x330>)
 8017906:	e04c      	b.n	80179a2 <_dtoa_r+0x352>
 8017908:	2301      	movs	r3, #1
 801790a:	930a      	str	r3, [sp, #40]	; 0x28
 801790c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801790e:	4453      	add	r3, sl
 8017910:	f103 0901 	add.w	r9, r3, #1
 8017914:	9302      	str	r3, [sp, #8]
 8017916:	464b      	mov	r3, r9
 8017918:	2b01      	cmp	r3, #1
 801791a:	bfb8      	it	lt
 801791c:	2301      	movlt	r3, #1
 801791e:	e7ba      	b.n	8017896 <_dtoa_r+0x246>
 8017920:	2300      	movs	r3, #0
 8017922:	e7b2      	b.n	801788a <_dtoa_r+0x23a>
 8017924:	2300      	movs	r3, #0
 8017926:	e7f0      	b.n	801790a <_dtoa_r+0x2ba>
 8017928:	2501      	movs	r5, #1
 801792a:	2300      	movs	r3, #0
 801792c:	9306      	str	r3, [sp, #24]
 801792e:	950a      	str	r5, [sp, #40]	; 0x28
 8017930:	f04f 33ff 	mov.w	r3, #4294967295
 8017934:	9302      	str	r3, [sp, #8]
 8017936:	4699      	mov	r9, r3
 8017938:	2200      	movs	r2, #0
 801793a:	2312      	movs	r3, #18
 801793c:	920b      	str	r2, [sp, #44]	; 0x2c
 801793e:	e7aa      	b.n	8017896 <_dtoa_r+0x246>
 8017940:	2301      	movs	r3, #1
 8017942:	930a      	str	r3, [sp, #40]	; 0x28
 8017944:	e7f4      	b.n	8017930 <_dtoa_r+0x2e0>
 8017946:	2301      	movs	r3, #1
 8017948:	9302      	str	r3, [sp, #8]
 801794a:	4699      	mov	r9, r3
 801794c:	461a      	mov	r2, r3
 801794e:	e7f5      	b.n	801793c <_dtoa_r+0x2ec>
 8017950:	3101      	adds	r1, #1
 8017952:	6071      	str	r1, [r6, #4]
 8017954:	0052      	lsls	r2, r2, #1
 8017956:	e7a2      	b.n	801789e <_dtoa_r+0x24e>
 8017958:	636f4361 	.word	0x636f4361
 801795c:	3fd287a7 	.word	0x3fd287a7
 8017960:	8b60c8b3 	.word	0x8b60c8b3
 8017964:	3fc68a28 	.word	0x3fc68a28
 8017968:	509f79fb 	.word	0x509f79fb
 801796c:	3fd34413 	.word	0x3fd34413
 8017970:	7ff00000 	.word	0x7ff00000
 8017974:	0801a64c 	.word	0x0801a64c
 8017978:	3ff80000 	.word	0x3ff80000
 801797c:	0801a550 	.word	0x0801a550
 8017980:	0801a528 	.word	0x0801a528
 8017984:	0801a519 	.word	0x0801a519
 8017988:	07f1      	lsls	r1, r6, #31
 801798a:	d508      	bpl.n	801799e <_dtoa_r+0x34e>
 801798c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017994:	f7e8 fe48 	bl	8000628 <__aeabi_dmul>
 8017998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801799c:	3501      	adds	r5, #1
 801799e:	1076      	asrs	r6, r6, #1
 80179a0:	3708      	adds	r7, #8
 80179a2:	2e00      	cmp	r6, #0
 80179a4:	d1f0      	bne.n	8017988 <_dtoa_r+0x338>
 80179a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80179aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ae:	f7e8 ff65 	bl	800087c <__aeabi_ddiv>
 80179b2:	e9cd 0100 	strd	r0, r1, [sp]
 80179b6:	e01a      	b.n	80179ee <_dtoa_r+0x39e>
 80179b8:	2502      	movs	r5, #2
 80179ba:	e7a3      	b.n	8017904 <_dtoa_r+0x2b4>
 80179bc:	f000 80a0 	beq.w	8017b00 <_dtoa_r+0x4b0>
 80179c0:	f1ca 0600 	rsb	r6, sl, #0
 80179c4:	4b9f      	ldr	r3, [pc, #636]	; (8017c44 <_dtoa_r+0x5f4>)
 80179c6:	4fa0      	ldr	r7, [pc, #640]	; (8017c48 <_dtoa_r+0x5f8>)
 80179c8:	f006 020f 	and.w	r2, r6, #15
 80179cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80179d8:	f7e8 fe26 	bl	8000628 <__aeabi_dmul>
 80179dc:	e9cd 0100 	strd	r0, r1, [sp]
 80179e0:	1136      	asrs	r6, r6, #4
 80179e2:	2300      	movs	r3, #0
 80179e4:	2502      	movs	r5, #2
 80179e6:	2e00      	cmp	r6, #0
 80179e8:	d17f      	bne.n	8017aea <_dtoa_r+0x49a>
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d1e1      	bne.n	80179b2 <_dtoa_r+0x362>
 80179ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	f000 8087 	beq.w	8017b04 <_dtoa_r+0x4b4>
 80179f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80179fa:	2200      	movs	r2, #0
 80179fc:	4b93      	ldr	r3, [pc, #588]	; (8017c4c <_dtoa_r+0x5fc>)
 80179fe:	4630      	mov	r0, r6
 8017a00:	4639      	mov	r1, r7
 8017a02:	f7e9 f883 	bl	8000b0c <__aeabi_dcmplt>
 8017a06:	2800      	cmp	r0, #0
 8017a08:	d07c      	beq.n	8017b04 <_dtoa_r+0x4b4>
 8017a0a:	f1b9 0f00 	cmp.w	r9, #0
 8017a0e:	d079      	beq.n	8017b04 <_dtoa_r+0x4b4>
 8017a10:	9b02      	ldr	r3, [sp, #8]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	dd35      	ble.n	8017a82 <_dtoa_r+0x432>
 8017a16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017a1a:	9308      	str	r3, [sp, #32]
 8017a1c:	4639      	mov	r1, r7
 8017a1e:	2200      	movs	r2, #0
 8017a20:	4b8b      	ldr	r3, [pc, #556]	; (8017c50 <_dtoa_r+0x600>)
 8017a22:	4630      	mov	r0, r6
 8017a24:	f7e8 fe00 	bl	8000628 <__aeabi_dmul>
 8017a28:	e9cd 0100 	strd	r0, r1, [sp]
 8017a2c:	9f02      	ldr	r7, [sp, #8]
 8017a2e:	3501      	adds	r5, #1
 8017a30:	4628      	mov	r0, r5
 8017a32:	f7e8 fd8f 	bl	8000554 <__aeabi_i2d>
 8017a36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a3a:	f7e8 fdf5 	bl	8000628 <__aeabi_dmul>
 8017a3e:	2200      	movs	r2, #0
 8017a40:	4b84      	ldr	r3, [pc, #528]	; (8017c54 <_dtoa_r+0x604>)
 8017a42:	f7e8 fc3b 	bl	80002bc <__adddf3>
 8017a46:	4605      	mov	r5, r0
 8017a48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017a4c:	2f00      	cmp	r7, #0
 8017a4e:	d15d      	bne.n	8017b0c <_dtoa_r+0x4bc>
 8017a50:	2200      	movs	r2, #0
 8017a52:	4b81      	ldr	r3, [pc, #516]	; (8017c58 <_dtoa_r+0x608>)
 8017a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a58:	f7e8 fc2e 	bl	80002b8 <__aeabi_dsub>
 8017a5c:	462a      	mov	r2, r5
 8017a5e:	4633      	mov	r3, r6
 8017a60:	e9cd 0100 	strd	r0, r1, [sp]
 8017a64:	f7e9 f870 	bl	8000b48 <__aeabi_dcmpgt>
 8017a68:	2800      	cmp	r0, #0
 8017a6a:	f040 8288 	bne.w	8017f7e <_dtoa_r+0x92e>
 8017a6e:	462a      	mov	r2, r5
 8017a70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a78:	f7e9 f848 	bl	8000b0c <__aeabi_dcmplt>
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	f040 827c 	bne.w	8017f7a <_dtoa_r+0x92a>
 8017a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a86:	e9cd 2300 	strd	r2, r3, [sp]
 8017a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	f2c0 8150 	blt.w	8017d32 <_dtoa_r+0x6e2>
 8017a92:	f1ba 0f0e 	cmp.w	sl, #14
 8017a96:	f300 814c 	bgt.w	8017d32 <_dtoa_r+0x6e2>
 8017a9a:	4b6a      	ldr	r3, [pc, #424]	; (8017c44 <_dtoa_r+0x5f4>)
 8017a9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017aa0:	ed93 7b00 	vldr	d7, [r3]
 8017aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017aac:	f280 80d8 	bge.w	8017c60 <_dtoa_r+0x610>
 8017ab0:	f1b9 0f00 	cmp.w	r9, #0
 8017ab4:	f300 80d4 	bgt.w	8017c60 <_dtoa_r+0x610>
 8017ab8:	f040 825e 	bne.w	8017f78 <_dtoa_r+0x928>
 8017abc:	2200      	movs	r2, #0
 8017abe:	4b66      	ldr	r3, [pc, #408]	; (8017c58 <_dtoa_r+0x608>)
 8017ac0:	ec51 0b17 	vmov	r0, r1, d7
 8017ac4:	f7e8 fdb0 	bl	8000628 <__aeabi_dmul>
 8017ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017acc:	f7e9 f832 	bl	8000b34 <__aeabi_dcmpge>
 8017ad0:	464f      	mov	r7, r9
 8017ad2:	464e      	mov	r6, r9
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	f040 8234 	bne.w	8017f42 <_dtoa_r+0x8f2>
 8017ada:	2331      	movs	r3, #49	; 0x31
 8017adc:	f10b 0501 	add.w	r5, fp, #1
 8017ae0:	f88b 3000 	strb.w	r3, [fp]
 8017ae4:	f10a 0a01 	add.w	sl, sl, #1
 8017ae8:	e22f      	b.n	8017f4a <_dtoa_r+0x8fa>
 8017aea:	07f2      	lsls	r2, r6, #31
 8017aec:	d505      	bpl.n	8017afa <_dtoa_r+0x4aa>
 8017aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017af2:	f7e8 fd99 	bl	8000628 <__aeabi_dmul>
 8017af6:	3501      	adds	r5, #1
 8017af8:	2301      	movs	r3, #1
 8017afa:	1076      	asrs	r6, r6, #1
 8017afc:	3708      	adds	r7, #8
 8017afe:	e772      	b.n	80179e6 <_dtoa_r+0x396>
 8017b00:	2502      	movs	r5, #2
 8017b02:	e774      	b.n	80179ee <_dtoa_r+0x39e>
 8017b04:	f8cd a020 	str.w	sl, [sp, #32]
 8017b08:	464f      	mov	r7, r9
 8017b0a:	e791      	b.n	8017a30 <_dtoa_r+0x3e0>
 8017b0c:	4b4d      	ldr	r3, [pc, #308]	; (8017c44 <_dtoa_r+0x5f4>)
 8017b0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017b12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d047      	beq.n	8017bac <_dtoa_r+0x55c>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	460b      	mov	r3, r1
 8017b20:	2000      	movs	r0, #0
 8017b22:	494e      	ldr	r1, [pc, #312]	; (8017c5c <_dtoa_r+0x60c>)
 8017b24:	f7e8 feaa 	bl	800087c <__aeabi_ddiv>
 8017b28:	462a      	mov	r2, r5
 8017b2a:	4633      	mov	r3, r6
 8017b2c:	f7e8 fbc4 	bl	80002b8 <__aeabi_dsub>
 8017b30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b34:	465d      	mov	r5, fp
 8017b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b3a:	f7e9 f825 	bl	8000b88 <__aeabi_d2iz>
 8017b3e:	4606      	mov	r6, r0
 8017b40:	f7e8 fd08 	bl	8000554 <__aeabi_i2d>
 8017b44:	4602      	mov	r2, r0
 8017b46:	460b      	mov	r3, r1
 8017b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b4c:	f7e8 fbb4 	bl	80002b8 <__aeabi_dsub>
 8017b50:	3630      	adds	r6, #48	; 0x30
 8017b52:	f805 6b01 	strb.w	r6, [r5], #1
 8017b56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b5a:	e9cd 0100 	strd	r0, r1, [sp]
 8017b5e:	f7e8 ffd5 	bl	8000b0c <__aeabi_dcmplt>
 8017b62:	2800      	cmp	r0, #0
 8017b64:	d163      	bne.n	8017c2e <_dtoa_r+0x5de>
 8017b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	4937      	ldr	r1, [pc, #220]	; (8017c4c <_dtoa_r+0x5fc>)
 8017b6e:	f7e8 fba3 	bl	80002b8 <__aeabi_dsub>
 8017b72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b76:	f7e8 ffc9 	bl	8000b0c <__aeabi_dcmplt>
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	f040 80b7 	bne.w	8017cee <_dtoa_r+0x69e>
 8017b80:	eba5 030b 	sub.w	r3, r5, fp
 8017b84:	429f      	cmp	r7, r3
 8017b86:	f77f af7c 	ble.w	8017a82 <_dtoa_r+0x432>
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	4b30      	ldr	r3, [pc, #192]	; (8017c50 <_dtoa_r+0x600>)
 8017b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b92:	f7e8 fd49 	bl	8000628 <__aeabi_dmul>
 8017b96:	2200      	movs	r2, #0
 8017b98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b9c:	4b2c      	ldr	r3, [pc, #176]	; (8017c50 <_dtoa_r+0x600>)
 8017b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ba2:	f7e8 fd41 	bl	8000628 <__aeabi_dmul>
 8017ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8017baa:	e7c4      	b.n	8017b36 <_dtoa_r+0x4e6>
 8017bac:	462a      	mov	r2, r5
 8017bae:	4633      	mov	r3, r6
 8017bb0:	f7e8 fd3a 	bl	8000628 <__aeabi_dmul>
 8017bb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bb8:	eb0b 0507 	add.w	r5, fp, r7
 8017bbc:	465e      	mov	r6, fp
 8017bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bc2:	f7e8 ffe1 	bl	8000b88 <__aeabi_d2iz>
 8017bc6:	4607      	mov	r7, r0
 8017bc8:	f7e8 fcc4 	bl	8000554 <__aeabi_i2d>
 8017bcc:	3730      	adds	r7, #48	; 0x30
 8017bce:	4602      	mov	r2, r0
 8017bd0:	460b      	mov	r3, r1
 8017bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bd6:	f7e8 fb6f 	bl	80002b8 <__aeabi_dsub>
 8017bda:	f806 7b01 	strb.w	r7, [r6], #1
 8017bde:	42ae      	cmp	r6, r5
 8017be0:	e9cd 0100 	strd	r0, r1, [sp]
 8017be4:	f04f 0200 	mov.w	r2, #0
 8017be8:	d126      	bne.n	8017c38 <_dtoa_r+0x5e8>
 8017bea:	4b1c      	ldr	r3, [pc, #112]	; (8017c5c <_dtoa_r+0x60c>)
 8017bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bf0:	f7e8 fb64 	bl	80002bc <__adddf3>
 8017bf4:	4602      	mov	r2, r0
 8017bf6:	460b      	mov	r3, r1
 8017bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bfc:	f7e8 ffa4 	bl	8000b48 <__aeabi_dcmpgt>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d174      	bne.n	8017cee <_dtoa_r+0x69e>
 8017c04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c08:	2000      	movs	r0, #0
 8017c0a:	4914      	ldr	r1, [pc, #80]	; (8017c5c <_dtoa_r+0x60c>)
 8017c0c:	f7e8 fb54 	bl	80002b8 <__aeabi_dsub>
 8017c10:	4602      	mov	r2, r0
 8017c12:	460b      	mov	r3, r1
 8017c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c18:	f7e8 ff78 	bl	8000b0c <__aeabi_dcmplt>
 8017c1c:	2800      	cmp	r0, #0
 8017c1e:	f43f af30 	beq.w	8017a82 <_dtoa_r+0x432>
 8017c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c26:	2b30      	cmp	r3, #48	; 0x30
 8017c28:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c2c:	d002      	beq.n	8017c34 <_dtoa_r+0x5e4>
 8017c2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017c32:	e04a      	b.n	8017cca <_dtoa_r+0x67a>
 8017c34:	4615      	mov	r5, r2
 8017c36:	e7f4      	b.n	8017c22 <_dtoa_r+0x5d2>
 8017c38:	4b05      	ldr	r3, [pc, #20]	; (8017c50 <_dtoa_r+0x600>)
 8017c3a:	f7e8 fcf5 	bl	8000628 <__aeabi_dmul>
 8017c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8017c42:	e7bc      	b.n	8017bbe <_dtoa_r+0x56e>
 8017c44:	0801a550 	.word	0x0801a550
 8017c48:	0801a528 	.word	0x0801a528
 8017c4c:	3ff00000 	.word	0x3ff00000
 8017c50:	40240000 	.word	0x40240000
 8017c54:	401c0000 	.word	0x401c0000
 8017c58:	40140000 	.word	0x40140000
 8017c5c:	3fe00000 	.word	0x3fe00000
 8017c60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c64:	465d      	mov	r5, fp
 8017c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	4639      	mov	r1, r7
 8017c6e:	f7e8 fe05 	bl	800087c <__aeabi_ddiv>
 8017c72:	f7e8 ff89 	bl	8000b88 <__aeabi_d2iz>
 8017c76:	4680      	mov	r8, r0
 8017c78:	f7e8 fc6c 	bl	8000554 <__aeabi_i2d>
 8017c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c80:	f7e8 fcd2 	bl	8000628 <__aeabi_dmul>
 8017c84:	4602      	mov	r2, r0
 8017c86:	460b      	mov	r3, r1
 8017c88:	4630      	mov	r0, r6
 8017c8a:	4639      	mov	r1, r7
 8017c8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017c90:	f7e8 fb12 	bl	80002b8 <__aeabi_dsub>
 8017c94:	f805 6b01 	strb.w	r6, [r5], #1
 8017c98:	eba5 060b 	sub.w	r6, r5, fp
 8017c9c:	45b1      	cmp	r9, r6
 8017c9e:	4602      	mov	r2, r0
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	d139      	bne.n	8017d18 <_dtoa_r+0x6c8>
 8017ca4:	f7e8 fb0a 	bl	80002bc <__adddf3>
 8017ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cac:	4606      	mov	r6, r0
 8017cae:	460f      	mov	r7, r1
 8017cb0:	f7e8 ff4a 	bl	8000b48 <__aeabi_dcmpgt>
 8017cb4:	b9c8      	cbnz	r0, 8017cea <_dtoa_r+0x69a>
 8017cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cba:	4630      	mov	r0, r6
 8017cbc:	4639      	mov	r1, r7
 8017cbe:	f7e8 ff1b 	bl	8000af8 <__aeabi_dcmpeq>
 8017cc2:	b110      	cbz	r0, 8017cca <_dtoa_r+0x67a>
 8017cc4:	f018 0f01 	tst.w	r8, #1
 8017cc8:	d10f      	bne.n	8017cea <_dtoa_r+0x69a>
 8017cca:	9904      	ldr	r1, [sp, #16]
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f000 fe18 	bl	8018902 <_Bfree>
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cd6:	702b      	strb	r3, [r5, #0]
 8017cd8:	f10a 0301 	add.w	r3, sl, #1
 8017cdc:	6013      	str	r3, [r2, #0]
 8017cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f000 8241 	beq.w	8018168 <_dtoa_r+0xb18>
 8017ce6:	601d      	str	r5, [r3, #0]
 8017ce8:	e23e      	b.n	8018168 <_dtoa_r+0xb18>
 8017cea:	f8cd a020 	str.w	sl, [sp, #32]
 8017cee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017cf2:	2a39      	cmp	r2, #57	; 0x39
 8017cf4:	f105 33ff 	add.w	r3, r5, #4294967295
 8017cf8:	d108      	bne.n	8017d0c <_dtoa_r+0x6bc>
 8017cfa:	459b      	cmp	fp, r3
 8017cfc:	d10a      	bne.n	8017d14 <_dtoa_r+0x6c4>
 8017cfe:	9b08      	ldr	r3, [sp, #32]
 8017d00:	3301      	adds	r3, #1
 8017d02:	9308      	str	r3, [sp, #32]
 8017d04:	2330      	movs	r3, #48	; 0x30
 8017d06:	f88b 3000 	strb.w	r3, [fp]
 8017d0a:	465b      	mov	r3, fp
 8017d0c:	781a      	ldrb	r2, [r3, #0]
 8017d0e:	3201      	adds	r2, #1
 8017d10:	701a      	strb	r2, [r3, #0]
 8017d12:	e78c      	b.n	8017c2e <_dtoa_r+0x5de>
 8017d14:	461d      	mov	r5, r3
 8017d16:	e7ea      	b.n	8017cee <_dtoa_r+0x69e>
 8017d18:	2200      	movs	r2, #0
 8017d1a:	4b9b      	ldr	r3, [pc, #620]	; (8017f88 <_dtoa_r+0x938>)
 8017d1c:	f7e8 fc84 	bl	8000628 <__aeabi_dmul>
 8017d20:	2200      	movs	r2, #0
 8017d22:	2300      	movs	r3, #0
 8017d24:	4606      	mov	r6, r0
 8017d26:	460f      	mov	r7, r1
 8017d28:	f7e8 fee6 	bl	8000af8 <__aeabi_dcmpeq>
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	d09a      	beq.n	8017c66 <_dtoa_r+0x616>
 8017d30:	e7cb      	b.n	8017cca <_dtoa_r+0x67a>
 8017d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d34:	2a00      	cmp	r2, #0
 8017d36:	f000 808b 	beq.w	8017e50 <_dtoa_r+0x800>
 8017d3a:	9a06      	ldr	r2, [sp, #24]
 8017d3c:	2a01      	cmp	r2, #1
 8017d3e:	dc6e      	bgt.n	8017e1e <_dtoa_r+0x7ce>
 8017d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d42:	2a00      	cmp	r2, #0
 8017d44:	d067      	beq.n	8017e16 <_dtoa_r+0x7c6>
 8017d46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017d4a:	9f07      	ldr	r7, [sp, #28]
 8017d4c:	9d05      	ldr	r5, [sp, #20]
 8017d4e:	9a05      	ldr	r2, [sp, #20]
 8017d50:	2101      	movs	r1, #1
 8017d52:	441a      	add	r2, r3
 8017d54:	4620      	mov	r0, r4
 8017d56:	9205      	str	r2, [sp, #20]
 8017d58:	4498      	add	r8, r3
 8017d5a:	f000 feb0 	bl	8018abe <__i2b>
 8017d5e:	4606      	mov	r6, r0
 8017d60:	2d00      	cmp	r5, #0
 8017d62:	dd0c      	ble.n	8017d7e <_dtoa_r+0x72e>
 8017d64:	f1b8 0f00 	cmp.w	r8, #0
 8017d68:	dd09      	ble.n	8017d7e <_dtoa_r+0x72e>
 8017d6a:	4545      	cmp	r5, r8
 8017d6c:	9a05      	ldr	r2, [sp, #20]
 8017d6e:	462b      	mov	r3, r5
 8017d70:	bfa8      	it	ge
 8017d72:	4643      	movge	r3, r8
 8017d74:	1ad2      	subs	r2, r2, r3
 8017d76:	9205      	str	r2, [sp, #20]
 8017d78:	1aed      	subs	r5, r5, r3
 8017d7a:	eba8 0803 	sub.w	r8, r8, r3
 8017d7e:	9b07      	ldr	r3, [sp, #28]
 8017d80:	b1eb      	cbz	r3, 8017dbe <_dtoa_r+0x76e>
 8017d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d067      	beq.n	8017e58 <_dtoa_r+0x808>
 8017d88:	b18f      	cbz	r7, 8017dae <_dtoa_r+0x75e>
 8017d8a:	4631      	mov	r1, r6
 8017d8c:	463a      	mov	r2, r7
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f000 ff34 	bl	8018bfc <__pow5mult>
 8017d94:	9a04      	ldr	r2, [sp, #16]
 8017d96:	4601      	mov	r1, r0
 8017d98:	4606      	mov	r6, r0
 8017d9a:	4620      	mov	r0, r4
 8017d9c:	f000 fe98 	bl	8018ad0 <__multiply>
 8017da0:	9904      	ldr	r1, [sp, #16]
 8017da2:	9008      	str	r0, [sp, #32]
 8017da4:	4620      	mov	r0, r4
 8017da6:	f000 fdac 	bl	8018902 <_Bfree>
 8017daa:	9b08      	ldr	r3, [sp, #32]
 8017dac:	9304      	str	r3, [sp, #16]
 8017dae:	9b07      	ldr	r3, [sp, #28]
 8017db0:	1bda      	subs	r2, r3, r7
 8017db2:	d004      	beq.n	8017dbe <_dtoa_r+0x76e>
 8017db4:	9904      	ldr	r1, [sp, #16]
 8017db6:	4620      	mov	r0, r4
 8017db8:	f000 ff20 	bl	8018bfc <__pow5mult>
 8017dbc:	9004      	str	r0, [sp, #16]
 8017dbe:	2101      	movs	r1, #1
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f000 fe7c 	bl	8018abe <__i2b>
 8017dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017dc8:	4607      	mov	r7, r0
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	f000 81d0 	beq.w	8018170 <_dtoa_r+0xb20>
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	4601      	mov	r1, r0
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f000 ff11 	bl	8018bfc <__pow5mult>
 8017dda:	9b06      	ldr	r3, [sp, #24]
 8017ddc:	2b01      	cmp	r3, #1
 8017dde:	4607      	mov	r7, r0
 8017de0:	dc40      	bgt.n	8017e64 <_dtoa_r+0x814>
 8017de2:	9b00      	ldr	r3, [sp, #0]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d139      	bne.n	8017e5c <_dtoa_r+0x80c>
 8017de8:	9b01      	ldr	r3, [sp, #4]
 8017dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d136      	bne.n	8017e60 <_dtoa_r+0x810>
 8017df2:	9b01      	ldr	r3, [sp, #4]
 8017df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017df8:	0d1b      	lsrs	r3, r3, #20
 8017dfa:	051b      	lsls	r3, r3, #20
 8017dfc:	b12b      	cbz	r3, 8017e0a <_dtoa_r+0x7ba>
 8017dfe:	9b05      	ldr	r3, [sp, #20]
 8017e00:	3301      	adds	r3, #1
 8017e02:	9305      	str	r3, [sp, #20]
 8017e04:	f108 0801 	add.w	r8, r8, #1
 8017e08:	2301      	movs	r3, #1
 8017e0a:	9307      	str	r3, [sp, #28]
 8017e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d12a      	bne.n	8017e68 <_dtoa_r+0x818>
 8017e12:	2001      	movs	r0, #1
 8017e14:	e030      	b.n	8017e78 <_dtoa_r+0x828>
 8017e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017e1c:	e795      	b.n	8017d4a <_dtoa_r+0x6fa>
 8017e1e:	9b07      	ldr	r3, [sp, #28]
 8017e20:	f109 37ff 	add.w	r7, r9, #4294967295
 8017e24:	42bb      	cmp	r3, r7
 8017e26:	bfbf      	itttt	lt
 8017e28:	9b07      	ldrlt	r3, [sp, #28]
 8017e2a:	9707      	strlt	r7, [sp, #28]
 8017e2c:	1afa      	sublt	r2, r7, r3
 8017e2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017e30:	bfbb      	ittet	lt
 8017e32:	189b      	addlt	r3, r3, r2
 8017e34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e36:	1bdf      	subge	r7, r3, r7
 8017e38:	2700      	movlt	r7, #0
 8017e3a:	f1b9 0f00 	cmp.w	r9, #0
 8017e3e:	bfb5      	itete	lt
 8017e40:	9b05      	ldrlt	r3, [sp, #20]
 8017e42:	9d05      	ldrge	r5, [sp, #20]
 8017e44:	eba3 0509 	sublt.w	r5, r3, r9
 8017e48:	464b      	movge	r3, r9
 8017e4a:	bfb8      	it	lt
 8017e4c:	2300      	movlt	r3, #0
 8017e4e:	e77e      	b.n	8017d4e <_dtoa_r+0x6fe>
 8017e50:	9f07      	ldr	r7, [sp, #28]
 8017e52:	9d05      	ldr	r5, [sp, #20]
 8017e54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017e56:	e783      	b.n	8017d60 <_dtoa_r+0x710>
 8017e58:	9a07      	ldr	r2, [sp, #28]
 8017e5a:	e7ab      	b.n	8017db4 <_dtoa_r+0x764>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	e7d4      	b.n	8017e0a <_dtoa_r+0x7ba>
 8017e60:	9b00      	ldr	r3, [sp, #0]
 8017e62:	e7d2      	b.n	8017e0a <_dtoa_r+0x7ba>
 8017e64:	2300      	movs	r3, #0
 8017e66:	9307      	str	r3, [sp, #28]
 8017e68:	693b      	ldr	r3, [r7, #16]
 8017e6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017e6e:	6918      	ldr	r0, [r3, #16]
 8017e70:	f000 fdd7 	bl	8018a22 <__hi0bits>
 8017e74:	f1c0 0020 	rsb	r0, r0, #32
 8017e78:	4440      	add	r0, r8
 8017e7a:	f010 001f 	ands.w	r0, r0, #31
 8017e7e:	d047      	beq.n	8017f10 <_dtoa_r+0x8c0>
 8017e80:	f1c0 0320 	rsb	r3, r0, #32
 8017e84:	2b04      	cmp	r3, #4
 8017e86:	dd3b      	ble.n	8017f00 <_dtoa_r+0x8b0>
 8017e88:	9b05      	ldr	r3, [sp, #20]
 8017e8a:	f1c0 001c 	rsb	r0, r0, #28
 8017e8e:	4403      	add	r3, r0
 8017e90:	9305      	str	r3, [sp, #20]
 8017e92:	4405      	add	r5, r0
 8017e94:	4480      	add	r8, r0
 8017e96:	9b05      	ldr	r3, [sp, #20]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	dd05      	ble.n	8017ea8 <_dtoa_r+0x858>
 8017e9c:	461a      	mov	r2, r3
 8017e9e:	9904      	ldr	r1, [sp, #16]
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f000 fef9 	bl	8018c98 <__lshift>
 8017ea6:	9004      	str	r0, [sp, #16]
 8017ea8:	f1b8 0f00 	cmp.w	r8, #0
 8017eac:	dd05      	ble.n	8017eba <_dtoa_r+0x86a>
 8017eae:	4639      	mov	r1, r7
 8017eb0:	4642      	mov	r2, r8
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f000 fef0 	bl	8018c98 <__lshift>
 8017eb8:	4607      	mov	r7, r0
 8017eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ebc:	b353      	cbz	r3, 8017f14 <_dtoa_r+0x8c4>
 8017ebe:	4639      	mov	r1, r7
 8017ec0:	9804      	ldr	r0, [sp, #16]
 8017ec2:	f000 ff3d 	bl	8018d40 <__mcmp>
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	da24      	bge.n	8017f14 <_dtoa_r+0x8c4>
 8017eca:	2300      	movs	r3, #0
 8017ecc:	220a      	movs	r2, #10
 8017ece:	9904      	ldr	r1, [sp, #16]
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f000 fd2d 	bl	8018930 <__multadd>
 8017ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ed8:	9004      	str	r0, [sp, #16]
 8017eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	f000 814d 	beq.w	801817e <_dtoa_r+0xb2e>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	4631      	mov	r1, r6
 8017ee8:	220a      	movs	r2, #10
 8017eea:	4620      	mov	r0, r4
 8017eec:	f000 fd20 	bl	8018930 <__multadd>
 8017ef0:	9b02      	ldr	r3, [sp, #8]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	4606      	mov	r6, r0
 8017ef6:	dc4f      	bgt.n	8017f98 <_dtoa_r+0x948>
 8017ef8:	9b06      	ldr	r3, [sp, #24]
 8017efa:	2b02      	cmp	r3, #2
 8017efc:	dd4c      	ble.n	8017f98 <_dtoa_r+0x948>
 8017efe:	e011      	b.n	8017f24 <_dtoa_r+0x8d4>
 8017f00:	d0c9      	beq.n	8017e96 <_dtoa_r+0x846>
 8017f02:	9a05      	ldr	r2, [sp, #20]
 8017f04:	331c      	adds	r3, #28
 8017f06:	441a      	add	r2, r3
 8017f08:	9205      	str	r2, [sp, #20]
 8017f0a:	441d      	add	r5, r3
 8017f0c:	4498      	add	r8, r3
 8017f0e:	e7c2      	b.n	8017e96 <_dtoa_r+0x846>
 8017f10:	4603      	mov	r3, r0
 8017f12:	e7f6      	b.n	8017f02 <_dtoa_r+0x8b2>
 8017f14:	f1b9 0f00 	cmp.w	r9, #0
 8017f18:	dc38      	bgt.n	8017f8c <_dtoa_r+0x93c>
 8017f1a:	9b06      	ldr	r3, [sp, #24]
 8017f1c:	2b02      	cmp	r3, #2
 8017f1e:	dd35      	ble.n	8017f8c <_dtoa_r+0x93c>
 8017f20:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f24:	9b02      	ldr	r3, [sp, #8]
 8017f26:	b963      	cbnz	r3, 8017f42 <_dtoa_r+0x8f2>
 8017f28:	4639      	mov	r1, r7
 8017f2a:	2205      	movs	r2, #5
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	f000 fcff 	bl	8018930 <__multadd>
 8017f32:	4601      	mov	r1, r0
 8017f34:	4607      	mov	r7, r0
 8017f36:	9804      	ldr	r0, [sp, #16]
 8017f38:	f000 ff02 	bl	8018d40 <__mcmp>
 8017f3c:	2800      	cmp	r0, #0
 8017f3e:	f73f adcc 	bgt.w	8017ada <_dtoa_r+0x48a>
 8017f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f44:	465d      	mov	r5, fp
 8017f46:	ea6f 0a03 	mvn.w	sl, r3
 8017f4a:	f04f 0900 	mov.w	r9, #0
 8017f4e:	4639      	mov	r1, r7
 8017f50:	4620      	mov	r0, r4
 8017f52:	f000 fcd6 	bl	8018902 <_Bfree>
 8017f56:	2e00      	cmp	r6, #0
 8017f58:	f43f aeb7 	beq.w	8017cca <_dtoa_r+0x67a>
 8017f5c:	f1b9 0f00 	cmp.w	r9, #0
 8017f60:	d005      	beq.n	8017f6e <_dtoa_r+0x91e>
 8017f62:	45b1      	cmp	r9, r6
 8017f64:	d003      	beq.n	8017f6e <_dtoa_r+0x91e>
 8017f66:	4649      	mov	r1, r9
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f000 fcca 	bl	8018902 <_Bfree>
 8017f6e:	4631      	mov	r1, r6
 8017f70:	4620      	mov	r0, r4
 8017f72:	f000 fcc6 	bl	8018902 <_Bfree>
 8017f76:	e6a8      	b.n	8017cca <_dtoa_r+0x67a>
 8017f78:	2700      	movs	r7, #0
 8017f7a:	463e      	mov	r6, r7
 8017f7c:	e7e1      	b.n	8017f42 <_dtoa_r+0x8f2>
 8017f7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017f82:	463e      	mov	r6, r7
 8017f84:	e5a9      	b.n	8017ada <_dtoa_r+0x48a>
 8017f86:	bf00      	nop
 8017f88:	40240000 	.word	0x40240000
 8017f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	f000 80fa 	beq.w	801818c <_dtoa_r+0xb3c>
 8017f98:	2d00      	cmp	r5, #0
 8017f9a:	dd05      	ble.n	8017fa8 <_dtoa_r+0x958>
 8017f9c:	4631      	mov	r1, r6
 8017f9e:	462a      	mov	r2, r5
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f000 fe79 	bl	8018c98 <__lshift>
 8017fa6:	4606      	mov	r6, r0
 8017fa8:	9b07      	ldr	r3, [sp, #28]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d04c      	beq.n	8018048 <_dtoa_r+0x9f8>
 8017fae:	6871      	ldr	r1, [r6, #4]
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fc72 	bl	801889a <_Balloc>
 8017fb6:	6932      	ldr	r2, [r6, #16]
 8017fb8:	3202      	adds	r2, #2
 8017fba:	4605      	mov	r5, r0
 8017fbc:	0092      	lsls	r2, r2, #2
 8017fbe:	f106 010c 	add.w	r1, r6, #12
 8017fc2:	300c      	adds	r0, #12
 8017fc4:	f000 fc5e 	bl	8018884 <memcpy>
 8017fc8:	2201      	movs	r2, #1
 8017fca:	4629      	mov	r1, r5
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f000 fe63 	bl	8018c98 <__lshift>
 8017fd2:	9b00      	ldr	r3, [sp, #0]
 8017fd4:	f8cd b014 	str.w	fp, [sp, #20]
 8017fd8:	f003 0301 	and.w	r3, r3, #1
 8017fdc:	46b1      	mov	r9, r6
 8017fde:	9307      	str	r3, [sp, #28]
 8017fe0:	4606      	mov	r6, r0
 8017fe2:	4639      	mov	r1, r7
 8017fe4:	9804      	ldr	r0, [sp, #16]
 8017fe6:	f7ff faa5 	bl	8017534 <quorem>
 8017fea:	4649      	mov	r1, r9
 8017fec:	4605      	mov	r5, r0
 8017fee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017ff2:	9804      	ldr	r0, [sp, #16]
 8017ff4:	f000 fea4 	bl	8018d40 <__mcmp>
 8017ff8:	4632      	mov	r2, r6
 8017ffa:	9000      	str	r0, [sp, #0]
 8017ffc:	4639      	mov	r1, r7
 8017ffe:	4620      	mov	r0, r4
 8018000:	f000 feb8 	bl	8018d74 <__mdiff>
 8018004:	68c3      	ldr	r3, [r0, #12]
 8018006:	4602      	mov	r2, r0
 8018008:	bb03      	cbnz	r3, 801804c <_dtoa_r+0x9fc>
 801800a:	4601      	mov	r1, r0
 801800c:	9008      	str	r0, [sp, #32]
 801800e:	9804      	ldr	r0, [sp, #16]
 8018010:	f000 fe96 	bl	8018d40 <__mcmp>
 8018014:	9a08      	ldr	r2, [sp, #32]
 8018016:	4603      	mov	r3, r0
 8018018:	4611      	mov	r1, r2
 801801a:	4620      	mov	r0, r4
 801801c:	9308      	str	r3, [sp, #32]
 801801e:	f000 fc70 	bl	8018902 <_Bfree>
 8018022:	9b08      	ldr	r3, [sp, #32]
 8018024:	b9a3      	cbnz	r3, 8018050 <_dtoa_r+0xa00>
 8018026:	9a06      	ldr	r2, [sp, #24]
 8018028:	b992      	cbnz	r2, 8018050 <_dtoa_r+0xa00>
 801802a:	9a07      	ldr	r2, [sp, #28]
 801802c:	b982      	cbnz	r2, 8018050 <_dtoa_r+0xa00>
 801802e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018032:	d029      	beq.n	8018088 <_dtoa_r+0xa38>
 8018034:	9b00      	ldr	r3, [sp, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	dd01      	ble.n	801803e <_dtoa_r+0x9ee>
 801803a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801803e:	9b05      	ldr	r3, [sp, #20]
 8018040:	1c5d      	adds	r5, r3, #1
 8018042:	f883 8000 	strb.w	r8, [r3]
 8018046:	e782      	b.n	8017f4e <_dtoa_r+0x8fe>
 8018048:	4630      	mov	r0, r6
 801804a:	e7c2      	b.n	8017fd2 <_dtoa_r+0x982>
 801804c:	2301      	movs	r3, #1
 801804e:	e7e3      	b.n	8018018 <_dtoa_r+0x9c8>
 8018050:	9a00      	ldr	r2, [sp, #0]
 8018052:	2a00      	cmp	r2, #0
 8018054:	db04      	blt.n	8018060 <_dtoa_r+0xa10>
 8018056:	d125      	bne.n	80180a4 <_dtoa_r+0xa54>
 8018058:	9a06      	ldr	r2, [sp, #24]
 801805a:	bb1a      	cbnz	r2, 80180a4 <_dtoa_r+0xa54>
 801805c:	9a07      	ldr	r2, [sp, #28]
 801805e:	bb0a      	cbnz	r2, 80180a4 <_dtoa_r+0xa54>
 8018060:	2b00      	cmp	r3, #0
 8018062:	ddec      	ble.n	801803e <_dtoa_r+0x9ee>
 8018064:	2201      	movs	r2, #1
 8018066:	9904      	ldr	r1, [sp, #16]
 8018068:	4620      	mov	r0, r4
 801806a:	f000 fe15 	bl	8018c98 <__lshift>
 801806e:	4639      	mov	r1, r7
 8018070:	9004      	str	r0, [sp, #16]
 8018072:	f000 fe65 	bl	8018d40 <__mcmp>
 8018076:	2800      	cmp	r0, #0
 8018078:	dc03      	bgt.n	8018082 <_dtoa_r+0xa32>
 801807a:	d1e0      	bne.n	801803e <_dtoa_r+0x9ee>
 801807c:	f018 0f01 	tst.w	r8, #1
 8018080:	d0dd      	beq.n	801803e <_dtoa_r+0x9ee>
 8018082:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018086:	d1d8      	bne.n	801803a <_dtoa_r+0x9ea>
 8018088:	9b05      	ldr	r3, [sp, #20]
 801808a:	9a05      	ldr	r2, [sp, #20]
 801808c:	1c5d      	adds	r5, r3, #1
 801808e:	2339      	movs	r3, #57	; 0x39
 8018090:	7013      	strb	r3, [r2, #0]
 8018092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018096:	2b39      	cmp	r3, #57	; 0x39
 8018098:	f105 32ff 	add.w	r2, r5, #4294967295
 801809c:	d04f      	beq.n	801813e <_dtoa_r+0xaee>
 801809e:	3301      	adds	r3, #1
 80180a0:	7013      	strb	r3, [r2, #0]
 80180a2:	e754      	b.n	8017f4e <_dtoa_r+0x8fe>
 80180a4:	9a05      	ldr	r2, [sp, #20]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	f102 0501 	add.w	r5, r2, #1
 80180ac:	dd06      	ble.n	80180bc <_dtoa_r+0xa6c>
 80180ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180b2:	d0e9      	beq.n	8018088 <_dtoa_r+0xa38>
 80180b4:	f108 0801 	add.w	r8, r8, #1
 80180b8:	9b05      	ldr	r3, [sp, #20]
 80180ba:	e7c2      	b.n	8018042 <_dtoa_r+0x9f2>
 80180bc:	9a02      	ldr	r2, [sp, #8]
 80180be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80180c2:	eba5 030b 	sub.w	r3, r5, fp
 80180c6:	4293      	cmp	r3, r2
 80180c8:	d021      	beq.n	801810e <_dtoa_r+0xabe>
 80180ca:	2300      	movs	r3, #0
 80180cc:	220a      	movs	r2, #10
 80180ce:	9904      	ldr	r1, [sp, #16]
 80180d0:	4620      	mov	r0, r4
 80180d2:	f000 fc2d 	bl	8018930 <__multadd>
 80180d6:	45b1      	cmp	r9, r6
 80180d8:	9004      	str	r0, [sp, #16]
 80180da:	f04f 0300 	mov.w	r3, #0
 80180de:	f04f 020a 	mov.w	r2, #10
 80180e2:	4649      	mov	r1, r9
 80180e4:	4620      	mov	r0, r4
 80180e6:	d105      	bne.n	80180f4 <_dtoa_r+0xaa4>
 80180e8:	f000 fc22 	bl	8018930 <__multadd>
 80180ec:	4681      	mov	r9, r0
 80180ee:	4606      	mov	r6, r0
 80180f0:	9505      	str	r5, [sp, #20]
 80180f2:	e776      	b.n	8017fe2 <_dtoa_r+0x992>
 80180f4:	f000 fc1c 	bl	8018930 <__multadd>
 80180f8:	4631      	mov	r1, r6
 80180fa:	4681      	mov	r9, r0
 80180fc:	2300      	movs	r3, #0
 80180fe:	220a      	movs	r2, #10
 8018100:	4620      	mov	r0, r4
 8018102:	f000 fc15 	bl	8018930 <__multadd>
 8018106:	4606      	mov	r6, r0
 8018108:	e7f2      	b.n	80180f0 <_dtoa_r+0xaa0>
 801810a:	f04f 0900 	mov.w	r9, #0
 801810e:	2201      	movs	r2, #1
 8018110:	9904      	ldr	r1, [sp, #16]
 8018112:	4620      	mov	r0, r4
 8018114:	f000 fdc0 	bl	8018c98 <__lshift>
 8018118:	4639      	mov	r1, r7
 801811a:	9004      	str	r0, [sp, #16]
 801811c:	f000 fe10 	bl	8018d40 <__mcmp>
 8018120:	2800      	cmp	r0, #0
 8018122:	dcb6      	bgt.n	8018092 <_dtoa_r+0xa42>
 8018124:	d102      	bne.n	801812c <_dtoa_r+0xadc>
 8018126:	f018 0f01 	tst.w	r8, #1
 801812a:	d1b2      	bne.n	8018092 <_dtoa_r+0xa42>
 801812c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018130:	2b30      	cmp	r3, #48	; 0x30
 8018132:	f105 32ff 	add.w	r2, r5, #4294967295
 8018136:	f47f af0a 	bne.w	8017f4e <_dtoa_r+0x8fe>
 801813a:	4615      	mov	r5, r2
 801813c:	e7f6      	b.n	801812c <_dtoa_r+0xadc>
 801813e:	4593      	cmp	fp, r2
 8018140:	d105      	bne.n	801814e <_dtoa_r+0xafe>
 8018142:	2331      	movs	r3, #49	; 0x31
 8018144:	f10a 0a01 	add.w	sl, sl, #1
 8018148:	f88b 3000 	strb.w	r3, [fp]
 801814c:	e6ff      	b.n	8017f4e <_dtoa_r+0x8fe>
 801814e:	4615      	mov	r5, r2
 8018150:	e79f      	b.n	8018092 <_dtoa_r+0xa42>
 8018152:	f8df b064 	ldr.w	fp, [pc, #100]	; 80181b8 <_dtoa_r+0xb68>
 8018156:	e007      	b.n	8018168 <_dtoa_r+0xb18>
 8018158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801815a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80181bc <_dtoa_r+0xb6c>
 801815e:	b11b      	cbz	r3, 8018168 <_dtoa_r+0xb18>
 8018160:	f10b 0308 	add.w	r3, fp, #8
 8018164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018166:	6013      	str	r3, [r2, #0]
 8018168:	4658      	mov	r0, fp
 801816a:	b017      	add	sp, #92	; 0x5c
 801816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018170:	9b06      	ldr	r3, [sp, #24]
 8018172:	2b01      	cmp	r3, #1
 8018174:	f77f ae35 	ble.w	8017de2 <_dtoa_r+0x792>
 8018178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801817a:	9307      	str	r3, [sp, #28]
 801817c:	e649      	b.n	8017e12 <_dtoa_r+0x7c2>
 801817e:	9b02      	ldr	r3, [sp, #8]
 8018180:	2b00      	cmp	r3, #0
 8018182:	dc03      	bgt.n	801818c <_dtoa_r+0xb3c>
 8018184:	9b06      	ldr	r3, [sp, #24]
 8018186:	2b02      	cmp	r3, #2
 8018188:	f73f aecc 	bgt.w	8017f24 <_dtoa_r+0x8d4>
 801818c:	465d      	mov	r5, fp
 801818e:	4639      	mov	r1, r7
 8018190:	9804      	ldr	r0, [sp, #16]
 8018192:	f7ff f9cf 	bl	8017534 <quorem>
 8018196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801819a:	f805 8b01 	strb.w	r8, [r5], #1
 801819e:	9a02      	ldr	r2, [sp, #8]
 80181a0:	eba5 030b 	sub.w	r3, r5, fp
 80181a4:	429a      	cmp	r2, r3
 80181a6:	ddb0      	ble.n	801810a <_dtoa_r+0xaba>
 80181a8:	2300      	movs	r3, #0
 80181aa:	220a      	movs	r2, #10
 80181ac:	9904      	ldr	r1, [sp, #16]
 80181ae:	4620      	mov	r0, r4
 80181b0:	f000 fbbe 	bl	8018930 <__multadd>
 80181b4:	9004      	str	r0, [sp, #16]
 80181b6:	e7ea      	b.n	801818e <_dtoa_r+0xb3e>
 80181b8:	0801a64b 	.word	0x0801a64b
 80181bc:	0801a510 	.word	0x0801a510

080181c0 <rshift>:
 80181c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181c2:	6906      	ldr	r6, [r0, #16]
 80181c4:	114b      	asrs	r3, r1, #5
 80181c6:	429e      	cmp	r6, r3
 80181c8:	f100 0414 	add.w	r4, r0, #20
 80181cc:	dd30      	ble.n	8018230 <rshift+0x70>
 80181ce:	f011 011f 	ands.w	r1, r1, #31
 80181d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80181d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80181da:	d108      	bne.n	80181ee <rshift+0x2e>
 80181dc:	4621      	mov	r1, r4
 80181de:	42b2      	cmp	r2, r6
 80181e0:	460b      	mov	r3, r1
 80181e2:	d211      	bcs.n	8018208 <rshift+0x48>
 80181e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80181e8:	f841 3b04 	str.w	r3, [r1], #4
 80181ec:	e7f7      	b.n	80181de <rshift+0x1e>
 80181ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80181f2:	f1c1 0c20 	rsb	ip, r1, #32
 80181f6:	40cd      	lsrs	r5, r1
 80181f8:	3204      	adds	r2, #4
 80181fa:	4623      	mov	r3, r4
 80181fc:	42b2      	cmp	r2, r6
 80181fe:	4617      	mov	r7, r2
 8018200:	d30c      	bcc.n	801821c <rshift+0x5c>
 8018202:	601d      	str	r5, [r3, #0]
 8018204:	b105      	cbz	r5, 8018208 <rshift+0x48>
 8018206:	3304      	adds	r3, #4
 8018208:	1b1a      	subs	r2, r3, r4
 801820a:	42a3      	cmp	r3, r4
 801820c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018210:	bf08      	it	eq
 8018212:	2300      	moveq	r3, #0
 8018214:	6102      	str	r2, [r0, #16]
 8018216:	bf08      	it	eq
 8018218:	6143      	streq	r3, [r0, #20]
 801821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801821c:	683f      	ldr	r7, [r7, #0]
 801821e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018222:	433d      	orrs	r5, r7
 8018224:	f843 5b04 	str.w	r5, [r3], #4
 8018228:	f852 5b04 	ldr.w	r5, [r2], #4
 801822c:	40cd      	lsrs	r5, r1
 801822e:	e7e5      	b.n	80181fc <rshift+0x3c>
 8018230:	4623      	mov	r3, r4
 8018232:	e7e9      	b.n	8018208 <rshift+0x48>

08018234 <__hexdig_fun>:
 8018234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018238:	2b09      	cmp	r3, #9
 801823a:	d802      	bhi.n	8018242 <__hexdig_fun+0xe>
 801823c:	3820      	subs	r0, #32
 801823e:	b2c0      	uxtb	r0, r0
 8018240:	4770      	bx	lr
 8018242:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018246:	2b05      	cmp	r3, #5
 8018248:	d801      	bhi.n	801824e <__hexdig_fun+0x1a>
 801824a:	3847      	subs	r0, #71	; 0x47
 801824c:	e7f7      	b.n	801823e <__hexdig_fun+0xa>
 801824e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018252:	2b05      	cmp	r3, #5
 8018254:	d801      	bhi.n	801825a <__hexdig_fun+0x26>
 8018256:	3827      	subs	r0, #39	; 0x27
 8018258:	e7f1      	b.n	801823e <__hexdig_fun+0xa>
 801825a:	2000      	movs	r0, #0
 801825c:	4770      	bx	lr

0801825e <__gethex>:
 801825e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018262:	b08b      	sub	sp, #44	; 0x2c
 8018264:	468a      	mov	sl, r1
 8018266:	9002      	str	r0, [sp, #8]
 8018268:	9816      	ldr	r0, [sp, #88]	; 0x58
 801826a:	9306      	str	r3, [sp, #24]
 801826c:	4690      	mov	r8, r2
 801826e:	f000 fadf 	bl	8018830 <__localeconv_l>
 8018272:	6803      	ldr	r3, [r0, #0]
 8018274:	9303      	str	r3, [sp, #12]
 8018276:	4618      	mov	r0, r3
 8018278:	f7e7 ffc2 	bl	8000200 <strlen>
 801827c:	9b03      	ldr	r3, [sp, #12]
 801827e:	9001      	str	r0, [sp, #4]
 8018280:	4403      	add	r3, r0
 8018282:	f04f 0b00 	mov.w	fp, #0
 8018286:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801828a:	9307      	str	r3, [sp, #28]
 801828c:	f8da 3000 	ldr.w	r3, [sl]
 8018290:	3302      	adds	r3, #2
 8018292:	461f      	mov	r7, r3
 8018294:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018298:	2830      	cmp	r0, #48	; 0x30
 801829a:	d06c      	beq.n	8018376 <__gethex+0x118>
 801829c:	f7ff ffca 	bl	8018234 <__hexdig_fun>
 80182a0:	4604      	mov	r4, r0
 80182a2:	2800      	cmp	r0, #0
 80182a4:	d16a      	bne.n	801837c <__gethex+0x11e>
 80182a6:	9a01      	ldr	r2, [sp, #4]
 80182a8:	9903      	ldr	r1, [sp, #12]
 80182aa:	4638      	mov	r0, r7
 80182ac:	f001 fc40 	bl	8019b30 <strncmp>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	d166      	bne.n	8018382 <__gethex+0x124>
 80182b4:	9b01      	ldr	r3, [sp, #4]
 80182b6:	5cf8      	ldrb	r0, [r7, r3]
 80182b8:	18fe      	adds	r6, r7, r3
 80182ba:	f7ff ffbb 	bl	8018234 <__hexdig_fun>
 80182be:	2800      	cmp	r0, #0
 80182c0:	d062      	beq.n	8018388 <__gethex+0x12a>
 80182c2:	4633      	mov	r3, r6
 80182c4:	7818      	ldrb	r0, [r3, #0]
 80182c6:	2830      	cmp	r0, #48	; 0x30
 80182c8:	461f      	mov	r7, r3
 80182ca:	f103 0301 	add.w	r3, r3, #1
 80182ce:	d0f9      	beq.n	80182c4 <__gethex+0x66>
 80182d0:	f7ff ffb0 	bl	8018234 <__hexdig_fun>
 80182d4:	fab0 f580 	clz	r5, r0
 80182d8:	096d      	lsrs	r5, r5, #5
 80182da:	4634      	mov	r4, r6
 80182dc:	f04f 0b01 	mov.w	fp, #1
 80182e0:	463a      	mov	r2, r7
 80182e2:	4616      	mov	r6, r2
 80182e4:	3201      	adds	r2, #1
 80182e6:	7830      	ldrb	r0, [r6, #0]
 80182e8:	f7ff ffa4 	bl	8018234 <__hexdig_fun>
 80182ec:	2800      	cmp	r0, #0
 80182ee:	d1f8      	bne.n	80182e2 <__gethex+0x84>
 80182f0:	9a01      	ldr	r2, [sp, #4]
 80182f2:	9903      	ldr	r1, [sp, #12]
 80182f4:	4630      	mov	r0, r6
 80182f6:	f001 fc1b 	bl	8019b30 <strncmp>
 80182fa:	b950      	cbnz	r0, 8018312 <__gethex+0xb4>
 80182fc:	b954      	cbnz	r4, 8018314 <__gethex+0xb6>
 80182fe:	9b01      	ldr	r3, [sp, #4]
 8018300:	18f4      	adds	r4, r6, r3
 8018302:	4622      	mov	r2, r4
 8018304:	4616      	mov	r6, r2
 8018306:	3201      	adds	r2, #1
 8018308:	7830      	ldrb	r0, [r6, #0]
 801830a:	f7ff ff93 	bl	8018234 <__hexdig_fun>
 801830e:	2800      	cmp	r0, #0
 8018310:	d1f8      	bne.n	8018304 <__gethex+0xa6>
 8018312:	b10c      	cbz	r4, 8018318 <__gethex+0xba>
 8018314:	1ba4      	subs	r4, r4, r6
 8018316:	00a4      	lsls	r4, r4, #2
 8018318:	7833      	ldrb	r3, [r6, #0]
 801831a:	2b50      	cmp	r3, #80	; 0x50
 801831c:	d001      	beq.n	8018322 <__gethex+0xc4>
 801831e:	2b70      	cmp	r3, #112	; 0x70
 8018320:	d140      	bne.n	80183a4 <__gethex+0x146>
 8018322:	7873      	ldrb	r3, [r6, #1]
 8018324:	2b2b      	cmp	r3, #43	; 0x2b
 8018326:	d031      	beq.n	801838c <__gethex+0x12e>
 8018328:	2b2d      	cmp	r3, #45	; 0x2d
 801832a:	d033      	beq.n	8018394 <__gethex+0x136>
 801832c:	1c71      	adds	r1, r6, #1
 801832e:	f04f 0900 	mov.w	r9, #0
 8018332:	7808      	ldrb	r0, [r1, #0]
 8018334:	f7ff ff7e 	bl	8018234 <__hexdig_fun>
 8018338:	1e43      	subs	r3, r0, #1
 801833a:	b2db      	uxtb	r3, r3
 801833c:	2b18      	cmp	r3, #24
 801833e:	d831      	bhi.n	80183a4 <__gethex+0x146>
 8018340:	f1a0 0210 	sub.w	r2, r0, #16
 8018344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018348:	f7ff ff74 	bl	8018234 <__hexdig_fun>
 801834c:	1e43      	subs	r3, r0, #1
 801834e:	b2db      	uxtb	r3, r3
 8018350:	2b18      	cmp	r3, #24
 8018352:	d922      	bls.n	801839a <__gethex+0x13c>
 8018354:	f1b9 0f00 	cmp.w	r9, #0
 8018358:	d000      	beq.n	801835c <__gethex+0xfe>
 801835a:	4252      	negs	r2, r2
 801835c:	4414      	add	r4, r2
 801835e:	f8ca 1000 	str.w	r1, [sl]
 8018362:	b30d      	cbz	r5, 80183a8 <__gethex+0x14a>
 8018364:	f1bb 0f00 	cmp.w	fp, #0
 8018368:	bf0c      	ite	eq
 801836a:	2706      	moveq	r7, #6
 801836c:	2700      	movne	r7, #0
 801836e:	4638      	mov	r0, r7
 8018370:	b00b      	add	sp, #44	; 0x2c
 8018372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018376:	f10b 0b01 	add.w	fp, fp, #1
 801837a:	e78a      	b.n	8018292 <__gethex+0x34>
 801837c:	2500      	movs	r5, #0
 801837e:	462c      	mov	r4, r5
 8018380:	e7ae      	b.n	80182e0 <__gethex+0x82>
 8018382:	463e      	mov	r6, r7
 8018384:	2501      	movs	r5, #1
 8018386:	e7c7      	b.n	8018318 <__gethex+0xba>
 8018388:	4604      	mov	r4, r0
 801838a:	e7fb      	b.n	8018384 <__gethex+0x126>
 801838c:	f04f 0900 	mov.w	r9, #0
 8018390:	1cb1      	adds	r1, r6, #2
 8018392:	e7ce      	b.n	8018332 <__gethex+0xd4>
 8018394:	f04f 0901 	mov.w	r9, #1
 8018398:	e7fa      	b.n	8018390 <__gethex+0x132>
 801839a:	230a      	movs	r3, #10
 801839c:	fb03 0202 	mla	r2, r3, r2, r0
 80183a0:	3a10      	subs	r2, #16
 80183a2:	e7cf      	b.n	8018344 <__gethex+0xe6>
 80183a4:	4631      	mov	r1, r6
 80183a6:	e7da      	b.n	801835e <__gethex+0x100>
 80183a8:	1bf3      	subs	r3, r6, r7
 80183aa:	3b01      	subs	r3, #1
 80183ac:	4629      	mov	r1, r5
 80183ae:	2b07      	cmp	r3, #7
 80183b0:	dc49      	bgt.n	8018446 <__gethex+0x1e8>
 80183b2:	9802      	ldr	r0, [sp, #8]
 80183b4:	f000 fa71 	bl	801889a <_Balloc>
 80183b8:	9b01      	ldr	r3, [sp, #4]
 80183ba:	f100 0914 	add.w	r9, r0, #20
 80183be:	f04f 0b00 	mov.w	fp, #0
 80183c2:	f1c3 0301 	rsb	r3, r3, #1
 80183c6:	4605      	mov	r5, r0
 80183c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80183cc:	46da      	mov	sl, fp
 80183ce:	9308      	str	r3, [sp, #32]
 80183d0:	42b7      	cmp	r7, r6
 80183d2:	d33b      	bcc.n	801844c <__gethex+0x1ee>
 80183d4:	9804      	ldr	r0, [sp, #16]
 80183d6:	f840 ab04 	str.w	sl, [r0], #4
 80183da:	eba0 0009 	sub.w	r0, r0, r9
 80183de:	1080      	asrs	r0, r0, #2
 80183e0:	6128      	str	r0, [r5, #16]
 80183e2:	0147      	lsls	r7, r0, #5
 80183e4:	4650      	mov	r0, sl
 80183e6:	f000 fb1c 	bl	8018a22 <__hi0bits>
 80183ea:	f8d8 6000 	ldr.w	r6, [r8]
 80183ee:	1a3f      	subs	r7, r7, r0
 80183f0:	42b7      	cmp	r7, r6
 80183f2:	dd64      	ble.n	80184be <__gethex+0x260>
 80183f4:	1bbf      	subs	r7, r7, r6
 80183f6:	4639      	mov	r1, r7
 80183f8:	4628      	mov	r0, r5
 80183fa:	f000 fe2b 	bl	8019054 <__any_on>
 80183fe:	4682      	mov	sl, r0
 8018400:	b178      	cbz	r0, 8018422 <__gethex+0x1c4>
 8018402:	1e7b      	subs	r3, r7, #1
 8018404:	1159      	asrs	r1, r3, #5
 8018406:	f003 021f 	and.w	r2, r3, #31
 801840a:	f04f 0a01 	mov.w	sl, #1
 801840e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018412:	fa0a f202 	lsl.w	r2, sl, r2
 8018416:	420a      	tst	r2, r1
 8018418:	d003      	beq.n	8018422 <__gethex+0x1c4>
 801841a:	4553      	cmp	r3, sl
 801841c:	dc46      	bgt.n	80184ac <__gethex+0x24e>
 801841e:	f04f 0a02 	mov.w	sl, #2
 8018422:	4639      	mov	r1, r7
 8018424:	4628      	mov	r0, r5
 8018426:	f7ff fecb 	bl	80181c0 <rshift>
 801842a:	443c      	add	r4, r7
 801842c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018430:	42a3      	cmp	r3, r4
 8018432:	da52      	bge.n	80184da <__gethex+0x27c>
 8018434:	4629      	mov	r1, r5
 8018436:	9802      	ldr	r0, [sp, #8]
 8018438:	f000 fa63 	bl	8018902 <_Bfree>
 801843c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801843e:	2300      	movs	r3, #0
 8018440:	6013      	str	r3, [r2, #0]
 8018442:	27a3      	movs	r7, #163	; 0xa3
 8018444:	e793      	b.n	801836e <__gethex+0x110>
 8018446:	3101      	adds	r1, #1
 8018448:	105b      	asrs	r3, r3, #1
 801844a:	e7b0      	b.n	80183ae <__gethex+0x150>
 801844c:	1e73      	subs	r3, r6, #1
 801844e:	9305      	str	r3, [sp, #20]
 8018450:	9a07      	ldr	r2, [sp, #28]
 8018452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018456:	4293      	cmp	r3, r2
 8018458:	d018      	beq.n	801848c <__gethex+0x22e>
 801845a:	f1bb 0f20 	cmp.w	fp, #32
 801845e:	d107      	bne.n	8018470 <__gethex+0x212>
 8018460:	9b04      	ldr	r3, [sp, #16]
 8018462:	f8c3 a000 	str.w	sl, [r3]
 8018466:	3304      	adds	r3, #4
 8018468:	f04f 0a00 	mov.w	sl, #0
 801846c:	9304      	str	r3, [sp, #16]
 801846e:	46d3      	mov	fp, sl
 8018470:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018474:	f7ff fede 	bl	8018234 <__hexdig_fun>
 8018478:	f000 000f 	and.w	r0, r0, #15
 801847c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018480:	ea4a 0a00 	orr.w	sl, sl, r0
 8018484:	f10b 0b04 	add.w	fp, fp, #4
 8018488:	9b05      	ldr	r3, [sp, #20]
 801848a:	e00d      	b.n	80184a8 <__gethex+0x24a>
 801848c:	9b05      	ldr	r3, [sp, #20]
 801848e:	9a08      	ldr	r2, [sp, #32]
 8018490:	4413      	add	r3, r2
 8018492:	42bb      	cmp	r3, r7
 8018494:	d3e1      	bcc.n	801845a <__gethex+0x1fc>
 8018496:	4618      	mov	r0, r3
 8018498:	9a01      	ldr	r2, [sp, #4]
 801849a:	9903      	ldr	r1, [sp, #12]
 801849c:	9309      	str	r3, [sp, #36]	; 0x24
 801849e:	f001 fb47 	bl	8019b30 <strncmp>
 80184a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184a4:	2800      	cmp	r0, #0
 80184a6:	d1d8      	bne.n	801845a <__gethex+0x1fc>
 80184a8:	461e      	mov	r6, r3
 80184aa:	e791      	b.n	80183d0 <__gethex+0x172>
 80184ac:	1eb9      	subs	r1, r7, #2
 80184ae:	4628      	mov	r0, r5
 80184b0:	f000 fdd0 	bl	8019054 <__any_on>
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d0b2      	beq.n	801841e <__gethex+0x1c0>
 80184b8:	f04f 0a03 	mov.w	sl, #3
 80184bc:	e7b1      	b.n	8018422 <__gethex+0x1c4>
 80184be:	da09      	bge.n	80184d4 <__gethex+0x276>
 80184c0:	1bf7      	subs	r7, r6, r7
 80184c2:	4629      	mov	r1, r5
 80184c4:	463a      	mov	r2, r7
 80184c6:	9802      	ldr	r0, [sp, #8]
 80184c8:	f000 fbe6 	bl	8018c98 <__lshift>
 80184cc:	1be4      	subs	r4, r4, r7
 80184ce:	4605      	mov	r5, r0
 80184d0:	f100 0914 	add.w	r9, r0, #20
 80184d4:	f04f 0a00 	mov.w	sl, #0
 80184d8:	e7a8      	b.n	801842c <__gethex+0x1ce>
 80184da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80184de:	42a0      	cmp	r0, r4
 80184e0:	dd6a      	ble.n	80185b8 <__gethex+0x35a>
 80184e2:	1b04      	subs	r4, r0, r4
 80184e4:	42a6      	cmp	r6, r4
 80184e6:	dc2e      	bgt.n	8018546 <__gethex+0x2e8>
 80184e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184ec:	2b02      	cmp	r3, #2
 80184ee:	d022      	beq.n	8018536 <__gethex+0x2d8>
 80184f0:	2b03      	cmp	r3, #3
 80184f2:	d024      	beq.n	801853e <__gethex+0x2e0>
 80184f4:	2b01      	cmp	r3, #1
 80184f6:	d115      	bne.n	8018524 <__gethex+0x2c6>
 80184f8:	42a6      	cmp	r6, r4
 80184fa:	d113      	bne.n	8018524 <__gethex+0x2c6>
 80184fc:	2e01      	cmp	r6, #1
 80184fe:	dc0b      	bgt.n	8018518 <__gethex+0x2ba>
 8018500:	9a06      	ldr	r2, [sp, #24]
 8018502:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018506:	6013      	str	r3, [r2, #0]
 8018508:	2301      	movs	r3, #1
 801850a:	612b      	str	r3, [r5, #16]
 801850c:	f8c9 3000 	str.w	r3, [r9]
 8018510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018512:	2762      	movs	r7, #98	; 0x62
 8018514:	601d      	str	r5, [r3, #0]
 8018516:	e72a      	b.n	801836e <__gethex+0x110>
 8018518:	1e71      	subs	r1, r6, #1
 801851a:	4628      	mov	r0, r5
 801851c:	f000 fd9a 	bl	8019054 <__any_on>
 8018520:	2800      	cmp	r0, #0
 8018522:	d1ed      	bne.n	8018500 <__gethex+0x2a2>
 8018524:	4629      	mov	r1, r5
 8018526:	9802      	ldr	r0, [sp, #8]
 8018528:	f000 f9eb 	bl	8018902 <_Bfree>
 801852c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801852e:	2300      	movs	r3, #0
 8018530:	6013      	str	r3, [r2, #0]
 8018532:	2750      	movs	r7, #80	; 0x50
 8018534:	e71b      	b.n	801836e <__gethex+0x110>
 8018536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018538:	2b00      	cmp	r3, #0
 801853a:	d0e1      	beq.n	8018500 <__gethex+0x2a2>
 801853c:	e7f2      	b.n	8018524 <__gethex+0x2c6>
 801853e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018540:	2b00      	cmp	r3, #0
 8018542:	d1dd      	bne.n	8018500 <__gethex+0x2a2>
 8018544:	e7ee      	b.n	8018524 <__gethex+0x2c6>
 8018546:	1e67      	subs	r7, r4, #1
 8018548:	f1ba 0f00 	cmp.w	sl, #0
 801854c:	d131      	bne.n	80185b2 <__gethex+0x354>
 801854e:	b127      	cbz	r7, 801855a <__gethex+0x2fc>
 8018550:	4639      	mov	r1, r7
 8018552:	4628      	mov	r0, r5
 8018554:	f000 fd7e 	bl	8019054 <__any_on>
 8018558:	4682      	mov	sl, r0
 801855a:	117a      	asrs	r2, r7, #5
 801855c:	2301      	movs	r3, #1
 801855e:	f007 071f 	and.w	r7, r7, #31
 8018562:	fa03 f707 	lsl.w	r7, r3, r7
 8018566:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801856a:	4621      	mov	r1, r4
 801856c:	421f      	tst	r7, r3
 801856e:	4628      	mov	r0, r5
 8018570:	bf18      	it	ne
 8018572:	f04a 0a02 	orrne.w	sl, sl, #2
 8018576:	1b36      	subs	r6, r6, r4
 8018578:	f7ff fe22 	bl	80181c0 <rshift>
 801857c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018580:	2702      	movs	r7, #2
 8018582:	f1ba 0f00 	cmp.w	sl, #0
 8018586:	d048      	beq.n	801861a <__gethex+0x3bc>
 8018588:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801858c:	2b02      	cmp	r3, #2
 801858e:	d015      	beq.n	80185bc <__gethex+0x35e>
 8018590:	2b03      	cmp	r3, #3
 8018592:	d017      	beq.n	80185c4 <__gethex+0x366>
 8018594:	2b01      	cmp	r3, #1
 8018596:	d109      	bne.n	80185ac <__gethex+0x34e>
 8018598:	f01a 0f02 	tst.w	sl, #2
 801859c:	d006      	beq.n	80185ac <__gethex+0x34e>
 801859e:	f8d9 3000 	ldr.w	r3, [r9]
 80185a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80185a6:	f01a 0f01 	tst.w	sl, #1
 80185aa:	d10e      	bne.n	80185ca <__gethex+0x36c>
 80185ac:	f047 0710 	orr.w	r7, r7, #16
 80185b0:	e033      	b.n	801861a <__gethex+0x3bc>
 80185b2:	f04f 0a01 	mov.w	sl, #1
 80185b6:	e7d0      	b.n	801855a <__gethex+0x2fc>
 80185b8:	2701      	movs	r7, #1
 80185ba:	e7e2      	b.n	8018582 <__gethex+0x324>
 80185bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185be:	f1c3 0301 	rsb	r3, r3, #1
 80185c2:	9315      	str	r3, [sp, #84]	; 0x54
 80185c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d0f0      	beq.n	80185ac <__gethex+0x34e>
 80185ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80185ce:	f105 0314 	add.w	r3, r5, #20
 80185d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80185d6:	eb03 010a 	add.w	r1, r3, sl
 80185da:	f04f 0c00 	mov.w	ip, #0
 80185de:	4618      	mov	r0, r3
 80185e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80185e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80185e8:	d01c      	beq.n	8018624 <__gethex+0x3c6>
 80185ea:	3201      	adds	r2, #1
 80185ec:	6002      	str	r2, [r0, #0]
 80185ee:	2f02      	cmp	r7, #2
 80185f0:	f105 0314 	add.w	r3, r5, #20
 80185f4:	d138      	bne.n	8018668 <__gethex+0x40a>
 80185f6:	f8d8 2000 	ldr.w	r2, [r8]
 80185fa:	3a01      	subs	r2, #1
 80185fc:	42b2      	cmp	r2, r6
 80185fe:	d10a      	bne.n	8018616 <__gethex+0x3b8>
 8018600:	1171      	asrs	r1, r6, #5
 8018602:	2201      	movs	r2, #1
 8018604:	f006 061f 	and.w	r6, r6, #31
 8018608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801860c:	fa02 f606 	lsl.w	r6, r2, r6
 8018610:	421e      	tst	r6, r3
 8018612:	bf18      	it	ne
 8018614:	4617      	movne	r7, r2
 8018616:	f047 0720 	orr.w	r7, r7, #32
 801861a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801861c:	601d      	str	r5, [r3, #0]
 801861e:	9b06      	ldr	r3, [sp, #24]
 8018620:	601c      	str	r4, [r3, #0]
 8018622:	e6a4      	b.n	801836e <__gethex+0x110>
 8018624:	4299      	cmp	r1, r3
 8018626:	f843 cc04 	str.w	ip, [r3, #-4]
 801862a:	d8d8      	bhi.n	80185de <__gethex+0x380>
 801862c:	68ab      	ldr	r3, [r5, #8]
 801862e:	4599      	cmp	r9, r3
 8018630:	db12      	blt.n	8018658 <__gethex+0x3fa>
 8018632:	6869      	ldr	r1, [r5, #4]
 8018634:	9802      	ldr	r0, [sp, #8]
 8018636:	3101      	adds	r1, #1
 8018638:	f000 f92f 	bl	801889a <_Balloc>
 801863c:	692a      	ldr	r2, [r5, #16]
 801863e:	3202      	adds	r2, #2
 8018640:	f105 010c 	add.w	r1, r5, #12
 8018644:	4683      	mov	fp, r0
 8018646:	0092      	lsls	r2, r2, #2
 8018648:	300c      	adds	r0, #12
 801864a:	f000 f91b 	bl	8018884 <memcpy>
 801864e:	4629      	mov	r1, r5
 8018650:	9802      	ldr	r0, [sp, #8]
 8018652:	f000 f956 	bl	8018902 <_Bfree>
 8018656:	465d      	mov	r5, fp
 8018658:	692b      	ldr	r3, [r5, #16]
 801865a:	1c5a      	adds	r2, r3, #1
 801865c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018660:	612a      	str	r2, [r5, #16]
 8018662:	2201      	movs	r2, #1
 8018664:	615a      	str	r2, [r3, #20]
 8018666:	e7c2      	b.n	80185ee <__gethex+0x390>
 8018668:	692a      	ldr	r2, [r5, #16]
 801866a:	454a      	cmp	r2, r9
 801866c:	dd0b      	ble.n	8018686 <__gethex+0x428>
 801866e:	2101      	movs	r1, #1
 8018670:	4628      	mov	r0, r5
 8018672:	f7ff fda5 	bl	80181c0 <rshift>
 8018676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801867a:	3401      	adds	r4, #1
 801867c:	42a3      	cmp	r3, r4
 801867e:	f6ff aed9 	blt.w	8018434 <__gethex+0x1d6>
 8018682:	2701      	movs	r7, #1
 8018684:	e7c7      	b.n	8018616 <__gethex+0x3b8>
 8018686:	f016 061f 	ands.w	r6, r6, #31
 801868a:	d0fa      	beq.n	8018682 <__gethex+0x424>
 801868c:	449a      	add	sl, r3
 801868e:	f1c6 0620 	rsb	r6, r6, #32
 8018692:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018696:	f000 f9c4 	bl	8018a22 <__hi0bits>
 801869a:	42b0      	cmp	r0, r6
 801869c:	dbe7      	blt.n	801866e <__gethex+0x410>
 801869e:	e7f0      	b.n	8018682 <__gethex+0x424>

080186a0 <L_shift>:
 80186a0:	f1c2 0208 	rsb	r2, r2, #8
 80186a4:	0092      	lsls	r2, r2, #2
 80186a6:	b570      	push	{r4, r5, r6, lr}
 80186a8:	f1c2 0620 	rsb	r6, r2, #32
 80186ac:	6843      	ldr	r3, [r0, #4]
 80186ae:	6804      	ldr	r4, [r0, #0]
 80186b0:	fa03 f506 	lsl.w	r5, r3, r6
 80186b4:	432c      	orrs	r4, r5
 80186b6:	40d3      	lsrs	r3, r2
 80186b8:	6004      	str	r4, [r0, #0]
 80186ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80186be:	4288      	cmp	r0, r1
 80186c0:	d3f4      	bcc.n	80186ac <L_shift+0xc>
 80186c2:	bd70      	pop	{r4, r5, r6, pc}

080186c4 <__match>:
 80186c4:	b530      	push	{r4, r5, lr}
 80186c6:	6803      	ldr	r3, [r0, #0]
 80186c8:	3301      	adds	r3, #1
 80186ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186ce:	b914      	cbnz	r4, 80186d6 <__match+0x12>
 80186d0:	6003      	str	r3, [r0, #0]
 80186d2:	2001      	movs	r0, #1
 80186d4:	bd30      	pop	{r4, r5, pc}
 80186d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80186de:	2d19      	cmp	r5, #25
 80186e0:	bf98      	it	ls
 80186e2:	3220      	addls	r2, #32
 80186e4:	42a2      	cmp	r2, r4
 80186e6:	d0f0      	beq.n	80186ca <__match+0x6>
 80186e8:	2000      	movs	r0, #0
 80186ea:	e7f3      	b.n	80186d4 <__match+0x10>

080186ec <__hexnan>:
 80186ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186f0:	680b      	ldr	r3, [r1, #0]
 80186f2:	6801      	ldr	r1, [r0, #0]
 80186f4:	115f      	asrs	r7, r3, #5
 80186f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80186fa:	f013 031f 	ands.w	r3, r3, #31
 80186fe:	b087      	sub	sp, #28
 8018700:	bf18      	it	ne
 8018702:	3704      	addne	r7, #4
 8018704:	2500      	movs	r5, #0
 8018706:	1f3e      	subs	r6, r7, #4
 8018708:	4682      	mov	sl, r0
 801870a:	4690      	mov	r8, r2
 801870c:	9301      	str	r3, [sp, #4]
 801870e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018712:	46b1      	mov	r9, r6
 8018714:	4634      	mov	r4, r6
 8018716:	9502      	str	r5, [sp, #8]
 8018718:	46ab      	mov	fp, r5
 801871a:	784a      	ldrb	r2, [r1, #1]
 801871c:	1c4b      	adds	r3, r1, #1
 801871e:	9303      	str	r3, [sp, #12]
 8018720:	b342      	cbz	r2, 8018774 <__hexnan+0x88>
 8018722:	4610      	mov	r0, r2
 8018724:	9105      	str	r1, [sp, #20]
 8018726:	9204      	str	r2, [sp, #16]
 8018728:	f7ff fd84 	bl	8018234 <__hexdig_fun>
 801872c:	2800      	cmp	r0, #0
 801872e:	d143      	bne.n	80187b8 <__hexnan+0xcc>
 8018730:	9a04      	ldr	r2, [sp, #16]
 8018732:	9905      	ldr	r1, [sp, #20]
 8018734:	2a20      	cmp	r2, #32
 8018736:	d818      	bhi.n	801876a <__hexnan+0x7e>
 8018738:	9b02      	ldr	r3, [sp, #8]
 801873a:	459b      	cmp	fp, r3
 801873c:	dd13      	ble.n	8018766 <__hexnan+0x7a>
 801873e:	454c      	cmp	r4, r9
 8018740:	d206      	bcs.n	8018750 <__hexnan+0x64>
 8018742:	2d07      	cmp	r5, #7
 8018744:	dc04      	bgt.n	8018750 <__hexnan+0x64>
 8018746:	462a      	mov	r2, r5
 8018748:	4649      	mov	r1, r9
 801874a:	4620      	mov	r0, r4
 801874c:	f7ff ffa8 	bl	80186a0 <L_shift>
 8018750:	4544      	cmp	r4, r8
 8018752:	d944      	bls.n	80187de <__hexnan+0xf2>
 8018754:	2300      	movs	r3, #0
 8018756:	f1a4 0904 	sub.w	r9, r4, #4
 801875a:	f844 3c04 	str.w	r3, [r4, #-4]
 801875e:	f8cd b008 	str.w	fp, [sp, #8]
 8018762:	464c      	mov	r4, r9
 8018764:	461d      	mov	r5, r3
 8018766:	9903      	ldr	r1, [sp, #12]
 8018768:	e7d7      	b.n	801871a <__hexnan+0x2e>
 801876a:	2a29      	cmp	r2, #41	; 0x29
 801876c:	d14a      	bne.n	8018804 <__hexnan+0x118>
 801876e:	3102      	adds	r1, #2
 8018770:	f8ca 1000 	str.w	r1, [sl]
 8018774:	f1bb 0f00 	cmp.w	fp, #0
 8018778:	d044      	beq.n	8018804 <__hexnan+0x118>
 801877a:	454c      	cmp	r4, r9
 801877c:	d206      	bcs.n	801878c <__hexnan+0xa0>
 801877e:	2d07      	cmp	r5, #7
 8018780:	dc04      	bgt.n	801878c <__hexnan+0xa0>
 8018782:	462a      	mov	r2, r5
 8018784:	4649      	mov	r1, r9
 8018786:	4620      	mov	r0, r4
 8018788:	f7ff ff8a 	bl	80186a0 <L_shift>
 801878c:	4544      	cmp	r4, r8
 801878e:	d928      	bls.n	80187e2 <__hexnan+0xf6>
 8018790:	4643      	mov	r3, r8
 8018792:	f854 2b04 	ldr.w	r2, [r4], #4
 8018796:	f843 2b04 	str.w	r2, [r3], #4
 801879a:	42a6      	cmp	r6, r4
 801879c:	d2f9      	bcs.n	8018792 <__hexnan+0xa6>
 801879e:	2200      	movs	r2, #0
 80187a0:	f843 2b04 	str.w	r2, [r3], #4
 80187a4:	429e      	cmp	r6, r3
 80187a6:	d2fb      	bcs.n	80187a0 <__hexnan+0xb4>
 80187a8:	6833      	ldr	r3, [r6, #0]
 80187aa:	b91b      	cbnz	r3, 80187b4 <__hexnan+0xc8>
 80187ac:	4546      	cmp	r6, r8
 80187ae:	d127      	bne.n	8018800 <__hexnan+0x114>
 80187b0:	2301      	movs	r3, #1
 80187b2:	6033      	str	r3, [r6, #0]
 80187b4:	2005      	movs	r0, #5
 80187b6:	e026      	b.n	8018806 <__hexnan+0x11a>
 80187b8:	3501      	adds	r5, #1
 80187ba:	2d08      	cmp	r5, #8
 80187bc:	f10b 0b01 	add.w	fp, fp, #1
 80187c0:	dd06      	ble.n	80187d0 <__hexnan+0xe4>
 80187c2:	4544      	cmp	r4, r8
 80187c4:	d9cf      	bls.n	8018766 <__hexnan+0x7a>
 80187c6:	2300      	movs	r3, #0
 80187c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80187cc:	2501      	movs	r5, #1
 80187ce:	3c04      	subs	r4, #4
 80187d0:	6822      	ldr	r2, [r4, #0]
 80187d2:	f000 000f 	and.w	r0, r0, #15
 80187d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80187da:	6020      	str	r0, [r4, #0]
 80187dc:	e7c3      	b.n	8018766 <__hexnan+0x7a>
 80187de:	2508      	movs	r5, #8
 80187e0:	e7c1      	b.n	8018766 <__hexnan+0x7a>
 80187e2:	9b01      	ldr	r3, [sp, #4]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d0df      	beq.n	80187a8 <__hexnan+0xbc>
 80187e8:	f04f 32ff 	mov.w	r2, #4294967295
 80187ec:	f1c3 0320 	rsb	r3, r3, #32
 80187f0:	fa22 f303 	lsr.w	r3, r2, r3
 80187f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80187f8:	401a      	ands	r2, r3
 80187fa:	f847 2c04 	str.w	r2, [r7, #-4]
 80187fe:	e7d3      	b.n	80187a8 <__hexnan+0xbc>
 8018800:	3e04      	subs	r6, #4
 8018802:	e7d1      	b.n	80187a8 <__hexnan+0xbc>
 8018804:	2004      	movs	r0, #4
 8018806:	b007      	add	sp, #28
 8018808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801880c <__locale_ctype_ptr_l>:
 801880c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018810:	4770      	bx	lr
	...

08018814 <__locale_ctype_ptr>:
 8018814:	4b04      	ldr	r3, [pc, #16]	; (8018828 <__locale_ctype_ptr+0x14>)
 8018816:	4a05      	ldr	r2, [pc, #20]	; (801882c <__locale_ctype_ptr+0x18>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	6a1b      	ldr	r3, [r3, #32]
 801881c:	2b00      	cmp	r3, #0
 801881e:	bf08      	it	eq
 8018820:	4613      	moveq	r3, r2
 8018822:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018826:	4770      	bx	lr
 8018828:	2000000c 	.word	0x2000000c
 801882c:	20000070 	.word	0x20000070

08018830 <__localeconv_l>:
 8018830:	30f0      	adds	r0, #240	; 0xf0
 8018832:	4770      	bx	lr

08018834 <_localeconv_r>:
 8018834:	4b04      	ldr	r3, [pc, #16]	; (8018848 <_localeconv_r+0x14>)
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	6a18      	ldr	r0, [r3, #32]
 801883a:	4b04      	ldr	r3, [pc, #16]	; (801884c <_localeconv_r+0x18>)
 801883c:	2800      	cmp	r0, #0
 801883e:	bf08      	it	eq
 8018840:	4618      	moveq	r0, r3
 8018842:	30f0      	adds	r0, #240	; 0xf0
 8018844:	4770      	bx	lr
 8018846:	bf00      	nop
 8018848:	2000000c 	.word	0x2000000c
 801884c:	20000070 	.word	0x20000070

08018850 <malloc>:
 8018850:	4b02      	ldr	r3, [pc, #8]	; (801885c <malloc+0xc>)
 8018852:	4601      	mov	r1, r0
 8018854:	6818      	ldr	r0, [r3, #0]
 8018856:	f000 bc7b 	b.w	8019150 <_malloc_r>
 801885a:	bf00      	nop
 801885c:	2000000c 	.word	0x2000000c

08018860 <__ascii_mbtowc>:
 8018860:	b082      	sub	sp, #8
 8018862:	b901      	cbnz	r1, 8018866 <__ascii_mbtowc+0x6>
 8018864:	a901      	add	r1, sp, #4
 8018866:	b142      	cbz	r2, 801887a <__ascii_mbtowc+0x1a>
 8018868:	b14b      	cbz	r3, 801887e <__ascii_mbtowc+0x1e>
 801886a:	7813      	ldrb	r3, [r2, #0]
 801886c:	600b      	str	r3, [r1, #0]
 801886e:	7812      	ldrb	r2, [r2, #0]
 8018870:	1c10      	adds	r0, r2, #0
 8018872:	bf18      	it	ne
 8018874:	2001      	movne	r0, #1
 8018876:	b002      	add	sp, #8
 8018878:	4770      	bx	lr
 801887a:	4610      	mov	r0, r2
 801887c:	e7fb      	b.n	8018876 <__ascii_mbtowc+0x16>
 801887e:	f06f 0001 	mvn.w	r0, #1
 8018882:	e7f8      	b.n	8018876 <__ascii_mbtowc+0x16>

08018884 <memcpy>:
 8018884:	b510      	push	{r4, lr}
 8018886:	1e43      	subs	r3, r0, #1
 8018888:	440a      	add	r2, r1
 801888a:	4291      	cmp	r1, r2
 801888c:	d100      	bne.n	8018890 <memcpy+0xc>
 801888e:	bd10      	pop	{r4, pc}
 8018890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018898:	e7f7      	b.n	801888a <memcpy+0x6>

0801889a <_Balloc>:
 801889a:	b570      	push	{r4, r5, r6, lr}
 801889c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801889e:	4604      	mov	r4, r0
 80188a0:	460e      	mov	r6, r1
 80188a2:	b93d      	cbnz	r5, 80188b4 <_Balloc+0x1a>
 80188a4:	2010      	movs	r0, #16
 80188a6:	f7ff ffd3 	bl	8018850 <malloc>
 80188aa:	6260      	str	r0, [r4, #36]	; 0x24
 80188ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80188b0:	6005      	str	r5, [r0, #0]
 80188b2:	60c5      	str	r5, [r0, #12]
 80188b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80188b6:	68eb      	ldr	r3, [r5, #12]
 80188b8:	b183      	cbz	r3, 80188dc <_Balloc+0x42>
 80188ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188bc:	68db      	ldr	r3, [r3, #12]
 80188be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80188c2:	b9b8      	cbnz	r0, 80188f4 <_Balloc+0x5a>
 80188c4:	2101      	movs	r1, #1
 80188c6:	fa01 f506 	lsl.w	r5, r1, r6
 80188ca:	1d6a      	adds	r2, r5, #5
 80188cc:	0092      	lsls	r2, r2, #2
 80188ce:	4620      	mov	r0, r4
 80188d0:	f000 fbe1 	bl	8019096 <_calloc_r>
 80188d4:	b160      	cbz	r0, 80188f0 <_Balloc+0x56>
 80188d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80188da:	e00e      	b.n	80188fa <_Balloc+0x60>
 80188dc:	2221      	movs	r2, #33	; 0x21
 80188de:	2104      	movs	r1, #4
 80188e0:	4620      	mov	r0, r4
 80188e2:	f000 fbd8 	bl	8019096 <_calloc_r>
 80188e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188e8:	60e8      	str	r0, [r5, #12]
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d1e4      	bne.n	80188ba <_Balloc+0x20>
 80188f0:	2000      	movs	r0, #0
 80188f2:	bd70      	pop	{r4, r5, r6, pc}
 80188f4:	6802      	ldr	r2, [r0, #0]
 80188f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80188fa:	2300      	movs	r3, #0
 80188fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018900:	e7f7      	b.n	80188f2 <_Balloc+0x58>

08018902 <_Bfree>:
 8018902:	b570      	push	{r4, r5, r6, lr}
 8018904:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018906:	4606      	mov	r6, r0
 8018908:	460d      	mov	r5, r1
 801890a:	b93c      	cbnz	r4, 801891c <_Bfree+0x1a>
 801890c:	2010      	movs	r0, #16
 801890e:	f7ff ff9f 	bl	8018850 <malloc>
 8018912:	6270      	str	r0, [r6, #36]	; 0x24
 8018914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018918:	6004      	str	r4, [r0, #0]
 801891a:	60c4      	str	r4, [r0, #12]
 801891c:	b13d      	cbz	r5, 801892e <_Bfree+0x2c>
 801891e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018920:	686a      	ldr	r2, [r5, #4]
 8018922:	68db      	ldr	r3, [r3, #12]
 8018924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018928:	6029      	str	r1, [r5, #0]
 801892a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801892e:	bd70      	pop	{r4, r5, r6, pc}

08018930 <__multadd>:
 8018930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018934:	690d      	ldr	r5, [r1, #16]
 8018936:	461f      	mov	r7, r3
 8018938:	4606      	mov	r6, r0
 801893a:	460c      	mov	r4, r1
 801893c:	f101 0c14 	add.w	ip, r1, #20
 8018940:	2300      	movs	r3, #0
 8018942:	f8dc 0000 	ldr.w	r0, [ip]
 8018946:	b281      	uxth	r1, r0
 8018948:	fb02 7101 	mla	r1, r2, r1, r7
 801894c:	0c0f      	lsrs	r7, r1, #16
 801894e:	0c00      	lsrs	r0, r0, #16
 8018950:	fb02 7000 	mla	r0, r2, r0, r7
 8018954:	b289      	uxth	r1, r1
 8018956:	3301      	adds	r3, #1
 8018958:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801895c:	429d      	cmp	r5, r3
 801895e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018962:	f84c 1b04 	str.w	r1, [ip], #4
 8018966:	dcec      	bgt.n	8018942 <__multadd+0x12>
 8018968:	b1d7      	cbz	r7, 80189a0 <__multadd+0x70>
 801896a:	68a3      	ldr	r3, [r4, #8]
 801896c:	42ab      	cmp	r3, r5
 801896e:	dc12      	bgt.n	8018996 <__multadd+0x66>
 8018970:	6861      	ldr	r1, [r4, #4]
 8018972:	4630      	mov	r0, r6
 8018974:	3101      	adds	r1, #1
 8018976:	f7ff ff90 	bl	801889a <_Balloc>
 801897a:	6922      	ldr	r2, [r4, #16]
 801897c:	3202      	adds	r2, #2
 801897e:	f104 010c 	add.w	r1, r4, #12
 8018982:	4680      	mov	r8, r0
 8018984:	0092      	lsls	r2, r2, #2
 8018986:	300c      	adds	r0, #12
 8018988:	f7ff ff7c 	bl	8018884 <memcpy>
 801898c:	4621      	mov	r1, r4
 801898e:	4630      	mov	r0, r6
 8018990:	f7ff ffb7 	bl	8018902 <_Bfree>
 8018994:	4644      	mov	r4, r8
 8018996:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801899a:	3501      	adds	r5, #1
 801899c:	615f      	str	r7, [r3, #20]
 801899e:	6125      	str	r5, [r4, #16]
 80189a0:	4620      	mov	r0, r4
 80189a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189a6 <__s2b>:
 80189a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189aa:	460c      	mov	r4, r1
 80189ac:	4615      	mov	r5, r2
 80189ae:	461f      	mov	r7, r3
 80189b0:	2209      	movs	r2, #9
 80189b2:	3308      	adds	r3, #8
 80189b4:	4606      	mov	r6, r0
 80189b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80189ba:	2100      	movs	r1, #0
 80189bc:	2201      	movs	r2, #1
 80189be:	429a      	cmp	r2, r3
 80189c0:	db20      	blt.n	8018a04 <__s2b+0x5e>
 80189c2:	4630      	mov	r0, r6
 80189c4:	f7ff ff69 	bl	801889a <_Balloc>
 80189c8:	9b08      	ldr	r3, [sp, #32]
 80189ca:	6143      	str	r3, [r0, #20]
 80189cc:	2d09      	cmp	r5, #9
 80189ce:	f04f 0301 	mov.w	r3, #1
 80189d2:	6103      	str	r3, [r0, #16]
 80189d4:	dd19      	ble.n	8018a0a <__s2b+0x64>
 80189d6:	f104 0809 	add.w	r8, r4, #9
 80189da:	46c1      	mov	r9, r8
 80189dc:	442c      	add	r4, r5
 80189de:	f819 3b01 	ldrb.w	r3, [r9], #1
 80189e2:	4601      	mov	r1, r0
 80189e4:	3b30      	subs	r3, #48	; 0x30
 80189e6:	220a      	movs	r2, #10
 80189e8:	4630      	mov	r0, r6
 80189ea:	f7ff ffa1 	bl	8018930 <__multadd>
 80189ee:	45a1      	cmp	r9, r4
 80189f0:	d1f5      	bne.n	80189de <__s2b+0x38>
 80189f2:	eb08 0405 	add.w	r4, r8, r5
 80189f6:	3c08      	subs	r4, #8
 80189f8:	1b2d      	subs	r5, r5, r4
 80189fa:	1963      	adds	r3, r4, r5
 80189fc:	42bb      	cmp	r3, r7
 80189fe:	db07      	blt.n	8018a10 <__s2b+0x6a>
 8018a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a04:	0052      	lsls	r2, r2, #1
 8018a06:	3101      	adds	r1, #1
 8018a08:	e7d9      	b.n	80189be <__s2b+0x18>
 8018a0a:	340a      	adds	r4, #10
 8018a0c:	2509      	movs	r5, #9
 8018a0e:	e7f3      	b.n	80189f8 <__s2b+0x52>
 8018a10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a14:	4601      	mov	r1, r0
 8018a16:	3b30      	subs	r3, #48	; 0x30
 8018a18:	220a      	movs	r2, #10
 8018a1a:	4630      	mov	r0, r6
 8018a1c:	f7ff ff88 	bl	8018930 <__multadd>
 8018a20:	e7eb      	b.n	80189fa <__s2b+0x54>

08018a22 <__hi0bits>:
 8018a22:	0c02      	lsrs	r2, r0, #16
 8018a24:	0412      	lsls	r2, r2, #16
 8018a26:	4603      	mov	r3, r0
 8018a28:	b9b2      	cbnz	r2, 8018a58 <__hi0bits+0x36>
 8018a2a:	0403      	lsls	r3, r0, #16
 8018a2c:	2010      	movs	r0, #16
 8018a2e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a32:	bf04      	itt	eq
 8018a34:	021b      	lsleq	r3, r3, #8
 8018a36:	3008      	addeq	r0, #8
 8018a38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a3c:	bf04      	itt	eq
 8018a3e:	011b      	lsleq	r3, r3, #4
 8018a40:	3004      	addeq	r0, #4
 8018a42:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a46:	bf04      	itt	eq
 8018a48:	009b      	lsleq	r3, r3, #2
 8018a4a:	3002      	addeq	r0, #2
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	db06      	blt.n	8018a5e <__hi0bits+0x3c>
 8018a50:	005b      	lsls	r3, r3, #1
 8018a52:	d503      	bpl.n	8018a5c <__hi0bits+0x3a>
 8018a54:	3001      	adds	r0, #1
 8018a56:	4770      	bx	lr
 8018a58:	2000      	movs	r0, #0
 8018a5a:	e7e8      	b.n	8018a2e <__hi0bits+0xc>
 8018a5c:	2020      	movs	r0, #32
 8018a5e:	4770      	bx	lr

08018a60 <__lo0bits>:
 8018a60:	6803      	ldr	r3, [r0, #0]
 8018a62:	f013 0207 	ands.w	r2, r3, #7
 8018a66:	4601      	mov	r1, r0
 8018a68:	d00b      	beq.n	8018a82 <__lo0bits+0x22>
 8018a6a:	07da      	lsls	r2, r3, #31
 8018a6c:	d423      	bmi.n	8018ab6 <__lo0bits+0x56>
 8018a6e:	0798      	lsls	r0, r3, #30
 8018a70:	bf49      	itett	mi
 8018a72:	085b      	lsrmi	r3, r3, #1
 8018a74:	089b      	lsrpl	r3, r3, #2
 8018a76:	2001      	movmi	r0, #1
 8018a78:	600b      	strmi	r3, [r1, #0]
 8018a7a:	bf5c      	itt	pl
 8018a7c:	600b      	strpl	r3, [r1, #0]
 8018a7e:	2002      	movpl	r0, #2
 8018a80:	4770      	bx	lr
 8018a82:	b298      	uxth	r0, r3
 8018a84:	b9a8      	cbnz	r0, 8018ab2 <__lo0bits+0x52>
 8018a86:	0c1b      	lsrs	r3, r3, #16
 8018a88:	2010      	movs	r0, #16
 8018a8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a8e:	bf04      	itt	eq
 8018a90:	0a1b      	lsreq	r3, r3, #8
 8018a92:	3008      	addeq	r0, #8
 8018a94:	071a      	lsls	r2, r3, #28
 8018a96:	bf04      	itt	eq
 8018a98:	091b      	lsreq	r3, r3, #4
 8018a9a:	3004      	addeq	r0, #4
 8018a9c:	079a      	lsls	r2, r3, #30
 8018a9e:	bf04      	itt	eq
 8018aa0:	089b      	lsreq	r3, r3, #2
 8018aa2:	3002      	addeq	r0, #2
 8018aa4:	07da      	lsls	r2, r3, #31
 8018aa6:	d402      	bmi.n	8018aae <__lo0bits+0x4e>
 8018aa8:	085b      	lsrs	r3, r3, #1
 8018aaa:	d006      	beq.n	8018aba <__lo0bits+0x5a>
 8018aac:	3001      	adds	r0, #1
 8018aae:	600b      	str	r3, [r1, #0]
 8018ab0:	4770      	bx	lr
 8018ab2:	4610      	mov	r0, r2
 8018ab4:	e7e9      	b.n	8018a8a <__lo0bits+0x2a>
 8018ab6:	2000      	movs	r0, #0
 8018ab8:	4770      	bx	lr
 8018aba:	2020      	movs	r0, #32
 8018abc:	4770      	bx	lr

08018abe <__i2b>:
 8018abe:	b510      	push	{r4, lr}
 8018ac0:	460c      	mov	r4, r1
 8018ac2:	2101      	movs	r1, #1
 8018ac4:	f7ff fee9 	bl	801889a <_Balloc>
 8018ac8:	2201      	movs	r2, #1
 8018aca:	6144      	str	r4, [r0, #20]
 8018acc:	6102      	str	r2, [r0, #16]
 8018ace:	bd10      	pop	{r4, pc}

08018ad0 <__multiply>:
 8018ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad4:	4614      	mov	r4, r2
 8018ad6:	690a      	ldr	r2, [r1, #16]
 8018ad8:	6923      	ldr	r3, [r4, #16]
 8018ada:	429a      	cmp	r2, r3
 8018adc:	bfb8      	it	lt
 8018ade:	460b      	movlt	r3, r1
 8018ae0:	4688      	mov	r8, r1
 8018ae2:	bfbc      	itt	lt
 8018ae4:	46a0      	movlt	r8, r4
 8018ae6:	461c      	movlt	r4, r3
 8018ae8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018aec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018af0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018af4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018af8:	eb07 0609 	add.w	r6, r7, r9
 8018afc:	42b3      	cmp	r3, r6
 8018afe:	bfb8      	it	lt
 8018b00:	3101      	addlt	r1, #1
 8018b02:	f7ff feca 	bl	801889a <_Balloc>
 8018b06:	f100 0514 	add.w	r5, r0, #20
 8018b0a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018b0e:	462b      	mov	r3, r5
 8018b10:	2200      	movs	r2, #0
 8018b12:	4573      	cmp	r3, lr
 8018b14:	d316      	bcc.n	8018b44 <__multiply+0x74>
 8018b16:	f104 0214 	add.w	r2, r4, #20
 8018b1a:	f108 0114 	add.w	r1, r8, #20
 8018b1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018b22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018b26:	9300      	str	r3, [sp, #0]
 8018b28:	9b00      	ldr	r3, [sp, #0]
 8018b2a:	9201      	str	r2, [sp, #4]
 8018b2c:	4293      	cmp	r3, r2
 8018b2e:	d80c      	bhi.n	8018b4a <__multiply+0x7a>
 8018b30:	2e00      	cmp	r6, #0
 8018b32:	dd03      	ble.n	8018b3c <__multiply+0x6c>
 8018b34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d05d      	beq.n	8018bf8 <__multiply+0x128>
 8018b3c:	6106      	str	r6, [r0, #16]
 8018b3e:	b003      	add	sp, #12
 8018b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b44:	f843 2b04 	str.w	r2, [r3], #4
 8018b48:	e7e3      	b.n	8018b12 <__multiply+0x42>
 8018b4a:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b4e:	f1bb 0f00 	cmp.w	fp, #0
 8018b52:	d023      	beq.n	8018b9c <__multiply+0xcc>
 8018b54:	4689      	mov	r9, r1
 8018b56:	46ac      	mov	ip, r5
 8018b58:	f04f 0800 	mov.w	r8, #0
 8018b5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b60:	f8dc a000 	ldr.w	sl, [ip]
 8018b64:	b2a3      	uxth	r3, r4
 8018b66:	fa1f fa8a 	uxth.w	sl, sl
 8018b6a:	fb0b a303 	mla	r3, fp, r3, sl
 8018b6e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b72:	f8dc 4000 	ldr.w	r4, [ip]
 8018b76:	4443      	add	r3, r8
 8018b78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b7c:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b80:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b84:	46e2      	mov	sl, ip
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018b8c:	454f      	cmp	r7, r9
 8018b8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b92:	f84a 3b04 	str.w	r3, [sl], #4
 8018b96:	d82b      	bhi.n	8018bf0 <__multiply+0x120>
 8018b98:	f8cc 8004 	str.w	r8, [ip, #4]
 8018b9c:	9b01      	ldr	r3, [sp, #4]
 8018b9e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018ba2:	3204      	adds	r2, #4
 8018ba4:	f1ba 0f00 	cmp.w	sl, #0
 8018ba8:	d020      	beq.n	8018bec <__multiply+0x11c>
 8018baa:	682b      	ldr	r3, [r5, #0]
 8018bac:	4689      	mov	r9, r1
 8018bae:	46a8      	mov	r8, r5
 8018bb0:	f04f 0b00 	mov.w	fp, #0
 8018bb4:	f8b9 c000 	ldrh.w	ip, [r9]
 8018bb8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018bbc:	fb0a 440c 	mla	r4, sl, ip, r4
 8018bc0:	445c      	add	r4, fp
 8018bc2:	46c4      	mov	ip, r8
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018bca:	f84c 3b04 	str.w	r3, [ip], #4
 8018bce:	f859 3b04 	ldr.w	r3, [r9], #4
 8018bd2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018bd6:	0c1b      	lsrs	r3, r3, #16
 8018bd8:	fb0a b303 	mla	r3, sl, r3, fp
 8018bdc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018be0:	454f      	cmp	r7, r9
 8018be2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018be6:	d805      	bhi.n	8018bf4 <__multiply+0x124>
 8018be8:	f8c8 3004 	str.w	r3, [r8, #4]
 8018bec:	3504      	adds	r5, #4
 8018bee:	e79b      	b.n	8018b28 <__multiply+0x58>
 8018bf0:	46d4      	mov	ip, sl
 8018bf2:	e7b3      	b.n	8018b5c <__multiply+0x8c>
 8018bf4:	46e0      	mov	r8, ip
 8018bf6:	e7dd      	b.n	8018bb4 <__multiply+0xe4>
 8018bf8:	3e01      	subs	r6, #1
 8018bfa:	e799      	b.n	8018b30 <__multiply+0x60>

08018bfc <__pow5mult>:
 8018bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c00:	4615      	mov	r5, r2
 8018c02:	f012 0203 	ands.w	r2, r2, #3
 8018c06:	4606      	mov	r6, r0
 8018c08:	460f      	mov	r7, r1
 8018c0a:	d007      	beq.n	8018c1c <__pow5mult+0x20>
 8018c0c:	3a01      	subs	r2, #1
 8018c0e:	4c21      	ldr	r4, [pc, #132]	; (8018c94 <__pow5mult+0x98>)
 8018c10:	2300      	movs	r3, #0
 8018c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c16:	f7ff fe8b 	bl	8018930 <__multadd>
 8018c1a:	4607      	mov	r7, r0
 8018c1c:	10ad      	asrs	r5, r5, #2
 8018c1e:	d035      	beq.n	8018c8c <__pow5mult+0x90>
 8018c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c22:	b93c      	cbnz	r4, 8018c34 <__pow5mult+0x38>
 8018c24:	2010      	movs	r0, #16
 8018c26:	f7ff fe13 	bl	8018850 <malloc>
 8018c2a:	6270      	str	r0, [r6, #36]	; 0x24
 8018c2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c30:	6004      	str	r4, [r0, #0]
 8018c32:	60c4      	str	r4, [r0, #12]
 8018c34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c3c:	b94c      	cbnz	r4, 8018c52 <__pow5mult+0x56>
 8018c3e:	f240 2171 	movw	r1, #625	; 0x271
 8018c42:	4630      	mov	r0, r6
 8018c44:	f7ff ff3b 	bl	8018abe <__i2b>
 8018c48:	2300      	movs	r3, #0
 8018c4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c4e:	4604      	mov	r4, r0
 8018c50:	6003      	str	r3, [r0, #0]
 8018c52:	f04f 0800 	mov.w	r8, #0
 8018c56:	07eb      	lsls	r3, r5, #31
 8018c58:	d50a      	bpl.n	8018c70 <__pow5mult+0x74>
 8018c5a:	4639      	mov	r1, r7
 8018c5c:	4622      	mov	r2, r4
 8018c5e:	4630      	mov	r0, r6
 8018c60:	f7ff ff36 	bl	8018ad0 <__multiply>
 8018c64:	4639      	mov	r1, r7
 8018c66:	4681      	mov	r9, r0
 8018c68:	4630      	mov	r0, r6
 8018c6a:	f7ff fe4a 	bl	8018902 <_Bfree>
 8018c6e:	464f      	mov	r7, r9
 8018c70:	106d      	asrs	r5, r5, #1
 8018c72:	d00b      	beq.n	8018c8c <__pow5mult+0x90>
 8018c74:	6820      	ldr	r0, [r4, #0]
 8018c76:	b938      	cbnz	r0, 8018c88 <__pow5mult+0x8c>
 8018c78:	4622      	mov	r2, r4
 8018c7a:	4621      	mov	r1, r4
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	f7ff ff27 	bl	8018ad0 <__multiply>
 8018c82:	6020      	str	r0, [r4, #0]
 8018c84:	f8c0 8000 	str.w	r8, [r0]
 8018c88:	4604      	mov	r4, r0
 8018c8a:	e7e4      	b.n	8018c56 <__pow5mult+0x5a>
 8018c8c:	4638      	mov	r0, r7
 8018c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c92:	bf00      	nop
 8018c94:	0801a618 	.word	0x0801a618

08018c98 <__lshift>:
 8018c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c9c:	460c      	mov	r4, r1
 8018c9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018ca2:	6923      	ldr	r3, [r4, #16]
 8018ca4:	6849      	ldr	r1, [r1, #4]
 8018ca6:	eb0a 0903 	add.w	r9, sl, r3
 8018caa:	68a3      	ldr	r3, [r4, #8]
 8018cac:	4607      	mov	r7, r0
 8018cae:	4616      	mov	r6, r2
 8018cb0:	f109 0501 	add.w	r5, r9, #1
 8018cb4:	42ab      	cmp	r3, r5
 8018cb6:	db32      	blt.n	8018d1e <__lshift+0x86>
 8018cb8:	4638      	mov	r0, r7
 8018cba:	f7ff fdee 	bl	801889a <_Balloc>
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	4680      	mov	r8, r0
 8018cc2:	f100 0114 	add.w	r1, r0, #20
 8018cc6:	461a      	mov	r2, r3
 8018cc8:	4553      	cmp	r3, sl
 8018cca:	db2b      	blt.n	8018d24 <__lshift+0x8c>
 8018ccc:	6920      	ldr	r0, [r4, #16]
 8018cce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cd2:	f104 0314 	add.w	r3, r4, #20
 8018cd6:	f016 021f 	ands.w	r2, r6, #31
 8018cda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018cde:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ce2:	d025      	beq.n	8018d30 <__lshift+0x98>
 8018ce4:	f1c2 0e20 	rsb	lr, r2, #32
 8018ce8:	2000      	movs	r0, #0
 8018cea:	681e      	ldr	r6, [r3, #0]
 8018cec:	468a      	mov	sl, r1
 8018cee:	4096      	lsls	r6, r2
 8018cf0:	4330      	orrs	r0, r6
 8018cf2:	f84a 0b04 	str.w	r0, [sl], #4
 8018cf6:	f853 0b04 	ldr.w	r0, [r3], #4
 8018cfa:	459c      	cmp	ip, r3
 8018cfc:	fa20 f00e 	lsr.w	r0, r0, lr
 8018d00:	d814      	bhi.n	8018d2c <__lshift+0x94>
 8018d02:	6048      	str	r0, [r1, #4]
 8018d04:	b108      	cbz	r0, 8018d0a <__lshift+0x72>
 8018d06:	f109 0502 	add.w	r5, r9, #2
 8018d0a:	3d01      	subs	r5, #1
 8018d0c:	4638      	mov	r0, r7
 8018d0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8018d12:	4621      	mov	r1, r4
 8018d14:	f7ff fdf5 	bl	8018902 <_Bfree>
 8018d18:	4640      	mov	r0, r8
 8018d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d1e:	3101      	adds	r1, #1
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	e7c7      	b.n	8018cb4 <__lshift+0x1c>
 8018d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d28:	3301      	adds	r3, #1
 8018d2a:	e7cd      	b.n	8018cc8 <__lshift+0x30>
 8018d2c:	4651      	mov	r1, sl
 8018d2e:	e7dc      	b.n	8018cea <__lshift+0x52>
 8018d30:	3904      	subs	r1, #4
 8018d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d36:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d3a:	459c      	cmp	ip, r3
 8018d3c:	d8f9      	bhi.n	8018d32 <__lshift+0x9a>
 8018d3e:	e7e4      	b.n	8018d0a <__lshift+0x72>

08018d40 <__mcmp>:
 8018d40:	6903      	ldr	r3, [r0, #16]
 8018d42:	690a      	ldr	r2, [r1, #16]
 8018d44:	1a9b      	subs	r3, r3, r2
 8018d46:	b530      	push	{r4, r5, lr}
 8018d48:	d10c      	bne.n	8018d64 <__mcmp+0x24>
 8018d4a:	0092      	lsls	r2, r2, #2
 8018d4c:	3014      	adds	r0, #20
 8018d4e:	3114      	adds	r1, #20
 8018d50:	1884      	adds	r4, r0, r2
 8018d52:	4411      	add	r1, r2
 8018d54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d5c:	4295      	cmp	r5, r2
 8018d5e:	d003      	beq.n	8018d68 <__mcmp+0x28>
 8018d60:	d305      	bcc.n	8018d6e <__mcmp+0x2e>
 8018d62:	2301      	movs	r3, #1
 8018d64:	4618      	mov	r0, r3
 8018d66:	bd30      	pop	{r4, r5, pc}
 8018d68:	42a0      	cmp	r0, r4
 8018d6a:	d3f3      	bcc.n	8018d54 <__mcmp+0x14>
 8018d6c:	e7fa      	b.n	8018d64 <__mcmp+0x24>
 8018d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d72:	e7f7      	b.n	8018d64 <__mcmp+0x24>

08018d74 <__mdiff>:
 8018d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d78:	460d      	mov	r5, r1
 8018d7a:	4607      	mov	r7, r0
 8018d7c:	4611      	mov	r1, r2
 8018d7e:	4628      	mov	r0, r5
 8018d80:	4614      	mov	r4, r2
 8018d82:	f7ff ffdd 	bl	8018d40 <__mcmp>
 8018d86:	1e06      	subs	r6, r0, #0
 8018d88:	d108      	bne.n	8018d9c <__mdiff+0x28>
 8018d8a:	4631      	mov	r1, r6
 8018d8c:	4638      	mov	r0, r7
 8018d8e:	f7ff fd84 	bl	801889a <_Balloc>
 8018d92:	2301      	movs	r3, #1
 8018d94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d9c:	bfa4      	itt	ge
 8018d9e:	4623      	movge	r3, r4
 8018da0:	462c      	movge	r4, r5
 8018da2:	4638      	mov	r0, r7
 8018da4:	6861      	ldr	r1, [r4, #4]
 8018da6:	bfa6      	itte	ge
 8018da8:	461d      	movge	r5, r3
 8018daa:	2600      	movge	r6, #0
 8018dac:	2601      	movlt	r6, #1
 8018dae:	f7ff fd74 	bl	801889a <_Balloc>
 8018db2:	692b      	ldr	r3, [r5, #16]
 8018db4:	60c6      	str	r6, [r0, #12]
 8018db6:	6926      	ldr	r6, [r4, #16]
 8018db8:	f105 0914 	add.w	r9, r5, #20
 8018dbc:	f104 0214 	add.w	r2, r4, #20
 8018dc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018dc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018dc8:	f100 0514 	add.w	r5, r0, #20
 8018dcc:	f04f 0e00 	mov.w	lr, #0
 8018dd0:	f852 ab04 	ldr.w	sl, [r2], #4
 8018dd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8018dd8:	fa1e f18a 	uxtah	r1, lr, sl
 8018ddc:	b2a3      	uxth	r3, r4
 8018dde:	1ac9      	subs	r1, r1, r3
 8018de0:	0c23      	lsrs	r3, r4, #16
 8018de2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018de6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018dea:	b289      	uxth	r1, r1
 8018dec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018df0:	45c8      	cmp	r8, r9
 8018df2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018df6:	4694      	mov	ip, r2
 8018df8:	f845 3b04 	str.w	r3, [r5], #4
 8018dfc:	d8e8      	bhi.n	8018dd0 <__mdiff+0x5c>
 8018dfe:	45bc      	cmp	ip, r7
 8018e00:	d304      	bcc.n	8018e0c <__mdiff+0x98>
 8018e02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018e06:	b183      	cbz	r3, 8018e2a <__mdiff+0xb6>
 8018e08:	6106      	str	r6, [r0, #16]
 8018e0a:	e7c5      	b.n	8018d98 <__mdiff+0x24>
 8018e0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e10:	fa1e f381 	uxtah	r3, lr, r1
 8018e14:	141a      	asrs	r2, r3, #16
 8018e16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018e24:	f845 3b04 	str.w	r3, [r5], #4
 8018e28:	e7e9      	b.n	8018dfe <__mdiff+0x8a>
 8018e2a:	3e01      	subs	r6, #1
 8018e2c:	e7e9      	b.n	8018e02 <__mdiff+0x8e>
	...

08018e30 <__ulp>:
 8018e30:	4b12      	ldr	r3, [pc, #72]	; (8018e7c <__ulp+0x4c>)
 8018e32:	ee10 2a90 	vmov	r2, s1
 8018e36:	401a      	ands	r2, r3
 8018e38:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	dd04      	ble.n	8018e4a <__ulp+0x1a>
 8018e40:	2000      	movs	r0, #0
 8018e42:	4619      	mov	r1, r3
 8018e44:	ec41 0b10 	vmov	d0, r0, r1
 8018e48:	4770      	bx	lr
 8018e4a:	425b      	negs	r3, r3
 8018e4c:	151b      	asrs	r3, r3, #20
 8018e4e:	2b13      	cmp	r3, #19
 8018e50:	f04f 0000 	mov.w	r0, #0
 8018e54:	f04f 0100 	mov.w	r1, #0
 8018e58:	dc04      	bgt.n	8018e64 <__ulp+0x34>
 8018e5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e5e:	fa42 f103 	asr.w	r1, r2, r3
 8018e62:	e7ef      	b.n	8018e44 <__ulp+0x14>
 8018e64:	3b14      	subs	r3, #20
 8018e66:	2b1e      	cmp	r3, #30
 8018e68:	f04f 0201 	mov.w	r2, #1
 8018e6c:	bfda      	itte	le
 8018e6e:	f1c3 031f 	rsble	r3, r3, #31
 8018e72:	fa02 f303 	lslle.w	r3, r2, r3
 8018e76:	4613      	movgt	r3, r2
 8018e78:	4618      	mov	r0, r3
 8018e7a:	e7e3      	b.n	8018e44 <__ulp+0x14>
 8018e7c:	7ff00000 	.word	0x7ff00000

08018e80 <__b2d>:
 8018e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e82:	6905      	ldr	r5, [r0, #16]
 8018e84:	f100 0714 	add.w	r7, r0, #20
 8018e88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018e8c:	1f2e      	subs	r6, r5, #4
 8018e8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018e92:	4620      	mov	r0, r4
 8018e94:	f7ff fdc5 	bl	8018a22 <__hi0bits>
 8018e98:	f1c0 0320 	rsb	r3, r0, #32
 8018e9c:	280a      	cmp	r0, #10
 8018e9e:	600b      	str	r3, [r1, #0]
 8018ea0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018f18 <__b2d+0x98>
 8018ea4:	dc14      	bgt.n	8018ed0 <__b2d+0x50>
 8018ea6:	f1c0 0e0b 	rsb	lr, r0, #11
 8018eaa:	fa24 f10e 	lsr.w	r1, r4, lr
 8018eae:	42b7      	cmp	r7, r6
 8018eb0:	ea41 030c 	orr.w	r3, r1, ip
 8018eb4:	bf34      	ite	cc
 8018eb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018eba:	2100      	movcs	r1, #0
 8018ebc:	3015      	adds	r0, #21
 8018ebe:	fa04 f000 	lsl.w	r0, r4, r0
 8018ec2:	fa21 f10e 	lsr.w	r1, r1, lr
 8018ec6:	ea40 0201 	orr.w	r2, r0, r1
 8018eca:	ec43 2b10 	vmov	d0, r2, r3
 8018ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ed0:	42b7      	cmp	r7, r6
 8018ed2:	bf3a      	itte	cc
 8018ed4:	f1a5 0608 	subcc.w	r6, r5, #8
 8018ed8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018edc:	2100      	movcs	r1, #0
 8018ede:	380b      	subs	r0, #11
 8018ee0:	d015      	beq.n	8018f0e <__b2d+0x8e>
 8018ee2:	4084      	lsls	r4, r0
 8018ee4:	f1c0 0520 	rsb	r5, r0, #32
 8018ee8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018eec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018ef0:	42be      	cmp	r6, r7
 8018ef2:	fa21 fc05 	lsr.w	ip, r1, r5
 8018ef6:	ea44 030c 	orr.w	r3, r4, ip
 8018efa:	bf8c      	ite	hi
 8018efc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018f00:	2400      	movls	r4, #0
 8018f02:	fa01 f000 	lsl.w	r0, r1, r0
 8018f06:	40ec      	lsrs	r4, r5
 8018f08:	ea40 0204 	orr.w	r2, r0, r4
 8018f0c:	e7dd      	b.n	8018eca <__b2d+0x4a>
 8018f0e:	ea44 030c 	orr.w	r3, r4, ip
 8018f12:	460a      	mov	r2, r1
 8018f14:	e7d9      	b.n	8018eca <__b2d+0x4a>
 8018f16:	bf00      	nop
 8018f18:	3ff00000 	.word	0x3ff00000

08018f1c <__d2b>:
 8018f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f20:	460e      	mov	r6, r1
 8018f22:	2101      	movs	r1, #1
 8018f24:	ec59 8b10 	vmov	r8, r9, d0
 8018f28:	4615      	mov	r5, r2
 8018f2a:	f7ff fcb6 	bl	801889a <_Balloc>
 8018f2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018f32:	4607      	mov	r7, r0
 8018f34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f38:	bb34      	cbnz	r4, 8018f88 <__d2b+0x6c>
 8018f3a:	9301      	str	r3, [sp, #4]
 8018f3c:	f1b8 0300 	subs.w	r3, r8, #0
 8018f40:	d027      	beq.n	8018f92 <__d2b+0x76>
 8018f42:	a802      	add	r0, sp, #8
 8018f44:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018f48:	f7ff fd8a 	bl	8018a60 <__lo0bits>
 8018f4c:	9900      	ldr	r1, [sp, #0]
 8018f4e:	b1f0      	cbz	r0, 8018f8e <__d2b+0x72>
 8018f50:	9a01      	ldr	r2, [sp, #4]
 8018f52:	f1c0 0320 	rsb	r3, r0, #32
 8018f56:	fa02 f303 	lsl.w	r3, r2, r3
 8018f5a:	430b      	orrs	r3, r1
 8018f5c:	40c2      	lsrs	r2, r0
 8018f5e:	617b      	str	r3, [r7, #20]
 8018f60:	9201      	str	r2, [sp, #4]
 8018f62:	9b01      	ldr	r3, [sp, #4]
 8018f64:	61bb      	str	r3, [r7, #24]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	bf14      	ite	ne
 8018f6a:	2102      	movne	r1, #2
 8018f6c:	2101      	moveq	r1, #1
 8018f6e:	6139      	str	r1, [r7, #16]
 8018f70:	b1c4      	cbz	r4, 8018fa4 <__d2b+0x88>
 8018f72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f76:	4404      	add	r4, r0
 8018f78:	6034      	str	r4, [r6, #0]
 8018f7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f7e:	6028      	str	r0, [r5, #0]
 8018f80:	4638      	mov	r0, r7
 8018f82:	b003      	add	sp, #12
 8018f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f8c:	e7d5      	b.n	8018f3a <__d2b+0x1e>
 8018f8e:	6179      	str	r1, [r7, #20]
 8018f90:	e7e7      	b.n	8018f62 <__d2b+0x46>
 8018f92:	a801      	add	r0, sp, #4
 8018f94:	f7ff fd64 	bl	8018a60 <__lo0bits>
 8018f98:	9b01      	ldr	r3, [sp, #4]
 8018f9a:	617b      	str	r3, [r7, #20]
 8018f9c:	2101      	movs	r1, #1
 8018f9e:	6139      	str	r1, [r7, #16]
 8018fa0:	3020      	adds	r0, #32
 8018fa2:	e7e5      	b.n	8018f70 <__d2b+0x54>
 8018fa4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018fa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fac:	6030      	str	r0, [r6, #0]
 8018fae:	6918      	ldr	r0, [r3, #16]
 8018fb0:	f7ff fd37 	bl	8018a22 <__hi0bits>
 8018fb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018fb8:	e7e1      	b.n	8018f7e <__d2b+0x62>

08018fba <__ratio>:
 8018fba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fbe:	4688      	mov	r8, r1
 8018fc0:	4669      	mov	r1, sp
 8018fc2:	4681      	mov	r9, r0
 8018fc4:	f7ff ff5c 	bl	8018e80 <__b2d>
 8018fc8:	a901      	add	r1, sp, #4
 8018fca:	4640      	mov	r0, r8
 8018fcc:	ec57 6b10 	vmov	r6, r7, d0
 8018fd0:	f7ff ff56 	bl	8018e80 <__b2d>
 8018fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018fd8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018fdc:	eba3 0c02 	sub.w	ip, r3, r2
 8018fe0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018fe4:	1a9b      	subs	r3, r3, r2
 8018fe6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018fea:	ec5b ab10 	vmov	sl, fp, d0
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	bfce      	itee	gt
 8018ff2:	463a      	movgt	r2, r7
 8018ff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ff8:	465a      	movle	r2, fp
 8018ffa:	4659      	mov	r1, fp
 8018ffc:	463d      	mov	r5, r7
 8018ffe:	bfd4      	ite	le
 8019000:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019004:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019008:	4630      	mov	r0, r6
 801900a:	ee10 2a10 	vmov	r2, s0
 801900e:	460b      	mov	r3, r1
 8019010:	4629      	mov	r1, r5
 8019012:	f7e7 fc33 	bl	800087c <__aeabi_ddiv>
 8019016:	ec41 0b10 	vmov	d0, r0, r1
 801901a:	b003      	add	sp, #12
 801901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019020 <__copybits>:
 8019020:	3901      	subs	r1, #1
 8019022:	b510      	push	{r4, lr}
 8019024:	1149      	asrs	r1, r1, #5
 8019026:	6914      	ldr	r4, [r2, #16]
 8019028:	3101      	adds	r1, #1
 801902a:	f102 0314 	add.w	r3, r2, #20
 801902e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019032:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019036:	42a3      	cmp	r3, r4
 8019038:	4602      	mov	r2, r0
 801903a:	d303      	bcc.n	8019044 <__copybits+0x24>
 801903c:	2300      	movs	r3, #0
 801903e:	428a      	cmp	r2, r1
 8019040:	d305      	bcc.n	801904e <__copybits+0x2e>
 8019042:	bd10      	pop	{r4, pc}
 8019044:	f853 2b04 	ldr.w	r2, [r3], #4
 8019048:	f840 2b04 	str.w	r2, [r0], #4
 801904c:	e7f3      	b.n	8019036 <__copybits+0x16>
 801904e:	f842 3b04 	str.w	r3, [r2], #4
 8019052:	e7f4      	b.n	801903e <__copybits+0x1e>

08019054 <__any_on>:
 8019054:	f100 0214 	add.w	r2, r0, #20
 8019058:	6900      	ldr	r0, [r0, #16]
 801905a:	114b      	asrs	r3, r1, #5
 801905c:	4298      	cmp	r0, r3
 801905e:	b510      	push	{r4, lr}
 8019060:	db11      	blt.n	8019086 <__any_on+0x32>
 8019062:	dd0a      	ble.n	801907a <__any_on+0x26>
 8019064:	f011 011f 	ands.w	r1, r1, #31
 8019068:	d007      	beq.n	801907a <__any_on+0x26>
 801906a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801906e:	fa24 f001 	lsr.w	r0, r4, r1
 8019072:	fa00 f101 	lsl.w	r1, r0, r1
 8019076:	428c      	cmp	r4, r1
 8019078:	d10b      	bne.n	8019092 <__any_on+0x3e>
 801907a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801907e:	4293      	cmp	r3, r2
 8019080:	d803      	bhi.n	801908a <__any_on+0x36>
 8019082:	2000      	movs	r0, #0
 8019084:	bd10      	pop	{r4, pc}
 8019086:	4603      	mov	r3, r0
 8019088:	e7f7      	b.n	801907a <__any_on+0x26>
 801908a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801908e:	2900      	cmp	r1, #0
 8019090:	d0f5      	beq.n	801907e <__any_on+0x2a>
 8019092:	2001      	movs	r0, #1
 8019094:	e7f6      	b.n	8019084 <__any_on+0x30>

08019096 <_calloc_r>:
 8019096:	b538      	push	{r3, r4, r5, lr}
 8019098:	fb02 f401 	mul.w	r4, r2, r1
 801909c:	4621      	mov	r1, r4
 801909e:	f000 f857 	bl	8019150 <_malloc_r>
 80190a2:	4605      	mov	r5, r0
 80190a4:	b118      	cbz	r0, 80190ae <_calloc_r+0x18>
 80190a6:	4622      	mov	r2, r4
 80190a8:	2100      	movs	r1, #0
 80190aa:	f7fc fca1 	bl	80159f0 <memset>
 80190ae:	4628      	mov	r0, r5
 80190b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080190b4 <_free_r>:
 80190b4:	b538      	push	{r3, r4, r5, lr}
 80190b6:	4605      	mov	r5, r0
 80190b8:	2900      	cmp	r1, #0
 80190ba:	d045      	beq.n	8019148 <_free_r+0x94>
 80190bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190c0:	1f0c      	subs	r4, r1, #4
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	bfb8      	it	lt
 80190c6:	18e4      	addlt	r4, r4, r3
 80190c8:	f000 fe30 	bl	8019d2c <__malloc_lock>
 80190cc:	4a1f      	ldr	r2, [pc, #124]	; (801914c <_free_r+0x98>)
 80190ce:	6813      	ldr	r3, [r2, #0]
 80190d0:	4610      	mov	r0, r2
 80190d2:	b933      	cbnz	r3, 80190e2 <_free_r+0x2e>
 80190d4:	6063      	str	r3, [r4, #4]
 80190d6:	6014      	str	r4, [r2, #0]
 80190d8:	4628      	mov	r0, r5
 80190da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190de:	f000 be26 	b.w	8019d2e <__malloc_unlock>
 80190e2:	42a3      	cmp	r3, r4
 80190e4:	d90c      	bls.n	8019100 <_free_r+0x4c>
 80190e6:	6821      	ldr	r1, [r4, #0]
 80190e8:	1862      	adds	r2, r4, r1
 80190ea:	4293      	cmp	r3, r2
 80190ec:	bf04      	itt	eq
 80190ee:	681a      	ldreq	r2, [r3, #0]
 80190f0:	685b      	ldreq	r3, [r3, #4]
 80190f2:	6063      	str	r3, [r4, #4]
 80190f4:	bf04      	itt	eq
 80190f6:	1852      	addeq	r2, r2, r1
 80190f8:	6022      	streq	r2, [r4, #0]
 80190fa:	6004      	str	r4, [r0, #0]
 80190fc:	e7ec      	b.n	80190d8 <_free_r+0x24>
 80190fe:	4613      	mov	r3, r2
 8019100:	685a      	ldr	r2, [r3, #4]
 8019102:	b10a      	cbz	r2, 8019108 <_free_r+0x54>
 8019104:	42a2      	cmp	r2, r4
 8019106:	d9fa      	bls.n	80190fe <_free_r+0x4a>
 8019108:	6819      	ldr	r1, [r3, #0]
 801910a:	1858      	adds	r0, r3, r1
 801910c:	42a0      	cmp	r0, r4
 801910e:	d10b      	bne.n	8019128 <_free_r+0x74>
 8019110:	6820      	ldr	r0, [r4, #0]
 8019112:	4401      	add	r1, r0
 8019114:	1858      	adds	r0, r3, r1
 8019116:	4282      	cmp	r2, r0
 8019118:	6019      	str	r1, [r3, #0]
 801911a:	d1dd      	bne.n	80190d8 <_free_r+0x24>
 801911c:	6810      	ldr	r0, [r2, #0]
 801911e:	6852      	ldr	r2, [r2, #4]
 8019120:	605a      	str	r2, [r3, #4]
 8019122:	4401      	add	r1, r0
 8019124:	6019      	str	r1, [r3, #0]
 8019126:	e7d7      	b.n	80190d8 <_free_r+0x24>
 8019128:	d902      	bls.n	8019130 <_free_r+0x7c>
 801912a:	230c      	movs	r3, #12
 801912c:	602b      	str	r3, [r5, #0]
 801912e:	e7d3      	b.n	80190d8 <_free_r+0x24>
 8019130:	6820      	ldr	r0, [r4, #0]
 8019132:	1821      	adds	r1, r4, r0
 8019134:	428a      	cmp	r2, r1
 8019136:	bf04      	itt	eq
 8019138:	6811      	ldreq	r1, [r2, #0]
 801913a:	6852      	ldreq	r2, [r2, #4]
 801913c:	6062      	str	r2, [r4, #4]
 801913e:	bf04      	itt	eq
 8019140:	1809      	addeq	r1, r1, r0
 8019142:	6021      	streq	r1, [r4, #0]
 8019144:	605c      	str	r4, [r3, #4]
 8019146:	e7c7      	b.n	80190d8 <_free_r+0x24>
 8019148:	bd38      	pop	{r3, r4, r5, pc}
 801914a:	bf00      	nop
 801914c:	20042498 	.word	0x20042498

08019150 <_malloc_r>:
 8019150:	b570      	push	{r4, r5, r6, lr}
 8019152:	1ccd      	adds	r5, r1, #3
 8019154:	f025 0503 	bic.w	r5, r5, #3
 8019158:	3508      	adds	r5, #8
 801915a:	2d0c      	cmp	r5, #12
 801915c:	bf38      	it	cc
 801915e:	250c      	movcc	r5, #12
 8019160:	2d00      	cmp	r5, #0
 8019162:	4606      	mov	r6, r0
 8019164:	db01      	blt.n	801916a <_malloc_r+0x1a>
 8019166:	42a9      	cmp	r1, r5
 8019168:	d903      	bls.n	8019172 <_malloc_r+0x22>
 801916a:	230c      	movs	r3, #12
 801916c:	6033      	str	r3, [r6, #0]
 801916e:	2000      	movs	r0, #0
 8019170:	bd70      	pop	{r4, r5, r6, pc}
 8019172:	f000 fddb 	bl	8019d2c <__malloc_lock>
 8019176:	4a21      	ldr	r2, [pc, #132]	; (80191fc <_malloc_r+0xac>)
 8019178:	6814      	ldr	r4, [r2, #0]
 801917a:	4621      	mov	r1, r4
 801917c:	b991      	cbnz	r1, 80191a4 <_malloc_r+0x54>
 801917e:	4c20      	ldr	r4, [pc, #128]	; (8019200 <_malloc_r+0xb0>)
 8019180:	6823      	ldr	r3, [r4, #0]
 8019182:	b91b      	cbnz	r3, 801918c <_malloc_r+0x3c>
 8019184:	4630      	mov	r0, r6
 8019186:	f000 fc91 	bl	8019aac <_sbrk_r>
 801918a:	6020      	str	r0, [r4, #0]
 801918c:	4629      	mov	r1, r5
 801918e:	4630      	mov	r0, r6
 8019190:	f000 fc8c 	bl	8019aac <_sbrk_r>
 8019194:	1c43      	adds	r3, r0, #1
 8019196:	d124      	bne.n	80191e2 <_malloc_r+0x92>
 8019198:	230c      	movs	r3, #12
 801919a:	6033      	str	r3, [r6, #0]
 801919c:	4630      	mov	r0, r6
 801919e:	f000 fdc6 	bl	8019d2e <__malloc_unlock>
 80191a2:	e7e4      	b.n	801916e <_malloc_r+0x1e>
 80191a4:	680b      	ldr	r3, [r1, #0]
 80191a6:	1b5b      	subs	r3, r3, r5
 80191a8:	d418      	bmi.n	80191dc <_malloc_r+0x8c>
 80191aa:	2b0b      	cmp	r3, #11
 80191ac:	d90f      	bls.n	80191ce <_malloc_r+0x7e>
 80191ae:	600b      	str	r3, [r1, #0]
 80191b0:	50cd      	str	r5, [r1, r3]
 80191b2:	18cc      	adds	r4, r1, r3
 80191b4:	4630      	mov	r0, r6
 80191b6:	f000 fdba 	bl	8019d2e <__malloc_unlock>
 80191ba:	f104 000b 	add.w	r0, r4, #11
 80191be:	1d23      	adds	r3, r4, #4
 80191c0:	f020 0007 	bic.w	r0, r0, #7
 80191c4:	1ac3      	subs	r3, r0, r3
 80191c6:	d0d3      	beq.n	8019170 <_malloc_r+0x20>
 80191c8:	425a      	negs	r2, r3
 80191ca:	50e2      	str	r2, [r4, r3]
 80191cc:	e7d0      	b.n	8019170 <_malloc_r+0x20>
 80191ce:	428c      	cmp	r4, r1
 80191d0:	684b      	ldr	r3, [r1, #4]
 80191d2:	bf16      	itet	ne
 80191d4:	6063      	strne	r3, [r4, #4]
 80191d6:	6013      	streq	r3, [r2, #0]
 80191d8:	460c      	movne	r4, r1
 80191da:	e7eb      	b.n	80191b4 <_malloc_r+0x64>
 80191dc:	460c      	mov	r4, r1
 80191de:	6849      	ldr	r1, [r1, #4]
 80191e0:	e7cc      	b.n	801917c <_malloc_r+0x2c>
 80191e2:	1cc4      	adds	r4, r0, #3
 80191e4:	f024 0403 	bic.w	r4, r4, #3
 80191e8:	42a0      	cmp	r0, r4
 80191ea:	d005      	beq.n	80191f8 <_malloc_r+0xa8>
 80191ec:	1a21      	subs	r1, r4, r0
 80191ee:	4630      	mov	r0, r6
 80191f0:	f000 fc5c 	bl	8019aac <_sbrk_r>
 80191f4:	3001      	adds	r0, #1
 80191f6:	d0cf      	beq.n	8019198 <_malloc_r+0x48>
 80191f8:	6025      	str	r5, [r4, #0]
 80191fa:	e7db      	b.n	80191b4 <_malloc_r+0x64>
 80191fc:	20042498 	.word	0x20042498
 8019200:	2004249c 	.word	0x2004249c

08019204 <__ssputs_r>:
 8019204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019208:	688e      	ldr	r6, [r1, #8]
 801920a:	429e      	cmp	r6, r3
 801920c:	4682      	mov	sl, r0
 801920e:	460c      	mov	r4, r1
 8019210:	4690      	mov	r8, r2
 8019212:	4699      	mov	r9, r3
 8019214:	d837      	bhi.n	8019286 <__ssputs_r+0x82>
 8019216:	898a      	ldrh	r2, [r1, #12]
 8019218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801921c:	d031      	beq.n	8019282 <__ssputs_r+0x7e>
 801921e:	6825      	ldr	r5, [r4, #0]
 8019220:	6909      	ldr	r1, [r1, #16]
 8019222:	1a6f      	subs	r7, r5, r1
 8019224:	6965      	ldr	r5, [r4, #20]
 8019226:	2302      	movs	r3, #2
 8019228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801922c:	fb95 f5f3 	sdiv	r5, r5, r3
 8019230:	f109 0301 	add.w	r3, r9, #1
 8019234:	443b      	add	r3, r7
 8019236:	429d      	cmp	r5, r3
 8019238:	bf38      	it	cc
 801923a:	461d      	movcc	r5, r3
 801923c:	0553      	lsls	r3, r2, #21
 801923e:	d530      	bpl.n	80192a2 <__ssputs_r+0x9e>
 8019240:	4629      	mov	r1, r5
 8019242:	f7ff ff85 	bl	8019150 <_malloc_r>
 8019246:	4606      	mov	r6, r0
 8019248:	b950      	cbnz	r0, 8019260 <__ssputs_r+0x5c>
 801924a:	230c      	movs	r3, #12
 801924c:	f8ca 3000 	str.w	r3, [sl]
 8019250:	89a3      	ldrh	r3, [r4, #12]
 8019252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019256:	81a3      	strh	r3, [r4, #12]
 8019258:	f04f 30ff 	mov.w	r0, #4294967295
 801925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019260:	463a      	mov	r2, r7
 8019262:	6921      	ldr	r1, [r4, #16]
 8019264:	f7ff fb0e 	bl	8018884 <memcpy>
 8019268:	89a3      	ldrh	r3, [r4, #12]
 801926a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801926e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019272:	81a3      	strh	r3, [r4, #12]
 8019274:	6126      	str	r6, [r4, #16]
 8019276:	6165      	str	r5, [r4, #20]
 8019278:	443e      	add	r6, r7
 801927a:	1bed      	subs	r5, r5, r7
 801927c:	6026      	str	r6, [r4, #0]
 801927e:	60a5      	str	r5, [r4, #8]
 8019280:	464e      	mov	r6, r9
 8019282:	454e      	cmp	r6, r9
 8019284:	d900      	bls.n	8019288 <__ssputs_r+0x84>
 8019286:	464e      	mov	r6, r9
 8019288:	4632      	mov	r2, r6
 801928a:	4641      	mov	r1, r8
 801928c:	6820      	ldr	r0, [r4, #0]
 801928e:	f000 fd34 	bl	8019cfa <memmove>
 8019292:	68a3      	ldr	r3, [r4, #8]
 8019294:	1b9b      	subs	r3, r3, r6
 8019296:	60a3      	str	r3, [r4, #8]
 8019298:	6823      	ldr	r3, [r4, #0]
 801929a:	441e      	add	r6, r3
 801929c:	6026      	str	r6, [r4, #0]
 801929e:	2000      	movs	r0, #0
 80192a0:	e7dc      	b.n	801925c <__ssputs_r+0x58>
 80192a2:	462a      	mov	r2, r5
 80192a4:	f000 fd44 	bl	8019d30 <_realloc_r>
 80192a8:	4606      	mov	r6, r0
 80192aa:	2800      	cmp	r0, #0
 80192ac:	d1e2      	bne.n	8019274 <__ssputs_r+0x70>
 80192ae:	6921      	ldr	r1, [r4, #16]
 80192b0:	4650      	mov	r0, sl
 80192b2:	f7ff feff 	bl	80190b4 <_free_r>
 80192b6:	e7c8      	b.n	801924a <__ssputs_r+0x46>

080192b8 <_svfiprintf_r>:
 80192b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192bc:	461d      	mov	r5, r3
 80192be:	898b      	ldrh	r3, [r1, #12]
 80192c0:	061f      	lsls	r7, r3, #24
 80192c2:	b09d      	sub	sp, #116	; 0x74
 80192c4:	4680      	mov	r8, r0
 80192c6:	460c      	mov	r4, r1
 80192c8:	4616      	mov	r6, r2
 80192ca:	d50f      	bpl.n	80192ec <_svfiprintf_r+0x34>
 80192cc:	690b      	ldr	r3, [r1, #16]
 80192ce:	b96b      	cbnz	r3, 80192ec <_svfiprintf_r+0x34>
 80192d0:	2140      	movs	r1, #64	; 0x40
 80192d2:	f7ff ff3d 	bl	8019150 <_malloc_r>
 80192d6:	6020      	str	r0, [r4, #0]
 80192d8:	6120      	str	r0, [r4, #16]
 80192da:	b928      	cbnz	r0, 80192e8 <_svfiprintf_r+0x30>
 80192dc:	230c      	movs	r3, #12
 80192de:	f8c8 3000 	str.w	r3, [r8]
 80192e2:	f04f 30ff 	mov.w	r0, #4294967295
 80192e6:	e0c8      	b.n	801947a <_svfiprintf_r+0x1c2>
 80192e8:	2340      	movs	r3, #64	; 0x40
 80192ea:	6163      	str	r3, [r4, #20]
 80192ec:	2300      	movs	r3, #0
 80192ee:	9309      	str	r3, [sp, #36]	; 0x24
 80192f0:	2320      	movs	r3, #32
 80192f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192f6:	2330      	movs	r3, #48	; 0x30
 80192f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192fc:	9503      	str	r5, [sp, #12]
 80192fe:	f04f 0b01 	mov.w	fp, #1
 8019302:	4637      	mov	r7, r6
 8019304:	463d      	mov	r5, r7
 8019306:	f815 3b01 	ldrb.w	r3, [r5], #1
 801930a:	b10b      	cbz	r3, 8019310 <_svfiprintf_r+0x58>
 801930c:	2b25      	cmp	r3, #37	; 0x25
 801930e:	d13e      	bne.n	801938e <_svfiprintf_r+0xd6>
 8019310:	ebb7 0a06 	subs.w	sl, r7, r6
 8019314:	d00b      	beq.n	801932e <_svfiprintf_r+0x76>
 8019316:	4653      	mov	r3, sl
 8019318:	4632      	mov	r2, r6
 801931a:	4621      	mov	r1, r4
 801931c:	4640      	mov	r0, r8
 801931e:	f7ff ff71 	bl	8019204 <__ssputs_r>
 8019322:	3001      	adds	r0, #1
 8019324:	f000 80a4 	beq.w	8019470 <_svfiprintf_r+0x1b8>
 8019328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801932a:	4453      	add	r3, sl
 801932c:	9309      	str	r3, [sp, #36]	; 0x24
 801932e:	783b      	ldrb	r3, [r7, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	f000 809d 	beq.w	8019470 <_svfiprintf_r+0x1b8>
 8019336:	2300      	movs	r3, #0
 8019338:	f04f 32ff 	mov.w	r2, #4294967295
 801933c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019340:	9304      	str	r3, [sp, #16]
 8019342:	9307      	str	r3, [sp, #28]
 8019344:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019348:	931a      	str	r3, [sp, #104]	; 0x68
 801934a:	462f      	mov	r7, r5
 801934c:	2205      	movs	r2, #5
 801934e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019352:	4850      	ldr	r0, [pc, #320]	; (8019494 <_svfiprintf_r+0x1dc>)
 8019354:	f7e6 ff5c 	bl	8000210 <memchr>
 8019358:	9b04      	ldr	r3, [sp, #16]
 801935a:	b9d0      	cbnz	r0, 8019392 <_svfiprintf_r+0xda>
 801935c:	06d9      	lsls	r1, r3, #27
 801935e:	bf44      	itt	mi
 8019360:	2220      	movmi	r2, #32
 8019362:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019366:	071a      	lsls	r2, r3, #28
 8019368:	bf44      	itt	mi
 801936a:	222b      	movmi	r2, #43	; 0x2b
 801936c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019370:	782a      	ldrb	r2, [r5, #0]
 8019372:	2a2a      	cmp	r2, #42	; 0x2a
 8019374:	d015      	beq.n	80193a2 <_svfiprintf_r+0xea>
 8019376:	9a07      	ldr	r2, [sp, #28]
 8019378:	462f      	mov	r7, r5
 801937a:	2000      	movs	r0, #0
 801937c:	250a      	movs	r5, #10
 801937e:	4639      	mov	r1, r7
 8019380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019384:	3b30      	subs	r3, #48	; 0x30
 8019386:	2b09      	cmp	r3, #9
 8019388:	d94d      	bls.n	8019426 <_svfiprintf_r+0x16e>
 801938a:	b1b8      	cbz	r0, 80193bc <_svfiprintf_r+0x104>
 801938c:	e00f      	b.n	80193ae <_svfiprintf_r+0xf6>
 801938e:	462f      	mov	r7, r5
 8019390:	e7b8      	b.n	8019304 <_svfiprintf_r+0x4c>
 8019392:	4a40      	ldr	r2, [pc, #256]	; (8019494 <_svfiprintf_r+0x1dc>)
 8019394:	1a80      	subs	r0, r0, r2
 8019396:	fa0b f000 	lsl.w	r0, fp, r0
 801939a:	4318      	orrs	r0, r3
 801939c:	9004      	str	r0, [sp, #16]
 801939e:	463d      	mov	r5, r7
 80193a0:	e7d3      	b.n	801934a <_svfiprintf_r+0x92>
 80193a2:	9a03      	ldr	r2, [sp, #12]
 80193a4:	1d11      	adds	r1, r2, #4
 80193a6:	6812      	ldr	r2, [r2, #0]
 80193a8:	9103      	str	r1, [sp, #12]
 80193aa:	2a00      	cmp	r2, #0
 80193ac:	db01      	blt.n	80193b2 <_svfiprintf_r+0xfa>
 80193ae:	9207      	str	r2, [sp, #28]
 80193b0:	e004      	b.n	80193bc <_svfiprintf_r+0x104>
 80193b2:	4252      	negs	r2, r2
 80193b4:	f043 0302 	orr.w	r3, r3, #2
 80193b8:	9207      	str	r2, [sp, #28]
 80193ba:	9304      	str	r3, [sp, #16]
 80193bc:	783b      	ldrb	r3, [r7, #0]
 80193be:	2b2e      	cmp	r3, #46	; 0x2e
 80193c0:	d10c      	bne.n	80193dc <_svfiprintf_r+0x124>
 80193c2:	787b      	ldrb	r3, [r7, #1]
 80193c4:	2b2a      	cmp	r3, #42	; 0x2a
 80193c6:	d133      	bne.n	8019430 <_svfiprintf_r+0x178>
 80193c8:	9b03      	ldr	r3, [sp, #12]
 80193ca:	1d1a      	adds	r2, r3, #4
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	9203      	str	r2, [sp, #12]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	bfb8      	it	lt
 80193d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80193d8:	3702      	adds	r7, #2
 80193da:	9305      	str	r3, [sp, #20]
 80193dc:	4d2e      	ldr	r5, [pc, #184]	; (8019498 <_svfiprintf_r+0x1e0>)
 80193de:	7839      	ldrb	r1, [r7, #0]
 80193e0:	2203      	movs	r2, #3
 80193e2:	4628      	mov	r0, r5
 80193e4:	f7e6 ff14 	bl	8000210 <memchr>
 80193e8:	b138      	cbz	r0, 80193fa <_svfiprintf_r+0x142>
 80193ea:	2340      	movs	r3, #64	; 0x40
 80193ec:	1b40      	subs	r0, r0, r5
 80193ee:	fa03 f000 	lsl.w	r0, r3, r0
 80193f2:	9b04      	ldr	r3, [sp, #16]
 80193f4:	4303      	orrs	r3, r0
 80193f6:	3701      	adds	r7, #1
 80193f8:	9304      	str	r3, [sp, #16]
 80193fa:	7839      	ldrb	r1, [r7, #0]
 80193fc:	4827      	ldr	r0, [pc, #156]	; (801949c <_svfiprintf_r+0x1e4>)
 80193fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019402:	2206      	movs	r2, #6
 8019404:	1c7e      	adds	r6, r7, #1
 8019406:	f7e6 ff03 	bl	8000210 <memchr>
 801940a:	2800      	cmp	r0, #0
 801940c:	d038      	beq.n	8019480 <_svfiprintf_r+0x1c8>
 801940e:	4b24      	ldr	r3, [pc, #144]	; (80194a0 <_svfiprintf_r+0x1e8>)
 8019410:	bb13      	cbnz	r3, 8019458 <_svfiprintf_r+0x1a0>
 8019412:	9b03      	ldr	r3, [sp, #12]
 8019414:	3307      	adds	r3, #7
 8019416:	f023 0307 	bic.w	r3, r3, #7
 801941a:	3308      	adds	r3, #8
 801941c:	9303      	str	r3, [sp, #12]
 801941e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019420:	444b      	add	r3, r9
 8019422:	9309      	str	r3, [sp, #36]	; 0x24
 8019424:	e76d      	b.n	8019302 <_svfiprintf_r+0x4a>
 8019426:	fb05 3202 	mla	r2, r5, r2, r3
 801942a:	2001      	movs	r0, #1
 801942c:	460f      	mov	r7, r1
 801942e:	e7a6      	b.n	801937e <_svfiprintf_r+0xc6>
 8019430:	2300      	movs	r3, #0
 8019432:	3701      	adds	r7, #1
 8019434:	9305      	str	r3, [sp, #20]
 8019436:	4619      	mov	r1, r3
 8019438:	250a      	movs	r5, #10
 801943a:	4638      	mov	r0, r7
 801943c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019440:	3a30      	subs	r2, #48	; 0x30
 8019442:	2a09      	cmp	r2, #9
 8019444:	d903      	bls.n	801944e <_svfiprintf_r+0x196>
 8019446:	2b00      	cmp	r3, #0
 8019448:	d0c8      	beq.n	80193dc <_svfiprintf_r+0x124>
 801944a:	9105      	str	r1, [sp, #20]
 801944c:	e7c6      	b.n	80193dc <_svfiprintf_r+0x124>
 801944e:	fb05 2101 	mla	r1, r5, r1, r2
 8019452:	2301      	movs	r3, #1
 8019454:	4607      	mov	r7, r0
 8019456:	e7f0      	b.n	801943a <_svfiprintf_r+0x182>
 8019458:	ab03      	add	r3, sp, #12
 801945a:	9300      	str	r3, [sp, #0]
 801945c:	4622      	mov	r2, r4
 801945e:	4b11      	ldr	r3, [pc, #68]	; (80194a4 <_svfiprintf_r+0x1ec>)
 8019460:	a904      	add	r1, sp, #16
 8019462:	4640      	mov	r0, r8
 8019464:	f7fc fb60 	bl	8015b28 <_printf_float>
 8019468:	f1b0 3fff 	cmp.w	r0, #4294967295
 801946c:	4681      	mov	r9, r0
 801946e:	d1d6      	bne.n	801941e <_svfiprintf_r+0x166>
 8019470:	89a3      	ldrh	r3, [r4, #12]
 8019472:	065b      	lsls	r3, r3, #25
 8019474:	f53f af35 	bmi.w	80192e2 <_svfiprintf_r+0x2a>
 8019478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801947a:	b01d      	add	sp, #116	; 0x74
 801947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019480:	ab03      	add	r3, sp, #12
 8019482:	9300      	str	r3, [sp, #0]
 8019484:	4622      	mov	r2, r4
 8019486:	4b07      	ldr	r3, [pc, #28]	; (80194a4 <_svfiprintf_r+0x1ec>)
 8019488:	a904      	add	r1, sp, #16
 801948a:	4640      	mov	r0, r8
 801948c:	f7fc fe02 	bl	8016094 <_printf_i>
 8019490:	e7ea      	b.n	8019468 <_svfiprintf_r+0x1b0>
 8019492:	bf00      	nop
 8019494:	0801a624 	.word	0x0801a624
 8019498:	0801a62a 	.word	0x0801a62a
 801949c:	0801a62e 	.word	0x0801a62e
 80194a0:	08015b29 	.word	0x08015b29
 80194a4:	08019205 	.word	0x08019205

080194a8 <_sungetc_r>:
 80194a8:	b538      	push	{r3, r4, r5, lr}
 80194aa:	1c4b      	adds	r3, r1, #1
 80194ac:	4614      	mov	r4, r2
 80194ae:	d103      	bne.n	80194b8 <_sungetc_r+0x10>
 80194b0:	f04f 35ff 	mov.w	r5, #4294967295
 80194b4:	4628      	mov	r0, r5
 80194b6:	bd38      	pop	{r3, r4, r5, pc}
 80194b8:	8993      	ldrh	r3, [r2, #12]
 80194ba:	f023 0320 	bic.w	r3, r3, #32
 80194be:	8193      	strh	r3, [r2, #12]
 80194c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80194c2:	6852      	ldr	r2, [r2, #4]
 80194c4:	b2cd      	uxtb	r5, r1
 80194c6:	b18b      	cbz	r3, 80194ec <_sungetc_r+0x44>
 80194c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80194ca:	4293      	cmp	r3, r2
 80194cc:	dd08      	ble.n	80194e0 <_sungetc_r+0x38>
 80194ce:	6823      	ldr	r3, [r4, #0]
 80194d0:	1e5a      	subs	r2, r3, #1
 80194d2:	6022      	str	r2, [r4, #0]
 80194d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80194d8:	6863      	ldr	r3, [r4, #4]
 80194da:	3301      	adds	r3, #1
 80194dc:	6063      	str	r3, [r4, #4]
 80194de:	e7e9      	b.n	80194b4 <_sungetc_r+0xc>
 80194e0:	4621      	mov	r1, r4
 80194e2:	f000 fbc3 	bl	8019c6c <__submore>
 80194e6:	2800      	cmp	r0, #0
 80194e8:	d0f1      	beq.n	80194ce <_sungetc_r+0x26>
 80194ea:	e7e1      	b.n	80194b0 <_sungetc_r+0x8>
 80194ec:	6921      	ldr	r1, [r4, #16]
 80194ee:	6823      	ldr	r3, [r4, #0]
 80194f0:	b151      	cbz	r1, 8019508 <_sungetc_r+0x60>
 80194f2:	4299      	cmp	r1, r3
 80194f4:	d208      	bcs.n	8019508 <_sungetc_r+0x60>
 80194f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80194fa:	42a9      	cmp	r1, r5
 80194fc:	d104      	bne.n	8019508 <_sungetc_r+0x60>
 80194fe:	3b01      	subs	r3, #1
 8019500:	3201      	adds	r2, #1
 8019502:	6023      	str	r3, [r4, #0]
 8019504:	6062      	str	r2, [r4, #4]
 8019506:	e7d5      	b.n	80194b4 <_sungetc_r+0xc>
 8019508:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801950c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019510:	6363      	str	r3, [r4, #52]	; 0x34
 8019512:	2303      	movs	r3, #3
 8019514:	63a3      	str	r3, [r4, #56]	; 0x38
 8019516:	4623      	mov	r3, r4
 8019518:	f803 5f46 	strb.w	r5, [r3, #70]!
 801951c:	6023      	str	r3, [r4, #0]
 801951e:	2301      	movs	r3, #1
 8019520:	e7dc      	b.n	80194dc <_sungetc_r+0x34>

08019522 <__ssrefill_r>:
 8019522:	b510      	push	{r4, lr}
 8019524:	460c      	mov	r4, r1
 8019526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019528:	b169      	cbz	r1, 8019546 <__ssrefill_r+0x24>
 801952a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801952e:	4299      	cmp	r1, r3
 8019530:	d001      	beq.n	8019536 <__ssrefill_r+0x14>
 8019532:	f7ff fdbf 	bl	80190b4 <_free_r>
 8019536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019538:	6063      	str	r3, [r4, #4]
 801953a:	2000      	movs	r0, #0
 801953c:	6360      	str	r0, [r4, #52]	; 0x34
 801953e:	b113      	cbz	r3, 8019546 <__ssrefill_r+0x24>
 8019540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019542:	6023      	str	r3, [r4, #0]
 8019544:	bd10      	pop	{r4, pc}
 8019546:	6923      	ldr	r3, [r4, #16]
 8019548:	6023      	str	r3, [r4, #0]
 801954a:	2300      	movs	r3, #0
 801954c:	6063      	str	r3, [r4, #4]
 801954e:	89a3      	ldrh	r3, [r4, #12]
 8019550:	f043 0320 	orr.w	r3, r3, #32
 8019554:	81a3      	strh	r3, [r4, #12]
 8019556:	f04f 30ff 	mov.w	r0, #4294967295
 801955a:	e7f3      	b.n	8019544 <__ssrefill_r+0x22>

0801955c <__ssvfiscanf_r>:
 801955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019560:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019564:	460c      	mov	r4, r1
 8019566:	2100      	movs	r1, #0
 8019568:	9144      	str	r1, [sp, #272]	; 0x110
 801956a:	9145      	str	r1, [sp, #276]	; 0x114
 801956c:	499f      	ldr	r1, [pc, #636]	; (80197ec <__ssvfiscanf_r+0x290>)
 801956e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019570:	f10d 0804 	add.w	r8, sp, #4
 8019574:	499e      	ldr	r1, [pc, #632]	; (80197f0 <__ssvfiscanf_r+0x294>)
 8019576:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80197f4 <__ssvfiscanf_r+0x298>
 801957a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801957e:	4606      	mov	r6, r0
 8019580:	4692      	mov	sl, r2
 8019582:	91a1      	str	r1, [sp, #644]	; 0x284
 8019584:	9300      	str	r3, [sp, #0]
 8019586:	270a      	movs	r7, #10
 8019588:	f89a 3000 	ldrb.w	r3, [sl]
 801958c:	2b00      	cmp	r3, #0
 801958e:	f000 812a 	beq.w	80197e6 <__ssvfiscanf_r+0x28a>
 8019592:	4655      	mov	r5, sl
 8019594:	f7ff f93e 	bl	8018814 <__locale_ctype_ptr>
 8019598:	f815 bb01 	ldrb.w	fp, [r5], #1
 801959c:	4458      	add	r0, fp
 801959e:	7843      	ldrb	r3, [r0, #1]
 80195a0:	f013 0308 	ands.w	r3, r3, #8
 80195a4:	d01c      	beq.n	80195e0 <__ssvfiscanf_r+0x84>
 80195a6:	6863      	ldr	r3, [r4, #4]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	dd12      	ble.n	80195d2 <__ssvfiscanf_r+0x76>
 80195ac:	f7ff f932 	bl	8018814 <__locale_ctype_ptr>
 80195b0:	6823      	ldr	r3, [r4, #0]
 80195b2:	781a      	ldrb	r2, [r3, #0]
 80195b4:	4410      	add	r0, r2
 80195b6:	7842      	ldrb	r2, [r0, #1]
 80195b8:	0712      	lsls	r2, r2, #28
 80195ba:	d401      	bmi.n	80195c0 <__ssvfiscanf_r+0x64>
 80195bc:	46aa      	mov	sl, r5
 80195be:	e7e3      	b.n	8019588 <__ssvfiscanf_r+0x2c>
 80195c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195c2:	3201      	adds	r2, #1
 80195c4:	9245      	str	r2, [sp, #276]	; 0x114
 80195c6:	6862      	ldr	r2, [r4, #4]
 80195c8:	3301      	adds	r3, #1
 80195ca:	3a01      	subs	r2, #1
 80195cc:	6062      	str	r2, [r4, #4]
 80195ce:	6023      	str	r3, [r4, #0]
 80195d0:	e7e9      	b.n	80195a6 <__ssvfiscanf_r+0x4a>
 80195d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195d4:	4621      	mov	r1, r4
 80195d6:	4630      	mov	r0, r6
 80195d8:	4798      	blx	r3
 80195da:	2800      	cmp	r0, #0
 80195dc:	d0e6      	beq.n	80195ac <__ssvfiscanf_r+0x50>
 80195de:	e7ed      	b.n	80195bc <__ssvfiscanf_r+0x60>
 80195e0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80195e4:	f040 8082 	bne.w	80196ec <__ssvfiscanf_r+0x190>
 80195e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80195ea:	9341      	str	r3, [sp, #260]	; 0x104
 80195ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80195f0:	2b2a      	cmp	r3, #42	; 0x2a
 80195f2:	d103      	bne.n	80195fc <__ssvfiscanf_r+0xa0>
 80195f4:	2310      	movs	r3, #16
 80195f6:	9341      	str	r3, [sp, #260]	; 0x104
 80195f8:	f10a 0502 	add.w	r5, sl, #2
 80195fc:	46aa      	mov	sl, r5
 80195fe:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019602:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019606:	2a09      	cmp	r2, #9
 8019608:	d922      	bls.n	8019650 <__ssvfiscanf_r+0xf4>
 801960a:	2203      	movs	r2, #3
 801960c:	4879      	ldr	r0, [pc, #484]	; (80197f4 <__ssvfiscanf_r+0x298>)
 801960e:	f7e6 fdff 	bl	8000210 <memchr>
 8019612:	b138      	cbz	r0, 8019624 <__ssvfiscanf_r+0xc8>
 8019614:	eba0 0309 	sub.w	r3, r0, r9
 8019618:	2001      	movs	r0, #1
 801961a:	4098      	lsls	r0, r3
 801961c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801961e:	4318      	orrs	r0, r3
 8019620:	9041      	str	r0, [sp, #260]	; 0x104
 8019622:	46aa      	mov	sl, r5
 8019624:	f89a 3000 	ldrb.w	r3, [sl]
 8019628:	2b67      	cmp	r3, #103	; 0x67
 801962a:	f10a 0501 	add.w	r5, sl, #1
 801962e:	d82b      	bhi.n	8019688 <__ssvfiscanf_r+0x12c>
 8019630:	2b65      	cmp	r3, #101	; 0x65
 8019632:	f080 809f 	bcs.w	8019774 <__ssvfiscanf_r+0x218>
 8019636:	2b47      	cmp	r3, #71	; 0x47
 8019638:	d810      	bhi.n	801965c <__ssvfiscanf_r+0x100>
 801963a:	2b45      	cmp	r3, #69	; 0x45
 801963c:	f080 809a 	bcs.w	8019774 <__ssvfiscanf_r+0x218>
 8019640:	2b00      	cmp	r3, #0
 8019642:	d06c      	beq.n	801971e <__ssvfiscanf_r+0x1c2>
 8019644:	2b25      	cmp	r3, #37	; 0x25
 8019646:	d051      	beq.n	80196ec <__ssvfiscanf_r+0x190>
 8019648:	2303      	movs	r3, #3
 801964a:	9347      	str	r3, [sp, #284]	; 0x11c
 801964c:	9742      	str	r7, [sp, #264]	; 0x108
 801964e:	e027      	b.n	80196a0 <__ssvfiscanf_r+0x144>
 8019650:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019652:	fb07 1303 	mla	r3, r7, r3, r1
 8019656:	3b30      	subs	r3, #48	; 0x30
 8019658:	9343      	str	r3, [sp, #268]	; 0x10c
 801965a:	e7cf      	b.n	80195fc <__ssvfiscanf_r+0xa0>
 801965c:	2b5b      	cmp	r3, #91	; 0x5b
 801965e:	d06a      	beq.n	8019736 <__ssvfiscanf_r+0x1da>
 8019660:	d80c      	bhi.n	801967c <__ssvfiscanf_r+0x120>
 8019662:	2b58      	cmp	r3, #88	; 0x58
 8019664:	d1f0      	bne.n	8019648 <__ssvfiscanf_r+0xec>
 8019666:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801966c:	9241      	str	r2, [sp, #260]	; 0x104
 801966e:	2210      	movs	r2, #16
 8019670:	9242      	str	r2, [sp, #264]	; 0x108
 8019672:	2b6e      	cmp	r3, #110	; 0x6e
 8019674:	bf8c      	ite	hi
 8019676:	2304      	movhi	r3, #4
 8019678:	2303      	movls	r3, #3
 801967a:	e010      	b.n	801969e <__ssvfiscanf_r+0x142>
 801967c:	2b63      	cmp	r3, #99	; 0x63
 801967e:	d065      	beq.n	801974c <__ssvfiscanf_r+0x1f0>
 8019680:	2b64      	cmp	r3, #100	; 0x64
 8019682:	d1e1      	bne.n	8019648 <__ssvfiscanf_r+0xec>
 8019684:	9742      	str	r7, [sp, #264]	; 0x108
 8019686:	e7f4      	b.n	8019672 <__ssvfiscanf_r+0x116>
 8019688:	2b70      	cmp	r3, #112	; 0x70
 801968a:	d04b      	beq.n	8019724 <__ssvfiscanf_r+0x1c8>
 801968c:	d826      	bhi.n	80196dc <__ssvfiscanf_r+0x180>
 801968e:	2b6e      	cmp	r3, #110	; 0x6e
 8019690:	d062      	beq.n	8019758 <__ssvfiscanf_r+0x1fc>
 8019692:	d84c      	bhi.n	801972e <__ssvfiscanf_r+0x1d2>
 8019694:	2b69      	cmp	r3, #105	; 0x69
 8019696:	d1d7      	bne.n	8019648 <__ssvfiscanf_r+0xec>
 8019698:	2300      	movs	r3, #0
 801969a:	9342      	str	r3, [sp, #264]	; 0x108
 801969c:	2303      	movs	r3, #3
 801969e:	9347      	str	r3, [sp, #284]	; 0x11c
 80196a0:	6863      	ldr	r3, [r4, #4]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	dd68      	ble.n	8019778 <__ssvfiscanf_r+0x21c>
 80196a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80196a8:	0659      	lsls	r1, r3, #25
 80196aa:	d407      	bmi.n	80196bc <__ssvfiscanf_r+0x160>
 80196ac:	f7ff f8b2 	bl	8018814 <__locale_ctype_ptr>
 80196b0:	6823      	ldr	r3, [r4, #0]
 80196b2:	781a      	ldrb	r2, [r3, #0]
 80196b4:	4410      	add	r0, r2
 80196b6:	7842      	ldrb	r2, [r0, #1]
 80196b8:	0712      	lsls	r2, r2, #28
 80196ba:	d464      	bmi.n	8019786 <__ssvfiscanf_r+0x22a>
 80196bc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80196be:	2b02      	cmp	r3, #2
 80196c0:	dc73      	bgt.n	80197aa <__ssvfiscanf_r+0x24e>
 80196c2:	466b      	mov	r3, sp
 80196c4:	4622      	mov	r2, r4
 80196c6:	a941      	add	r1, sp, #260	; 0x104
 80196c8:	4630      	mov	r0, r6
 80196ca:	f000 f897 	bl	80197fc <_scanf_chars>
 80196ce:	2801      	cmp	r0, #1
 80196d0:	f000 8089 	beq.w	80197e6 <__ssvfiscanf_r+0x28a>
 80196d4:	2802      	cmp	r0, #2
 80196d6:	f47f af71 	bne.w	80195bc <__ssvfiscanf_r+0x60>
 80196da:	e01d      	b.n	8019718 <__ssvfiscanf_r+0x1bc>
 80196dc:	2b75      	cmp	r3, #117	; 0x75
 80196de:	d0d1      	beq.n	8019684 <__ssvfiscanf_r+0x128>
 80196e0:	2b78      	cmp	r3, #120	; 0x78
 80196e2:	d0c0      	beq.n	8019666 <__ssvfiscanf_r+0x10a>
 80196e4:	2b73      	cmp	r3, #115	; 0x73
 80196e6:	d1af      	bne.n	8019648 <__ssvfiscanf_r+0xec>
 80196e8:	2302      	movs	r3, #2
 80196ea:	e7d8      	b.n	801969e <__ssvfiscanf_r+0x142>
 80196ec:	6863      	ldr	r3, [r4, #4]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	dd0c      	ble.n	801970c <__ssvfiscanf_r+0x1b0>
 80196f2:	6823      	ldr	r3, [r4, #0]
 80196f4:	781a      	ldrb	r2, [r3, #0]
 80196f6:	455a      	cmp	r2, fp
 80196f8:	d175      	bne.n	80197e6 <__ssvfiscanf_r+0x28a>
 80196fa:	3301      	adds	r3, #1
 80196fc:	6862      	ldr	r2, [r4, #4]
 80196fe:	6023      	str	r3, [r4, #0]
 8019700:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019702:	3a01      	subs	r2, #1
 8019704:	3301      	adds	r3, #1
 8019706:	6062      	str	r2, [r4, #4]
 8019708:	9345      	str	r3, [sp, #276]	; 0x114
 801970a:	e757      	b.n	80195bc <__ssvfiscanf_r+0x60>
 801970c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801970e:	4621      	mov	r1, r4
 8019710:	4630      	mov	r0, r6
 8019712:	4798      	blx	r3
 8019714:	2800      	cmp	r0, #0
 8019716:	d0ec      	beq.n	80196f2 <__ssvfiscanf_r+0x196>
 8019718:	9844      	ldr	r0, [sp, #272]	; 0x110
 801971a:	2800      	cmp	r0, #0
 801971c:	d159      	bne.n	80197d2 <__ssvfiscanf_r+0x276>
 801971e:	f04f 30ff 	mov.w	r0, #4294967295
 8019722:	e05c      	b.n	80197de <__ssvfiscanf_r+0x282>
 8019724:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019726:	f042 0220 	orr.w	r2, r2, #32
 801972a:	9241      	str	r2, [sp, #260]	; 0x104
 801972c:	e79b      	b.n	8019666 <__ssvfiscanf_r+0x10a>
 801972e:	2308      	movs	r3, #8
 8019730:	9342      	str	r3, [sp, #264]	; 0x108
 8019732:	2304      	movs	r3, #4
 8019734:	e7b3      	b.n	801969e <__ssvfiscanf_r+0x142>
 8019736:	4629      	mov	r1, r5
 8019738:	4640      	mov	r0, r8
 801973a:	f000 f9c7 	bl	8019acc <__sccl>
 801973e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019744:	9341      	str	r3, [sp, #260]	; 0x104
 8019746:	4605      	mov	r5, r0
 8019748:	2301      	movs	r3, #1
 801974a:	e7a8      	b.n	801969e <__ssvfiscanf_r+0x142>
 801974c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801974e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019752:	9341      	str	r3, [sp, #260]	; 0x104
 8019754:	2300      	movs	r3, #0
 8019756:	e7a2      	b.n	801969e <__ssvfiscanf_r+0x142>
 8019758:	9841      	ldr	r0, [sp, #260]	; 0x104
 801975a:	06c3      	lsls	r3, r0, #27
 801975c:	f53f af2e 	bmi.w	80195bc <__ssvfiscanf_r+0x60>
 8019760:	9b00      	ldr	r3, [sp, #0]
 8019762:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019764:	1d19      	adds	r1, r3, #4
 8019766:	9100      	str	r1, [sp, #0]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	07c0      	lsls	r0, r0, #31
 801976c:	bf4c      	ite	mi
 801976e:	801a      	strhmi	r2, [r3, #0]
 8019770:	601a      	strpl	r2, [r3, #0]
 8019772:	e723      	b.n	80195bc <__ssvfiscanf_r+0x60>
 8019774:	2305      	movs	r3, #5
 8019776:	e792      	b.n	801969e <__ssvfiscanf_r+0x142>
 8019778:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801977a:	4621      	mov	r1, r4
 801977c:	4630      	mov	r0, r6
 801977e:	4798      	blx	r3
 8019780:	2800      	cmp	r0, #0
 8019782:	d090      	beq.n	80196a6 <__ssvfiscanf_r+0x14a>
 8019784:	e7c8      	b.n	8019718 <__ssvfiscanf_r+0x1bc>
 8019786:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019788:	3201      	adds	r2, #1
 801978a:	9245      	str	r2, [sp, #276]	; 0x114
 801978c:	6862      	ldr	r2, [r4, #4]
 801978e:	3a01      	subs	r2, #1
 8019790:	2a00      	cmp	r2, #0
 8019792:	6062      	str	r2, [r4, #4]
 8019794:	dd02      	ble.n	801979c <__ssvfiscanf_r+0x240>
 8019796:	3301      	adds	r3, #1
 8019798:	6023      	str	r3, [r4, #0]
 801979a:	e787      	b.n	80196ac <__ssvfiscanf_r+0x150>
 801979c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801979e:	4621      	mov	r1, r4
 80197a0:	4630      	mov	r0, r6
 80197a2:	4798      	blx	r3
 80197a4:	2800      	cmp	r0, #0
 80197a6:	d081      	beq.n	80196ac <__ssvfiscanf_r+0x150>
 80197a8:	e7b6      	b.n	8019718 <__ssvfiscanf_r+0x1bc>
 80197aa:	2b04      	cmp	r3, #4
 80197ac:	dc06      	bgt.n	80197bc <__ssvfiscanf_r+0x260>
 80197ae:	466b      	mov	r3, sp
 80197b0:	4622      	mov	r2, r4
 80197b2:	a941      	add	r1, sp, #260	; 0x104
 80197b4:	4630      	mov	r0, r6
 80197b6:	f000 f885 	bl	80198c4 <_scanf_i>
 80197ba:	e788      	b.n	80196ce <__ssvfiscanf_r+0x172>
 80197bc:	4b0e      	ldr	r3, [pc, #56]	; (80197f8 <__ssvfiscanf_r+0x29c>)
 80197be:	2b00      	cmp	r3, #0
 80197c0:	f43f aefc 	beq.w	80195bc <__ssvfiscanf_r+0x60>
 80197c4:	466b      	mov	r3, sp
 80197c6:	4622      	mov	r2, r4
 80197c8:	a941      	add	r1, sp, #260	; 0x104
 80197ca:	4630      	mov	r0, r6
 80197cc:	f7fc fd74 	bl	80162b8 <_scanf_float>
 80197d0:	e77d      	b.n	80196ce <__ssvfiscanf_r+0x172>
 80197d2:	89a3      	ldrh	r3, [r4, #12]
 80197d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80197d8:	bf18      	it	ne
 80197da:	f04f 30ff 	movne.w	r0, #4294967295
 80197de:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80197e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80197e8:	e7f9      	b.n	80197de <__ssvfiscanf_r+0x282>
 80197ea:	bf00      	nop
 80197ec:	080194a9 	.word	0x080194a9
 80197f0:	08019523 	.word	0x08019523
 80197f4:	0801a62a 	.word	0x0801a62a
 80197f8:	080162b9 	.word	0x080162b9

080197fc <_scanf_chars>:
 80197fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019800:	4615      	mov	r5, r2
 8019802:	688a      	ldr	r2, [r1, #8]
 8019804:	4680      	mov	r8, r0
 8019806:	460c      	mov	r4, r1
 8019808:	b932      	cbnz	r2, 8019818 <_scanf_chars+0x1c>
 801980a:	698a      	ldr	r2, [r1, #24]
 801980c:	2a00      	cmp	r2, #0
 801980e:	bf14      	ite	ne
 8019810:	f04f 32ff 	movne.w	r2, #4294967295
 8019814:	2201      	moveq	r2, #1
 8019816:	608a      	str	r2, [r1, #8]
 8019818:	6822      	ldr	r2, [r4, #0]
 801981a:	06d1      	lsls	r1, r2, #27
 801981c:	bf5f      	itttt	pl
 801981e:	681a      	ldrpl	r2, [r3, #0]
 8019820:	1d11      	addpl	r1, r2, #4
 8019822:	6019      	strpl	r1, [r3, #0]
 8019824:	6817      	ldrpl	r7, [r2, #0]
 8019826:	2600      	movs	r6, #0
 8019828:	69a3      	ldr	r3, [r4, #24]
 801982a:	b1db      	cbz	r3, 8019864 <_scanf_chars+0x68>
 801982c:	2b01      	cmp	r3, #1
 801982e:	d107      	bne.n	8019840 <_scanf_chars+0x44>
 8019830:	682b      	ldr	r3, [r5, #0]
 8019832:	6962      	ldr	r2, [r4, #20]
 8019834:	781b      	ldrb	r3, [r3, #0]
 8019836:	5cd3      	ldrb	r3, [r2, r3]
 8019838:	b9a3      	cbnz	r3, 8019864 <_scanf_chars+0x68>
 801983a:	2e00      	cmp	r6, #0
 801983c:	d132      	bne.n	80198a4 <_scanf_chars+0xa8>
 801983e:	e006      	b.n	801984e <_scanf_chars+0x52>
 8019840:	2b02      	cmp	r3, #2
 8019842:	d007      	beq.n	8019854 <_scanf_chars+0x58>
 8019844:	2e00      	cmp	r6, #0
 8019846:	d12d      	bne.n	80198a4 <_scanf_chars+0xa8>
 8019848:	69a3      	ldr	r3, [r4, #24]
 801984a:	2b01      	cmp	r3, #1
 801984c:	d12a      	bne.n	80198a4 <_scanf_chars+0xa8>
 801984e:	2001      	movs	r0, #1
 8019850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019854:	f7fe ffde 	bl	8018814 <__locale_ctype_ptr>
 8019858:	682b      	ldr	r3, [r5, #0]
 801985a:	781b      	ldrb	r3, [r3, #0]
 801985c:	4418      	add	r0, r3
 801985e:	7843      	ldrb	r3, [r0, #1]
 8019860:	071b      	lsls	r3, r3, #28
 8019862:	d4ef      	bmi.n	8019844 <_scanf_chars+0x48>
 8019864:	6823      	ldr	r3, [r4, #0]
 8019866:	06da      	lsls	r2, r3, #27
 8019868:	bf5e      	ittt	pl
 801986a:	682b      	ldrpl	r3, [r5, #0]
 801986c:	781b      	ldrbpl	r3, [r3, #0]
 801986e:	703b      	strbpl	r3, [r7, #0]
 8019870:	682a      	ldr	r2, [r5, #0]
 8019872:	686b      	ldr	r3, [r5, #4]
 8019874:	f102 0201 	add.w	r2, r2, #1
 8019878:	602a      	str	r2, [r5, #0]
 801987a:	68a2      	ldr	r2, [r4, #8]
 801987c:	f103 33ff 	add.w	r3, r3, #4294967295
 8019880:	f102 32ff 	add.w	r2, r2, #4294967295
 8019884:	606b      	str	r3, [r5, #4]
 8019886:	f106 0601 	add.w	r6, r6, #1
 801988a:	bf58      	it	pl
 801988c:	3701      	addpl	r7, #1
 801988e:	60a2      	str	r2, [r4, #8]
 8019890:	b142      	cbz	r2, 80198a4 <_scanf_chars+0xa8>
 8019892:	2b00      	cmp	r3, #0
 8019894:	dcc8      	bgt.n	8019828 <_scanf_chars+0x2c>
 8019896:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801989a:	4629      	mov	r1, r5
 801989c:	4640      	mov	r0, r8
 801989e:	4798      	blx	r3
 80198a0:	2800      	cmp	r0, #0
 80198a2:	d0c1      	beq.n	8019828 <_scanf_chars+0x2c>
 80198a4:	6823      	ldr	r3, [r4, #0]
 80198a6:	f013 0310 	ands.w	r3, r3, #16
 80198aa:	d105      	bne.n	80198b8 <_scanf_chars+0xbc>
 80198ac:	68e2      	ldr	r2, [r4, #12]
 80198ae:	3201      	adds	r2, #1
 80198b0:	60e2      	str	r2, [r4, #12]
 80198b2:	69a2      	ldr	r2, [r4, #24]
 80198b4:	b102      	cbz	r2, 80198b8 <_scanf_chars+0xbc>
 80198b6:	703b      	strb	r3, [r7, #0]
 80198b8:	6923      	ldr	r3, [r4, #16]
 80198ba:	441e      	add	r6, r3
 80198bc:	6126      	str	r6, [r4, #16]
 80198be:	2000      	movs	r0, #0
 80198c0:	e7c6      	b.n	8019850 <_scanf_chars+0x54>
	...

080198c4 <_scanf_i>:
 80198c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c8:	469a      	mov	sl, r3
 80198ca:	4b74      	ldr	r3, [pc, #464]	; (8019a9c <_scanf_i+0x1d8>)
 80198cc:	460c      	mov	r4, r1
 80198ce:	4683      	mov	fp, r0
 80198d0:	4616      	mov	r6, r2
 80198d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198d6:	b087      	sub	sp, #28
 80198d8:	ab03      	add	r3, sp, #12
 80198da:	68a7      	ldr	r7, [r4, #8]
 80198dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198e0:	4b6f      	ldr	r3, [pc, #444]	; (8019aa0 <_scanf_i+0x1dc>)
 80198e2:	69a1      	ldr	r1, [r4, #24]
 80198e4:	4a6f      	ldr	r2, [pc, #444]	; (8019aa4 <_scanf_i+0x1e0>)
 80198e6:	2903      	cmp	r1, #3
 80198e8:	bf08      	it	eq
 80198ea:	461a      	moveq	r2, r3
 80198ec:	1e7b      	subs	r3, r7, #1
 80198ee:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80198f2:	bf84      	itt	hi
 80198f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80198f8:	60a3      	strhi	r3, [r4, #8]
 80198fa:	6823      	ldr	r3, [r4, #0]
 80198fc:	9200      	str	r2, [sp, #0]
 80198fe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019902:	bf88      	it	hi
 8019904:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019908:	f104 091c 	add.w	r9, r4, #28
 801990c:	6023      	str	r3, [r4, #0]
 801990e:	bf8c      	ite	hi
 8019910:	197f      	addhi	r7, r7, r5
 8019912:	2700      	movls	r7, #0
 8019914:	464b      	mov	r3, r9
 8019916:	f04f 0800 	mov.w	r8, #0
 801991a:	9301      	str	r3, [sp, #4]
 801991c:	6831      	ldr	r1, [r6, #0]
 801991e:	ab03      	add	r3, sp, #12
 8019920:	2202      	movs	r2, #2
 8019922:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019926:	7809      	ldrb	r1, [r1, #0]
 8019928:	f7e6 fc72 	bl	8000210 <memchr>
 801992c:	9b01      	ldr	r3, [sp, #4]
 801992e:	b330      	cbz	r0, 801997e <_scanf_i+0xba>
 8019930:	f1b8 0f01 	cmp.w	r8, #1
 8019934:	d15a      	bne.n	80199ec <_scanf_i+0x128>
 8019936:	6862      	ldr	r2, [r4, #4]
 8019938:	b92a      	cbnz	r2, 8019946 <_scanf_i+0x82>
 801993a:	6822      	ldr	r2, [r4, #0]
 801993c:	2108      	movs	r1, #8
 801993e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019942:	6061      	str	r1, [r4, #4]
 8019944:	6022      	str	r2, [r4, #0]
 8019946:	6822      	ldr	r2, [r4, #0]
 8019948:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801994c:	6022      	str	r2, [r4, #0]
 801994e:	68a2      	ldr	r2, [r4, #8]
 8019950:	1e51      	subs	r1, r2, #1
 8019952:	60a1      	str	r1, [r4, #8]
 8019954:	b19a      	cbz	r2, 801997e <_scanf_i+0xba>
 8019956:	6832      	ldr	r2, [r6, #0]
 8019958:	1c51      	adds	r1, r2, #1
 801995a:	6031      	str	r1, [r6, #0]
 801995c:	7812      	ldrb	r2, [r2, #0]
 801995e:	701a      	strb	r2, [r3, #0]
 8019960:	1c5d      	adds	r5, r3, #1
 8019962:	6873      	ldr	r3, [r6, #4]
 8019964:	3b01      	subs	r3, #1
 8019966:	2b00      	cmp	r3, #0
 8019968:	6073      	str	r3, [r6, #4]
 801996a:	dc07      	bgt.n	801997c <_scanf_i+0xb8>
 801996c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019970:	4631      	mov	r1, r6
 8019972:	4658      	mov	r0, fp
 8019974:	4798      	blx	r3
 8019976:	2800      	cmp	r0, #0
 8019978:	f040 8086 	bne.w	8019a88 <_scanf_i+0x1c4>
 801997c:	462b      	mov	r3, r5
 801997e:	f108 0801 	add.w	r8, r8, #1
 8019982:	f1b8 0f03 	cmp.w	r8, #3
 8019986:	d1c8      	bne.n	801991a <_scanf_i+0x56>
 8019988:	6862      	ldr	r2, [r4, #4]
 801998a:	b90a      	cbnz	r2, 8019990 <_scanf_i+0xcc>
 801998c:	220a      	movs	r2, #10
 801998e:	6062      	str	r2, [r4, #4]
 8019990:	6862      	ldr	r2, [r4, #4]
 8019992:	4945      	ldr	r1, [pc, #276]	; (8019aa8 <_scanf_i+0x1e4>)
 8019994:	6960      	ldr	r0, [r4, #20]
 8019996:	9301      	str	r3, [sp, #4]
 8019998:	1a89      	subs	r1, r1, r2
 801999a:	f000 f897 	bl	8019acc <__sccl>
 801999e:	9b01      	ldr	r3, [sp, #4]
 80199a0:	f04f 0800 	mov.w	r8, #0
 80199a4:	461d      	mov	r5, r3
 80199a6:	68a3      	ldr	r3, [r4, #8]
 80199a8:	6822      	ldr	r2, [r4, #0]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d03a      	beq.n	8019a24 <_scanf_i+0x160>
 80199ae:	6831      	ldr	r1, [r6, #0]
 80199b0:	6960      	ldr	r0, [r4, #20]
 80199b2:	f891 c000 	ldrb.w	ip, [r1]
 80199b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80199ba:	2800      	cmp	r0, #0
 80199bc:	d032      	beq.n	8019a24 <_scanf_i+0x160>
 80199be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80199c2:	d121      	bne.n	8019a08 <_scanf_i+0x144>
 80199c4:	0510      	lsls	r0, r2, #20
 80199c6:	d51f      	bpl.n	8019a08 <_scanf_i+0x144>
 80199c8:	f108 0801 	add.w	r8, r8, #1
 80199cc:	b117      	cbz	r7, 80199d4 <_scanf_i+0x110>
 80199ce:	3301      	adds	r3, #1
 80199d0:	3f01      	subs	r7, #1
 80199d2:	60a3      	str	r3, [r4, #8]
 80199d4:	6873      	ldr	r3, [r6, #4]
 80199d6:	3b01      	subs	r3, #1
 80199d8:	2b00      	cmp	r3, #0
 80199da:	6073      	str	r3, [r6, #4]
 80199dc:	dd1b      	ble.n	8019a16 <_scanf_i+0x152>
 80199de:	6833      	ldr	r3, [r6, #0]
 80199e0:	3301      	adds	r3, #1
 80199e2:	6033      	str	r3, [r6, #0]
 80199e4:	68a3      	ldr	r3, [r4, #8]
 80199e6:	3b01      	subs	r3, #1
 80199e8:	60a3      	str	r3, [r4, #8]
 80199ea:	e7dc      	b.n	80199a6 <_scanf_i+0xe2>
 80199ec:	f1b8 0f02 	cmp.w	r8, #2
 80199f0:	d1ad      	bne.n	801994e <_scanf_i+0x8a>
 80199f2:	6822      	ldr	r2, [r4, #0]
 80199f4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80199f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80199fc:	d1bf      	bne.n	801997e <_scanf_i+0xba>
 80199fe:	2110      	movs	r1, #16
 8019a00:	6061      	str	r1, [r4, #4]
 8019a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019a06:	e7a1      	b.n	801994c <_scanf_i+0x88>
 8019a08:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019a0c:	6022      	str	r2, [r4, #0]
 8019a0e:	780b      	ldrb	r3, [r1, #0]
 8019a10:	702b      	strb	r3, [r5, #0]
 8019a12:	3501      	adds	r5, #1
 8019a14:	e7de      	b.n	80199d4 <_scanf_i+0x110>
 8019a16:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a1a:	4631      	mov	r1, r6
 8019a1c:	4658      	mov	r0, fp
 8019a1e:	4798      	blx	r3
 8019a20:	2800      	cmp	r0, #0
 8019a22:	d0df      	beq.n	80199e4 <_scanf_i+0x120>
 8019a24:	6823      	ldr	r3, [r4, #0]
 8019a26:	05d9      	lsls	r1, r3, #23
 8019a28:	d50c      	bpl.n	8019a44 <_scanf_i+0x180>
 8019a2a:	454d      	cmp	r5, r9
 8019a2c:	d908      	bls.n	8019a40 <_scanf_i+0x17c>
 8019a2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019a36:	4632      	mov	r2, r6
 8019a38:	4658      	mov	r0, fp
 8019a3a:	4798      	blx	r3
 8019a3c:	1e6f      	subs	r7, r5, #1
 8019a3e:	463d      	mov	r5, r7
 8019a40:	454d      	cmp	r5, r9
 8019a42:	d029      	beq.n	8019a98 <_scanf_i+0x1d4>
 8019a44:	6822      	ldr	r2, [r4, #0]
 8019a46:	f012 0210 	ands.w	r2, r2, #16
 8019a4a:	d113      	bne.n	8019a74 <_scanf_i+0x1b0>
 8019a4c:	702a      	strb	r2, [r5, #0]
 8019a4e:	6863      	ldr	r3, [r4, #4]
 8019a50:	9e00      	ldr	r6, [sp, #0]
 8019a52:	4649      	mov	r1, r9
 8019a54:	4658      	mov	r0, fp
 8019a56:	47b0      	blx	r6
 8019a58:	f8da 3000 	ldr.w	r3, [sl]
 8019a5c:	6821      	ldr	r1, [r4, #0]
 8019a5e:	1d1a      	adds	r2, r3, #4
 8019a60:	f8ca 2000 	str.w	r2, [sl]
 8019a64:	f011 0f20 	tst.w	r1, #32
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	d010      	beq.n	8019a8e <_scanf_i+0x1ca>
 8019a6c:	6018      	str	r0, [r3, #0]
 8019a6e:	68e3      	ldr	r3, [r4, #12]
 8019a70:	3301      	adds	r3, #1
 8019a72:	60e3      	str	r3, [r4, #12]
 8019a74:	eba5 0509 	sub.w	r5, r5, r9
 8019a78:	44a8      	add	r8, r5
 8019a7a:	6925      	ldr	r5, [r4, #16]
 8019a7c:	4445      	add	r5, r8
 8019a7e:	6125      	str	r5, [r4, #16]
 8019a80:	2000      	movs	r0, #0
 8019a82:	b007      	add	sp, #28
 8019a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a88:	f04f 0800 	mov.w	r8, #0
 8019a8c:	e7ca      	b.n	8019a24 <_scanf_i+0x160>
 8019a8e:	07ca      	lsls	r2, r1, #31
 8019a90:	bf4c      	ite	mi
 8019a92:	8018      	strhmi	r0, [r3, #0]
 8019a94:	6018      	strpl	r0, [r3, #0]
 8019a96:	e7ea      	b.n	8019a6e <_scanf_i+0x1aa>
 8019a98:	2001      	movs	r0, #1
 8019a9a:	e7f2      	b.n	8019a82 <_scanf_i+0x1be>
 8019a9c:	0801a1ec 	.word	0x0801a1ec
 8019aa0:	080174d1 	.word	0x080174d1
 8019aa4:	08019c49 	.word	0x08019c49
 8019aa8:	0801a645 	.word	0x0801a645

08019aac <_sbrk_r>:
 8019aac:	b538      	push	{r3, r4, r5, lr}
 8019aae:	4c06      	ldr	r4, [pc, #24]	; (8019ac8 <_sbrk_r+0x1c>)
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	4605      	mov	r5, r0
 8019ab4:	4608      	mov	r0, r1
 8019ab6:	6023      	str	r3, [r4, #0]
 8019ab8:	f7ed ffee 	bl	8007a98 <_sbrk>
 8019abc:	1c43      	adds	r3, r0, #1
 8019abe:	d102      	bne.n	8019ac6 <_sbrk_r+0x1a>
 8019ac0:	6823      	ldr	r3, [r4, #0]
 8019ac2:	b103      	cbz	r3, 8019ac6 <_sbrk_r+0x1a>
 8019ac4:	602b      	str	r3, [r5, #0]
 8019ac6:	bd38      	pop	{r3, r4, r5, pc}
 8019ac8:	20046e34 	.word	0x20046e34

08019acc <__sccl>:
 8019acc:	b570      	push	{r4, r5, r6, lr}
 8019ace:	780b      	ldrb	r3, [r1, #0]
 8019ad0:	2b5e      	cmp	r3, #94	; 0x5e
 8019ad2:	bf13      	iteet	ne
 8019ad4:	1c4a      	addne	r2, r1, #1
 8019ad6:	1c8a      	addeq	r2, r1, #2
 8019ad8:	784b      	ldrbeq	r3, [r1, #1]
 8019ada:	2100      	movne	r1, #0
 8019adc:	bf08      	it	eq
 8019ade:	2101      	moveq	r1, #1
 8019ae0:	1e44      	subs	r4, r0, #1
 8019ae2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019ae6:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019aea:	42ac      	cmp	r4, r5
 8019aec:	d1fb      	bne.n	8019ae6 <__sccl+0x1a>
 8019aee:	b913      	cbnz	r3, 8019af6 <__sccl+0x2a>
 8019af0:	3a01      	subs	r2, #1
 8019af2:	4610      	mov	r0, r2
 8019af4:	bd70      	pop	{r4, r5, r6, pc}
 8019af6:	f081 0401 	eor.w	r4, r1, #1
 8019afa:	54c4      	strb	r4, [r0, r3]
 8019afc:	1c51      	adds	r1, r2, #1
 8019afe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019b02:	2d2d      	cmp	r5, #45	; 0x2d
 8019b04:	f101 36ff 	add.w	r6, r1, #4294967295
 8019b08:	460a      	mov	r2, r1
 8019b0a:	d006      	beq.n	8019b1a <__sccl+0x4e>
 8019b0c:	2d5d      	cmp	r5, #93	; 0x5d
 8019b0e:	d0f0      	beq.n	8019af2 <__sccl+0x26>
 8019b10:	b90d      	cbnz	r5, 8019b16 <__sccl+0x4a>
 8019b12:	4632      	mov	r2, r6
 8019b14:	e7ed      	b.n	8019af2 <__sccl+0x26>
 8019b16:	462b      	mov	r3, r5
 8019b18:	e7ef      	b.n	8019afa <__sccl+0x2e>
 8019b1a:	780e      	ldrb	r6, [r1, #0]
 8019b1c:	2e5d      	cmp	r6, #93	; 0x5d
 8019b1e:	d0fa      	beq.n	8019b16 <__sccl+0x4a>
 8019b20:	42b3      	cmp	r3, r6
 8019b22:	dcf8      	bgt.n	8019b16 <__sccl+0x4a>
 8019b24:	3301      	adds	r3, #1
 8019b26:	429e      	cmp	r6, r3
 8019b28:	54c4      	strb	r4, [r0, r3]
 8019b2a:	dcfb      	bgt.n	8019b24 <__sccl+0x58>
 8019b2c:	3102      	adds	r1, #2
 8019b2e:	e7e6      	b.n	8019afe <__sccl+0x32>

08019b30 <strncmp>:
 8019b30:	b510      	push	{r4, lr}
 8019b32:	b16a      	cbz	r2, 8019b50 <strncmp+0x20>
 8019b34:	3901      	subs	r1, #1
 8019b36:	1884      	adds	r4, r0, r2
 8019b38:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019b3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d103      	bne.n	8019b4c <strncmp+0x1c>
 8019b44:	42a0      	cmp	r0, r4
 8019b46:	d001      	beq.n	8019b4c <strncmp+0x1c>
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d1f5      	bne.n	8019b38 <strncmp+0x8>
 8019b4c:	1a98      	subs	r0, r3, r2
 8019b4e:	bd10      	pop	{r4, pc}
 8019b50:	4610      	mov	r0, r2
 8019b52:	e7fc      	b.n	8019b4e <strncmp+0x1e>

08019b54 <_strtoul_l.isra.0>:
 8019b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b58:	4680      	mov	r8, r0
 8019b5a:	4689      	mov	r9, r1
 8019b5c:	4692      	mov	sl, r2
 8019b5e:	461e      	mov	r6, r3
 8019b60:	460f      	mov	r7, r1
 8019b62:	463d      	mov	r5, r7
 8019b64:	9808      	ldr	r0, [sp, #32]
 8019b66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b6a:	f7fe fe4f 	bl	801880c <__locale_ctype_ptr_l>
 8019b6e:	4420      	add	r0, r4
 8019b70:	7843      	ldrb	r3, [r0, #1]
 8019b72:	f013 0308 	ands.w	r3, r3, #8
 8019b76:	d130      	bne.n	8019bda <_strtoul_l.isra.0+0x86>
 8019b78:	2c2d      	cmp	r4, #45	; 0x2d
 8019b7a:	d130      	bne.n	8019bde <_strtoul_l.isra.0+0x8a>
 8019b7c:	787c      	ldrb	r4, [r7, #1]
 8019b7e:	1cbd      	adds	r5, r7, #2
 8019b80:	2101      	movs	r1, #1
 8019b82:	2e00      	cmp	r6, #0
 8019b84:	d05c      	beq.n	8019c40 <_strtoul_l.isra.0+0xec>
 8019b86:	2e10      	cmp	r6, #16
 8019b88:	d109      	bne.n	8019b9e <_strtoul_l.isra.0+0x4a>
 8019b8a:	2c30      	cmp	r4, #48	; 0x30
 8019b8c:	d107      	bne.n	8019b9e <_strtoul_l.isra.0+0x4a>
 8019b8e:	782b      	ldrb	r3, [r5, #0]
 8019b90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019b94:	2b58      	cmp	r3, #88	; 0x58
 8019b96:	d14e      	bne.n	8019c36 <_strtoul_l.isra.0+0xe2>
 8019b98:	786c      	ldrb	r4, [r5, #1]
 8019b9a:	2610      	movs	r6, #16
 8019b9c:	3502      	adds	r5, #2
 8019b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	fbb2 f2f6 	udiv	r2, r2, r6
 8019ba8:	fb06 fc02 	mul.w	ip, r6, r2
 8019bac:	ea6f 0c0c 	mvn.w	ip, ip
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019bb6:	2f09      	cmp	r7, #9
 8019bb8:	d817      	bhi.n	8019bea <_strtoul_l.isra.0+0x96>
 8019bba:	463c      	mov	r4, r7
 8019bbc:	42a6      	cmp	r6, r4
 8019bbe:	dd23      	ble.n	8019c08 <_strtoul_l.isra.0+0xb4>
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	db1e      	blt.n	8019c02 <_strtoul_l.isra.0+0xae>
 8019bc4:	4282      	cmp	r2, r0
 8019bc6:	d31c      	bcc.n	8019c02 <_strtoul_l.isra.0+0xae>
 8019bc8:	d101      	bne.n	8019bce <_strtoul_l.isra.0+0x7a>
 8019bca:	45a4      	cmp	ip, r4
 8019bcc:	db19      	blt.n	8019c02 <_strtoul_l.isra.0+0xae>
 8019bce:	fb00 4006 	mla	r0, r0, r6, r4
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019bd8:	e7eb      	b.n	8019bb2 <_strtoul_l.isra.0+0x5e>
 8019bda:	462f      	mov	r7, r5
 8019bdc:	e7c1      	b.n	8019b62 <_strtoul_l.isra.0+0xe>
 8019bde:	2c2b      	cmp	r4, #43	; 0x2b
 8019be0:	bf04      	itt	eq
 8019be2:	1cbd      	addeq	r5, r7, #2
 8019be4:	787c      	ldrbeq	r4, [r7, #1]
 8019be6:	4619      	mov	r1, r3
 8019be8:	e7cb      	b.n	8019b82 <_strtoul_l.isra.0+0x2e>
 8019bea:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019bee:	2f19      	cmp	r7, #25
 8019bf0:	d801      	bhi.n	8019bf6 <_strtoul_l.isra.0+0xa2>
 8019bf2:	3c37      	subs	r4, #55	; 0x37
 8019bf4:	e7e2      	b.n	8019bbc <_strtoul_l.isra.0+0x68>
 8019bf6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019bfa:	2f19      	cmp	r7, #25
 8019bfc:	d804      	bhi.n	8019c08 <_strtoul_l.isra.0+0xb4>
 8019bfe:	3c57      	subs	r4, #87	; 0x57
 8019c00:	e7dc      	b.n	8019bbc <_strtoul_l.isra.0+0x68>
 8019c02:	f04f 33ff 	mov.w	r3, #4294967295
 8019c06:	e7e5      	b.n	8019bd4 <_strtoul_l.isra.0+0x80>
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	da09      	bge.n	8019c20 <_strtoul_l.isra.0+0xcc>
 8019c0c:	2322      	movs	r3, #34	; 0x22
 8019c0e:	f8c8 3000 	str.w	r3, [r8]
 8019c12:	f04f 30ff 	mov.w	r0, #4294967295
 8019c16:	f1ba 0f00 	cmp.w	sl, #0
 8019c1a:	d107      	bne.n	8019c2c <_strtoul_l.isra.0+0xd8>
 8019c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c20:	b101      	cbz	r1, 8019c24 <_strtoul_l.isra.0+0xd0>
 8019c22:	4240      	negs	r0, r0
 8019c24:	f1ba 0f00 	cmp.w	sl, #0
 8019c28:	d0f8      	beq.n	8019c1c <_strtoul_l.isra.0+0xc8>
 8019c2a:	b10b      	cbz	r3, 8019c30 <_strtoul_l.isra.0+0xdc>
 8019c2c:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c30:	f8ca 9000 	str.w	r9, [sl]
 8019c34:	e7f2      	b.n	8019c1c <_strtoul_l.isra.0+0xc8>
 8019c36:	2430      	movs	r4, #48	; 0x30
 8019c38:	2e00      	cmp	r6, #0
 8019c3a:	d1b0      	bne.n	8019b9e <_strtoul_l.isra.0+0x4a>
 8019c3c:	2608      	movs	r6, #8
 8019c3e:	e7ae      	b.n	8019b9e <_strtoul_l.isra.0+0x4a>
 8019c40:	2c30      	cmp	r4, #48	; 0x30
 8019c42:	d0a4      	beq.n	8019b8e <_strtoul_l.isra.0+0x3a>
 8019c44:	260a      	movs	r6, #10
 8019c46:	e7aa      	b.n	8019b9e <_strtoul_l.isra.0+0x4a>

08019c48 <_strtoul_r>:
 8019c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c4a:	4c06      	ldr	r4, [pc, #24]	; (8019c64 <_strtoul_r+0x1c>)
 8019c4c:	4d06      	ldr	r5, [pc, #24]	; (8019c68 <_strtoul_r+0x20>)
 8019c4e:	6824      	ldr	r4, [r4, #0]
 8019c50:	6a24      	ldr	r4, [r4, #32]
 8019c52:	2c00      	cmp	r4, #0
 8019c54:	bf08      	it	eq
 8019c56:	462c      	moveq	r4, r5
 8019c58:	9400      	str	r4, [sp, #0]
 8019c5a:	f7ff ff7b 	bl	8019b54 <_strtoul_l.isra.0>
 8019c5e:	b003      	add	sp, #12
 8019c60:	bd30      	pop	{r4, r5, pc}
 8019c62:	bf00      	nop
 8019c64:	2000000c 	.word	0x2000000c
 8019c68:	20000070 	.word	0x20000070

08019c6c <__submore>:
 8019c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c70:	460c      	mov	r4, r1
 8019c72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c78:	4299      	cmp	r1, r3
 8019c7a:	d11d      	bne.n	8019cb8 <__submore+0x4c>
 8019c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019c80:	f7ff fa66 	bl	8019150 <_malloc_r>
 8019c84:	b918      	cbnz	r0, 8019c8e <__submore+0x22>
 8019c86:	f04f 30ff 	mov.w	r0, #4294967295
 8019c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c92:	63a3      	str	r3, [r4, #56]	; 0x38
 8019c94:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019c98:	6360      	str	r0, [r4, #52]	; 0x34
 8019c9a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019c9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019ca2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019ca6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019caa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019cae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019cb2:	6020      	str	r0, [r4, #0]
 8019cb4:	2000      	movs	r0, #0
 8019cb6:	e7e8      	b.n	8019c8a <__submore+0x1e>
 8019cb8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019cba:	0077      	lsls	r7, r6, #1
 8019cbc:	463a      	mov	r2, r7
 8019cbe:	f000 f837 	bl	8019d30 <_realloc_r>
 8019cc2:	4605      	mov	r5, r0
 8019cc4:	2800      	cmp	r0, #0
 8019cc6:	d0de      	beq.n	8019c86 <__submore+0x1a>
 8019cc8:	eb00 0806 	add.w	r8, r0, r6
 8019ccc:	4601      	mov	r1, r0
 8019cce:	4632      	mov	r2, r6
 8019cd0:	4640      	mov	r0, r8
 8019cd2:	f7fe fdd7 	bl	8018884 <memcpy>
 8019cd6:	f8c4 8000 	str.w	r8, [r4]
 8019cda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019cde:	e7e9      	b.n	8019cb4 <__submore+0x48>

08019ce0 <__ascii_wctomb>:
 8019ce0:	b149      	cbz	r1, 8019cf6 <__ascii_wctomb+0x16>
 8019ce2:	2aff      	cmp	r2, #255	; 0xff
 8019ce4:	bf85      	ittet	hi
 8019ce6:	238a      	movhi	r3, #138	; 0x8a
 8019ce8:	6003      	strhi	r3, [r0, #0]
 8019cea:	700a      	strbls	r2, [r1, #0]
 8019cec:	f04f 30ff 	movhi.w	r0, #4294967295
 8019cf0:	bf98      	it	ls
 8019cf2:	2001      	movls	r0, #1
 8019cf4:	4770      	bx	lr
 8019cf6:	4608      	mov	r0, r1
 8019cf8:	4770      	bx	lr

08019cfa <memmove>:
 8019cfa:	4288      	cmp	r0, r1
 8019cfc:	b510      	push	{r4, lr}
 8019cfe:	eb01 0302 	add.w	r3, r1, r2
 8019d02:	d807      	bhi.n	8019d14 <memmove+0x1a>
 8019d04:	1e42      	subs	r2, r0, #1
 8019d06:	4299      	cmp	r1, r3
 8019d08:	d00a      	beq.n	8019d20 <memmove+0x26>
 8019d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019d12:	e7f8      	b.n	8019d06 <memmove+0xc>
 8019d14:	4283      	cmp	r3, r0
 8019d16:	d9f5      	bls.n	8019d04 <memmove+0xa>
 8019d18:	1881      	adds	r1, r0, r2
 8019d1a:	1ad2      	subs	r2, r2, r3
 8019d1c:	42d3      	cmn	r3, r2
 8019d1e:	d100      	bne.n	8019d22 <memmove+0x28>
 8019d20:	bd10      	pop	{r4, pc}
 8019d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019d2a:	e7f7      	b.n	8019d1c <memmove+0x22>

08019d2c <__malloc_lock>:
 8019d2c:	4770      	bx	lr

08019d2e <__malloc_unlock>:
 8019d2e:	4770      	bx	lr

08019d30 <_realloc_r>:
 8019d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d32:	4607      	mov	r7, r0
 8019d34:	4614      	mov	r4, r2
 8019d36:	460e      	mov	r6, r1
 8019d38:	b921      	cbnz	r1, 8019d44 <_realloc_r+0x14>
 8019d3a:	4611      	mov	r1, r2
 8019d3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d40:	f7ff ba06 	b.w	8019150 <_malloc_r>
 8019d44:	b922      	cbnz	r2, 8019d50 <_realloc_r+0x20>
 8019d46:	f7ff f9b5 	bl	80190b4 <_free_r>
 8019d4a:	4625      	mov	r5, r4
 8019d4c:	4628      	mov	r0, r5
 8019d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d50:	f000 f814 	bl	8019d7c <_malloc_usable_size_r>
 8019d54:	42a0      	cmp	r0, r4
 8019d56:	d20f      	bcs.n	8019d78 <_realloc_r+0x48>
 8019d58:	4621      	mov	r1, r4
 8019d5a:	4638      	mov	r0, r7
 8019d5c:	f7ff f9f8 	bl	8019150 <_malloc_r>
 8019d60:	4605      	mov	r5, r0
 8019d62:	2800      	cmp	r0, #0
 8019d64:	d0f2      	beq.n	8019d4c <_realloc_r+0x1c>
 8019d66:	4631      	mov	r1, r6
 8019d68:	4622      	mov	r2, r4
 8019d6a:	f7fe fd8b 	bl	8018884 <memcpy>
 8019d6e:	4631      	mov	r1, r6
 8019d70:	4638      	mov	r0, r7
 8019d72:	f7ff f99f 	bl	80190b4 <_free_r>
 8019d76:	e7e9      	b.n	8019d4c <_realloc_r+0x1c>
 8019d78:	4635      	mov	r5, r6
 8019d7a:	e7e7      	b.n	8019d4c <_realloc_r+0x1c>

08019d7c <_malloc_usable_size_r>:
 8019d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d80:	1f18      	subs	r0, r3, #4
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	bfbc      	itt	lt
 8019d86:	580b      	ldrlt	r3, [r1, r0]
 8019d88:	18c0      	addlt	r0, r0, r3
 8019d8a:	4770      	bx	lr

08019d8c <_init>:
 8019d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d8e:	bf00      	nop
 8019d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d92:	bc08      	pop	{r3}
 8019d94:	469e      	mov	lr, r3
 8019d96:	4770      	bx	lr

08019d98 <_fini>:
 8019d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d9a:	bf00      	nop
 8019d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d9e:	bc08      	pop	{r3}
 8019da0:	469e      	mov	lr, r3
 8019da2:	4770      	bx	lr
