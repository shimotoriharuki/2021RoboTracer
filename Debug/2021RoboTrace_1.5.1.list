
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017198  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  08017358  08017358  00027358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b24  08017b24  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017b24  08017b24  00027b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b2c  08017b2c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017b2c  08017b2c  00027b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b34  08017b34  00027b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b258  200001e0  08017d14  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2003b438  08017d14  0003b438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003568e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075fe  00000000  00000000  0006589a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002100  00000000  00000000  0006ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e40  00000000  00000000  0006ef98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036dcd  00000000  00000000  00070dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000247d5  00000000  00000000  000a7ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001101e5  00000000  00000000  000cc37a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc55f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0d0  00000000  00000000  001dc5dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017340 	.word	0x08017340

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017340 	.word	0x08017340

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 f84c 	bl	8008074 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20038f30 	.word	0x20038f30

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 f834 	bl	8008074 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20038f30 	.word	0x20038f30

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 febd 	bl	8007da0 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fc24 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fc1e 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fc18 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fc12 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fc0c 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fc06 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 fc00 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fbfa 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fbf4 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fbee 	bl	8006874 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fbe2 	bl	8006874 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fbdc 	bl	8006874 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f88d 	bl	8014248 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a fdec 	bl	800bda4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a fde8 	bl	800bda4 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20039184 	.word	0x20039184
 80011f0:	20038e68 	.word	0x20038e68
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fa37 	bl	80018cc <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa4b 	bl	80018f8 <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f f9f1 	bl	801085e <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20037d74 	.word	0x20037d74

0800148c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write_float+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write_float+0x98>)
 80014c6:	f011 ff2f 	bl	8013328 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write_float+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write_float+0x9c>)
 80014d8:	f00f fa35 	bl	8010946 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write_float+0x9c>)
 80014e2:	f00f fa30 	bl	8010946 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write_float+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write_float+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write_float+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write_float+0x9c>)
 80014f4:	f00e ffa1 	bl	801043a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 fa18 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write_float+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017358 	.word	0x08017358
 8001524:	20037ce4 	.word	0x20037ce4
 8001528:	20037d74 	.word	0x20037d74
 800152c:	20037d64 	.word	0x20037d64

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9c0 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f f9ac 	bl	80108b2 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fc17 	bl	8010d8e <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f f9a6 	bl	80108b2 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f9c7 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f011 feca 	bl	8013328 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f f9d3 	bl	8010946 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00e ff44 	bl	801043a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f9bb 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f f945 	bl	801085e <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20037be4 	.word	0x20037be4
 80015e4:	20036aa4 	.word	0x20036aa4
 80015e8:	08017374 	.word	0x08017374
 80015ec:	08017358 	.word	0x08017358
 80015f0:	20037ce4 	.word	0x20037ce4
 80015f4:	20037d74 	.word	0x20037d74
 80015f8:	20037d64 	.word	0x20037d64

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f95a 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f f946 	bl	80108b2 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fbb1 	bl	8010d8e <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f f940 	bl	80108b2 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f961 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f011 fe68 	bl	8013328 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f f971 	bl	8010946 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00e fee2 	bl	801043a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f959 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f f8e3 	bl	801085e <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20037be4 	.word	0x20037be4
 80016a8:	20036aa4 	.word	0x20036aa4
 80016ac:	08017374 	.word	0x08017374
 80016b0:	08017378 	.word	0x08017378
 80016b4:	20037ce4 	.word	0x20037ce4
 80016b8:	20037d74 	.word	0x20037d74
 80016bc:	20037d64 	.word	0x20037d64

080016c0 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f8f6 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e0:	f000 f90a 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016e4:	e019      	b.n	800171a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <sd_read_array_double+0x80>)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <sd_read_array_double+0x84>)
 80016f6:	f011 fe6b 	bl	80133d0 <siscanf>
		i++;
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	db03      	blt.n	800171a <sd_read_array_double+0x5a>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <sd_read_array_double+0x88>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <sd_read_array_double+0x84>)
 8001720:	f00f fd10 	bl	8011144 <f_gets>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1dd      	bne.n	80016e6 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800172a:	f000 f8ff 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <sd_read_array_double+0x88>)
 8001730:	f00f f895 	bl	801085e <f_close>

	return ret;
 8001734:	7d7b      	ldrb	r3, [r7, #21]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08017370 	.word	0x08017370
 8001744:	20037ce4 	.word	0x20037ce4
 8001748:	20037d74 	.word	0x20037d74

0800174c <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f8b2 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <sd_write_array_int+0xa0>)
 8001772:	f00f f89e 	bl	80108b2 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <sd_write_array_int+0xa4>)
 8001778:	f00f fb09 	bl	8010d8e <f_unlink>
		f_chdir("..");
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <sd_write_array_int+0xa8>)
 800177e:	f00f f898 	bl	80108b2 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001782:	f000 f8b9 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001786:	2300      	movs	r3, #0
 8001788:	82fb      	strh	r3, [r7, #22]
 800178a:	e021      	b.n	80017d0 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 800178c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <sd_write_array_int+0xac>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <sd_write_array_int+0xb0>)
 800179e:	f011 fdc3 	bl	8013328 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <sd_write_array_int+0xb4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <sd_write_array_int+0xb4>)
 80017aa:	f00f f8cc 	bl	8010946 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <sd_write_array_int+0xb0>)
 80017b0:	f7fe fd26 	bl	8000200 <strlen>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <sd_write_array_int+0xb8>)
 80017b8:	4910      	ldr	r1, [pc, #64]	; (80017fc <sd_write_array_int+0xb0>)
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <sd_write_array_int+0xb4>)
 80017bc:	f00e fe3d 	bl	801043a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c0:	f000 f8b4 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	82fb      	strh	r3, [r7, #22]
 80017d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbd7      	blt.n	800178c <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <sd_write_array_int+0xb4>)
 80017de:	f00f f83e 	bl	801085e <f_close>

	return ret;
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20037be4 	.word	0x20037be4
 80017f0:	20036aa4 	.word	0x20036aa4
 80017f4:	08017374 	.word	0x08017374
 80017f8:	08017384 	.word	0x08017384
 80017fc:	20037ce4 	.word	0x20037ce4
 8001800:	20037d74 	.word	0x20037d74
 8001804:	20037d64 	.word	0x20037d64

08001808 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f852 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001828:	f000 f866 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800182c:	e019      	b.n	8001862 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <sd_read_array_int+0x80>)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <sd_read_array_int+0x84>)
 800183e:	f011 fdc7 	bl	80133d0 <siscanf>
		i++;
 8001842:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800184e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	429a      	cmp	r2, r3
 8001858:	db03      	blt.n	8001862 <sd_read_array_int+0x5a>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3b01      	subs	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <sd_read_array_int+0x88>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <sd_read_array_int+0x84>)
 8001868:	f00f fc6c 	bl	8011144 <f_gets>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1dd      	bne.n	800182e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001872:	f000 f85b 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <sd_read_array_int+0x88>)
 8001878:	f00e fff1 	bl	801085e <f_close>

	return ret;
 800187c:	7d7b      	ldrb	r3, [r7, #21]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	08017388 	.word	0x08017388
 800188c:	20037ce4 	.word	0x20037ce4
 8001890:	20037d74 	.word	0x20037d74

08001894 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800189e:	2201      	movs	r2, #1
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <sd_mount+0x30>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <sd_mount+0x34>)
 80018a4:	f00e fa58 	bl	800fd58 <f_mount>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <sd_mount+0x20>
 80018ae:	2301      	movs	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e001      	b.n	80018b8 <sd_mount+0x24>
	else ret = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	0801738c 	.word	0x0801738c
 80018c8:	20036ba4 	.word	0x20036ba4

080018cc <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <create_path+0x24>)
 80018da:	f011 fde8 	bl	80134ae <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <create_path+0x28>)
 80018e2:	f011 fde4 	bl	80134ae <strcpy>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20037be4 	.word	0x20037be4
 80018f4:	20036aa4 	.word	0x20036aa4

080018f8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <fopen_folder_and_file+0x24>)
 80018fe:	f00f fb07 	bl	8010f10 <f_mkdir>

	f_chdir(dirpath);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <fopen_folder_and_file+0x24>)
 8001904:	f00e ffd5 	bl	80108b2 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001908:	2213      	movs	r2, #19
 800190a:	4905      	ldr	r1, [pc, #20]	; (8001920 <fopen_folder_and_file+0x28>)
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <fopen_folder_and_file+0x2c>)
 800190e:	f00e fa69 	bl	800fde4 <f_open>

	f_chdir("..");
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <fopen_folder_and_file+0x30>)
 8001914:	f00e ffcd 	bl	80108b2 <f_chdir>


}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20037be4 	.word	0x20037be4
 8001920:	20036aa4 	.word	0x20036aa4
 8001924:	20037d74 	.word	0x20037d74
 8001928:	08017374 	.word	0x08017374

0800192c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e007      	b.n	8001948 <bufclear+0x1c>
		buffer[i] = '\0';
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <bufclear+0x30>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	ddf4      	ble.n	8001938 <bufclear+0xc>
	}
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20037ce4 	.word	0x20037ce4

08001960 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <read_byte+0x54>)
 800197c:	f006 fa10 	bl	8007da0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001980:	f107 010f 	add.w	r1, r7, #15
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2201      	movs	r2, #1
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <read_byte+0x58>)
 800198a:	f009 fbd1 	bl	800b130 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800198e:	f107 010e 	add.w	r1, r7, #14
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2201      	movs	r2, #1
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <read_byte+0x58>)
 8001998:	f009 fcfe 	bl	800b398 <HAL_SPI_Receive>
	CS_SET;
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <read_byte+0x54>)
 80019a4:	f006 f9fc 	bl	8007da0 <HAL_GPIO_WritePin>

	return val;
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020400 	.word	0x40020400
 80019b8:	20038e10 	.word	0x20038e10

080019bc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <write_byte+0x54>)
 80019de:	f006 f9df 	bl	8007da0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2201      	movs	r2, #1
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <write_byte+0x58>)
 80019ec:	f009 fba0 	bl	800b130 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80019f0:	1db9      	adds	r1, r7, #6
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	2201      	movs	r2, #1
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <write_byte+0x58>)
 80019f8:	f009 fb9a 	bl	800b130 <HAL_SPI_Transmit>
	CS_SET;
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <write_byte+0x54>)
 8001a04:	f006 f9cc 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020400 	.word	0x40020400
 8001a14:	20038e10 	.word	0x20038e10

08001a18 <IMU_init>:

uint16_t IMU_init() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff9c 	bl	8001960 <read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	2be0      	cmp	r3, #224	; 0xe0
 8001a30:	d119      	bne.n	8001a66 <IMU_init+0x4e>
		ret = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001a36:	2101      	movs	r1, #1
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffbf 	bl	80019bc <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001a3e:	2110      	movs	r1, #16
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7ff ffbb 	bl	80019bc <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001a46:	2120      	movs	r1, #32
 8001a48:	207f      	movs	r0, #127	; 0x7f
 8001a4a:	f7ff ffb7 	bl	80019bc <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001a4e:	2106      	movs	r1, #6
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffb3 	bl	80019bc <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001a56:	2106      	movs	r1, #6
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff ffaf 	bl	80019bc <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	207f      	movs	r0, #127	; 0x7f
 8001a62:	f7ff ffab 	bl	80019bc <write_byte>
	}
	return ret;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <read_gyro_data>:

void read_gyro_data() {
 8001a70:	b598      	push	{r3, r4, r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a74:	2033      	movs	r0, #51	; 0x33
 8001a76:	f7ff ff73 	bl	8001960 <read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	2034      	movs	r0, #52	; 0x34
 8001a82:	f7ff ff6d 	bl	8001960 <read_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <read_gyro_data+0x64>)
 8001a90:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a92:	2035      	movs	r0, #53	; 0x35
 8001a94:	f7ff ff64 	bl	8001960 <read_byte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21c      	sxth	r4, r3
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f7ff ff5e 	bl	8001960 <read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <read_gyro_data+0x68>)
 8001aae:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001ab0:	2037      	movs	r0, #55	; 0x37
 8001ab2:	f7ff ff55 	bl	8001960 <read_byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21c      	sxth	r4, r3
 8001abc:	2038      	movs	r0, #56	; 0x38
 8001abe:	f7ff ff4f 	bl	8001960 <read_byte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <read_gyro_data+0x6c>)
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	bd98      	pop	{r3, r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20038dac 	.word	0x20038dac
 8001ad8:	20038daa 	.word	0x20038daa
 8001adc:	20038da4 	.word	0x20038da4

08001ae0 <read_accel_data>:

void read_accel_data() {
 8001ae0:	b598      	push	{r3, r4, r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001ae4:	202d      	movs	r0, #45	; 0x2d
 8001ae6:	f7ff ff3b 	bl	8001960 <read_byte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21c      	sxth	r4, r3
 8001af0:	202e      	movs	r0, #46	; 0x2e
 8001af2:	f7ff ff35 	bl	8001960 <read_byte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4323      	orrs	r3, r4
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <read_accel_data+0x64>)
 8001b00:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001b02:	202f      	movs	r0, #47	; 0x2f
 8001b04:	f7ff ff2c 	bl	8001960 <read_byte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21c      	sxth	r4, r3
 8001b0e:	2030      	movs	r0, #48	; 0x30
 8001b10:	f7ff ff26 	bl	8001960 <read_byte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <read_accel_data+0x68>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001b20:	2031      	movs	r0, #49	; 0x31
 8001b22:	f7ff ff1d 	bl	8001960 <read_byte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	2032      	movs	r0, #50	; 0x32
 8001b2e:	f7ff ff17 	bl	8001960 <read_byte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4323      	orrs	r3, r4
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <read_accel_data+0x6c>)
 8001b3c:	801a      	strh	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	bd98      	pop	{r3, r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20038da8 	.word	0x20038da8
 8001b48:	20038dae 	.word	0x20038dae
 8001b4c:	20038da6 	.word	0x20038da6

08001b50 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001b50:	b490      	push	{r4, r7}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	805a      	strh	r2, [r3, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	809a      	strh	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	80da      	strh	r2, [r3, #6]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	811a      	strh	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	815a      	strh	r2, [r3, #10]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc90      	pop	{r4, r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001ba0:	f7ff ff3a 	bl	8001a18 <IMU_init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <_ZN3IMU4initEv+0x24>)
 8001bae:	f011 fb39 	bl	8013224 <iprintf>

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08017390 	.word	0x08017390

08001bc0 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001bc8:	f7ff ff52 	bl	8001a70 <read_gyro_data>
	read_accel_data();
 8001bcc:	f7ff ff88 	bl	8001ae0 <read_accel_data>

	xa_ = xa;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_ZN3IMU12updateValuesEv+0x54>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_ZN3IMU12updateValuesEv+0x58>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <_ZN3IMU12updateValuesEv+0x5c>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <_ZN3IMU12updateValuesEv+0x60>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <_ZN3IMU12updateValuesEv+0x64>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <_ZN3IMU12updateValuesEv+0x68>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	815a      	strh	r2, [r3, #10]

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20038da8 	.word	0x20038da8
 8001c18:	20038dae 	.word	0x20038dae
 8001c1c:	20038da6 	.word	0x20038da6
 8001c20:	20038dac 	.word	0x20038dac
 8001c24:	20038daa 	.word	0x20038daa
 8001c28:	20038da4 	.word	0x20038da4
 8001c2c:	00000000 	.word	0x00000000

08001c30 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc88 	bl	8000554 <__aeabi_i2d>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001c56:	a315      	add	r3, pc, #84	; (adr r3, 8001cac <_ZN3IMU8getOmegaEv+0x7c>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c60:	f7fe fe0c 	bl	800087c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c6e:	a311      	add	r3, pc, #68	; (adr r3, 8001cb4 <_ZN3IMU8getOmegaEv+0x84>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fcd6 	bl	8000628 <__aeabi_dmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4618      	mov	r0, r3
 8001c82:	4621      	mov	r1, r4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_ZN3IMU8getOmegaEv+0x78>)
 8001c8a:	f7fe fdf7 	bl	800087c <__aeabi_ddiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c96:	eeb0 0a47 	vmov.f32	s0, s14
 8001c9a:	eef0 0a67 	vmov.f32	s1, s15
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	40668000 	.word	0x40668000
 8001cac:	66666666 	.word	0x66666666
 8001cb0:	40306666 	.word	0x40306666
 8001cb4:	54411744 	.word	0x54411744
 8001cb8:	400921fb 	.word	0x400921fb

08001cbc <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	b299      	uxth	r1, r3
 8001cd0:	1dfa      	adds	r2, r7, #7
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <INA260_read+0x50>)
 8001cda:	f006 f9cb 	bl	8008074 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	f107 020c 	add.w	r2, r7, #12
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2302      	movs	r3, #2
 8001cec:	4807      	ldr	r0, [pc, #28]	; (8001d0c <INA260_read+0x50>)
 8001cee:	f006 fabf 	bl	8008270 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001cf2:	7b3b      	ldrb	r3, [r7, #12]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7b7b      	ldrb	r3, [r7, #13]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d02:	89fb      	ldrh	r3, [r7, #14]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20038fc4 	.word	0x20038fc4

08001d10 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4604      	mov	r4, r0
 8001d18:	4608      	mov	r0, r1
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	4603      	mov	r3, r0
 8001d24:	71bb      	strb	r3, [r7, #6]
 8001d26:	460b      	mov	r3, r1
 8001d28:	717b      	strb	r3, [r7, #5]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	733b      	strb	r3, [r7, #12]
 8001d32:	79bb      	ldrb	r3, [r7, #6]
 8001d34:	737b      	strb	r3, [r7, #13]
 8001d36:	797b      	ldrb	r3, [r7, #5]
 8001d38:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d3a:	793b      	ldrb	r3, [r7, #4]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2303      	movs	r3, #3
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <INA260_write+0x48>)
 8001d4a:	f006 f993 	bl	8008074 <HAL_I2C_Master_Transmit>
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20038fc4 	.word	0x20038fc4

08001d5c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	460b      	mov	r3, r1
 8001d68:	71bb      	strb	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d6e:	797b      	ldrb	r3, [r7, #5]
 8001d70:	79ba      	ldrb	r2, [r7, #6]
 8001d72:	79f9      	ldrb	r1, [r7, #7]
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff ffcb 	bl	8001d10 <INA260_write>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	21df      	movs	r1, #223	; 0xdf
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff ffe2 	bl	8001d5c <setConfig>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
{

}
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc8:	482a      	ldr	r0, [pc, #168]	; (8001e74 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dca:	f005 ffd1 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <_ZN8JoyStick8getValueEv+0x2e>
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001de6:	2101      	movs	r1, #1
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <_ZN8JoyStick8getValueEv+0xc0>)
 8001dea:	f005 ffc1 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <_ZN8JoyStick8getValueEv+0x4e>
 8001dfe:	89fb      	ldrh	r3, [r7, #14]
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0a:	481a      	ldr	r0, [pc, #104]	; (8001e74 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e0c:	f005 ffb0 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <_ZN8JoyStick8getValueEv+0x70>
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4814      	ldr	r0, [pc, #80]	; (8001e7c <_ZN8JoyStick8getValueEv+0xc4>)
 8001e2c:	f005 ffa0 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <_ZN8JoyStick8getValueEv+0x90>
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	480a      	ldr	r0, [pc, #40]	; (8001e74 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e4c:	f005 ff90 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <_ZN8JoyStick8getValueEv+0xb0>
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e68:	89fb      	ldrh	r3, [r7, #14]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40020400 	.word	0x40020400

08001e80 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b52      	cmp	r3, #82	; 0x52
 8001e90:	d112      	bne.n	8001eb8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e98:	4856      	ldr	r0, [pc, #344]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f005 ff81 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ea4:	4853      	ldr	r0, [pc, #332]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ea6:	f005 ff7b 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb0:	4850      	ldr	r0, [pc, #320]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001eb2:	f005 ff75 	bl	8007da0 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eb6:	e098      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b47      	cmp	r3, #71	; 0x47
 8001ebc:	d112      	bne.n	8001ee4 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec4:	484b      	ldr	r0, [pc, #300]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f005 ff6b 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed0:	4848      	ldr	r0, [pc, #288]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f005 ff65 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001edc:	4845      	ldr	r0, [pc, #276]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ede:	f005 ff5f 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001ee2:	e082      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	2b42      	cmp	r3, #66	; 0x42
 8001ee8:	d112      	bne.n	8001f10 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef0:	4840      	ldr	r0, [pc, #256]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f005 ff55 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001efc:	483d      	ldr	r0, [pc, #244]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f005 ff4f 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f08:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f0a:	f005 ff49 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001f0e:	e06c      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	2b43      	cmp	r3, #67	; 0x43
 8001f14:	d112      	bne.n	8001f3c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	4835      	ldr	r0, [pc, #212]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f005 ff3f 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f28:	4832      	ldr	r0, [pc, #200]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f005 ff39 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f34:	482f      	ldr	r0, [pc, #188]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f36:	f005 ff33 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001f3a:	e056      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b4d      	cmp	r3, #77	; 0x4d
 8001f40:	d112      	bne.n	8001f68 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f48:	482a      	ldr	r0, [pc, #168]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f005 ff29 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f54:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f005 ff23 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f60:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f62:	f005 ff1d 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001f66:	e040      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	2b59      	cmp	r3, #89	; 0x59
 8001f6c:	d112      	bne.n	8001f94 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f005 ff13 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f80:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f005 ff0d 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001f8e:	f005 ff07 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001f92:	e02a      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b57      	cmp	r3, #87	; 0x57
 8001f98:	d112      	bne.n	8001fc0 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa0:	4814      	ldr	r0, [pc, #80]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f005 fefd 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fae:	f005 fef7 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb8:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fba:	f005 fef1 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001fbe:	e014      	b.n	8001fea <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b7e      	cmp	r3, #126	; 0x7e
 8001fc4:	d111      	bne.n	8001fea <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f005 fee7 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f005 fee1 	bl	8007da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <_ZN3LED9fullColorEc+0x174>)
 8001fe6:	f005 fedb 	bl	8007da0 <HAL_GPIO_WritePin>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
 8002004:	4613      	mov	r3, r2
 8002006:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 8002018:	f005 fec2 	bl	8007da0 <HAL_GPIO_WritePin>
 800201c:	e009      	b.n	8002032 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800201e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 800202e:	f005 feb7 	bl	8007da0 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002032:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d106      	bne.n	8002048 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 8002042:	f005 fead 	bl	8007da0 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002046:	e009      	b.n	800205c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <_ZN3LED2LREaa+0x6c>)
 8002058:	f005 fea2 	bl	8007da0 <HAL_GPIO_WritePin>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020000 	.word	0x40020000

08002068 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002068:	b580      	push	{r7, lr}
 800206a:	b092      	sub	sp, #72	; 0x48
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fe92 	bl	8001da0 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	331c      	adds	r3, #28
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
 800208a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	429a      	cmp	r2, r3
 8002090:	d008      	beq.n	80020a4 <_ZN10LineSensorC1Ev+0x3c>
 8002092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	3302      	adds	r3, #2
 80020a0:	647b      	str	r3, [r7, #68]	; 0x44
 80020a2:	e7f2      	b.n	800208a <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	3338      	adds	r3, #56	; 0x38
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d009      	beq.n	80020d2 <_ZN10LineSensorC1Ev+0x6a>
 80020be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c0:	623b      	str	r3, [r7, #32]
		s = 0;
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	3304      	adds	r3, #4
 80020ce:	643b      	str	r3, [r7, #64]	; 0x40
 80020d0:	e7f1      	b.n	80020b6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3338      	adds	r3, #56	; 0x38
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d009      	beq.n	8002100 <_ZN10LineSensorC1Ev+0x98>
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	617b      	str	r3, [r7, #20]
		m = 0;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fa:	3304      	adds	r3, #4
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fe:	e7f1      	b.n	80020e4 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	429a      	cmp	r2, r3
 8002118:	d009      	beq.n	800212e <_ZN10LineSensorC1Ev+0xc6>
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	60bb      	str	r3, [r7, #8]
		s = 1;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002124:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	3304      	adds	r3, #4
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
 800212c:	e7f1      	b.n	8002112 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	3748      	adds	r7, #72	; 0x48
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	220e      	movs	r2, #14
 8002144:	4619      	mov	r1, r3
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002148:	f004 fbfa 	bl	8006940 <HAL_ADC_Start_DMA>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20038ee8 	.word	0x20038ee8

08002158 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b0d      	cmp	r3, #13
 8002168:	dc2f      	bgt.n	80021ca <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3392      	adds	r3, #146	; 0x92
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	33a0      	adds	r3, #160	; 0xa0
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a5b      	subs	r3, r3, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	440b      	add	r3, r1
 80021b6:	3306      	adds	r3, #6
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3301      	adds	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e7cc      	b.n	8002164 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b09      	cmp	r3, #9
 80021dc:	d902      	bls.n	80021e4 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]


}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000200 	.word	0x20000200

080021f4 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021f4:	b490      	push	{r4, r7}
 80021f6:	b08e      	sub	sp, #56	; 0x38
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002206:	2b0d      	cmp	r3, #13
 8002208:	f200 8087 	bhi.w	800231a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002212:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002216:	2b09      	cmp	r3, #9
 8002218:	d81c      	bhi.n	8002254 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800221a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800221e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002222:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4423      	add	r3, r4
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4403      	add	r3, r0
 8002238:	3304      	adds	r3, #4
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	008b      	lsls	r3, r1, #2
 800223e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002242:	440b      	add	r3, r1
 8002244:	3b30      	subs	r3, #48	; 0x30
 8002246:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002248:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800224c:	3301      	adds	r3, #1
 800224e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002252:	e7de      	b.n	8002212 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800225a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225e:	2b09      	cmp	r3, #9
 8002260:	d84d      	bhi.n	80022fe <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002262:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002266:	3301      	adds	r3, #1
 8002268:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800226c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002270:	2b09      	cmp	r3, #9
 8002272:	d83e      	bhi.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002274:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227e:	4413      	add	r3, r2
 8002280:	3b30      	subs	r3, #48	; 0x30
 8002282:	ed93 7a00 	vldr	s14, [r3]
 8002286:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002290:	4413      	add	r3, r2
 8002292:	3b30      	subs	r3, #48	; 0x30
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d521      	bpl.n	80022e6 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ac:	4413      	add	r3, r2
 80022ae:	3b30      	subs	r3, #48	; 0x30
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022b4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022c2:	440a      	add	r2, r1
 80022c4:	3a30      	subs	r2, #48	; 0x30
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ce:	440b      	add	r3, r1
 80022d0:	3b30      	subs	r3, #48	; 0x30
 80022d2:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022de:	4413      	add	r3, r2
 80022e0:	3b30      	subs	r3, #48	; 0x30
 80022e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e4:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ea:	3301      	adds	r3, #1
 80022ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022f0:	e7bc      	b.n	800226c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f6:	3301      	adds	r3, #1
 80022f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022fc:	e7ad      	b.n	800225a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80022fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	33b0      	adds	r3, #176	; 0xb0
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800230e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002312:	3301      	adds	r3, #1
 8002314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002318:	e773      	b.n	8002202 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800231a:	bf00      	nop
 800231c:	3738      	adds	r7, #56	; 0x38
 800231e:	46bd      	mov	sp, r7
 8002320:	bc90      	pop	{r4, r7}
 8002322:	4770      	bx	lr

08002324 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	3338      	adds	r3, #56	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	429a      	cmp	r2, r3
 8002348:	d012      	beq.n	8002370 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002390 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	db02      	blt.n	8002368 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	3301      	adds	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	3304      	adds	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e7e8      	b.n	8002342 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
 8002372:	2b0d      	cmp	r3, #13
 8002374:	d902      	bls.n	800237c <_ZN10LineSensor13emergencyStopEv+0x58>
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
 800237a:	e001      	b.n	8002380 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002380:	7dfb      	ldrb	r3, [r7, #23]

}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	44160000 	.word	0x44160000

08002394 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	609a      	str	r2, [r3, #8]
}
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800240c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800243c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002450:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800245c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002468:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002474:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002480:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800248c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	ee07 3a90 	vmov	s15, r3

}
 800249e:	eeb0 0a67 	vmov.f32	s0, s15
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	0000      	movs	r0, r0
	...

080024b0 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff95 	bl	80023e8 <_ZN9LineTrace9calcErrorEv>
 80024be:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80024c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <_ZN9LineTrace3pidEv+0x130>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fe f842 	bl	8000578 <__aeabi_f2d>
 80024f4:	a338      	add	r3, pc, #224	; (adr r3, 80025d8 <_ZN9LineTrace3pidEv+0x128>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f9bf 	bl	800087c <__aeabi_ddiv>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	4618      	mov	r0, r3
 8002504:	4621      	mov	r1, r4
 8002506:	f7fe fb87 	bl	8000c18 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f830 	bl	8000578 <__aeabi_f2d>
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002522:	edd7 7a07 	vldr	s15, [r7, #28]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fe f823 	bl	8000578 <__aeabi_f2d>
 8002532:	a329      	add	r3, pc, #164	; (adr r3, 80025d8 <_ZN9LineTrace3pidEv+0x128>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f876 	bl	8000628 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4620      	mov	r0, r4
 8002542:	4629      	mov	r1, r5
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4603      	mov	r3, r0
 800254a:	460c      	mov	r4, r1
 800254c:	4618      	mov	r0, r3
 800254e:	4621      	mov	r1, r4
 8002550:	f7fe fb62 	bl	8000c18 <__aeabi_d2f>
 8002554:	4602      	mov	r2, r0
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 8002558:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002560:	edd7 6a06 	vldr	s13, [r7, #24]
 8002564:	edd7 7a05 	vldr	s15, [r7, #20]
 8002568:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	ed93 7a08 	vldr	s14, [r3, #32]
 8002584:	edd7 6a06 	vldr	s13, [r7, #24]
 8002588:	edd7 7a05 	vldr	s15, [r7, #20]
 800258c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <_ZN9LineTrace3pidEv+0x134>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259e:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681c      	ldr	r4, [r3, #0]
 80025a6:	6938      	ldr	r0, [r7, #16]
 80025a8:	f7fd ffe6 	bl	8000578 <__aeabi_f2d>
 80025ac:	4605      	mov	r5, r0
 80025ae:	460e      	mov	r6, r1
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7fd ffe1 	bl	8000578 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b11 	vmov	d1, r2, r3
 80025be:	ec46 5b10 	vmov	d0, r5, r6
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 fa10 	bl	80029e8 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <_ZN9LineTrace3pidEv+0x130>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	6013      	str	r3, [r2, #0]

}
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025dc:	3f50624d 	.word	0x3f50624d
 80025e0:	20000204 	.word	0x20000204
 80025e4:	20000208 	.word	0x20000208

080025e8 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80025f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80025f8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	659a      	str	r2, [r3, #88]	; 0x58
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7f1b      	ldrb	r3, [r3, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff21 	bl	80024b0 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe56 	bl	8002324 <_ZN10LineSensor13emergencyStopEv>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d011      	beq.n	80026a2 <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80026c0 <_ZN9LineTrace4flipEv+0x68>
 8002686:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80026c0 <_ZN9LineTrace4flipEv+0x68>
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f9ac 	bl	80029e8 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	330c      	adds	r3, #12
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fcac 	bl	8001ff8 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 80026a0:	e007      	b.n	80026b2 <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f04f 32ff 	mov.w	r2, #4294967295
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fca3 	bl	8001ff8 <_ZN3LED2LREaa>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
	...

080026c8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	771a      	strb	r2, [r3, #28]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	0000      	movs	r0, r0
 80026e4:	0000      	movs	r0, r0
	...

080026e8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002710 <_ZN9LineTrace4stopEv+0x28>
 80026fe:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002710 <_ZN9LineTrace4stopEv+0x28>
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f970 	bl	80029e8 <_ZN5Motor8setRatioEdd>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
	...

08002718 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002726:	3330      	adds	r3, #48	; 0x30
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002732:	3332      	adds	r3, #50	; 0x32
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800273e:	3334      	adds	r3, #52	; 0x34
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800275c:	2300      	movs	r3, #0
 800275e:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002760:	f7ff f898 	bl	8001894 <sd_mount>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002776:	f010 fdc9 	bl	801330c <puts>
	  ret = true;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
 800277e:	e004      	b.n	800278a <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002780:	4814      	ldr	r0, [pc, #80]	; (80027d4 <_ZN6Logger10sdCardInitEv+0x80>)
 8002782:	f010 fdc3 	bl	801330c <puts>
	  ret = false;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 800278a:	2364      	movs	r3, #100	; 0x64
 800278c:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 800278e:	f107 0210 	add.w	r2, r7, #16
 8002792:	2301      	movs	r3, #1
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	2201      	movs	r2, #1
 800279a:	490f      	ldr	r1, [pc, #60]	; (80027d8 <_ZN6Logger10sdCardInitEv+0x84>)
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <_ZN6Logger10sdCardInitEv+0x88>)
 800279e:	f7fe ffd5 	bl	800174c <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	2201      	movs	r2, #1
 80027a8:	490b      	ldr	r1, [pc, #44]	; (80027d8 <_ZN6Logger10sdCardInitEv+0x84>)
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <_ZN6Logger10sdCardInitEv+0x88>)
 80027ac:	f7ff f82c 	bl	8001808 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80027b0:	f107 020c 	add.w	r2, r7, #12
 80027b4:	2301      	movs	r3, #1
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	2201      	movs	r2, #1
 80027bc:	4908      	ldr	r1, [pc, #32]	; (80027e0 <_ZN6Logger10sdCardInitEv+0x8c>)
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <_ZN6Logger10sdCardInitEv+0x88>)
 80027c0:	f7fe ffc4 	bl	800174c <sd_write_array_int>

	return ret;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	080173a0 	.word	0x080173a0
 80027d4:	080173b0 	.word	0x080173b0
 80027d8:	080173c0 	.word	0x080173c0
 80027dc:	080173cc 	.word	0x080173cc
 80027e0:	080173d4 	.word	0x080173d4

080027e4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80027f6:	3330      	adds	r3, #48	; 0x30
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002830:	3332      	adds	r3, #50	; 0x32
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	f241 3287 	movw	r2, #4999	; 0x1387
 8002838:	4293      	cmp	r3, r2
 800283a:	d905      	bls.n	8002848 <_ZN6Logger8storeLogEf+0x64>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	2200      	movs	r2, #0
 8002846:	801a      	strh	r2, [r3, #0]
	}
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68b8      	ldr	r0, [r7, #8]
 8002870:	f7fe fe5e 	bl	8001530 <sd_write_array_float>
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002890:	3330      	adds	r3, #48	; 0x30
 8002892:	2200      	movs	r2, #0
 8002894:	9200      	str	r2, [sp, #0]
 8002896:	f241 7270 	movw	r2, #6000	; 0x1770
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f7fe fead 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80028a8:	33b0      	adds	r3, #176	; 0xb0
 80028aa:	2200      	movs	r2, #0
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	f241 7270 	movw	r2, #6000	; 0x1770
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	68b8      	ldr	r0, [r7, #8]
 80028b6:	f7fe fea1 	bl	80015fc <sd_write_array_double>
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80028d0:	3330      	adds	r3, #48	; 0x30
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80028f0:	3330      	adds	r3, #48	; 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	805a      	strh	r2, [r3, #2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800292c:	2108      	movs	r1, #8
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <_ZN5Motor4initEv+0x20>)
 8002930:	f009 f968 	bl	800bc04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002934:	210c      	movs	r1, #12
 8002936:	4803      	ldr	r0, [pc, #12]	; (8002944 <_ZN5Motor4initEv+0x20>)
 8002938:	f009 f964 	bl	800bc04 <HAL_TIM_PWM_Start>

}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20038ea8 	.word	0x20038ea8

08002948 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da0d      	bge.n	8002976 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002960:	481f      	ldr	r0, [pc, #124]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 8002962:	f005 fa1d 	bl	8007da0 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296c:	b29b      	uxth	r3, r3
 800296e:	425b      	negs	r3, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	81fb      	strh	r3, [r7, #14]
 8002974:	e00a      	b.n	800298c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800297c:	4818      	ldr	r0, [pc, #96]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 800297e:	f005 fa0f 	bl	8007da0 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	b29b      	uxth	r3, r3
 800298a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002992:	2b00      	cmp	r3, #0
 8002994:	da0d      	bge.n	80029b2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800299c:	4810      	ldr	r0, [pc, #64]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 800299e:	f005 f9ff 	bl	8007da0 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	425b      	negs	r3, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	81bb      	strh	r3, [r7, #12]
 80029b0:	e00a      	b.n	80029c8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029b8:	4809      	ldr	r0, [pc, #36]	; (80029e0 <_ZN5Motor9motorCtrlEv+0x98>)
 80029ba:	f005 f9f1 	bl	8007da0 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80029c8:	89fa      	ldrh	r2, [r7, #14]
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_ZN5Motor9motorCtrlEv+0x9c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80029d0:	89ba      	ldrh	r2, [r7, #12]
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <_ZN5Motor9motorCtrlEv+0x9c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	20038ea8 	.word	0x20038ea8

080029e8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6178      	str	r0, [r7, #20]
 80029f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80029f4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 80029fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a02:	f7fe f8a1 	bl	8000b48 <__aeabi_dcmpgt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <_ZN5Motor8setRatioEdd+0x30>
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	4c2b      	ldr	r4, [pc, #172]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a12:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002a16:	e00e      	b.n	8002a36 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a22:	f7fe f873 	bl	8000b0c <__aeabi_dcmplt>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <_ZN5Motor8setRatioEdd+0x4e>
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	4c24      	ldr	r4, [pc, #144]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a32:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a40:	f7fe f882 	bl	8000b48 <__aeabi_dcmpgt>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <_ZN5Motor8setRatioEdd+0x6e>
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	4c1c      	ldr	r4, [pc, #112]	; (8002ac0 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a50:	e9c7 3400 	strd	r3, r4, [r7]
 8002a54:	e00e      	b.n	8002a74 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a60:	f7fe f854 	bl	8000b0c <__aeabi_dcmplt>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <_ZN5Motor8setRatioEdd+0x8c>
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	4c15      	ldr	r4, [pc, #84]	; (8002ac4 <_ZN5Motor8setRatioEdd+0xdc>)
 8002a70:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a7e:	f7fd fdd3 	bl	8000628 <__aeabi_dmul>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	4618      	mov	r0, r3
 8002a88:	4621      	mov	r1, r4
 8002a8a:	f7fe f87d 	bl	8000b88 <__aeabi_d2iz>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <_ZN5Motor8setRatioEdd+0xe0>)
 8002a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aa0:	f7fd fdc2 	bl	8000628 <__aeabi_dmul>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4621      	mov	r1, r4
 8002aac:	f7fe f86c 	bl	8000b88 <__aeabi_d2iz>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b21a      	sxth	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	805a      	strh	r2, [r3, #2]

}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	3ff00000 	.word	0x3ff00000
 8002ac4:	bff00000 	.word	0xbff00000
 8002ac8:	409c2000 	.word	0x409c2000

08002acc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002acc:	b490      	push	{r4, r7}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	f04f 0400 	mov.w	r4, #0
 8002ae4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc90      	pop	{r4, r7}
 8002b20:	4770      	bx	lr
 8002b22:	0000      	movs	r0, r0
 8002b24:	0000      	movs	r0, r0
	...

08002b28 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f87a 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8002b3c:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fc16 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002b4a:	ec54 3b10 	vmov	r3, r4, d0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4621      	mov	r1, r4
 8002b52:	f7fe f861 	bl	8000c18 <__aeabi_d2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002b5a:	a358      	add	r3, pc, #352	; (adr r3, 8002cbc <_ZN8Odometry12calcPotitionEv+0x194>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b64:	f7fd fd60 	bl	8000628 <__aeabi_dmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7fd fcfd 	bl	8000578 <__aeabi_f2d>
 8002b7e:	4682      	mov	sl, r0
 8002b80:	468b      	mov	fp, r1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b96:	f7fd fe71 	bl	800087c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4640      	mov	r0, r8
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	f7fd fb8b 	bl	80002bc <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	ec43 2b17 	vmov	d7, r2, r3
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	eef0 0a67 	vmov.f32	s1, s15
 8002bb6:	f00e fb5f 	bl	8011278 <cos>
 8002bba:	ec53 2b10 	vmov	r2, r3, d0
 8002bbe:	4650      	mov	r0, sl
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	f7fd fd31 	bl	8000628 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f7fd fb75 	bl	80002bc <__adddf3>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7fd fcc8 	bl	8000578 <__aeabi_f2d>
 8002be8:	4682      	mov	sl, r0
 8002bea:	468b      	mov	fp, r1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c00:	f7fd fe3c 	bl	800087c <__aeabi_ddiv>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd fb56 	bl	80002bc <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec43 2b17 	vmov	d7, r2, r3
 8002c18:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1c:	eef0 0a67 	vmov.f32	s1, s15
 8002c20:	f00e fb6e 	bl	8011300 <sin>
 8002c24:	ec53 2b10 	vmov	r2, r3, d0
 8002c28:	4650      	mov	r0, sl
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	f7fd fcfc 	bl	8000628 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4620      	mov	r0, r4
 8002c36:	4629      	mov	r1, r5
 8002c38:	f7fd fb40 	bl	80002bc <__adddf3>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002c52:	461a      	mov	r2, r3
 8002c54:	4623      	mov	r3, r4
 8002c56:	f7fd fb31 	bl	80002bc <__adddf3>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	f7fd ffd3 	bl	8000c18 <__aeabi_d2f>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002c76:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4621      	mov	r1, r4
 8002c82:	f7fd ffc9 	bl	8000c18 <__aeabi_d2f>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002c8a:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002c92:	4618      	mov	r0, r3
 8002c94:	4621      	mov	r1, r4
 8002c96:	f7fd ffbf 	bl	8000c18 <__aeabi_d2f>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002c9e:	601a      	str	r2, [r3, #0]


}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	f3af 8000 	nop.w
 8002cb0:	2000020c 	.word	0x2000020c
 8002cb4:	20000210 	.word	0x20000210
 8002cb8:	20000214 	.word	0x20000214
 8002cbc:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cc0:	3f50624d 	.word	0x3f50624d

08002cc4 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff2b 	bl	8002b28 <_ZN8Odometry12calcPotitionEv>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 8002cda:	b490      	push	{r4, r7}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
	return x_;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002ce8:	ec44 3b17 	vmov	d7, r3, r4
}
 8002cec:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf0:	eef0 0a67 	vmov.f32	s1, s15
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc90      	pop	{r4, r7}
 8002cfa:	4770      	bx	lr

08002cfc <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 8002cfc:	b490      	push	{r4, r7}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	return y_;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002d0a:	ec44 3b17 	vmov	d7, r3, r4
}
 8002d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d12:	eef0 0a67 	vmov.f32	s1, s15
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc90      	pop	{r4, r7}
 8002d1c:	4770      	bx	lr

08002d1e <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 8002d1e:	b490      	push	{r4, r7}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	return theta_;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002d2c:	ec44 3b17 	vmov	d7, r3, r4
}
 8002d30:	eeb0 0a47 	vmov.f32	s0, s14
 8002d34:	eef0 0a67 	vmov.f32	s1, s15
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc90      	pop	{r4, r7}
 8002d3e:	4770      	bx	lr

08002d40 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002d40:	b490      	push	{r4, r7}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	f04f 0400 	mov.w	r4, #0
 8002d52:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc90      	pop	{r4, r7}
 8002d7a:	4770      	bx	lr

08002d7c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002d7c:	b490      	push	{r4, r7}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	f04f 0400 	mov.w	r4, #0
 8002d94:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	f04f 0400 	mov.w	r4, #0
 8002da2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002dba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <_ZN13PathFollowingC1Ev+0xec>)
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	f04f 0400 	mov.w	r4, #0
 8002dcc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <_ZN13PathFollowingC1Ev+0xec>)
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002dde:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <_ZN13PathFollowingC1Ev+0xec>)
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	f04f 0400 	mov.w	r4, #0
 8002e04:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f04f 0400 	mov.w	r4, #0
 8002e2e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <_ZN13PathFollowingC1Ev+0xf0>)
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002e40:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <_ZN13PathFollowingC1Ev+0xf4>)
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <_ZN13PathFollowingC1Ev+0xf4>)
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc90      	pop	{r4, r7}
 8002e66:	4770      	bx	lr
 8002e68:	200393a8 	.word	0x200393a8
 8002e6c:	20039338 	.word	0x20039338
 8002e70:	20039398 	.word	0x20039398

08002e74 <_ZN13PathFollowing6isNearEddd>:
	y = y + distance * sin(theta);

}

bool PathFollowing::isNear(const double src_data, const double target_data, const double margin)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	61f8      	str	r0, [r7, #28]
 8002e7c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e80:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e84:	ed87 2b00 	vstr	d2, [r7]

	if(target_data - margin < src_data && src_data < target_data + margin){
 8002e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e90:	f7fd fa12 	bl	80002b8 <__aeabi_dsub>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ea0:	f7fd fe52 	bl	8000b48 <__aeabi_dcmpgt>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <_ZN13PathFollowing6isNearEddd+0x5c>
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb2:	f7fd fa03 	bl	80002bc <__adddf3>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	460c      	mov	r4, r1
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec2:	f7fd fe23 	bl	8000b0c <__aeabi_dcmplt>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <_ZN13PathFollowing6isNearEddd+0x5c>
		return true;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <_ZN13PathFollowing6isNearEddd+0x5e>
	}
	else{
		return false;
 8002ed0:	2300      	movs	r3, #0
	}

}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8002ee2:	f001 ff27 	bl	8004d34 <path_following_initialize>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8002ef0:	b490      	push	{r4, r7}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	61f8      	str	r0, [r7, #28]
 8002ef8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002efc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f00:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8002f04:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002f06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f0a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002f10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002f14:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002f1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f1e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc90      	pop	{r4, r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	200393a8 	.word	0x200393a8

08002f30 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8002f30:	b490      	push	{r4, r7}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <_ZN13PathFollowing8getKxValEv+0x24>)
 8002f3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f3e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	eef0 0a67 	vmov.f32	s1, s15
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc90      	pop	{r4, r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	200393a8 	.word	0x200393a8

08002f58 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8002f58:	b490      	push	{r4, r7}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_ZN13PathFollowing8getKyValEv+0x24>)
 8002f62:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002f66:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6e:	eef0 0a67 	vmov.f32	s1, s15
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc90      	pop	{r4, r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	200393a8 	.word	0x200393a8

08002f80 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8002f80:	b490      	push	{r4, r7}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <_ZN13PathFollowing8getKtValEv+0x24>)
 8002f8a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002f8e:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f92:	eeb0 0a47 	vmov.f32	s0, s14
 8002f96:	eef0 0a67 	vmov.f32	s1, s15
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc90      	pop	{r4, r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	200393a8 	.word	0x200393a8

08002fa8 <_ZN13PathFollowing18setTargetPathMultiEv>:
	rtU.target_y = y;
	rtU.th = th;
}

void PathFollowing::setTargetPathMulti()
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	sd_read_array_double("Pos", "d_th.txt", LOG_DATA_SIZE_DIS, log_delta_thetas_);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8002fb6:	33a0      	adds	r3, #160	; 0xa0
 8002fb8:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fbc:	490f      	ldr	r1, [pc, #60]	; (8002ffc <_ZN13PathFollowing18setTargetPathMultiEv+0x54>)
 8002fbe:	4810      	ldr	r0, [pc, #64]	; (8003000 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8002fc0:	f7fe fb7e 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Pos", "d_dis.txt", LOG_DATA_SIZE_DIS, log_distances_);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3320      	adds	r3, #32
 8002fc8:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fcc:	490d      	ldr	r1, [pc, #52]	; (8003004 <_ZN13PathFollowing18setTargetPathMultiEv+0x5c>)
 8002fce:	480c      	ldr	r0, [pc, #48]	; (8003000 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8002fd0:	f7fe fb76 	bl	80016c0 <sd_read_array_double>

	mon_log_dis = log_distances_[1];
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <_ZN13PathFollowing18setTargetPathMultiEv+0x60>)
 8002fdc:	e9c2 3400 	strd	r3, r4, [r2]
	mon_log_th = log_delta_thetas_[1];
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8002fe6:	33a8      	adds	r3, #168	; 0xa8
 8002fe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <_ZN13PathFollowing18setTargetPathMultiEv+0x64>)
 8002fee:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	080173e0 	.word	0x080173e0
 8003000:	080173ec 	.word	0x080173ec
 8003004:	080173f0 	.word	0x080173f0
 8003008:	20000238 	.word	0x20000238
 800300c:	20000240 	.word	0x20000240

08003010 <_ZN13PathFollowing12targetUpdateEv>:

void PathFollowing::targetUpdate()
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8110 	beq.w	8003244 <_ZN13PathFollowing12targetUpdateEv+0x234>
		//if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 30) == true && isNear(rtU.th_cur, th_tar_, 1.100) == true){
		if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 10) == true && isNear(rtU.th_cur, th_tar_, 3) == true){
 8003024:	4b9c      	ldr	r3, [pc, #624]	; (8003298 <_ZN13PathFollowing12targetUpdateEv+0x288>)
 8003026:	ed93 7b06 	vldr	d7, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	ed93 6b02 	vldr	d6, [r3, #8]
 8003030:	ed9f 2b95 	vldr	d2, [pc, #596]	; 8003288 <_ZN13PathFollowing12targetUpdateEv+0x278>
 8003034:	eeb0 1a46 	vmov.f32	s2, s12
 8003038:	eef0 1a66 	vmov.f32	s3, s13
 800303c:	eeb0 0a47 	vmov.f32	s0, s14
 8003040:	eef0 0a67 	vmov.f32	s1, s15
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff15 	bl	8002e74 <_ZN13PathFollowing6isNearEddd>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02d      	beq.n	80030ac <_ZN13PathFollowing12targetUpdateEv+0x9c>
 8003050:	4b91      	ldr	r3, [pc, #580]	; (8003298 <_ZN13PathFollowing12targetUpdateEv+0x288>)
 8003052:	ed93 7b08 	vldr	d7, [r3, #32]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	ed93 6b04 	vldr	d6, [r3, #16]
 800305c:	ed9f 2b8a 	vldr	d2, [pc, #552]	; 8003288 <_ZN13PathFollowing12targetUpdateEv+0x278>
 8003060:	eeb0 1a46 	vmov.f32	s2, s12
 8003064:	eef0 1a66 	vmov.f32	s3, s13
 8003068:	eeb0 0a47 	vmov.f32	s0, s14
 800306c:	eef0 0a67 	vmov.f32	s1, s15
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff feff 	bl	8002e74 <_ZN13PathFollowing6isNearEddd>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d017      	beq.n	80030ac <_ZN13PathFollowing12targetUpdateEv+0x9c>
 800307c:	4b86      	ldr	r3, [pc, #536]	; (8003298 <_ZN13PathFollowing12targetUpdateEv+0x288>)
 800307e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	ed93 6b06 	vldr	d6, [r3, #24]
 8003088:	ed9f 2b81 	vldr	d2, [pc, #516]	; 8003290 <_ZN13PathFollowing12targetUpdateEv+0x280>
 800308c:	eeb0 1a46 	vmov.f32	s2, s12
 8003090:	eef0 1a66 	vmov.f32	s3, s13
 8003094:	eeb0 0a47 	vmov.f32	s0, s14
 8003098:	eef0 0a67 	vmov.f32	s1, s15
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff fee9 	bl	8002e74 <_ZN13PathFollowing6isNearEddd>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <_ZN13PathFollowing12targetUpdateEv+0x9c>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <_ZN13PathFollowing12targetUpdateEv+0x9e>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80b6 	beq.w	8003220 <_ZN13PathFollowing12targetUpdateEv+0x210>
			ref_num++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030ca:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030ce:	801a      	strh	r2, [r3, #0]
			x_tar_ = x_tar_ + log_distances_[ref_num] * cos(th_tar_ + log_delta_thetas_[ref_num] / 2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80030fa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003106:	3314      	adds	r3, #20
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003118:	f7fd fbb0 	bl	800087c <__aeabi_ddiv>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4650      	mov	r0, sl
 8003122:	4659      	mov	r1, fp
 8003124:	f7fd f8ca 	bl	80002bc <__adddf3>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b17 	vmov	d7, r2, r3
 8003130:	eeb0 0a47 	vmov.f32	s0, s14
 8003134:	eef0 0a67 	vmov.f32	s1, s15
 8003138:	f00e f89e 	bl	8011278 <cos>
 800313c:	ec53 2b10 	vmov	r2, r3, d0
 8003140:	4640      	mov	r0, r8
 8003142:	4649      	mov	r1, r9
 8003144:	f7fd fa70 	bl	8000628 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f8b4 	bl	80002bc <__adddf3>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	e9c2 3402 	strd	r3, r4, [r2, #8]
			y_tar_ = y_tar_ + log_distances_[ref_num] * sin(th_tar_ + log_delta_thetas_[ref_num] / 2);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800316a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003188:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003194:	3314      	adds	r3, #20
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a6:	f7fd fb69 	bl	800087c <__aeabi_ddiv>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4650      	mov	r0, sl
 80031b0:	4659      	mov	r1, fp
 80031b2:	f7fd f883 	bl	80002bc <__adddf3>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	ec43 2b17 	vmov	d7, r2, r3
 80031be:	eeb0 0a47 	vmov.f32	s0, s14
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	f00e f89b 	bl	8011300 <sin>
 80031ca:	ec53 2b10 	vmov	r2, r3, d0
 80031ce:	4640      	mov	r0, r8
 80031d0:	4649      	mov	r1, r9
 80031d2:	f7fd fa29 	bl	8000628 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4620      	mov	r0, r4
 80031dc:	4629      	mov	r1, r5
 80031de:	f7fd f86d 	bl	80002bc <__adddf3>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	e9c2 3404 	strd	r3, r4, [r2, #16]
			th_tar_ = th_tar_ + log_delta_thetas_[ref_num];
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80031f8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003204:	3314      	adds	r3, #20
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800320e:	461a      	mov	r2, r3
 8003210:	4623      	mov	r3, r4
 8003212:	f7fd f853 	bl	80002bc <__adddf3>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	e9c2 3406 	strd	r3, r4, [r2, #24]
		}
		if(ref_num >= LOG_DATA_SIZE_DIS) ref_num = LOG_DATA_SIZE_DIS;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003226:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003230:	4293      	cmp	r3, r2
 8003232:	d907      	bls.n	8003244 <_ZN13PathFollowing12targetUpdateEv+0x234>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800323a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800323e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003242:	801a      	strh	r2, [r3, #0]

	}

	mon_ref_num = ref_num;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800324a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800324e:	881a      	ldrh	r2, [r3, #0]
 8003250:	4b12      	ldr	r3, [pc, #72]	; (800329c <_ZN13PathFollowing12targetUpdateEv+0x28c>)
 8003252:	801a      	strh	r2, [r3, #0]
	mon_x = x_tar_;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <_ZN13PathFollowing12targetUpdateEv+0x290>)
 800325c:	e9c2 3400 	strd	r3, r4, [r2]
	mon_y = y_tar_;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003266:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <_ZN13PathFollowing12targetUpdateEv+0x294>)
 8003268:	e9c2 3400 	strd	r3, r4, [r2]
	mon_th = th_tar_;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <_ZN13PathFollowing12targetUpdateEv+0x298>)
 8003274:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	f3af 8000 	nop.w
 8003288:	00000000 	.word	0x00000000
 800328c:	40240000 	.word	0x40240000
 8003290:	00000000 	.word	0x00000000
 8003294:	40080000 	.word	0x40080000
 8003298:	20039338 	.word	0x20039338
 800329c:	20000218 	.word	0x20000218
 80032a0:	20000220 	.word	0x20000220
 80032a4:	20000228 	.word	0x20000228
 80032a8:	20000230 	.word	0x20000230

080032ac <_ZN13PathFollowing14setCurrentPathEddd>:


void PathFollowing::setCurrentPath(double x, double y, double th)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	61f8      	str	r0, [r7, #28]
 80032b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80032b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80032bc:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80032c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032c6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80032cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032d0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 80032d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032da:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 80032de:	bf00      	nop
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc90      	pop	{r4, r7}
 80032e6:	4770      	bx	lr
 80032e8:	20039338 	.word	0x20039338

080032ec <_ZN13PathFollowing18getTargetVelocitysERdS0_>:

void PathFollowing::getTargetVelocitys(double &v, double &omega)
{
 80032ec:	b490      	push	{r4, r7}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	v = rtY.V_tar;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 80032fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	e9c2 3400 	strd	r3, r4, [r2]
	omega = rtY.tar;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 8003306:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bc90      	pop	{r4, r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20039398 	.word	0x20039398

08003320 <_ZN13PathFollowing4flipEv>:
void PathFollowing::flip()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <_ZN13PathFollowing4flipEv+0x14>
		path_following_step();
 8003330:	f001 fbf8 	bl	8004b24 <path_following_step>
	}
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN13PathFollowing5startEv>:

void PathFollowing::start()
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	execute_flag_ = true;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <_ZN13PathFollowing4stopEv>:

void PathFollowing::stop()
{
 8003356:	b490      	push	{r4, r7}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
	execute_flag_ = false;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
	ref_num = 0;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800336a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800336e:	2200      	movs	r2, #0
 8003370:	801a      	strh	r2, [r3, #0]
	x_tar_ = 0;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	y_tar_ = 0;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	f04f 0400 	mov.w	r4, #0
 800338a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	th_tar_ = 0;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f04f 0400 	mov.w	r4, #0
 8003398:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc90      	pop	{r4, r7}
 80033a4:	4770      	bx	lr

080033a6 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80033ae:	2088      	movs	r0, #136	; 0x88
 80033b0:	f7fe fce7 	bl	8001d82 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80033b4:	2080      	movs	r0, #128	; 0x80
 80033b6:	f7fe fce4 	bl	8001d82 <INA260_init>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	0000      	movs	r0, r0
 80033c4:	0000      	movs	r0, r0
	...

080033c8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80033d0:	2188      	movs	r1, #136	; 0x88
 80033d2:	2002      	movs	r0, #2
 80033d4:	f7fe fc72 	bl	8001cbc <INA260_read>
 80033d8:	4603      	mov	r3, r0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8ba 	bl	8000554 <__aeabi_i2d>
 80033e0:	a30c      	add	r3, pc, #48	; (adr r3, 8003414 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd f91f 	bl	8000628 <__aeabi_dmul>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	4618      	mov	r0, r3
 80033f0:	4621      	mov	r1, r4
 80033f2:	f7fd fc11 	bl	8000c18 <__aeabi_d2f>
 80033f6:	4602      	mov	r2, r0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a03      	ldr	r2, [pc, #12]	; (8003410 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}
 800340c:	f3af 8000 	nop.w
 8003410:	20000248 	.word	0x20000248
 8003414:	47ae147b 	.word	0x47ae147b
 8003418:	3f547ae1 	.word	0x3f547ae1
 800341c:	00000000 	.word	0x00000000

08003420 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f8a1 	bl	8000578 <__aeabi_f2d>
 8003436:	a311      	add	r3, pc, #68	; (adr r3, 800347c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fd fb66 	bl	8000b0c <__aeabi_dcmplt>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e002      	b.n	800345a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003456:	2200      	movs	r2, #0
 8003458:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003468:	2201      	movs	r2, #1
 800346a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	2000024c 	.word	0x2000024c
 800347c:	9999999a 	.word	0x9999999a
 8003480:	401d9999 	.word	0x401d9999

08003484 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003490:	2102      	movs	r1, #2
 8003492:	4822      	ldr	r0, [pc, #136]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003494:	f004 fc6c 	bl	8007d70 <HAL_GPIO_ReadPin>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80034a8:	89fb      	ldrh	r3, [r7, #14]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80034b0:	2108      	movs	r1, #8
 80034b2:	481a      	ldr	r0, [pc, #104]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034b4:	f004 fc5c 	bl	8007d70 <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80034d0:	2110      	movs	r1, #16
 80034d2:	4812      	ldr	r0, [pc, #72]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034d4:	f004 fc4c 	bl	8007d70 <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	480a      	ldr	r0, [pc, #40]	; (800351c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034f4:	f004 fc3c 	bl	8007d70 <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003510:	89fb      	ldrh	r3, [r7, #14]

}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020c00 	.word	0x40020c00

08003520 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
{

}
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	2b04      	cmp	r3, #4
 8003548:	d111      	bne.n	800356e <_ZN10SideSensor12updateStatusEt+0x36>
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e010      	b.n	8003590 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d10d      	bne.n	8003590 <_ZN10SideSensor12updateStatusEt+0x58>
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <_ZN10SideSensor12updateStatusEt+0xb4>)
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d111      	bne.n	80035bc <_ZN10SideSensor12updateStatusEt+0x84>
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80035ba:	e011      	b.n	80035e0 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c2:	d10d      	bne.n	80035e0 <_ZN10SideSensor12updateStatusEt+0xa8>
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f083 0302 	eor.w	r3, r3, #2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	2000024e 	.word	0x2000024e
 80035f0:	2000024f 	.word	0x2000024f

080035f4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80035f4:	b490      	push	{r4, r7}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	61da      	str	r2, [r3, #28]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	621a      	str	r2, [r3, #32]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bc90      	pop	{r4, r7}
 800367c:	4770      	bx	lr
	...

08003680 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	f107 0208 	add.w	r2, r7, #8
 8003690:	f107 0110 	add.w	r1, r7, #16
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fe57 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 800369a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800369e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4623      	mov	r3, r4
 80036a6:	f7fc fe09 	bl	80002bc <__adddf3>
 80036aa:	4603      	mov	r3, r0
 80036ac:	460c      	mov	r4, r1
 80036ae:	4618      	mov	r0, r3
 80036b0:	4621      	mov	r1, r4
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ba:	f7fd f8df 	bl	800087c <__aeabi_ddiv>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80036c6:	a310      	add	r3, pc, #64	; (adr r3, 8003708 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036d0:	f7fc ffaa 	bl	8000628 <__aeabi_dmul>
 80036d4:	4603      	mov	r3, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	4618      	mov	r0, r3
 80036da:	4621      	mov	r1, r4
 80036dc:	f7fd fa9c 	bl	8000c18 <__aeabi_d2f>
 80036e0:	4602      	mov	r2, r0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fc ff44 	bl	8000578 <__aeabi_f2d>
 80036f0:	4603      	mov	r3, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	ec44 3b17 	vmov	d7, r3, r4
}
 80036f8:	eeb0 0a47 	vmov.f32	s0, s14
 80036fc:	eef0 0a67 	vmov.f32	s1, s15
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	1ab1d998 	.word	0x1ab1d998
 800370c:	3f7830b5 	.word	0x3f7830b5

08003710 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b08d      	sub	sp, #52	; 0x34
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	ed93 7a00 	vldr	s14, [r3]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	edd3 7a02 	vldr	s15, [r3, #8]
 8003724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003728:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc ff21 	bl	8000578 <__aeabi_f2d>
 8003736:	4604      	mov	r4, r0
 8003738:	460d      	mov	r5, r1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe fa76 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8003744:	ec53 2b10 	vmov	r2, r3, d0
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fc fdb4 	bl	80002b8 <__aeabi_dsub>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4618      	mov	r0, r3
 8003756:	4621      	mov	r1, r4
 8003758:	f7fd fa5e 	bl	8000c18 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	edd3 7a06 	vldr	s15, [r3, #24]
 8003766:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	ed93 7a07 	vldr	s14, [r3, #28]
 8003778:	4b73      	ldr	r3, [pc, #460]	; (8003948 <_ZN12VelocityCtrl3pidEv+0x238>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003782:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	ee17 0a90 	vmov	r0, s15
 800378e:	f7fc fef3 	bl	8000578 <__aeabi_f2d>
 8003792:	a36b      	add	r3, pc, #428	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fc ff46 	bl	8000628 <__aeabi_dmul>
 800379c:	4603      	mov	r3, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	4618      	mov	r0, r3
 80037a2:	4621      	mov	r1, r4
 80037a4:	f7fd fa38 	bl	8000c18 <__aeabi_d2f>
 80037a8:	4603      	mov	r3, r0
 80037aa:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80037ac:	4b67      	ldr	r3, [pc, #412]	; (800394c <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fee1 	bl	8000578 <__aeabi_f2d>
 80037b6:	4604      	mov	r4, r0
 80037b8:	460d      	mov	r5, r1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80037c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c8:	ee17 0a90 	vmov	r0, s15
 80037cc:	f7fc fed4 	bl	8000578 <__aeabi_f2d>
 80037d0:	a35b      	add	r3, pc, #364	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f7fc ff27 	bl	8000628 <__aeabi_dmul>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4620      	mov	r0, r4
 80037e0:	4629      	mov	r1, r5
 80037e2:	f7fc fd6b 	bl	80002bc <__adddf3>
 80037e6:	4603      	mov	r3, r0
 80037e8:	460c      	mov	r4, r1
 80037ea:	4618      	mov	r0, r3
 80037ec:	4621      	mov	r1, r4
 80037ee:	f7fd fa13 	bl	8000c18 <__aeabi_d2f>
 80037f2:	4602      	mov	r2, r0
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037f6:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80037fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003810:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800381a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	ee17 0a90 	vmov	r0, s15
 8003826:	f7fc fea7 	bl	8000578 <__aeabi_f2d>
 800382a:	a345      	add	r3, pc, #276	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f7fc fefa 	bl	8000628 <__aeabi_dmul>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	4618      	mov	r0, r3
 800383a:	4621      	mov	r1, r4
 800383c:	f7fd f9ec 	bl	8000c18 <__aeabi_d2f>
 8003840:	4603      	mov	r3, r0
 8003842:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003844:	4b43      	ldr	r3, [pc, #268]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe95 	bl	8000578 <__aeabi_f2d>
 800384e:	4604      	mov	r4, r0
 8003850:	460d      	mov	r5, r1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003858:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800385c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003860:	ee17 0a90 	vmov	r0, s15
 8003864:	f7fc fe88 	bl	8000578 <__aeabi_f2d>
 8003868:	a335      	add	r3, pc, #212	; (adr r3, 8003940 <_ZN12VelocityCtrl3pidEv+0x230>)
 800386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386e:	f7fc fedb 	bl	8000628 <__aeabi_dmul>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4620      	mov	r0, r4
 8003878:	4629      	mov	r1, r5
 800387a:	f7fc fd1f 	bl	80002bc <__adddf3>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	4618      	mov	r0, r3
 8003884:	4621      	mov	r1, r4
 8003886:	f7fd f9c7 	bl	8000c18 <__aeabi_d2f>
 800388a:	4602      	mov	r2, r0
 800388c:	4b31      	ldr	r3, [pc, #196]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 800388e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003890:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003894:	edd7 7a08 	vldr	s15, [r7, #32]
 8003898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <_ZN12VelocityCtrl3pidEv+0x23c>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a6:	edc7 7a05 	vstr	s15, [r7, #20]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80038ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80038b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c4:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80038c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <_ZN12VelocityCtrl3pidEv+0x244>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	eef1 7a67 	vneg.f32	s15, s15
 80038e2:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80038ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80038ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	ee17 0a90 	vmov	r0, s15
 80038fa:	f7fc fe3d 	bl	8000578 <__aeabi_f2d>
 80038fe:	4605      	mov	r5, r0
 8003900:	460e      	mov	r6, r1
 8003902:	ed97 7a05 	vldr	s14, [r7, #20]
 8003906:	edd7 7a02 	vldr	s15, [r7, #8]
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	ee17 0a90 	vmov	r0, s15
 8003912:	f7fc fe31 	bl	8000578 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	ec43 2b11 	vmov	d1, r2, r3
 800391e:	ec46 5b10 	vmov	d0, r5, r6
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff f860 	bl	80029e8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <_ZN12VelocityCtrl3pidEv+0x238>)
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	3734      	adds	r7, #52	; 0x34
 8003938:	46bd      	mov	sp, r7
 800393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393c:	f3af 8000 	nop.w
 8003940:	d2f1a9fc 	.word	0xd2f1a9fc
 8003944:	3f50624d 	.word	0x3f50624d
 8003948:	20000250 	.word	0x20000250
 800394c:	20000258 	.word	0x20000258
 8003950:	20000254 	.word	0x20000254
 8003954:	2000025c 	.word	0x2000025c

08003958 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	ed87 0a02 	vstr	s0, [r7, #8]
 8003964:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	ed87 0a02 	vstr	s0, [r7, #8]
 800398c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003990:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80039be:	edc7 0a01 	vstr	s1, [r7, #4]
 80039c2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fe47 	bl	8003680 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fe87 	bl	8003710 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003a58 <_ZN12VelocityCtrl4stopEv+0x30>
 8003a40:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003a58 <_ZN12VelocityCtrl4stopEv+0x30>
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe ffcf 	bl	80029e8 <_ZN5Motor8setRatioEdd>

}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	f3af 8000 	nop.w
	...

08003a60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003a80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003a88:	e000      	b.n	8003a8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8003a8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003a8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f9      	beq.n	8003a8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003a96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e009      	b.n	8003ad4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	60ba      	str	r2, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffc9 	bl	8003a60 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	dbf1      	blt.n	8003ac0 <_write+0x12>
  }
  return len;
 8003adc:	687b      	ldr	r3, [r7, #4]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 f8da 	bl	8005cac <cppExit>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10e      	bne.n	8003b30 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003b12:	f001 fff9 	bl	8005b08 <cppFlip1ms>

		tim6_timer++;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b1e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d902      	bls.n	8003b30 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003b3a:	f002 f80f 	bl	8005b5c <cppFlip100ns>

		tim7_timer++;
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b46:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d902      	bls.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003b62:	f002 f805 	bl	8005b70 <cppFlip10ms>

		tim13_timer++;
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b6e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d902      	bls.n	8003b80 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
	}

}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40001000 	.word	0x40001000
 8003b8c:	20039018 	.word	0x20039018
 8003b90:	0001869f 	.word	0x0001869f
 8003b94:	40001400 	.word	0x40001400
 8003b98:	2003905c 	.word	0x2003905c
 8003b9c:	40001c00 	.word	0x40001c00
 8003ba0:	20039060 	.word	0x20039060

08003ba4 <init>:

void init()
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bae:	4808      	ldr	r0, [pc, #32]	; (8003bd0 <init+0x2c>)
 8003bb0:	f004 f8f6 	bl	8007da0 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003bb4:	4807      	ldr	r0, [pc, #28]	; (8003bd4 <init+0x30>)
 8003bb6:	f007 ffd6 	bl	800bb66 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003bba:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <init+0x34>)
 8003bbc:	f007 ffd3 	bl	800bb66 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003bc0:	4806      	ldr	r0, [pc, #24]	; (8003bdc <init+0x38>)
 8003bc2:	f007 ffd0 	bl	800bb66 <HAL_TIM_Base_Start_IT>

	cppInit();
 8003bc6:	f001 ff1f 	bl	8005a08 <cppInit>

	//path_following_initialize();

}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	20039144 	.word	0x20039144
 8003bd8:	200392e8 	.word	0x200392e8
 8003bdc:	20039064 	.word	0x20039064

08003be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003be4:	f002 fdd4 	bl	8006790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003be8:	f000 f82a 	bl	8003c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bec:	f000 fdbc 	bl	8004768 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bf0:	f000 fd8a 	bl	8004708 <MX_DMA_Init>
  MX_I2C2_Init();
 8003bf4:	f000 f9e8 	bl	8003fc8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003bf8:	f000 fa14 	bl	8004024 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003bfc:	f000 fa32 	bl	8004064 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003c00:	f000 fa66 	bl	80040d0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003c04:	f000 fb70 	bl	80042e8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003c08:	f000 fc3c 	bl	8004484 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003c0c:	f000 fd52 	bl	80046b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003c10:	f009 ff7c 	bl	800db0c <MX_FATFS_Init>
  MX_TIM6_Init();
 8003c14:	f000 fbcc 	bl	80043b0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003c18:	f000 f9a8 	bl	8003f6c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003c1c:	f000 fb00 	bl	8004220 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003c20:	f000 fc88 	bl	8004534 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003c24:	f000 fcd4 	bl	80045d0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003c28:	f000 f898 	bl	8003d5c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003c2c:	f000 fbf6 	bl	800441c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003c30:	f000 fd1c 	bl	800466c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003c34:	f7ff ffb6 	bl	8003ba4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003c38:	f002 f84a 	bl	8005cd0 <cppLoop>
 8003c3c:	e7fc      	b.n	8003c38 <main+0x58>
	...

08003c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0a4      	sub	sp, #144	; 0x90
 8003c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c4a:	2234      	movs	r2, #52	; 0x34
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00e fca2 	bl	8012598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	223c      	movs	r2, #60	; 0x3c
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f00e fc93 	bl	8012598 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <SystemClock_Config+0x114>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a36      	ldr	r2, [pc, #216]	; (8003d54 <SystemClock_Config+0x114>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <SystemClock_Config+0x114>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <SystemClock_Config+0x118>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a30      	ldr	r2, [pc, #192]	; (8003d58 <SystemClock_Config+0x118>)
 8003c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <SystemClock_Config+0x118>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cbc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003cc2:	23b4      	movs	r3, #180	; 0xb4
 8003cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003cce:	2308      	movs	r3, #8
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fc98 	bl	8009614 <HAL_RCC_OscConfig>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003cea:	f000 fe93 	bl	8004a14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cee:	f005 f813 	bl	8008d18 <HAL_PWREx_EnableOverDrive>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003cf8:	f000 fe8c 	bl	8004a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d00:	2302      	movs	r3, #2
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d12:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d18:	2105      	movs	r1, #5
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f005 f84c 	bl	8008db8 <HAL_RCC_ClockConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003d26:	f000 fe75 	bl	8004a14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003d2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003d30:	2300      	movs	r3, #0
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003d34:	2300      	movs	r3, #0
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f005 fa2b 	bl	8009198 <HAL_RCCEx_PeriphCLKConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003d48:	f000 fe64 	bl	8004a14 <Error_Handler>
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3790      	adds	r7, #144	; 0x90
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40007000 	.word	0x40007000

08003d5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d62:	463b      	mov	r3, r7
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d70:	4a7c      	ldr	r2, [pc, #496]	; (8003f64 <MX_ADC2_Init+0x208>)
 8003d72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d74:	4b7a      	ldr	r3, [pc, #488]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003d7c:	4b78      	ldr	r3, [pc, #480]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003d82:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003d88:	4b75      	ldr	r3, [pc, #468]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d8e:	4b74      	ldr	r3, [pc, #464]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d96:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d9c:	4b70      	ldr	r3, [pc, #448]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003d9e:	4a72      	ldr	r2, [pc, #456]	; (8003f68 <MX_ADC2_Init+0x20c>)
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003da2:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003da8:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003daa:	220e      	movs	r2, #14
 8003dac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003dae:	4b6c      	ldr	r3, [pc, #432]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003db6:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003dbc:	4868      	ldr	r0, [pc, #416]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003dbe:	f002 fd7b 	bl	80068b8 <HAL_ADC_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003dc8:	f000 fe24 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003dcc:	230a      	movs	r3, #10
 8003dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dd8:	463b      	mov	r3, r7
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4860      	ldr	r0, [pc, #384]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003dde:	f002 febf 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003de8:	f000 fe14 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003dec:	230b      	movs	r3, #11
 8003dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003df4:	463b      	mov	r3, r7
 8003df6:	4619      	mov	r1, r3
 8003df8:	4859      	ldr	r0, [pc, #356]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003dfa:	f002 feb1 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003e04:	f000 fe06 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003e08:	230c      	movs	r3, #12
 8003e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e10:	463b      	mov	r3, r7
 8003e12:	4619      	mov	r1, r3
 8003e14:	4852      	ldr	r0, [pc, #328]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e16:	f002 fea3 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003e20:	f000 fdf8 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003e24:	230d      	movs	r3, #13
 8003e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003e28:	2304      	movs	r3, #4
 8003e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	4619      	mov	r1, r3
 8003e30:	484b      	ldr	r0, [pc, #300]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e32:	f002 fe95 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003e3c:	f000 fdea 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003e44:	2305      	movs	r3, #5
 8003e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e48:	463b      	mov	r3, r7
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4844      	ldr	r0, [pc, #272]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e4e:	f002 fe87 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003e58:	f000 fddc 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003e60:	2306      	movs	r3, #6
 8003e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e64:	463b      	mov	r3, r7
 8003e66:	4619      	mov	r1, r3
 8003e68:	483d      	ldr	r0, [pc, #244]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e6a:	f002 fe79 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003e74:	f000 fdce 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003e7c:	2307      	movs	r3, #7
 8003e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e80:	463b      	mov	r3, r7
 8003e82:	4619      	mov	r1, r3
 8003e84:	4836      	ldr	r0, [pc, #216]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003e86:	f002 fe6b 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003e90:	f000 fdc0 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e94:	2303      	movs	r3, #3
 8003e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003e98:	2308      	movs	r3, #8
 8003e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	482f      	ldr	r0, [pc, #188]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003ea2:	f002 fe5d 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003eac:	f000 fdb2 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003eb4:	2309      	movs	r3, #9
 8003eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4828      	ldr	r0, [pc, #160]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003ebe:	f002 fe4f 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003ec8:	f000 fda4 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003ecc:	2305      	movs	r3, #5
 8003ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4821      	ldr	r0, [pc, #132]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003eda:	f002 fe41 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003ee4:	f000 fd96 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003ee8:	2306      	movs	r3, #6
 8003eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003eec:	230b      	movs	r3, #11
 8003eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	481a      	ldr	r0, [pc, #104]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003ef6:	f002 fe33 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003f00:	f000 fd88 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003f04:	2307      	movs	r3, #7
 8003f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003f08:	230c      	movs	r3, #12
 8003f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4813      	ldr	r0, [pc, #76]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003f12:	f002 fe25 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003f1c:	f000 fd7a 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f20:	2308      	movs	r3, #8
 8003f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003f24:	230d      	movs	r3, #13
 8003f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f28:	463b      	mov	r3, r7
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480c      	ldr	r0, [pc, #48]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003f2e:	f002 fe17 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003f38:	f000 fd6c 	bl	8004a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003f3c:	2309      	movs	r3, #9
 8003f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003f40:	230e      	movs	r3, #14
 8003f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f44:	463b      	mov	r3, r7
 8003f46:	4619      	mov	r1, r3
 8003f48:	4805      	ldr	r0, [pc, #20]	; (8003f60 <MX_ADC2_Init+0x204>)
 8003f4a:	f002 fe09 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003f54:	f000 fd5e 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20038ee8 	.word	0x20038ee8
 8003f64:	40012100 	.word	0x40012100
 8003f68:	0f000001 	.word	0x0f000001

08003f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <MX_I2C1_Init+0x54>)
 8003f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f78:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <MX_I2C1_Init+0x58>)
 8003f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <MX_I2C1_Init+0x50>)
 8003faa:	f003 ff2b 	bl	8007e04 <HAL_I2C_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fb4:	f000 fd2e 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20038f30 	.word	0x20038f30
 8003fc0:	40005400 	.word	0x40005400
 8003fc4:	000186a0 	.word	0x000186a0

08003fc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <MX_I2C2_Init+0x54>)
 8003fd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fd4:	4a12      	ldr	r2, [pc, #72]	; (8004020 <MX_I2C2_Init+0x58>)
 8003fd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <MX_I2C2_Init+0x50>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <MX_I2C2_Init+0x50>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <MX_I2C2_Init+0x50>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_I2C2_Init+0x50>)
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_I2C2_Init+0x50>)
 8004006:	f003 fefd 	bl	8007e04 <HAL_I2C_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004010:	f000 fd00 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20038fc4 	.word	0x20038fc4
 800401c:	40005800 	.word	0x40005800
 8004020:	000186a0 	.word	0x000186a0

08004024 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <MX_SDIO_SD_Init+0x38>)
 800402a:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <MX_SDIO_SD_Init+0x3c>)
 800402c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <MX_SDIO_SD_Init+0x38>)
 800403c:	2200      	movs	r2, #0
 800403e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <MX_SDIO_SD_Init+0x38>)
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <MX_SDIO_SD_Init+0x38>)
 800404e:	2200      	movs	r2, #0
 8004050:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	200391c4 	.word	0x200391c4
 8004060:	40012c00 	.word	0x40012c00

08004064 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004068:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <MX_SPI2_Init+0x64>)
 800406a:	4a18      	ldr	r2, [pc, #96]	; (80040cc <MX_SPI2_Init+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800406e:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <MX_SPI2_Init+0x64>)
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004084:	2202      	movs	r2, #2
 8004086:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <MX_SPI2_Init+0x64>)
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004094:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <MX_SPI2_Init+0x64>)
 8004098:	2228      	movs	r2, #40	; 0x28
 800409a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <MX_SPI2_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040b0:	220a      	movs	r2, #10
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040b4:	4804      	ldr	r0, [pc, #16]	; (80040c8 <MX_SPI2_Init+0x64>)
 80040b6:	f006 ffd7 	bl	800b068 <HAL_SPI_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040c0:	f000 fca8 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20038e10 	.word	0x20038e10
 80040cc:	40003800 	.word	0x40003800

080040d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b09a      	sub	sp, #104	; 0x68
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f00e fa5a 	bl	8012598 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040ee:	f107 0320 	add.w	r3, r7, #32
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	615a      	str	r2, [r3, #20]
 8004100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004102:	463b      	mov	r3, r7
 8004104:	2220      	movs	r2, #32
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f00e fa45 	bl	8012598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800410e:	4b42      	ldr	r3, [pc, #264]	; (8004218 <MX_TIM1_Init+0x148>)
 8004110:	4a42      	ldr	r2, [pc, #264]	; (800421c <MX_TIM1_Init+0x14c>)
 8004112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <MX_TIM1_Init+0x148>)
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <MX_TIM1_Init+0x148>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004120:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <MX_TIM1_Init+0x148>)
 8004122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004128:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <MX_TIM1_Init+0x148>)
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <MX_TIM1_Init+0x148>)
 8004130:	2200      	movs	r2, #0
 8004132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004134:	4b38      	ldr	r3, [pc, #224]	; (8004218 <MX_TIM1_Init+0x148>)
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800413a:	4837      	ldr	r0, [pc, #220]	; (8004218 <MX_TIM1_Init+0x148>)
 800413c:	f007 fd37 	bl	800bbae <HAL_TIM_PWM_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004146:	f000 fc65 	bl	8004a14 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800414a:	2303      	movs	r3, #3
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800414e:	2300      	movs	r3, #0
 8004150:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004152:	2301      	movs	r3, #1
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004156:	2300      	movs	r3, #0
 8004158:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800415e:	2300      	movs	r3, #0
 8004160:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004162:	2301      	movs	r3, #1
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004166:	2300      	movs	r3, #0
 8004168:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800416e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004172:	4619      	mov	r1, r3
 8004174:	4828      	ldr	r0, [pc, #160]	; (8004218 <MX_TIM1_Init+0x148>)
 8004176:	f007 fd83 	bl	800bc80 <HAL_TIM_Encoder_Init>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004180:	f000 fc48 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004184:	2300      	movs	r3, #0
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800418c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004190:	4619      	mov	r1, r3
 8004192:	4821      	ldr	r0, [pc, #132]	; (8004218 <MX_TIM1_Init+0x148>)
 8004194:	f008 faaa 	bl	800c6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800419e:	f000 fc39 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041a2:	2360      	movs	r3, #96	; 0x60
 80041a4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041ae:	2300      	movs	r3, #0
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041be:	f107 0320 	add.w	r3, r7, #32
 80041c2:	2208      	movs	r2, #8
 80041c4:	4619      	mov	r1, r3
 80041c6:	4814      	ldr	r0, [pc, #80]	; (8004218 <MX_TIM1_Init+0x148>)
 80041c8:	f007 ff2c 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80041d2:	f000 fc1f 	bl	8004a14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041f4:	463b      	mov	r3, r7
 80041f6:	4619      	mov	r1, r3
 80041f8:	4807      	ldr	r0, [pc, #28]	; (8004218 <MX_TIM1_Init+0x148>)
 80041fa:	f008 faf3 	bl	800c7e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004204:	f000 fc06 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004208:	4803      	ldr	r0, [pc, #12]	; (8004218 <MX_TIM1_Init+0x148>)
 800420a:	f001 f97f 	bl	800550c <HAL_TIM_MspPostInit>

}
 800420e:	bf00      	nop
 8004210:	3768      	adds	r7, #104	; 0x68
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20039184 	.word	0x20039184
 800421c:	40010000 	.word	0x40010000

08004220 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	60da      	str	r2, [r3, #12]
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	615a      	str	r2, [r3, #20]
 8004240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004242:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <MX_TIM3_Init+0xc4>)
 8004246:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <MX_TIM3_Init+0xc0>)
 800424a:	2200      	movs	r2, #0
 800424c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800425a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <MX_TIM3_Init+0xc0>)
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004262:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004268:	481d      	ldr	r0, [pc, #116]	; (80042e0 <MX_TIM3_Init+0xc0>)
 800426a:	f007 fca0 	bl	800bbae <HAL_TIM_PWM_Init>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004274:	f000 fbce 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004280:	f107 0320 	add.w	r3, r7, #32
 8004284:	4619      	mov	r1, r3
 8004286:	4816      	ldr	r0, [pc, #88]	; (80042e0 <MX_TIM3_Init+0xc0>)
 8004288:	f008 fa30 	bl	800c6ec <HAL_TIMEx_MasterConfigSynchronization>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004292:	f000 fbbf 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004296:	2360      	movs	r3, #96	; 0x60
 8004298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	2200      	movs	r2, #0
 80042aa:	4619      	mov	r1, r3
 80042ac:	480c      	ldr	r0, [pc, #48]	; (80042e0 <MX_TIM3_Init+0xc0>)
 80042ae:	f007 feb9 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80042b8:	f000 fbac 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	2204      	movs	r2, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4807      	ldr	r0, [pc, #28]	; (80042e0 <MX_TIM3_Init+0xc0>)
 80042c4:	f007 feae 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80042ce:	f000 fba1 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80042d2:	4803      	ldr	r0, [pc, #12]	; (80042e0 <MX_TIM3_Init+0xc0>)
 80042d4:	f001 f91a 	bl	800550c <HAL_TIM_MspPostInit>

}
 80042d8:	bf00      	nop
 80042da:	3728      	adds	r7, #40	; 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	2003901c 	.word	0x2003901c
 80042e4:	40000400 	.word	0x40000400

080042e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ee:	f107 0320 	add.w	r3, r7, #32
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	615a      	str	r2, [r3, #20]
 8004308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <MX_TIM4_Init+0xc4>)
 800430e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800431c:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800431e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004322:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004326:	2200      	movs	r2, #0
 8004328:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800432a:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004330:	481d      	ldr	r0, [pc, #116]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004332:	f007 fc3c 	bl	800bbae <HAL_TIM_PWM_Init>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800433c:	f000 fb6a 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004348:	f107 0320 	add.w	r3, r7, #32
 800434c:	4619      	mov	r1, r3
 800434e:	4816      	ldr	r0, [pc, #88]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004350:	f008 f9cc 	bl	800c6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800435a:	f000 fb5b 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800435e:	2360      	movs	r3, #96	; 0x60
 8004360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	2208      	movs	r2, #8
 8004372:	4619      	mov	r1, r3
 8004374:	480c      	ldr	r0, [pc, #48]	; (80043a8 <MX_TIM4_Init+0xc0>)
 8004376:	f007 fe55 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004380:	f000 fb48 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	220c      	movs	r2, #12
 8004388:	4619      	mov	r1, r3
 800438a:	4807      	ldr	r0, [pc, #28]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800438c:	f007 fe4a 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004396:	f000 fb3d 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800439a:	4803      	ldr	r0, [pc, #12]	; (80043a8 <MX_TIM4_Init+0xc0>)
 800439c:	f001 f8b6 	bl	800550c <HAL_TIM_MspPostInit>

}
 80043a0:	bf00      	nop
 80043a2:	3728      	adds	r7, #40	; 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20038ea8 	.word	0x20038ea8
 80043ac:	40000800 	.word	0x40000800

080043b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b6:	463b      	mov	r3, r7
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <MX_TIM6_Init+0x64>)
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <MX_TIM6_Init+0x68>)
 80043c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <MX_TIM6_Init+0x64>)
 80043c6:	2259      	movs	r2, #89	; 0x59
 80043c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <MX_TIM6_Init+0x64>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <MX_TIM6_Init+0x64>)
 80043d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <MX_TIM6_Init+0x64>)
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043de:	480d      	ldr	r0, [pc, #52]	; (8004414 <MX_TIM6_Init+0x64>)
 80043e0:	f007 fb96 	bl	800bb10 <HAL_TIM_Base_Init>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80043ea:	f000 fb13 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043f6:	463b      	mov	r3, r7
 80043f8:	4619      	mov	r1, r3
 80043fa:	4806      	ldr	r0, [pc, #24]	; (8004414 <MX_TIM6_Init+0x64>)
 80043fc:	f008 f976 	bl	800c6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004406:	f000 fb05 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20039144 	.word	0x20039144
 8004418:	40001000 	.word	0x40001000

0800441c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004422:	463b      	mov	r3, r7
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800442a:	4b14      	ldr	r3, [pc, #80]	; (800447c <MX_TIM7_Init+0x60>)
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <MX_TIM7_Init+0x64>)
 800442e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <MX_TIM7_Init+0x60>)
 8004432:	22b3      	movs	r2, #179	; 0xb3
 8004434:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <MX_TIM7_Init+0x60>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <MX_TIM7_Init+0x60>)
 800443e:	2231      	movs	r2, #49	; 0x31
 8004440:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004442:	4b0e      	ldr	r3, [pc, #56]	; (800447c <MX_TIM7_Init+0x60>)
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004448:	480c      	ldr	r0, [pc, #48]	; (800447c <MX_TIM7_Init+0x60>)
 800444a:	f007 fb61 	bl	800bb10 <HAL_TIM_Base_Init>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004454:	f000 fade 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004460:	463b      	mov	r3, r7
 8004462:	4619      	mov	r1, r3
 8004464:	4805      	ldr	r0, [pc, #20]	; (800447c <MX_TIM7_Init+0x60>)
 8004466:	f008 f941 	bl	800c6ec <HAL_TIMEx_MasterConfigSynchronization>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004470:	f000 fad0 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200392e8 	.word	0x200392e8
 8004480:	40001400 	.word	0x40001400

08004484 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f00e f880 	bl	8012598 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004498:	1d3b      	adds	r3, r7, #4
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044a0:	4b22      	ldr	r3, [pc, #136]	; (800452c <MX_TIM8_Init+0xa8>)
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <MX_TIM8_Init+0xac>)
 80044a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80044a6:	4b21      	ldr	r3, [pc, #132]	; (800452c <MX_TIM8_Init+0xa8>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80044ac:	4b1f      	ldr	r3, [pc, #124]	; (800452c <MX_TIM8_Init+0xa8>)
 80044ae:	2210      	movs	r2, #16
 80044b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <MX_TIM8_Init+0xa8>)
 80044b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <MX_TIM8_Init+0xa8>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <MX_TIM8_Init+0xa8>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <MX_TIM8_Init+0xa8>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80044cc:	2303      	movs	r3, #3
 80044ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044e0:	2300      	movs	r3, #0
 80044e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	4619      	mov	r1, r3
 80044f6:	480d      	ldr	r0, [pc, #52]	; (800452c <MX_TIM8_Init+0xa8>)
 80044f8:	f007 fbc2 	bl	800bc80 <HAL_TIM_Encoder_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004502:	f000 fa87 	bl	8004a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4806      	ldr	r0, [pc, #24]	; (800452c <MX_TIM8_Init+0xa8>)
 8004514:	f008 f8ea 	bl	800c6ec <HAL_TIMEx_MasterConfigSynchronization>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800451e:	f000 fa79 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004522:	bf00      	nop
 8004524:	3730      	adds	r7, #48	; 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20038e68 	.word	0x20038e68
 8004530:	40010400 	.word	0x40010400

08004534 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
 8004548:	615a      	str	r2, [r3, #20]
 800454a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <MX_TIM10_Init+0x94>)
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <MX_TIM10_Init+0x98>)
 8004550:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <MX_TIM10_Init+0x94>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800455e:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004564:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800456c:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <MX_TIM10_Init+0x94>)
 800456e:	2200      	movs	r2, #0
 8004570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004572:	4815      	ldr	r0, [pc, #84]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004574:	f007 facc 	bl	800bb10 <HAL_TIM_Base_Init>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800457e:	f000 fa49 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004582:	4811      	ldr	r0, [pc, #68]	; (80045c8 <MX_TIM10_Init+0x94>)
 8004584:	f007 fb13 	bl	800bbae <HAL_TIM_PWM_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800458e:	f000 fa41 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004592:	2360      	movs	r3, #96	; 0x60
 8004594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	2200      	movs	r2, #0
 80045a6:	4619      	mov	r1, r3
 80045a8:	4807      	ldr	r0, [pc, #28]	; (80045c8 <MX_TIM10_Init+0x94>)
 80045aa:	f007 fd3b 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80045b4:	f000 fa2e 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <MX_TIM10_Init+0x94>)
 80045ba:	f000 ffa7 	bl	800550c <HAL_TIM_MspPostInit>

}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20038f84 	.word	0x20038f84
 80045cc:	40014400 	.word	0x40014400

080045d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	611a      	str	r2, [r3, #16]
 80045e4:	615a      	str	r2, [r3, #20]
 80045e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <MX_TIM11_Init+0x94>)
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <MX_TIM11_Init+0x98>)
 80045ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <MX_TIM11_Init+0x94>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <MX_TIM11_Init+0x94>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <MX_TIM11_Init+0x94>)
 80045fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004600:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004602:	4b18      	ldr	r3, [pc, #96]	; (8004664 <MX_TIM11_Init+0x94>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <MX_TIM11_Init+0x94>)
 800460a:	2200      	movs	r2, #0
 800460c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800460e:	4815      	ldr	r0, [pc, #84]	; (8004664 <MX_TIM11_Init+0x94>)
 8004610:	f007 fa7e 	bl	800bb10 <HAL_TIM_Base_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800461a:	f000 f9fb 	bl	8004a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800461e:	4811      	ldr	r0, [pc, #68]	; (8004664 <MX_TIM11_Init+0x94>)
 8004620:	f007 fac5 	bl	800bbae <HAL_TIM_PWM_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800462a:	f000 f9f3 	bl	8004a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800462e:	2360      	movs	r3, #96	; 0x60
 8004630:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	2200      	movs	r2, #0
 8004642:	4619      	mov	r1, r3
 8004644:	4807      	ldr	r0, [pc, #28]	; (8004664 <MX_TIM11_Init+0x94>)
 8004646:	f007 fced 	bl	800c024 <HAL_TIM_PWM_ConfigChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004650:	f000 f9e0 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004654:	4803      	ldr	r0, [pc, #12]	; (8004664 <MX_TIM11_Init+0x94>)
 8004656:	f000 ff59 	bl	800550c <HAL_TIM_MspPostInit>

}
 800465a:	bf00      	nop
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200390a4 	.word	0x200390a4
 8004668:	40014800 	.word	0x40014800

0800466c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <MX_TIM13_Init+0x40>)
 8004672:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <MX_TIM13_Init+0x44>)
 8004674:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <MX_TIM13_Init+0x40>)
 8004678:	2259      	movs	r2, #89	; 0x59
 800467a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <MX_TIM13_Init+0x40>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <MX_TIM13_Init+0x40>)
 8004684:	f242 720f 	movw	r2, #9999	; 0x270f
 8004688:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <MX_TIM13_Init+0x40>)
 800468c:	2200      	movs	r2, #0
 800468e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <MX_TIM13_Init+0x40>)
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004696:	4805      	ldr	r0, [pc, #20]	; (80046ac <MX_TIM13_Init+0x40>)
 8004698:	f007 fa3a 	bl	800bb10 <HAL_TIM_Base_Init>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80046a2:	f000 f9b7 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20039064 	.word	0x20039064
 80046b0:	40001c00 	.word	0x40001c00

080046b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <MX_USART2_UART_Init+0x50>)
 80046bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046da:	220c      	movs	r2, #12
 80046dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046ea:	4805      	ldr	r0, [pc, #20]	; (8004700 <MX_USART2_UART_Init+0x4c>)
 80046ec:	f008 f8e0 	bl	800c8b0 <HAL_UART_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80046f6:	f000 f98d 	bl	8004a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20039248 	.word	0x20039248
 8004704:	40004400 	.word	0x40004400

08004708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	4b14      	ldr	r3, [pc, #80]	; (8004764 <MX_DMA_Init+0x5c>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <MX_DMA_Init+0x5c>)
 8004718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800471c:	6313      	str	r3, [r2, #48]	; 0x30
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <MX_DMA_Init+0x5c>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	203a      	movs	r0, #58	; 0x3a
 8004730:	f002 fda1 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004734:	203a      	movs	r0, #58	; 0x3a
 8004736:	f002 fdba 	bl	80072ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	203b      	movs	r0, #59	; 0x3b
 8004740:	f002 fd99 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004744:	203b      	movs	r0, #59	; 0x3b
 8004746:	f002 fdb2 	bl	80072ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	2045      	movs	r0, #69	; 0x45
 8004750:	f002 fd91 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004754:	2045      	movs	r0, #69	; 0x45
 8004756:	f002 fdaa 	bl	80072ae <HAL_NVIC_EnableIRQ>

}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800

08004768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	609a      	str	r2, [r3, #8]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	4b9c      	ldr	r3, [pc, #624]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a9b      	ldr	r2, [pc, #620]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004788:	f043 0310 	orr.w	r3, r3, #16
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b99      	ldr	r3, [pc, #612]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	4b95      	ldr	r3, [pc, #596]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a94      	ldr	r2, [pc, #592]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	4b8e      	ldr	r3, [pc, #568]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	4a8d      	ldr	r2, [pc, #564]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
 80047c6:	4b8b      	ldr	r3, [pc, #556]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	4b87      	ldr	r3, [pc, #540]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a86      	ldr	r2, [pc, #536]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b84      	ldr	r3, [pc, #528]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a7f      	ldr	r2, [pc, #508]	; (80049f4 <MX_GPIO_Init+0x28c>)
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30
 80047fe:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	4b79      	ldr	r3, [pc, #484]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a78      	ldr	r2, [pc, #480]	; (80049f4 <MX_GPIO_Init+0x28c>)
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4b76      	ldr	r3, [pc, #472]	; (80049f4 <MX_GPIO_Init+0x28c>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004826:	2200      	movs	r2, #0
 8004828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800482c:	4872      	ldr	r0, [pc, #456]	; (80049f8 <MX_GPIO_Init+0x290>)
 800482e:	f003 fab7 	bl	8007da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004832:	2200      	movs	r2, #0
 8004834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004838:	4870      	ldr	r0, [pc, #448]	; (80049fc <MX_GPIO_Init+0x294>)
 800483a:	f003 fab1 	bl	8007da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800483e:	2200      	movs	r2, #0
 8004840:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004844:	486e      	ldr	r0, [pc, #440]	; (8004a00 <MX_GPIO_Init+0x298>)
 8004846:	f003 faab 	bl	8007da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800484a:	2200      	movs	r2, #0
 800484c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004850:	486c      	ldr	r0, [pc, #432]	; (8004a04 <MX_GPIO_Init+0x29c>)
 8004852:	f003 faa5 	bl	8007da0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004856:	2304      	movs	r3, #4
 8004858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800485a:	4b6b      	ldr	r3, [pc, #428]	; (8004a08 <MX_GPIO_Init+0x2a0>)
 800485c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004862:	f107 031c 	add.w	r3, r7, #28
 8004866:	4619      	mov	r1, r3
 8004868:	4863      	ldr	r0, [pc, #396]	; (80049f8 <MX_GPIO_Init+0x290>)
 800486a:	f003 f8d7 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800486e:	230f      	movs	r3, #15
 8004870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004872:	2303      	movs	r3, #3
 8004874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	4862      	ldr	r0, [pc, #392]	; (8004a0c <MX_GPIO_Init+0x2a4>)
 8004882:	f003 f8cb 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004886:	23e1      	movs	r3, #225	; 0xe1
 8004888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488a:	2303      	movs	r3, #3
 800488c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004892:	f107 031c 	add.w	r3, r7, #28
 8004896:	4619      	mov	r1, r3
 8004898:	485a      	ldr	r0, [pc, #360]	; (8004a04 <MX_GPIO_Init+0x29c>)
 800489a:	f003 f8bf 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800489e:	2303      	movs	r3, #3
 80048a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048a2:	2303      	movs	r3, #3
 80048a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	f107 031c 	add.w	r3, r7, #28
 80048ae:	4619      	mov	r1, r3
 80048b0:	4852      	ldr	r0, [pc, #328]	; (80049fc <MX_GPIO_Init+0x294>)
 80048b2:	f003 f8b3 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048b6:	2304      	movs	r3, #4
 80048b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048be:	2301      	movs	r3, #1
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c2:	f107 031c 	add.w	r3, r7, #28
 80048c6:	4619      	mov	r1, r3
 80048c8:	484c      	ldr	r0, [pc, #304]	; (80049fc <MX_GPIO_Init+0x294>)
 80048ca:	f003 f8a7 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80048ce:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80048d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048d8:	2301      	movs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048dc:	f107 031c 	add.w	r3, r7, #28
 80048e0:	4619      	mov	r1, r3
 80048e2:	4845      	ldr	r0, [pc, #276]	; (80049f8 <MX_GPIO_Init+0x290>)
 80048e4:	f003 f89a 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80048e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ee:	2301      	movs	r3, #1
 80048f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f6:	2300      	movs	r3, #0
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048fa:	f107 031c 	add.w	r3, r7, #28
 80048fe:	4619      	mov	r1, r3
 8004900:	483d      	ldr	r0, [pc, #244]	; (80049f8 <MX_GPIO_Init+0x290>)
 8004902:	f003 f88b 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800490a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490c:	2301      	movs	r3, #1
 800490e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004918:	f107 031c 	add.w	r3, r7, #28
 800491c:	4619      	mov	r1, r3
 800491e:	4837      	ldr	r0, [pc, #220]	; (80049fc <MX_GPIO_Init+0x294>)
 8004920:	f003 f87c 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <MX_GPIO_Init+0x2a8>)
 800492c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004932:	f107 031c 	add.w	r3, r7, #28
 8004936:	4619      	mov	r1, r3
 8004938:	4831      	ldr	r0, [pc, #196]	; (8004a00 <MX_GPIO_Init+0x298>)
 800493a:	f003 f86f 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800493e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004944:	2301      	movs	r3, #1
 8004946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494c:	2300      	movs	r3, #0
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4619      	mov	r1, r3
 8004956:	482a      	ldr	r0, [pc, #168]	; (8004a00 <MX_GPIO_Init+0x298>)
 8004958:	f003 f860 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800495c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004962:	2301      	movs	r3, #1
 8004964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004966:	2301      	movs	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496a:	2300      	movs	r3, #0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800496e:	f107 031c 	add.w	r3, r7, #28
 8004972:	4619      	mov	r1, r3
 8004974:	4822      	ldr	r0, [pc, #136]	; (8004a00 <MX_GPIO_Init+0x298>)
 8004976:	f003 f851 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800497a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800497e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004980:	2301      	movs	r3, #1
 8004982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004988:	2300      	movs	r3, #0
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498c:	f107 031c 	add.w	r3, r7, #28
 8004990:	4619      	mov	r1, r3
 8004992:	481c      	ldr	r0, [pc, #112]	; (8004a04 <MX_GPIO_Init+0x29c>)
 8004994:	f003 f842 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a6:	f107 031c 	add.w	r3, r7, #28
 80049aa:	4619      	mov	r1, r3
 80049ac:	4815      	ldr	r0, [pc, #84]	; (8004a04 <MX_GPIO_Init+0x29c>)
 80049ae:	f003 f835 	bl	8007a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80049b2:	239b      	movs	r3, #155	; 0x9b
 80049b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049ba:	2301      	movs	r3, #1
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049be:	f107 031c 	add.w	r3, r7, #28
 80049c2:	4619      	mov	r1, r3
 80049c4:	480e      	ldr	r0, [pc, #56]	; (8004a00 <MX_GPIO_Init+0x298>)
 80049c6:	f003 f829 	bl	8007a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80049ca:	2200      	movs	r2, #0
 80049cc:	2100      	movs	r1, #0
 80049ce:	2008      	movs	r0, #8
 80049d0:	f002 fc51 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80049d4:	2008      	movs	r0, #8
 80049d6:	f002 fc6a 	bl	80072ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80049da:	2200      	movs	r2, #0
 80049dc:	2100      	movs	r1, #0
 80049de:	2017      	movs	r0, #23
 80049e0:	f002 fc49 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80049e4:	2017      	movs	r0, #23
 80049e6:	f002 fc62 	bl	80072ae <HAL_NVIC_EnableIRQ>

}
 80049ea:	bf00      	nop
 80049ec:	3730      	adds	r7, #48	; 0x30
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40020400 	.word	0x40020400
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40020000 	.word	0x40020000
 8004a08:	10310000 	.word	0x10310000
 8004a0c:	40020800 	.word	0x40020800
 8004a10:	10110000 	.word	0x10110000

08004a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a1a:	e7fe      	b.n	8004a1a <Error_Handler+0x6>

08004a1c <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 8004a24:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <CalcError1+0x100>)
 8004a26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004a2a:	4b3c      	ldr	r3, [pc, #240]	; (8004b1c <CalcError1+0x100>)
 8004a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a30:	f7fb fc42 	bl	80002b8 <__aeabi_dsub>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004a3c:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <CalcError1+0x100>)
 8004a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a42:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <CalcError1+0x100>)
 8004a44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004a48:	f7fb fc36 	bl	80002b8 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 8004a54:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <CalcError1+0x100>)
 8004a56:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a5e:	eef0 0a67 	vmov.f32	s1, s15
 8004a62:	f00c fc4d 	bl	8011300 <sin>
 8004a66:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 8004a6a:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <CalcError1+0x100>)
 8004a6c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004a70:	eeb0 0a47 	vmov.f32	s0, s14
 8004a74:	eef0 0a67 	vmov.f32	s1, s15
 8004a78:	f00c fbfe 	bl	8011278 <cos>
 8004a7c:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 8004a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a88:	f7fb fdce 	bl	8000628 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4690      	mov	r8, r2
 8004a92:	4699      	mov	r9, r3
 8004a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a9c:	f7fb fdc4 	bl	8000628 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	f7fb fc08 	bl	80002bc <__adddf3>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <CalcError1+0x104>)
 8004ab2:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 8004ab6:	68bc      	ldr	r4, [r7, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fb fdaf 	bl	8000628 <__aeabi_dmul>
 8004aca:	4603      	mov	r3, r0
 8004acc:	460c      	mov	r4, r1
 8004ace:	4625      	mov	r5, r4
 8004ad0:	461c      	mov	r4, r3
 8004ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ada:	f7fb fda5 	bl	8000628 <__aeabi_dmul>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fbe9 	bl	80002bc <__adddf3>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <CalcError1+0x104>)
 8004af0:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <CalcError1+0x100>)
 8004af6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <CalcError1+0x100>)
 8004afc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b00:	461a      	mov	r2, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	f7fb fbd8 	bl	80002b8 <__aeabi_dsub>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <CalcError1+0x104>)
 8004b0e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004b12:	bf00      	nop
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b1c:	20039338 	.word	0x20039338
 8004b20:	20039368 	.word	0x20039368

08004b24 <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004b24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b28:	b08a      	sub	sp, #40	; 0x28
 8004b2a:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004b2c:	4b7a      	ldr	r3, [pc, #488]	; (8004d18 <path_following_step+0x1f4>)
 8004b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	4b79      	ldr	r3, [pc, #484]	; (8004d1c <path_following_step+0x1f8>)
 8004b38:	f7fb fd76 	bl	8000628 <__aeabi_dmul>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004b44:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <path_following_step+0x1fc>)
 8004b46:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b52:	f7fb fbb1 	bl	80002b8 <__aeabi_dsub>
 8004b56:	4603      	mov	r3, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
  mon1 = rtb_TSamp;
 8004b5e:	4a71      	ldr	r2, [pc, #452]	; (8004d24 <path_following_step+0x200>)
 8004b60:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b64:	e9c2 3400 	strd	r3, r4, [r2]
  mon2 = rtDW.UD_DSTATE;
 8004b68:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <path_following_step+0x1fc>)
 8004b6a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004b6e:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <path_following_step+0x204>)
 8004b70:	e9c2 3400 	strd	r3, r4, [r2]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b7c:	f7fb fd54 	bl	8000628 <__aeabi_dmul>
 8004b80:	4603      	mov	r3, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004b88:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <path_following_step+0x1f4>)
 8004b8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	4b62      	ldr	r3, [pc, #392]	; (8004d1c <path_following_step+0x1f8>)
 8004b94:	f7fb fd48 	bl	8000628 <__aeabi_dmul>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004ba0:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <path_following_step+0x1fc>)
 8004ba2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4623      	mov	r3, r4
 8004baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bae:	f7fb fb83 	bl	80002b8 <__aeabi_dsub>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bc2:	f7fb fd31 	bl	8000628 <__aeabi_dmul>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	4621      	mov	r1, r4
 8004bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bd2:	f7fb fb73 	bl	80002bc <__adddf3>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	ec44 3b17 	vmov	d7, r3, r4
 8004bde:	eeb0 0a47 	vmov.f32	s0, s14
 8004be2:	eef0 0a67 	vmov.f32	s1, s15
 8004be6:	f00c fbd3 	bl	8011390 <sqrt>
 8004bea:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004bee:	f7ff ff15 	bl	8004a1c <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <path_following_step+0x1f4>)
 8004bf4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <path_following_step+0x1f8>)
 8004bfe:	f7fb fd13 	bl	8000628 <__aeabi_dmul>
 8004c02:	4603      	mov	r3, r0
 8004c04:	460c      	mov	r4, r1
 8004c06:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004c0a:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <path_following_step+0x1fc>)
 8004c0c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004c10:	461a      	mov	r2, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c18:	f7fb fb4e 	bl	80002b8 <__aeabi_dsub>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004c24:	4a3e      	ldr	r2, [pc, #248]	; (8004d20 <path_following_step+0x1fc>)
 8004c26:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c2a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004c2e:	4a3c      	ldr	r2, [pc, #240]	; (8004d20 <path_following_step+0x1fc>)
 8004c30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c34:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004c38:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <path_following_step+0x1fc>)
 8004c3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c3e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <path_following_step+0x208>)
 8004c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <path_following_step+0x1fc>)
 8004c4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4623      	mov	r3, r4
 8004c52:	f7fb fce9 	bl	8000628 <__aeabi_dmul>
 8004c56:	4603      	mov	r3, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4625      	mov	r5, r4
 8004c5c:	461c      	mov	r4, r3
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <path_following_step+0x1fc>)
 8004c60:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c64:	eeb0 0a47 	vmov.f32	s0, s14
 8004c68:	eef0 0a67 	vmov.f32	s1, s15
 8004c6c:	f00c fb04 	bl	8011278 <cos>
 8004c70:	ec51 0b10 	vmov	r0, r1, d0
 8004c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c78:	f7fb fcd6 	bl	8000628 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7fb fb1a 	bl	80002bc <__adddf3>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <path_following_step+0x20c>)
 8004c8e:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <path_following_step+0x208>)
 8004c94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <path_following_step+0x1fc>)
 8004c9a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	f7fb fcc1 	bl	8000628 <__aeabi_dmul>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4698      	mov	r8, r3
 8004cac:	46a1      	mov	r9, r4
 8004cae:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <path_following_step+0x208>)
 8004cb0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <path_following_step+0x1fc>)
 8004cb6:	ed93 7b04 	vldr	d7, [r3, #16]
 8004cba:	eeb0 0a47 	vmov.f32	s0, s14
 8004cbe:	eef0 0a67 	vmov.f32	s1, s15
 8004cc2:	f00c fb1d 	bl	8011300 <sin>
 8004cc6:	ec53 2b10 	vmov	r2, r3, d0
 8004cca:	4620      	mov	r0, r4
 8004ccc:	4629      	mov	r1, r5
 8004cce:	f7fb fcab 	bl	8000628 <__aeabi_dmul>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4649      	mov	r1, r9
 8004cde:	f7fb faed 	bl	80002bc <__adddf3>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	4621      	mov	r1, r4
 8004cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cee:	f7fb fc9b 	bl	8000628 <__aeabi_dmul>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfe:	f7fb fadd 	bl	80002bc <__adddf3>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <path_following_step+0x20c>)
 8004d08:	e9c2 3402 	strd	r3, r4, [r2, #8]
  //mon2 = rtb_Diff;


  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004d0c:	bf00      	nop
 8004d0e:	3728      	adds	r7, #40	; 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d16:	bf00      	nop
 8004d18:	20039338 	.word	0x20039338
 8004d1c:	408f4000 	.word	0x408f4000
 8004d20:	20039368 	.word	0x20039368
 8004d24:	20039328 	.word	0x20039328
 8004d28:	20039330 	.word	0x20039330
 8004d2c:	200393a8 	.word	0x200393a8
 8004d30:	20039398 	.word	0x20039398

08004d34 <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d52:	4a0f      	ldr	r2, [pc, #60]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d58:	6453      	str	r3, [r2, #68]	; 0x44
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6413      	str	r3, [r2, #64]	; 0x40
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_MspInit+0x4c>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800

08004d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d9c:	f107 031c 	add.w	r3, r7, #28
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_ADC_MspInit+0x148>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	f040 808e 	bne.w	8004ed4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	4b48      	ldr	r3, [pc, #288]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	4a47      	ldr	r2, [pc, #284]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8004dc8:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	4a40      	ldr	r2, [pc, #256]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dde:	f043 0304 	orr.w	r3, r3, #4
 8004de2:	6313      	str	r3, [r2, #48]	; 0x30
 8004de4:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4a39      	ldr	r2, [pc, #228]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004e00:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1c:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_ADC_MspInit+0x14c>)
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004e28:	230f      	movs	r3, #15
 8004e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e34:	f107 031c 	add.w	r3, r7, #28
 8004e38:	4619      	mov	r1, r3
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <HAL_ADC_MspInit+0x150>)
 8004e3c:	f002 fdee 	bl	8007a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e40:	23ff      	movs	r3, #255	; 0xff
 8004e42:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e44:	2303      	movs	r3, #3
 8004e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e4c:	f107 031c 	add.w	r3, r7, #28
 8004e50:	4619      	mov	r1, r3
 8004e52:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <HAL_ADC_MspInit+0x154>)
 8004e54:	f002 fde2 	bl	8007a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e64:	f107 031c 	add.w	r3, r7, #28
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4820      	ldr	r0, [pc, #128]	; (8004eec <HAL_ADC_MspInit+0x158>)
 8004e6c:	f002 fdd6 	bl	8007a1c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e72:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <HAL_ADC_MspInit+0x160>)
 8004e74:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e7c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e90:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e98:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ea8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004eac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004eb0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004eb8:	480d      	ldr	r0, [pc, #52]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004eba:	f002 fa13 	bl	80072e4 <HAL_DMA_Init>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004ec4:	f7ff fda6 	bl	8004a14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <HAL_ADC_MspInit+0x15c>)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004ed4:	bf00      	nop
 8004ed6:	3730      	adds	r7, #48	; 0x30
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40012100 	.word	0x40012100
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	20039288 	.word	0x20039288
 8004ef4:	40026440 	.word	0x40026440

08004ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	; 0x30
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f00:	f107 031c 	add.w	r3, r7, #28
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <HAL_I2C_MspInit+0xe8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d12c      	bne.n	8004f74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	4b31      	ldr	r3, [pc, #196]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b2e      	ldr	r3, [pc, #184]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f36:	23c0      	movs	r3, #192	; 0xc0
 8004f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f42:	2303      	movs	r3, #3
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f46:	2304      	movs	r3, #4
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4a:	f107 031c 	add.w	r3, r7, #28
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4825      	ldr	r0, [pc, #148]	; (8004fe8 <HAL_I2C_MspInit+0xf0>)
 8004f52:	f002 fd63 	bl	8007a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004f72:	e031      	b.n	8004fd8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_I2C_MspInit+0xf4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d12c      	bne.n	8004fd8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fa0:	2312      	movs	r3, #18
 8004fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fac:	2304      	movs	r3, #4
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <HAL_I2C_MspInit+0xf0>)
 8004fb8:	f002 fd30 	bl	8007a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4a07      	ldr	r2, [pc, #28]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fca:	6413      	str	r3, [r2, #64]	; 0x40
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_I2C_MspInit+0xec>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	3730      	adds	r7, #48	; 0x30
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40005400 	.word	0x40005400
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40020400 	.word	0x40020400
 8004fec:	40005800 	.word	0x40005800

08004ff0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <HAL_SD_MspInit+0x1c4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	f040 80cb 	bne.w	80051aa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	4b67      	ldr	r3, [pc, #412]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	4a66      	ldr	r2, [pc, #408]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800501e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005022:	6453      	str	r3, [r2, #68]	; 0x44
 8005024:	4b64      	ldr	r3, [pc, #400]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	4b60      	ldr	r3, [pc, #384]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	4a5f      	ldr	r2, [pc, #380]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800503a:	f043 0304 	orr.w	r3, r3, #4
 800503e:	6313      	str	r3, [r2, #48]	; 0x30
 8005040:	4b5d      	ldr	r3, [pc, #372]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 8005056:	f043 0308 	orr.w	r3, r3, #8
 800505a:	6313      	str	r3, [r2, #48]	; 0x30
 800505c:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <HAL_SD_MspInit+0x1c8>)
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005068:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800506c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005076:	2303      	movs	r3, #3
 8005078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800507a:	230c      	movs	r3, #12
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	4619      	mov	r1, r3
 8005084:	484d      	ldr	r0, [pc, #308]	; (80051bc <HAL_SD_MspInit+0x1cc>)
 8005086:	f002 fcc9 	bl	8007a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800508a:	2304      	movs	r3, #4
 800508c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508e:	2302      	movs	r3, #2
 8005090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005096:	2303      	movs	r3, #3
 8005098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800509a:	230c      	movs	r3, #12
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800509e:	f107 0314 	add.w	r3, r7, #20
 80050a2:	4619      	mov	r1, r3
 80050a4:	4846      	ldr	r0, [pc, #280]	; (80051c0 <HAL_SD_MspInit+0x1d0>)
 80050a6:	f002 fcb9 	bl	8007a1c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ac:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_SD_MspInit+0x1d8>)
 80050ae:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80050b0:	4b44      	ldr	r3, [pc, #272]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050b6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050be:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050c4:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ca:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050cc:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050d2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050da:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80050dc:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050de:	2220      	movs	r2, #32
 80050e0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80050e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050ec:	2204      	movs	r2, #4
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050f2:	2203      	movs	r2, #3
 80050f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80050f6:	4b33      	ldr	r3, [pc, #204]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 80050f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 8005100:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005106:	482f      	ldr	r0, [pc, #188]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 8005108:	f002 f8ec 	bl	80072e4 <HAL_DMA_Init>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005112:	f7ff fc7f 	bl	8004a14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
 800511c:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <HAL_SD_MspInit+0x1d4>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005122:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005124:	4a2a      	ldr	r2, [pc, #168]	; (80051d0 <HAL_SD_MspInit+0x1e0>)
 8005126:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005128:	4b28      	ldr	r3, [pc, #160]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800512a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800512e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005132:	2240      	movs	r2, #64	; 0x40
 8005134:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005138:	2200      	movs	r2, #0
 800513a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800513c:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800513e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005142:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800514a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800514c:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800514e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005152:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005156:	2220      	movs	r2, #32
 8005158:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800515a:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800515c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005160:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005164:	2204      	movs	r2, #4
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 800516a:	2203      	movs	r2, #3
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005170:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005178:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800517e:	4813      	ldr	r0, [pc, #76]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005180:	f002 f8b0 	bl	80072e4 <HAL_DMA_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800518a:	f7ff fc43 	bl	8004a14 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005192:	63da      	str	r2, [r3, #60]	; 0x3c
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_SD_MspInit+0x1dc>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	2031      	movs	r0, #49	; 0x31
 80051a0:	f002 f869 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80051a4:	2031      	movs	r0, #49	; 0x31
 80051a6:	f002 f882 	bl	80072ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80051aa:	bf00      	nop
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40020800 	.word	0x40020800
 80051c0:	40020c00 	.word	0x40020c00
 80051c4:	20038db0 	.word	0x20038db0
 80051c8:	40026458 	.word	0x40026458
 80051cc:	200390e4 	.word	0x200390e4
 80051d0:	400264a0 	.word	0x400264a0

080051d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_SPI_MspInit+0x84>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d12c      	bne.n	8005250 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_SPI_MspInit+0x88>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a10      	ldr	r2, [pc, #64]	; (800525c <HAL_SPI_MspInit+0x88>)
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <HAL_SPI_MspInit+0x88>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800522e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005234:	2302      	movs	r3, #2
 8005236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005240:	2305      	movs	r3, #5
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	4619      	mov	r1, r3
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <HAL_SPI_MspInit+0x8c>)
 800524c:	f002 fbe6 	bl	8007a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005250:	bf00      	nop
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40003800 	.word	0x40003800
 800525c:	40023800 	.word	0x40023800
 8005260:	40020400 	.word	0x40020400

08005264 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800526c:	f107 031c 	add.w	r3, r7, #28
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	609a      	str	r2, [r3, #8]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <HAL_TIM_PWM_MspInit+0xd4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d12d      	bne.n	80052e2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	4b2c      	ldr	r3, [pc, #176]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	4a24      	ldr	r2, [pc, #144]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052ac:	f043 0310 	orr.w	r3, r3, #16
 80052b0:	6313      	str	r3, [r2, #48]	; 0x30
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80052be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80052c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c4:	2302      	movs	r3, #2
 80052c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052d0:	2301      	movs	r3, #1
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052d4:	f107 031c 	add.w	r3, r7, #28
 80052d8:	4619      	mov	r1, r3
 80052da:	4819      	ldr	r0, [pc, #100]	; (8005340 <HAL_TIM_PWM_MspInit+0xdc>)
 80052dc:	f002 fb9e 	bl	8007a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80052e0:	e026      	b.n	8005330 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <HAL_TIM_PWM_MspInit+0xe0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4a11      	ldr	r2, [pc, #68]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	6413      	str	r3, [r2, #64]	; 0x40
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	693b      	ldr	r3, [r7, #16]
}
 8005308:	e012      	b.n	8005330 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <HAL_TIM_PWM_MspInit+0xe4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10d      	bne.n	8005330 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	4a07      	ldr	r2, [pc, #28]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 800531e:	f043 0304 	orr.w	r3, r3, #4
 8005322:	6413      	str	r3, [r2, #64]	; 0x40
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_TIM_PWM_MspInit+0xd8>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	bf00      	nop
 8005332:	3730      	adds	r7, #48	; 0x30
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40010000 	.word	0x40010000
 800533c:	40023800 	.word	0x40023800
 8005340:	40021000 	.word	0x40021000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800

0800534c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a3e      	ldr	r2, [pc, #248]	; (8005454 <HAL_TIM_Base_MspInit+0x108>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d116      	bne.n	800538c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	4b3d      	ldr	r3, [pc, #244]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	4a3c      	ldr	r2, [pc, #240]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005368:	f043 0310 	orr.w	r3, r3, #16
 800536c:	6413      	str	r3, [r2, #64]	; 0x40
 800536e:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	2101      	movs	r1, #1
 800537e:	2036      	movs	r0, #54	; 0x36
 8005380:	f001 ff79 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005384:	2036      	movs	r0, #54	; 0x36
 8005386:	f001 ff92 	bl	80072ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800538a:	e05e      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a32      	ldr	r2, [pc, #200]	; (800545c <HAL_TIM_Base_MspInit+0x110>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d116      	bne.n	80053c4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a2e      	ldr	r2, [pc, #184]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	2037      	movs	r0, #55	; 0x37
 80053b8:	f001 ff5d 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053bc:	2037      	movs	r0, #55	; 0x37
 80053be:	f001 ff76 	bl	80072ae <HAL_NVIC_EnableIRQ>
}
 80053c2:	e042      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a25      	ldr	r2, [pc, #148]	; (8005460 <HAL_TIM_Base_MspInit+0x114>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	4b21      	ldr	r3, [pc, #132]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	4a20      	ldr	r2, [pc, #128]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053dc:	6453      	str	r3, [r2, #68]	; 0x44
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	697b      	ldr	r3, [r7, #20]
}
 80053ea:	e02e      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <HAL_TIM_Base_MspInit+0x118>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005404:	6453      	str	r3, [r2, #68]	; 0x44
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693b      	ldr	r3, [r7, #16]
}
 8005412:	e01a      	b.n	800544a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <HAL_TIM_Base_MspInit+0x11c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d115      	bne.n	800544a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_TIM_Base_MspInit+0x10c>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	202c      	movs	r0, #44	; 0x2c
 8005440:	f001 ff19 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005444:	202c      	movs	r0, #44	; 0x2c
 8005446:	f001 ff32 	bl	80072ae <HAL_NVIC_EnableIRQ>
}
 800544a:	bf00      	nop
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40001000 	.word	0x40001000
 8005458:	40023800 	.word	0x40023800
 800545c:	40001400 	.word	0x40001400
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800
 8005468:	40001c00 	.word	0x40001c00

0800546c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_TIM_Encoder_MspInit+0x94>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d133      	bne.n	80054f6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 8005498:	f043 0302 	orr.w	r3, r3, #2
 800549c:	6453      	str	r3, [r2, #68]	; 0x44
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	6313      	str	r3, [r2, #48]	; 0x30
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_TIM_Encoder_MspInit+0x98>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054c6:	23c0      	movs	r3, #192	; 0xc0
 80054c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80054d6:	2303      	movs	r3, #3
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	4619      	mov	r1, r3
 80054e0:	4809      	ldr	r0, [pc, #36]	; (8005508 <HAL_TIM_Encoder_MspInit+0x9c>)
 80054e2:	f002 fa9b 	bl	8007a1c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80054e6:	2200      	movs	r2, #0
 80054e8:	2100      	movs	r1, #0
 80054ea:	202c      	movs	r0, #44	; 0x2c
 80054ec:	f001 fec3 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80054f0:	202c      	movs	r0, #44	; 0x2c
 80054f2:	f001 fedc 	bl	80072ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80054f6:	bf00      	nop
 80054f8:	3728      	adds	r7, #40	; 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40010400 	.word	0x40010400
 8005504:	40023800 	.word	0x40023800
 8005508:	40020800 	.word	0x40020800

0800550c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	; 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005514:	f107 031c 	add.w	r3, r7, #28
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	605a      	str	r2, [r3, #4]
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5c      	ldr	r2, [pc, #368]	; (800569c <HAL_TIM_MspPostInit+0x190>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d11f      	bne.n	800556e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005538:	f043 0310 	orr.w	r3, r3, #16
 800553c:	6313      	str	r3, [r2, #48]	; 0x30
 800553e:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800554a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800554e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005550:	2302      	movs	r3, #2
 8005552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005558:	2300      	movs	r3, #0
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800555c:	2301      	movs	r3, #1
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005560:	f107 031c 	add.w	r3, r7, #28
 8005564:	4619      	mov	r1, r3
 8005566:	484f      	ldr	r0, [pc, #316]	; (80056a4 <HAL_TIM_MspPostInit+0x198>)
 8005568:	f002 fa58 	bl	8007a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800556c:	e091      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4d      	ldr	r2, [pc, #308]	; (80056a8 <HAL_TIM_MspPostInit+0x19c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d11e      	bne.n	80055b6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	4a47      	ldr	r2, [pc, #284]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005582:	f043 0302 	orr.w	r3, r3, #2
 8005586:	6313      	str	r3, [r2, #48]	; 0x30
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005594:	2330      	movs	r3, #48	; 0x30
 8005596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055a4:	2302      	movs	r3, #2
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	f107 031c 	add.w	r3, r7, #28
 80055ac:	4619      	mov	r1, r3
 80055ae:	483f      	ldr	r0, [pc, #252]	; (80056ac <HAL_TIM_MspPostInit+0x1a0>)
 80055b0:	f002 fa34 	bl	8007a1c <HAL_GPIO_Init>
}
 80055b4:	e06d      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3d      	ldr	r2, [pc, #244]	; (80056b0 <HAL_TIM_MspPostInit+0x1a4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d11f      	bne.n	8005600 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	4b36      	ldr	r3, [pc, #216]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 80055ca:	f043 0308 	orr.w	r3, r3, #8
 80055ce:	6313      	str	r3, [r2, #48]	; 0x30
 80055d0:	4b33      	ldr	r3, [pc, #204]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80055dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80055e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ea:	2300      	movs	r3, #0
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055ee:	2302      	movs	r3, #2
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055f2:	f107 031c 	add.w	r3, r7, #28
 80055f6:	4619      	mov	r1, r3
 80055f8:	482e      	ldr	r0, [pc, #184]	; (80056b4 <HAL_TIM_MspPostInit+0x1a8>)
 80055fa:	f002 fa0f 	bl	8007a1c <HAL_GPIO_Init>
}
 80055fe:	e048      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <HAL_TIM_MspPostInit+0x1ac>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d11f      	bne.n	800564a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005634:	2300      	movs	r3, #0
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005638:	2303      	movs	r3, #3
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	481a      	ldr	r0, [pc, #104]	; (80056ac <HAL_TIM_MspPostInit+0x1a0>)
 8005644:	f002 f9ea 	bl	8007a1c <HAL_GPIO_Init>
}
 8005648:	e023      	b.n	8005692 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_TIM_MspPostInit+0x1b0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d11e      	bne.n	8005692 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 800565e:	f043 0302 	orr.w	r3, r3, #2
 8005662:	6313      	str	r3, [r2, #48]	; 0x30
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_TIM_MspPostInit+0x194>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005682:	2303      	movs	r3, #3
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005686:	f107 031c 	add.w	r3, r7, #28
 800568a:	4619      	mov	r1, r3
 800568c:	4807      	ldr	r0, [pc, #28]	; (80056ac <HAL_TIM_MspPostInit+0x1a0>)
 800568e:	f002 f9c5 	bl	8007a1c <HAL_GPIO_Init>
}
 8005692:	bf00      	nop
 8005694:	3730      	adds	r7, #48	; 0x30
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40020400 	.word	0x40020400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40020c00 	.word	0x40020c00
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800

080056c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c8:	f107 0314 	add.w	r3, r7, #20
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_UART_MspInit+0x84>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d12b      	bne.n	800573a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <HAL_UART_MspInit+0x88>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <HAL_UART_MspInit+0x88>)
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f0:	6413      	str	r3, [r2, #64]	; 0x40
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_UART_MspInit+0x88>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_UART_MspInit+0x88>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a10      	ldr	r2, [pc, #64]	; (8005748 <HAL_UART_MspInit+0x88>)
 8005708:	f043 0308 	orr.w	r3, r3, #8
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_UART_MspInit+0x88>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800571a:	2360      	movs	r3, #96	; 0x60
 800571c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571e:	2302      	movs	r3, #2
 8005720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005726:	2303      	movs	r3, #3
 8005728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800572a:	2307      	movs	r3, #7
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800572e:	f107 0314 	add.w	r3, r7, #20
 8005732:	4619      	mov	r1, r3
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <HAL_UART_MspInit+0x8c>)
 8005736:	f002 f971 	bl	8007a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800573a:	bf00      	nop
 800573c:	3728      	adds	r7, #40	; 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40004400 	.word	0x40004400
 8005748:	40023800 	.word	0x40023800
 800574c:	40020c00 	.word	0x40020c00

08005750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005754:	e7fe      	b.n	8005754 <NMI_Handler+0x4>

08005756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800575a:	e7fe      	b.n	800575a <HardFault_Handler+0x4>

0800575c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005760:	e7fe      	b.n	8005760 <MemManage_Handler+0x4>

08005762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005766:	e7fe      	b.n	8005766 <BusFault_Handler+0x4>

08005768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800576c:	e7fe      	b.n	800576c <UsageFault_Handler+0x4>

0800576e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800579c:	f001 f84a 	bl	8006834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80057a8:	2004      	movs	r0, #4
 80057aa:	f002 fb13 	bl	8007dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057ba:	f002 fb0b 	bl	8007dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057c8:	4803      	ldr	r0, [pc, #12]	; (80057d8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80057ca:	f006 fb22 	bl	800be12 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80057ce:	4803      	ldr	r0, [pc, #12]	; (80057dc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80057d0:	f006 fb1f 	bl	800be12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80057d4:	bf00      	nop
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20038e68 	.word	0x20038e68
 80057dc:	20039064 	.word	0x20039064

080057e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80057e4:	4802      	ldr	r0, [pc, #8]	; (80057f0 <SDIO_IRQHandler+0x10>)
 80057e6:	f004 fbbb 	bl	8009f60 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200391c4 	.word	0x200391c4

080057f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80057f8:	4802      	ldr	r0, [pc, #8]	; (8005804 <TIM6_DAC_IRQHandler+0x10>)
 80057fa:	f006 fb0a 	bl	800be12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20039144 	.word	0x20039144

08005808 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800580c:	4802      	ldr	r0, [pc, #8]	; (8005818 <TIM7_IRQHandler+0x10>)
 800580e:	f006 fb00 	bl	800be12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200392e8 	.word	0x200392e8

0800581c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <DMA2_Stream2_IRQHandler+0x10>)
 8005822:	f001 fe87 	bl	8007534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20039288 	.word	0x20039288

08005830 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <DMA2_Stream3_IRQHandler+0x10>)
 8005836:	f001 fe7d 	bl	8007534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20038db0 	.word	0x20038db0

08005844 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005848:	4802      	ldr	r0, [pc, #8]	; (8005854 <DMA2_Stream6_IRQHandler+0x10>)
 800584a:	f001 fe73 	bl	8007534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200390e4 	.word	0x200390e4

08005858 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e00a      	b.n	8005880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800586a:	f3af 8000 	nop.w
 800586e:	4601      	mov	r1, r0
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	60ba      	str	r2, [r7, #8]
 8005876:	b2ca      	uxtb	r2, r1
 8005878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	3301      	adds	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	dbf0      	blt.n	800586a <_read+0x12>
	}

return len;
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
	return -1;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058ba:	605a      	str	r2, [r3, #4]
	return 0;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <_isatty>:

int _isatty(int file)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
	return 1;
 80058d2:	2301      	movs	r3, #1
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
	return 0;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005904:	4a14      	ldr	r2, [pc, #80]	; (8005958 <_sbrk+0x5c>)
 8005906:	4b15      	ldr	r3, [pc, #84]	; (800595c <_sbrk+0x60>)
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005910:	4b13      	ldr	r3, [pc, #76]	; (8005960 <_sbrk+0x64>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <_sbrk+0x64>)
 800591a:	4a12      	ldr	r2, [pc, #72]	; (8005964 <_sbrk+0x68>)
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <_sbrk+0x64>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d207      	bcs.n	800593c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800592c:	f00c fe0a 	bl	8012544 <__errno>
 8005930:	4602      	mov	r2, r0
 8005932:	230c      	movs	r3, #12
 8005934:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	e009      	b.n	8005950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <_sbrk+0x64>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <_sbrk+0x64>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	4a05      	ldr	r2, [pc, #20]	; (8005960 <_sbrk+0x64>)
 800594c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20050000 	.word	0x20050000
 800595c:	00000400 	.word	0x00000400
 8005960:	20000260 	.word	0x20000260
 8005964:	2003b438 	.word	0x2003b438

08005968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800596c:	4b08      	ldr	r3, [pc, #32]	; (8005990 <SystemInit+0x28>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	4a07      	ldr	r2, [pc, #28]	; (8005990 <SystemInit+0x28>)
 8005974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <SystemInit+0x28>)
 800597e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005982:	609a      	str	r2, [r3, #8]
#endif
}
 8005984:	bf00      	nop
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <batteryLowMode>:
double mon_v, mon_w;

bool flag = false;

void batteryLowMode()
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
	lcd_clear();
 8005998:	f7fb fb82 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800599c:	2100      	movs	r1, #0
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fb fb8e 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80059a4:	4814      	ldr	r0, [pc, #80]	; (80059f8 <batteryLowMode+0x64>)
 80059a6:	f7fb fbb5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059aa:	2101      	movs	r1, #1
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fb fb87 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80059b2:	4812      	ldr	r0, [pc, #72]	; (80059fc <batteryLowMode+0x68>)
 80059b4:	f7fb fbae 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80059b8:	2152      	movs	r1, #82	; 0x52
 80059ba:	4811      	ldr	r0, [pc, #68]	; (8005a00 <batteryLowMode+0x6c>)
 80059bc:	f7fc fa60 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059c0:	2064      	movs	r0, #100	; 0x64
 80059c2:	f000 ff57 	bl	8006874 <HAL_Delay>
		led.fullColor('Y');
 80059c6:	2159      	movs	r1, #89	; 0x59
 80059c8:	480d      	ldr	r0, [pc, #52]	; (8005a00 <batteryLowMode+0x6c>)
 80059ca:	f7fc fa59 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80059ce:	2064      	movs	r0, #100	; 0x64
 80059d0:	f000 ff50 	bl	8006874 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80059d4:	480b      	ldr	r0, [pc, #44]	; (8005a04 <batteryLowMode+0x70>)
 80059d6:	f7fc f9ef 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b02      	cmp	r3, #2
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0e6      	beq.n	80059b8 <batteryLowMode+0x24>
			HAL_Delay(500);
 80059ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059ee:	f000 ff41 	bl	8006874 <HAL_Delay>
			break;
 80059f2:	bf00      	nop
		}
	}
}
 80059f4:	bf00      	nop
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	080173fc 	.word	0x080173fc
 80059fc:	08017404 	.word	0x08017404
 8005a00:	2000056c 	.word	0x2000056c
 8005a04:	20000560 	.word	0x20000560

08005a08 <cppInit>:

void cppInit(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	lcd_init();
 8005a0c:	f7fb fb04 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005a10:	482f      	ldr	r0, [pc, #188]	; (8005ad0 <cppInit+0xc8>)
 8005a12:	f7fd fcc8 	bl	80033a6 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005a16:	2064      	movs	r0, #100	; 0x64
 8005a18:	f000 ff2c 	bl	8006874 <HAL_Delay>
	power_sensor.updateValues();
 8005a1c:	482c      	ldr	r0, [pc, #176]	; (8005ad0 <cppInit+0xc8>)
 8005a1e:	f7fd fcd3 	bl	80033c8 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005a22:	482b      	ldr	r0, [pc, #172]	; (8005ad0 <cppInit+0xc8>)
 8005a24:	f7fd fcfc 	bl	8003420 <_ZN11PowerSensor12butteryCheckEv>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <cppInit+0x2a>
 8005a2e:	f7ff ffb1 	bl	8005994 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005a32:	4828      	ldr	r0, [pc, #160]	; (8005ad4 <cppInit+0xcc>)
 8005a34:	f7fc fe8e 	bl	8002754 <_ZN6Logger10sdCardInitEv>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <cppInit+0x46>
		led.fullColor('G');
 8005a3e:	2147      	movs	r1, #71	; 0x47
 8005a40:	4825      	ldr	r0, [pc, #148]	; (8005ad8 <cppInit+0xd0>)
 8005a42:	f7fc fa1d 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a46:	2064      	movs	r0, #100	; 0x64
 8005a48:	f000 ff14 	bl	8006874 <HAL_Delay>
 8005a4c:	e006      	b.n	8005a5c <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005a4e:	2152      	movs	r1, #82	; 0x52
 8005a50:	4821      	ldr	r0, [pc, #132]	; (8005ad8 <cppInit+0xd0>)
 8005a52:	f7fc fa15 	bl	8001e80 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a56:	2064      	movs	r0, #100	; 0x64
 8005a58:	f000 ff0c 	bl	8006874 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005a5c:	481f      	ldr	r0, [pc, #124]	; (8005adc <cppInit+0xd4>)
 8005a5e:	f7fc fb6b 	bl	8002138 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005a62:	481f      	ldr	r0, [pc, #124]	; (8005ae0 <cppInit+0xd8>)
 8005a64:	f7fc ff5e 	bl	8002924 <_ZN5Motor4initEv>
	encoder.init();
 8005a68:	481e      	ldr	r0, [pc, #120]	; (8005ae4 <cppInit+0xdc>)
 8005a6a:	f7fb fba7 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 8005a6e:	481e      	ldr	r0, [pc, #120]	; (8005ae8 <cppInit+0xe0>)
 8005a70:	f7fc f892 	bl	8001b98 <_ZN3IMU4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 8005a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a78:	f000 fefc 	bl	8006874 <HAL_Delay>

	led.fullColor('M');
 8005a7c:	214d      	movs	r1, #77	; 0x4d
 8005a7e:	4816      	ldr	r0, [pc, #88]	; (8005ad8 <cppInit+0xd0>)
 8005a80:	f7fc f9fe 	bl	8001e80 <_ZN3LED9fullColorEc>
	//imu.calibration();

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005a84:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8005aec <cppInit+0xe4>
 8005a88:	eddf 0a19 	vldr	s1, [pc, #100]	; 8005af0 <cppInit+0xe8>
 8005a8c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8005af4 <cppInit+0xec>
 8005a90:	4819      	ldr	r0, [pc, #100]	; (8005af8 <cppInit+0xf0>)
 8005a92:	f7fc fda9 	bl	80025e8 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8005a96:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8005aec <cppInit+0xe4>
 8005a9a:	eddf 0a14 	vldr	s1, [pc, #80]	; 8005aec <cppInit+0xe4>
 8005a9e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005aec <cppInit+0xe4>
 8005aa2:	4816      	ldr	r0, [pc, #88]	; (8005afc <cppInit+0xf4>)
 8005aa4:	f7fd ff6c 	bl	8003980 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 8005aa8:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8005aec <cppInit+0xe4>
 8005aac:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005aec <cppInit+0xe4>
 8005ab0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005aec <cppInit+0xe4>
 8005ab4:	4811      	ldr	r0, [pc, #68]	; (8005afc <cppInit+0xf4>)
 8005ab6:	f7fd ff7c 	bl	80039b2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 8005aba:	480a      	ldr	r0, [pc, #40]	; (8005ae4 <cppInit+0xdc>)
 8005abc:	f7fb fc6c 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005ac0:	480f      	ldr	r0, [pc, #60]	; (8005b00 <cppInit+0xf8>)
 8005ac2:	f7fd f93d 	bl	8002d40 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005ac6:	480f      	ldr	r0, [pc, #60]	; (8005b04 <cppInit+0xfc>)
 8005ac8:	f7fd fa07 	bl	8002eda <_ZN13PathFollowing4initEv>

}
 8005acc:	bf00      	nop
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000570 	.word	0x20000570
 8005ad4:	200005a0 	.word	0x200005a0
 8005ad8:	2000056c 	.word	0x2000056c
 8005adc:	20000264 	.word	0x20000264
 8005ae0:	20000568 	.word	0x20000568
 8005ae4:	2001f1d8 	.word	0x2001f1d8
 8005ae8:	20000580 	.word	0x20000580
 8005aec:	00000000 	.word	0x00000000
 8005af0:	360637bd 	.word	0x360637bd
 8005af4:	3a03126f 	.word	0x3a03126f
 8005af8:	2001f248 	.word	0x2001f248
 8005afc:	2001f208 	.word	0x2001f208
 8005b00:	2001f2a8 	.word	0x2001f2a8
 8005b04:	2001f2d8 	.word	0x2001f2d8

08005b08 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005b0c:	480c      	ldr	r0, [pc, #48]	; (8005b40 <cppFlip1ms+0x38>)
 8005b0e:	f7fc fb71 	bl	80021f4 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005b12:	480c      	ldr	r0, [pc, #48]	; (8005b44 <cppFlip1ms+0x3c>)
 8005b14:	f7fc f854 	bl	8001bc0 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005b18:	480b      	ldr	r0, [pc, #44]	; (8005b48 <cppFlip1ms+0x40>)
 8005b1a:	f7fb fb71 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005b1e:	480b      	ldr	r0, [pc, #44]	; (8005b4c <cppFlip1ms+0x44>)
 8005b20:	f7fc fd9a 	bl	8002658 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005b24:	480a      	ldr	r0, [pc, #40]	; (8005b50 <cppFlip1ms+0x48>)
 8005b26:	f7fd ff5d 	bl	80039e4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005b2a:	480a      	ldr	r0, [pc, #40]	; (8005b54 <cppFlip1ms+0x4c>)
 8005b2c:	f7fd f8ca 	bl	8002cc4 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005b30:	4809      	ldr	r0, [pc, #36]	; (8005b58 <cppFlip1ms+0x50>)
 8005b32:	f7fc ff09 	bl	8002948 <_ZN5Motor9motorCtrlEv>
		odometry.clearPotition();
	}
	*/


	encoder.clearCnt();
 8005b36:	4804      	ldr	r0, [pc, #16]	; (8005b48 <cppFlip1ms+0x40>)
 8005b38:	f7fb fc3e 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000264 	.word	0x20000264
 8005b44:	20000580 	.word	0x20000580
 8005b48:	2001f1d8 	.word	0x2001f1d8
 8005b4c:	2001f248 	.word	0x2001f248
 8005b50:	2001f208 	.word	0x2001f208
 8005b54:	2001f2a8 	.word	0x2001f2a8
 8005b58:	20000568 	.word	0x20000568

08005b5c <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005b60:	4802      	ldr	r0, [pc, #8]	; (8005b6c <cppFlip100ns+0x10>)
 8005b62:	f7fc faf9 	bl	8002158 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000264 	.word	0x20000264

08005b70 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005b70:	b5b0      	push	{r4, r5, r7, lr}
 8005b72:	ed2d 8b04 	vpush	{d8-d9}
 8005b76:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005b78:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <cppFlip10ms+0x110>)
 8005b7a:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b82:	4840      	ldr	r0, [pc, #256]	; (8005c84 <cppFlip10ms+0x114>)
 8005b84:	f7fc fe2e 	bl	80027e4 <_ZN6Logger8storeLogEf>

	//path_following.setGain(0.0, 0.0, 0.0);
	static double x, y, th;
	if(flag == true){
 8005b88:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <cppFlip10ms+0x118>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d028      	beq.n	8005be2 <cppFlip10ms+0x72>
		x += 0.001;
 8005b90:	4b3e      	ldr	r3, [pc, #248]	; (8005c8c <cppFlip10ms+0x11c>)
 8005b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b96:	a338      	add	r3, pc, #224	; (adr r3, 8005c78 <cppFlip10ms+0x108>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f7fa fb8e 	bl	80002bc <__adddf3>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	4a39      	ldr	r2, [pc, #228]	; (8005c8c <cppFlip10ms+0x11c>)
 8005ba6:	e9c2 3400 	strd	r3, r4, [r2]
		y += 0.00;
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <cppFlip10ms+0x120>)
 8005bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	f7fa fb80 	bl	80002bc <__adddf3>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <cppFlip10ms+0x120>)
 8005bc2:	e9c2 3400 	strd	r3, r4, [r2]
		th += 0.00;
 8005bc6:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <cppFlip10ms+0x124>)
 8005bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f7fa fb72 	bl	80002bc <__adddf3>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <cppFlip10ms+0x124>)
 8005bde:	e9c2 3400 	strd	r3, r4, [r2]
	}
	//path_following.setTargetPathSingle(x, y, th);
	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005be2:	482d      	ldr	r0, [pc, #180]	; (8005c98 <cppFlip10ms+0x128>)
 8005be4:	f7fd f879 	bl	8002cda <_ZN8Odometry4getXEv>
 8005be8:	eeb0 8a40 	vmov.f32	s16, s0
 8005bec:	eef0 8a60 	vmov.f32	s17, s1
 8005bf0:	4829      	ldr	r0, [pc, #164]	; (8005c98 <cppFlip10ms+0x128>)
 8005bf2:	f7fd f883 	bl	8002cfc <_ZN8Odometry4getYEv>
 8005bf6:	eeb0 9a40 	vmov.f32	s18, s0
 8005bfa:	eef0 9a60 	vmov.f32	s19, s1
 8005bfe:	4826      	ldr	r0, [pc, #152]	; (8005c98 <cppFlip10ms+0x128>)
 8005c00:	f7fd f88d 	bl	8002d1e <_ZN8Odometry8getThetaEv>
 8005c04:	eeb0 7a40 	vmov.f32	s14, s0
 8005c08:	eef0 7a60 	vmov.f32	s15, s1
 8005c0c:	eeb0 2a47 	vmov.f32	s4, s14
 8005c10:	eef0 2a67 	vmov.f32	s5, s15
 8005c14:	eeb0 1a49 	vmov.f32	s2, s18
 8005c18:	eef0 1a69 	vmov.f32	s3, s19
 8005c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c20:	eef0 0a68 	vmov.f32	s1, s17
 8005c24:	481d      	ldr	r0, [pc, #116]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c26:	f7fd fb41 	bl	80032ac <_ZN13PathFollowing14setCurrentPathEddd>
	path_following.targetUpdate();
 8005c2a:	481c      	ldr	r0, [pc, #112]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c2c:	f7fd f9f0 	bl	8003010 <_ZN13PathFollowing12targetUpdateEv>
	path_following.flip();
 8005c30:	481a      	ldr	r0, [pc, #104]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c32:	f7fd fb75 	bl	8003320 <_ZN13PathFollowing4flipEv>

	path_following.getTargetVelocitys(mon_v, mon_w);
 8005c36:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <cppFlip10ms+0x130>)
 8005c38:	491a      	ldr	r1, [pc, #104]	; (8005ca4 <cppFlip10ms+0x134>)
 8005c3a:	4818      	ldr	r0, [pc, #96]	; (8005c9c <cppFlip10ms+0x12c>)
 8005c3c:	f7fd fb56 	bl	80032ec <_ZN13PathFollowing18getTargetVelocitysERdS0_>

	velocity_ctrl.setVelocity(mon_v, mon_w);
 8005c40:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <cppFlip10ms+0x134>)
 8005c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c46:	4618      	mov	r0, r3
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7fa ffe5 	bl	8000c18 <__aeabi_d2f>
 8005c4e:	4605      	mov	r5, r0
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <cppFlip10ms+0x130>)
 8005c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c56:	4618      	mov	r0, r3
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7fa ffdd 	bl	8000c18 <__aeabi_d2f>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	ee00 3a90 	vmov	s1, r3
 8005c64:	ee00 5a10 	vmov	s0, r5
 8005c68:	480f      	ldr	r0, [pc, #60]	; (8005ca8 <cppFlip10ms+0x138>)
 8005c6a:	f7fd fe75 	bl	8003958 <_ZN12VelocityCtrl11setVelocityEff>
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	ecbd 8b04 	vpop	{d8-d9}
 8005c76:	bdb0      	pop	{r4, r5, r7, pc}
 8005c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c7c:	3f50624d 	.word	0x3f50624d
 8005c80:	20000264 	.word	0x20000264
 8005c84:	200005a0 	.word	0x200005a0
 8005c88:	20036a20 	.word	0x20036a20
 8005c8c:	20036a28 	.word	0x20036a28
 8005c90:	20036a30 	.word	0x20036a30
 8005c94:	20036a38 	.word	0x20036a38
 8005c98:	2001f2a8 	.word	0x2001f2a8
 8005c9c:	2001f2d8 	.word	0x2001f2d8
 8005ca0:	20036a18 	.word	0x20036a18
 8005ca4:	20036a10 	.word	0x20036a10
 8005ca8:	2001f208 	.word	0x2001f208

08005cac <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4803      	ldr	r0, [pc, #12]	; (8005cc8 <cppExit+0x1c>)
 8005cbc:	f7fd fc3c 	bl	8003538 <_ZN10SideSensor12updateStatusEt>
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	2000055c 	.word	0x2000055c
 8005ccc:	00000000 	.word	0x00000000

08005cd0 <cppLoop>:

void cppLoop(void)
{
 8005cd0:	b5b0      	push	{r4, r5, r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005cd6:	48c0      	ldr	r0, [pc, #768]	; (8005fd8 <cppLoop+0x308>)
 8005cd8:	f7fd fbd4 	bl	8003484 <_ZN12RotarySwitch8getValueEv>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	f200 84a2 	bhi.w	8006628 <cppLoop+0x958>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <cppLoop+0x1c>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d51 	.word	0x08005d51
 8005cf4:	08005ddb 	.word	0x08005ddb
 8005cf8:	08005e87 	.word	0x08005e87
 8005cfc:	08005f3f 	.word	0x08005f3f
 8005d00:	0800603d 	.word	0x0800603d
 8005d04:	08006109 	.word	0x08006109
 8005d08:	080061c3 	.word	0x080061c3
 8005d0c:	0800629b 	.word	0x0800629b
 8005d10:	08006629 	.word	0x08006629
 8005d14:	08006629 	.word	0x08006629
 8005d18:	08006629 	.word	0x08006629
 8005d1c:	08006629 	.word	0x08006629
 8005d20:	08006629 	.word	0x08006629
 8005d24:	08006629 	.word	0x08006629
 8005d28:	08006629 	.word	0x08006629

	case 0:
		lcd_clear();
 8005d2c:	f7fb f9b8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d30:	2100      	movs	r1, #0
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7fb f9c4 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005d38:	48a8      	ldr	r0, [pc, #672]	; (8005fdc <cppLoop+0x30c>)
 8005d3a:	f7fb f9eb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7fb f9bd 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005d46:	48a6      	ldr	r0, [pc, #664]	; (8005fe0 <cppLoop+0x310>)
 8005d48:	f7fb f9e4 	bl	8001114 <lcd_printf>
		break;
 8005d4c:	f000 bc7d 	b.w	800664a <cppLoop+0x97a>

	case 1:
		lcd_clear();
 8005d50:	f7fb f9a6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d54:	2100      	movs	r1, #0
 8005d56:	2000      	movs	r0, #0
 8005d58:	f7fb f9b2 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005d5c:	48a1      	ldr	r0, [pc, #644]	; (8005fe4 <cppLoop+0x314>)
 8005d5e:	f7fb f9d9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d62:	2101      	movs	r1, #1
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7fb f9ab 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005d6a:	489f      	ldr	r0, [pc, #636]	; (8005fe8 <cppLoop+0x318>)
 8005d6c:	f7fb f9d2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d70:	489e      	ldr	r0, [pc, #632]	; (8005fec <cppLoop+0x31c>)
 8005d72:	f7fc f821 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8452 	beq.w	800662c <cppLoop+0x95c>
			HAL_Delay(500);
 8005d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d8c:	f000 fd72 	bl	8006874 <HAL_Delay>

			logger.start();
 8005d90:	4897      	ldr	r0, [pc, #604]	; (8005ff0 <cppLoop+0x320>)
 8005d92:	f7fc fd96 	bl	80028c2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005d96:	4897      	ldr	r0, [pc, #604]	; (8005ff4 <cppLoop+0x324>)
 8005d98:	f7fd fe37 	bl	8003a0a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005d9c:	eddf 0a96 	vldr	s1, [pc, #600]	; 8005ff8 <cppLoop+0x328>
 8005da0:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8005ff8 <cppLoop+0x328>
 8005da4:	4893      	ldr	r0, [pc, #588]	; (8005ff4 <cppLoop+0x324>)
 8005da6:	f7fd fdd7 	bl	8003958 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	2101      	movs	r1, #1
 8005db0:	4892      	ldr	r0, [pc, #584]	; (8005ffc <cppLoop+0x32c>)
 8005db2:	f7fc f921 	bl	8001ff8 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005db6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005dba:	f000 fd5b 	bl	8006874 <HAL_Delay>

			velocity_ctrl.stop();
 8005dbe:	488d      	ldr	r0, [pc, #564]	; (8005ff4 <cppLoop+0x324>)
 8005dc0:	f7fd fe32 	bl	8003a28 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	2100      	movs	r1, #0
 8005dca:	488c      	ldr	r0, [pc, #560]	; (8005ffc <cppLoop+0x32c>)
 8005dcc:	f7fc f914 	bl	8001ff8 <_ZN3LED2LREaa>

			logger.stop();
 8005dd0:	4887      	ldr	r0, [pc, #540]	; (8005ff0 <cppLoop+0x320>)
 8005dd2:	f7fc fd86 	bl	80028e2 <_ZN6Logger4stopEv>
		}

		break;
 8005dd6:	f000 bc29 	b.w	800662c <cppLoop+0x95c>

	case 2:
		lcd_clear();
 8005dda:	f7fb f961 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005dde:	2100      	movs	r1, #0
 8005de0:	2000      	movs	r0, #0
 8005de2:	f7fb f96d 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005de6:	4886      	ldr	r0, [pc, #536]	; (8006000 <cppLoop+0x330>)
 8005de8:	f7fb f994 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005dec:	2101      	movs	r1, #1
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fb f966 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005df4:	4883      	ldr	r0, [pc, #524]	; (8006004 <cppLoop+0x334>)
 8005df6:	f7fb f98d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005dfa:	487c      	ldr	r0, [pc, #496]	; (8005fec <cppLoop+0x31c>)
 8005dfc:	f7fb ffdc 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	bf0c      	ite	eq
 8005e06:	2301      	moveq	r3, #1
 8005e08:	2300      	movne	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 840f 	beq.w	8006630 <cppLoop+0x960>
			led.LR(-1, 1);
 8005e12:	2201      	movs	r2, #1
 8005e14:	f04f 31ff 	mov.w	r1, #4294967295
 8005e18:	4878      	ldr	r0, [pc, #480]	; (8005ffc <cppLoop+0x32c>)
 8005e1a:	f7fc f8ed 	bl	8001ff8 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e22:	f000 fd27 	bl	8006874 <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005e26:	4b78      	ldr	r3, [pc, #480]	; (8006008 <cppLoop+0x338>)
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
			double d = 0.123456789123456789123456789;
 8005e2a:	a469      	add	r4, pc, #420	; (adr r4, 8005fd0 <cppLoop+0x300>)
 8005e2c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e30:	e9c7 3408 	strd	r3, r4, [r7, #32]
			mon_f = f;
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa fb9e 	bl	8000578 <__aeabi_f2d>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	4a72      	ldr	r2, [pc, #456]	; (800600c <cppLoop+0x33c>)
 8005e42:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005e46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005e4a:	4a71      	ldr	r2, [pc, #452]	; (8006010 <cppLoop+0x340>)
 8005e4c:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005e50:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005e54:	2300      	movs	r3, #0
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	496d      	ldr	r1, [pc, #436]	; (8006014 <cppLoop+0x344>)
 8005e5e:	486e      	ldr	r0, [pc, #440]	; (8006018 <cppLoop+0x348>)
 8005e60:	f7fb fb66 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005e64:	f107 0220 	add.w	r2, r7, #32
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	2201      	movs	r2, #1
 8005e70:	496a      	ldr	r1, [pc, #424]	; (800601c <cppLoop+0x34c>)
 8005e72:	4869      	ldr	r0, [pc, #420]	; (8006018 <cppLoop+0x348>)
 8005e74:	f7fb fbc2 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e7e:	485f      	ldr	r0, [pc, #380]	; (8005ffc <cppLoop+0x32c>)
 8005e80:	f7fc f8ba 	bl	8001ff8 <_ZN3LED2LREaa>
		}
		break;
 8005e84:	e3d4      	b.n	8006630 <cppLoop+0x960>

	case 3:
		led.fullColor('C');
 8005e86:	2143      	movs	r1, #67	; 0x43
 8005e88:	485c      	ldr	r0, [pc, #368]	; (8005ffc <cppLoop+0x32c>)
 8005e8a:	f7fb fff9 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005e8e:	f7fb f907 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e92:	2100      	movs	r1, #0
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7fb f913 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005e9a:	4861      	ldr	r0, [pc, #388]	; (8006020 <cppLoop+0x350>)
 8005e9c:	f7fb f93a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fb f90c 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005ea8:	485e      	ldr	r0, [pc, #376]	; (8006024 <cppLoop+0x354>)
 8005eaa:	f7fb f933 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005eae:	484f      	ldr	r0, [pc, #316]	; (8005fec <cppLoop+0x31c>)
 8005eb0:	f7fb ff82 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	bf0c      	ite	eq
 8005eba:	2301      	moveq	r3, #1
 8005ebc:	2300      	movne	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 83b7 	beq.w	8006634 <cppLoop+0x964>
			led.LR(-1, 1);
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ecc:	484b      	ldr	r0, [pc, #300]	; (8005ffc <cppLoop+0x32c>)
 8005ece:	f7fc f893 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ed6:	f000 fccd 	bl	8006874 <HAL_Delay>

			logger.start();
 8005eda:	4845      	ldr	r0, [pc, #276]	; (8005ff0 <cppLoop+0x320>)
 8005edc:	f7fc fcf1 	bl	80028c2 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005ee0:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8006028 <cppLoop+0x358>
 8005ee4:	4851      	ldr	r0, [pc, #324]	; (800602c <cppLoop+0x35c>)
 8005ee6:	f7fc fb98 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005eea:	4850      	ldr	r0, [pc, #320]	; (800602c <cppLoop+0x35c>)
 8005eec:	f7fc fbec 	bl	80026c8 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005ef0:	f241 3088 	movw	r0, #5000	; 0x1388
 8005ef4:	f000 fcbe 	bl	8006874 <HAL_Delay>

			logger.stop();
 8005ef8:	483d      	ldr	r0, [pc, #244]	; (8005ff0 <cppLoop+0x320>)
 8005efa:	f7fc fcf2 	bl	80028e2 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005efe:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8006028 <cppLoop+0x358>
 8005f02:	484a      	ldr	r0, [pc, #296]	; (800602c <cppLoop+0x35c>)
 8005f04:	f7fc fb89 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005f08:	4848      	ldr	r0, [pc, #288]	; (800602c <cppLoop+0x35c>)
 8005f0a:	f7fc fbed 	bl	80026e8 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f12:	2101      	movs	r1, #1
 8005f14:	4839      	ldr	r0, [pc, #228]	; (8005ffc <cppLoop+0x32c>)
 8005f16:	f7fc f86f 	bl	8001ff8 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005f1a:	4a45      	ldr	r2, [pc, #276]	; (8006030 <cppLoop+0x360>)
 8005f1c:	4945      	ldr	r1, [pc, #276]	; (8006034 <cppLoop+0x364>)
 8005f1e:	4834      	ldr	r0, [pc, #208]	; (8005ff0 <cppLoop+0x320>)
 8005f20:	f7fc fc98 	bl	8002854 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4834      	ldr	r0, [pc, #208]	; (8005ffc <cppLoop+0x32c>)
 8005f2c:	f7fc f864 	bl	8001ff8 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005f30:	2200      	movs	r2, #0
 8005f32:	f04f 31ff 	mov.w	r1, #4294967295
 8005f36:	4831      	ldr	r0, [pc, #196]	; (8005ffc <cppLoop+0x32c>)
 8005f38:	f7fc f85e 	bl	8001ff8 <_ZN3LED2LREaa>
		}

		break;
 8005f3c:	e37a      	b.n	8006634 <cppLoop+0x964>

	case 4:
		led.fullColor('M');
 8005f3e:	214d      	movs	r1, #77	; 0x4d
 8005f40:	482e      	ldr	r0, [pc, #184]	; (8005ffc <cppLoop+0x32c>)
 8005f42:	f7fb ff9d 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f46:	f7fb f8ab 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7fb f8b7 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005f52:	4839      	ldr	r0, [pc, #228]	; (8006038 <cppLoop+0x368>)
 8005f54:	f7fb f8de 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f58:	2101      	movs	r1, #1
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f7fb f8b0 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005f60:	4830      	ldr	r0, [pc, #192]	; (8006024 <cppLoop+0x354>)
 8005f62:	f7fb f8d7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f66:	4821      	ldr	r0, [pc, #132]	; (8005fec <cppLoop+0x31c>)
 8005f68:	f7fb ff26 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 835d 	beq.w	8006638 <cppLoop+0x968>
			led.LR(-1, 1);
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f04f 31ff 	mov.w	r1, #4294967295
 8005f84:	481d      	ldr	r0, [pc, #116]	; (8005ffc <cppLoop+0x32c>)
 8005f86:	f7fc f837 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f8e:	f000 fc71 	bl	8006874 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005f92:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8006028 <cppLoop+0x358>
 8005f96:	4825      	ldr	r0, [pc, #148]	; (800602c <cppLoop+0x35c>)
 8005f98:	f7fc fb4e 	bl	8002638 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005f9c:	4815      	ldr	r0, [pc, #84]	; (8005ff4 <cppLoop+0x324>)
 8005f9e:	f7fd fd34 	bl	8003a0a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005fa2:	4822      	ldr	r0, [pc, #136]	; (800602c <cppLoop+0x35c>)
 8005fa4:	f7fc fb90 	bl	80026c8 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005fa8:	f242 7010 	movw	r0, #10000	; 0x2710
 8005fac:	f000 fc62 	bl	8006874 <HAL_Delay>

			line_trace.stop();
 8005fb0:	481e      	ldr	r0, [pc, #120]	; (800602c <cppLoop+0x35c>)
 8005fb2:	f7fc fb99 	bl	80026e8 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005fb6:	480f      	ldr	r0, [pc, #60]	; (8005ff4 <cppLoop+0x324>)
 8005fb8:	f7fd fd36 	bl	8003a28 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc2:	480e      	ldr	r0, [pc, #56]	; (8005ffc <cppLoop+0x32c>)
 8005fc4:	f7fc f818 	bl	8001ff8 <_ZN3LED2LREaa>
		}
		break;
 8005fc8:	e336      	b.n	8006638 <cppLoop+0x968>
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	37c1215e 	.word	0x37c1215e
 8005fd4:	3fbf9add 	.word	0x3fbf9add
 8005fd8:	20000564 	.word	0x20000564
 8005fdc:	08017408 	.word	0x08017408
 8005fe0:	0801740c 	.word	0x0801740c
 8005fe4:	08017414 	.word	0x08017414
 8005fe8:	08017420 	.word	0x08017420
 8005fec:	20000560 	.word	0x20000560
 8005ff0:	200005a0 	.word	0x200005a0
 8005ff4:	2001f208 	.word	0x2001f208
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	2000056c 	.word	0x2000056c
 8006000:	08017428 	.word	0x08017428
 8006004:	0801742c 	.word	0x0801742c
 8006008:	3dfcd6ea 	.word	0x3dfcd6ea
 800600c:	20036a00 	.word	0x20036a00
 8006010:	20036a08 	.word	0x20036a08
 8006014:	08017434 	.word	0x08017434
 8006018:	08017440 	.word	0x08017440
 800601c:	0801744c 	.word	0x0801744c
 8006020:	08017458 	.word	0x08017458
 8006024:	08017460 	.word	0x08017460
 8006028:	3dcccccd 	.word	0x3dcccccd
 800602c:	2001f248 	.word	0x2001f248
 8006030:	08017468 	.word	0x08017468
 8006034:	08017474 	.word	0x08017474
 8006038:	08017484 	.word	0x08017484

	case 5:
		led.fullColor('Y');
 800603c:	2159      	movs	r1, #89	; 0x59
 800603e:	48c2      	ldr	r0, [pc, #776]	; (8006348 <cppLoop+0x678>)
 8006040:	f7fb ff1e 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006044:	f7fb f82c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006048:	2100      	movs	r1, #0
 800604a:	2000      	movs	r0, #0
 800604c:	f7fb f838 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006050:	48be      	ldr	r0, [pc, #760]	; (800634c <cppLoop+0x67c>)
 8006052:	f7fb f85f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006056:	2101      	movs	r1, #1
 8006058:	2000      	movs	r0, #0
 800605a:	f7fb f831 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800605e:	48bc      	ldr	r0, [pc, #752]	; (8006350 <cppLoop+0x680>)
 8006060:	f7fb f858 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006064:	48bb      	ldr	r0, [pc, #748]	; (8006354 <cppLoop+0x684>)
 8006066:	f7fb fea7 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 800606a:	4603      	mov	r3, r0
 800606c:	2b02      	cmp	r3, #2
 800606e:	bf0c      	ite	eq
 8006070:	2301      	moveq	r3, #1
 8006072:	2300      	movne	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 82e0 	beq.w	800663c <cppLoop+0x96c>
			led.LR(-1, 1);
 800607c:	2201      	movs	r2, #1
 800607e:	f04f 31ff 	mov.w	r1, #4294967295
 8006082:	48b1      	ldr	r0, [pc, #708]	; (8006348 <cppLoop+0x678>)
 8006084:	f7fb ffb8 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800608c:	f000 fbf2 	bl	8006874 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006090:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8006358 <cppLoop+0x688>
 8006094:	48b1      	ldr	r0, [pc, #708]	; (800635c <cppLoop+0x68c>)
 8006096:	f7fc fac0 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800609a:	48b0      	ldr	r0, [pc, #704]	; (800635c <cppLoop+0x68c>)
 800609c:	f7fc fb14 	bl	80026c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80060a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060a4:	f000 fbe6 	bl	8006874 <HAL_Delay>

			led.fullColor('R');
 80060a8:	2152      	movs	r1, #82	; 0x52
 80060aa:	48a7      	ldr	r0, [pc, #668]	; (8006348 <cppLoop+0x678>)
 80060ac:	f7fb fee8 	bl	8001e80 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80060b0:	48ab      	ldr	r0, [pc, #684]	; (8006360 <cppLoop+0x690>)
 80060b2:	f7fb f9ab 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80060b6:	48aa      	ldr	r0, [pc, #680]	; (8006360 <cppLoop+0x690>)
 80060b8:	f7fb f96e 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 80060bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80060c0:	f000 fbd8 	bl	8006874 <HAL_Delay>

			line_trace.stop();
 80060c4:	48a5      	ldr	r0, [pc, #660]	; (800635c <cppLoop+0x68c>)
 80060c6:	f7fc fb0f 	bl	80026e8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80060ca:	49a6      	ldr	r1, [pc, #664]	; (8006364 <cppLoop+0x694>)
 80060cc:	48a6      	ldr	r0, [pc, #664]	; (8006368 <cppLoop+0x698>)
 80060ce:	f7fb f9bb 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 80060d2:	48a3      	ldr	r0, [pc, #652]	; (8006360 <cppLoop+0x690>)
 80060d4:	f7fb f94f 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 80060d8:	ec54 3b10 	vmov	r3, r4, d0
 80060dc:	4618      	mov	r0, r3
 80060de:	4621      	mov	r1, r4
 80060e0:	f7fa fd9a 	bl	8000c18 <__aeabi_d2f>
 80060e4:	4603      	mov	r3, r0
 80060e6:	61fb      	str	r3, [r7, #28]
			sd_write_float(1, &d, ADD_WRITE);
 80060e8:	f107 031c 	add.w	r3, r7, #28
 80060ec:	2201      	movs	r2, #1
 80060ee:	4619      	mov	r1, r3
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7fb f9cb 	bl	800148c <sd_write_float>
			user_fclose();
 80060f6:	f7fb f9b9 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 80060fa:	2200      	movs	r2, #0
 80060fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006100:	4891      	ldr	r0, [pc, #580]	; (8006348 <cppLoop+0x678>)
 8006102:	f7fb ff79 	bl	8001ff8 <_ZN3LED2LREaa>
		}

		break;
 8006106:	e299      	b.n	800663c <cppLoop+0x96c>

	case 6:
		led.fullColor('C');
 8006108:	2143      	movs	r1, #67	; 0x43
 800610a:	488f      	ldr	r0, [pc, #572]	; (8006348 <cppLoop+0x678>)
 800610c:	f7fb feb8 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006110:	f7fa ffc6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006114:	2100      	movs	r1, #0
 8006116:	2000      	movs	r0, #0
 8006118:	f7fa ffd2 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 800611c:	4893      	ldr	r0, [pc, #588]	; (800636c <cppLoop+0x69c>)
 800611e:	f7fa fff9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006122:	2101      	movs	r1, #1
 8006124:	2000      	movs	r0, #0
 8006126:	f7fa ffcb 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800612a:	4891      	ldr	r0, [pc, #580]	; (8006370 <cppLoop+0x6a0>)
 800612c:	f7fa fff2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006130:	4888      	ldr	r0, [pc, #544]	; (8006354 <cppLoop+0x684>)
 8006132:	f7fb fe41 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8006136:	4603      	mov	r3, r0
 8006138:	2b02      	cmp	r3, #2
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 827c 	beq.w	8006640 <cppLoop+0x970>
			HAL_Delay(500);
 8006148:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800614c:	f000 fb92 	bl	8006874 <HAL_Delay>
			led.LR(-1, 1);
 8006150:	2201      	movs	r2, #1
 8006152:	f04f 31ff 	mov.w	r1, #4294967295
 8006156:	487c      	ldr	r0, [pc, #496]	; (8006348 <cppLoop+0x678>)
 8006158:	f7fb ff4e 	bl	8001ff8 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 800615c:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8006374 <cppLoop+0x6a4>
 8006160:	487e      	ldr	r0, [pc, #504]	; (800635c <cppLoop+0x68c>)
 8006162:	f7fc fa5a 	bl	800261a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006166:	487d      	ldr	r0, [pc, #500]	; (800635c <cppLoop+0x68c>)
 8006168:	f7fc faae 	bl	80026c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800616c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006170:	f000 fb80 	bl	8006874 <HAL_Delay>

			led.fullColor('R');
 8006174:	2152      	movs	r1, #82	; 0x52
 8006176:	4874      	ldr	r0, [pc, #464]	; (8006348 <cppLoop+0x678>)
 8006178:	f7fb fe82 	bl	8001e80 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 800617c:	4878      	ldr	r0, [pc, #480]	; (8006360 <cppLoop+0x690>)
 800617e:	f7fb f945 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006182:	4877      	ldr	r0, [pc, #476]	; (8006360 <cppLoop+0x690>)
 8006184:	f7fb f908 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006188:	487b      	ldr	r0, [pc, #492]	; (8006378 <cppLoop+0x6a8>)
 800618a:	f7fc fdd9 	bl	8002d40 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 800618e:	487b      	ldr	r0, [pc, #492]	; (800637c <cppLoop+0x6ac>)
 8006190:	f7fc fb97 	bl	80028c2 <_ZN6Logger5startEv>

			HAL_Delay(10000);
 8006194:	f242 7010 	movw	r0, #10000	; 0x2710
 8006198:	f000 fb6c 	bl	8006874 <HAL_Delay>

			line_trace.stop();
 800619c:	486f      	ldr	r0, [pc, #444]	; (800635c <cppLoop+0x68c>)
 800619e:	f7fc faa3 	bl	80026e8 <_ZN9LineTrace4stopEv>
			logger.stop();
 80061a2:	4876      	ldr	r0, [pc, #472]	; (800637c <cppLoop+0x6ac>)
 80061a4:	f7fc fb9d 	bl	80028e2 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 80061a8:	4b75      	ldr	r3, [pc, #468]	; (8006380 <cppLoop+0x6b0>)
 80061aa:	4a76      	ldr	r2, [pc, #472]	; (8006384 <cppLoop+0x6b4>)
 80061ac:	496f      	ldr	r1, [pc, #444]	; (800636c <cppLoop+0x69c>)
 80061ae:	4873      	ldr	r0, [pc, #460]	; (800637c <cppLoop+0x6ac>)
 80061b0:	f7fc fb64 	bl	800287c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80061b4:	2200      	movs	r2, #0
 80061b6:	f04f 31ff 	mov.w	r1, #4294967295
 80061ba:	4863      	ldr	r0, [pc, #396]	; (8006348 <cppLoop+0x678>)
 80061bc:	f7fb ff1c 	bl	8001ff8 <_ZN3LED2LREaa>
		}

		break;
 80061c0:	e23e      	b.n	8006640 <cppLoop+0x970>

	case 7:
		led.fullColor('M');
 80061c2:	214d      	movs	r1, #77	; 0x4d
 80061c4:	4860      	ldr	r0, [pc, #384]	; (8006348 <cppLoop+0x678>)
 80061c6:	f7fb fe5b 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 80061ca:	f7fa ff69 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80061ce:	2100      	movs	r1, #0
 80061d0:	2000      	movs	r0, #0
 80061d2:	f7fa ff75 	bl	80010c0 <lcd_locate>
		lcd_printf("Path");
 80061d6:	486c      	ldr	r0, [pc, #432]	; (8006388 <cppLoop+0x6b8>)
 80061d8:	f7fa ff9c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061dc:	2101      	movs	r1, #1
 80061de:	2000      	movs	r0, #0
 80061e0:	f7fa ff6e 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80061e4:	485a      	ldr	r0, [pc, #360]	; (8006350 <cppLoop+0x680>)
 80061e6:	f7fa ff95 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80061ea:	485a      	ldr	r0, [pc, #360]	; (8006354 <cppLoop+0x684>)
 80061ec:	f7fb fde4 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	bf0c      	ite	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	2300      	movne	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <cppLoop+0x550>
			led.LR(-1, 1);
 8006200:	2201      	movs	r2, #1
 8006202:	f04f 31ff 	mov.w	r1, #4294967295
 8006206:	4850      	ldr	r0, [pc, #320]	; (8006348 <cppLoop+0x678>)
 8006208:	f7fb fef6 	bl	8001ff8 <_ZN3LED2LREaa>
			path_following.setTargetPathMulti();
 800620c:	485f      	ldr	r0, [pc, #380]	; (800638c <cppLoop+0x6bc>)
 800620e:	f7fc fecb 	bl	8002fa8 <_ZN13PathFollowing18setTargetPathMultiEv>
			led.LR(-1, 0);
 8006212:	2200      	movs	r2, #0
 8006214:	f04f 31ff 	mov.w	r1, #4294967295
 8006218:	484b      	ldr	r0, [pc, #300]	; (8006348 <cppLoop+0x678>)
 800621a:	f7fb feed 	bl	8001ff8 <_ZN3LED2LREaa>
			velocity_ctrl.stop();
			flag = false;

			led.LR(-1, 0);
		}
		break;
 800621e:	e211      	b.n	8006644 <cppLoop+0x974>
		else if(joy_stick.getValue() == JOY_C){
 8006220:	484c      	ldr	r0, [pc, #304]	; (8006354 <cppLoop+0x684>)
 8006222:	f7fb fdc9 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8006226:	4603      	mov	r3, r0
 8006228:	2b02      	cmp	r3, #2
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8206 	beq.w	8006644 <cppLoop+0x974>
			led.LR(-1, 1);
 8006238:	2201      	movs	r2, #1
 800623a:	f04f 31ff 	mov.w	r1, #4294967295
 800623e:	4842      	ldr	r0, [pc, #264]	; (8006348 <cppLoop+0x678>)
 8006240:	f7fb feda 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006248:	f000 fb14 	bl	8006874 <HAL_Delay>
			led.fullColor('R');
 800624c:	2152      	movs	r1, #82	; 0x52
 800624e:	483e      	ldr	r0, [pc, #248]	; (8006348 <cppLoop+0x678>)
 8006250:	f7fb fe16 	bl	8001e80 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006254:	4842      	ldr	r0, [pc, #264]	; (8006360 <cppLoop+0x690>)
 8006256:	f7fb f8d9 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800625a:	4841      	ldr	r0, [pc, #260]	; (8006360 <cppLoop+0x690>)
 800625c:	f7fb f89c 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006260:	4845      	ldr	r0, [pc, #276]	; (8006378 <cppLoop+0x6a8>)
 8006262:	f7fc fd6d 	bl	8002d40 <_ZN8Odometry13clearPotitionEv>
			path_following.start();
 8006266:	4849      	ldr	r0, [pc, #292]	; (800638c <cppLoop+0x6bc>)
 8006268:	f7fd f868 	bl	800333c <_ZN13PathFollowing5startEv>
			flag = true;
 800626c:	4b48      	ldr	r3, [pc, #288]	; (8006390 <cppLoop+0x6c0>)
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10000);
 8006272:	f242 7010 	movw	r0, #10000	; 0x2710
 8006276:	f000 fafd 	bl	8006874 <HAL_Delay>
			path_following.stop();
 800627a:	4844      	ldr	r0, [pc, #272]	; (800638c <cppLoop+0x6bc>)
 800627c:	f7fd f86b 	bl	8003356 <_ZN13PathFollowing4stopEv>
			velocity_ctrl.stop();
 8006280:	4844      	ldr	r0, [pc, #272]	; (8006394 <cppLoop+0x6c4>)
 8006282:	f7fd fbd1 	bl	8003a28 <_ZN12VelocityCtrl4stopEv>
			flag = false;
 8006286:	4b42      	ldr	r3, [pc, #264]	; (8006390 <cppLoop+0x6c0>)
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
			led.LR(-1, 0);
 800628c:	2200      	movs	r2, #0
 800628e:	f04f 31ff 	mov.w	r1, #4294967295
 8006292:	482d      	ldr	r0, [pc, #180]	; (8006348 <cppLoop+0x678>)
 8006294:	f7fb feb0 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 8006298:	e1d4      	b.n	8006644 <cppLoop+0x974>

	case 8:
		led.fullColor('M');
 800629a:	214d      	movs	r1, #77	; 0x4d
 800629c:	482a      	ldr	r0, [pc, #168]	; (8006348 <cppLoop+0x678>)
 800629e:	f7fb fdef 	bl	8001e80 <_ZN3LED9fullColorEc>

		lcd_clear();
 80062a2:	f7fa fefd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062a6:	2100      	movs	r1, #0
 80062a8:	2000      	movs	r0, #0
 80062aa:	f7fa ff09 	bl	80010c0 <lcd_locate>
		lcd_printf("%3.1lf     ", path_following.getKxVal());
 80062ae:	4837      	ldr	r0, [pc, #220]	; (800638c <cppLoop+0x6bc>)
 80062b0:	f7fc fe3e 	bl	8002f30 <_ZN13PathFollowing8getKxValEv>
 80062b4:	ec54 3b10 	vmov	r3, r4, d0
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	4836      	ldr	r0, [pc, #216]	; (8006398 <cppLoop+0x6c8>)
 80062be:	f7fa ff29 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062c2:	2101      	movs	r1, #1
 80062c4:	2000      	movs	r0, #0
 80062c6:	f7fa fefb 	bl	80010c0 <lcd_locate>
		lcd_printf("%3.1lf,%3.1lf", path_following.getKyVal(), path_following.getKtVal());
 80062ca:	4830      	ldr	r0, [pc, #192]	; (800638c <cppLoop+0x6bc>)
 80062cc:	f7fc fe44 	bl	8002f58 <_ZN13PathFollowing8getKyValEv>
 80062d0:	ec55 4b10 	vmov	r4, r5, d0
 80062d4:	482d      	ldr	r0, [pc, #180]	; (800638c <cppLoop+0x6bc>)
 80062d6:	f7fc fe53 	bl	8002f80 <_ZN13PathFollowing8getKtValEv>
 80062da:	eeb0 7a40 	vmov.f32	s14, s0
 80062de:	eef0 7a60 	vmov.f32	s15, s1
 80062e2:	ed8d 7b00 	vstr	d7, [sp]
 80062e6:	4622      	mov	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	482c      	ldr	r0, [pc, #176]	; (800639c <cppLoop+0x6cc>)
 80062ec:	f7fa ff12 	bl	8001114 <lcd_printf>

		static double adj_kx, adj_ky, adj_kt;
		static int16_t pf_gain_selector;

		if(joy_stick.getValue() == JOY_U){
 80062f0:	4818      	ldr	r0, [pc, #96]	; (8006354 <cppLoop+0x684>)
 80062f2:	f7fb fd61 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d04e      	beq.n	80063a4 <cppLoop+0x6d4>
			led.LR(-1, 1);
 8006306:	2201      	movs	r2, #1
 8006308:	f04f 31ff 	mov.w	r1, #4294967295
 800630c:	480e      	ldr	r0, [pc, #56]	; (8006348 <cppLoop+0x678>)
 800630e:	f7fb fe73 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006312:	2064      	movs	r0, #100	; 0x64
 8006314:	f000 faae 	bl	8006874 <HAL_Delay>

			pf_gain_selector++;
 8006318:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <cppLoop+0x6d0>)
 800631a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800631e:	b29b      	uxth	r3, r3
 8006320:	3301      	adds	r3, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	b21a      	sxth	r2, r3
 8006326:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <cppLoop+0x6d0>)
 8006328:	801a      	strh	r2, [r3, #0]
			if(pf_gain_selector >= 3) pf_gain_selector = 0;
 800632a:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <cppLoop+0x6d0>)
 800632c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006330:	2b02      	cmp	r3, #2
 8006332:	dd02      	ble.n	800633a <cppLoop+0x66a>
 8006334:	4b1a      	ldr	r3, [pc, #104]	; (80063a0 <cppLoop+0x6d0>)
 8006336:	2200      	movs	r2, #0
 8006338:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800633a:	2200      	movs	r2, #0
 800633c:	f04f 31ff 	mov.w	r1, #4294967295
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <cppLoop+0x678>)
 8006342:	f7fb fe59 	bl	8001ff8 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006346:	e17f      	b.n	8006648 <cppLoop+0x978>
 8006348:	2000056c 	.word	0x2000056c
 800634c:	08017490 	.word	0x08017490
 8006350:	08017498 	.word	0x08017498
 8006354:	20000560 	.word	0x20000560
 8006358:	00000000 	.word	0x00000000
 800635c:	2001f248 	.word	0x2001f248
 8006360:	2001f1d8 	.word	0x2001f1d8
 8006364:	080174a4 	.word	0x080174a4
 8006368:	080174ac 	.word	0x080174ac
 800636c:	080174b8 	.word	0x080174b8
 8006370:	080174c4 	.word	0x080174c4
 8006374:	3dcccccd 	.word	0x3dcccccd
 8006378:	2001f2a8 	.word	0x2001f2a8
 800637c:	200005a0 	.word	0x200005a0
 8006380:	080174cc 	.word	0x080174cc
 8006384:	080174dc 	.word	0x080174dc
 8006388:	080174f0 	.word	0x080174f0
 800638c:	2001f2d8 	.word	0x2001f2d8
 8006390:	20036a20 	.word	0x20036a20
 8006394:	2001f208 	.word	0x2001f208
 8006398:	080174f8 	.word	0x080174f8
 800639c:	08017504 	.word	0x08017504
 80063a0:	20036a58 	.word	0x20036a58
		else if(joy_stick.getValue() == JOY_R){
 80063a4:	48ac      	ldr	r0, [pc, #688]	; (8006658 <cppLoop+0x988>)
 80063a6:	f7fb fd07 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d046      	beq.n	8006448 <cppLoop+0x778>
			led.LR(-1, 1);
 80063ba:	2201      	movs	r2, #1
 80063bc:	f04f 31ff 	mov.w	r1, #4294967295
 80063c0:	48a6      	ldr	r0, [pc, #664]	; (800665c <cppLoop+0x98c>)
 80063c2:	f7fb fe19 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80063c6:	2064      	movs	r0, #100	; 0x64
 80063c8:	f000 fa54 	bl	8006874 <HAL_Delay>
			if(pf_gain_selector == 0){
 80063cc:	4ba4      	ldr	r3, [pc, #656]	; (8006660 <cppLoop+0x990>)
 80063ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <cppLoop+0x722>
				adj_kx++;
 80063d6:	4ba3      	ldr	r3, [pc, #652]	; (8006664 <cppLoop+0x994>)
 80063d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	4ba1      	ldr	r3, [pc, #644]	; (8006668 <cppLoop+0x998>)
 80063e2:	f7f9 ff6b 	bl	80002bc <__adddf3>
 80063e6:	4603      	mov	r3, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	4a9e      	ldr	r2, [pc, #632]	; (8006664 <cppLoop+0x994>)
 80063ec:	e9c2 3400 	strd	r3, r4, [r2]
 80063f0:	e01f      	b.n	8006432 <cppLoop+0x762>
			else if(pf_gain_selector == 1){
 80063f2:	4b9b      	ldr	r3, [pc, #620]	; (8006660 <cppLoop+0x990>)
 80063f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d10d      	bne.n	8006418 <cppLoop+0x748>
				adj_ky++;
 80063fc:	4b9b      	ldr	r3, [pc, #620]	; (800666c <cppLoop+0x99c>)
 80063fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	4b98      	ldr	r3, [pc, #608]	; (8006668 <cppLoop+0x998>)
 8006408:	f7f9 ff58 	bl	80002bc <__adddf3>
 800640c:	4603      	mov	r3, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4a96      	ldr	r2, [pc, #600]	; (800666c <cppLoop+0x99c>)
 8006412:	e9c2 3400 	strd	r3, r4, [r2]
 8006416:	e00c      	b.n	8006432 <cppLoop+0x762>
				adj_kt++;
 8006418:	4b95      	ldr	r3, [pc, #596]	; (8006670 <cppLoop+0x9a0>)
 800641a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	4b91      	ldr	r3, [pc, #580]	; (8006668 <cppLoop+0x998>)
 8006424:	f7f9 ff4a 	bl	80002bc <__adddf3>
 8006428:	4603      	mov	r3, r0
 800642a:	460c      	mov	r4, r1
 800642c:	4a90      	ldr	r2, [pc, #576]	; (8006670 <cppLoop+0x9a0>)
 800642e:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8006432:	2152      	movs	r1, #82	; 0x52
 8006434:	4889      	ldr	r0, [pc, #548]	; (800665c <cppLoop+0x98c>)
 8006436:	f7fb fd23 	bl	8001e80 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800643a:	2200      	movs	r2, #0
 800643c:	f04f 31ff 	mov.w	r1, #4294967295
 8006440:	4886      	ldr	r0, [pc, #536]	; (800665c <cppLoop+0x98c>)
 8006442:	f7fb fdd9 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 8006446:	e0ff      	b.n	8006648 <cppLoop+0x978>
		else if(joy_stick.getValue() == JOY_L){
 8006448:	4883      	ldr	r0, [pc, #524]	; (8006658 <cppLoop+0x988>)
 800644a:	f7fb fcb5 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 800644e:	4603      	mov	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	bf0c      	ite	eq
 8006454:	2301      	moveq	r3, #1
 8006456:	2300      	movne	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d046      	beq.n	80064ec <cppLoop+0x81c>
			led.LR(-1, 1);
 800645e:	2201      	movs	r2, #1
 8006460:	f04f 31ff 	mov.w	r1, #4294967295
 8006464:	487d      	ldr	r0, [pc, #500]	; (800665c <cppLoop+0x98c>)
 8006466:	f7fb fdc7 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800646a:	2064      	movs	r0, #100	; 0x64
 800646c:	f000 fa02 	bl	8006874 <HAL_Delay>
			if(pf_gain_selector == 0){
 8006470:	4b7b      	ldr	r3, [pc, #492]	; (8006660 <cppLoop+0x990>)
 8006472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <cppLoop+0x7c6>
				adj_kx--;
 800647a:	4b7a      	ldr	r3, [pc, #488]	; (8006664 <cppLoop+0x994>)
 800647c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	4b78      	ldr	r3, [pc, #480]	; (8006668 <cppLoop+0x998>)
 8006486:	f7f9 ff17 	bl	80002b8 <__aeabi_dsub>
 800648a:	4603      	mov	r3, r0
 800648c:	460c      	mov	r4, r1
 800648e:	4a75      	ldr	r2, [pc, #468]	; (8006664 <cppLoop+0x994>)
 8006490:	e9c2 3400 	strd	r3, r4, [r2]
 8006494:	e01f      	b.n	80064d6 <cppLoop+0x806>
			else if(pf_gain_selector == 1){
 8006496:	4b72      	ldr	r3, [pc, #456]	; (8006660 <cppLoop+0x990>)
 8006498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10d      	bne.n	80064bc <cppLoop+0x7ec>
				adj_ky--;
 80064a0:	4b72      	ldr	r3, [pc, #456]	; (800666c <cppLoop+0x99c>)
 80064a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	4b6f      	ldr	r3, [pc, #444]	; (8006668 <cppLoop+0x998>)
 80064ac:	f7f9 ff04 	bl	80002b8 <__aeabi_dsub>
 80064b0:	4603      	mov	r3, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4a6d      	ldr	r2, [pc, #436]	; (800666c <cppLoop+0x99c>)
 80064b6:	e9c2 3400 	strd	r3, r4, [r2]
 80064ba:	e00c      	b.n	80064d6 <cppLoop+0x806>
				adj_kt--;
 80064bc:	4b6c      	ldr	r3, [pc, #432]	; (8006670 <cppLoop+0x9a0>)
 80064be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	4b68      	ldr	r3, [pc, #416]	; (8006668 <cppLoop+0x998>)
 80064c8:	f7f9 fef6 	bl	80002b8 <__aeabi_dsub>
 80064cc:	4603      	mov	r3, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	4a67      	ldr	r2, [pc, #412]	; (8006670 <cppLoop+0x9a0>)
 80064d2:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 80064d6:	2152      	movs	r1, #82	; 0x52
 80064d8:	4860      	ldr	r0, [pc, #384]	; (800665c <cppLoop+0x98c>)
 80064da:	f7fb fcd1 	bl	8001e80 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80064de:	2200      	movs	r2, #0
 80064e0:	f04f 31ff 	mov.w	r1, #4294967295
 80064e4:	485d      	ldr	r0, [pc, #372]	; (800665c <cppLoop+0x98c>)
 80064e6:	f7fb fd87 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 80064ea:	e0ad      	b.n	8006648 <cppLoop+0x978>
		else if(joy_stick.getValue() == JOY_D){
 80064ec:	485a      	ldr	r0, [pc, #360]	; (8006658 <cppLoop+0x988>)
 80064ee:	f7fb fc63 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	bf0c      	ite	eq
 80064f8:	2301      	moveq	r3, #1
 80064fa:	2300      	movne	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d047      	beq.n	8006592 <cppLoop+0x8c2>
			led.LR(-1, 1);
 8006502:	2201      	movs	r2, #1
 8006504:	f04f 31ff 	mov.w	r1, #4294967295
 8006508:	4854      	ldr	r0, [pc, #336]	; (800665c <cppLoop+0x98c>)
 800650a:	f7fb fd75 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800650e:	2064      	movs	r0, #100	; 0x64
 8006510:	f000 f9b0 	bl	8006874 <HAL_Delay>
			sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 8006514:	f107 0310 	add.w	r3, r7, #16
 8006518:	2201      	movs	r2, #1
 800651a:	4956      	ldr	r1, [pc, #344]	; (8006674 <cppLoop+0x9a4>)
 800651c:	4856      	ldr	r0, [pc, #344]	; (8006678 <cppLoop+0x9a8>)
 800651e:	f7fb f8cf 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 8006522:	f107 0308 	add.w	r3, r7, #8
 8006526:	2201      	movs	r2, #1
 8006528:	4954      	ldr	r1, [pc, #336]	; (800667c <cppLoop+0x9ac>)
 800652a:	4853      	ldr	r0, [pc, #332]	; (8006678 <cppLoop+0x9a8>)
 800652c:	f7fb f8c8 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 8006530:	463b      	mov	r3, r7
 8006532:	2201      	movs	r2, #1
 8006534:	4952      	ldr	r1, [pc, #328]	; (8006680 <cppLoop+0x9b0>)
 8006536:	4850      	ldr	r0, [pc, #320]	; (8006678 <cppLoop+0x9a8>)
 8006538:	f7fb f8c2 	bl	80016c0 <sd_read_array_double>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 800653c:	ed97 7b04 	vldr	d7, [r7, #16]
 8006540:	ed97 6b02 	vldr	d6, [r7, #8]
 8006544:	ed97 5b00 	vldr	d5, [r7]
 8006548:	eeb0 2a45 	vmov.f32	s4, s10
 800654c:	eef0 2a65 	vmov.f32	s5, s11
 8006550:	eeb0 1a46 	vmov.f32	s2, s12
 8006554:	eef0 1a66 	vmov.f32	s3, s13
 8006558:	eeb0 0a47 	vmov.f32	s0, s14
 800655c:	eef0 0a67 	vmov.f32	s1, s15
 8006560:	4848      	ldr	r0, [pc, #288]	; (8006684 <cppLoop+0x9b4>)
 8006562:	f7fc fcc5 	bl	8002ef0 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006566:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800656a:	4a3e      	ldr	r2, [pc, #248]	; (8006664 <cppLoop+0x994>)
 800656c:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ky = temp_ky;
 8006570:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006574:	4a3d      	ldr	r2, [pc, #244]	; (800666c <cppLoop+0x99c>)
 8006576:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kt = temp_kt;
 800657a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800657e:	4a3c      	ldr	r2, [pc, #240]	; (8006670 <cppLoop+0x9a0>)
 8006580:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8006584:	2200      	movs	r2, #0
 8006586:	f04f 31ff 	mov.w	r1, #4294967295
 800658a:	4834      	ldr	r0, [pc, #208]	; (800665c <cppLoop+0x98c>)
 800658c:	f7fb fd34 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 8006590:	e05a      	b.n	8006648 <cppLoop+0x978>
		else if(joy_stick.getValue() == JOY_C){
 8006592:	4831      	ldr	r0, [pc, #196]	; (8006658 <cppLoop+0x988>)
 8006594:	f7fb fc10 	bl	8001db8 <_ZN8JoyStick8getValueEv>
 8006598:	4603      	mov	r3, r0
 800659a:	2b02      	cmp	r3, #2
 800659c:	bf0c      	ite	eq
 800659e:	2301      	moveq	r3, #1
 80065a0:	2300      	movne	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d04f      	beq.n	8006648 <cppLoop+0x978>
			led.LR(-1, 1);
 80065a8:	2201      	movs	r2, #1
 80065aa:	f04f 31ff 	mov.w	r1, #4294967295
 80065ae:	482b      	ldr	r0, [pc, #172]	; (800665c <cppLoop+0x98c>)
 80065b0:	f7fb fd22 	bl	8001ff8 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80065b4:	2064      	movs	r0, #100	; 0x64
 80065b6:	f000 f95d 	bl	8006874 <HAL_Delay>
			sd_write_array_double("Params", "kx.txt", 1, &adj_kx, OVER_WRITE);
 80065ba:	2300      	movs	r3, #0
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4b29      	ldr	r3, [pc, #164]	; (8006664 <cppLoop+0x994>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	492c      	ldr	r1, [pc, #176]	; (8006674 <cppLoop+0x9a4>)
 80065c4:	482c      	ldr	r0, [pc, #176]	; (8006678 <cppLoop+0x9a8>)
 80065c6:	f7fb f819 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "ky.txt", 1, &adj_ky, OVER_WRITE);
 80065ca:	2300      	movs	r3, #0
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	4b27      	ldr	r3, [pc, #156]	; (800666c <cppLoop+0x99c>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	492a      	ldr	r1, [pc, #168]	; (800667c <cppLoop+0x9ac>)
 80065d4:	4828      	ldr	r0, [pc, #160]	; (8006678 <cppLoop+0x9a8>)
 80065d6:	f7fb f811 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "kt.txt", 1, &adj_kt, OVER_WRITE);
 80065da:	2300      	movs	r3, #0
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <cppLoop+0x9a0>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	4927      	ldr	r1, [pc, #156]	; (8006680 <cppLoop+0x9b0>)
 80065e4:	4824      	ldr	r0, [pc, #144]	; (8006678 <cppLoop+0x9a8>)
 80065e6:	f7fb f809 	bl	80015fc <sd_write_array_double>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80065ea:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <cppLoop+0x994>)
 80065ec:	ed93 7b00 	vldr	d7, [r3]
 80065f0:	4b1e      	ldr	r3, [pc, #120]	; (800666c <cppLoop+0x99c>)
 80065f2:	ed93 6b00 	vldr	d6, [r3]
 80065f6:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <cppLoop+0x9a0>)
 80065f8:	ed93 5b00 	vldr	d5, [r3]
 80065fc:	eeb0 2a45 	vmov.f32	s4, s10
 8006600:	eef0 2a65 	vmov.f32	s5, s11
 8006604:	eeb0 1a46 	vmov.f32	s2, s12
 8006608:	eef0 1a66 	vmov.f32	s3, s13
 800660c:	eeb0 0a47 	vmov.f32	s0, s14
 8006610:	eef0 0a67 	vmov.f32	s1, s15
 8006614:	481b      	ldr	r0, [pc, #108]	; (8006684 <cppLoop+0x9b4>)
 8006616:	f7fc fc6b 	bl	8002ef0 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	f04f 31ff 	mov.w	r1, #4294967295
 8006620:	480e      	ldr	r0, [pc, #56]	; (800665c <cppLoop+0x98c>)
 8006622:	f7fb fce9 	bl	8001ff8 <_ZN3LED2LREaa>
		break;
 8006626:	e00f      	b.n	8006648 <cppLoop+0x978>
	case 15:

		break;

	default:
		break;
 8006628:	bf00      	nop
 800662a:	e00e      	b.n	800664a <cppLoop+0x97a>
		break;
 800662c:	bf00      	nop
 800662e:	e00c      	b.n	800664a <cppLoop+0x97a>
		break;
 8006630:	bf00      	nop
 8006632:	e00a      	b.n	800664a <cppLoop+0x97a>
		break;
 8006634:	bf00      	nop
 8006636:	e008      	b.n	800664a <cppLoop+0x97a>
		break;
 8006638:	bf00      	nop
 800663a:	e006      	b.n	800664a <cppLoop+0x97a>
		break;
 800663c:	bf00      	nop
 800663e:	e004      	b.n	800664a <cppLoop+0x97a>
		break;
 8006640:	bf00      	nop
 8006642:	e002      	b.n	800664a <cppLoop+0x97a>
		break;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <cppLoop+0x97a>
		break;
 8006648:	bf00      	nop

	}

	HAL_Delay(10);
 800664a:	200a      	movs	r0, #10
 800664c:	f000 f912 	bl	8006874 <HAL_Delay>

}
 8006650:	bf00      	nop
 8006652:	3730      	adds	r7, #48	; 0x30
 8006654:	46bd      	mov	sp, r7
 8006656:	bdb0      	pop	{r4, r5, r7, pc}
 8006658:	20000560 	.word	0x20000560
 800665c:	2000056c 	.word	0x2000056c
 8006660:	20036a58 	.word	0x20036a58
 8006664:	20036a40 	.word	0x20036a40
 8006668:	3ff00000 	.word	0x3ff00000
 800666c:	20036a48 	.word	0x20036a48
 8006670:	20036a50 	.word	0x20036a50
 8006674:	08017514 	.word	0x08017514
 8006678:	0801751c 	.word	0x0801751c
 800667c:	08017524 	.word	0x08017524
 8006680:	0801752c 	.word	0x0801752c
 8006684:	2001f2d8 	.word	0x2001f2d8

08006688 <_Z41__static_initialization_and_destruction_0ii>:
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d12e      	bne.n	80066f6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800669e:	4293      	cmp	r3, r2
 80066a0:	d129      	bne.n	80066f6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 80066a2:	4817      	ldr	r0, [pc, #92]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80066a4:	f7fb fce0 	bl	8002068 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80066a8:	4816      	ldr	r0, [pc, #88]	; (8006704 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80066aa:	f7fc ff39 	bl	8003520 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80066ae:	4816      	ldr	r0, [pc, #88]	; (8006708 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80066b0:	f7fb fb76 	bl	8001da0 <_ZN8JoyStickC1Ev>
Motor motor;
 80066b4:	4815      	ldr	r0, [pc, #84]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80066b6:	f7fc f924 	bl	8002902 <_ZN5MotorC1Ev>
IMU imu;
 80066ba:	4815      	ldr	r0, [pc, #84]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80066bc:	f7fb fa48 	bl	8001b50 <_ZN3IMUC1Ev>
Logger logger;
 80066c0:	4814      	ldr	r0, [pc, #80]	; (8006714 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80066c2:	f7fc f829 	bl	8002718 <_ZN6LoggerC1Ev>
Encoder encoder;
 80066c6:	4814      	ldr	r0, [pc, #80]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80066c8:	f7fa fd44 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80066d0:	490e      	ldr	r1, [pc, #56]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80066d2:	4812      	ldr	r0, [pc, #72]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80066d4:	f7fc ff8e 	bl	80035f4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80066d8:	4b10      	ldr	r3, [pc, #64]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80066da:	4a09      	ldr	r2, [pc, #36]	; (8006700 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80066dc:	490b      	ldr	r1, [pc, #44]	; (800670c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80066de:	4810      	ldr	r0, [pc, #64]	; (8006720 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80066e0:	f7fb fe58 	bl	8002394 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80066e4:	4b0d      	ldr	r3, [pc, #52]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80066e6:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80066e8:	490b      	ldr	r1, [pc, #44]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80066ea:	480e      	ldr	r0, [pc, #56]	; (8006724 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80066ec:	f7fc f9ee 	bl	8002acc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 80066f0:	480d      	ldr	r0, [pc, #52]	; (8006728 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80066f2:	f7fc fb43 	bl	8002d7c <_ZN13PathFollowingC1Ev>
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000264 	.word	0x20000264
 8006704:	2000055c 	.word	0x2000055c
 8006708:	20000560 	.word	0x20000560
 800670c:	20000568 	.word	0x20000568
 8006710:	20000580 	.word	0x20000580
 8006714:	200005a0 	.word	0x200005a0
 8006718:	2001f1d8 	.word	0x2001f1d8
 800671c:	2001f208 	.word	0x2001f208
 8006720:	2001f248 	.word	0x2001f248
 8006724:	2001f2a8 	.word	0x2001f2a8
 8006728:	2001f2d8 	.word	0x2001f2d8

0800672c <_GLOBAL__sub_I_line_sensor>:
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
 8006730:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006734:	2001      	movs	r0, #1
 8006736:	f7ff ffa7 	bl	8006688 <_Z41__static_initialization_and_destruction_0ii>
 800673a:	bd80      	pop	{r7, pc}

0800673c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800673c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006742:	e003      	b.n	800674c <LoopCopyDataInit>

08006744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800674a:	3104      	adds	r1, #4

0800674c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800674c:	480b      	ldr	r0, [pc, #44]	; (800677c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006754:	d3f6      	bcc.n	8006744 <CopyDataInit>
  ldr  r2, =_sbss
 8006756:	4a0b      	ldr	r2, [pc, #44]	; (8006784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006758:	e002      	b.n	8006760 <LoopFillZerobss>

0800675a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800675a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800675c:	f842 3b04 	str.w	r3, [r2], #4

08006760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006764:	d3f9      	bcc.n	800675a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006766:	f7ff f8ff 	bl	8005968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800676a:	f00b fef1 	bl	8012550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800676e:	f7fd fa37 	bl	8003be0 <main>
  bx  lr    
 8006772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006774:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006778:	08017b38 	.word	0x08017b38
  ldr  r0, =_sdata
 800677c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006780:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006784:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006788:	2003b438 	.word	0x2003b438

0800678c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800678c:	e7fe      	b.n	800678c <ADC_IRQHandler>
	...

08006790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <HAL_Init+0x40>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <HAL_Init+0x40>)
 800679a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800679e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_Init+0x40>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <HAL_Init+0x40>)
 80067a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_Init+0x40>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <HAL_Init+0x40>)
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067b8:	2003      	movs	r0, #3
 80067ba:	f000 fd51 	bl	8007260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067be:	2000      	movs	r0, #0
 80067c0:	f000 f808 	bl	80067d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067c4:	f7fe fabe 	bl	8004d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40023c00 	.word	0x40023c00

080067d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067dc:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_InitTick+0x54>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_InitTick+0x58>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4619      	mov	r1, r3
 80067e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fd69 	bl	80072ca <HAL_SYSTICK_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e00e      	b.n	8006820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d80a      	bhi.n	800681e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006808:	2200      	movs	r2, #0
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	f000 fd31 	bl	8007276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006814:	4a06      	ldr	r2, [pc, #24]	; (8006830 <HAL_InitTick+0x5c>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000000 	.word	0x20000000
 800682c:	20000008 	.word	0x20000008
 8006830:	20000004 	.word	0x20000004

08006834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <HAL_IncTick+0x20>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <HAL_IncTick+0x24>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4413      	add	r3, r2
 8006844:	4a04      	ldr	r2, [pc, #16]	; (8006858 <HAL_IncTick+0x24>)
 8006846:	6013      	str	r3, [r2, #0]
}
 8006848:	bf00      	nop
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000008 	.word	0x20000008
 8006858:	200393c0 	.word	0x200393c0

0800685c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  return uwTick;
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <HAL_GetTick+0x14>)
 8006862:	681b      	ldr	r3, [r3, #0]
}
 8006864:	4618      	mov	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	200393c0 	.word	0x200393c0

08006874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800687c:	f7ff ffee 	bl	800685c <HAL_GetTick>
 8006880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d005      	beq.n	800689a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_Delay+0x40>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800689a:	bf00      	nop
 800689c:	f7ff ffde 	bl	800685c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d8f7      	bhi.n	800689c <HAL_Delay+0x28>
  {
  }
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000008 	.word	0x20000008

080068b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e033      	b.n	8006936 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fe fa5c 	bl	8004d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d118      	bne.n	8006928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068fe:	f023 0302 	bic.w	r3, r3, #2
 8006902:	f043 0202 	orr.w	r2, r3, #2
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa5a 	bl	8006dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
 8006926:	e001      	b.n	800692c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_ADC_Start_DMA+0x1e>
 800695a:	2302      	movs	r3, #2
 800695c:	e0cc      	b.n	8006af8 <HAL_ADC_Start_DMA+0x1b8>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b01      	cmp	r3, #1
 8006972:	d018      	beq.n	80069a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006984:	4b5e      	ldr	r3, [pc, #376]	; (8006b00 <HAL_ADC_Start_DMA+0x1c0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5e      	ldr	r2, [pc, #376]	; (8006b04 <HAL_ADC_Start_DMA+0x1c4>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0c9a      	lsrs	r2, r3, #18
 8006990:	4613      	mov	r3, r2
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4413      	add	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006998:	e002      	b.n	80069a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3b01      	subs	r3, #1
 800699e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f9      	bne.n	800699a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f040 80a0 	bne.w	8006af6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d106      	bne.n	8006a04 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f023 0206 	bic.w	r2, r3, #6
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44
 8006a02:	e002      	b.n	8006a0a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a12:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <HAL_ADC_Start_DMA+0x1c8>)
 8006a14:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	4a3c      	ldr	r2, [pc, #240]	; (8006b0c <HAL_ADC_Start_DMA+0x1cc>)
 8006a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	4a3b      	ldr	r2, [pc, #236]	; (8006b10 <HAL_ADC_Start_DMA+0x1d0>)
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <HAL_ADC_Start_DMA+0x1d4>)
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a46:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a56:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	334c      	adds	r3, #76	; 0x4c
 8006a62:	4619      	mov	r1, r3
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f000 fcea 	bl	8007440 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d12a      	bne.n	8006ace <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <HAL_ADC_Start_DMA+0x1d8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d015      	beq.n	8006aae <HAL_ADC_Start_DMA+0x16e>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <HAL_ADC_Start_DMA+0x1dc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d105      	bne.n	8006a98 <HAL_ADC_Start_DMA+0x158>
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_ADC_Start_DMA+0x1c8>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <HAL_ADC_Start_DMA+0x1e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d129      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
 8006aa2:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <HAL_ADC_Start_DMA+0x1c8>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	d823      	bhi.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11c      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006aca:	609a      	str	r2, [r3, #8]
 8006acc:	e013      	b.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <HAL_ADC_Start_DMA+0x1d8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d10e      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d107      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006af4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000000 	.word	0x20000000
 8006b04:	431bde83 	.word	0x431bde83
 8006b08:	40012300 	.word	0x40012300
 8006b0c:	08006fbd 	.word	0x08006fbd
 8006b10:	08007077 	.word	0x08007077
 8006b14:	08007093 	.word	0x08007093
 8006b18:	40012000 	.word	0x40012000
 8006b1c:	40012100 	.word	0x40012100
 8006b20:	40012200 	.word	0x40012200

08006b24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e113      	b.n	8006da4 <HAL_ADC_ConfigChannel+0x244>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b09      	cmp	r3, #9
 8006b8a:	d925      	bls.n	8006bd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3b1e      	subs	r3, #30
 8006ba2:	2207      	movs	r2, #7
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43da      	mvns	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	400a      	ands	r2, r1
 8006bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68d9      	ldr	r1, [r3, #12]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4403      	add	r3, r0
 8006bca:	3b1e      	subs	r3, #30
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	e022      	b.n	8006c1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6919      	ldr	r1, [r3, #16]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	2207      	movs	r2, #7
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	4403      	add	r3, r0
 8006c14:	409a      	lsls	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b06      	cmp	r3, #6
 8006c24:	d824      	bhi.n	8006c70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	3b05      	subs	r3, #5
 8006c38:	221f      	movs	r2, #31
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43da      	mvns	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	400a      	ands	r2, r1
 8006c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	4618      	mov	r0, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	3b05      	subs	r3, #5
 8006c62:	fa00 f203 	lsl.w	r2, r0, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c6e:	e04c      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d824      	bhi.n	8006cc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	3b23      	subs	r3, #35	; 0x23
 8006c8a:	221f      	movs	r2, #31
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	43da      	mvns	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	400a      	ands	r2, r1
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3b23      	subs	r3, #35	; 0x23
 8006cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc0:	e023      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3b41      	subs	r3, #65	; 0x41
 8006cd4:	221f      	movs	r2, #31
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43da      	mvns	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3b41      	subs	r3, #65	; 0x41
 8006cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d0a:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <HAL_ADC_ConfigChannel+0x250>)
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a28      	ldr	r2, [pc, #160]	; (8006db4 <HAL_ADC_ConfigChannel+0x254>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10f      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x1d8>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b12      	cmp	r3, #18
 8006d1e:	d10b      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <HAL_ADC_ConfigChannel+0x254>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d12b      	bne.n	8006d9a <HAL_ADC_ConfigChannel+0x23a>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <HAL_ADC_ConfigChannel+0x258>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <HAL_ADC_ConfigChannel+0x1f4>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b11      	cmp	r3, #17
 8006d52:	d122      	bne.n	8006d9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a11      	ldr	r2, [pc, #68]	; (8006db8 <HAL_ADC_ConfigChannel+0x258>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d111      	bne.n	8006d9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <HAL_ADC_ConfigChannel+0x25c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <HAL_ADC_ConfigChannel+0x260>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	0c9a      	lsrs	r2, r3, #18
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d8c:	e002      	b.n	8006d94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f9      	bne.n	8006d8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40012300 	.word	0x40012300
 8006db4:	40012000 	.word	0x40012000
 8006db8:	10000012 	.word	0x10000012
 8006dbc:	20000000 	.word	0x20000000
 8006dc0:	431bde83 	.word	0x431bde83

08006dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dcc:	4b79      	ldr	r3, [pc, #484]	; (8006fb4 <ADC_Init+0x1f0>)
 8006dce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	021a      	lsls	r2, r3, #8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6899      	ldr	r1, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	4a58      	ldr	r2, [pc, #352]	; (8006fb8 <ADC_Init+0x1f4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6899      	ldr	r1, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6899      	ldr	r1, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
 8006ea0:	e00f      	b.n	8006ec2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0202 	bic.w	r2, r2, #2
 8006ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6899      	ldr	r1, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7e1b      	ldrb	r3, [r3, #24]
 8006edc:	005a      	lsls	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01b      	beq.n	8006f28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	035a      	lsls	r2, r3, #13
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e007      	b.n	8006f38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	051a      	lsls	r2, r3, #20
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6899      	ldr	r1, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f7a:	025a      	lsls	r2, r3, #9
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6899      	ldr	r1, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	029a      	lsls	r2, r3, #10
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40012300 	.word	0x40012300
 8006fb8:	0f000001 	.word	0x0f000001

08006fbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d13c      	bne.n	8007050 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d12b      	bne.n	8007048 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d127      	bne.n	8007048 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007010:	2b00      	cmp	r3, #0
 8007012:	d119      	bne.n	8007048 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0220 	bic.w	r2, r2, #32
 8007022:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d105      	bne.n	8007048 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff fd6b 	bl	8006b24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800704e:	e00e      	b.n	800706e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff fd75 	bl	8006b4c <HAL_ADC_ErrorCallback>
}
 8007062:	e004      	b.n	800706e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff fd57 	bl	8006b38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2240      	movs	r2, #64	; 0x40
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff fd4a 	bl	8006b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <__NVIC_SetPriorityGrouping>:
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070d0:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <__NVIC_SetPriorityGrouping+0x44>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070dc:	4013      	ands	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070f2:	4a04      	ldr	r2, [pc, #16]	; (8007104 <__NVIC_SetPriorityGrouping+0x44>)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	60d3      	str	r3, [r2, #12]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	e000ed00 	.word	0xe000ed00

08007108 <__NVIC_GetPriorityGrouping>:
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__NVIC_GetPriorityGrouping+0x18>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	f003 0307 	and.w	r3, r3, #7
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <__NVIC_EnableIRQ>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800712e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007132:	2b00      	cmp	r3, #0
 8007134:	db0b      	blt.n	800714e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	f003 021f 	and.w	r2, r3, #31
 800713c:	4907      	ldr	r1, [pc, #28]	; (800715c <__NVIC_EnableIRQ+0x38>)
 800713e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	2001      	movs	r0, #1
 8007146:	fa00 f202 	lsl.w	r2, r0, r2
 800714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e100 	.word	0xe000e100

08007160 <__NVIC_SetPriority>:
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800716c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007170:	2b00      	cmp	r3, #0
 8007172:	db0a      	blt.n	800718a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	490c      	ldr	r1, [pc, #48]	; (80071ac <__NVIC_SetPriority+0x4c>)
 800717a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717e:	0112      	lsls	r2, r2, #4
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	440b      	add	r3, r1
 8007184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007188:	e00a      	b.n	80071a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	4908      	ldr	r1, [pc, #32]	; (80071b0 <__NVIC_SetPriority+0x50>)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	3b04      	subs	r3, #4
 8007198:	0112      	lsls	r2, r2, #4
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	440b      	add	r3, r1
 800719e:	761a      	strb	r2, [r3, #24]
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	e000e100 	.word	0xe000e100
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <NVIC_EncodePriority>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	; 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f1c3 0307 	rsb	r3, r3, #7
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	bf28      	it	cs
 80071d2:	2304      	movcs	r3, #4
 80071d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3304      	adds	r3, #4
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d902      	bls.n	80071e4 <NVIC_EncodePriority+0x30>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3b03      	subs	r3, #3
 80071e2:	e000      	b.n	80071e6 <NVIC_EncodePriority+0x32>
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43da      	mvns	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	401a      	ands	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	43d9      	mvns	r1, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800720c:	4313      	orrs	r3, r2
}
 800720e:	4618      	mov	r0, r3
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <SysTick_Config>:
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3b01      	subs	r3, #1
 8007228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800722c:	d301      	bcc.n	8007232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800722e:	2301      	movs	r3, #1
 8007230:	e00f      	b.n	8007252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <SysTick_Config+0x40>)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3b01      	subs	r3, #1
 8007238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800723a:	210f      	movs	r1, #15
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	f7ff ff8e 	bl	8007160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <SysTick_Config+0x40>)
 8007246:	2200      	movs	r2, #0
 8007248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <SysTick_Config+0x40>)
 800724c:	2207      	movs	r2, #7
 800724e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	e000e010 	.word	0xe000e010

08007260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff ff29 	bl	80070c0 <__NVIC_SetPriorityGrouping>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	4603      	mov	r3, r0
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007288:	f7ff ff3e 	bl	8007108 <__NVIC_GetPriorityGrouping>
 800728c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f7ff ff8e 	bl	80071b4 <NVIC_EncodePriority>
 8007298:	4602      	mov	r2, r0
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff ff5d 	bl	8007160 <__NVIC_SetPriority>
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	4603      	mov	r3, r0
 80072b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff ff31 	bl	8007124 <__NVIC_EnableIRQ>
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff ffa2 	bl	800721c <SysTick_Config>
 80072d8:	4603      	mov	r3, r0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80072f0:	f7ff fab4 	bl	800685c <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e099      	b.n	8007434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007320:	e00f      	b.n	8007342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007322:	f7ff fa9b 	bl	800685c <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b05      	cmp	r3, #5
 800732e:	d908      	bls.n	8007342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2203      	movs	r2, #3
 800733a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e078      	b.n	8007434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e8      	bne.n	8007322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4b38      	ldr	r3, [pc, #224]	; (800743c <HAL_DMA_Init+0x158>)
 800735c:	4013      	ands	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800736e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800737a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b04      	cmp	r3, #4
 800739a:	d107      	bne.n	80073ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	4313      	orrs	r3, r2
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d117      	bne.n	8007406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa9d 	bl	8007928 <DMA_CheckFifoParam>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2240      	movs	r2, #64	; 0x40
 80073f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007402:	2301      	movs	r3, #1
 8007404:	e016      	b.n	8007434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa54 	bl	80078bc <DMA_CalcBaseAndBitshift>
 8007414:	4603      	mov	r3, r0
 8007416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741c:	223f      	movs	r2, #63	; 0x3f
 800741e:	409a      	lsls	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	f010803f 	.word	0xf010803f

08007440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_DMA_Start_IT+0x26>
 8007462:	2302      	movs	r3, #2
 8007464:	e040      	b.n	80074e8 <HAL_DMA_Start_IT+0xa8>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b01      	cmp	r3, #1
 8007478:	d12f      	bne.n	80074da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 f9e6 	bl	8007860 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	223f      	movs	r2, #63	; 0x3f
 800749a:	409a      	lsls	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0216 	orr.w	r2, r2, #22
 80074ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0208 	orr.w	r2, r2, #8
 80074c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e005      	b.n	80074e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
 80074e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d004      	beq.n	800750e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e00c      	b.n	8007528 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2205      	movs	r2, #5
 8007512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007540:	4b92      	ldr	r3, [pc, #584]	; (800778c <HAL_DMA_IRQHandler+0x258>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a92      	ldr	r2, [pc, #584]	; (8007790 <HAL_DMA_IRQHandler+0x25c>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	0a9b      	lsrs	r3, r3, #10
 800754c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007552:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755e:	2208      	movs	r2, #8
 8007560:	409a      	lsls	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d01a      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d013      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	2208      	movs	r2, #8
 800758e:	409a      	lsls	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	f043 0201 	orr.w	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a4:	2201      	movs	r2, #1
 80075a6:	409a      	lsls	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d012      	beq.n	80075d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c2:	2201      	movs	r2, #1
 80075c4:	409a      	lsls	r2, r3
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075da:	2204      	movs	r2, #4
 80075dc:	409a      	lsls	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d012      	beq.n	800760c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f8:	2204      	movs	r2, #4
 80075fa:	409a      	lsls	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	f043 0204 	orr.w	r2, r3, #4
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007610:	2210      	movs	r2, #16
 8007612:	409a      	lsls	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d043      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d03c      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762e:	2210      	movs	r2, #16
 8007630:	409a      	lsls	r2, r3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d018      	beq.n	8007676 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d108      	bne.n	8007664 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d024      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
 8007662:	e01f      	b.n	80076a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01b      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
 8007674:	e016      	b.n	80076a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d107      	bne.n	8007694 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0208 	bic.w	r2, r2, #8
 8007692:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a8:	2220      	movs	r2, #32
 80076aa:	409a      	lsls	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 808e 	beq.w	80077d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8086 	beq.w	80077d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ca:	2220      	movs	r2, #32
 80076cc:	409a      	lsls	r2, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d136      	bne.n	800774c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0216 	bic.w	r2, r2, #22
 80076ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695a      	ldr	r2, [r3, #20]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <HAL_DMA_IRQHandler+0x1da>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0208 	bic.w	r2, r2, #8
 800771c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	223f      	movs	r2, #63	; 0x3f
 8007724:	409a      	lsls	r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d07d      	beq.n	800783e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
        }
        return;
 800774a:	e078      	b.n	800783e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01c      	beq.n	8007794 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d108      	bne.n	800777a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	2b00      	cmp	r3, #0
 800776e:	d030      	beq.n	80077d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
 8007778:	e02b      	b.n	80077d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d027      	beq.n	80077d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
 800778a:	e022      	b.n	80077d2 <HAL_DMA_IRQHandler+0x29e>
 800778c:	20000000 	.word	0x20000000
 8007790:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10f      	bne.n	80077c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0210 	bic.w	r2, r2, #16
 80077b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d032      	beq.n	8007840 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d022      	beq.n	800782c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2205      	movs	r2, #5
 80077ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0201 	bic.w	r2, r2, #1
 80077fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	3301      	adds	r3, #1
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	429a      	cmp	r2, r3
 8007808:	d307      	bcc.n	800781a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f2      	bne.n	80077fe <HAL_DMA_IRQHandler+0x2ca>
 8007818:	e000      	b.n	800781c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800781a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
 800783c:	e000      	b.n	8007840 <HAL_DMA_IRQHandler+0x30c>
        return;
 800783e:	bf00      	nop
    }
  }
}
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop

08007848 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800787c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d108      	bne.n	80078a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800789e:	e007      	b.n	80078b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	60da      	str	r2, [r3, #12]
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	3b10      	subs	r3, #16
 80078cc:	4a14      	ldr	r2, [pc, #80]	; (8007920 <DMA_CalcBaseAndBitshift+0x64>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	091b      	lsrs	r3, r3, #4
 80078d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <DMA_CalcBaseAndBitshift+0x68>)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d909      	bls.n	80078fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	1d1a      	adds	r2, r3, #4
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	659a      	str	r2, [r3, #88]	; 0x58
 80078fc:	e007      	b.n	800790e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	aaaaaaab 	.word	0xaaaaaaab
 8007924:	08017568 	.word	0x08017568

08007928 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d11f      	bne.n	8007982 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d855      	bhi.n	80079f4 <DMA_CheckFifoParam+0xcc>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <DMA_CheckFifoParam+0x28>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007961 	.word	0x08007961
 8007954:	08007973 	.word	0x08007973
 8007958:	08007961 	.word	0x08007961
 800795c:	080079f5 	.word	0x080079f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d045      	beq.n	80079f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007970:	e042      	b.n	80079f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800797a:	d13f      	bne.n	80079fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007980:	e03c      	b.n	80079fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798a:	d121      	bne.n	80079d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b03      	cmp	r3, #3
 8007990:	d836      	bhi.n	8007a00 <DMA_CheckFifoParam+0xd8>
 8007992:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <DMA_CheckFifoParam+0x70>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079a9 	.word	0x080079a9
 800799c:	080079af 	.word	0x080079af
 80079a0:	080079a9 	.word	0x080079a9
 80079a4:	080079c1 	.word	0x080079c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	73fb      	strb	r3, [r7, #15]
      break;
 80079ac:	e02f      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d024      	beq.n	8007a04 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079be:	e021      	b.n	8007a04 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079c8:	d11e      	bne.n	8007a08 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80079ce:	e01b      	b.n	8007a08 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d902      	bls.n	80079dc <DMA_CheckFifoParam+0xb4>
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d003      	beq.n	80079e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80079da:	e018      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	73fb      	strb	r3, [r7, #15]
      break;
 80079e0:	e015      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	73fb      	strb	r3, [r7, #15]
      break;
 80079f2:	e00b      	b.n	8007a0c <DMA_CheckFifoParam+0xe4>
      break;
 80079f4:	bf00      	nop
 80079f6:	e00a      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      break;
 80079f8:	bf00      	nop
 80079fa:	e008      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      break;
 80079fc:	bf00      	nop
 80079fe:	e006      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      break;
 8007a00:	bf00      	nop
 8007a02:	e004      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      break;   
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <DMA_CheckFifoParam+0xe6>
      break;
 8007a0c:	bf00      	nop
    }
  } 
  
  return status; 
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b089      	sub	sp, #36	; 0x24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	e177      	b.n	8007d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a38:	2201      	movs	r2, #1
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	f040 8166 	bne.w	8007d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00b      	beq.n	8007a76 <HAL_GPIO_Init+0x5a>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d007      	beq.n	8007a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a6a:	2b11      	cmp	r3, #17
 8007a6c:	d003      	beq.n	8007a76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b12      	cmp	r3, #18
 8007a74:	d130      	bne.n	8007ad8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	2203      	movs	r2, #3
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43db      	mvns	r3, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007aac:	2201      	movs	r2, #1
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	091b      	lsrs	r3, r3, #4
 8007ac2:	f003 0201 	and.w	r2, r3, #1
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	4013      	ands	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d003      	beq.n	8007b18 <HAL_GPIO_Init+0xfc>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b12      	cmp	r3, #18
 8007b16:	d123      	bne.n	8007b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	08da      	lsrs	r2, r3, #3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3208      	adds	r2, #8
 8007b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	220f      	movs	r2, #15
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	43db      	mvns	r3, r3
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	4013      	ands	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	08da      	lsrs	r2, r3, #3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3208      	adds	r2, #8
 8007b5a:	69b9      	ldr	r1, [r7, #24]
 8007b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b70:	43db      	mvns	r3, r3
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	4013      	ands	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f003 0203 	and.w	r2, r3, #3
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80c0 	beq.w	8007d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	4b65      	ldr	r3, [pc, #404]	; (8007d3c <HAL_GPIO_Init+0x320>)
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	4a64      	ldr	r2, [pc, #400]	; (8007d3c <HAL_GPIO_Init+0x320>)
 8007bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb2:	4b62      	ldr	r3, [pc, #392]	; (8007d3c <HAL_GPIO_Init+0x320>)
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bbe:	4a60      	ldr	r2, [pc, #384]	; (8007d40 <HAL_GPIO_Init+0x324>)
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	220f      	movs	r2, #15
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	4013      	ands	r3, r2
 8007be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a57      	ldr	r2, [pc, #348]	; (8007d44 <HAL_GPIO_Init+0x328>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d037      	beq.n	8007c5a <HAL_GPIO_Init+0x23e>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a56      	ldr	r2, [pc, #344]	; (8007d48 <HAL_GPIO_Init+0x32c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_GPIO_Init+0x23a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a55      	ldr	r2, [pc, #340]	; (8007d4c <HAL_GPIO_Init+0x330>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02b      	beq.n	8007c52 <HAL_GPIO_Init+0x236>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a54      	ldr	r2, [pc, #336]	; (8007d50 <HAL_GPIO_Init+0x334>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d025      	beq.n	8007c4e <HAL_GPIO_Init+0x232>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a53      	ldr	r2, [pc, #332]	; (8007d54 <HAL_GPIO_Init+0x338>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01f      	beq.n	8007c4a <HAL_GPIO_Init+0x22e>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a52      	ldr	r2, [pc, #328]	; (8007d58 <HAL_GPIO_Init+0x33c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d019      	beq.n	8007c46 <HAL_GPIO_Init+0x22a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a51      	ldr	r2, [pc, #324]	; (8007d5c <HAL_GPIO_Init+0x340>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <HAL_GPIO_Init+0x226>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a50      	ldr	r2, [pc, #320]	; (8007d60 <HAL_GPIO_Init+0x344>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00d      	beq.n	8007c3e <HAL_GPIO_Init+0x222>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a4f      	ldr	r2, [pc, #316]	; (8007d64 <HAL_GPIO_Init+0x348>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <HAL_GPIO_Init+0x21e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a4e      	ldr	r2, [pc, #312]	; (8007d68 <HAL_GPIO_Init+0x34c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d101      	bne.n	8007c36 <HAL_GPIO_Init+0x21a>
 8007c32:	2309      	movs	r3, #9
 8007c34:	e012      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c36:	230a      	movs	r3, #10
 8007c38:	e010      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	e00e      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c3e:	2307      	movs	r3, #7
 8007c40:	e00c      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c42:	2306      	movs	r3, #6
 8007c44:	e00a      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c46:	2305      	movs	r3, #5
 8007c48:	e008      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	e006      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e004      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e002      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <HAL_GPIO_Init+0x240>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	f002 0203 	and.w	r2, r2, #3
 8007c62:	0092      	lsls	r2, r2, #2
 8007c64:	4093      	lsls	r3, r2
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c6c:	4934      	ldr	r1, [pc, #208]	; (8007d40 <HAL_GPIO_Init+0x324>)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	089b      	lsrs	r3, r3, #2
 8007c72:	3302      	adds	r3, #2
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c7a:	4b3c      	ldr	r3, [pc, #240]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4013      	ands	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c9e:	4a33      	ldr	r2, [pc, #204]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ca4:	4b31      	ldr	r3, [pc, #196]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	43db      	mvns	r3, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cc8:	4a28      	ldr	r2, [pc, #160]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cce:	4b27      	ldr	r3, [pc, #156]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	43db      	mvns	r3, r3
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007cf8:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	43db      	mvns	r3, r3
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	4013      	ands	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <HAL_GPIO_Init+0x350>)
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	3301      	adds	r3, #1
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	f67f ae84 	bls.w	8007a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d30:	bf00      	nop
 8007d32:	3724      	adds	r7, #36	; 0x24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	40023800 	.word	0x40023800
 8007d40:	40013800 	.word	0x40013800
 8007d44:	40020000 	.word	0x40020000
 8007d48:	40020400 	.word	0x40020400
 8007d4c:	40020800 	.word	0x40020800
 8007d50:	40020c00 	.word	0x40020c00
 8007d54:	40021000 	.word	0x40021000
 8007d58:	40021400 	.word	0x40021400
 8007d5c:	40021800 	.word	0x40021800
 8007d60:	40021c00 	.word	0x40021c00
 8007d64:	40022000 	.word	0x40022000
 8007d68:	40022400 	.word	0x40022400
 8007d6c:	40013c00 	.word	0x40013c00

08007d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	887b      	ldrh	r3, [r7, #2]
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]
 8007d8c:	e001      	b.n	8007d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
 8007dac:	4613      	mov	r3, r2
 8007dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007db0:	787b      	ldrb	r3, [r7, #1]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007dbc:	e003      	b.n	8007dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dbe:	887b      	ldrh	r3, [r7, #2]
 8007dc0:	041a      	lsls	r2, r3, #16
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	619a      	str	r2, [r3, #24]
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	4013      	ands	r3, r2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d006      	beq.n	8007df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dea:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007df0:	88fb      	ldrh	r3, [r7, #6]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fb fe77 	bl	8003ae6 <HAL_GPIO_EXTI_Callback>
  }
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40013c00 	.word	0x40013c00

08007e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e11f      	b.n	8008056 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fd f864 	bl	8004ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2224      	movs	r2, #36	; 0x24
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e68:	f001 f96e 	bl	8009148 <HAL_RCC_GetPCLK1Freq>
 8007e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4a7b      	ldr	r2, [pc, #492]	; (8008060 <HAL_I2C_Init+0x25c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d807      	bhi.n	8007e88 <HAL_I2C_Init+0x84>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a7a      	ldr	r2, [pc, #488]	; (8008064 <HAL_I2C_Init+0x260>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	bf94      	ite	ls
 8007e80:	2301      	movls	r3, #1
 8007e82:	2300      	movhi	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	e006      	b.n	8007e96 <HAL_I2C_Init+0x92>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a77      	ldr	r2, [pc, #476]	; (8008068 <HAL_I2C_Init+0x264>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	bf94      	ite	ls
 8007e90:	2301      	movls	r3, #1
 8007e92:	2300      	movhi	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e0db      	b.n	8008056 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a72      	ldr	r2, [pc, #456]	; (800806c <HAL_I2C_Init+0x268>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	0c9b      	lsrs	r3, r3, #18
 8007ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4a64      	ldr	r2, [pc, #400]	; (8008060 <HAL_I2C_Init+0x25c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d802      	bhi.n	8007ed8 <HAL_I2C_Init+0xd4>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	e009      	b.n	8007eec <HAL_I2C_Init+0xe8>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	4a63      	ldr	r2, [pc, #396]	; (8008070 <HAL_I2C_Init+0x26c>)
 8007ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee8:	099b      	lsrs	r3, r3, #6
 8007eea:	3301      	adds	r3, #1
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4956      	ldr	r1, [pc, #344]	; (8008060 <HAL_I2C_Init+0x25c>)
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	d80d      	bhi.n	8007f28 <HAL_I2C_Init+0x124>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	1e59      	subs	r1, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	bf38      	it	cc
 8007f24:	2304      	movcc	r3, #4
 8007f26:	e04f      	b.n	8007fc8 <HAL_I2C_Init+0x1c4>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d111      	bne.n	8007f54 <HAL_I2C_Init+0x150>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	1e58      	subs	r0, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	440b      	add	r3, r1
 8007f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f42:	3301      	adds	r3, #1
 8007f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2301      	moveq	r3, #1
 8007f4e:	2300      	movne	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	e012      	b.n	8007f7a <HAL_I2C_Init+0x176>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1e58      	subs	r0, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6859      	ldr	r1, [r3, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	0099      	lsls	r1, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bf0c      	ite	eq
 8007f74:	2301      	moveq	r3, #1
 8007f76:	2300      	movne	r3, #0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_I2C_Init+0x17e>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e022      	b.n	8007fc8 <HAL_I2C_Init+0x1c4>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10e      	bne.n	8007fa8 <HAL_I2C_Init+0x1a4>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	1e58      	subs	r0, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6859      	ldr	r1, [r3, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	440b      	add	r3, r1
 8007f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa6:	e00f      	b.n	8007fc8 <HAL_I2C_Init+0x1c4>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	1e58      	subs	r0, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6859      	ldr	r1, [r3, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	0099      	lsls	r1, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	6809      	ldr	r1, [r1, #0]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69da      	ldr	r2, [r3, #28]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6911      	ldr	r1, [r2, #16]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	68d2      	ldr	r2, [r2, #12]
 8008002:	4311      	orrs	r1, r2
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6812      	ldr	r2, [r2, #0]
 8008008:	430b      	orrs	r3, r1
 800800a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	000186a0 	.word	0x000186a0
 8008064:	001e847f 	.word	0x001e847f
 8008068:	003d08ff 	.word	0x003d08ff
 800806c:	431bde83 	.word	0x431bde83
 8008070:	10624dd3 	.word	0x10624dd3

08008074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af02      	add	r7, sp, #8
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	461a      	mov	r2, r3
 8008080:	460b      	mov	r3, r1
 8008082:	817b      	strh	r3, [r7, #10]
 8008084:	4613      	mov	r3, r2
 8008086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008088:	f7fe fbe8 	bl	800685c <HAL_GetTick>
 800808c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b20      	cmp	r3, #32
 8008098:	f040 80e0 	bne.w	800825c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	2319      	movs	r3, #25
 80080a2:	2201      	movs	r2, #1
 80080a4:	4970      	ldr	r1, [pc, #448]	; (8008268 <HAL_I2C_Master_Transmit+0x1f4>)
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fc58 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80080b2:	2302      	movs	r3, #2
 80080b4:	e0d3      	b.n	800825e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_I2C_Master_Transmit+0x50>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e0cc      	b.n	800825e <HAL_I2C_Master_Transmit+0x1ea>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d007      	beq.n	80080ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0201 	orr.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2221      	movs	r2, #33	; 0x21
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2210      	movs	r2, #16
 8008106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	893a      	ldrh	r2, [r7, #8]
 800811a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4a50      	ldr	r2, [pc, #320]	; (800826c <HAL_I2C_Master_Transmit+0x1f8>)
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800812c:	8979      	ldrh	r1, [r7, #10]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	6a3a      	ldr	r2, [r7, #32]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fac2 	bl	80086bc <I2C_MasterRequestWrite>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e08d      	b.n	800825e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008142:	2300      	movs	r3, #0
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008158:	e066      	b.n	8008228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	6a39      	ldr	r1, [r7, #32]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fcd2 	bl	8008b08 <I2C_WaitOnTXEFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00d      	beq.n	8008186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	2b04      	cmp	r3, #4
 8008170:	d107      	bne.n	8008182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e06b      	b.n	800825e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d11b      	bne.n	80081fc <HAL_I2C_Master_Transmit+0x188>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d017      	beq.n	80081fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	6a39      	ldr	r1, [r7, #32]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fcc2 	bl	8008b8a <I2C_WaitOnBTFFlagUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00d      	beq.n	8008228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	2b04      	cmp	r3, #4
 8008212:	d107      	bne.n	8008224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e01a      	b.n	800825e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d194      	bne.n	800815a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	e000      	b.n	800825e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800825c:	2302      	movs	r3, #2
  }
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	00100002 	.word	0x00100002
 800826c:	ffff0000 	.word	0xffff0000

08008270 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	; 0x30
 8008274:	af02      	add	r7, sp, #8
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	607a      	str	r2, [r7, #4]
 800827a:	461a      	mov	r2, r3
 800827c:	460b      	mov	r3, r1
 800827e:	817b      	strh	r3, [r7, #10]
 8008280:	4613      	mov	r3, r2
 8008282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008284:	f7fe faea 	bl	800685c <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b20      	cmp	r3, #32
 8008294:	f040 820b 	bne.w	80086ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2319      	movs	r3, #25
 800829e:	2201      	movs	r2, #1
 80082a0:	497c      	ldr	r1, [pc, #496]	; (8008494 <HAL_I2C_Master_Receive+0x224>)
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 fb5a 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
 80082b0:	e1fe      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_I2C_Master_Receive+0x50>
 80082bc:	2302      	movs	r3, #2
 80082be:	e1f7      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d007      	beq.n	80082e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0201 	orr.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2222      	movs	r2, #34	; 0x22
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2210      	movs	r2, #16
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	893a      	ldrh	r2, [r7, #8]
 8008316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a5c      	ldr	r2, [pc, #368]	; (8008498 <HAL_I2C_Master_Receive+0x228>)
 8008326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008328:	8979      	ldrh	r1, [r7, #10]
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fa46 	bl	80087c0 <I2C_MasterRequestRead>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e1b8      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d113      	bne.n	800836e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008346:	2300      	movs	r3, #0
 8008348:	623b      	str	r3, [r7, #32]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	623b      	str	r3, [r7, #32]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	623b      	str	r3, [r7, #32]
 800835a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e18c      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008372:	2b01      	cmp	r3, #1
 8008374:	d11b      	bne.n	80083ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	61fb      	str	r3, [r7, #28]
 800839a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e16c      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d11b      	bne.n	80083ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083d6:	2300      	movs	r3, #0
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	61bb      	str	r3, [r7, #24]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	61bb      	str	r3, [r7, #24]
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	e14c      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008414:	e138      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841a:	2b03      	cmp	r3, #3
 800841c:	f200 80f1 	bhi.w	8008602 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008424:	2b01      	cmp	r3, #1
 8008426:	d123      	bne.n	8008470 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fbed 	bl	8008c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e139      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691a      	ldr	r2, [r3, #16]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800846e:	e10b      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008474:	2b02      	cmp	r3, #2
 8008476:	d14e      	bne.n	8008516 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	4906      	ldr	r1, [pc, #24]	; (800849c <HAL_I2C_Master_Receive+0x22c>)
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fa6a 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e10e      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
 8008492:	bf00      	nop
 8008494:	00100002 	.word	0x00100002
 8008498:	ffff0000 	.word	0xffff0000
 800849c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691a      	ldr	r2, [r3, #16]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008514:	e0b8      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	2200      	movs	r2, #0
 800851e:	4966      	ldr	r1, [pc, #408]	; (80086b8 <HAL_I2C_Master_Receive+0x448>)
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fa1b 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e0bf      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	2200      	movs	r2, #0
 800857a:	494f      	ldr	r1, [pc, #316]	; (80086b8 <HAL_I2C_Master_Receive+0x448>)
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 f9ed 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e091      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800859a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b8:	3b01      	subs	r3, #1
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008600:	e042      	b.n	8008688 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fb00 	bl	8008c0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e04c      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691a      	ldr	r2, [r3, #16]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008632:	3b01      	subs	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b04      	cmp	r3, #4
 8008654:	d118      	bne.n	8008688 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867e:	b29b      	uxth	r3, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	f47f aec2 	bne.w	8008416 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2220      	movs	r2, #32
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e000      	b.n	80086b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80086ae:	2302      	movs	r3, #2
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3728      	adds	r7, #40	; 0x28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	00010004 	.word	0x00010004

080086bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	460b      	mov	r3, r1
 80086ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d006      	beq.n	80086e6 <I2C_MasterRequestWrite+0x2a>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d003      	beq.n	80086e6 <I2C_MasterRequestWrite+0x2a>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086e4:	d108      	bne.n	80086f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e00b      	b.n	8008710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	2b12      	cmp	r3, #18
 80086fe:	d107      	bne.n	8008710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800870e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f91d 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00d      	beq.n	8008744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008736:	d103      	bne.n	8008740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800873e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e035      	b.n	80087b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874c:	d108      	bne.n	8008760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800874e:	897b      	ldrh	r3, [r7, #10]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800875c:	611a      	str	r2, [r3, #16]
 800875e:	e01b      	b.n	8008798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008760:	897b      	ldrh	r3, [r7, #10]
 8008762:	11db      	asrs	r3, r3, #7
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 0306 	and.w	r3, r3, #6
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f063 030f 	orn	r3, r3, #15
 8008770:	b2da      	uxtb	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	490e      	ldr	r1, [pc, #56]	; (80087b8 <I2C_MasterRequestWrite+0xfc>)
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 f943 	bl	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e010      	b.n	80087b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800878e:	897b      	ldrh	r3, [r7, #10]
 8008790:	b2da      	uxtb	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4907      	ldr	r1, [pc, #28]	; (80087bc <I2C_MasterRequestWrite+0x100>)
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f933 	bl	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	00010008 	.word	0x00010008
 80087bc:	00010002 	.word	0x00010002

080087c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	460b      	mov	r3, r1
 80087ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d006      	beq.n	80087fa <I2C_MasterRequestRead+0x3a>
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d003      	beq.n	80087fa <I2C_MasterRequestRead+0x3a>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80087f8:	d108      	bne.n	800880c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e00b      	b.n	8008824 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	2b11      	cmp	r3, #17
 8008812:	d107      	bne.n	8008824 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f893 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00d      	beq.n	8008858 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884a:	d103      	bne.n	8008854 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e079      	b.n	800894c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008860:	d108      	bne.n	8008874 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008862:	897b      	ldrh	r3, [r7, #10]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	b2da      	uxtb	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	611a      	str	r2, [r3, #16]
 8008872:	e05f      	b.n	8008934 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008874:	897b      	ldrh	r3, [r7, #10]
 8008876:	11db      	asrs	r3, r3, #7
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 0306 	and.w	r3, r3, #6
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f063 030f 	orn	r3, r3, #15
 8008884:	b2da      	uxtb	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4930      	ldr	r1, [pc, #192]	; (8008954 <I2C_MasterRequestRead+0x194>)
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 f8b9 	bl	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e054      	b.n	800894c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088a2:	897b      	ldrh	r3, [r7, #10]
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	4929      	ldr	r1, [pc, #164]	; (8008958 <I2C_MasterRequestRead+0x198>)
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f8a9 	bl	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e044      	b.n	800894c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f831 	bl	800895c <I2C_WaitOnFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00d      	beq.n	800891c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890e:	d103      	bne.n	8008918 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008916:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e017      	b.n	800894c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800891c:	897b      	ldrh	r3, [r7, #10]
 800891e:	11db      	asrs	r3, r3, #7
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 0306 	and.w	r3, r3, #6
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f063 030e 	orn	r3, r3, #14
 800892c:	b2da      	uxtb	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4907      	ldr	r1, [pc, #28]	; (8008958 <I2C_MasterRequestRead+0x198>)
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 f865 	bl	8008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	00010008 	.word	0x00010008
 8008958:	00010002 	.word	0x00010002

0800895c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800896c:	e025      	b.n	80089ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d021      	beq.n	80089ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008976:	f7fd ff71 	bl	800685c <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d302      	bcc.n	800898c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d116      	bne.n	80089ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f043 0220 	orr.w	r2, r3, #32
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e023      	b.n	8008a02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10d      	bne.n	80089e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	43da      	mvns	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4013      	ands	r3, r2
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	bf0c      	ite	eq
 80089d6:	2301      	moveq	r3, #1
 80089d8:	2300      	movne	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	e00c      	b.n	80089fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	43da      	mvns	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4013      	ands	r3, r2
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bf0c      	ite	eq
 80089f2:	2301      	moveq	r3, #1
 80089f4:	2300      	movne	r3, #0
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d0b6      	beq.n	800896e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a18:	e051      	b.n	8008abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	d123      	bne.n	8008a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f043 0204 	orr.w	r2, r3, #4
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e046      	b.n	8008b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d021      	beq.n	8008abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fd feef 	bl	800685c <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d116      	bne.n	8008abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e020      	b.n	8008b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d10c      	bne.n	8008ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	43da      	mvns	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bf14      	ite	ne
 8008ada:	2301      	movne	r3, #1
 8008adc:	2300      	moveq	r3, #0
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	e00b      	b.n	8008afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	43da      	mvns	r2, r3
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	4013      	ands	r3, r2
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bf14      	ite	ne
 8008af4:	2301      	movne	r3, #1
 8008af6:	2300      	moveq	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d18d      	bne.n	8008a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b14:	e02d      	b.n	8008b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 f8ce 	bl	8008cb8 <I2C_IsAcknowledgeFailed>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e02d      	b.n	8008b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d021      	beq.n	8008b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2e:	f7fd fe95 	bl	800685c <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d116      	bne.n	8008b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e007      	b.n	8008b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7c:	2b80      	cmp	r3, #128	; 0x80
 8008b7e:	d1ca      	bne.n	8008b16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b96:	e02d      	b.n	8008bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f88d 	bl	8008cb8 <I2C_IsAcknowledgeFailed>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e02d      	b.n	8008c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d021      	beq.n	8008bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb0:	f7fd fe54 	bl	800685c <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d302      	bcc.n	8008bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d116      	bne.n	8008bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	f043 0220 	orr.w	r2, r3, #32
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e007      	b.n	8008c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d1ca      	bne.n	8008b98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c18:	e042      	b.n	8008ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d119      	bne.n	8008c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0210 	mvn.w	r2, #16
 8008c30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e029      	b.n	8008cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5c:	f7fd fdfe 	bl	800685c <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d302      	bcc.n	8008c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d116      	bne.n	8008ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	f043 0220 	orr.w	r2, r3, #32
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e007      	b.n	8008cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008caa:	2b40      	cmp	r3, #64	; 0x40
 8008cac:	d1b5      	bne.n	8008c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cce:	d11b      	bne.n	8008d08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	f043 0204 	orr.w	r2, r3, #4
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
	...

08008d18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d22:	2300      	movs	r3, #0
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2a:	4a1f      	ldr	r2, [pc, #124]	; (8008da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d30:	6413      	str	r3, [r2, #64]	; 0x40
 8008d32:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <HAL_PWREx_EnableOverDrive+0x90>)
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008d3e:	4b1b      	ldr	r3, [pc, #108]	; (8008dac <HAL_PWREx_EnableOverDrive+0x94>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d44:	f7fd fd8a 	bl	800685c <HAL_GetTick>
 8008d48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d4a:	e009      	b.n	8008d60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d4c:	f7fd fd86 	bl	800685c <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d5a:	d901      	bls.n	8008d60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e01f      	b.n	8008da0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d60:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6c:	d1ee      	bne.n	8008d4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008d6e:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d74:	f7fd fd72 	bl	800685c <HAL_GetTick>
 8008d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d7a:	e009      	b.n	8008d90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d7c:	f7fd fd6e 	bl	800685c <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d8a:	d901      	bls.n	8008d90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e007      	b.n	8008da0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d9c:	d1ee      	bne.n	8008d7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	40023800 	.word	0x40023800
 8008dac:	420e0040 	.word	0x420e0040
 8008db0:	40007000 	.word	0x40007000
 8008db4:	420e0044 	.word	0x420e0044

08008db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e0cc      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dcc:	4b68      	ldr	r3, [pc, #416]	; (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d90c      	bls.n	8008df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dda:	4b65      	ldr	r3, [pc, #404]	; (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008de2:	4b63      	ldr	r3, [pc, #396]	; (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d001      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0b8      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d020      	beq.n	8008e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e0c:	4b59      	ldr	r3, [pc, #356]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	4a58      	ldr	r2, [pc, #352]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e24:	4b53      	ldr	r3, [pc, #332]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4a52      	ldr	r2, [pc, #328]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e30:	4b50      	ldr	r3, [pc, #320]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	494d      	ldr	r1, [pc, #308]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d044      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d107      	bne.n	8008e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e56:	4b47      	ldr	r3, [pc, #284]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d119      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e07f      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d003      	beq.n	8008e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d107      	bne.n	8008e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e76:	4b3f      	ldr	r3, [pc, #252]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e06f      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e86:	4b3b      	ldr	r3, [pc, #236]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e067      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e96:	4b37      	ldr	r3, [pc, #220]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f023 0203 	bic.w	r2, r3, #3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4934      	ldr	r1, [pc, #208]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ea8:	f7fd fcd8 	bl	800685c <HAL_GetTick>
 8008eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eae:	e00a      	b.n	8008ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eb0:	f7fd fcd4 	bl	800685c <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e04f      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 020c 	and.w	r2, r3, #12
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d1eb      	bne.n	8008eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ed8:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d20c      	bcs.n	8008f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ee6:	4b22      	ldr	r3, [pc, #136]	; (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eee:	4b20      	ldr	r3, [pc, #128]	; (8008f70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d001      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e032      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d008      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f0c:	4b19      	ldr	r3, [pc, #100]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4916      	ldr	r1, [pc, #88]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	490e      	ldr	r1, [pc, #56]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f3e:	f000 f821 	bl	8008f84 <HAL_RCC_GetSysClockFreq>
 8008f42:	4601      	mov	r1, r0
 8008f44:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <HAL_RCC_ClockConfig+0x1bc>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	091b      	lsrs	r3, r3, #4
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	4a0a      	ldr	r2, [pc, #40]	; (8008f78 <HAL_RCC_ClockConfig+0x1c0>)
 8008f50:	5cd3      	ldrb	r3, [r2, r3]
 8008f52:	fa21 f303 	lsr.w	r3, r1, r3
 8008f56:	4a09      	ldr	r2, [pc, #36]	; (8008f7c <HAL_RCC_ClockConfig+0x1c4>)
 8008f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <HAL_RCC_ClockConfig+0x1c8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fd fc38 	bl	80067d4 <HAL_InitTick>

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40023c00 	.word	0x40023c00
 8008f74:	40023800 	.word	0x40023800
 8008f78:	08017550 	.word	0x08017550
 8008f7c:	20000000 	.word	0x20000000
 8008f80:	20000004 	.word	0x20000004

08008f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	2300      	movs	r3, #0
 8008f94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f9a:	4b63      	ldr	r3, [pc, #396]	; (8009128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f003 030c 	and.w	r3, r3, #12
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d007      	beq.n	8008fb6 <HAL_RCC_GetSysClockFreq+0x32>
 8008fa6:	2b08      	cmp	r3, #8
 8008fa8:	d008      	beq.n	8008fbc <HAL_RCC_GetSysClockFreq+0x38>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f040 80b4 	bne.w	8009118 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fb0:	4b5e      	ldr	r3, [pc, #376]	; (800912c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008fb2:	60bb      	str	r3, [r7, #8]
       break;
 8008fb4:	e0b3      	b.n	800911e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fb6:	4b5d      	ldr	r3, [pc, #372]	; (800912c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008fb8:	60bb      	str	r3, [r7, #8]
      break;
 8008fba:	e0b0      	b.n	800911e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fbc:	4b5a      	ldr	r3, [pc, #360]	; (8009128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fc6:	4b58      	ldr	r3, [pc, #352]	; (8009128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04a      	beq.n	8009068 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fd2:	4b55      	ldr	r3, [pc, #340]	; (8009128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	099b      	lsrs	r3, r3, #6
 8008fd8:	f04f 0400 	mov.w	r4, #0
 8008fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	ea03 0501 	and.w	r5, r3, r1
 8008fe8:	ea04 0602 	and.w	r6, r4, r2
 8008fec:	4629      	mov	r1, r5
 8008fee:	4632      	mov	r2, r6
 8008ff0:	f04f 0300 	mov.w	r3, #0
 8008ff4:	f04f 0400 	mov.w	r4, #0
 8008ff8:	0154      	lsls	r4, r2, #5
 8008ffa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ffe:	014b      	lsls	r3, r1, #5
 8009000:	4619      	mov	r1, r3
 8009002:	4622      	mov	r2, r4
 8009004:	1b49      	subs	r1, r1, r5
 8009006:	eb62 0206 	sbc.w	r2, r2, r6
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	f04f 0400 	mov.w	r4, #0
 8009012:	0194      	lsls	r4, r2, #6
 8009014:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009018:	018b      	lsls	r3, r1, #6
 800901a:	1a5b      	subs	r3, r3, r1
 800901c:	eb64 0402 	sbc.w	r4, r4, r2
 8009020:	f04f 0100 	mov.w	r1, #0
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	00e2      	lsls	r2, r4, #3
 800902a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800902e:	00d9      	lsls	r1, r3, #3
 8009030:	460b      	mov	r3, r1
 8009032:	4614      	mov	r4, r2
 8009034:	195b      	adds	r3, r3, r5
 8009036:	eb44 0406 	adc.w	r4, r4, r6
 800903a:	f04f 0100 	mov.w	r1, #0
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	02a2      	lsls	r2, r4, #10
 8009044:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009048:	0299      	lsls	r1, r3, #10
 800904a:	460b      	mov	r3, r1
 800904c:	4614      	mov	r4, r2
 800904e:	4618      	mov	r0, r3
 8009050:	4621      	mov	r1, r4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f04f 0400 	mov.w	r4, #0
 8009058:	461a      	mov	r2, r3
 800905a:	4623      	mov	r3, r4
 800905c:	f7f7 fe2c 	bl	8000cb8 <__aeabi_uldivmod>
 8009060:	4603      	mov	r3, r0
 8009062:	460c      	mov	r4, r1
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e049      	b.n	80090fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009068:	4b2f      	ldr	r3, [pc, #188]	; (8009128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	099b      	lsrs	r3, r3, #6
 800906e:	f04f 0400 	mov.w	r4, #0
 8009072:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	ea03 0501 	and.w	r5, r3, r1
 800907e:	ea04 0602 	and.w	r6, r4, r2
 8009082:	4629      	mov	r1, r5
 8009084:	4632      	mov	r2, r6
 8009086:	f04f 0300 	mov.w	r3, #0
 800908a:	f04f 0400 	mov.w	r4, #0
 800908e:	0154      	lsls	r4, r2, #5
 8009090:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009094:	014b      	lsls	r3, r1, #5
 8009096:	4619      	mov	r1, r3
 8009098:	4622      	mov	r2, r4
 800909a:	1b49      	subs	r1, r1, r5
 800909c:	eb62 0206 	sbc.w	r2, r2, r6
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	f04f 0400 	mov.w	r4, #0
 80090a8:	0194      	lsls	r4, r2, #6
 80090aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80090ae:	018b      	lsls	r3, r1, #6
 80090b0:	1a5b      	subs	r3, r3, r1
 80090b2:	eb64 0402 	sbc.w	r4, r4, r2
 80090b6:	f04f 0100 	mov.w	r1, #0
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	00e2      	lsls	r2, r4, #3
 80090c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80090c4:	00d9      	lsls	r1, r3, #3
 80090c6:	460b      	mov	r3, r1
 80090c8:	4614      	mov	r4, r2
 80090ca:	195b      	adds	r3, r3, r5
 80090cc:	eb44 0406 	adc.w	r4, r4, r6
 80090d0:	f04f 0100 	mov.w	r1, #0
 80090d4:	f04f 0200 	mov.w	r2, #0
 80090d8:	02a2      	lsls	r2, r4, #10
 80090da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80090de:	0299      	lsls	r1, r3, #10
 80090e0:	460b      	mov	r3, r1
 80090e2:	4614      	mov	r4, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	4621      	mov	r1, r4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f04f 0400 	mov.w	r4, #0
 80090ee:	461a      	mov	r2, r3
 80090f0:	4623      	mov	r3, r4
 80090f2:	f7f7 fde1 	bl	8000cb8 <__aeabi_uldivmod>
 80090f6:	4603      	mov	r3, r0
 80090f8:	460c      	mov	r4, r1
 80090fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	3301      	adds	r3, #1
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	fbb2 f3f3 	udiv	r3, r2, r3
 8009114:	60bb      	str	r3, [r7, #8]
      break;
 8009116:	e002      	b.n	800911e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009118:	4b04      	ldr	r3, [pc, #16]	; (800912c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800911a:	60bb      	str	r3, [r7, #8]
      break;
 800911c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800911e:	68bb      	ldr	r3, [r7, #8]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009128:	40023800 	.word	0x40023800
 800912c:	00f42400 	.word	0x00f42400

08009130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009134:	4b03      	ldr	r3, [pc, #12]	; (8009144 <HAL_RCC_GetHCLKFreq+0x14>)
 8009136:	681b      	ldr	r3, [r3, #0]
}
 8009138:	4618      	mov	r0, r3
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20000000 	.word	0x20000000

08009148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800914c:	f7ff fff0 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8009150:	4601      	mov	r1, r0
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	0a9b      	lsrs	r3, r3, #10
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	4a03      	ldr	r2, [pc, #12]	; (800916c <HAL_RCC_GetPCLK1Freq+0x24>)
 800915e:	5cd3      	ldrb	r3, [r2, r3]
 8009160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009164:	4618      	mov	r0, r3
 8009166:	bd80      	pop	{r7, pc}
 8009168:	40023800 	.word	0x40023800
 800916c:	08017560 	.word	0x08017560

08009170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009174:	f7ff ffdc 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8009178:	4601      	mov	r1, r0
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	0b5b      	lsrs	r3, r3, #13
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	4a03      	ldr	r2, [pc, #12]	; (8009194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009186:	5cd3      	ldrb	r3, [r2, r3]
 8009188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800918c:	4618      	mov	r0, r3
 800918e:	bd80      	pop	{r7, pc}
 8009190:	40023800 	.word	0x40023800
 8009194:	08017560 	.word	0x08017560

08009198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80091c0:	4b66      	ldr	r3, [pc, #408]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80091c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	4963      	ldr	r1, [pc, #396]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80091e2:	4b5e      	ldr	r3, [pc, #376]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80091e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	495a      	ldr	r1, [pc, #360]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10b      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009218:	2b00      	cmp	r3, #0
 800921a:	d075      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800921c:	4b50      	ldr	r3, [pc, #320]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009222:	f7fd fb1b 	bl	800685c <HAL_GetTick>
 8009226:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009228:	e008      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800922a:	f7fd fb17 	bl	800685c <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	2b02      	cmp	r3, #2
 8009236:	d901      	bls.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e1dc      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800923c:	4b47      	ldr	r3, [pc, #284]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1f0      	bne.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d009      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	019a      	lsls	r2, r3, #6
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	071b      	lsls	r3, r3, #28
 8009260:	493e      	ldr	r1, [pc, #248]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009262:	4313      	orrs	r3, r2
 8009264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01f      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009274:	4b39      	ldr	r3, [pc, #228]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927a:	0f1b      	lsrs	r3, r3, #28
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	019a      	lsls	r2, r3, #6
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	061b      	lsls	r3, r3, #24
 800928e:	431a      	orrs	r2, r3
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	071b      	lsls	r3, r3, #28
 8009294:	4931      	ldr	r1, [pc, #196]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009296:	4313      	orrs	r3, r2
 8009298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800929c:	4b2f      	ldr	r3, [pc, #188]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800929e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a2:	f023 021f 	bic.w	r2, r3, #31
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	3b01      	subs	r3, #1
 80092ac:	492b      	ldr	r1, [pc, #172]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00d      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	019a      	lsls	r2, r3, #6
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	061b      	lsls	r3, r3, #24
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	071b      	lsls	r3, r3, #28
 80092d4:	4921      	ldr	r1, [pc, #132]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092dc:	4b20      	ldr	r3, [pc, #128]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80092de:	2201      	movs	r2, #1
 80092e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092e2:	f7fd fabb 	bl	800685c <HAL_GetTick>
 80092e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092e8:	e008      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80092ea:	f7fd fab7 	bl	800685c <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d901      	bls.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e17c      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092fc:	4b17      	ldr	r3, [pc, #92]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0f0      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d112      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80ce 	beq.w	80094ca <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009336:	f040 80c8 	bne.w	80094ca <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009340:	f7fd fa8c 	bl	800685c <HAL_GetTick>
 8009344:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009346:	e00f      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009348:	f7fd fa88 	bl	800685c <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d908      	bls.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e14d      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	42470068 	.word	0x42470068
 8009364:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009368:	4ba5      	ldr	r3, [pc, #660]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009374:	d0e8      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	d02e      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009382:	4b9f      	ldr	r3, [pc, #636]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	0c1b      	lsrs	r3, r3, #16
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	3301      	adds	r3, #1
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009394:	4b9a      	ldr	r3, [pc, #616]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939a:	0f1b      	lsrs	r3, r3, #28
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	019a      	lsls	r2, r3, #6
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	085b      	lsrs	r3, r3, #1
 80093ac:	3b01      	subs	r3, #1
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	431a      	orrs	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	061b      	lsls	r3, r3, #24
 80093b8:	431a      	orrs	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	071b      	lsls	r3, r3, #28
 80093be:	4990      	ldr	r1, [pc, #576]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80093c6:	4b8e      	ldr	r3, [pc, #568]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80093c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	3b01      	subs	r3, #1
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	4989      	ldr	r1, [pc, #548]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d02c      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80093ec:	4b84      	ldr	r3, [pc, #528]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80093ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f2:	0c1b      	lsrs	r3, r3, #16
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	3301      	adds	r3, #1
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093fe:	4b80      	ldr	r3, [pc, #512]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009404:	0e1b      	lsrs	r3, r3, #24
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	019a      	lsls	r2, r3, #6
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	3b01      	subs	r3, #1
 8009418:	041b      	lsls	r3, r3, #16
 800941a:	431a      	orrs	r2, r3
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	061b      	lsls	r3, r3, #24
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	071b      	lsls	r3, r3, #28
 8009428:	4975      	ldr	r1, [pc, #468]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009430:	4b73      	ldr	r3, [pc, #460]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009436:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943e:	4970      	ldr	r1, [pc, #448]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944e:	2b00      	cmp	r3, #0
 8009450:	d024      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945a:	d11f      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800945c:	4b68      	ldr	r3, [pc, #416]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800945e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009462:	0e1b      	lsrs	r3, r3, #24
 8009464:	f003 030f 	and.w	r3, r3, #15
 8009468:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800946a:	4b65      	ldr	r3, [pc, #404]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800946c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009470:	0f1b      	lsrs	r3, r3, #28
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	019a      	lsls	r2, r3, #6
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	085b      	lsrs	r3, r3, #1
 8009484:	3b01      	subs	r3, #1
 8009486:	041b      	lsls	r3, r3, #16
 8009488:	431a      	orrs	r2, r3
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	061b      	lsls	r3, r3, #24
 800948e:	431a      	orrs	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	071b      	lsls	r3, r3, #28
 8009494:	495a      	ldr	r1, [pc, #360]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800949c:	4b59      	ldr	r3, [pc, #356]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094a2:	f7fd f9db 	bl	800685c <HAL_GetTick>
 80094a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094a8:	e008      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80094aa:	f7fd f9d7 	bl	800685c <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e09c      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094bc:	4b50      	ldr	r3, [pc, #320]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c8:	d1ef      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 8083 	beq.w	80095de <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	4b48      	ldr	r3, [pc, #288]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	4a47      	ldr	r2, [pc, #284]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80094e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e6:	6413      	str	r3, [r2, #64]	; 0x40
 80094e8:	4b45      	ldr	r3, [pc, #276]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80094f4:	4b44      	ldr	r3, [pc, #272]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a43      	ldr	r2, [pc, #268]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80094fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009500:	f7fd f9ac 	bl	800685c <HAL_GetTick>
 8009504:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009506:	e008      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009508:	f7fd f9a8 	bl	800685c <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b02      	cmp	r3, #2
 8009514:	d901      	bls.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e06d      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800951a:	4b3b      	ldr	r3, [pc, #236]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0f0      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009526:	4b36      	ldr	r3, [pc, #216]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d02f      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	429a      	cmp	r2, r3
 8009542:	d028      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009544:	4b2e      	ldr	r3, [pc, #184]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800954e:	4b2f      	ldr	r3, [pc, #188]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009550:	2201      	movs	r2, #1
 8009552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009554:	4b2d      	ldr	r3, [pc, #180]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800955a:	4a29      	ldr	r2, [pc, #164]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009560:	4b27      	ldr	r3, [pc, #156]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b01      	cmp	r3, #1
 800956a:	d114      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800956c:	f7fd f976 	bl	800685c <HAL_GetTick>
 8009570:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009572:	e00a      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009574:	f7fd f972 	bl	800685c <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009582:	4293      	cmp	r3, r2
 8009584:	d901      	bls.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e035      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800958c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0ee      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800959e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a2:	d10d      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80095a4:	4b16      	ldr	r3, [pc, #88]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b8:	4911      	ldr	r1, [pc, #68]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
 80095be:	e005      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80095c0:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	4a0e      	ldr	r2, [pc, #56]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80095c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80095ca:	6093      	str	r3, [r2, #8]
 80095cc:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80095ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d8:	4909      	ldr	r1, [pc, #36]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80095f0:	4b07      	ldr	r3, [pc, #28]	; (8009610 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80095f2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	40023800 	.word	0x40023800
 8009604:	42470070 	.word	0x42470070
 8009608:	40007000 	.word	0x40007000
 800960c:	42470e40 	.word	0x42470e40
 8009610:	424711e0 	.word	0x424711e0

08009614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d075      	beq.n	8009718 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800962c:	4ba2      	ldr	r3, [pc, #648]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 030c 	and.w	r3, r3, #12
 8009634:	2b04      	cmp	r3, #4
 8009636:	d00c      	beq.n	8009652 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009638:	4b9f      	ldr	r3, [pc, #636]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009640:	2b08      	cmp	r3, #8
 8009642:	d112      	bne.n	800966a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009644:	4b9c      	ldr	r3, [pc, #624]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800964c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009650:	d10b      	bne.n	800966a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009652:	4b99      	ldr	r3, [pc, #612]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d05b      	beq.n	8009716 <HAL_RCC_OscConfig+0x102>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d157      	bne.n	8009716 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e20b      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009672:	d106      	bne.n	8009682 <HAL_RCC_OscConfig+0x6e>
 8009674:	4b90      	ldr	r3, [pc, #576]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a8f      	ldr	r2, [pc, #572]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800967a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	e01d      	b.n	80096be <HAL_RCC_OscConfig+0xaa>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800968a:	d10c      	bne.n	80096a6 <HAL_RCC_OscConfig+0x92>
 800968c:	4b8a      	ldr	r3, [pc, #552]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a89      	ldr	r2, [pc, #548]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	4b87      	ldr	r3, [pc, #540]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a86      	ldr	r2, [pc, #536]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800969e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	e00b      	b.n	80096be <HAL_RCC_OscConfig+0xaa>
 80096a6:	4b84      	ldr	r3, [pc, #528]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a83      	ldr	r2, [pc, #524]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80096ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	4b81      	ldr	r3, [pc, #516]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a80      	ldr	r2, [pc, #512]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80096b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d013      	beq.n	80096ee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c6:	f7fd f8c9 	bl	800685c <HAL_GetTick>
 80096ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096cc:	e008      	b.n	80096e0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096ce:	f7fd f8c5 	bl	800685c <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	2b64      	cmp	r3, #100	; 0x64
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e1d0      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096e0:	4b75      	ldr	r3, [pc, #468]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0f0      	beq.n	80096ce <HAL_RCC_OscConfig+0xba>
 80096ec:	e014      	b.n	8009718 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ee:	f7fd f8b5 	bl	800685c <HAL_GetTick>
 80096f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096f4:	e008      	b.n	8009708 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096f6:	f7fd f8b1 	bl	800685c <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	2b64      	cmp	r3, #100	; 0x64
 8009702:	d901      	bls.n	8009708 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e1bc      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009708:	4b6b      	ldr	r3, [pc, #428]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f0      	bne.n	80096f6 <HAL_RCC_OscConfig+0xe2>
 8009714:	e000      	b.n	8009718 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009716:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d063      	beq.n	80097ec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009724:	4b64      	ldr	r3, [pc, #400]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 030c 	and.w	r3, r3, #12
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009730:	4b61      	ldr	r3, [pc, #388]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009738:	2b08      	cmp	r3, #8
 800973a:	d11c      	bne.n	8009776 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800973c:	4b5e      	ldr	r3, [pc, #376]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d116      	bne.n	8009776 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009748:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0302 	and.w	r3, r3, #2
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_RCC_OscConfig+0x14c>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d001      	beq.n	8009760 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e190      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009760:	4b55      	ldr	r3, [pc, #340]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	4952      	ldr	r1, [pc, #328]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009770:	4313      	orrs	r3, r2
 8009772:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009774:	e03a      	b.n	80097ec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d020      	beq.n	80097c0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800977e:	4b4f      	ldr	r3, [pc, #316]	; (80098bc <HAL_RCC_OscConfig+0x2a8>)
 8009780:	2201      	movs	r2, #1
 8009782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009784:	f7fd f86a 	bl	800685c <HAL_GetTick>
 8009788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800978a:	e008      	b.n	800979e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800978c:	f7fd f866 	bl	800685c <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	2b02      	cmp	r3, #2
 8009798:	d901      	bls.n	800979e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e171      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800979e:	4b46      	ldr	r3, [pc, #280]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0f0      	beq.n	800978c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097aa:	4b43      	ldr	r3, [pc, #268]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	493f      	ldr	r1, [pc, #252]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	600b      	str	r3, [r1, #0]
 80097be:	e015      	b.n	80097ec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097c0:	4b3e      	ldr	r3, [pc, #248]	; (80098bc <HAL_RCC_OscConfig+0x2a8>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c6:	f7fd f849 	bl	800685c <HAL_GetTick>
 80097ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097cc:	e008      	b.n	80097e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097ce:	f7fd f845 	bl	800685c <HAL_GetTick>
 80097d2:	4602      	mov	r2, r0
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d901      	bls.n	80097e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e150      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097e0:	4b35      	ldr	r3, [pc, #212]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f0      	bne.n	80097ce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0308 	and.w	r3, r3, #8
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d030      	beq.n	800985a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d016      	beq.n	800982e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009800:	4b2f      	ldr	r3, [pc, #188]	; (80098c0 <HAL_RCC_OscConfig+0x2ac>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009806:	f7fd f829 	bl	800685c <HAL_GetTick>
 800980a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800980c:	e008      	b.n	8009820 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800980e:	f7fd f825 	bl	800685c <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b02      	cmp	r3, #2
 800981a:	d901      	bls.n	8009820 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e130      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009820:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0f0      	beq.n	800980e <HAL_RCC_OscConfig+0x1fa>
 800982c:	e015      	b.n	800985a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <HAL_RCC_OscConfig+0x2ac>)
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009834:	f7fd f812 	bl	800685c <HAL_GetTick>
 8009838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800983c:	f7fd f80e 	bl	800685c <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e119      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800984e:	4b1a      	ldr	r3, [pc, #104]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1f0      	bne.n	800983c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0304 	and.w	r3, r3, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 809f 	beq.w	80099a6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009868:	2300      	movs	r3, #0
 800986a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800986c:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10f      	bne.n	8009898 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	4b0e      	ldr	r3, [pc, #56]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800987e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009880:	4a0d      	ldr	r2, [pc, #52]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 8009882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009886:	6413      	str	r3, [r2, #64]	; 0x40
 8009888:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <HAL_RCC_OscConfig+0x2a4>)
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009894:	2301      	movs	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <HAL_RCC_OscConfig+0x2b0>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d120      	bne.n	80098e6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098a4:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <HAL_RCC_OscConfig+0x2b0>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a06      	ldr	r2, [pc, #24]	; (80098c4 <HAL_RCC_OscConfig+0x2b0>)
 80098aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098b0:	f7fc ffd4 	bl	800685c <HAL_GetTick>
 80098b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b6:	e010      	b.n	80098da <HAL_RCC_OscConfig+0x2c6>
 80098b8:	40023800 	.word	0x40023800
 80098bc:	42470000 	.word	0x42470000
 80098c0:	42470e80 	.word	0x42470e80
 80098c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098c8:	f7fc ffc8 	bl	800685c <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e0d3      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098da:	4b6c      	ldr	r3, [pc, #432]	; (8009a8c <HAL_RCC_OscConfig+0x478>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0f0      	beq.n	80098c8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d106      	bne.n	80098fc <HAL_RCC_OscConfig+0x2e8>
 80098ee:	4b68      	ldr	r3, [pc, #416]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	4a67      	ldr	r2, [pc, #412]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 80098f4:	f043 0301 	orr.w	r3, r3, #1
 80098f8:	6713      	str	r3, [r2, #112]	; 0x70
 80098fa:	e01c      	b.n	8009936 <HAL_RCC_OscConfig+0x322>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	2b05      	cmp	r3, #5
 8009902:	d10c      	bne.n	800991e <HAL_RCC_OscConfig+0x30a>
 8009904:	4b62      	ldr	r3, [pc, #392]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009908:	4a61      	ldr	r2, [pc, #388]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 800990a:	f043 0304 	orr.w	r3, r3, #4
 800990e:	6713      	str	r3, [r2, #112]	; 0x70
 8009910:	4b5f      	ldr	r3, [pc, #380]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009914:	4a5e      	ldr	r2, [pc, #376]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	6713      	str	r3, [r2, #112]	; 0x70
 800991c:	e00b      	b.n	8009936 <HAL_RCC_OscConfig+0x322>
 800991e:	4b5c      	ldr	r3, [pc, #368]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009922:	4a5b      	ldr	r2, [pc, #364]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009924:	f023 0301 	bic.w	r3, r3, #1
 8009928:	6713      	str	r3, [r2, #112]	; 0x70
 800992a:	4b59      	ldr	r3, [pc, #356]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 800992c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992e:	4a58      	ldr	r2, [pc, #352]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009930:	f023 0304 	bic.w	r3, r3, #4
 8009934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d015      	beq.n	800996a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800993e:	f7fc ff8d 	bl	800685c <HAL_GetTick>
 8009942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009944:	e00a      	b.n	800995c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009946:	f7fc ff89 	bl	800685c <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	f241 3288 	movw	r2, #5000	; 0x1388
 8009954:	4293      	cmp	r3, r2
 8009956:	d901      	bls.n	800995c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e092      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800995c:	4b4c      	ldr	r3, [pc, #304]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 800995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0ee      	beq.n	8009946 <HAL_RCC_OscConfig+0x332>
 8009968:	e014      	b.n	8009994 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800996a:	f7fc ff77 	bl	800685c <HAL_GetTick>
 800996e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009970:	e00a      	b.n	8009988 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009972:	f7fc ff73 	bl	800685c <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009980:	4293      	cmp	r3, r2
 8009982:	d901      	bls.n	8009988 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e07c      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009988:	4b41      	ldr	r3, [pc, #260]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	f003 0302 	and.w	r3, r3, #2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1ee      	bne.n	8009972 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d105      	bne.n	80099a6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800999a:	4b3d      	ldr	r3, [pc, #244]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	4a3c      	ldr	r2, [pc, #240]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 80099a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d068      	beq.n	8009a80 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099ae:	4b38      	ldr	r3, [pc, #224]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 030c 	and.w	r3, r3, #12
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	d060      	beq.n	8009a7c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d145      	bne.n	8009a4e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099c2:	4b34      	ldr	r3, [pc, #208]	; (8009a94 <HAL_RCC_OscConfig+0x480>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c8:	f7fc ff48 	bl	800685c <HAL_GetTick>
 80099cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099d0:	f7fc ff44 	bl	800685c <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e04f      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099e2:	4b2b      	ldr	r3, [pc, #172]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f0      	bne.n	80099d0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	69da      	ldr	r2, [r3, #28]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	019b      	lsls	r3, r3, #6
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a04:	085b      	lsrs	r3, r3, #1
 8009a06:	3b01      	subs	r3, #1
 8009a08:	041b      	lsls	r3, r3, #16
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	061b      	lsls	r3, r3, #24
 8009a12:	431a      	orrs	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a18:	071b      	lsls	r3, r3, #28
 8009a1a:	491d      	ldr	r1, [pc, #116]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a20:	4b1c      	ldr	r3, [pc, #112]	; (8009a94 <HAL_RCC_OscConfig+0x480>)
 8009a22:	2201      	movs	r2, #1
 8009a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a26:	f7fc ff19 	bl	800685c <HAL_GetTick>
 8009a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a2c:	e008      	b.n	8009a40 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a2e:	f7fc ff15 	bl	800685c <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d901      	bls.n	8009a40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e020      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0f0      	beq.n	8009a2e <HAL_RCC_OscConfig+0x41a>
 8009a4c:	e018      	b.n	8009a80 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a4e:	4b11      	ldr	r3, [pc, #68]	; (8009a94 <HAL_RCC_OscConfig+0x480>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a54:	f7fc ff02 	bl	800685c <HAL_GetTick>
 8009a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a5a:	e008      	b.n	8009a6e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a5c:	f7fc fefe 	bl	800685c <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e009      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a6e:	4b08      	ldr	r3, [pc, #32]	; (8009a90 <HAL_RCC_OscConfig+0x47c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f0      	bne.n	8009a5c <HAL_RCC_OscConfig+0x448>
 8009a7a:	e001      	b.n	8009a80 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	40007000 	.word	0x40007000
 8009a90:	40023800 	.word	0x40023800
 8009a94:	42470060 	.word	0x42470060

08009a98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e022      	b.n	8009af0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d105      	bne.n	8009ac2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7fb fa97 	bl	8004ff0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f814 	bl	8009af8 <HAL_SD_InitCard>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e00a      	b.n	8009af0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009af8:	b5b0      	push	{r4, r5, r7, lr}
 8009afa:	b08e      	sub	sp, #56	; 0x38
 8009afc:	af04      	add	r7, sp, #16
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009b14:	2376      	movs	r3, #118	; 0x76
 8009b16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681d      	ldr	r5, [r3, #0]
 8009b1c:	466c      	mov	r4, sp
 8009b1e:	f107 0314 	add.w	r3, r7, #20
 8009b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b30:	4628      	mov	r0, r5
 8009b32:	f003 fa87 	bl	800d044 <SDIO_Init>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e031      	b.n	8009bac <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009b48:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <HAL_SD_InitCard+0xbc>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f003 fabf 	bl	800d0d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009b58:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <HAL_SD_InitCard+0xbc>)
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 ffc6 	bl	800aaf0 <SD_PowerON>
 8009b64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00b      	beq.n	8009b84 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e013      	b.n	8009bac <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fee5 	bl	800a954 <SD_InitCard>
 8009b8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3728      	adds	r7, #40	; 0x28
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb4:	422580a0 	.word	0x422580a0

08009bb8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08c      	sub	sp, #48	; 0x30
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d107      	bne.n	8009be0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e0c7      	b.n	8009d70 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	f040 80c0 	bne.w	8009d6e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d907      	bls.n	8009c12 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e0ae      	b.n	8009d70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2203      	movs	r2, #3
 8009c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009c30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	4a50      	ldr	r2, [pc, #320]	; (8009d78 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	4a4f      	ldr	r2, [pc, #316]	; (8009d7c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009c40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	2200      	movs	r2, #0
 8009c48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3380      	adds	r3, #128	; 0x80
 8009c54:	4619      	mov	r1, r3
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	025b      	lsls	r3, r3, #9
 8009c5c:	089b      	lsrs	r3, r3, #2
 8009c5e:	f7fd fbef 	bl	8007440 <HAL_DMA_Start_IT>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d017      	beq.n	8009c98 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009c76:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a40      	ldr	r2, [pc, #256]	; (8009d80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e06b      	b.n	8009d70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009c98:	4b3a      	ldr	r3, [pc, #232]	; (8009d84 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d002      	beq.n	8009cac <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	025b      	lsls	r3, r3, #9
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f003 faa1 	bl	800d1fc <SDMMC_CmdBlockLength>
 8009cba:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00f      	beq.n	8009ce2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a2e      	ldr	r2, [pc, #184]	; (8009d80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e046      	b.n	8009d70 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	025b      	lsls	r3, r3, #9
 8009cec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009cee:	2390      	movs	r3, #144	; 0x90
 8009cf0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f107 0210 	add.w	r2, r7, #16
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f003 fa4b 	bl	800d1a4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d90a      	bls.n	8009d2a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2282      	movs	r2, #130	; 0x82
 8009d18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d20:	4618      	mov	r0, r3
 8009d22:	f003 faaf 	bl	800d284 <SDMMC_CmdReadMultiBlock>
 8009d26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009d28:	e009      	b.n	8009d3e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2281      	movs	r2, #129	; 0x81
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d36:	4618      	mov	r0, r3
 8009d38:	f003 fa82 	bl	800d240 <SDMMC_CmdReadSingleBlock>
 8009d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d012      	beq.n	8009d6a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a0d      	ldr	r2, [pc, #52]	; (8009d80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	431a      	orrs	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e002      	b.n	8009d70 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e000      	b.n	8009d70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009d6e:	2302      	movs	r3, #2
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3730      	adds	r7, #48	; 0x30
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	0800a763 	.word	0x0800a763
 8009d7c:	0800a7d5 	.word	0x0800a7d5
 8009d80:	004005ff 	.word	0x004005ff
 8009d84:	4225858c 	.word	0x4225858c

08009d88 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08c      	sub	sp, #48	; 0x30
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d107      	bne.n	8009db0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e0ca      	b.n	8009f46 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 80c3 	bne.w	8009f44 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	441a      	add	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d907      	bls.n	8009de2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e0b1      	b.n	8009f46 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2203      	movs	r2, #3
 8009de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2200      	movs	r2, #0
 8009df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 021a 	orr.w	r2, r2, #26
 8009e00:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e06:	4a52      	ldr	r2, [pc, #328]	; (8009f50 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	4a51      	ldr	r2, [pc, #324]	; (8009f54 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009e10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e16:	2200      	movs	r2, #0
 8009e18:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d002      	beq.n	8009e28 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	025b      	lsls	r3, r3, #9
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e30:	4618      	mov	r0, r3
 8009e32:	f003 f9e3 	bl	800d1fc <SDMMC_CmdBlockLength>
 8009e36:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00f      	beq.n	8009e5e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a45      	ldr	r2, [pc, #276]	; (8009f58 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009e44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e073      	b.n	8009f46 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d90a      	bls.n	8009e7a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	22a0      	movs	r2, #160	; 0xa0
 8009e68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e70:	4618      	mov	r0, r3
 8009e72:	f003 fa4b 	bl	800d30c <SDMMC_CmdWriteMultiBlock>
 8009e76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009e78:	e009      	b.n	8009e8e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2290      	movs	r2, #144	; 0x90
 8009e7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e86:	4618      	mov	r0, r3
 8009e88:	f003 fa1e 	bl	800d2c8 <SDMMC_CmdWriteSingleBlock>
 8009e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d012      	beq.n	8009eba <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a2f      	ldr	r2, [pc, #188]	; (8009f58 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e045      	b.n	8009f46 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009eba:	4b28      	ldr	r3, [pc, #160]	; (8009f5c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009ec4:	68b9      	ldr	r1, [r7, #8]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3380      	adds	r3, #128	; 0x80
 8009ecc:	461a      	mov	r2, r3
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	025b      	lsls	r3, r3, #9
 8009ed2:	089b      	lsrs	r3, r3, #2
 8009ed4:	f7fd fab4 	bl	8007440 <HAL_DMA_Start_IT>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d01a      	beq.n	8009f14 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 021a 	bic.w	r2, r2, #26
 8009eec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a19      	ldr	r2, [pc, #100]	; (8009f58 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e018      	b.n	8009f46 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	025b      	lsls	r3, r3, #9
 8009f1e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009f20:	2390      	movs	r3, #144	; 0x90
 8009f22:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f107 0210 	add.w	r2, r7, #16
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f003 f932 	bl	800d1a4 <SDIO_ConfigData>

      return HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e000      	b.n	8009f46 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8009f44:	2302      	movs	r3, #2
  }
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3730      	adds	r7, #48	; 0x30
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	0800a739 	.word	0x0800a739
 8009f54:	0800a7d5 	.word	0x0800a7d5
 8009f58:	004005ff 	.word	0x004005ff
 8009f5c:	4225858c 	.word	0x4225858c

08009f60 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <HAL_SD_IRQHandler+0x2e>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f003 0308 	and.w	r3, r3, #8
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 ffc8 	bl	800af1c <SD_Read_IT>
 8009f8c:	e155      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 808f 	beq.w	800a0bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6812      	ldr	r2, [r2, #0]
 8009fb2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009fb6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009fba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0201 	bic.w	r2, r2, #1
 8009fca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0308 	and.w	r3, r3, #8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d039      	beq.n	800a04a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d104      	bne.n	8009fea <HAL_SD_IRQHandler+0x8a>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d011      	beq.n	800a00e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f003 f9ae 	bl	800d350 <SDMMC_CmdStopTransfer>
 8009ff4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d008      	beq.n	800a00e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	431a      	orrs	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f91f 	bl	800a24c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f240 523a 	movw	r2, #1338	; 0x53a
 800a016:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d104      	bne.n	800a03a <HAL_SD_IRQHandler+0xda>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f003 fe0c 	bl	800dc58 <HAL_SD_RxCpltCallback>
 800a040:	e0fb      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f003 fdfe 	bl	800dc44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a048:	e0f7      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 80f2 	beq.w	800a23a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f003 0320 	and.w	r3, r3, #32
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d011      	beq.n	800a084 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f003 f973 	bl	800d350 <SDMMC_CmdStopTransfer>
 800a06a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d008      	beq.n	800a084 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	431a      	orrs	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f8e4 	bl	800a24c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f040 80d5 	bne.w	800a23a <HAL_SD_IRQHandler+0x2da>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	f040 80cf 	bne.w	800a23a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0208 	bic.w	r2, r2, #8
 800a0aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f003 fdc5 	bl	800dc44 <HAL_SD_TxCpltCallback>
}
 800a0ba:	e0be      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d008      	beq.n	800a0dc <HAL_SD_IRQHandler+0x17c>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d003      	beq.n	800a0dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 ff72 	bl	800afbe <SD_Write_IT>
 800a0da:	e0ae      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 80a7 	beq.w	800a23a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f2:	f003 0302 	and.w	r3, r3, #2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fe:	f043 0202 	orr.w	r2, r3, #2
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10c:	f003 0308 	and.w	r3, r3, #8
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a118:	f043 0208 	orr.w	r2, r3, #8
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a126:	f003 0320 	and.w	r3, r3, #32
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	f043 0220 	orr.w	r2, r3, #32
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	d005      	beq.n	800a154 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14c:	f043 0210 	orr.w	r2, r3, #16
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f240 523a 	movw	r2, #1338	; 0x53a
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a16c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4618      	mov	r0, r3
 800a174:	f003 f8ec 	bl	800d350 <SDMMC_CmdStopTransfer>
 800a178:	4602      	mov	r2, r0
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f003 0308 	and.w	r3, r3, #8
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f855 	bl	800a24c <HAL_SD_ErrorCallback>
}
 800a1a2:	e04a      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d045      	beq.n	800a23a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <HAL_SD_IRQHandler+0x262>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f003 0320 	and.w	r3, r3, #32
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	4a1f      	ldr	r2, [pc, #124]	; (800a244 <HAL_SD_IRQHandler+0x2e4>)
 800a1c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd f98e 	bl	80074f0 <HAL_DMA_Abort_IT>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d02f      	beq.n	800a23a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fb4a 	bl	800a878 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a1e4:	e029      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <HAL_SD_IRQHandler+0x29a>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d011      	beq.n	800a21e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	4a12      	ldr	r2, [pc, #72]	; (800a248 <HAL_SD_IRQHandler+0x2e8>)
 800a200:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	4618      	mov	r0, r3
 800a208:	f7fd f972 	bl	80074f0 <HAL_DMA_Abort_IT>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d013      	beq.n	800a23a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fb65 	bl	800a8e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a21c:	e00d      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f003 fcfc 	bl	800dc30 <HAL_SD_AbortCallback>
}
 800a238:	e7ff      	b.n	800a23a <HAL_SD_IRQHandler+0x2da>
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	0800a879 	.word	0x0800a879
 800a248:	0800a8e7 	.word	0x0800a8e7

0800a24c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a26e:	0f9b      	lsrs	r3, r3, #30
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a27a:	0e9b      	lsrs	r3, r3, #26
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	b2da      	uxtb	r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a28c:	0e1b      	lsrs	r3, r3, #24
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	b2da      	uxtb	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2aa:	0a1b      	lsrs	r3, r3, #8
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2c0:	0d1b      	lsrs	r3, r3, #20
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 030f 	and.w	r3, r3, #15
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2de:	0bdb      	lsrs	r3, r3, #15
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2f0:	0b9b      	lsrs	r3, r3, #14
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a302:	0b5b      	lsrs	r3, r3, #13
 800a304:	b2db      	uxtb	r3, r3
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a314:	0b1b      	lsrs	r3, r3, #12
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2200      	movs	r2, #0
 800a326:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d163      	bne.n	800a3f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a334:	009a      	lsls	r2, r3, #2
 800a336:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a33a:	4013      	ands	r3, r2
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a340:	0f92      	lsrs	r2, r2, #30
 800a342:	431a      	orrs	r2, r3
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	0edb      	lsrs	r3, r3, #27
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	b2da      	uxtb	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a35e:	0e1b      	lsrs	r3, r3, #24
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	b2da      	uxtb	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a370:	0d5b      	lsrs	r3, r3, #21
 800a372:	b2db      	uxtb	r3, r3
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a382:	0c9b      	lsrs	r3, r3, #18
 800a384:	b2db      	uxtb	r3, r3
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a394:	0bdb      	lsrs	r3, r3, #15
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	7e1b      	ldrb	r3, [r3, #24]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0307 	and.w	r3, r3, #7
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a3c2:	fb02 f203 	mul.w	r2, r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	7a1b      	ldrb	r3, [r3, #8]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	f003 030f 	and.w	r3, r3, #15
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	409a      	lsls	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a3e4:	0a52      	lsrs	r2, r2, #9
 800a3e6:	fb02 f203 	mul.w	r2, r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3f4:	661a      	str	r2, [r3, #96]	; 0x60
 800a3f6:	e031      	b.n	800a45c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d11d      	bne.n	800a43c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a404:	041b      	lsls	r3, r3, #16
 800a406:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a40e:	0c1b      	lsrs	r3, r3, #16
 800a410:	431a      	orrs	r2, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	3301      	adds	r3, #1
 800a41c:	029a      	lsls	r2, r3, #10
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a430:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	661a      	str	r2, [r3, #96]	; 0x60
 800a43a:	e00f      	b.n	800a45c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a58      	ldr	r2, [pc, #352]	; (800a5a4 <HAL_SD_GetCardCSD+0x344>)
 800a442:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a448:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e09d      	b.n	800a598 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a460:	0b9b      	lsrs	r3, r3, #14
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a472:	09db      	lsrs	r3, r3, #7
 800a474:	b2db      	uxtb	r3, r3
 800a476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a484:	b2db      	uxtb	r3, r3
 800a486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a494:	0fdb      	lsrs	r3, r3, #31
 800a496:	b2da      	uxtb	r2, r3
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a0:	0f5b      	lsrs	r3, r3, #29
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b2:	0e9b      	lsrs	r3, r3, #26
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c4:	0d9b      	lsrs	r3, r3, #22
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	0d5b      	lsrs	r3, r3, #21
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f2:	0c1b      	lsrs	r3, r3, #16
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a506:	0bdb      	lsrs	r3, r3, #15
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51a:	0b9b      	lsrs	r3, r3, #14
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52e:	0b5b      	lsrs	r3, r3, #13
 800a530:	b2db      	uxtb	r3, r3
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a542:	0b1b      	lsrs	r3, r3, #12
 800a544:	b2db      	uxtb	r3, r3
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	0a9b      	lsrs	r3, r3, #10
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56a:	0a1b      	lsrs	r3, r3, #8
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 0303 	and.w	r3, r3, #3
 800a572:	b2da      	uxtb	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57e:	085b      	lsrs	r3, r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a586:	b2da      	uxtb	r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	004005ff 	.word	0x004005ff

0800a5a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a600:	b5b0      	push	{r4, r5, r7, lr}
 800a602:	b08e      	sub	sp, #56	; 0x38
 800a604:	af04      	add	r7, sp, #16
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2203      	movs	r2, #3
 800a60e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a616:	2b03      	cmp	r3, #3
 800a618:	d02e      	beq.n	800a678 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a620:	d106      	bne.n	800a630 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a626:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	639a      	str	r2, [r3, #56]	; 0x38
 800a62e:	e029      	b.n	800a684 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a636:	d10a      	bne.n	800a64e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fb0f 	bl	800ac5c <SD_WideBus_Enable>
 800a63e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	431a      	orrs	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
 800a64c:	e01a      	b.n	800a684 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fb4c 	bl	800acf2 <SD_WideBus_Disable>
 800a65a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	431a      	orrs	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
 800a668:	e00c      	b.n	800a684 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	639a      	str	r2, [r3, #56]	; 0x38
 800a676:	e005      	b.n	800a684 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d009      	beq.n	800a6a0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e024      	b.n	800a6ea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681d      	ldr	r5, [r3, #0]
 800a6c6:	466c      	mov	r4, sp
 800a6c8:	f107 0318 	add.w	r3, r7, #24
 800a6cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6d4:	f107 030c 	add.w	r3, r7, #12
 800a6d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f002 fcb2 	bl	800d044 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3728      	adds	r7, #40	; 0x28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	004005ff 	.word	0x004005ff

0800a6f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a704:	f107 030c 	add.w	r3, r7, #12
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa7e 	bl	800ac0c <SD_SendStatus>
 800a710:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	0a5b      	lsrs	r3, r3, #9
 800a728:	f003 030f 	and.w	r3, r3, #15
 800a72c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a72e:	693b      	ldr	r3, [r7, #16]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a744:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a754:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b084      	sub	sp, #16
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a774:	2b82      	cmp	r3, #130	; 0x82
 800a776:	d111      	bne.n	800a79c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f002 fde7 	bl	800d350 <SDMMC_CmdStopTransfer>
 800a782:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	431a      	orrs	r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff fd58 	bl	800a24c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0208 	bic.w	r2, r2, #8
 800a7aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f240 523a 	movw	r2, #1338	; 0x53a
 800a7b4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f003 fa47 	bl	800dc58 <HAL_SD_RxCpltCallback>
#endif
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7fd f830 	bl	8007848 <HAL_DMA_GetError>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d03e      	beq.n	800a86c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d002      	beq.n	800a80a <SD_DMAError+0x36>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d12d      	bne.n	800a866 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a19      	ldr	r2, [pc, #100]	; (800a874 <SD_DMAError+0xa0>)
 800a810:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a820:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f7ff ff62 	bl	800a6f8 <HAL_SD_GetCardState>
 800a834:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b06      	cmp	r3, #6
 800a83a:	d002      	beq.n	800a842 <SD_DMAError+0x6e>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b05      	cmp	r3, #5
 800a840:	d10a      	bne.n	800a858 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4618      	mov	r0, r3
 800a848:	f002 fd82 	bl	800d350 <SDMMC_CmdStopTransfer>
 800a84c:	4602      	mov	r2, r0
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	431a      	orrs	r2, r3
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	2200      	movs	r2, #0
 800a864:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a866:	6978      	ldr	r0, [r7, #20]
 800a868:	f7ff fcf0 	bl	800a24c <HAL_SD_ErrorCallback>
#endif
  }
}
 800a86c:	bf00      	nop
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	004005ff 	.word	0x004005ff

0800a878 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a88e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff ff31 	bl	800a6f8 <HAL_SD_GetCardState>
 800a896:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b06      	cmp	r3, #6
 800a8aa:	d002      	beq.n	800a8b2 <SD_DMATxAbort+0x3a>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d10a      	bne.n	800a8c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f002 fd4a 	bl	800d350 <SDMMC_CmdStopTransfer>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d103      	bne.n	800a8d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f003 f9ad 	bl	800dc30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a8d6:	e002      	b.n	800a8de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7ff fcb7 	bl	800a24c <HAL_SD_ErrorCallback>
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a8fc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff fefa 	bl	800a6f8 <HAL_SD_GetCardState>
 800a904:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b06      	cmp	r3, #6
 800a918:	d002      	beq.n	800a920 <SD_DMARxAbort+0x3a>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b05      	cmp	r3, #5
 800a91e:	d10a      	bne.n	800a936 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4618      	mov	r0, r3
 800a926:	f002 fd13 	bl	800d350 <SDMMC_CmdStopTransfer>
 800a92a:	4602      	mov	r2, r0
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	431a      	orrs	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d103      	bne.n	800a946 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f003 f976 	bl	800dc30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a944:	e002      	b.n	800a94c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff fc80 	bl	800a24c <HAL_SD_ErrorCallback>
}
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a954:	b5b0      	push	{r4, r5, r7, lr}
 800a956:	b094      	sub	sp, #80	; 0x50
 800a958:	af04      	add	r7, sp, #16
 800a95a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a95c:	2301      	movs	r3, #1
 800a95e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4618      	mov	r0, r3
 800a966:	f002 fbc5 	bl	800d0f4 <SDIO_GetPowerState>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a970:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a974:	e0b7      	b.n	800aae6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d02f      	beq.n	800a9de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f002 fdee 	bl	800d564 <SDMMC_CmdSendCID>
 800a988:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <SD_InitCard+0x40>
    {
      return errorstate;
 800a990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a992:	e0a8      	b.n	800aae6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2100      	movs	r1, #0
 800a99a:	4618      	mov	r0, r3
 800a99c:	f002 fbef 	bl	800d17e <SDIO_GetResponse>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2104      	movs	r1, #4
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f002 fbe6 	bl	800d17e <SDIO_GetResponse>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2108      	movs	r1, #8
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f002 fbdd 	bl	800d17e <SDIO_GetResponse>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	210c      	movs	r1, #12
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f002 fbd4 	bl	800d17e <SDIO_GetResponse>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d00d      	beq.n	800aa02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f107 020e 	add.w	r2, r7, #14
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f002 fdf4 	bl	800d5de <SDMMC_CmdSetRelAdd>
 800a9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <SD_InitCard+0xae>
    {
      return errorstate;
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa00:	e071      	b.n	800aae6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d036      	beq.n	800aa78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa1a:	041b      	lsls	r3, r3, #16
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f002 fdbe 	bl	800d5a0 <SDMMC_CmdSendCSD>
 800aa24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <SD_InitCard+0xdc>
    {
      return errorstate;
 800aa2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2e:	e05a      	b.n	800aae6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2100      	movs	r1, #0
 800aa36:	4618      	mov	r0, r3
 800aa38:	f002 fba1 	bl	800d17e <SDIO_GetResponse>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2104      	movs	r1, #4
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 fb98 	bl	800d17e <SDIO_GetResponse>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2108      	movs	r1, #8
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f002 fb8f 	bl	800d17e <SDIO_GetResponse>
 800aa60:	4602      	mov	r2, r0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	210c      	movs	r1, #12
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 fb86 	bl	800d17e <SDIO_GetResponse>
 800aa72:	4602      	mov	r2, r0
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2104      	movs	r1, #4
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f002 fb7d 	bl	800d17e <SDIO_GetResponse>
 800aa84:	4603      	mov	r3, r0
 800aa86:	0d1a      	lsrs	r2, r3, #20
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aa8c:	f107 0310 	add.w	r3, r7, #16
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff fbe4 	bl	800a260 <HAL_SD_GetCardCSD>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aaa2:	e020      	b.n	800aae6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6819      	ldr	r1, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaac:	041b      	lsls	r3, r3, #16
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	461a      	mov	r2, r3
 800aab4:	4623      	mov	r3, r4
 800aab6:	4608      	mov	r0, r1
 800aab8:	f002 fc6c 	bl	800d394 <SDMMC_CmdSelDesel>
 800aabc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d001      	beq.n	800aac8 <SD_InitCard+0x174>
  {
    return errorstate;
 800aac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac6:	e00e      	b.n	800aae6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681d      	ldr	r5, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	466c      	mov	r4, sp
 800aad0:	f103 0210 	add.w	r2, r3, #16
 800aad4:	ca07      	ldmia	r2, {r0, r1, r2}
 800aad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aada:	3304      	adds	r3, #4
 800aadc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aade:	4628      	mov	r0, r5
 800aae0:	f002 fab0 	bl	800d044 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3740      	adds	r7, #64	; 0x40
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aaf0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	2300      	movs	r3, #0
 800ab02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f002 fc66 	bl	800d3da <SDMMC_CmdGoIdleState>
 800ab0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	e072      	b.n	800ac00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 fc79 	bl	800d416 <SDMMC_CmdOperCond>
 800ab24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00d      	beq.n	800ab48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f002 fc4f 	bl	800d3da <SDMMC_CmdGoIdleState>
 800ab3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d004      	beq.n	800ab4e <SD_PowerON+0x5e>
    {
      return errorstate;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	e05b      	b.n	800ac00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d137      	bne.n	800abc6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 fc79 	bl	800d454 <SDMMC_CmdAppCommand>
 800ab62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d02d      	beq.n	800abc6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ab6e:	e047      	b.n	800ac00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 fc6c 	bl	800d454 <SDMMC_CmdAppCommand>
 800ab7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <SD_PowerON+0x98>
    {
      return errorstate;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	e03b      	b.n	800ac00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	491e      	ldr	r1, [pc, #120]	; (800ac08 <SD_PowerON+0x118>)
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f002 fc82 	bl	800d498 <SDMMC_CmdAppOperCommand>
 800ab94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aba0:	e02e      	b.n	800ac00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f002 fae8 	bl	800d17e <SDIO_GetResponse>
 800abae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	0fdb      	lsrs	r3, r3, #31
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d101      	bne.n	800abbc <SD_PowerON+0xcc>
 800abb8:	2301      	movs	r3, #1
 800abba:	e000      	b.n	800abbe <SD_PowerON+0xce>
 800abbc:	2300      	movs	r3, #0
 800abbe:	613b      	str	r3, [r7, #16]

    count++;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3301      	adds	r3, #1
 800abc4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abcc:	4293      	cmp	r3, r2
 800abce:	d802      	bhi.n	800abd6 <SD_PowerON+0xe6>
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0cc      	beq.n	800ab70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abdc:	4293      	cmp	r3, r2
 800abde:	d902      	bls.n	800abe6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800abe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abe4:	e00c      	b.n	800ac00 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	645a      	str	r2, [r3, #68]	; 0x44
 800abf6:	e002      	b.n	800abfe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	c1100000 	.word	0xc1100000

0800ac0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ac1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac20:	e018      	b.n	800ac54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2a:	041b      	lsls	r3, r3, #16
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f002 fcf6 	bl	800d620 <SDMMC_CmdSendStatus>
 800ac34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	e009      	b.n	800ac54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f002 fa99 	bl	800d17e <SDIO_GetResponse>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ac64:	2300      	movs	r3, #0
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2100      	movs	r1, #0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f002 fa83 	bl	800d17e <SDIO_GetResponse>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac82:	d102      	bne.n	800ac8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ac84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac88:	e02f      	b.n	800acea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ac8a:	f107 030c 	add.w	r3, r7, #12
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f879 	bl	800ad88 <SD_FindSCR>
 800ac96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	e023      	b.n	800acea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01c      	beq.n	800ace6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb4:	041b      	lsls	r3, r3, #16
 800acb6:	4619      	mov	r1, r3
 800acb8:	4610      	mov	r0, r2
 800acba:	f002 fbcb 	bl	800d454 <SDMMC_CmdAppCommand>
 800acbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	e00f      	b.n	800acea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2102      	movs	r1, #2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f002 fc04 	bl	800d4de <SDMMC_CmdBusWidth>
 800acd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	e003      	b.n	800acea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	e001      	b.n	800acea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ace6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b086      	sub	sp, #24
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 fa38 	bl	800d17e <SDIO_GetResponse>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad18:	d102      	bne.n	800ad20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad1e:	e02f      	b.n	800ad80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad20:	f107 030c 	add.w	r3, r7, #12
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f82e 	bl	800ad88 <SD_FindSCR>
 800ad2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	e023      	b.n	800ad80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d01c      	beq.n	800ad7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad4a:	041b      	lsls	r3, r3, #16
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f002 fb80 	bl	800d454 <SDMMC_CmdAppCommand>
 800ad54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	e00f      	b.n	800ad80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2100      	movs	r1, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f002 fbb9 	bl	800d4de <SDMMC_CmdBusWidth>
 800ad6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	e003      	b.n	800ad80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e001      	b.n	800ad80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b08f      	sub	sp, #60	; 0x3c
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad92:	f7fb fd63 	bl	800685c <HAL_GetTick>
 800ad96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60bb      	str	r3, [r7, #8]
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2108      	movs	r1, #8
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 fa24 	bl	800d1fc <SDMMC_CmdBlockLength>
 800adb4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	e0a9      	b.n	800af14 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc8:	041b      	lsls	r3, r3, #16
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f002 fb41 	bl	800d454 <SDMMC_CmdAppCommand>
 800add2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <SD_FindSCR+0x56>
  {
    return errorstate;
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	e09a      	b.n	800af14 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800adde:	f04f 33ff 	mov.w	r3, #4294967295
 800ade2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ade4:	2308      	movs	r3, #8
 800ade6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ade8:	2330      	movs	r3, #48	; 0x30
 800adea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800adec:	2302      	movs	r3, #2
 800adee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800adf4:	2301      	movs	r3, #1
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f107 0210 	add.w	r2, r7, #16
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f002 f9ce 	bl	800d1a4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f002 fb88 	bl	800d522 <SDMMC_CmdSendSCR>
 800ae12:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d022      	beq.n	800ae60 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	e07a      	b.n	800af14 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00e      	beq.n	800ae4a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6819      	ldr	r1, [r3, #0]
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	f107 0208 	add.w	r2, r7, #8
 800ae38:	18d4      	adds	r4, r2, r3
 800ae3a:	4608      	mov	r0, r1
 800ae3c:	f002 f92d 	bl	800d09a <SDIO_ReadFIFO>
 800ae40:	4603      	mov	r3, r0
 800ae42:	6023      	str	r3, [r4, #0]
      index++;
 800ae44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae46:	3301      	adds	r3, #1
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae4a:	f7fb fd07 	bl	800685c <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae58:	d102      	bne.n	800ae60 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae5e:	e059      	b.n	800af14 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae66:	f240 432a 	movw	r3, #1066	; 0x42a
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d0d6      	beq.n	800ae1e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2208      	movs	r2, #8
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ae86:	2308      	movs	r3, #8
 800ae88:	e044      	b.n	800af14 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d005      	beq.n	800aea4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aea0:	2302      	movs	r3, #2
 800aea2:	e037      	b.n	800af14 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	f003 0320 	and.w	r3, r3, #32
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d005      	beq.n	800aebe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2220      	movs	r2, #32
 800aeb8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aeba:	2320      	movs	r3, #32
 800aebc:	e02a      	b.n	800af14 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f240 523a 	movw	r2, #1338	; 0x53a
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	061a      	lsls	r2, r3, #24
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aed4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	0a1b      	lsrs	r3, r3, #8
 800aeda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aede:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	0e1b      	lsrs	r3, r3, #24
 800aee4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	601a      	str	r2, [r3, #0]
    scr++;
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeec:	3304      	adds	r3, #4
 800aeee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	061a      	lsls	r2, r3, #24
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	021b      	lsls	r3, r3, #8
 800aef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aefc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	0a1b      	lsrs	r3, r3, #8
 800af02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800af06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	0e1b      	lsrs	r3, r3, #24
 800af0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	373c      	adds	r7, #60	; 0x3c
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd90      	pop	{r4, r7, pc}

0800af1c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d03f      	beq.n	800afb6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	e033      	b.n	800afa4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4618      	mov	r0, r3
 800af42:	f002 f8aa 	bl	800d09a <SDIO_ReadFIFO>
 800af46:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	3301      	adds	r3, #1
 800af54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	3b01      	subs	r3, #1
 800af5a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	0a1b      	lsrs	r3, r3, #8
 800af60:	b2da      	uxtb	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3301      	adds	r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	3b01      	subs	r3, #1
 800af70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	0c1b      	lsrs	r3, r3, #16
 800af76:	b2da      	uxtb	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3301      	adds	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	3b01      	subs	r3, #1
 800af86:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	0e1b      	lsrs	r3, r3, #24
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	701a      	strb	r2, [r3, #0]
      tmp++;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3301      	adds	r3, #1
 800af96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	3301      	adds	r3, #1
 800afa2:	617b      	str	r3, [r7, #20]
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b07      	cmp	r3, #7
 800afa8:	d9c8      	bls.n	800af3c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800afb6:	bf00      	nop
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d043      	beq.n	800b060 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800afd8:	2300      	movs	r3, #0
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e037      	b.n	800b04e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3301      	adds	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	3b01      	subs	r3, #1
 800afee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	021a      	lsls	r2, r3, #8
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	4313      	orrs	r3, r2
 800affa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	3b01      	subs	r3, #1
 800b006:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	041a      	lsls	r2, r3, #16
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	4313      	orrs	r3, r2
 800b012:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3301      	adds	r3, #1
 800b018:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	061a      	lsls	r2, r3, #24
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4313      	orrs	r3, r2
 800b02a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3301      	adds	r3, #1
 800b030:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	3b01      	subs	r3, #1
 800b036:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f107 0208 	add.w	r2, r7, #8
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f002 f836 	bl	800d0b4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	3301      	adds	r3, #1
 800b04c:	617b      	str	r3, [r7, #20]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b07      	cmp	r3, #7
 800b052:	d9c4      	bls.n	800afde <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b060:	bf00      	nop
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e056      	b.n	800b128 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d106      	bne.n	800b09a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7fa f89d 	bl	80051d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2202      	movs	r2, #2
 800b09e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	ea42 0103 	orr.w	r1, r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	0c1b      	lsrs	r3, r3, #16
 800b0f8:	f003 0104 	and.w	r1, r3, #4
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69da      	ldr	r2, [r3, #28]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b116:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	4613      	mov	r3, r2
 800b13e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d101      	bne.n	800b152 <HAL_SPI_Transmit+0x22>
 800b14e:	2302      	movs	r3, #2
 800b150:	e11e      	b.n	800b390 <HAL_SPI_Transmit+0x260>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b15a:	f7fb fb7f 	bl	800685c <HAL_GetTick>
 800b15e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d002      	beq.n	800b176 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b170:	2302      	movs	r3, #2
 800b172:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b174:	e103      	b.n	800b37e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <HAL_SPI_Transmit+0x52>
 800b17c:	88fb      	ldrh	r3, [r7, #6]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d102      	bne.n	800b188 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b186:	e0fa      	b.n	800b37e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2203      	movs	r2, #3
 800b18c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	88fa      	ldrh	r2, [r7, #6]
 800b1a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	88fa      	ldrh	r2, [r7, #6]
 800b1a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ce:	d107      	bne.n	800b1e0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ea:	2b40      	cmp	r3, #64	; 0x40
 800b1ec:	d007      	beq.n	800b1fe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b206:	d14b      	bne.n	800b2a0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <HAL_SPI_Transmit+0xe6>
 800b210:	8afb      	ldrh	r3, [r7, #22]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d13e      	bne.n	800b294 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21a:	881a      	ldrh	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b226:	1c9a      	adds	r2, r3, #2
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b230:	b29b      	uxth	r3, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	b29a      	uxth	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b23a:	e02b      	b.n	800b294 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b02      	cmp	r3, #2
 800b248:	d112      	bne.n	800b270 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24e:	881a      	ldrh	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25a:	1c9a      	adds	r2, r3, #2
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b264:	b29b      	uxth	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	86da      	strh	r2, [r3, #54]	; 0x36
 800b26e:	e011      	b.n	800b294 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b270:	f7fb faf4 	bl	800685c <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d803      	bhi.n	800b288 <HAL_SPI_Transmit+0x158>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b286:	d102      	bne.n	800b28e <HAL_SPI_Transmit+0x15e>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b292:	e074      	b.n	800b37e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b298:	b29b      	uxth	r3, r3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1ce      	bne.n	800b23c <HAL_SPI_Transmit+0x10c>
 800b29e:	e04c      	b.n	800b33a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <HAL_SPI_Transmit+0x17e>
 800b2a8:	8afb      	ldrh	r3, [r7, #22]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d140      	bne.n	800b330 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	330c      	adds	r3, #12
 800b2b8:	7812      	ldrb	r2, [r2, #0]
 800b2ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b2d4:	e02c      	b.n	800b330 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f003 0302 	and.w	r3, r3, #2
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d113      	bne.n	800b30c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	7812      	ldrb	r2, [r2, #0]
 800b2f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29a      	uxth	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	86da      	strh	r2, [r3, #54]	; 0x36
 800b30a:	e011      	b.n	800b330 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b30c:	f7fb faa6 	bl	800685c <HAL_GetTick>
 800b310:	4602      	mov	r2, r0
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d803      	bhi.n	800b324 <HAL_SPI_Transmit+0x1f4>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b322:	d102      	bne.n	800b32a <HAL_SPI_Transmit+0x1fa>
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b32e:	e026      	b.n	800b37e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b334:	b29b      	uxth	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1cd      	bne.n	800b2d6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fba4 	bl	800ba8c <SPI_EndRxTxTransaction>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2220      	movs	r2, #32
 800b34e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b358:	2300      	movs	r3, #0
 800b35a:	613b      	str	r3, [r7, #16]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	613b      	str	r3, [r7, #16]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	613b      	str	r3, [r7, #16]
 800b36c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	77fb      	strb	r3, [r7, #31]
 800b37a:	e000      	b.n	800b37e <HAL_SPI_Transmit+0x24e>
  }

error:
 800b37c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b38e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3720      	adds	r7, #32
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	603b      	str	r3, [r7, #0]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3b4:	d112      	bne.n	800b3dc <HAL_SPI_Receive+0x44>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10e      	bne.n	800b3dc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2204      	movs	r2, #4
 800b3c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b3c6:	88fa      	ldrh	r2, [r7, #6]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	68b9      	ldr	r1, [r7, #8]
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 f8e9 	bl	800b5aa <HAL_SPI_TransmitReceive>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	e0e2      	b.n	800b5a2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d101      	bne.n	800b3ea <HAL_SPI_Receive+0x52>
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	e0db      	b.n	800b5a2 <HAL_SPI_Receive+0x20a>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3f2:	f7fb fa33 	bl	800685c <HAL_GetTick>
 800b3f6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b01      	cmp	r3, #1
 800b402:	d002      	beq.n	800b40a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b404:	2302      	movs	r3, #2
 800b406:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b408:	e0c2      	b.n	800b590 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <HAL_SPI_Receive+0x7e>
 800b410:	88fb      	ldrh	r3, [r7, #6]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d102      	bne.n	800b41c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b41a:	e0b9      	b.n	800b590 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2204      	movs	r2, #4
 800b420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	88fa      	ldrh	r2, [r7, #6]
 800b434:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	88fa      	ldrh	r2, [r7, #6]
 800b43a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b462:	d107      	bne.n	800b474 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b472:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47e:	2b40      	cmp	r3, #64	; 0x40
 800b480:	d007      	beq.n	800b492 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b490:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d162      	bne.n	800b560 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b49a:	e02e      	b.n	800b4fa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d115      	bne.n	800b4d6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f103 020c 	add.w	r2, r3, #12
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b6:	7812      	ldrb	r2, [r2, #0]
 800b4b8:	b2d2      	uxtb	r2, r2
 800b4ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4d4:	e011      	b.n	800b4fa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4d6:	f7fb f9c1 	bl	800685c <HAL_GetTick>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d803      	bhi.n	800b4ee <HAL_SPI_Receive+0x156>
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ec:	d102      	bne.n	800b4f4 <HAL_SPI_Receive+0x15c>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b4f8:	e04a      	b.n	800b590 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1cb      	bne.n	800b49c <HAL_SPI_Receive+0x104>
 800b504:	e031      	b.n	800b56a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	2b01      	cmp	r3, #1
 800b512:	d113      	bne.n	800b53c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	b292      	uxth	r2, r2
 800b520:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b526:	1c9a      	adds	r2, r3, #2
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b530:	b29b      	uxth	r3, r3
 800b532:	3b01      	subs	r3, #1
 800b534:	b29a      	uxth	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b53a:	e011      	b.n	800b560 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b53c:	f7fb f98e 	bl	800685c <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d803      	bhi.n	800b554 <HAL_SPI_Receive+0x1bc>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b552:	d102      	bne.n	800b55a <HAL_SPI_Receive+0x1c2>
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b55e:	e017      	b.n	800b590 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b564:	b29b      	uxth	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1cd      	bne.n	800b506 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fa27 	bl	800b9c2 <SPI_EndRxTransaction>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2220      	movs	r2, #32
 800b57e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	75fb      	strb	r3, [r7, #23]
 800b58c:	e000      	b.n	800b590 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b58e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b08c      	sub	sp, #48	; 0x30
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
 800b5b6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_SPI_TransmitReceive+0x26>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e18a      	b.n	800b8e6 <HAL_SPI_TransmitReceive+0x33c>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5d8:	f7fb f940 	bl	800685c <HAL_GetTick>
 800b5dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b5ee:	887b      	ldrh	r3, [r7, #2]
 800b5f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b5f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d00f      	beq.n	800b61a <HAL_SPI_TransmitReceive+0x70>
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b600:	d107      	bne.n	800b612 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d103      	bne.n	800b612 <HAL_SPI_TransmitReceive+0x68>
 800b60a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d003      	beq.n	800b61a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b612:	2302      	movs	r3, #2
 800b614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b618:	e15b      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <HAL_SPI_TransmitReceive+0x82>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <HAL_SPI_TransmitReceive+0x82>
 800b626:	887b      	ldrh	r3, [r7, #2]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d103      	bne.n	800b634 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b632:	e14e      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b04      	cmp	r3, #4
 800b63e:	d003      	beq.n	800b648 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2205      	movs	r2, #5
 800b644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	887a      	ldrh	r2, [r7, #2]
 800b658:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	887a      	ldrh	r2, [r7, #2]
 800b65e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	887a      	ldrh	r2, [r7, #2]
 800b66a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	887a      	ldrh	r2, [r7, #2]
 800b670:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b688:	2b40      	cmp	r3, #64	; 0x40
 800b68a:	d007      	beq.n	800b69c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b69a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6a4:	d178      	bne.n	800b798 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <HAL_SPI_TransmitReceive+0x10a>
 800b6ae:	8b7b      	ldrh	r3, [r7, #26]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d166      	bne.n	800b782 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b8:	881a      	ldrh	r2, [r3, #0]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c4:	1c9a      	adds	r2, r3, #2
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6d8:	e053      	b.n	800b782 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f003 0302 	and.w	r3, r3, #2
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d11b      	bne.n	800b720 <HAL_SPI_TransmitReceive+0x176>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d016      	beq.n	800b720 <HAL_SPI_TransmitReceive+0x176>
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d113      	bne.n	800b720 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fc:	881a      	ldrh	r2, [r3, #0]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b708:	1c9a      	adds	r2, r3, #2
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b712:	b29b      	uxth	r3, r3
 800b714:	3b01      	subs	r3, #1
 800b716:	b29a      	uxth	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d119      	bne.n	800b762 <HAL_SPI_TransmitReceive+0x1b8>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b732:	b29b      	uxth	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d014      	beq.n	800b762 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b742:	b292      	uxth	r2, r2
 800b744:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	1c9a      	adds	r2, r3, #2
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b754:	b29b      	uxth	r3, r3
 800b756:	3b01      	subs	r3, #1
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b75e:	2301      	movs	r3, #1
 800b760:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b762:	f7fb f87b 	bl	800685c <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b76e:	429a      	cmp	r2, r3
 800b770:	d807      	bhi.n	800b782 <HAL_SPI_TransmitReceive+0x1d8>
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b778:	d003      	beq.n	800b782 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b780:	e0a7      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b786:	b29b      	uxth	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1a6      	bne.n	800b6da <HAL_SPI_TransmitReceive+0x130>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b790:	b29b      	uxth	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1a1      	bne.n	800b6da <HAL_SPI_TransmitReceive+0x130>
 800b796:	e07c      	b.n	800b892 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <HAL_SPI_TransmitReceive+0x1fc>
 800b7a0:	8b7b      	ldrh	r3, [r7, #26]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d16b      	bne.n	800b87e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	330c      	adds	r3, #12
 800b7b0:	7812      	ldrb	r2, [r2, #0]
 800b7b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7cc:	e057      	b.n	800b87e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d11c      	bne.n	800b816 <HAL_SPI_TransmitReceive+0x26c>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d017      	beq.n	800b816 <HAL_SPI_TransmitReceive+0x26c>
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d114      	bne.n	800b816 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	330c      	adds	r3, #12
 800b7f6:	7812      	ldrb	r2, [r2, #0]
 800b7f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b808:	b29b      	uxth	r3, r3
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b01      	cmp	r3, #1
 800b822:	d119      	bne.n	800b858 <HAL_SPI_TransmitReceive+0x2ae>
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b828:	b29b      	uxth	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d014      	beq.n	800b858 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	b2d2      	uxtb	r2, r2
 800b83a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b29a      	uxth	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b854:	2301      	movs	r3, #1
 800b856:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b858:	f7fb f800 	bl	800685c <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b864:	429a      	cmp	r2, r3
 800b866:	d803      	bhi.n	800b870 <HAL_SPI_TransmitReceive+0x2c6>
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86e:	d102      	bne.n	800b876 <HAL_SPI_TransmitReceive+0x2cc>
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b87c:	e029      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1a2      	bne.n	800b7ce <HAL_SPI_TransmitReceive+0x224>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d19d      	bne.n	800b7ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b894:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f8f8 	bl	800ba8c <SPI_EndRxTxTransaction>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d006      	beq.n	800b8b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b8ae:	e010      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	e000      	b.n	800b8d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b8d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b8e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3730      	adds	r7, #48	; 0x30
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	60f8      	str	r0, [r7, #12]
 800b8f6:	60b9      	str	r1, [r7, #8]
 800b8f8:	603b      	str	r3, [r7, #0]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8fe:	e04c      	b.n	800b99a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b906:	d048      	beq.n	800b99a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b908:	f7fa ffa8 	bl	800685c <HAL_GetTick>
 800b90c:	4602      	mov	r2, r0
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d902      	bls.n	800b91e <SPI_WaitFlagStateUntilTimeout+0x30>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d13d      	bne.n	800b99a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b92c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b936:	d111      	bne.n	800b95c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b940:	d004      	beq.n	800b94c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b94a:	d107      	bne.n	800b95c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b95a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b964:	d10f      	bne.n	800b986 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e00f      	b.n	800b9ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	bf0c      	ite	eq
 800b9aa:	2301      	moveq	r3, #1
 800b9ac:	2300      	movne	r3, #0
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	79fb      	ldrb	r3, [r7, #7]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d1a3      	bne.n	800b900 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b086      	sub	sp, #24
 800b9c6:	af02      	add	r7, sp, #8
 800b9c8:	60f8      	str	r0, [r7, #12]
 800b9ca:	60b9      	str	r1, [r7, #8]
 800b9cc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9d6:	d111      	bne.n	800b9fc <SPI_EndRxTransaction+0x3a>
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e0:	d004      	beq.n	800b9ec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ea:	d107      	bne.n	800b9fc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9fa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba04:	d12a      	bne.n	800ba5c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba0e:	d012      	beq.n	800ba36 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2200      	movs	r2, #0
 800ba18:	2180      	movs	r1, #128	; 0x80
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff ff67 	bl	800b8ee <SPI_WaitFlagStateUntilTimeout>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d02d      	beq.n	800ba82 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2a:	f043 0220 	orr.w	r2, r3, #32
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e026      	b.n	800ba84 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2101      	movs	r1, #1
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f7ff ff54 	bl	800b8ee <SPI_WaitFlagStateUntilTimeout>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d01a      	beq.n	800ba82 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba50:	f043 0220 	orr.w	r2, r3, #32
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e013      	b.n	800ba84 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2200      	movs	r2, #0
 800ba64:	2101      	movs	r1, #1
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7ff ff41 	bl	800b8ee <SPI_WaitFlagStateUntilTimeout>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d007      	beq.n	800ba82 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba76:	f043 0220 	orr.w	r2, r3, #32
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e000      	b.n	800ba84 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af02      	add	r7, sp, #8
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ba98:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <SPI_EndRxTxTransaction+0x7c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a1b      	ldr	r2, [pc, #108]	; (800bb0c <SPI_EndRxTxTransaction+0x80>)
 800ba9e:	fba2 2303 	umull	r2, r3, r2, r3
 800baa2:	0d5b      	lsrs	r3, r3, #21
 800baa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800baa8:	fb02 f303 	mul.w	r3, r2, r3
 800baac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bab6:	d112      	bne.n	800bade <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	2180      	movs	r1, #128	; 0x80
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f7ff ff13 	bl	800b8ee <SPI_WaitFlagStateUntilTimeout>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d016      	beq.n	800bafc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad2:	f043 0220 	orr.w	r2, r3, #32
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e00f      	b.n	800bafe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00a      	beq.n	800bafa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf4:	2b80      	cmp	r3, #128	; 0x80
 800baf6:	d0f2      	beq.n	800bade <SPI_EndRxTxTransaction+0x52>
 800baf8:	e000      	b.n	800bafc <SPI_EndRxTxTransaction+0x70>
        break;
 800bafa:	bf00      	nop
  }

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000000 	.word	0x20000000
 800bb0c:	165e9f81 	.word	0x165e9f81

0800bb10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e01d      	b.n	800bb5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d106      	bne.n	800bb3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7f9 fc08 	bl	800534c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f000 fb56 	bl	800c200 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b085      	sub	sp, #20
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f042 0201 	orr.w	r2, r2, #1
 800bb7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b06      	cmp	r3, #6
 800bb8e:	d007      	beq.n	800bba0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f042 0201 	orr.w	r2, r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e01d      	b.n	800bbfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7f9 fb45 	bl	8005264 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2202      	movs	r2, #2
 800bbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f000 fb07 	bl	800c200 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2201      	movs	r2, #1
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fd42 	bl	800c6a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a15      	ldr	r2, [pc, #84]	; (800bc78 <HAL_TIM_PWM_Start+0x74>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d004      	beq.n	800bc30 <HAL_TIM_PWM_Start+0x2c>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a14      	ldr	r2, [pc, #80]	; (800bc7c <HAL_TIM_PWM_Start+0x78>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d101      	bne.n	800bc34 <HAL_TIM_PWM_Start+0x30>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e000      	b.n	800bc36 <HAL_TIM_PWM_Start+0x32>
 800bc34:	2300      	movs	r3, #0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	f003 0307 	and.w	r3, r3, #7
 800bc54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b06      	cmp	r3, #6
 800bc5a:	d007      	beq.n	800bc6c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f042 0201 	orr.w	r2, r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	40010000 	.word	0x40010000
 800bc7c:	40010400 	.word	0x40010400

0800bc80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e083      	b.n	800bd9c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d106      	bne.n	800bcae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7f9 fbdf 	bl	800546c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	6812      	ldr	r2, [r2, #0]
 800bcc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcc4:	f023 0307 	bic.w	r3, r3, #7
 800bcc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f000 fa93 	bl	800c200 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6a1b      	ldr	r3, [r3, #32]
 800bcf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd02:	f023 0303 	bic.w	r3, r3, #3
 800bd06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689a      	ldr	r2, [r3, #8]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	021b      	lsls	r3, r3, #8
 800bd12:	4313      	orrs	r3, r2
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bd20:	f023 030c 	bic.w	r3, r3, #12
 800bd24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68da      	ldr	r2, [r3, #12]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	011a      	lsls	r2, r3, #4
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	031b      	lsls	r3, r3, #12
 800bd50:	4313      	orrs	r3, r2
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bd5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bd66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	011b      	lsls	r3, r3, #4
 800bd72:	4313      	orrs	r3, r2
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <HAL_TIM_Encoder_Start+0x16>
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d008      	beq.n	800bdca <HAL_TIM_Encoder_Start+0x26>
 800bdb8:	e00f      	b.n	800bdda <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fc6c 	bl	800c6a0 <TIM_CCxChannelCmd>
      break;
 800bdc8:	e016      	b.n	800bdf8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	2104      	movs	r1, #4
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fc64 	bl	800c6a0 <TIM_CCxChannelCmd>
      break;
 800bdd8:	e00e      	b.n	800bdf8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2201      	movs	r2, #1
 800bde0:	2100      	movs	r1, #0
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 fc5c 	bl	800c6a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2201      	movs	r2, #1
 800bdee:	2104      	movs	r1, #4
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f000 fc55 	bl	800c6a0 <TIM_CCxChannelCmd>
      break;
 800bdf6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0201 	orr.w	r2, r2, #1
 800be06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	f003 0302 	and.w	r3, r3, #2
 800be24:	2b02      	cmp	r3, #2
 800be26:	d122      	bne.n	800be6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b02      	cmp	r3, #2
 800be34:	d11b      	bne.n	800be6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f06f 0202 	mvn.w	r2, #2
 800be3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	f003 0303 	and.w	r3, r3, #3
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f9b5 	bl	800c1c4 <HAL_TIM_IC_CaptureCallback>
 800be5a:	e005      	b.n	800be68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f9a7 	bl	800c1b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f9b8 	bl	800c1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d122      	bne.n	800bec2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	f003 0304 	and.w	r3, r3, #4
 800be86:	2b04      	cmp	r3, #4
 800be88:	d11b      	bne.n	800bec2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f06f 0204 	mvn.w	r2, #4
 800be92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2202      	movs	r2, #2
 800be98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d003      	beq.n	800beb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f98b 	bl	800c1c4 <HAL_TIM_IC_CaptureCallback>
 800beae:	e005      	b.n	800bebc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f97d 	bl	800c1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f98e 	bl	800c1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	f003 0308 	and.w	r3, r3, #8
 800becc:	2b08      	cmp	r3, #8
 800bece:	d122      	bne.n	800bf16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f003 0308 	and.w	r3, r3, #8
 800beda:	2b08      	cmp	r3, #8
 800bedc:	d11b      	bne.n	800bf16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f06f 0208 	mvn.w	r2, #8
 800bee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2204      	movs	r2, #4
 800beec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f961 	bl	800c1c4 <HAL_TIM_IC_CaptureCallback>
 800bf02:	e005      	b.n	800bf10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f953 	bl	800c1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f964 	bl	800c1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	f003 0310 	and.w	r3, r3, #16
 800bf20:	2b10      	cmp	r3, #16
 800bf22:	d122      	bne.n	800bf6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	f003 0310 	and.w	r3, r3, #16
 800bf2e:	2b10      	cmp	r3, #16
 800bf30:	d11b      	bne.n	800bf6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f06f 0210 	mvn.w	r2, #16
 800bf3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2208      	movs	r2, #8
 800bf40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f937 	bl	800c1c4 <HAL_TIM_IC_CaptureCallback>
 800bf56:	e005      	b.n	800bf64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f929 	bl	800c1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f93a 	bl	800c1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	f003 0301 	and.w	r3, r3, #1
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d10e      	bne.n	800bf96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d107      	bne.n	800bf96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f06f 0201 	mvn.w	r2, #1
 800bf8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7f7 fdb5 	bl	8003b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa0:	2b80      	cmp	r3, #128	; 0x80
 800bfa2:	d10e      	bne.n	800bfc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfae:	2b80      	cmp	r3, #128	; 0x80
 800bfb0:	d107      	bne.n	800bfc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fc6d 	bl	800c89c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfcc:	2b40      	cmp	r3, #64	; 0x40
 800bfce:	d10e      	bne.n	800bfee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfda:	2b40      	cmp	r3, #64	; 0x40
 800bfdc:	d107      	bne.n	800bfee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f8ff 	bl	800c1ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	f003 0320 	and.w	r3, r3, #32
 800bff8:	2b20      	cmp	r3, #32
 800bffa:	d10e      	bne.n	800c01a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	f003 0320 	and.w	r3, r3, #32
 800c006:	2b20      	cmp	r3, #32
 800c008:	d107      	bne.n	800c01a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f06f 0220 	mvn.w	r2, #32
 800c012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fc37 	bl	800c888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c036:	2b01      	cmp	r3, #1
 800c038:	d101      	bne.n	800c03e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c03a:	2302      	movs	r3, #2
 800c03c:	e0b4      	b.n	800c1a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2201      	movs	r2, #1
 800c042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2202      	movs	r2, #2
 800c04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b0c      	cmp	r3, #12
 800c052:	f200 809f 	bhi.w	800c194 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c091 	.word	0x0800c091
 800c060:	0800c195 	.word	0x0800c195
 800c064:	0800c195 	.word	0x0800c195
 800c068:	0800c195 	.word	0x0800c195
 800c06c:	0800c0d1 	.word	0x0800c0d1
 800c070:	0800c195 	.word	0x0800c195
 800c074:	0800c195 	.word	0x0800c195
 800c078:	0800c195 	.word	0x0800c195
 800c07c:	0800c113 	.word	0x0800c113
 800c080:	0800c195 	.word	0x0800c195
 800c084:	0800c195 	.word	0x0800c195
 800c088:	0800c195 	.word	0x0800c195
 800c08c:	0800c153 	.word	0x0800c153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	4618      	mov	r0, r3
 800c098:	f000 f952 	bl	800c340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	699a      	ldr	r2, [r3, #24]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f042 0208 	orr.w	r2, r2, #8
 800c0aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	699a      	ldr	r2, [r3, #24]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f022 0204 	bic.w	r2, r2, #4
 800c0ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6999      	ldr	r1, [r3, #24]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	430a      	orrs	r2, r1
 800c0cc:	619a      	str	r2, [r3, #24]
      break;
 800c0ce:	e062      	b.n	800c196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68b9      	ldr	r1, [r7, #8]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 f9a2 	bl	800c420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	699a      	ldr	r2, [r3, #24]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	699a      	ldr	r2, [r3, #24]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6999      	ldr	r1, [r3, #24]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	021a      	lsls	r2, r3, #8
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	430a      	orrs	r2, r1
 800c10e:	619a      	str	r2, [r3, #24]
      break;
 800c110:	e041      	b.n	800c196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f9f7 	bl	800c50c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	69da      	ldr	r2, [r3, #28]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f042 0208 	orr.w	r2, r2, #8
 800c12c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	69da      	ldr	r2, [r3, #28]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f022 0204 	bic.w	r2, r2, #4
 800c13c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	69d9      	ldr	r1, [r3, #28]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	691a      	ldr	r2, [r3, #16]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	430a      	orrs	r2, r1
 800c14e:	61da      	str	r2, [r3, #28]
      break;
 800c150:	e021      	b.n	800c196 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 fa4b 	bl	800c5f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	69da      	ldr	r2, [r3, #28]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c16c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	69da      	ldr	r2, [r3, #28]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c17c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	69d9      	ldr	r1, [r3, #28]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	021a      	lsls	r2, r3, #8
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	430a      	orrs	r2, r1
 800c190:	61da      	str	r2, [r3, #28]
      break;
 800c192:	e000      	b.n	800c196 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c194:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a40      	ldr	r2, [pc, #256]	; (800c314 <TIM_Base_SetConfig+0x114>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d013      	beq.n	800c240 <TIM_Base_SetConfig+0x40>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c21e:	d00f      	beq.n	800c240 <TIM_Base_SetConfig+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a3d      	ldr	r2, [pc, #244]	; (800c318 <TIM_Base_SetConfig+0x118>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d00b      	beq.n	800c240 <TIM_Base_SetConfig+0x40>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a3c      	ldr	r2, [pc, #240]	; (800c31c <TIM_Base_SetConfig+0x11c>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d007      	beq.n	800c240 <TIM_Base_SetConfig+0x40>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a3b      	ldr	r2, [pc, #236]	; (800c320 <TIM_Base_SetConfig+0x120>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d003      	beq.n	800c240 <TIM_Base_SetConfig+0x40>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a3a      	ldr	r2, [pc, #232]	; (800c324 <TIM_Base_SetConfig+0x124>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d108      	bne.n	800c252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	4313      	orrs	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a2f      	ldr	r2, [pc, #188]	; (800c314 <TIM_Base_SetConfig+0x114>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d02b      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c260:	d027      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a2c      	ldr	r2, [pc, #176]	; (800c318 <TIM_Base_SetConfig+0x118>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d023      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a2b      	ldr	r2, [pc, #172]	; (800c31c <TIM_Base_SetConfig+0x11c>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d01f      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a2a      	ldr	r2, [pc, #168]	; (800c320 <TIM_Base_SetConfig+0x120>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01b      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a29      	ldr	r2, [pc, #164]	; (800c324 <TIM_Base_SetConfig+0x124>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d017      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a28      	ldr	r2, [pc, #160]	; (800c328 <TIM_Base_SetConfig+0x128>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d013      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a27      	ldr	r2, [pc, #156]	; (800c32c <TIM_Base_SetConfig+0x12c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00f      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a26      	ldr	r2, [pc, #152]	; (800c330 <TIM_Base_SetConfig+0x130>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00b      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a25      	ldr	r2, [pc, #148]	; (800c334 <TIM_Base_SetConfig+0x134>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d007      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a24      	ldr	r2, [pc, #144]	; (800c338 <TIM_Base_SetConfig+0x138>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d003      	beq.n	800c2b2 <TIM_Base_SetConfig+0xb2>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a23      	ldr	r2, [pc, #140]	; (800c33c <TIM_Base_SetConfig+0x13c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d108      	bne.n	800c2c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	689a      	ldr	r2, [r3, #8]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a0a      	ldr	r2, [pc, #40]	; (800c314 <TIM_Base_SetConfig+0x114>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d003      	beq.n	800c2f8 <TIM_Base_SetConfig+0xf8>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a0c      	ldr	r2, [pc, #48]	; (800c324 <TIM_Base_SetConfig+0x124>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d103      	bne.n	800c300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	691a      	ldr	r2, [r3, #16]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	615a      	str	r2, [r3, #20]
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	40010000 	.word	0x40010000
 800c318:	40000400 	.word	0x40000400
 800c31c:	40000800 	.word	0x40000800
 800c320:	40000c00 	.word	0x40000c00
 800c324:	40010400 	.word	0x40010400
 800c328:	40014000 	.word	0x40014000
 800c32c:	40014400 	.word	0x40014400
 800c330:	40014800 	.word	0x40014800
 800c334:	40001800 	.word	0x40001800
 800c338:	40001c00 	.word	0x40001c00
 800c33c:	40002000 	.word	0x40002000

0800c340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c340:	b480      	push	{r7}
 800c342:	b087      	sub	sp, #28
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	f023 0201 	bic.w	r2, r3, #1
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4313      	orrs	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f023 0302 	bic.w	r3, r3, #2
 800c388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	697a      	ldr	r2, [r7, #20]
 800c390:	4313      	orrs	r3, r2
 800c392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a20      	ldr	r2, [pc, #128]	; (800c418 <TIM_OC1_SetConfig+0xd8>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d003      	beq.n	800c3a4 <TIM_OC1_SetConfig+0x64>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a1f      	ldr	r2, [pc, #124]	; (800c41c <TIM_OC1_SetConfig+0xdc>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d10c      	bne.n	800c3be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f023 0308 	bic.w	r3, r3, #8
 800c3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f023 0304 	bic.w	r3, r3, #4
 800c3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a15      	ldr	r2, [pc, #84]	; (800c418 <TIM_OC1_SetConfig+0xd8>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d003      	beq.n	800c3ce <TIM_OC1_SetConfig+0x8e>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a14      	ldr	r2, [pc, #80]	; (800c41c <TIM_OC1_SetConfig+0xdc>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d111      	bne.n	800c3f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	621a      	str	r2, [r3, #32]
}
 800c40c:	bf00      	nop
 800c40e:	371c      	adds	r7, #28
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	40010000 	.word	0x40010000
 800c41c:	40010400 	.word	0x40010400

0800c420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	f023 0210 	bic.w	r2, r3, #16
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4313      	orrs	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f023 0320 	bic.w	r3, r3, #32
 800c46a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	011b      	lsls	r3, r3, #4
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	4313      	orrs	r3, r2
 800c476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a22      	ldr	r2, [pc, #136]	; (800c504 <TIM_OC2_SetConfig+0xe4>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d003      	beq.n	800c488 <TIM_OC2_SetConfig+0x68>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a21      	ldr	r2, [pc, #132]	; (800c508 <TIM_OC2_SetConfig+0xe8>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d10d      	bne.n	800c4a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	011b      	lsls	r3, r3, #4
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	4313      	orrs	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a17      	ldr	r2, [pc, #92]	; (800c504 <TIM_OC2_SetConfig+0xe4>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d003      	beq.n	800c4b4 <TIM_OC2_SetConfig+0x94>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a16      	ldr	r2, [pc, #88]	; (800c508 <TIM_OC2_SetConfig+0xe8>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d113      	bne.n	800c4dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	621a      	str	r2, [r3, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	40010000 	.word	0x40010000
 800c508:	40010400 	.word	0x40010400

0800c50c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c53a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f023 0303 	bic.w	r3, r3, #3
 800c542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a21      	ldr	r2, [pc, #132]	; (800c5ec <TIM_OC3_SetConfig+0xe0>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d003      	beq.n	800c572 <TIM_OC3_SetConfig+0x66>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a20      	ldr	r2, [pc, #128]	; (800c5f0 <TIM_OC3_SetConfig+0xe4>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d10d      	bne.n	800c58e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	021b      	lsls	r3, r3, #8
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	4313      	orrs	r3, r2
 800c584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a16      	ldr	r2, [pc, #88]	; (800c5ec <TIM_OC3_SetConfig+0xe0>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d003      	beq.n	800c59e <TIM_OC3_SetConfig+0x92>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a15      	ldr	r2, [pc, #84]	; (800c5f0 <TIM_OC3_SetConfig+0xe4>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d113      	bne.n	800c5c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	011b      	lsls	r3, r3, #4
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	011b      	lsls	r3, r3, #4
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	621a      	str	r2, [r3, #32]
}
 800c5e0:	bf00      	nop
 800c5e2:	371c      	adds	r7, #28
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	40010000 	.word	0x40010000
 800c5f0:	40010400 	.word	0x40010400

0800c5f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	021b      	lsls	r3, r3, #8
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	4313      	orrs	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c63e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	031b      	lsls	r3, r3, #12
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	4313      	orrs	r3, r2
 800c64a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a12      	ldr	r2, [pc, #72]	; (800c698 <TIM_OC4_SetConfig+0xa4>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d003      	beq.n	800c65c <TIM_OC4_SetConfig+0x68>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a11      	ldr	r2, [pc, #68]	; (800c69c <TIM_OC4_SetConfig+0xa8>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d109      	bne.n	800c670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	019b      	lsls	r3, r3, #6
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	621a      	str	r2, [r3, #32]
}
 800c68a:	bf00      	nop
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	40010000 	.word	0x40010000
 800c69c:	40010400 	.word	0x40010400

0800c6a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f003 031f 	and.w	r3, r3, #31
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6a1a      	ldr	r2, [r3, #32]
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	43db      	mvns	r3, r3
 800c6c2:	401a      	ands	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6a1a      	ldr	r2, [r3, #32]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	f003 031f 	and.w	r3, r3, #31
 800c6d2:	6879      	ldr	r1, [r7, #4]
 800c6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d8:	431a      	orrs	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	621a      	str	r2, [r3, #32]
}
 800c6de:	bf00      	nop
 800c6e0:	371c      	adds	r7, #28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
	...

0800c6ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d101      	bne.n	800c704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c700:	2302      	movs	r3, #2
 800c702:	e05a      	b.n	800c7ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2202      	movs	r2, #2
 800c710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c72a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4313      	orrs	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a21      	ldr	r2, [pc, #132]	; (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d022      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c750:	d01d      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a1d      	ldr	r2, [pc, #116]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d018      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a1b      	ldr	r2, [pc, #108]	; (800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d013      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a1a      	ldr	r2, [pc, #104]	; (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d00e      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a18      	ldr	r2, [pc, #96]	; (800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d009      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a17      	ldr	r2, [pc, #92]	; (800c7dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d004      	beq.n	800c78e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a15      	ldr	r2, [pc, #84]	; (800c7e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d10c      	bne.n	800c7a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	40010000 	.word	0x40010000
 800c7cc:	40000400 	.word	0x40000400
 800c7d0:	40000800 	.word	0x40000800
 800c7d4:	40000c00 	.word	0x40000c00
 800c7d8:	40010400 	.word	0x40010400
 800c7dc:	40014000 	.word	0x40014000
 800c7e0:	40001800 	.word	0x40001800

0800c7e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d101      	bne.n	800c800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	e03d      	b.n	800c87c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	4313      	orrs	r3, r2
 800c814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	4313      	orrs	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e03f      	b.n	800c942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7f8 fef2 	bl	80056c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2224      	movs	r2, #36	; 0x24
 800c8e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f829 	bl	800c94c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	691a      	ldr	r2, [r3, #16]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	695a      	ldr	r2, [r3, #20]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2220      	movs	r2, #32
 800c934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2220      	movs	r2, #32
 800c93c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
	...

0800c94c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	b085      	sub	sp, #20
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68da      	ldr	r2, [r3, #12]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	430a      	orrs	r2, r1
 800c96a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	689a      	ldr	r2, [r3, #8]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	431a      	orrs	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	695b      	ldr	r3, [r3, #20]
 800c97a:	431a      	orrs	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c98e:	f023 030c 	bic.w	r3, r3, #12
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	6812      	ldr	r2, [r2, #0]
 800c996:	68f9      	ldr	r1, [r7, #12]
 800c998:	430b      	orrs	r3, r1
 800c99a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9ba:	f040 818b 	bne.w	800ccd4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4ac1      	ldr	r2, [pc, #772]	; (800ccc8 <UART_SetConfig+0x37c>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d005      	beq.n	800c9d4 <UART_SetConfig+0x88>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4abf      	ldr	r2, [pc, #764]	; (800cccc <UART_SetConfig+0x380>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	f040 80bd 	bne.w	800cb4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c9d4:	f7fc fbcc 	bl	8009170 <HAL_RCC_GetPCLK2Freq>
 800c9d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	461d      	mov	r5, r3
 800c9de:	f04f 0600 	mov.w	r6, #0
 800c9e2:	46a8      	mov	r8, r5
 800c9e4:	46b1      	mov	r9, r6
 800c9e6:	eb18 0308 	adds.w	r3, r8, r8
 800c9ea:	eb49 0409 	adc.w	r4, r9, r9
 800c9ee:	4698      	mov	r8, r3
 800c9f0:	46a1      	mov	r9, r4
 800c9f2:	eb18 0805 	adds.w	r8, r8, r5
 800c9f6:	eb49 0906 	adc.w	r9, r9, r6
 800c9fa:	f04f 0100 	mov.w	r1, #0
 800c9fe:	f04f 0200 	mov.w	r2, #0
 800ca02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ca06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ca0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ca0e:	4688      	mov	r8, r1
 800ca10:	4691      	mov	r9, r2
 800ca12:	eb18 0005 	adds.w	r0, r8, r5
 800ca16:	eb49 0106 	adc.w	r1, r9, r6
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	461d      	mov	r5, r3
 800ca20:	f04f 0600 	mov.w	r6, #0
 800ca24:	196b      	adds	r3, r5, r5
 800ca26:	eb46 0406 	adc.w	r4, r6, r6
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	f7f4 f943 	bl	8000cb8 <__aeabi_uldivmod>
 800ca32:	4603      	mov	r3, r0
 800ca34:	460c      	mov	r4, r1
 800ca36:	461a      	mov	r2, r3
 800ca38:	4ba5      	ldr	r3, [pc, #660]	; (800ccd0 <UART_SetConfig+0x384>)
 800ca3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca3e:	095b      	lsrs	r3, r3, #5
 800ca40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	461d      	mov	r5, r3
 800ca48:	f04f 0600 	mov.w	r6, #0
 800ca4c:	46a9      	mov	r9, r5
 800ca4e:	46b2      	mov	sl, r6
 800ca50:	eb19 0309 	adds.w	r3, r9, r9
 800ca54:	eb4a 040a 	adc.w	r4, sl, sl
 800ca58:	4699      	mov	r9, r3
 800ca5a:	46a2      	mov	sl, r4
 800ca5c:	eb19 0905 	adds.w	r9, r9, r5
 800ca60:	eb4a 0a06 	adc.w	sl, sl, r6
 800ca64:	f04f 0100 	mov.w	r1, #0
 800ca68:	f04f 0200 	mov.w	r2, #0
 800ca6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca78:	4689      	mov	r9, r1
 800ca7a:	4692      	mov	sl, r2
 800ca7c:	eb19 0005 	adds.w	r0, r9, r5
 800ca80:	eb4a 0106 	adc.w	r1, sl, r6
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	461d      	mov	r5, r3
 800ca8a:	f04f 0600 	mov.w	r6, #0
 800ca8e:	196b      	adds	r3, r5, r5
 800ca90:	eb46 0406 	adc.w	r4, r6, r6
 800ca94:	461a      	mov	r2, r3
 800ca96:	4623      	mov	r3, r4
 800ca98:	f7f4 f90e 	bl	8000cb8 <__aeabi_uldivmod>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	461a      	mov	r2, r3
 800caa2:	4b8b      	ldr	r3, [pc, #556]	; (800ccd0 <UART_SetConfig+0x384>)
 800caa4:	fba3 1302 	umull	r1, r3, r3, r2
 800caa8:	095b      	lsrs	r3, r3, #5
 800caaa:	2164      	movs	r1, #100	; 0x64
 800caac:	fb01 f303 	mul.w	r3, r1, r3
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	3332      	adds	r3, #50	; 0x32
 800cab6:	4a86      	ldr	r2, [pc, #536]	; (800ccd0 <UART_SetConfig+0x384>)
 800cab8:	fba2 2303 	umull	r2, r3, r2, r3
 800cabc:	095b      	lsrs	r3, r3, #5
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cac4:	4498      	add	r8, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	461d      	mov	r5, r3
 800caca:	f04f 0600 	mov.w	r6, #0
 800cace:	46a9      	mov	r9, r5
 800cad0:	46b2      	mov	sl, r6
 800cad2:	eb19 0309 	adds.w	r3, r9, r9
 800cad6:	eb4a 040a 	adc.w	r4, sl, sl
 800cada:	4699      	mov	r9, r3
 800cadc:	46a2      	mov	sl, r4
 800cade:	eb19 0905 	adds.w	r9, r9, r5
 800cae2:	eb4a 0a06 	adc.w	sl, sl, r6
 800cae6:	f04f 0100 	mov.w	r1, #0
 800caea:	f04f 0200 	mov.w	r2, #0
 800caee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800caf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800caf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cafa:	4689      	mov	r9, r1
 800cafc:	4692      	mov	sl, r2
 800cafe:	eb19 0005 	adds.w	r0, r9, r5
 800cb02:	eb4a 0106 	adc.w	r1, sl, r6
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	461d      	mov	r5, r3
 800cb0c:	f04f 0600 	mov.w	r6, #0
 800cb10:	196b      	adds	r3, r5, r5
 800cb12:	eb46 0406 	adc.w	r4, r6, r6
 800cb16:	461a      	mov	r2, r3
 800cb18:	4623      	mov	r3, r4
 800cb1a:	f7f4 f8cd 	bl	8000cb8 <__aeabi_uldivmod>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	460c      	mov	r4, r1
 800cb22:	461a      	mov	r2, r3
 800cb24:	4b6a      	ldr	r3, [pc, #424]	; (800ccd0 <UART_SetConfig+0x384>)
 800cb26:	fba3 1302 	umull	r1, r3, r3, r2
 800cb2a:	095b      	lsrs	r3, r3, #5
 800cb2c:	2164      	movs	r1, #100	; 0x64
 800cb2e:	fb01 f303 	mul.w	r3, r1, r3
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	3332      	adds	r3, #50	; 0x32
 800cb38:	4a65      	ldr	r2, [pc, #404]	; (800ccd0 <UART_SetConfig+0x384>)
 800cb3a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb3e:	095b      	lsrs	r3, r3, #5
 800cb40:	f003 0207 	and.w	r2, r3, #7
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4442      	add	r2, r8
 800cb4a:	609a      	str	r2, [r3, #8]
 800cb4c:	e26f      	b.n	800d02e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb4e:	f7fc fafb 	bl	8009148 <HAL_RCC_GetPCLK1Freq>
 800cb52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	461d      	mov	r5, r3
 800cb58:	f04f 0600 	mov.w	r6, #0
 800cb5c:	46a8      	mov	r8, r5
 800cb5e:	46b1      	mov	r9, r6
 800cb60:	eb18 0308 	adds.w	r3, r8, r8
 800cb64:	eb49 0409 	adc.w	r4, r9, r9
 800cb68:	4698      	mov	r8, r3
 800cb6a:	46a1      	mov	r9, r4
 800cb6c:	eb18 0805 	adds.w	r8, r8, r5
 800cb70:	eb49 0906 	adc.w	r9, r9, r6
 800cb74:	f04f 0100 	mov.w	r1, #0
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cb80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cb84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cb88:	4688      	mov	r8, r1
 800cb8a:	4691      	mov	r9, r2
 800cb8c:	eb18 0005 	adds.w	r0, r8, r5
 800cb90:	eb49 0106 	adc.w	r1, r9, r6
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	461d      	mov	r5, r3
 800cb9a:	f04f 0600 	mov.w	r6, #0
 800cb9e:	196b      	adds	r3, r5, r5
 800cba0:	eb46 0406 	adc.w	r4, r6, r6
 800cba4:	461a      	mov	r2, r3
 800cba6:	4623      	mov	r3, r4
 800cba8:	f7f4 f886 	bl	8000cb8 <__aeabi_uldivmod>
 800cbac:	4603      	mov	r3, r0
 800cbae:	460c      	mov	r4, r1
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	4b47      	ldr	r3, [pc, #284]	; (800ccd0 <UART_SetConfig+0x384>)
 800cbb4:	fba3 2302 	umull	r2, r3, r3, r2
 800cbb8:	095b      	lsrs	r3, r3, #5
 800cbba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	461d      	mov	r5, r3
 800cbc2:	f04f 0600 	mov.w	r6, #0
 800cbc6:	46a9      	mov	r9, r5
 800cbc8:	46b2      	mov	sl, r6
 800cbca:	eb19 0309 	adds.w	r3, r9, r9
 800cbce:	eb4a 040a 	adc.w	r4, sl, sl
 800cbd2:	4699      	mov	r9, r3
 800cbd4:	46a2      	mov	sl, r4
 800cbd6:	eb19 0905 	adds.w	r9, r9, r5
 800cbda:	eb4a 0a06 	adc.w	sl, sl, r6
 800cbde:	f04f 0100 	mov.w	r1, #0
 800cbe2:	f04f 0200 	mov.w	r2, #0
 800cbe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cbee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cbf2:	4689      	mov	r9, r1
 800cbf4:	4692      	mov	sl, r2
 800cbf6:	eb19 0005 	adds.w	r0, r9, r5
 800cbfa:	eb4a 0106 	adc.w	r1, sl, r6
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	461d      	mov	r5, r3
 800cc04:	f04f 0600 	mov.w	r6, #0
 800cc08:	196b      	adds	r3, r5, r5
 800cc0a:	eb46 0406 	adc.w	r4, r6, r6
 800cc0e:	461a      	mov	r2, r3
 800cc10:	4623      	mov	r3, r4
 800cc12:	f7f4 f851 	bl	8000cb8 <__aeabi_uldivmod>
 800cc16:	4603      	mov	r3, r0
 800cc18:	460c      	mov	r4, r1
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4b2c      	ldr	r3, [pc, #176]	; (800ccd0 <UART_SetConfig+0x384>)
 800cc1e:	fba3 1302 	umull	r1, r3, r3, r2
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	2164      	movs	r1, #100	; 0x64
 800cc26:	fb01 f303 	mul.w	r3, r1, r3
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	3332      	adds	r3, #50	; 0x32
 800cc30:	4a27      	ldr	r2, [pc, #156]	; (800ccd0 <UART_SetConfig+0x384>)
 800cc32:	fba2 2303 	umull	r2, r3, r2, r3
 800cc36:	095b      	lsrs	r3, r3, #5
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc3e:	4498      	add	r8, r3
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	461d      	mov	r5, r3
 800cc44:	f04f 0600 	mov.w	r6, #0
 800cc48:	46a9      	mov	r9, r5
 800cc4a:	46b2      	mov	sl, r6
 800cc4c:	eb19 0309 	adds.w	r3, r9, r9
 800cc50:	eb4a 040a 	adc.w	r4, sl, sl
 800cc54:	4699      	mov	r9, r3
 800cc56:	46a2      	mov	sl, r4
 800cc58:	eb19 0905 	adds.w	r9, r9, r5
 800cc5c:	eb4a 0a06 	adc.w	sl, sl, r6
 800cc60:	f04f 0100 	mov.w	r1, #0
 800cc64:	f04f 0200 	mov.w	r2, #0
 800cc68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cc70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cc74:	4689      	mov	r9, r1
 800cc76:	4692      	mov	sl, r2
 800cc78:	eb19 0005 	adds.w	r0, r9, r5
 800cc7c:	eb4a 0106 	adc.w	r1, sl, r6
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	461d      	mov	r5, r3
 800cc86:	f04f 0600 	mov.w	r6, #0
 800cc8a:	196b      	adds	r3, r5, r5
 800cc8c:	eb46 0406 	adc.w	r4, r6, r6
 800cc90:	461a      	mov	r2, r3
 800cc92:	4623      	mov	r3, r4
 800cc94:	f7f4 f810 	bl	8000cb8 <__aeabi_uldivmod>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <UART_SetConfig+0x384>)
 800cca0:	fba3 1302 	umull	r1, r3, r3, r2
 800cca4:	095b      	lsrs	r3, r3, #5
 800cca6:	2164      	movs	r1, #100	; 0x64
 800cca8:	fb01 f303 	mul.w	r3, r1, r3
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	3332      	adds	r3, #50	; 0x32
 800ccb2:	4a07      	ldr	r2, [pc, #28]	; (800ccd0 <UART_SetConfig+0x384>)
 800ccb4:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb8:	095b      	lsrs	r3, r3, #5
 800ccba:	f003 0207 	and.w	r2, r3, #7
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4442      	add	r2, r8
 800ccc4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ccc6:	e1b2      	b.n	800d02e <UART_SetConfig+0x6e2>
 800ccc8:	40011000 	.word	0x40011000
 800cccc:	40011400 	.word	0x40011400
 800ccd0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4ad7      	ldr	r2, [pc, #860]	; (800d038 <UART_SetConfig+0x6ec>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d005      	beq.n	800ccea <UART_SetConfig+0x39e>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4ad6      	ldr	r2, [pc, #856]	; (800d03c <UART_SetConfig+0x6f0>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	f040 80d1 	bne.w	800ce8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccea:	f7fc fa41 	bl	8009170 <HAL_RCC_GetPCLK2Freq>
 800ccee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	469a      	mov	sl, r3
 800ccf4:	f04f 0b00 	mov.w	fp, #0
 800ccf8:	46d0      	mov	r8, sl
 800ccfa:	46d9      	mov	r9, fp
 800ccfc:	eb18 0308 	adds.w	r3, r8, r8
 800cd00:	eb49 0409 	adc.w	r4, r9, r9
 800cd04:	4698      	mov	r8, r3
 800cd06:	46a1      	mov	r9, r4
 800cd08:	eb18 080a 	adds.w	r8, r8, sl
 800cd0c:	eb49 090b 	adc.w	r9, r9, fp
 800cd10:	f04f 0100 	mov.w	r1, #0
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cd1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cd20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cd24:	4688      	mov	r8, r1
 800cd26:	4691      	mov	r9, r2
 800cd28:	eb1a 0508 	adds.w	r5, sl, r8
 800cd2c:	eb4b 0609 	adc.w	r6, fp, r9
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	4619      	mov	r1, r3
 800cd36:	f04f 0200 	mov.w	r2, #0
 800cd3a:	f04f 0300 	mov.w	r3, #0
 800cd3e:	f04f 0400 	mov.w	r4, #0
 800cd42:	0094      	lsls	r4, r2, #2
 800cd44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd48:	008b      	lsls	r3, r1, #2
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	4628      	mov	r0, r5
 800cd50:	4631      	mov	r1, r6
 800cd52:	f7f3 ffb1 	bl	8000cb8 <__aeabi_uldivmod>
 800cd56:	4603      	mov	r3, r0
 800cd58:	460c      	mov	r4, r1
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	4bb8      	ldr	r3, [pc, #736]	; (800d040 <UART_SetConfig+0x6f4>)
 800cd5e:	fba3 2302 	umull	r2, r3, r3, r2
 800cd62:	095b      	lsrs	r3, r3, #5
 800cd64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	469b      	mov	fp, r3
 800cd6c:	f04f 0c00 	mov.w	ip, #0
 800cd70:	46d9      	mov	r9, fp
 800cd72:	46e2      	mov	sl, ip
 800cd74:	eb19 0309 	adds.w	r3, r9, r9
 800cd78:	eb4a 040a 	adc.w	r4, sl, sl
 800cd7c:	4699      	mov	r9, r3
 800cd7e:	46a2      	mov	sl, r4
 800cd80:	eb19 090b 	adds.w	r9, r9, fp
 800cd84:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cd88:	f04f 0100 	mov.w	r1, #0
 800cd8c:	f04f 0200 	mov.w	r2, #0
 800cd90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd9c:	4689      	mov	r9, r1
 800cd9e:	4692      	mov	sl, r2
 800cda0:	eb1b 0509 	adds.w	r5, fp, r9
 800cda4:	eb4c 060a 	adc.w	r6, ip, sl
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	4619      	mov	r1, r3
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	f04f 0400 	mov.w	r4, #0
 800cdba:	0094      	lsls	r4, r2, #2
 800cdbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cdc0:	008b      	lsls	r3, r1, #2
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4623      	mov	r3, r4
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	4631      	mov	r1, r6
 800cdca:	f7f3 ff75 	bl	8000cb8 <__aeabi_uldivmod>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	460c      	mov	r4, r1
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	4b9a      	ldr	r3, [pc, #616]	; (800d040 <UART_SetConfig+0x6f4>)
 800cdd6:	fba3 1302 	umull	r1, r3, r3, r2
 800cdda:	095b      	lsrs	r3, r3, #5
 800cddc:	2164      	movs	r1, #100	; 0x64
 800cdde:	fb01 f303 	mul.w	r3, r1, r3
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	011b      	lsls	r3, r3, #4
 800cde6:	3332      	adds	r3, #50	; 0x32
 800cde8:	4a95      	ldr	r2, [pc, #596]	; (800d040 <UART_SetConfig+0x6f4>)
 800cdea:	fba2 2303 	umull	r2, r3, r2, r3
 800cdee:	095b      	lsrs	r3, r3, #5
 800cdf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdf4:	4498      	add	r8, r3
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	469b      	mov	fp, r3
 800cdfa:	f04f 0c00 	mov.w	ip, #0
 800cdfe:	46d9      	mov	r9, fp
 800ce00:	46e2      	mov	sl, ip
 800ce02:	eb19 0309 	adds.w	r3, r9, r9
 800ce06:	eb4a 040a 	adc.w	r4, sl, sl
 800ce0a:	4699      	mov	r9, r3
 800ce0c:	46a2      	mov	sl, r4
 800ce0e:	eb19 090b 	adds.w	r9, r9, fp
 800ce12:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ce16:	f04f 0100 	mov.w	r1, #0
 800ce1a:	f04f 0200 	mov.w	r2, #0
 800ce1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ce26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ce2a:	4689      	mov	r9, r1
 800ce2c:	4692      	mov	sl, r2
 800ce2e:	eb1b 0509 	adds.w	r5, fp, r9
 800ce32:	eb4c 060a 	adc.w	r6, ip, sl
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	f04f 0200 	mov.w	r2, #0
 800ce40:	f04f 0300 	mov.w	r3, #0
 800ce44:	f04f 0400 	mov.w	r4, #0
 800ce48:	0094      	lsls	r4, r2, #2
 800ce4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ce4e:	008b      	lsls	r3, r1, #2
 800ce50:	461a      	mov	r2, r3
 800ce52:	4623      	mov	r3, r4
 800ce54:	4628      	mov	r0, r5
 800ce56:	4631      	mov	r1, r6
 800ce58:	f7f3 ff2e 	bl	8000cb8 <__aeabi_uldivmod>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b77      	ldr	r3, [pc, #476]	; (800d040 <UART_SetConfig+0x6f4>)
 800ce64:	fba3 1302 	umull	r1, r3, r3, r2
 800ce68:	095b      	lsrs	r3, r3, #5
 800ce6a:	2164      	movs	r1, #100	; 0x64
 800ce6c:	fb01 f303 	mul.w	r3, r1, r3
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	011b      	lsls	r3, r3, #4
 800ce74:	3332      	adds	r3, #50	; 0x32
 800ce76:	4a72      	ldr	r2, [pc, #456]	; (800d040 <UART_SetConfig+0x6f4>)
 800ce78:	fba2 2303 	umull	r2, r3, r2, r3
 800ce7c:	095b      	lsrs	r3, r3, #5
 800ce7e:	f003 020f 	and.w	r2, r3, #15
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4442      	add	r2, r8
 800ce88:	609a      	str	r2, [r3, #8]
 800ce8a:	e0d0      	b.n	800d02e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce8c:	f7fc f95c 	bl	8009148 <HAL_RCC_GetPCLK1Freq>
 800ce90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	469a      	mov	sl, r3
 800ce96:	f04f 0b00 	mov.w	fp, #0
 800ce9a:	46d0      	mov	r8, sl
 800ce9c:	46d9      	mov	r9, fp
 800ce9e:	eb18 0308 	adds.w	r3, r8, r8
 800cea2:	eb49 0409 	adc.w	r4, r9, r9
 800cea6:	4698      	mov	r8, r3
 800cea8:	46a1      	mov	r9, r4
 800ceaa:	eb18 080a 	adds.w	r8, r8, sl
 800ceae:	eb49 090b 	adc.w	r9, r9, fp
 800ceb2:	f04f 0100 	mov.w	r1, #0
 800ceb6:	f04f 0200 	mov.w	r2, #0
 800ceba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cebe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cec2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cec6:	4688      	mov	r8, r1
 800cec8:	4691      	mov	r9, r2
 800ceca:	eb1a 0508 	adds.w	r5, sl, r8
 800cece:	eb4b 0609 	adc.w	r6, fp, r9
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4619      	mov	r1, r3
 800ced8:	f04f 0200 	mov.w	r2, #0
 800cedc:	f04f 0300 	mov.w	r3, #0
 800cee0:	f04f 0400 	mov.w	r4, #0
 800cee4:	0094      	lsls	r4, r2, #2
 800cee6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ceea:	008b      	lsls	r3, r1, #2
 800ceec:	461a      	mov	r2, r3
 800ceee:	4623      	mov	r3, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	4631      	mov	r1, r6
 800cef4:	f7f3 fee0 	bl	8000cb8 <__aeabi_uldivmod>
 800cef8:	4603      	mov	r3, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	461a      	mov	r2, r3
 800cefe:	4b50      	ldr	r3, [pc, #320]	; (800d040 <UART_SetConfig+0x6f4>)
 800cf00:	fba3 2302 	umull	r2, r3, r3, r2
 800cf04:	095b      	lsrs	r3, r3, #5
 800cf06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	469b      	mov	fp, r3
 800cf0e:	f04f 0c00 	mov.w	ip, #0
 800cf12:	46d9      	mov	r9, fp
 800cf14:	46e2      	mov	sl, ip
 800cf16:	eb19 0309 	adds.w	r3, r9, r9
 800cf1a:	eb4a 040a 	adc.w	r4, sl, sl
 800cf1e:	4699      	mov	r9, r3
 800cf20:	46a2      	mov	sl, r4
 800cf22:	eb19 090b 	adds.w	r9, r9, fp
 800cf26:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cf2a:	f04f 0100 	mov.w	r1, #0
 800cf2e:	f04f 0200 	mov.w	r2, #0
 800cf32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf3e:	4689      	mov	r9, r1
 800cf40:	4692      	mov	sl, r2
 800cf42:	eb1b 0509 	adds.w	r5, fp, r9
 800cf46:	eb4c 060a 	adc.w	r6, ip, sl
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	f04f 0200 	mov.w	r2, #0
 800cf54:	f04f 0300 	mov.w	r3, #0
 800cf58:	f04f 0400 	mov.w	r4, #0
 800cf5c:	0094      	lsls	r4, r2, #2
 800cf5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cf62:	008b      	lsls	r3, r1, #2
 800cf64:	461a      	mov	r2, r3
 800cf66:	4623      	mov	r3, r4
 800cf68:	4628      	mov	r0, r5
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	f7f3 fea4 	bl	8000cb8 <__aeabi_uldivmod>
 800cf70:	4603      	mov	r3, r0
 800cf72:	460c      	mov	r4, r1
 800cf74:	461a      	mov	r2, r3
 800cf76:	4b32      	ldr	r3, [pc, #200]	; (800d040 <UART_SetConfig+0x6f4>)
 800cf78:	fba3 1302 	umull	r1, r3, r3, r2
 800cf7c:	095b      	lsrs	r3, r3, #5
 800cf7e:	2164      	movs	r1, #100	; 0x64
 800cf80:	fb01 f303 	mul.w	r3, r1, r3
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	011b      	lsls	r3, r3, #4
 800cf88:	3332      	adds	r3, #50	; 0x32
 800cf8a:	4a2d      	ldr	r2, [pc, #180]	; (800d040 <UART_SetConfig+0x6f4>)
 800cf8c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf90:	095b      	lsrs	r3, r3, #5
 800cf92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf96:	4498      	add	r8, r3
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	469b      	mov	fp, r3
 800cf9c:	f04f 0c00 	mov.w	ip, #0
 800cfa0:	46d9      	mov	r9, fp
 800cfa2:	46e2      	mov	sl, ip
 800cfa4:	eb19 0309 	adds.w	r3, r9, r9
 800cfa8:	eb4a 040a 	adc.w	r4, sl, sl
 800cfac:	4699      	mov	r9, r3
 800cfae:	46a2      	mov	sl, r4
 800cfb0:	eb19 090b 	adds.w	r9, r9, fp
 800cfb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cfb8:	f04f 0100 	mov.w	r1, #0
 800cfbc:	f04f 0200 	mov.w	r2, #0
 800cfc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cfc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cfc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cfcc:	4689      	mov	r9, r1
 800cfce:	4692      	mov	sl, r2
 800cfd0:	eb1b 0509 	adds.w	r5, fp, r9
 800cfd4:	eb4c 060a 	adc.w	r6, ip, sl
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	f04f 0300 	mov.w	r3, #0
 800cfe6:	f04f 0400 	mov.w	r4, #0
 800cfea:	0094      	lsls	r4, r2, #2
 800cfec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cff0:	008b      	lsls	r3, r1, #2
 800cff2:	461a      	mov	r2, r3
 800cff4:	4623      	mov	r3, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	4631      	mov	r1, r6
 800cffa:	f7f3 fe5d 	bl	8000cb8 <__aeabi_uldivmod>
 800cffe:	4603      	mov	r3, r0
 800d000:	460c      	mov	r4, r1
 800d002:	461a      	mov	r2, r3
 800d004:	4b0e      	ldr	r3, [pc, #56]	; (800d040 <UART_SetConfig+0x6f4>)
 800d006:	fba3 1302 	umull	r1, r3, r3, r2
 800d00a:	095b      	lsrs	r3, r3, #5
 800d00c:	2164      	movs	r1, #100	; 0x64
 800d00e:	fb01 f303 	mul.w	r3, r1, r3
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	011b      	lsls	r3, r3, #4
 800d016:	3332      	adds	r3, #50	; 0x32
 800d018:	4a09      	ldr	r2, [pc, #36]	; (800d040 <UART_SetConfig+0x6f4>)
 800d01a:	fba2 2303 	umull	r2, r3, r2, r3
 800d01e:	095b      	lsrs	r3, r3, #5
 800d020:	f003 020f 	and.w	r2, r3, #15
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4442      	add	r2, r8
 800d02a:	609a      	str	r2, [r3, #8]
}
 800d02c:	e7ff      	b.n	800d02e <UART_SetConfig+0x6e2>
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d038:	40011000 	.word	0x40011000
 800d03c:	40011400 	.word	0x40011400
 800d040:	51eb851f 	.word	0x51eb851f

0800d044 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d044:	b084      	sub	sp, #16
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	f107 001c 	add.w	r0, r7, #28
 800d052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d05a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d05c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d05e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d062:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d066:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d06a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d06e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	4313      	orrs	r3, r2
 800d074:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d07e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	431a      	orrs	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	b004      	add	sp, #16
 800d098:	4770      	bx	lr

0800d09a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d09a:	b480      	push	{r7}
 800d09c:	b083      	sub	sp, #12
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2203      	movs	r2, #3
 800d0e2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d0e4:	2002      	movs	r0, #2
 800d0e6:	f7f9 fbc5 	bl	8006874 <HAL_Delay>
  
  return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 0303 	and.w	r3, r3, #3
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d12e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d134:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d13a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4313      	orrs	r3, r2
 800d140:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d14a:	f023 030f 	bic.w	r3, r3, #15
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	431a      	orrs	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	b2db      	uxtb	r3, r3
}
 800d172:	4618      	mov	r0, r3
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d17e:	b480      	push	{r7}
 800d180:	b085      	sub	sp, #20
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3314      	adds	r3, #20
 800d18c:	461a      	mov	r2, r3
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	4413      	add	r3, r2
 800d192:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
}  
 800d198:	4618      	mov	r0, r3
 800d19a:	3714      	adds	r7, #20
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d1ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d1d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d1d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d1ee:	2300      	movs	r3, #0

}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b088      	sub	sp, #32
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d20a:	2310      	movs	r3, #16
 800d20c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d20e:	2340      	movs	r3, #64	; 0x40
 800d210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d212:	2300      	movs	r3, #0
 800d214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d21a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d21c:	f107 0308 	add.w	r3, r7, #8
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff ff74 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d228:	f241 3288 	movw	r2, #5000	; 0x1388
 800d22c:	2110      	movs	r1, #16
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fa40 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d236:	69fb      	ldr	r3, [r7, #28]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3720      	adds	r7, #32
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d24e:	2311      	movs	r3, #17
 800d250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d252:	2340      	movs	r3, #64	; 0x40
 800d254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d256:	2300      	movs	r3, #0
 800d258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d25e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d260:	f107 0308 	add.w	r3, r7, #8
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff ff52 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d270:	2111      	movs	r1, #17
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fa1e 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d27a:	69fb      	ldr	r3, [r7, #28]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3720      	adds	r7, #32
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d292:	2312      	movs	r3, #18
 800d294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d296:	2340      	movs	r3, #64	; 0x40
 800d298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d29a:	2300      	movs	r3, #0
 800d29c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2a4:	f107 0308 	add.w	r3, r7, #8
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff ff30 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b4:	2112      	movs	r1, #18
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f9fc 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d2bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2be:	69fb      	ldr	r3, [r7, #28]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3720      	adds	r7, #32
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b088      	sub	sp, #32
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d2d6:	2318      	movs	r3, #24
 800d2d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2da:	2340      	movs	r3, #64	; 0x40
 800d2dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2e8:	f107 0308 	add.w	r3, r7, #8
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7ff ff0e 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d2f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2f8:	2118      	movs	r1, #24
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f9da 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d302:	69fb      	ldr	r3, [r7, #28]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3720      	adds	r7, #32
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d31a:	2319      	movs	r3, #25
 800d31c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d31e:	2340      	movs	r3, #64	; 0x40
 800d320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d322:	2300      	movs	r3, #0
 800d324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d32a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d32c:	f107 0308 	add.w	r3, r7, #8
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff feec 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d338:	f241 3288 	movw	r2, #5000	; 0x1388
 800d33c:	2119      	movs	r1, #25
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f9b8 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d346:	69fb      	ldr	r3, [r7, #28]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d358:	2300      	movs	r3, #0
 800d35a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d35c:	230c      	movs	r3, #12
 800d35e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d360:	2340      	movs	r3, #64	; 0x40
 800d362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d364:	2300      	movs	r3, #0
 800d366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d36c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d36e:	f107 0308 	add.w	r3, r7, #8
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fecb 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d37a:	4a05      	ldr	r2, [pc, #20]	; (800d390 <SDMMC_CmdStopTransfer+0x40>)
 800d37c:	210c      	movs	r1, #12
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f998 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d386:	69fb      	ldr	r3, [r7, #28]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3720      	adds	r7, #32
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	05f5e100 	.word	0x05f5e100

0800d394 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b08a      	sub	sp, #40	; 0x28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d3a4:	2307      	movs	r3, #7
 800d3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3a8:	2340      	movs	r3, #64	; 0x40
 800d3aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3b6:	f107 0310 	add.w	r3, r7, #16
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7ff fea7 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d3c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c6:	2107      	movs	r1, #7
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f000 f973 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d3ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3728      	adds	r7, #40	; 0x28
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b088      	sub	sp, #32
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3f8:	f107 0308 	add.w	r3, r7, #8
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7ff fe86 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f92d 	bl	800d664 <SDMMC_GetCmdError>
 800d40a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40c:	69fb      	ldr	r3, [r7, #28]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3720      	adds	r7, #32
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b088      	sub	sp, #32
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d41e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d424:	2308      	movs	r3, #8
 800d426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d428:	2340      	movs	r3, #64	; 0x40
 800d42a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d42c:	2300      	movs	r3, #0
 800d42e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d434:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d436:	f107 0308 	add.w	r3, r7, #8
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff fe67 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fb16 	bl	800da74 <SDMMC_GetCmdResp7>
 800d448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d44a:	69fb      	ldr	r3, [r7, #28]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3720      	adds	r7, #32
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d462:	2337      	movs	r3, #55	; 0x37
 800d464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d466:	2340      	movs	r3, #64	; 0x40
 800d468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d46a:	2300      	movs	r3, #0
 800d46c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d474:	f107 0308 	add.w	r3, r7, #8
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff fe48 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d480:	f241 3288 	movw	r2, #5000	; 0x1388
 800d484:	2137      	movs	r1, #55	; 0x37
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f914 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d48e:	69fb      	ldr	r3, [r7, #28]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d4ae:	2329      	movs	r3, #41	; 0x29
 800d4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4b2:	2340      	movs	r3, #64	; 0x40
 800d4b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fe22 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fa23 	bl	800d918 <SDMMC_GetCmdResp3>
 800d4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d4:	69fb      	ldr	r3, [r7, #28]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3720      	adds	r7, #32
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b088      	sub	sp, #32
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d4ec:	2306      	movs	r3, #6
 800d4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4f0:	2340      	movs	r3, #64	; 0x40
 800d4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4fe:	f107 0308 	add.w	r3, r7, #8
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff fe03 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d50e:	2106      	movs	r1, #6
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f8cf 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d518:	69fb      	ldr	r3, [r7, #28]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b088      	sub	sp, #32
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d52a:	2300      	movs	r3, #0
 800d52c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d52e:	2333      	movs	r3, #51	; 0x33
 800d530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d532:	2340      	movs	r3, #64	; 0x40
 800d534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d536:	2300      	movs	r3, #0
 800d538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d53e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff fde2 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d550:	2133      	movs	r1, #51	; 0x33
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f8ae 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d55a:	69fb      	ldr	r3, [r7, #28]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3720      	adds	r7, #32
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d56c:	2300      	movs	r3, #0
 800d56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d570:	2302      	movs	r3, #2
 800d572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d574:	23c0      	movs	r3, #192	; 0xc0
 800d576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d57c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d580:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fdc1 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f97c 	bl	800d88c <SDMMC_GetCmdResp2>
 800d594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d596:	69fb      	ldr	r3, [r7, #28]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3720      	adds	r7, #32
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d5ae:	2309      	movs	r3, #9
 800d5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d5b2:	23c0      	movs	r3, #192	; 0xc0
 800d5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5c0:	f107 0308 	add.w	r3, r7, #8
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff fda2 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f95d 	bl	800d88c <SDMMC_GetCmdResp2>
 800d5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d4:	69fb      	ldr	r3, [r7, #28]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3720      	adds	r7, #32
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b088      	sub	sp, #32
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5f0:	2340      	movs	r3, #64	; 0x40
 800d5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff fd83 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	2103      	movs	r1, #3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 f9bc 	bl	800d98c <SDMMC_GetCmdResp6>
 800d614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d616:	69fb      	ldr	r3, [r7, #28]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3720      	adds	r7, #32
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d62e:	230d      	movs	r3, #13
 800d630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d632:	2340      	movs	r3, #64	; 0x40
 800d634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d636:	2300      	movs	r3, #0
 800d638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d63e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d640:	f107 0308 	add.w	r3, r7, #8
 800d644:	4619      	mov	r1, r3
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff fd62 	bl	800d110 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d64c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d650:	210d      	movs	r1, #13
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f82e 	bl	800d6b4 <SDMMC_GetCmdResp1>
 800d658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d65a:	69fb      	ldr	r3, [r7, #28]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3720      	adds	r7, #32
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d664:	b490      	push	{r4, r7}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d66c:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <SDMMC_GetCmdError+0x48>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a0f      	ldr	r2, [pc, #60]	; (800d6b0 <SDMMC_GetCmdError+0x4c>)
 800d672:	fba2 2303 	umull	r2, r3, r2, r3
 800d676:	0a5b      	lsrs	r3, r3, #9
 800d678:	f241 3288 	movw	r2, #5000	; 0x1388
 800d67c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d680:	4623      	mov	r3, r4
 800d682:	1e5c      	subs	r4, r3, #1
 800d684:	2b00      	cmp	r3, #0
 800d686:	d102      	bne.n	800d68e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d68c:	e009      	b.n	800d6a2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d696:	2b00      	cmp	r3, #0
 800d698:	d0f2      	beq.n	800d680 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	22c5      	movs	r2, #197	; 0xc5
 800d69e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bc90      	pop	{r4, r7}
 800d6aa:	4770      	bx	lr
 800d6ac:	20000000 	.word	0x20000000
 800d6b0:	10624dd3 	.word	0x10624dd3

0800d6b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d6b4:	b590      	push	{r4, r7, lr}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	607a      	str	r2, [r7, #4]
 800d6c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d6c2:	4b6f      	ldr	r3, [pc, #444]	; (800d880 <SDMMC_GetCmdResp1+0x1cc>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a6f      	ldr	r2, [pc, #444]	; (800d884 <SDMMC_GetCmdResp1+0x1d0>)
 800d6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6cc:	0a5b      	lsrs	r3, r3, #9
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d6d4:	4623      	mov	r3, r4
 800d6d6:	1e5c      	subs	r4, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d102      	bne.n	800d6e2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6e0:	e0c9      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d0f0      	beq.n	800d6d4 <SDMMC_GetCmdResp1+0x20>
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1eb      	bne.n	800d6d4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d004      	beq.n	800d712 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2204      	movs	r2, #4
 800d70c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d70e:	2304      	movs	r3, #4
 800d710:	e0b1      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d004      	beq.n	800d728 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2201      	movs	r2, #1
 800d722:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d724:	2301      	movs	r3, #1
 800d726:	e0a6      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	22c5      	movs	r2, #197	; 0xc5
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff fd18 	bl	800d164 <SDIO_GetCommandResponse>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	7afb      	ldrb	r3, [r7, #11]
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d001      	beq.n	800d742 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d73e:	2301      	movs	r3, #1
 800d740:	e099      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d742:	2100      	movs	r1, #0
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fd1a 	bl	800d17e <SDIO_GetResponse>
 800d74a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	4b4e      	ldr	r3, [pc, #312]	; (800d888 <SDMMC_GetCmdResp1+0x1d4>)
 800d750:	4013      	ands	r3, r2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d756:	2300      	movs	r3, #0
 800d758:	e08d      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	da02      	bge.n	800d766 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d764:	e087      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d001      	beq.n	800d774 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d770:	2340      	movs	r3, #64	; 0x40
 800d772:	e080      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d77e:	2380      	movs	r3, #128	; 0x80
 800d780:	e079      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d790:	e071      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7a0:	e069      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7b0:	e061      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d7bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7c0:	e059      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7d0:	e051      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7e0:	e049      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d7ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d7f0:	e041      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d7fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d800:	e039      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d80c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d810:	e031      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d81c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d820:	e029      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d82c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d830:	e021      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d83c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d840:	e019      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d84c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d850:	e011      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d85c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d860:	e009      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f003 0308 	and.w	r3, r3, #8
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d86c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d870:	e001      	b.n	800d876 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d876:	4618      	mov	r0, r3
 800d878:	371c      	adds	r7, #28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd90      	pop	{r4, r7, pc}
 800d87e:	bf00      	nop
 800d880:	20000000 	.word	0x20000000
 800d884:	10624dd3 	.word	0x10624dd3
 800d888:	fdffe008 	.word	0xfdffe008

0800d88c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d88c:	b490      	push	{r4, r7}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d894:	4b1e      	ldr	r3, [pc, #120]	; (800d910 <SDMMC_GetCmdResp2+0x84>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a1e      	ldr	r2, [pc, #120]	; (800d914 <SDMMC_GetCmdResp2+0x88>)
 800d89a:	fba2 2303 	umull	r2, r3, r2, r3
 800d89e:	0a5b      	lsrs	r3, r3, #9
 800d8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d8a8:	4623      	mov	r3, r4
 800d8aa:	1e5c      	subs	r4, r3, #1
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d102      	bne.n	800d8b6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8b4:	e026      	b.n	800d904 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d0f0      	beq.n	800d8a8 <SDMMC_GetCmdResp2+0x1c>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1eb      	bne.n	800d8a8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d4:	f003 0304 	and.w	r3, r3, #4
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d004      	beq.n	800d8e6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2204      	movs	r2, #4
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8e2:	2304      	movs	r3, #4
 800d8e4:	e00e      	b.n	800d904 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d004      	beq.n	800d8fc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e003      	b.n	800d904 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	22c5      	movs	r2, #197	; 0xc5
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bc90      	pop	{r4, r7}
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	20000000 	.word	0x20000000
 800d914:	10624dd3 	.word	0x10624dd3

0800d918 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d918:	b490      	push	{r4, r7}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d920:	4b18      	ldr	r3, [pc, #96]	; (800d984 <SDMMC_GetCmdResp3+0x6c>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a18      	ldr	r2, [pc, #96]	; (800d988 <SDMMC_GetCmdResp3+0x70>)
 800d926:	fba2 2303 	umull	r2, r3, r2, r3
 800d92a:	0a5b      	lsrs	r3, r3, #9
 800d92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d930:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d934:	4623      	mov	r3, r4
 800d936:	1e5c      	subs	r4, r3, #1
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d93c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d940:	e01b      	b.n	800d97a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d946:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0f0      	beq.n	800d934 <SDMMC_GetCmdResp3+0x1c>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1eb      	bne.n	800d934 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b00      	cmp	r3, #0
 800d966:	d004      	beq.n	800d972 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2204      	movs	r2, #4
 800d96c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d96e:	2304      	movs	r3, #4
 800d970:	e003      	b.n	800d97a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	22c5      	movs	r2, #197	; 0xc5
 800d976:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bc90      	pop	{r4, r7}
 800d982:	4770      	bx	lr
 800d984:	20000000 	.word	0x20000000
 800d988:	10624dd3 	.word	0x10624dd3

0800d98c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d98c:	b590      	push	{r4, r7, lr}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	460b      	mov	r3, r1
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d99a:	4b34      	ldr	r3, [pc, #208]	; (800da6c <SDMMC_GetCmdResp6+0xe0>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a34      	ldr	r2, [pc, #208]	; (800da70 <SDMMC_GetCmdResp6+0xe4>)
 800d9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a4:	0a5b      	lsrs	r3, r3, #9
 800d9a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d9ae:	4623      	mov	r3, r4
 800d9b0:	1e5c      	subs	r4, r3, #1
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d102      	bne.n	800d9bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9ba:	e052      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0f0      	beq.n	800d9ae <SDMMC_GetCmdResp6+0x22>
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1eb      	bne.n	800d9ae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9da:	f003 0304 	and.w	r3, r3, #4
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d004      	beq.n	800d9ec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2204      	movs	r2, #4
 800d9e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9e8:	2304      	movs	r3, #4
 800d9ea:	e03a      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d004      	beq.n	800da02 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e02f      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f7ff fbae 	bl	800d164 <SDIO_GetCommandResponse>
 800da08:	4603      	mov	r3, r0
 800da0a:	461a      	mov	r2, r3
 800da0c:	7afb      	ldrb	r3, [r7, #11]
 800da0e:	4293      	cmp	r3, r2
 800da10:	d001      	beq.n	800da16 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da12:	2301      	movs	r3, #1
 800da14:	e025      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	22c5      	movs	r2, #197	; 0xc5
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800da1c:	2100      	movs	r1, #0
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7ff fbad 	bl	800d17e <SDIO_GetResponse>
 800da24:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d106      	bne.n	800da3e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	0c1b      	lsrs	r3, r3, #16
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e011      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da4c:	e009      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da5c:	e001      	b.n	800da62 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da62:	4618      	mov	r0, r3
 800da64:	371c      	adds	r7, #28
 800da66:	46bd      	mov	sp, r7
 800da68:	bd90      	pop	{r4, r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20000000 	.word	0x20000000
 800da70:	10624dd3 	.word	0x10624dd3

0800da74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800da74:	b490      	push	{r4, r7}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da7c:	4b21      	ldr	r3, [pc, #132]	; (800db04 <SDMMC_GetCmdResp7+0x90>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a21      	ldr	r2, [pc, #132]	; (800db08 <SDMMC_GetCmdResp7+0x94>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	0a5b      	lsrs	r3, r3, #9
 800da88:	f241 3288 	movw	r2, #5000	; 0x1388
 800da8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800da90:	4623      	mov	r3, r4
 800da92:	1e5c      	subs	r4, r3, #1
 800da94:	2b00      	cmp	r3, #0
 800da96:	d102      	bne.n	800da9e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da9c:	e02c      	b.n	800daf8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d0f0      	beq.n	800da90 <SDMMC_GetCmdResp7+0x1c>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1eb      	bne.n	800da90 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabc:	f003 0304 	and.w	r3, r3, #4
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d004      	beq.n	800dace <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2204      	movs	r2, #4
 800dac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daca:	2304      	movs	r3, #4
 800dacc:	e014      	b.n	800daf8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d004      	beq.n	800dae4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e009      	b.n	800daf8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2240      	movs	r2, #64	; 0x40
 800daf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800daf6:	2300      	movs	r3, #0
  
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bc90      	pop	{r4, r7}
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	20000000 	.word	0x20000000
 800db08:	10624dd3 	.word	0x10624dd3

0800db0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800db10:	4904      	ldr	r1, [pc, #16]	; (800db24 <MX_FATFS_Init+0x18>)
 800db12:	4805      	ldr	r0, [pc, #20]	; (800db28 <MX_FATFS_Init+0x1c>)
 800db14:	f003 fba0 	bl	8011258 <FATFS_LinkDriver>
 800db18:	4603      	mov	r3, r0
 800db1a:	461a      	mov	r2, r3
 800db1c:	4b03      	ldr	r3, [pc, #12]	; (800db2c <MX_FATFS_Init+0x20>)
 800db1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}
 800db24:	200393c8 	.word	0x200393c8
 800db28:	08017570 	.word	0x08017570
 800db2c:	200393c4 	.word	0x200393c4

0800db30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800db34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800db36:	4618      	mov	r0, r3
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800db4a:	f000 f896 	bl	800dc7a <BSP_SD_IsDetected>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b01      	cmp	r3, #1
 800db52:	d001      	beq.n	800db58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	e012      	b.n	800db7e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800db58:	480b      	ldr	r0, [pc, #44]	; (800db88 <BSP_SD_Init+0x48>)
 800db5a:	f7fb ff9d 	bl	8009a98 <HAL_SD_Init>
 800db5e:	4603      	mov	r3, r0
 800db60:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d109      	bne.n	800db7c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800db68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800db6c:	4806      	ldr	r0, [pc, #24]	; (800db88 <BSP_SD_Init+0x48>)
 800db6e:	f7fc fd47 	bl	800a600 <HAL_SD_ConfigWideBusOperation>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800db7c:	79fb      	ldrb	r3, [r7, #7]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	200391c4 	.word	0x200391c4

0800db8c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800db98:	2300      	movs	r3, #0
 800db9a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	68f9      	ldr	r1, [r7, #12]
 800dba2:	4806      	ldr	r0, [pc, #24]	; (800dbbc <BSP_SD_ReadBlocks_DMA+0x30>)
 800dba4:	f7fc f808 	bl	8009bb8 <HAL_SD_ReadBlocks_DMA>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	200391c4 	.word	0x200391c4

0800dbc0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	68f9      	ldr	r1, [r7, #12]
 800dbd6:	4806      	ldr	r0, [pc, #24]	; (800dbf0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dbd8:	f7fc f8d6 	bl	8009d88 <HAL_SD_WriteBlocks_DMA>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d001      	beq.n	800dbe6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3718      	adds	r7, #24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	200391c4 	.word	0x200391c4

0800dbf4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dbf8:	4805      	ldr	r0, [pc, #20]	; (800dc10 <BSP_SD_GetCardState+0x1c>)
 800dbfa:	f7fc fd7d 	bl	800a6f8 <HAL_SD_GetCardState>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b04      	cmp	r3, #4
 800dc02:	bf14      	ite	ne
 800dc04:	2301      	movne	r3, #1
 800dc06:	2300      	moveq	r3, #0
 800dc08:	b2db      	uxtb	r3, r3
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	200391c4 	.word	0x200391c4

0800dc14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	4803      	ldr	r0, [pc, #12]	; (800dc2c <BSP_SD_GetCardInfo+0x18>)
 800dc20:	f7fc fcc2 	bl	800a5a8 <HAL_SD_GetCardInfo>
}
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	200391c4 	.word	0x200391c4

0800dc30 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800dc38:	f000 f818 	bl	800dc6c <BSP_SD_AbortCallback>
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dc4c:	f000 f9a8 	bl	800dfa0 <BSP_SD_WriteCpltCallback>
}
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dc60:	f000 f9aa 	bl	800dfb8 <BSP_SD_ReadCpltCallback>
}
 800dc64:	bf00      	nop
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	af00      	add	r7, sp, #0

}
 800dc70:	bf00      	nop
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dc80:	2301      	movs	r3, #1
 800dc82:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dc84:	f000 f80c 	bl	800dca0 <BSP_PlatformIsDetected>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	b2db      	uxtb	r3, r3
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
	...

0800dca0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dca6:	2301      	movs	r3, #1
 800dca8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dcaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dcae:	4806      	ldr	r0, [pc, #24]	; (800dcc8 <BSP_PlatformIsDetected+0x28>)
 800dcb0:	f7fa f85e 	bl	8007d70 <HAL_GPIO_ReadPin>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	40020000 	.word	0x40020000

0800dccc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dcd4:	f7f8 fdc2 	bl	800685c <HAL_GetTick>
 800dcd8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dcda:	e006      	b.n	800dcea <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dcdc:	f7ff ff8a 	bl	800dbf4 <BSP_SD_GetCardState>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	e009      	b.n	800dcfe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dcea:	f7f8 fdb7 	bl	800685c <HAL_GetTick>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d8f0      	bhi.n	800dcdc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dcfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
	...

0800dd08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dd12:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <SD_CheckStatus+0x38>)
 800dd14:	2201      	movs	r2, #1
 800dd16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dd18:	f7ff ff6c 	bl	800dbf4 <BSP_SD_GetCardState>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d107      	bne.n	800dd32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dd22:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <SD_CheckStatus+0x38>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	f023 0301 	bic.w	r3, r3, #1
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <SD_CheckStatus+0x38>)
 800dd30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dd32:	4b03      	ldr	r3, [pc, #12]	; (800dd40 <SD_CheckStatus+0x38>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	b2db      	uxtb	r3, r3
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20000009 	.word	0x20000009

0800dd44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dd4e:	f7ff fef7 	bl	800db40 <BSP_SD_Init>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d107      	bne.n	800dd68 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800dd58:	79fb      	ldrb	r3, [r7, #7]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff ffd4 	bl	800dd08 <SD_CheckStatus>
 800dd60:	4603      	mov	r3, r0
 800dd62:	461a      	mov	r2, r3
 800dd64:	4b04      	ldr	r3, [pc, #16]	; (800dd78 <SD_initialize+0x34>)
 800dd66:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dd68:	4b03      	ldr	r3, [pc, #12]	; (800dd78 <SD_initialize+0x34>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	b2db      	uxtb	r3, r3
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	20000009 	.word	0x20000009

0800dd7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff ffbd 	bl	800dd08 <SD_CheckStatus>
 800dd8e:	4603      	mov	r3, r0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60b9      	str	r1, [r7, #8]
 800dda0:	607a      	str	r2, [r7, #4]
 800dda2:	603b      	str	r3, [r7, #0]
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ddac:	f247 5030 	movw	r0, #30000	; 0x7530
 800ddb0:	f7ff ff8c 	bl	800dccc <SD_CheckStatusWithTimeout>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	da01      	bge.n	800ddbe <SD_read+0x26>
  {
    return res;
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	e03b      	b.n	800de36 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ddbe:	683a      	ldr	r2, [r7, #0]
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	68b8      	ldr	r0, [r7, #8]
 800ddc4:	f7ff fee2 	bl	800db8c <BSP_SD_ReadBlocks_DMA>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d132      	bne.n	800de34 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ddce:	4b1c      	ldr	r3, [pc, #112]	; (800de40 <SD_read+0xa8>)
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ddd4:	f7f8 fd42 	bl	800685c <HAL_GetTick>
 800ddd8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ddda:	bf00      	nop
 800dddc:	4b18      	ldr	r3, [pc, #96]	; (800de40 <SD_read+0xa8>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d108      	bne.n	800ddf6 <SD_read+0x5e>
 800dde4:	f7f8 fd3a 	bl	800685c <HAL_GetTick>
 800dde8:	4602      	mov	r2, r0
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	1ad3      	subs	r3, r2, r3
 800ddee:	f247 522f 	movw	r2, #29999	; 0x752f
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d9f2      	bls.n	800dddc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ddf6:	4b12      	ldr	r3, [pc, #72]	; (800de40 <SD_read+0xa8>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d102      	bne.n	800de04 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	75fb      	strb	r3, [r7, #23]
 800de02:	e017      	b.n	800de34 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800de04:	4b0e      	ldr	r3, [pc, #56]	; (800de40 <SD_read+0xa8>)
 800de06:	2200      	movs	r2, #0
 800de08:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800de0a:	f7f8 fd27 	bl	800685c <HAL_GetTick>
 800de0e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de10:	e007      	b.n	800de22 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de12:	f7ff feef 	bl	800dbf4 <BSP_SD_GetCardState>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <SD_read+0x8a>
          {
            res = RES_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800de20:	e008      	b.n	800de34 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800de22:	f7f8 fd1b 	bl	800685c <HAL_GetTick>
 800de26:	4602      	mov	r2, r0
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	f247 522f 	movw	r2, #29999	; 0x752f
 800de30:	4293      	cmp	r3, r2
 800de32:	d9ee      	bls.n	800de12 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800de34:	7dfb      	ldrb	r3, [r7, #23]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	20036a60 	.word	0x20036a60

0800de44 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	607a      	str	r2, [r7, #4]
 800de4e:	603b      	str	r3, [r7, #0]
 800de50:	4603      	mov	r3, r0
 800de52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de54:	2301      	movs	r3, #1
 800de56:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800de58:	4b24      	ldr	r3, [pc, #144]	; (800deec <SD_write+0xa8>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de5e:	f247 5030 	movw	r0, #30000	; 0x7530
 800de62:	f7ff ff33 	bl	800dccc <SD_CheckStatusWithTimeout>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	da01      	bge.n	800de70 <SD_write+0x2c>
  {
    return res;
 800de6c:	7dfb      	ldrb	r3, [r7, #23]
 800de6e:	e038      	b.n	800dee2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	68b8      	ldr	r0, [r7, #8]
 800de76:	f7ff fea3 	bl	800dbc0 <BSP_SD_WriteBlocks_DMA>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d12f      	bne.n	800dee0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800de80:	f7f8 fcec 	bl	800685c <HAL_GetTick>
 800de84:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de86:	bf00      	nop
 800de88:	4b18      	ldr	r3, [pc, #96]	; (800deec <SD_write+0xa8>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d108      	bne.n	800dea2 <SD_write+0x5e>
 800de90:	f7f8 fce4 	bl	800685c <HAL_GetTick>
 800de94:	4602      	mov	r2, r0
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	f247 522f 	movw	r2, #29999	; 0x752f
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d9f2      	bls.n	800de88 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800dea2:	4b12      	ldr	r3, [pc, #72]	; (800deec <SD_write+0xa8>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d102      	bne.n	800deb0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	75fb      	strb	r3, [r7, #23]
 800deae:	e017      	b.n	800dee0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800deb0:	4b0e      	ldr	r3, [pc, #56]	; (800deec <SD_write+0xa8>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800deb6:	f7f8 fcd1 	bl	800685c <HAL_GetTick>
 800deba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800debc:	e007      	b.n	800dece <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800debe:	f7ff fe99 	bl	800dbf4 <BSP_SD_GetCardState>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <SD_write+0x8a>
          {
            res = RES_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	75fb      	strb	r3, [r7, #23]
            break;
 800decc:	e008      	b.n	800dee0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dece:	f7f8 fcc5 	bl	800685c <HAL_GetTick>
 800ded2:	4602      	mov	r2, r0
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	f247 522f 	movw	r2, #29999	; 0x752f
 800dedc:	4293      	cmp	r3, r2
 800dede:	d9ee      	bls.n	800debe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20036a5c 	.word	0x20036a5c

0800def0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08c      	sub	sp, #48	; 0x30
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	603a      	str	r2, [r7, #0]
 800defa:	71fb      	strb	r3, [r7, #7]
 800defc:	460b      	mov	r3, r1
 800defe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800df00:	2301      	movs	r3, #1
 800df02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800df06:	4b25      	ldr	r3, [pc, #148]	; (800df9c <SD_ioctl+0xac>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <SD_ioctl+0x28>
 800df14:	2303      	movs	r3, #3
 800df16:	e03c      	b.n	800df92 <SD_ioctl+0xa2>

  switch (cmd)
 800df18:	79bb      	ldrb	r3, [r7, #6]
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d834      	bhi.n	800df88 <SD_ioctl+0x98>
 800df1e:	a201      	add	r2, pc, #4	; (adr r2, 800df24 <SD_ioctl+0x34>)
 800df20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df24:	0800df35 	.word	0x0800df35
 800df28:	0800df3d 	.word	0x0800df3d
 800df2c:	0800df55 	.word	0x0800df55
 800df30:	0800df6f 	.word	0x0800df6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df3a:	e028      	b.n	800df8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800df3c:	f107 030c 	add.w	r3, r7, #12
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff fe67 	bl	800dc14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800df46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df52:	e01c      	b.n	800df8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df54:	f107 030c 	add.w	r3, r7, #12
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff fe5b 	bl	800dc14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	b29a      	uxth	r2, r3
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df6c:	e00f      	b.n	800df8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800df6e:	f107 030c 	add.w	r3, r7, #12
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fe4e 	bl	800dc14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	0a5a      	lsrs	r2, r3, #9
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800df86:	e002      	b.n	800df8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800df88:	2304      	movs	r3, #4
 800df8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800df8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df92:	4618      	mov	r0, r3
 800df94:	3730      	adds	r7, #48	; 0x30
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20000009 	.word	0x20000009

0800dfa0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800dfa4:	4b03      	ldr	r3, [pc, #12]	; (800dfb4 <BSP_SD_WriteCpltCallback+0x14>)
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	601a      	str	r2, [r3, #0]
}
 800dfaa:	bf00      	nop
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	20036a5c 	.word	0x20036a5c

0800dfb8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800dfbc:	4b03      	ldr	r3, [pc, #12]	; (800dfcc <BSP_SD_ReadCpltCallback+0x14>)
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
}
 800dfc2:	bf00      	nop
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	20036a60 	.word	0x20036a60

0800dfd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	4a08      	ldr	r2, [pc, #32]	; (800e000 <disk_status+0x30>)
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	79fa      	ldrb	r2, [r7, #7]
 800dfe8:	4905      	ldr	r1, [pc, #20]	; (800e000 <disk_status+0x30>)
 800dfea:	440a      	add	r2, r1
 800dfec:	7a12      	ldrb	r2, [r2, #8]
 800dfee:	4610      	mov	r0, r2
 800dff0:	4798      	blx	r3
 800dff2:	4603      	mov	r3, r0
 800dff4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20036a8c 	.word	0x20036a8c

0800e004 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e012:	79fb      	ldrb	r3, [r7, #7]
 800e014:	4a0d      	ldr	r2, [pc, #52]	; (800e04c <disk_initialize+0x48>)
 800e016:	5cd3      	ldrb	r3, [r2, r3]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d111      	bne.n	800e040 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e01c:	79fb      	ldrb	r3, [r7, #7]
 800e01e:	4a0b      	ldr	r2, [pc, #44]	; (800e04c <disk_initialize+0x48>)
 800e020:	2101      	movs	r1, #1
 800e022:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	4a09      	ldr	r2, [pc, #36]	; (800e04c <disk_initialize+0x48>)
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	79fa      	ldrb	r2, [r7, #7]
 800e032:	4906      	ldr	r1, [pc, #24]	; (800e04c <disk_initialize+0x48>)
 800e034:	440a      	add	r2, r1
 800e036:	7a12      	ldrb	r2, [r2, #8]
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
 800e03c:	4603      	mov	r3, r0
 800e03e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e040:	7bfb      	ldrb	r3, [r7, #15]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	20036a8c 	.word	0x20036a8c

0800e050 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e050:	b590      	push	{r4, r7, lr}
 800e052:	b087      	sub	sp, #28
 800e054:	af00      	add	r7, sp, #0
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	4a0a      	ldr	r2, [pc, #40]	; (800e08c <disk_read+0x3c>)
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	689c      	ldr	r4, [r3, #8]
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	4a07      	ldr	r2, [pc, #28]	; (800e08c <disk_read+0x3c>)
 800e070:	4413      	add	r3, r2
 800e072:	7a18      	ldrb	r0, [r3, #8]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	68b9      	ldr	r1, [r7, #8]
 800e07a:	47a0      	blx	r4
 800e07c:	4603      	mov	r3, r0
 800e07e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e080:	7dfb      	ldrb	r3, [r7, #23]
}
 800e082:	4618      	mov	r0, r3
 800e084:	371c      	adds	r7, #28
 800e086:	46bd      	mov	sp, r7
 800e088:	bd90      	pop	{r4, r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20036a8c 	.word	0x20036a8c

0800e090 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e090:	b590      	push	{r4, r7, lr}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60b9      	str	r1, [r7, #8]
 800e098:	607a      	str	r2, [r7, #4]
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	4603      	mov	r3, r0
 800e09e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
 800e0a2:	4a0a      	ldr	r2, [pc, #40]	; (800e0cc <disk_write+0x3c>)
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	68dc      	ldr	r4, [r3, #12]
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
 800e0ae:	4a07      	ldr	r2, [pc, #28]	; (800e0cc <disk_write+0x3c>)
 800e0b0:	4413      	add	r3, r2
 800e0b2:	7a18      	ldrb	r0, [r3, #8]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	68b9      	ldr	r1, [r7, #8]
 800e0ba:	47a0      	blx	r4
 800e0bc:	4603      	mov	r3, r0
 800e0be:	75fb      	strb	r3, [r7, #23]
  return res;
 800e0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	371c      	adds	r7, #28
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd90      	pop	{r4, r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20036a8c 	.word	0x20036a8c

0800e0d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	603a      	str	r2, [r7, #0]
 800e0da:	71fb      	strb	r3, [r7, #7]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e0e0:	79fb      	ldrb	r3, [r7, #7]
 800e0e2:	4a09      	ldr	r2, [pc, #36]	; (800e108 <disk_ioctl+0x38>)
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	79fa      	ldrb	r2, [r7, #7]
 800e0ee:	4906      	ldr	r1, [pc, #24]	; (800e108 <disk_ioctl+0x38>)
 800e0f0:	440a      	add	r2, r1
 800e0f2:	7a10      	ldrb	r0, [r2, #8]
 800e0f4:	79b9      	ldrb	r1, [r7, #6]
 800e0f6:	683a      	ldr	r2, [r7, #0]
 800e0f8:	4798      	blx	r3
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	20036a8c 	.word	0x20036a8c

0800e10c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3301      	adds	r3, #1
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e11c:	89fb      	ldrh	r3, [r7, #14]
 800e11e:	021b      	lsls	r3, r3, #8
 800e120:	b21a      	sxth	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	b21b      	sxth	r3, r3
 800e128:	4313      	orrs	r3, r2
 800e12a:	b21b      	sxth	r3, r3
 800e12c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e12e:	89fb      	ldrh	r3, [r7, #14]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3303      	adds	r3, #3
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	021b      	lsls	r3, r3, #8
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	3202      	adds	r2, #2
 800e154:	7812      	ldrb	r2, [r2, #0]
 800e156:	4313      	orrs	r3, r2
 800e158:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	021b      	lsls	r3, r3, #8
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	3201      	adds	r2, #1
 800e162:	7812      	ldrb	r2, [r2, #0]
 800e164:	4313      	orrs	r3, r2
 800e166:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	021b      	lsls	r3, r3, #8
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	7812      	ldrb	r2, [r2, #0]
 800e170:	4313      	orrs	r3, r2
 800e172:	60fb      	str	r3, [r7, #12]
	return rv;
 800e174:	68fb      	ldr	r3, [r7, #12]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e182:	b480      	push	{r7}
 800e184:	b083      	sub	sp, #12
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	460b      	mov	r3, r1
 800e18c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	607a      	str	r2, [r7, #4]
 800e194:	887a      	ldrh	r2, [r7, #2]
 800e196:	b2d2      	uxtb	r2, r2
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	887b      	ldrh	r3, [r7, #2]
 800e19c:	0a1b      	lsrs	r3, r3, #8
 800e19e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	607a      	str	r2, [r7, #4]
 800e1a6:	887a      	ldrh	r2, [r7, #2]
 800e1a8:	b2d2      	uxtb	r2, r2
 800e1aa:	701a      	strb	r2, [r3, #0]
}
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	b2d2      	uxtb	r2, r2
 800e1cc:	701a      	strb	r2, [r3, #0]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	0a1b      	lsrs	r3, r3, #8
 800e1d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	1c5a      	adds	r2, r3, #1
 800e1d8:	607a      	str	r2, [r7, #4]
 800e1da:	683a      	ldr	r2, [r7, #0]
 800e1dc:	b2d2      	uxtb	r2, r2
 800e1de:	701a      	strb	r2, [r3, #0]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	0a1b      	lsrs	r3, r3, #8
 800e1e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	1c5a      	adds	r2, r3, #1
 800e1ea:	607a      	str	r2, [r7, #4]
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	0a1b      	lsrs	r3, r3, #8
 800e1f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	607a      	str	r2, [r7, #4]
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	b2d2      	uxtb	r2, r2
 800e202:	701a      	strb	r2, [r3, #0]
}
 800e204:	bf00      	nop
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e210:	b480      	push	{r7}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00d      	beq.n	800e246 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	1c53      	adds	r3, r2, #1
 800e22e:	613b      	str	r3, [r7, #16]
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	1c59      	adds	r1, r3, #1
 800e234:	6179      	str	r1, [r7, #20]
 800e236:	7812      	ldrb	r2, [r2, #0]
 800e238:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	3b01      	subs	r3, #1
 800e23e:	607b      	str	r3, [r7, #4]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1f1      	bne.n	800e22a <mem_cpy+0x1a>
	}
}
 800e246:	bf00      	nop
 800e248:	371c      	adds	r7, #28
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e252:	b480      	push	{r7}
 800e254:	b087      	sub	sp, #28
 800e256:	af00      	add	r7, sp, #0
 800e258:	60f8      	str	r0, [r7, #12]
 800e25a:	60b9      	str	r1, [r7, #8]
 800e25c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	617a      	str	r2, [r7, #20]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	b2d2      	uxtb	r2, r2
 800e26c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3b01      	subs	r3, #1
 800e272:	607b      	str	r3, [r7, #4]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1f3      	bne.n	800e262 <mem_set+0x10>
}
 800e27a:	bf00      	nop
 800e27c:	371c      	adds	r7, #28
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e286:	b480      	push	{r7}
 800e288:	b089      	sub	sp, #36	; 0x24
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	60f8      	str	r0, [r7, #12]
 800e28e:	60b9      	str	r1, [r7, #8]
 800e290:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	61fb      	str	r3, [r7, #28]
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	1c5a      	adds	r2, r3, #1
 800e2a2:	61fa      	str	r2, [r7, #28]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	61ba      	str	r2, [r7, #24]
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	1acb      	subs	r3, r1, r3
 800e2b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	607b      	str	r3, [r7, #4]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <mem_cmp+0x40>
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0eb      	beq.n	800e29e <mem_cmp+0x18>

	return r;
 800e2c6:	697b      	ldr	r3, [r7, #20]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3724      	adds	r7, #36	; 0x24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e2de:	e002      	b.n	800e2e6 <chk_chr+0x12>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	607b      	str	r3, [r7, #4]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d005      	beq.n	800e2fa <chk_chr+0x26>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d1f2      	bne.n	800e2e0 <chk_chr+0xc>
	return *str;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
	...

0800e30c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e316:	2300      	movs	r3, #0
 800e318:	60bb      	str	r3, [r7, #8]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	60fb      	str	r3, [r7, #12]
 800e31e:	e029      	b.n	800e374 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e320:	4a27      	ldr	r2, [pc, #156]	; (800e3c0 <chk_lock+0xb4>)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	011b      	lsls	r3, r3, #4
 800e326:	4413      	add	r3, r2
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d01d      	beq.n	800e36a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e32e:	4a24      	ldr	r2, [pc, #144]	; (800e3c0 <chk_lock+0xb4>)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	011b      	lsls	r3, r3, #4
 800e334:	4413      	add	r3, r2
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d116      	bne.n	800e36e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e340:	4a1f      	ldr	r2, [pc, #124]	; (800e3c0 <chk_lock+0xb4>)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	011b      	lsls	r3, r3, #4
 800e346:	4413      	add	r3, r2
 800e348:	3304      	adds	r3, #4
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e350:	429a      	cmp	r2, r3
 800e352:	d10c      	bne.n	800e36e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e354:	4a1a      	ldr	r2, [pc, #104]	; (800e3c0 <chk_lock+0xb4>)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	011b      	lsls	r3, r3, #4
 800e35a:	4413      	add	r3, r2
 800e35c:	3308      	adds	r3, #8
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e364:	429a      	cmp	r2, r3
 800e366:	d102      	bne.n	800e36e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e368:	e007      	b.n	800e37a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e36a:	2301      	movs	r3, #1
 800e36c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3301      	adds	r3, #1
 800e372:	60fb      	str	r3, [r7, #12]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2b01      	cmp	r3, #1
 800e378:	d9d2      	bls.n	800e320 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d109      	bne.n	800e394 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d102      	bne.n	800e38c <chk_lock+0x80>
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b02      	cmp	r3, #2
 800e38a:	d101      	bne.n	800e390 <chk_lock+0x84>
 800e38c:	2300      	movs	r3, #0
 800e38e:	e010      	b.n	800e3b2 <chk_lock+0xa6>
 800e390:	2312      	movs	r3, #18
 800e392:	e00e      	b.n	800e3b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d108      	bne.n	800e3ac <chk_lock+0xa0>
 800e39a:	4a09      	ldr	r2, [pc, #36]	; (800e3c0 <chk_lock+0xb4>)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	011b      	lsls	r3, r3, #4
 800e3a0:	4413      	add	r3, r2
 800e3a2:	330c      	adds	r3, #12
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3aa:	d101      	bne.n	800e3b0 <chk_lock+0xa4>
 800e3ac:	2310      	movs	r3, #16
 800e3ae:	e000      	b.n	800e3b2 <chk_lock+0xa6>
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	20036a6c 	.word	0x20036a6c

0800e3c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
 800e3ce:	e002      	b.n	800e3d6 <enq_lock+0x12>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	607b      	str	r3, [r7, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d806      	bhi.n	800e3ea <enq_lock+0x26>
 800e3dc:	4a09      	ldr	r2, [pc, #36]	; (800e404 <enq_lock+0x40>)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	011b      	lsls	r3, r3, #4
 800e3e2:	4413      	add	r3, r2
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1f2      	bne.n	800e3d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	bf14      	ite	ne
 800e3f0:	2301      	movne	r3, #1
 800e3f2:	2300      	moveq	r3, #0
 800e3f4:	b2db      	uxtb	r3, r3
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	20036a6c 	.word	0x20036a6c

0800e408 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e412:	2300      	movs	r3, #0
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	e01f      	b.n	800e458 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e418:	4a41      	ldr	r2, [pc, #260]	; (800e520 <inc_lock+0x118>)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	011b      	lsls	r3, r3, #4
 800e41e:	4413      	add	r3, r2
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d113      	bne.n	800e452 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e42a:	4a3d      	ldr	r2, [pc, #244]	; (800e520 <inc_lock+0x118>)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	011b      	lsls	r3, r3, #4
 800e430:	4413      	add	r3, r2
 800e432:	3304      	adds	r3, #4
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d109      	bne.n	800e452 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e43e:	4a38      	ldr	r2, [pc, #224]	; (800e520 <inc_lock+0x118>)
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	011b      	lsls	r3, r3, #4
 800e444:	4413      	add	r3, r2
 800e446:	3308      	adds	r3, #8
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e44e:	429a      	cmp	r2, r3
 800e450:	d006      	beq.n	800e460 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3301      	adds	r3, #1
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d9dc      	bls.n	800e418 <inc_lock+0x10>
 800e45e:	e000      	b.n	800e462 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e460:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b02      	cmp	r3, #2
 800e466:	d132      	bne.n	800e4ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	e002      	b.n	800e474 <inc_lock+0x6c>
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3301      	adds	r3, #1
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d806      	bhi.n	800e488 <inc_lock+0x80>
 800e47a:	4a29      	ldr	r2, [pc, #164]	; (800e520 <inc_lock+0x118>)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	011b      	lsls	r3, r3, #4
 800e480:	4413      	add	r3, r2
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1f2      	bne.n	800e46e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d101      	bne.n	800e492 <inc_lock+0x8a>
 800e48e:	2300      	movs	r3, #0
 800e490:	e040      	b.n	800e514 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	4922      	ldr	r1, [pc, #136]	; (800e520 <inc_lock+0x118>)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	011b      	lsls	r3, r3, #4
 800e49c:	440b      	add	r3, r1
 800e49e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	689a      	ldr	r2, [r3, #8]
 800e4a4:	491e      	ldr	r1, [pc, #120]	; (800e520 <inc_lock+0x118>)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	011b      	lsls	r3, r3, #4
 800e4aa:	440b      	add	r3, r1
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	695a      	ldr	r2, [r3, #20]
 800e4b4:	491a      	ldr	r1, [pc, #104]	; (800e520 <inc_lock+0x118>)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	011b      	lsls	r3, r3, #4
 800e4ba:	440b      	add	r3, r1
 800e4bc:	3308      	adds	r3, #8
 800e4be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e4c0:	4a17      	ldr	r2, [pc, #92]	; (800e520 <inc_lock+0x118>)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	011b      	lsls	r3, r3, #4
 800e4c6:	4413      	add	r3, r2
 800e4c8:	330c      	adds	r3, #12
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d009      	beq.n	800e4e8 <inc_lock+0xe0>
 800e4d4:	4a12      	ldr	r2, [pc, #72]	; (800e520 <inc_lock+0x118>)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	011b      	lsls	r3, r3, #4
 800e4da:	4413      	add	r3, r2
 800e4dc:	330c      	adds	r3, #12
 800e4de:	881b      	ldrh	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <inc_lock+0xe0>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	e015      	b.n	800e514 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d108      	bne.n	800e500 <inc_lock+0xf8>
 800e4ee:	4a0c      	ldr	r2, [pc, #48]	; (800e520 <inc_lock+0x118>)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	4413      	add	r3, r2
 800e4f6:	330c      	adds	r3, #12
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	e001      	b.n	800e504 <inc_lock+0xfc>
 800e500:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e504:	4906      	ldr	r1, [pc, #24]	; (800e520 <inc_lock+0x118>)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	011b      	lsls	r3, r3, #4
 800e50a:	440b      	add	r3, r1
 800e50c:	330c      	adds	r3, #12
 800e50e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3301      	adds	r3, #1
}
 800e514:	4618      	mov	r0, r3
 800e516:	3714      	adds	r7, #20
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	20036a6c 	.word	0x20036a6c

0800e524 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e524:	b480      	push	{r7}
 800e526:	b085      	sub	sp, #20
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	3b01      	subs	r3, #1
 800e530:	607b      	str	r3, [r7, #4]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d825      	bhi.n	800e584 <dec_lock+0x60>
		n = Files[i].ctr;
 800e538:	4a17      	ldr	r2, [pc, #92]	; (800e598 <dec_lock+0x74>)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	011b      	lsls	r3, r3, #4
 800e53e:	4413      	add	r3, r2
 800e540:	330c      	adds	r3, #12
 800e542:	881b      	ldrh	r3, [r3, #0]
 800e544:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e546:	89fb      	ldrh	r3, [r7, #14]
 800e548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e54c:	d101      	bne.n	800e552 <dec_lock+0x2e>
 800e54e:	2300      	movs	r3, #0
 800e550:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e552:	89fb      	ldrh	r3, [r7, #14]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d002      	beq.n	800e55e <dec_lock+0x3a>
 800e558:	89fb      	ldrh	r3, [r7, #14]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e55e:	4a0e      	ldr	r2, [pc, #56]	; (800e598 <dec_lock+0x74>)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	011b      	lsls	r3, r3, #4
 800e564:	4413      	add	r3, r2
 800e566:	330c      	adds	r3, #12
 800e568:	89fa      	ldrh	r2, [r7, #14]
 800e56a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e56c:	89fb      	ldrh	r3, [r7, #14]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d105      	bne.n	800e57e <dec_lock+0x5a>
 800e572:	4a09      	ldr	r2, [pc, #36]	; (800e598 <dec_lock+0x74>)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	011b      	lsls	r3, r3, #4
 800e578:	4413      	add	r3, r2
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	737b      	strb	r3, [r7, #13]
 800e582:	e001      	b.n	800e588 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e584:	2302      	movs	r3, #2
 800e586:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e588:	7b7b      	ldrb	r3, [r7, #13]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	20036a6c 	.word	0x20036a6c

0800e59c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	e010      	b.n	800e5cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e5aa:	4a0d      	ldr	r2, [pc, #52]	; (800e5e0 <clear_lock+0x44>)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	011b      	lsls	r3, r3, #4
 800e5b0:	4413      	add	r3, r2
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d105      	bne.n	800e5c6 <clear_lock+0x2a>
 800e5ba:	4a09      	ldr	r2, [pc, #36]	; (800e5e0 <clear_lock+0x44>)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	011b      	lsls	r3, r3, #4
 800e5c0:	4413      	add	r3, r2
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d9eb      	bls.n	800e5aa <clear_lock+0xe>
	}
}
 800e5d2:	bf00      	nop
 800e5d4:	3714      	adds	r7, #20
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	20036a6c 	.word	0x20036a6c

0800e5e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	78db      	ldrb	r3, [r3, #3]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d034      	beq.n	800e662 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	7858      	ldrb	r0, [r3, #1]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e608:	2301      	movs	r3, #1
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	f7ff fd40 	bl	800e090 <disk_write>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e616:	2301      	movs	r3, #1
 800e618:	73fb      	strb	r3, [r7, #15]
 800e61a:	e022      	b.n	800e662 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e626:	697a      	ldr	r2, [r7, #20]
 800e628:	1ad2      	subs	r2, r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d217      	bcs.n	800e662 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	789b      	ldrb	r3, [r3, #2]
 800e636:	613b      	str	r3, [r7, #16]
 800e638:	e010      	b.n	800e65c <sync_window+0x78>
					wsect += fs->fsize;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	4413      	add	r3, r2
 800e642:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	7858      	ldrb	r0, [r3, #1]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e64e:	2301      	movs	r3, #1
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	f7ff fd1d 	bl	800e090 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	3b01      	subs	r3, #1
 800e65a:	613b      	str	r3, [r7, #16]
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d8eb      	bhi.n	800e63a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e662:	7bfb      	ldrb	r3, [r7, #15]
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e676:	2300      	movs	r3, #0
 800e678:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	429a      	cmp	r2, r3
 800e682:	d01b      	beq.n	800e6bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff ffad 	bl	800e5e4 <sync_window>
 800e68a:	4603      	mov	r3, r0
 800e68c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e68e:	7bfb      	ldrb	r3, [r7, #15]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d113      	bne.n	800e6bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7858      	ldrb	r0, [r3, #1]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e69e:	2301      	movs	r3, #1
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	f7ff fcd5 	bl	800e050 <disk_read>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d004      	beq.n	800e6b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	683a      	ldr	r2, [r7, #0]
 800e6ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7ff ff87 	bl	800e5e4 <sync_window>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e6da:	7bfb      	ldrb	r3, [r7, #15]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d159      	bne.n	800e794 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d149      	bne.n	800e77c <sync_fs+0xb4>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	791b      	ldrb	r3, [r3, #4]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d145      	bne.n	800e77c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	899b      	ldrh	r3, [r3, #12]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	f7ff fda8 	bl	800e252 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	3338      	adds	r3, #56	; 0x38
 800e706:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e70a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff fd37 	bl	800e182 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3338      	adds	r3, #56	; 0x38
 800e718:	4921      	ldr	r1, [pc, #132]	; (800e7a0 <sync_fs+0xd8>)
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff fd4c 	bl	800e1b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	3338      	adds	r3, #56	; 0x38
 800e724:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e728:	491e      	ldr	r1, [pc, #120]	; (800e7a4 <sync_fs+0xdc>)
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7ff fd44 	bl	800e1b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3338      	adds	r3, #56	; 0x38
 800e734:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	4619      	mov	r1, r3
 800e73e:	4610      	mov	r0, r2
 800e740:	f7ff fd3a 	bl	800e1b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3338      	adds	r3, #56	; 0x38
 800e748:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	691b      	ldr	r3, [r3, #16]
 800e750:	4619      	mov	r1, r3
 800e752:	4610      	mov	r0, r2
 800e754:	f7ff fd30 	bl	800e1b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75c:	1c5a      	adds	r2, r3, #1
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7858      	ldrb	r0, [r3, #1]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e770:	2301      	movs	r3, #1
 800e772:	f7ff fc8d 	bl	800e090 <disk_write>
			fs->fsi_flag = 0;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	785b      	ldrb	r3, [r3, #1]
 800e780:	2200      	movs	r2, #0
 800e782:	2100      	movs	r1, #0
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff fca3 	bl	800e0d0 <disk_ioctl>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d001      	beq.n	800e794 <sync_fs+0xcc>
 800e790:	2301      	movs	r3, #1
 800e792:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e794:	7bfb      	ldrb	r3, [r7, #15]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	41615252 	.word	0x41615252
 800e7a4:	61417272 	.word	0x61417272

0800e7a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	3b02      	subs	r3, #2
 800e7b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	3b02      	subs	r3, #2
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d301      	bcc.n	800e7c8 <clust2sect+0x20>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	e008      	b.n	800e7da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	895b      	ldrh	r3, [r3, #10]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	fb03 f202 	mul.w	r2, r3, r2
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d8:	4413      	add	r3, r2
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b086      	sub	sp, #24
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d904      	bls.n	800e806 <get_fat+0x20>
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d302      	bcc.n	800e80c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e806:	2301      	movs	r3, #1
 800e808:	617b      	str	r3, [r7, #20]
 800e80a:	e0b7      	b.n	800e97c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e80c:	f04f 33ff 	mov.w	r3, #4294967295
 800e810:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	2b02      	cmp	r3, #2
 800e818:	d05a      	beq.n	800e8d0 <get_fat+0xea>
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d07d      	beq.n	800e91a <get_fat+0x134>
 800e81e:	2b01      	cmp	r3, #1
 800e820:	f040 80a2 	bne.w	800e968 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	085b      	lsrs	r3, r3, #1
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	899b      	ldrh	r3, [r3, #12]
 800e83a:	4619      	mov	r1, r3
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e842:	4413      	add	r3, r2
 800e844:	4619      	mov	r1, r3
 800e846:	6938      	ldr	r0, [r7, #16]
 800e848:	f7ff ff10 	bl	800e66c <move_window>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f040 808d 	bne.w	800e96e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	60fa      	str	r2, [r7, #12]
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	8992      	ldrh	r2, [r2, #12]
 800e85e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e862:	fb02 f201 	mul.w	r2, r2, r1
 800e866:	1a9b      	subs	r3, r3, r2
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	4413      	add	r3, r2
 800e86c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e870:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	899b      	ldrh	r3, [r3, #12]
 800e87a:	4619      	mov	r1, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e882:	4413      	add	r3, r2
 800e884:	4619      	mov	r1, r3
 800e886:	6938      	ldr	r0, [r7, #16]
 800e888:	f7ff fef0 	bl	800e66c <move_window>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d16f      	bne.n	800e972 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	899b      	ldrh	r3, [r3, #12]
 800e896:	461a      	mov	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e89e:	fb02 f201 	mul.w	r2, r2, r1
 800e8a2:	1a9b      	subs	r3, r3, r2
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e8ac:	021b      	lsls	r3, r3, #8
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	f003 0301 	and.w	r3, r3, #1
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <get_fat+0xe0>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	091b      	lsrs	r3, r3, #4
 800e8c4:	e002      	b.n	800e8cc <get_fat+0xe6>
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8cc:	617b      	str	r3, [r7, #20]
			break;
 800e8ce:	e055      	b.n	800e97c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	899b      	ldrh	r3, [r3, #12]
 800e8d8:	085b      	lsrs	r3, r3, #1
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	4619      	mov	r1, r3
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8e4:	4413      	add	r3, r2
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6938      	ldr	r0, [r7, #16]
 800e8ea:	f7ff febf 	bl	800e66c <move_window>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d140      	bne.n	800e976 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	693a      	ldr	r2, [r7, #16]
 800e900:	8992      	ldrh	r2, [r2, #12]
 800e902:	fbb3 f0f2 	udiv	r0, r3, r2
 800e906:	fb02 f200 	mul.w	r2, r2, r0
 800e90a:	1a9b      	subs	r3, r3, r2
 800e90c:	440b      	add	r3, r1
 800e90e:	4618      	mov	r0, r3
 800e910:	f7ff fbfc 	bl	800e10c <ld_word>
 800e914:	4603      	mov	r3, r0
 800e916:	617b      	str	r3, [r7, #20]
			break;
 800e918:	e030      	b.n	800e97c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	899b      	ldrh	r3, [r3, #12]
 800e922:	089b      	lsrs	r3, r3, #2
 800e924:	b29b      	uxth	r3, r3
 800e926:	4619      	mov	r1, r3
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e92e:	4413      	add	r3, r2
 800e930:	4619      	mov	r1, r3
 800e932:	6938      	ldr	r0, [r7, #16]
 800e934:	f7ff fe9a 	bl	800e66c <move_window>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d11d      	bne.n	800e97a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	8992      	ldrh	r2, [r2, #12]
 800e94c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e950:	fb02 f200 	mul.w	r2, r2, r0
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	440b      	add	r3, r1
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff fbef 	bl	800e13c <ld_dword>
 800e95e:	4603      	mov	r3, r0
 800e960:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e964:	617b      	str	r3, [r7, #20]
			break;
 800e966:	e009      	b.n	800e97c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e968:	2301      	movs	r3, #1
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	e006      	b.n	800e97c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e96e:	bf00      	nop
 800e970:	e004      	b.n	800e97c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e972:	bf00      	nop
 800e974:	e002      	b.n	800e97c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e976:	bf00      	nop
 800e978:	e000      	b.n	800e97c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e97a:	bf00      	nop
		}
	}

	return val;
 800e97c:	697b      	ldr	r3, [r7, #20]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e986:	b590      	push	{r4, r7, lr}
 800e988:	b089      	sub	sp, #36	; 0x24
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e992:	2302      	movs	r3, #2
 800e994:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	f240 8106 	bls.w	800ebaa <put_fat+0x224>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	69db      	ldr	r3, [r3, #28]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	f080 8100 	bcs.w	800ebaa <put_fat+0x224>
		switch (fs->fs_type) {
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	f000 8088 	beq.w	800eac4 <put_fat+0x13e>
 800e9b4:	2b03      	cmp	r3, #3
 800e9b6:	f000 80b0 	beq.w	800eb1a <put_fat+0x194>
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	f040 80f5 	bne.w	800ebaa <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	61bb      	str	r3, [r7, #24]
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	085b      	lsrs	r3, r3, #1
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	899b      	ldrh	r3, [r3, #12]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9de:	4413      	add	r3, r2
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f7ff fe42 	bl	800e66c <move_window>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9ec:	7ffb      	ldrb	r3, [r7, #31]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f040 80d4 	bne.w	800eb9c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	61ba      	str	r2, [r7, #24]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	8992      	ldrh	r2, [r2, #12]
 800ea04:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea08:	fb02 f200 	mul.w	r2, r2, r0
 800ea0c:	1a9b      	subs	r3, r3, r2
 800ea0e:	440b      	add	r3, r1
 800ea10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	f003 0301 	and.w	r3, r3, #1
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00d      	beq.n	800ea38 <put_fat+0xb2>
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	b25b      	sxtb	r3, r3
 800ea22:	f003 030f 	and.w	r3, r3, #15
 800ea26:	b25a      	sxtb	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	011b      	lsls	r3, r3, #4
 800ea2e:	b25b      	sxtb	r3, r3
 800ea30:	4313      	orrs	r3, r2
 800ea32:	b25b      	sxtb	r3, r3
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	e001      	b.n	800ea3c <put_fat+0xb6>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2201      	movs	r2, #1
 800ea44:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea56:	4413      	add	r3, r2
 800ea58:	4619      	mov	r1, r3
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f7ff fe06 	bl	800e66c <move_window>
 800ea60:	4603      	mov	r3, r0
 800ea62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea64:	7ffb      	ldrb	r3, [r7, #31]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f040 809a 	bne.w	800eba0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	899b      	ldrh	r3, [r3, #12]
 800ea76:	461a      	mov	r2, r3
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea7e:	fb02 f200 	mul.w	r2, r2, r0
 800ea82:	1a9b      	subs	r3, r3, r2
 800ea84:	440b      	add	r3, r1
 800ea86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	f003 0301 	and.w	r3, r3, #1
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <put_fat+0x114>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	091b      	lsrs	r3, r3, #4
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	e00e      	b.n	800eab8 <put_fat+0x132>
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	b25b      	sxtb	r3, r3
 800eaa0:	f023 030f 	bic.w	r3, r3, #15
 800eaa4:	b25a      	sxtb	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	0a1b      	lsrs	r3, r3, #8
 800eaaa:	b25b      	sxtb	r3, r3
 800eaac:	f003 030f 	and.w	r3, r3, #15
 800eab0:	b25b      	sxtb	r3, r3
 800eab2:	4313      	orrs	r3, r2
 800eab4:	b25b      	sxtb	r3, r3
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2201      	movs	r2, #1
 800eac0:	70da      	strb	r2, [r3, #3]
			break;
 800eac2:	e072      	b.n	800ebaa <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	899b      	ldrh	r3, [r3, #12]
 800eacc:	085b      	lsrs	r3, r3, #1
 800eace:	b29b      	uxth	r3, r3
 800ead0:	4619      	mov	r1, r3
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ead8:	4413      	add	r3, r2
 800eada:	4619      	mov	r1, r3
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7ff fdc5 	bl	800e66c <move_window>
 800eae2:	4603      	mov	r3, r0
 800eae4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eae6:	7ffb      	ldrb	r3, [r7, #31]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d15b      	bne.n	800eba4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	8992      	ldrh	r2, [r2, #12]
 800eafa:	fbb3 f0f2 	udiv	r0, r3, r2
 800eafe:	fb02 f200 	mul.w	r2, r2, r0
 800eb02:	1a9b      	subs	r3, r3, r2
 800eb04:	440b      	add	r3, r1
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	b292      	uxth	r2, r2
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7ff fb38 	bl	800e182 <st_word>
			fs->wflag = 1;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2201      	movs	r2, #1
 800eb16:	70da      	strb	r2, [r3, #3]
			break;
 800eb18:	e047      	b.n	800ebaa <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	899b      	ldrh	r3, [r3, #12]
 800eb22:	089b      	lsrs	r3, r3, #2
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	4619      	mov	r1, r3
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb2e:	4413      	add	r3, r2
 800eb30:	4619      	mov	r1, r3
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f7ff fd9a 	bl	800e66c <move_window>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb3c:	7ffb      	ldrb	r3, [r7, #31]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d132      	bne.n	800eba8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	8992      	ldrh	r2, [r2, #12]
 800eb56:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb5a:	fb02 f200 	mul.w	r2, r2, r0
 800eb5e:	1a9b      	subs	r3, r3, r2
 800eb60:	440b      	add	r3, r1
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7ff faea 	bl	800e13c <ld_dword>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eb6e:	4323      	orrs	r3, r4
 800eb70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	8992      	ldrh	r2, [r2, #12]
 800eb80:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb84:	fb02 f200 	mul.w	r2, r2, r0
 800eb88:	1a9b      	subs	r3, r3, r2
 800eb8a:	440b      	add	r3, r1
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7ff fb12 	bl	800e1b8 <st_dword>
			fs->wflag = 1;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2201      	movs	r2, #1
 800eb98:	70da      	strb	r2, [r3, #3]
			break;
 800eb9a:	e006      	b.n	800ebaa <put_fat+0x224>
			if (res != FR_OK) break;
 800eb9c:	bf00      	nop
 800eb9e:	e004      	b.n	800ebaa <put_fat+0x224>
			if (res != FR_OK) break;
 800eba0:	bf00      	nop
 800eba2:	e002      	b.n	800ebaa <put_fat+0x224>
			if (res != FR_OK) break;
 800eba4:	bf00      	nop
 800eba6:	e000      	b.n	800ebaa <put_fat+0x224>
			if (res != FR_OK) break;
 800eba8:	bf00      	nop
		}
	}
	return res;
 800ebaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3724      	adds	r7, #36	; 0x24
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd90      	pop	{r4, r7, pc}

0800ebb4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d904      	bls.n	800ebda <remove_chain+0x26>
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	69db      	ldr	r3, [r3, #28]
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d301      	bcc.n	800ebde <remove_chain+0x2a>
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e04b      	b.n	800ec76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00c      	beq.n	800ebfe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	6879      	ldr	r1, [r7, #4]
 800ebea:	69b8      	ldr	r0, [r7, #24]
 800ebec:	f7ff fecb 	bl	800e986 <put_fat>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ebf4:	7ffb      	ldrb	r3, [r7, #31]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d001      	beq.n	800ebfe <remove_chain+0x4a>
 800ebfa:	7ffb      	ldrb	r3, [r7, #31]
 800ebfc:	e03b      	b.n	800ec76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ebfe:	68b9      	ldr	r1, [r7, #8]
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f7ff fdf0 	bl	800e7e6 <get_fat>
 800ec06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d031      	beq.n	800ec72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d101      	bne.n	800ec18 <remove_chain+0x64>
 800ec14:	2302      	movs	r3, #2
 800ec16:	e02e      	b.n	800ec76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d101      	bne.n	800ec24 <remove_chain+0x70>
 800ec20:	2301      	movs	r3, #1
 800ec22:	e028      	b.n	800ec76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ec24:	2200      	movs	r2, #0
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	69b8      	ldr	r0, [r7, #24]
 800ec2a:	f7ff feac 	bl	800e986 <put_fat>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ec32:	7ffb      	ldrb	r3, [r7, #31]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d001      	beq.n	800ec3c <remove_chain+0x88>
 800ec38:	7ffb      	ldrb	r3, [r7, #31]
 800ec3a:	e01c      	b.n	800ec76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	695a      	ldr	r2, [r3, #20]
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	69db      	ldr	r3, [r3, #28]
 800ec44:	3b02      	subs	r3, #2
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d20b      	bcs.n	800ec62 <remove_chain+0xae>
			fs->free_clst++;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	791b      	ldrb	r3, [r3, #4]
 800ec58:	f043 0301 	orr.w	r3, r3, #1
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	69db      	ldr	r3, [r3, #28]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d3c6      	bcc.n	800ebfe <remove_chain+0x4a>
 800ec70:	e000      	b.n	800ec74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ec72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3720      	adds	r7, #32
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b088      	sub	sp, #32
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10d      	bne.n	800ecb0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d004      	beq.n	800ecaa <create_chain+0x2c>
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	69db      	ldr	r3, [r3, #28]
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d31b      	bcc.n	800ece2 <create_chain+0x64>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	e018      	b.n	800ece2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ecb0:	6839      	ldr	r1, [r7, #0]
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7ff fd97 	bl	800e7e6 <get_fat>
 800ecb8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d801      	bhi.n	800ecc4 <create_chain+0x46>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e070      	b.n	800eda6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecca:	d101      	bne.n	800ecd0 <create_chain+0x52>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	e06a      	b.n	800eda6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	69db      	ldr	r3, [r3, #28]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d201      	bcs.n	800ecde <create_chain+0x60>
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	e063      	b.n	800eda6 <create_chain+0x128>
		scl = clst;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	3301      	adds	r3, #1
 800ecea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	69db      	ldr	r3, [r3, #28]
 800ecf0:	69fa      	ldr	r2, [r7, #28]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d307      	bcc.n	800ed06 <create_chain+0x88>
				ncl = 2;
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ecfa:	69fa      	ldr	r2, [r7, #28]
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d901      	bls.n	800ed06 <create_chain+0x88>
 800ed02:	2300      	movs	r3, #0
 800ed04:	e04f      	b.n	800eda6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ed06:	69f9      	ldr	r1, [r7, #28]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff fd6c 	bl	800e7e6 <get_fat>
 800ed0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00e      	beq.n	800ed34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d003      	beq.n	800ed24 <create_chain+0xa6>
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d101      	bne.n	800ed28 <create_chain+0xaa>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	e03e      	b.n	800eda6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ed28:	69fa      	ldr	r2, [r7, #28]
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d1da      	bne.n	800ece6 <create_chain+0x68>
 800ed30:	2300      	movs	r3, #0
 800ed32:	e038      	b.n	800eda6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ed34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ed36:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3a:	69f9      	ldr	r1, [r7, #28]
 800ed3c:	6938      	ldr	r0, [r7, #16]
 800ed3e:	f7ff fe22 	bl	800e986 <put_fat>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d109      	bne.n	800ed60 <create_chain+0xe2>
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d006      	beq.n	800ed60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	6938      	ldr	r0, [r7, #16]
 800ed58:	f7ff fe15 	bl	800e986 <put_fat>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d116      	bne.n	800ed94 <create_chain+0x116>
		fs->last_clst = ncl;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	695a      	ldr	r2, [r3, #20]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	69db      	ldr	r3, [r3, #28]
 800ed74:	3b02      	subs	r3, #2
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d804      	bhi.n	800ed84 <create_chain+0x106>
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	1e5a      	subs	r2, r3, #1
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	791b      	ldrb	r3, [r3, #4]
 800ed88:	f043 0301 	orr.w	r3, r3, #1
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	711a      	strb	r2, [r3, #4]
 800ed92:	e007      	b.n	800eda4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d102      	bne.n	800eda0 <create_chain+0x122>
 800ed9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9e:	e000      	b.n	800eda2 <create_chain+0x124>
 800eda0:	2301      	movs	r3, #1
 800eda2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eda4:	69fb      	ldr	r3, [r7, #28]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3720      	adds	r7, #32
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800edae:	b480      	push	{r7}
 800edb0:	b087      	sub	sp, #28
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc2:	3304      	adds	r3, #4
 800edc4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	899b      	ldrh	r3, [r3, #12]
 800edca:	461a      	mov	r2, r3
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	fbb3 f3f2 	udiv	r3, r3, r2
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	8952      	ldrh	r2, [r2, #10]
 800edd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800edda:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	1d1a      	adds	r2, r3, #4
 800ede0:	613a      	str	r2, [r7, #16]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <clmt_clust+0x42>
 800edec:	2300      	movs	r3, #0
 800edee:	e010      	b.n	800ee12 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800edf0:	697a      	ldr	r2, [r7, #20]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d307      	bcc.n	800ee08 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800edf8:	697a      	ldr	r2, [r7, #20]
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	617b      	str	r3, [r7, #20]
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	3304      	adds	r3, #4
 800ee04:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ee06:	e7e9      	b.n	800eddc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ee08:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	4413      	add	r3, r2
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	371c      	adds	r7, #28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr

0800ee1e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee34:	d204      	bcs.n	800ee40 <dir_sdi+0x22>
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	f003 031f 	and.w	r3, r3, #31
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ee40:	2302      	movs	r3, #2
 800ee42:	e071      	b.n	800ef28 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d106      	bne.n	800ee64 <dir_sdi+0x46>
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d902      	bls.n	800ee64 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee62:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10c      	bne.n	800ee84 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	095b      	lsrs	r3, r3, #5
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	8912      	ldrh	r2, [r2, #8]
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d301      	bcc.n	800ee7a <dir_sdi+0x5c>
 800ee76:	2302      	movs	r3, #2
 800ee78:	e056      	b.n	800ef28 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	61da      	str	r2, [r3, #28]
 800ee82:	e02d      	b.n	800eee0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	895b      	ldrh	r3, [r3, #10]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	899b      	ldrh	r3, [r3, #12]
 800ee8e:	fb03 f302 	mul.w	r3, r3, r2
 800ee92:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee94:	e019      	b.n	800eeca <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6979      	ldr	r1, [r7, #20]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff fca3 	bl	800e7e6 <get_fat>
 800eea0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea8:	d101      	bne.n	800eeae <dir_sdi+0x90>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e03c      	b.n	800ef28 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d904      	bls.n	800eebe <dir_sdi+0xa0>
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	69db      	ldr	r3, [r3, #28]
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d301      	bcc.n	800eec2 <dir_sdi+0xa4>
 800eebe:	2302      	movs	r3, #2
 800eec0:	e032      	b.n	800ef28 <dir_sdi+0x10a>
			ofs -= csz;
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d2e1      	bcs.n	800ee96 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800eed2:	6979      	ldr	r1, [r7, #20]
 800eed4:	6938      	ldr	r0, [r7, #16]
 800eed6:	f7ff fc67 	bl	800e7a8 <clust2sect>
 800eeda:	4602      	mov	r2, r0
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <dir_sdi+0xd4>
 800eeee:	2302      	movs	r3, #2
 800eef0:	e01a      	b.n	800ef28 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	69da      	ldr	r2, [r3, #28]
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	899b      	ldrh	r3, [r3, #12]
 800eefa:	4619      	mov	r1, r3
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef02:	441a      	add	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	899b      	ldrh	r3, [r3, #12]
 800ef12:	461a      	mov	r2, r3
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef1a:	fb02 f200 	mul.w	r2, r2, r0
 800ef1e:	1a9b      	subs	r3, r3, r2
 800ef20:	18ca      	adds	r2, r1, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	695b      	ldr	r3, [r3, #20]
 800ef44:	3320      	adds	r3, #32
 800ef46:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	69db      	ldr	r3, [r3, #28]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d003      	beq.n	800ef58 <dir_next+0x28>
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef56:	d301      	bcc.n	800ef5c <dir_next+0x2c>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	e0bb      	b.n	800f0d4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	461a      	mov	r2, r3
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef68:	fb02 f201 	mul.w	r2, r2, r1
 800ef6c:	1a9b      	subs	r3, r3, r2
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f040 809d 	bne.w	800f0ae <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	69db      	ldr	r3, [r3, #28]
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	699b      	ldr	r3, [r3, #24]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10b      	bne.n	800ef9e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	095b      	lsrs	r3, r3, #5
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	8912      	ldrh	r2, [r2, #8]
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	f0c0 808d 	bcc.w	800f0ae <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	61da      	str	r2, [r3, #28]
 800ef9a:	2304      	movs	r3, #4
 800ef9c:	e09a      	b.n	800f0d4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	899b      	ldrh	r3, [r3, #12]
 800efa2:	461a      	mov	r2, r3
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	8952      	ldrh	r2, [r2, #10]
 800efae:	3a01      	subs	r2, #1
 800efb0:	4013      	ands	r3, r2
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d17b      	bne.n	800f0ae <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	4619      	mov	r1, r3
 800efbe:	4610      	mov	r0, r2
 800efc0:	f7ff fc11 	bl	800e7e6 <get_fat>
 800efc4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d801      	bhi.n	800efd0 <dir_next+0xa0>
 800efcc:	2302      	movs	r3, #2
 800efce:	e081      	b.n	800f0d4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd6:	d101      	bne.n	800efdc <dir_next+0xac>
 800efd8:	2301      	movs	r3, #1
 800efda:	e07b      	b.n	800f0d4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d359      	bcc.n	800f09a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d104      	bne.n	800eff6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	61da      	str	r2, [r3, #28]
 800eff2:	2304      	movs	r3, #4
 800eff4:	e06e      	b.n	800f0d4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	4619      	mov	r1, r3
 800effe:	4610      	mov	r0, r2
 800f000:	f7ff fe3d 	bl	800ec7e <create_chain>
 800f004:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d101      	bne.n	800f010 <dir_next+0xe0>
 800f00c:	2307      	movs	r3, #7
 800f00e:	e061      	b.n	800f0d4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2b01      	cmp	r3, #1
 800f014:	d101      	bne.n	800f01a <dir_next+0xea>
 800f016:	2302      	movs	r3, #2
 800f018:	e05c      	b.n	800f0d4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f020:	d101      	bne.n	800f026 <dir_next+0xf6>
 800f022:	2301      	movs	r3, #1
 800f024:	e056      	b.n	800f0d4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f7ff fadc 	bl	800e5e4 <sync_window>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <dir_next+0x106>
 800f032:	2301      	movs	r3, #1
 800f034:	e04e      	b.n	800f0d4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	899b      	ldrh	r3, [r3, #12]
 800f040:	461a      	mov	r2, r3
 800f042:	2100      	movs	r1, #0
 800f044:	f7ff f905 	bl	800e252 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f048:	2300      	movs	r3, #0
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	6979      	ldr	r1, [r7, #20]
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7ff fbaa 	bl	800e7a8 <clust2sect>
 800f054:	4602      	mov	r2, r0
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	635a      	str	r2, [r3, #52]	; 0x34
 800f05a:	e012      	b.n	800f082 <dir_next+0x152>
						fs->wflag = 1;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2201      	movs	r2, #1
 800f060:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7ff fabe 	bl	800e5e4 <sync_window>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d001      	beq.n	800f072 <dir_next+0x142>
 800f06e:	2301      	movs	r3, #1
 800f070:	e030      	b.n	800f0d4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	3301      	adds	r3, #1
 800f076:	613b      	str	r3, [r7, #16]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f07c:	1c5a      	adds	r2, r3, #1
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	635a      	str	r2, [r3, #52]	; 0x34
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	895b      	ldrh	r3, [r3, #10]
 800f086:	461a      	mov	r2, r3
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d3e6      	bcc.n	800f05c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	1ad2      	subs	r2, r2, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	697a      	ldr	r2, [r7, #20]
 800f09e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f0a0:	6979      	ldr	r1, [r7, #20]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff fb80 	bl	800e7a8 <clust2sect>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	899b      	ldrh	r3, [r3, #12]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0c6:	fb02 f200 	mul.w	r2, r2, r0
 800f0ca:	1a9b      	subs	r3, r3, r2
 800f0cc:	18ca      	adds	r2, r1, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3718      	adds	r7, #24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7ff fe95 	bl	800ee1e <dir_sdi>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0f8:	7dfb      	ldrb	r3, [r7, #23]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d12b      	bne.n	800f156 <dir_alloc+0x7a>
		n = 0;
 800f0fe:	2300      	movs	r3, #0
 800f100:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	69db      	ldr	r3, [r3, #28]
 800f106:	4619      	mov	r1, r3
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f7ff faaf 	bl	800e66c <move_window>
 800f10e:	4603      	mov	r3, r0
 800f110:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d11d      	bne.n	800f154 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a1b      	ldr	r3, [r3, #32]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	2be5      	cmp	r3, #229	; 0xe5
 800f120:	d004      	beq.n	800f12c <dir_alloc+0x50>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a1b      	ldr	r3, [r3, #32]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d107      	bne.n	800f13c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	3301      	adds	r3, #1
 800f130:	613b      	str	r3, [r7, #16]
 800f132:	693a      	ldr	r2, [r7, #16]
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d102      	bne.n	800f140 <dir_alloc+0x64>
 800f13a:	e00c      	b.n	800f156 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f13c:	2300      	movs	r3, #0
 800f13e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f140:	2101      	movs	r1, #1
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff fef4 	bl	800ef30 <dir_next>
 800f148:	4603      	mov	r3, r0
 800f14a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f14c:	7dfb      	ldrb	r3, [r7, #23]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d0d7      	beq.n	800f102 <dir_alloc+0x26>
 800f152:	e000      	b.n	800f156 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f154:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	2b04      	cmp	r3, #4
 800f15a:	d101      	bne.n	800f160 <dir_alloc+0x84>
 800f15c:	2307      	movs	r3, #7
 800f15e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f160:	7dfb      	ldrb	r3, [r7, #23]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3718      	adds	r7, #24
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b084      	sub	sp, #16
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
 800f172:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	331a      	adds	r3, #26
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fe ffc7 	bl	800e10c <ld_word>
 800f17e:	4603      	mov	r3, r0
 800f180:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	2b03      	cmp	r3, #3
 800f188:	d109      	bne.n	800f19e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	3314      	adds	r3, #20
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe ffbc 	bl	800e10c <ld_word>
 800f194:	4603      	mov	r3, r0
 800f196:	041b      	lsls	r3, r3, #16
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f19e:	68fb      	ldr	r3, [r7, #12]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	331a      	adds	r3, #26
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	b292      	uxth	r2, r2
 800f1bc:	4611      	mov	r1, r2
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fe ffdf 	bl	800e182 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	2b03      	cmp	r3, #3
 800f1ca:	d109      	bne.n	800f1e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f103 0214 	add.w	r2, r3, #20
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	0c1b      	lsrs	r3, r3, #16
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	4619      	mov	r1, r3
 800f1da:	4610      	mov	r0, r2
 800f1dc:	f7fe ffd1 	bl	800e182 <st_word>
	}
}
 800f1e0:	bf00      	nop
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f1f2:	2304      	movs	r3, #4
 800f1f4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f1fc:	e03c      	b.n	800f278 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	69db      	ldr	r3, [r3, #28]
 800f202:	4619      	mov	r1, r3
 800f204:	6938      	ldr	r0, [r7, #16]
 800f206:	f7ff fa31 	bl	800e66c <move_window>
 800f20a:	4603      	mov	r3, r0
 800f20c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d136      	bne.n	800f282 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a1b      	ldr	r3, [r3, #32]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d102      	bne.n	800f228 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f222:	2304      	movs	r3, #4
 800f224:	75fb      	strb	r3, [r7, #23]
 800f226:	e031      	b.n	800f28c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6a1b      	ldr	r3, [r3, #32]
 800f22c:	330b      	adds	r3, #11
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f234:	73bb      	strb	r3, [r7, #14]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7bba      	ldrb	r2, [r7, #14]
 800f23a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
 800f23e:	2be5      	cmp	r3, #229	; 0xe5
 800f240:	d011      	beq.n	800f266 <dir_read+0x7e>
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	2b2e      	cmp	r3, #46	; 0x2e
 800f246:	d00e      	beq.n	800f266 <dir_read+0x7e>
 800f248:	7bbb      	ldrb	r3, [r7, #14]
 800f24a:	2b0f      	cmp	r3, #15
 800f24c:	d00b      	beq.n	800f266 <dir_read+0x7e>
 800f24e:	7bbb      	ldrb	r3, [r7, #14]
 800f250:	f023 0320 	bic.w	r3, r3, #32
 800f254:	2b08      	cmp	r3, #8
 800f256:	bf0c      	ite	eq
 800f258:	2301      	moveq	r3, #1
 800f25a:	2300      	movne	r3, #0
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	461a      	mov	r2, r3
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	4293      	cmp	r3, r2
 800f264:	d00f      	beq.n	800f286 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f266:	2100      	movs	r1, #0
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7ff fe61 	bl	800ef30 <dir_next>
 800f26e:	4603      	mov	r3, r0
 800f270:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f272:	7dfb      	ldrb	r3, [r7, #23]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d108      	bne.n	800f28a <dir_read+0xa2>
	while (dp->sect) {
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	69db      	ldr	r3, [r3, #28]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1be      	bne.n	800f1fe <dir_read+0x16>
 800f280:	e004      	b.n	800f28c <dir_read+0xa4>
		if (res != FR_OK) break;
 800f282:	bf00      	nop
 800f284:	e002      	b.n	800f28c <dir_read+0xa4>
				break;
 800f286:	bf00      	nop
 800f288:	e000      	b.n	800f28c <dir_read+0xa4>
		if (res != FR_OK) break;
 800f28a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f28c:	7dfb      	ldrb	r3, [r7, #23]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <dir_read+0xb0>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	61da      	str	r2, [r3, #28]
	return res;
 800f298:	7dfb      	ldrb	r3, [r7, #23]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b086      	sub	sp, #24
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fdb3 	bl	800ee1e <dir_sdi>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <dir_find+0x24>
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
 800f2c4:	e03e      	b.n	800f344 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6938      	ldr	r0, [r7, #16]
 800f2ce:	f7ff f9cd 	bl	800e66c <move_window>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d12f      	bne.n	800f33c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6a1b      	ldr	r3, [r3, #32]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f2e4:	7bfb      	ldrb	r3, [r7, #15]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d102      	bne.n	800f2f0 <dir_find+0x4e>
 800f2ea:	2304      	movs	r3, #4
 800f2ec:	75fb      	strb	r3, [r7, #23]
 800f2ee:	e028      	b.n	800f342 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a1b      	ldr	r3, [r3, #32]
 800f2f4:	330b      	adds	r3, #11
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a1b      	ldr	r3, [r3, #32]
 800f306:	330b      	adds	r3, #11
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	f003 0308 	and.w	r3, r3, #8
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10a      	bne.n	800f328 <dir_find+0x86>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a18      	ldr	r0, [r3, #32]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	3324      	adds	r3, #36	; 0x24
 800f31a:	220b      	movs	r2, #11
 800f31c:	4619      	mov	r1, r3
 800f31e:	f7fe ffb2 	bl	800e286 <mem_cmp>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00b      	beq.n	800f340 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f328:	2100      	movs	r1, #0
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7ff fe00 	bl	800ef30 <dir_next>
 800f330:	4603      	mov	r3, r0
 800f332:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f334:	7dfb      	ldrb	r3, [r7, #23]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d0c5      	beq.n	800f2c6 <dir_find+0x24>
 800f33a:	e002      	b.n	800f342 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f33c:	bf00      	nop
 800f33e:	e000      	b.n	800f342 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f340:	bf00      	nop

	return res;
 800f342:	7dfb      	ldrb	r3, [r7, #23]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f35a:	2101      	movs	r1, #1
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7ff febd 	bl	800f0dc <dir_alloc>
 800f362:	4603      	mov	r3, r0
 800f364:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f366:	7bfb      	ldrb	r3, [r7, #15]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d11c      	bne.n	800f3a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	69db      	ldr	r3, [r3, #28]
 800f370:	4619      	mov	r1, r3
 800f372:	68b8      	ldr	r0, [r7, #8]
 800f374:	f7ff f97a 	bl	800e66c <move_window>
 800f378:	4603      	mov	r3, r0
 800f37a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d111      	bne.n	800f3a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	2220      	movs	r2, #32
 800f388:	2100      	movs	r1, #0
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe ff61 	bl	800e252 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6a18      	ldr	r0, [r3, #32]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	3324      	adds	r3, #36	; 0x24
 800f398:	220b      	movs	r2, #11
 800f39a:	4619      	mov	r1, r3
 800f39c:	f7fe ff38 	bl	800e210 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	69db      	ldr	r3, [r3, #28]
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f7ff f951 	bl	800e66c <move_window>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f3ce:	7afb      	ldrb	r3, [r7, #11]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d106      	bne.n	800f3e2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a1b      	ldr	r3, [r3, #32]
 800f3d8:	22e5      	movs	r2, #229	; 0xe5
 800f3da:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800f3e2:	7afb      	ldrb	r3, [r7, #11]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	60fb      	str	r3, [r7, #12]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	3324      	adds	r3, #36	; 0x24
 800f400:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f402:	220b      	movs	r2, #11
 800f404:	2120      	movs	r1, #32
 800f406:	68b8      	ldr	r0, [r7, #8]
 800f408:	f7fe ff23 	bl	800e252 <mem_set>
	si = i = 0; ni = 8;
 800f40c:	2300      	movs	r3, #0
 800f40e:	613b      	str	r3, [r7, #16]
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	617b      	str	r3, [r7, #20]
 800f414:	2308      	movs	r3, #8
 800f416:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	4413      	add	r3, r2
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b2e      	cmp	r3, #46	; 0x2e
 800f422:	d12f      	bne.n	800f484 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	617a      	str	r2, [r7, #20]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	4413      	add	r3, r2
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800f432:	7ffb      	ldrb	r3, [r7, #31]
 800f434:	2b2e      	cmp	r3, #46	; 0x2e
 800f436:	d10a      	bne.n	800f44e <create_name+0x62>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d807      	bhi.n	800f44e <create_name+0x62>
			sfn[i++] = c;
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	613a      	str	r2, [r7, #16]
 800f444:	68ba      	ldr	r2, [r7, #8]
 800f446:	4413      	add	r3, r2
 800f448:	7ffa      	ldrb	r2, [r7, #31]
 800f44a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800f44c:	e7ea      	b.n	800f424 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800f44e:	7ffb      	ldrb	r3, [r7, #31]
 800f450:	2b2f      	cmp	r3, #47	; 0x2f
 800f452:	d007      	beq.n	800f464 <create_name+0x78>
 800f454:	7ffb      	ldrb	r3, [r7, #31]
 800f456:	2b5c      	cmp	r3, #92	; 0x5c
 800f458:	d004      	beq.n	800f464 <create_name+0x78>
 800f45a:	7ffb      	ldrb	r3, [r7, #31]
 800f45c:	2b20      	cmp	r3, #32
 800f45e:	d901      	bls.n	800f464 <create_name+0x78>
 800f460:	2306      	movs	r3, #6
 800f462:	e084      	b.n	800f56e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	441a      	add	r2, r3
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800f46e:	7ffb      	ldrb	r3, [r7, #31]
 800f470:	2b20      	cmp	r3, #32
 800f472:	d801      	bhi.n	800f478 <create_name+0x8c>
 800f474:	2224      	movs	r2, #36	; 0x24
 800f476:	e000      	b.n	800f47a <create_name+0x8e>
 800f478:	2220      	movs	r2, #32
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	330b      	adds	r3, #11
 800f47e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f480:	2300      	movs	r3, #0
 800f482:	e074      	b.n	800f56e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	617a      	str	r2, [r7, #20]
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	4413      	add	r3, r2
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f492:	7ffb      	ldrb	r3, [r7, #31]
 800f494:	2b20      	cmp	r3, #32
 800f496:	d94e      	bls.n	800f536 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f498:	7ffb      	ldrb	r3, [r7, #31]
 800f49a:	2b2f      	cmp	r3, #47	; 0x2f
 800f49c:	d006      	beq.n	800f4ac <create_name+0xc0>
 800f49e:	7ffb      	ldrb	r3, [r7, #31]
 800f4a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f4a2:	d110      	bne.n	800f4c6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f4a4:	e002      	b.n	800f4ac <create_name+0xc0>
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	617b      	str	r3, [r7, #20]
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b2f      	cmp	r3, #47	; 0x2f
 800f4b6:	d0f6      	beq.n	800f4a6 <create_name+0xba>
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	4413      	add	r3, r2
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b5c      	cmp	r3, #92	; 0x5c
 800f4c2:	d0f0      	beq.n	800f4a6 <create_name+0xba>
			break;
 800f4c4:	e038      	b.n	800f538 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f4c6:	7ffb      	ldrb	r3, [r7, #31]
 800f4c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f4ca:	d003      	beq.n	800f4d4 <create_name+0xe8>
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d30c      	bcc.n	800f4ee <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	2b0b      	cmp	r3, #11
 800f4d8:	d002      	beq.n	800f4e0 <create_name+0xf4>
 800f4da:	7ffb      	ldrb	r3, [r7, #31]
 800f4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f4de:	d001      	beq.n	800f4e4 <create_name+0xf8>
 800f4e0:	2306      	movs	r3, #6
 800f4e2:	e044      	b.n	800f56e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800f4e4:	2308      	movs	r3, #8
 800f4e6:	613b      	str	r3, [r7, #16]
 800f4e8:	230b      	movs	r3, #11
 800f4ea:	61bb      	str	r3, [r7, #24]
			continue;
 800f4ec:	e022      	b.n	800f534 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f4ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	da04      	bge.n	800f500 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f4f6:	7ffb      	ldrb	r3, [r7, #31]
 800f4f8:	3b80      	subs	r3, #128	; 0x80
 800f4fa:	4a1f      	ldr	r2, [pc, #124]	; (800f578 <create_name+0x18c>)
 800f4fc:	5cd3      	ldrb	r3, [r2, r3]
 800f4fe:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f500:	7ffb      	ldrb	r3, [r7, #31]
 800f502:	4619      	mov	r1, r3
 800f504:	481d      	ldr	r0, [pc, #116]	; (800f57c <create_name+0x190>)
 800f506:	f7fe fee5 	bl	800e2d4 <chk_chr>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <create_name+0x128>
 800f510:	2306      	movs	r3, #6
 800f512:	e02c      	b.n	800f56e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f514:	7ffb      	ldrb	r3, [r7, #31]
 800f516:	2b60      	cmp	r3, #96	; 0x60
 800f518:	d905      	bls.n	800f526 <create_name+0x13a>
 800f51a:	7ffb      	ldrb	r3, [r7, #31]
 800f51c:	2b7a      	cmp	r3, #122	; 0x7a
 800f51e:	d802      	bhi.n	800f526 <create_name+0x13a>
 800f520:	7ffb      	ldrb	r3, [r7, #31]
 800f522:	3b20      	subs	r3, #32
 800f524:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	613a      	str	r2, [r7, #16]
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	4413      	add	r3, r2
 800f530:	7ffa      	ldrb	r2, [r7, #31]
 800f532:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f534:	e7a6      	b.n	800f484 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f536:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	441a      	add	r2, r3
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d101      	bne.n	800f54c <create_name+0x160>
 800f548:	2306      	movs	r3, #6
 800f54a:	e010      	b.n	800f56e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	2be5      	cmp	r3, #229	; 0xe5
 800f552:	d102      	bne.n	800f55a <create_name+0x16e>
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2205      	movs	r2, #5
 800f558:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f55a:	7ffb      	ldrb	r3, [r7, #31]
 800f55c:	2b20      	cmp	r3, #32
 800f55e:	d801      	bhi.n	800f564 <create_name+0x178>
 800f560:	2204      	movs	r2, #4
 800f562:	e000      	b.n	800f566 <create_name+0x17a>
 800f564:	2200      	movs	r2, #0
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	330b      	adds	r3, #11
 800f56a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f56c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3720      	adds	r7, #32
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	08017584 	.word	0x08017584
 800f57c:	08017534 	.word	0x08017534

0800f580 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	2b2f      	cmp	r3, #47	; 0x2f
 800f59a:	d00b      	beq.n	800f5b4 <follow_path+0x34>
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	2b5c      	cmp	r3, #92	; 0x5c
 800f5a2:	d007      	beq.n	800f5b4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	699a      	ldr	r2, [r3, #24]
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	609a      	str	r2, [r3, #8]
 800f5ac:	e00d      	b.n	800f5ca <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	603b      	str	r3, [r7, #0]
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b2f      	cmp	r3, #47	; 0x2f
 800f5ba:	d0f8      	beq.n	800f5ae <follow_path+0x2e>
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	2b5c      	cmp	r3, #92	; 0x5c
 800f5c2:	d0f4      	beq.n	800f5ae <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2b1f      	cmp	r3, #31
 800f5d0:	d80a      	bhi.n	800f5e8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2280      	movs	r2, #128	; 0x80
 800f5d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f5da:	2100      	movs	r1, #0
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff fc1e 	bl	800ee1e <dir_sdi>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	75fb      	strb	r3, [r7, #23]
 800f5e6:	e05b      	b.n	800f6a0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f5e8:	463b      	mov	r3, r7
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff fefd 	bl	800f3ec <create_name>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d14c      	bne.n	800f696 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff fe50 	bl	800f2a2 <dir_find>
 800f602:	4603      	mov	r3, r0
 800f604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f60c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d01b      	beq.n	800f64c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f614:	7dfb      	ldrb	r3, [r7, #23]
 800f616:	2b04      	cmp	r3, #4
 800f618:	d13f      	bne.n	800f69a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f61a:	7afb      	ldrb	r3, [r7, #11]
 800f61c:	f003 0320 	and.w	r3, r3, #32
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00b      	beq.n	800f63c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f624:	7afb      	ldrb	r3, [r7, #11]
 800f626:	f003 0304 	and.w	r3, r3, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d031      	beq.n	800f692 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2280      	movs	r2, #128	; 0x80
 800f632:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f636:	2300      	movs	r3, #0
 800f638:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f63a:	e02e      	b.n	800f69a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f63c:	7afb      	ldrb	r3, [r7, #11]
 800f63e:	f003 0304 	and.w	r3, r3, #4
 800f642:	2b00      	cmp	r3, #0
 800f644:	d129      	bne.n	800f69a <follow_path+0x11a>
 800f646:	2305      	movs	r3, #5
 800f648:	75fb      	strb	r3, [r7, #23]
				break;
 800f64a:	e026      	b.n	800f69a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f64c:	7afb      	ldrb	r3, [r7, #11]
 800f64e:	f003 0304 	and.w	r3, r3, #4
 800f652:	2b00      	cmp	r3, #0
 800f654:	d123      	bne.n	800f69e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	799b      	ldrb	r3, [r3, #6]
 800f65a:	f003 0310 	and.w	r3, r3, #16
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d102      	bne.n	800f668 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f662:	2305      	movs	r3, #5
 800f664:	75fb      	strb	r3, [r7, #23]
 800f666:	e01b      	b.n	800f6a0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	68fa      	ldr	r2, [r7, #12]
 800f674:	8992      	ldrh	r2, [r2, #12]
 800f676:	fbb3 f0f2 	udiv	r0, r3, r2
 800f67a:	fb02 f200 	mul.w	r2, r2, r0
 800f67e:	1a9b      	subs	r3, r3, r2
 800f680:	440b      	add	r3, r1
 800f682:	4619      	mov	r1, r3
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f7ff fd70 	bl	800f16a <ld_clust>
 800f68a:	4602      	mov	r2, r0
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	609a      	str	r2, [r3, #8]
 800f690:	e7aa      	b.n	800f5e8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f692:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f694:	e7a8      	b.n	800f5e8 <follow_path+0x68>
			if (res != FR_OK) break;
 800f696:	bf00      	nop
 800f698:	e002      	b.n	800f6a0 <follow_path+0x120>
				break;
 800f69a:	bf00      	nop
 800f69c:	e000      	b.n	800f6a0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f69e:	bf00      	nop
			}
		}
	}

	return res;
 800f6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3718      	adds	r7, #24
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	b087      	sub	sp, #28
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d031      	beq.n	800f724 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	617b      	str	r3, [r7, #20]
 800f6c6:	e002      	b.n	800f6ce <get_ldnumber+0x24>
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	617b      	str	r3, [r7, #20]
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b20      	cmp	r3, #32
 800f6d4:	d903      	bls.n	800f6de <get_ldnumber+0x34>
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	2b3a      	cmp	r3, #58	; 0x3a
 800f6dc:	d1f4      	bne.n	800f6c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2b3a      	cmp	r3, #58	; 0x3a
 800f6e4:	d11c      	bne.n	800f720 <get_ldnumber+0x76>
			tp = *path;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	1c5a      	adds	r2, r3, #1
 800f6f0:	60fa      	str	r2, [r7, #12]
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	3b30      	subs	r3, #48	; 0x30
 800f6f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2b09      	cmp	r3, #9
 800f6fc:	d80e      	bhi.n	800f71c <get_ldnumber+0x72>
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	429a      	cmp	r2, r3
 800f704:	d10a      	bne.n	800f71c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d107      	bne.n	800f71c <get_ldnumber+0x72>
					vol = (int)i;
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	3301      	adds	r3, #1
 800f714:	617b      	str	r3, [r7, #20]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	e002      	b.n	800f726 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f720:	2300      	movs	r3, #0
 800f722:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f724:	693b      	ldr	r3, [r7, #16]
}
 800f726:	4618      	mov	r0, r3
 800f728:	371c      	adds	r7, #28
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
	...

0800f734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	70da      	strb	r2, [r3, #3]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f04f 32ff 	mov.w	r2, #4294967295
 800f74a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7fe ff8c 	bl	800e66c <move_window>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <check_fs+0x2a>
 800f75a:	2304      	movs	r3, #4
 800f75c:	e038      	b.n	800f7d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	3338      	adds	r3, #56	; 0x38
 800f762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f766:	4618      	mov	r0, r3
 800f768:	f7fe fcd0 	bl	800e10c <ld_word>
 800f76c:	4603      	mov	r3, r0
 800f76e:	461a      	mov	r2, r3
 800f770:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f774:	429a      	cmp	r2, r3
 800f776:	d001      	beq.n	800f77c <check_fs+0x48>
 800f778:	2303      	movs	r3, #3
 800f77a:	e029      	b.n	800f7d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f782:	2be9      	cmp	r3, #233	; 0xe9
 800f784:	d009      	beq.n	800f79a <check_fs+0x66>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f78c:	2beb      	cmp	r3, #235	; 0xeb
 800f78e:	d11e      	bne.n	800f7ce <check_fs+0x9a>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f796:	2b90      	cmp	r3, #144	; 0x90
 800f798:	d119      	bne.n	800f7ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	3338      	adds	r3, #56	; 0x38
 800f79e:	3336      	adds	r3, #54	; 0x36
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fe fccb 	bl	800e13c <ld_dword>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f7ac:	4a0a      	ldr	r2, [pc, #40]	; (800f7d8 <check_fs+0xa4>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d101      	bne.n	800f7b6 <check_fs+0x82>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	e00c      	b.n	800f7d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	3338      	adds	r3, #56	; 0x38
 800f7ba:	3352      	adds	r3, #82	; 0x52
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fe fcbd 	bl	800e13c <ld_dword>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	4b05      	ldr	r3, [pc, #20]	; (800f7dc <check_fs+0xa8>)
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d101      	bne.n	800f7ce <check_fs+0x9a>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	e000      	b.n	800f7d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f7ce:	2302      	movs	r3, #2
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	00544146 	.word	0x00544146
 800f7dc:	33544146 	.word	0x33544146

0800f7e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b096      	sub	sp, #88	; 0x58
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7ff ff58 	bl	800f6aa <get_ldnumber>
 800f7fa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	da01      	bge.n	800f806 <find_volume+0x26>
 800f802:	230b      	movs	r3, #11
 800f804:	e268      	b.n	800fcd8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f806:	4ab0      	ldr	r2, [pc, #704]	; (800fac8 <find_volume+0x2e8>)
 800f808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f80e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f812:	2b00      	cmp	r3, #0
 800f814:	d101      	bne.n	800f81a <find_volume+0x3a>
 800f816:	230c      	movs	r3, #12
 800f818:	e25e      	b.n	800fcd8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f81e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f820:	79fb      	ldrb	r3, [r7, #7]
 800f822:	f023 0301 	bic.w	r3, r3, #1
 800f826:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d01a      	beq.n	800f866 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	785b      	ldrb	r3, [r3, #1]
 800f834:	4618      	mov	r0, r3
 800f836:	f7fe fbcb 	bl	800dfd0 <disk_status>
 800f83a:	4603      	mov	r3, r0
 800f83c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f840:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f844:	f003 0301 	and.w	r3, r3, #1
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10c      	bne.n	800f866 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d007      	beq.n	800f862 <find_volume+0x82>
 800f852:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f856:	f003 0304 	and.w	r3, r3, #4
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f85e:	230a      	movs	r3, #10
 800f860:	e23a      	b.n	800fcd8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800f862:	2300      	movs	r3, #0
 800f864:	e238      	b.n	800fcd8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f868:	2200      	movs	r2, #0
 800f86a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f872:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f876:	785b      	ldrb	r3, [r3, #1]
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fe fbc3 	bl	800e004 <disk_initialize>
 800f87e:	4603      	mov	r3, r0
 800f880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f888:	f003 0301 	and.w	r3, r3, #1
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d001      	beq.n	800f894 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f890:	2303      	movs	r3, #3
 800f892:	e221      	b.n	800fcd8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f894:	79fb      	ldrb	r3, [r7, #7]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d007      	beq.n	800f8aa <find_volume+0xca>
 800f89a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f89e:	f003 0304 	and.w	r3, r3, #4
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f8a6:	230a      	movs	r3, #10
 800f8a8:	e216      	b.n	800fcd8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ac:	7858      	ldrb	r0, [r3, #1]
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	330c      	adds	r3, #12
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	2102      	movs	r1, #2
 800f8b6:	f7fe fc0b 	bl	800e0d0 <disk_ioctl>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d001      	beq.n	800f8c4 <find_volume+0xe4>
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e209      	b.n	800fcd8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	899b      	ldrh	r3, [r3, #12]
 800f8c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8cc:	d80d      	bhi.n	800f8ea <find_volume+0x10a>
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d0:	899b      	ldrh	r3, [r3, #12]
 800f8d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8d6:	d308      	bcc.n	800f8ea <find_volume+0x10a>
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	899b      	ldrh	r3, [r3, #12]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e0:	899b      	ldrh	r3, [r3, #12]
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <find_volume+0x10e>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e1f4      	b.n	800fcd8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f8f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f8f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8f6:	f7ff ff1d 	bl	800f734 <check_fs>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f904:	2b02      	cmp	r3, #2
 800f906:	d14b      	bne.n	800f9a0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f908:	2300      	movs	r3, #0
 800f90a:	643b      	str	r3, [r7, #64]	; 0x40
 800f90c:	e01f      	b.n	800f94e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f916:	011b      	lsls	r3, r3, #4
 800f918:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f91c:	4413      	add	r3, r2
 800f91e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f922:	3304      	adds	r3, #4
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d006      	beq.n	800f938 <find_volume+0x158>
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	3308      	adds	r3, #8
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fe fc04 	bl	800e13c <ld_dword>
 800f934:	4602      	mov	r2, r0
 800f936:	e000      	b.n	800f93a <find_volume+0x15a>
 800f938:	2200      	movs	r2, #0
 800f93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f942:	440b      	add	r3, r1
 800f944:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f94a:	3301      	adds	r3, #1
 800f94c:	643b      	str	r3, [r7, #64]	; 0x40
 800f94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f950:	2b03      	cmp	r3, #3
 800f952:	d9dc      	bls.n	800f90e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f954:	2300      	movs	r3, #0
 800f956:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d002      	beq.n	800f964 <find_volume+0x184>
 800f95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f960:	3b01      	subs	r3, #1
 800f962:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f96c:	4413      	add	r3, r2
 800f96e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f972:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f976:	2b00      	cmp	r3, #0
 800f978:	d005      	beq.n	800f986 <find_volume+0x1a6>
 800f97a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f97c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f97e:	f7ff fed9 	bl	800f734 <check_fs>
 800f982:	4603      	mov	r3, r0
 800f984:	e000      	b.n	800f988 <find_volume+0x1a8>
 800f986:	2303      	movs	r3, #3
 800f988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f98c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f990:	2b01      	cmp	r3, #1
 800f992:	d905      	bls.n	800f9a0 <find_volume+0x1c0>
 800f994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f996:	3301      	adds	r3, #1
 800f998:	643b      	str	r3, [r7, #64]	; 0x40
 800f99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f99c:	2b03      	cmp	r3, #3
 800f99e:	d9e1      	bls.n	800f964 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f9a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9a4:	2b04      	cmp	r3, #4
 800f9a6:	d101      	bne.n	800f9ac <find_volume+0x1cc>
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e195      	b.n	800fcd8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f9ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d901      	bls.n	800f9b8 <find_volume+0x1d8>
 800f9b4:	230d      	movs	r3, #13
 800f9b6:	e18f      	b.n	800fcd8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	3338      	adds	r3, #56	; 0x38
 800f9bc:	330b      	adds	r3, #11
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fe fba4 	bl	800e10c <ld_word>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	899b      	ldrh	r3, [r3, #12]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d001      	beq.n	800f9d4 <find_volume+0x1f4>
 800f9d0:	230d      	movs	r3, #13
 800f9d2:	e181      	b.n	800fcd8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d6:	3338      	adds	r3, #56	; 0x38
 800f9d8:	3316      	adds	r3, #22
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fe fb96 	bl	800e10c <ld_word>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d106      	bne.n	800f9f8 <find_volume+0x218>
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ec:	3338      	adds	r3, #56	; 0x38
 800f9ee:	3324      	adds	r3, #36	; 0x24
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fe fba3 	bl	800e13c <ld_dword>
 800f9f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9fc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa00:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0a:	789b      	ldrb	r3, [r3, #2]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d005      	beq.n	800fa1c <find_volume+0x23c>
 800fa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa12:	789b      	ldrb	r3, [r3, #2]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d001      	beq.n	800fa1c <find_volume+0x23c>
 800fa18:	230d      	movs	r3, #13
 800fa1a:	e15d      	b.n	800fcd8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	789b      	ldrb	r3, [r3, #2]
 800fa20:	461a      	mov	r2, r3
 800fa22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa24:	fb02 f303 	mul.w	r3, r2, r3
 800fa28:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa38:	895b      	ldrh	r3, [r3, #10]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d008      	beq.n	800fa50 <find_volume+0x270>
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	895b      	ldrh	r3, [r3, #10]
 800fa42:	461a      	mov	r2, r3
 800fa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa46:	895b      	ldrh	r3, [r3, #10]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <find_volume+0x274>
 800fa50:	230d      	movs	r3, #13
 800fa52:	e141      	b.n	800fcd8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	3338      	adds	r3, #56	; 0x38
 800fa58:	3311      	adds	r3, #17
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe fb56 	bl	800e10c <ld_word>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
 800fa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	891b      	ldrh	r3, [r3, #8]
 800fa6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa6e:	8992      	ldrh	r2, [r2, #12]
 800fa70:	0952      	lsrs	r2, r2, #5
 800fa72:	b292      	uxth	r2, r2
 800fa74:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa78:	fb02 f201 	mul.w	r2, r2, r1
 800fa7c:	1a9b      	subs	r3, r3, r2
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <find_volume+0x2a8>
 800fa84:	230d      	movs	r3, #13
 800fa86:	e127      	b.n	800fcd8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8a:	3338      	adds	r3, #56	; 0x38
 800fa8c:	3313      	adds	r3, #19
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe fb3c 	bl	800e10c <ld_word>
 800fa94:	4603      	mov	r3, r0
 800fa96:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fa98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d106      	bne.n	800faac <find_volume+0x2cc>
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa0:	3338      	adds	r3, #56	; 0x38
 800faa2:	3320      	adds	r3, #32
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fe fb49 	bl	800e13c <ld_dword>
 800faaa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	3338      	adds	r3, #56	; 0x38
 800fab0:	330e      	adds	r3, #14
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fe fb2a 	bl	800e10c <ld_word>
 800fab8:	4603      	mov	r3, r0
 800faba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fabc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d104      	bne.n	800facc <find_volume+0x2ec>
 800fac2:	230d      	movs	r3, #13
 800fac4:	e108      	b.n	800fcd8 <find_volume+0x4f8>
 800fac6:	bf00      	nop
 800fac8:	20036a64 	.word	0x20036a64

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800facc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800face:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fad0:	4413      	add	r3, r2
 800fad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fad4:	8911      	ldrh	r1, [r2, #8]
 800fad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fad8:	8992      	ldrh	r2, [r2, #12]
 800fada:	0952      	lsrs	r2, r2, #5
 800fadc:	b292      	uxth	r2, r2
 800fade:	fbb1 f2f2 	udiv	r2, r1, r2
 800fae2:	b292      	uxth	r2, r2
 800fae4:	4413      	add	r3, r2
 800fae6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faec:	429a      	cmp	r2, r3
 800faee:	d201      	bcs.n	800faf4 <find_volume+0x314>
 800faf0:	230d      	movs	r3, #13
 800faf2:	e0f1      	b.n	800fcd8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800faf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fafc:	8952      	ldrh	r2, [r2, #10]
 800fafe:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb02:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <find_volume+0x32e>
 800fb0a:	230d      	movs	r3, #13
 800fb0c:	e0e4      	b.n	800fcd8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800fb0e:	2303      	movs	r3, #3
 800fb10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d802      	bhi.n	800fb24 <find_volume+0x344>
 800fb1e:	2302      	movs	r3, #2
 800fb20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d802      	bhi.n	800fb34 <find_volume+0x354>
 800fb2e:	2301      	movs	r3, #1
 800fb30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	1c9a      	adds	r2, r3, #2
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb40:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fb42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb46:	441a      	add	r2, r3
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fb4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb50:	441a      	add	r2, r3
 800fb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb54:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fb56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb5a:	2b03      	cmp	r3, #3
 800fb5c:	d11e      	bne.n	800fb9c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb60:	3338      	adds	r3, #56	; 0x38
 800fb62:	332a      	adds	r3, #42	; 0x2a
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fe fad1 	bl	800e10c <ld_word>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d001      	beq.n	800fb74 <find_volume+0x394>
 800fb70:	230d      	movs	r3, #13
 800fb72:	e0b1      	b.n	800fcd8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	891b      	ldrh	r3, [r3, #8]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <find_volume+0x3a0>
 800fb7c:	230d      	movs	r3, #13
 800fb7e:	e0ab      	b.n	800fcd8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb82:	3338      	adds	r3, #56	; 0x38
 800fb84:	332c      	adds	r3, #44	; 0x2c
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fe fad8 	bl	800e13c <ld_dword>
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	647b      	str	r3, [r7, #68]	; 0x44
 800fb9a:	e01f      	b.n	800fbdc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	891b      	ldrh	r3, [r3, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <find_volume+0x3c8>
 800fba4:	230d      	movs	r3, #13
 800fba6:	e097      	b.n	800fcd8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbae:	441a      	add	r2, r3
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fbb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d103      	bne.n	800fbc4 <find_volume+0x3e4>
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	69db      	ldr	r3, [r3, #28]
 800fbc0:	005b      	lsls	r3, r3, #1
 800fbc2:	e00a      	b.n	800fbda <find_volume+0x3fa>
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	69da      	ldr	r2, [r3, #28]
 800fbc8:	4613      	mov	r3, r2
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	4413      	add	r3, r2
 800fbce:	085a      	lsrs	r2, r3, #1
 800fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd2:	69db      	ldr	r3, [r3, #28]
 800fbd4:	f003 0301 	and.w	r3, r3, #1
 800fbd8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fbda:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	6a1a      	ldr	r2, [r3, #32]
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe2:	899b      	ldrh	r3, [r3, #12]
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe8:	440b      	add	r3, r1
 800fbea:	3b01      	subs	r3, #1
 800fbec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbee:	8989      	ldrh	r1, [r1, #12]
 800fbf0:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d201      	bcs.n	800fbfc <find_volume+0x41c>
 800fbf8:	230d      	movs	r3, #13
 800fbfa:	e06d      	b.n	800fcd8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800fc02:	615a      	str	r2, [r3, #20]
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	695a      	ldr	r2, [r3, #20]
 800fc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	2280      	movs	r2, #128	; 0x80
 800fc10:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fc12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc16:	2b03      	cmp	r3, #3
 800fc18:	d149      	bne.n	800fcae <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1c:	3338      	adds	r3, #56	; 0x38
 800fc1e:	3330      	adds	r3, #48	; 0x30
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fe fa73 	bl	800e10c <ld_word>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d140      	bne.n	800fcae <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2e:	3301      	adds	r3, #1
 800fc30:	4619      	mov	r1, r3
 800fc32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc34:	f7fe fd1a 	bl	800e66c <move_window>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d137      	bne.n	800fcae <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc40:	2200      	movs	r2, #0
 800fc42:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc46:	3338      	adds	r3, #56	; 0x38
 800fc48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fe fa5d 	bl	800e10c <ld_word>
 800fc52:	4603      	mov	r3, r0
 800fc54:	461a      	mov	r2, r3
 800fc56:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d127      	bne.n	800fcae <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc60:	3338      	adds	r3, #56	; 0x38
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fa6a 	bl	800e13c <ld_dword>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	4b1d      	ldr	r3, [pc, #116]	; (800fce0 <find_volume+0x500>)
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d11e      	bne.n	800fcae <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc72:	3338      	adds	r3, #56	; 0x38
 800fc74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fe fa5f 	bl	800e13c <ld_dword>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	4b18      	ldr	r3, [pc, #96]	; (800fce4 <find_volume+0x504>)
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d113      	bne.n	800fcae <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc88:	3338      	adds	r3, #56	; 0x38
 800fc8a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fa54 	bl	800e13c <ld_dword>
 800fc94:	4602      	mov	r2, r0
 800fc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc98:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9c:	3338      	adds	r3, #56	; 0x38
 800fc9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe fa4a 	bl	800e13c <ld_dword>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fcb4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fcb6:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <find_volume+0x508>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	b29a      	uxth	r2, r3
 800fcbe:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <find_volume+0x508>)
 800fcc0:	801a      	strh	r2, [r3, #0]
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <find_volume+0x508>)
 800fcc4:	881a      	ldrh	r2, [r3, #0]
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	2200      	movs	r2, #0
 800fcce:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fcd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcd2:	f7fe fc63 	bl	800e59c <clear_lock>
#endif
	return FR_OK;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3758      	adds	r7, #88	; 0x58
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	41615252 	.word	0x41615252
 800fce4:	61417272 	.word	0x61417272
 800fce8:	20036a68 	.word	0x20036a68

0800fcec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fcf6:	2309      	movs	r3, #9
 800fcf8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d01c      	beq.n	800fd3a <validate+0x4e>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d018      	beq.n	800fd3a <validate+0x4e>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d013      	beq.n	800fd3a <validate+0x4e>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	889a      	ldrh	r2, [r3, #4]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	88db      	ldrh	r3, [r3, #6]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d10c      	bne.n	800fd3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	785b      	ldrb	r3, [r3, #1]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fe f952 	bl	800dfd0 <disk_status>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <validate+0x4e>
			res = FR_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d102      	bne.n	800fd46 <validate+0x5a>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	e000      	b.n	800fd48 <validate+0x5c>
 800fd46:	2300      	movs	r3, #0
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	6013      	str	r3, [r2, #0]
	return res;
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	4613      	mov	r3, r2
 800fd64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fd6a:	f107 0310 	add.w	r3, r7, #16
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff fc9b 	bl	800f6aa <get_ldnumber>
 800fd74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	da01      	bge.n	800fd80 <f_mount+0x28>
 800fd7c:	230b      	movs	r3, #11
 800fd7e:	e02b      	b.n	800fdd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fd80:	4a17      	ldr	r2, [pc, #92]	; (800fde0 <f_mount+0x88>)
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d005      	beq.n	800fd9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fd90:	69b8      	ldr	r0, [r7, #24]
 800fd92:	f7fe fc03 	bl	800e59c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d002      	beq.n	800fda8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	490d      	ldr	r1, [pc, #52]	; (800fde0 <f_mount+0x88>)
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <f_mount+0x66>
 800fdb8:	79fb      	ldrb	r3, [r7, #7]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d001      	beq.n	800fdc2 <f_mount+0x6a>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e00a      	b.n	800fdd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fdc2:	f107 010c 	add.w	r1, r7, #12
 800fdc6:	f107 0308 	add.w	r3, r7, #8
 800fdca:	2200      	movs	r2, #0
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7ff fd07 	bl	800f7e0 <find_volume>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3720      	adds	r7, #32
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	20036a64 	.word	0x20036a64

0800fde4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b098      	sub	sp, #96	; 0x60
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <f_open+0x18>
 800fdf8:	2309      	movs	r3, #9
 800fdfa:	e1bb      	b.n	8010174 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fdfc:	79fb      	ldrb	r3, [r7, #7]
 800fdfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fe04:	79fa      	ldrb	r2, [r7, #7]
 800fe06:	f107 0110 	add.w	r1, r7, #16
 800fe0a:	f107 0308 	add.w	r3, r7, #8
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff fce6 	bl	800f7e0 <find_volume>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fe1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f040 819f 	bne.w	8010162 <f_open+0x37e>
		dj.obj.fs = fs;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	f107 0314 	add.w	r3, r7, #20
 800fe2e:	4611      	mov	r1, r2
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff fba5 	bl	800f580 <follow_path>
 800fe36:	4603      	mov	r3, r0
 800fe38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fe3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d11a      	bne.n	800fe7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fe44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe48:	b25b      	sxtb	r3, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	da03      	bge.n	800fe56 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fe4e:	2306      	movs	r3, #6
 800fe50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe54:	e011      	b.n	800fe7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	f023 0301 	bic.w	r3, r3, #1
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	bf14      	ite	ne
 800fe60:	2301      	movne	r3, #1
 800fe62:	2300      	moveq	r3, #0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	461a      	mov	r2, r3
 800fe68:	f107 0314 	add.w	r3, r7, #20
 800fe6c:	4611      	mov	r1, r2
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe fa4c 	bl	800e30c <chk_lock>
 800fe74:	4603      	mov	r3, r0
 800fe76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fe7a:	79fb      	ldrb	r3, [r7, #7]
 800fe7c:	f003 031c 	and.w	r3, r3, #28
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d07f      	beq.n	800ff84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fe84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d017      	beq.n	800febc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fe8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe90:	2b04      	cmp	r3, #4
 800fe92:	d10e      	bne.n	800feb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fe94:	f7fe fa96 	bl	800e3c4 <enq_lock>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d006      	beq.n	800feac <f_open+0xc8>
 800fe9e:	f107 0314 	add.w	r3, r7, #20
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff fa52 	bl	800f34c <dir_register>
 800fea8:	4603      	mov	r3, r0
 800feaa:	e000      	b.n	800feae <f_open+0xca>
 800feac:	2312      	movs	r3, #18
 800feae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800feb2:	79fb      	ldrb	r3, [r7, #7]
 800feb4:	f043 0308 	orr.w	r3, r3, #8
 800feb8:	71fb      	strb	r3, [r7, #7]
 800feba:	e010      	b.n	800fede <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800febc:	7ebb      	ldrb	r3, [r7, #26]
 800febe:	f003 0311 	and.w	r3, r3, #17
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d003      	beq.n	800fece <f_open+0xea>
					res = FR_DENIED;
 800fec6:	2307      	movs	r3, #7
 800fec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fecc:	e007      	b.n	800fede <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fece:	79fb      	ldrb	r3, [r7, #7]
 800fed0:	f003 0304 	and.w	r3, r3, #4
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d002      	beq.n	800fede <f_open+0xfa>
 800fed8:	2308      	movs	r3, #8
 800feda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d168      	bne.n	800ffb8 <f_open+0x1d4>
 800fee6:	79fb      	ldrb	r3, [r7, #7]
 800fee8:	f003 0308 	and.w	r3, r3, #8
 800feec:	2b00      	cmp	r3, #0
 800feee:	d063      	beq.n	800ffb8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fef0:	f7fd fe1e 	bl	800db30 <get_fattime>
 800fef4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef8:	330e      	adds	r3, #14
 800fefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fe f95b 	bl	800e1b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ff02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff04:	3316      	adds	r3, #22
 800ff06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fe f955 	bl	800e1b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ff0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff10:	330b      	adds	r3, #11
 800ff12:	2220      	movs	r2, #32
 800ff14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff1a:	4611      	mov	r1, r2
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7ff f924 	bl	800f16a <ld_clust>
 800ff22:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff28:	2200      	movs	r2, #0
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff f93c 	bl	800f1a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ff30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff32:	331c      	adds	r3, #28
 800ff34:	2100      	movs	r1, #0
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fe f93e 	bl	800e1b8 <st_dword>
					fs->wflag = 1;
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ff42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d037      	beq.n	800ffb8 <f_open+0x1d4>
						dw = fs->winsect;
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff4c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ff4e:	f107 0314 	add.w	r3, r7, #20
 800ff52:	2200      	movs	r2, #0
 800ff54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe fe2c 	bl	800ebb4 <remove_chain>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ff62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d126      	bne.n	800ffb8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fe fb7c 	bl	800e66c <move_window>
 800ff74:	4603      	mov	r3, r0
 800ff76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff7e:	3a01      	subs	r2, #1
 800ff80:	611a      	str	r2, [r3, #16]
 800ff82:	e019      	b.n	800ffb8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ff84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d115      	bne.n	800ffb8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ff8c:	7ebb      	ldrb	r3, [r7, #26]
 800ff8e:	f003 0310 	and.w	r3, r3, #16
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ff96:	2304      	movs	r3, #4
 800ff98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ff9c:	e00c      	b.n	800ffb8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ff9e:	79fb      	ldrb	r3, [r7, #7]
 800ffa0:	f003 0302 	and.w	r3, r3, #2
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d007      	beq.n	800ffb8 <f_open+0x1d4>
 800ffa8:	7ebb      	ldrb	r3, [r7, #26]
 800ffaa:	f003 0301 	and.w	r3, r3, #1
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d002      	beq.n	800ffb8 <f_open+0x1d4>
						res = FR_DENIED;
 800ffb2:	2307      	movs	r3, #7
 800ffb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ffb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d128      	bne.n	8010012 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	f003 0308 	and.w	r3, r3, #8
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d003      	beq.n	800ffd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ffda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ffe0:	79fb      	ldrb	r3, [r7, #7]
 800ffe2:	f023 0301 	bic.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	bf14      	ite	ne
 800ffea:	2301      	movne	r3, #1
 800ffec:	2300      	moveq	r3, #0
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	461a      	mov	r2, r3
 800fff2:	f107 0314 	add.w	r3, r7, #20
 800fff6:	4611      	mov	r1, r2
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7fe fa05 	bl	800e408 <inc_lock>
 800fffe:	4602      	mov	r2, r0
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d102      	bne.n	8010012 <f_open+0x22e>
 801000c:	2302      	movs	r3, #2
 801000e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010016:	2b00      	cmp	r3, #0
 8010018:	f040 80a3 	bne.w	8010162 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010020:	4611      	mov	r1, r2
 8010022:	4618      	mov	r0, r3
 8010024:	f7ff f8a1 	bl	800f16a <ld_clust>
 8010028:	4602      	mov	r2, r0
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801002e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010030:	331c      	adds	r3, #28
 8010032:	4618      	mov	r0, r3
 8010034:	f7fe f882 	bl	800e13c <ld_dword>
 8010038:	4602      	mov	r2, r0
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010044:	693a      	ldr	r2, [r7, #16]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	88da      	ldrh	r2, [r3, #6]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	79fa      	ldrb	r2, [r7, #7]
 8010056:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2200      	movs	r2, #0
 801005c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	3330      	adds	r3, #48	; 0x30
 801006e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010072:	2100      	movs	r1, #0
 8010074:	4618      	mov	r0, r3
 8010076:	f7fe f8ec 	bl	800e252 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	f003 0320 	and.w	r3, r3, #32
 8010080:	2b00      	cmp	r3, #0
 8010082:	d06e      	beq.n	8010162 <f_open+0x37e>
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d06a      	beq.n	8010162 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	68da      	ldr	r2, [r3, #12]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	895b      	ldrh	r3, [r3, #10]
 8010098:	461a      	mov	r2, r3
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	899b      	ldrh	r3, [r3, #12]
 801009e:	fb03 f302 	mul.w	r3, r3, r2
 80100a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	657b      	str	r3, [r7, #84]	; 0x54
 80100b0:	e016      	b.n	80100e0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fe fb95 	bl	800e7e6 <get_fat>
 80100bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80100be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d802      	bhi.n	80100ca <f_open+0x2e6>
 80100c4:	2302      	movs	r3, #2
 80100c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80100ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d0:	d102      	bne.n	80100d8 <f_open+0x2f4>
 80100d2:	2301      	movs	r3, #1
 80100d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80100d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	657b      	str	r3, [r7, #84]	; 0x54
 80100e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d103      	bne.n	80100f0 <f_open+0x30c>
 80100e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d8e0      	bhi.n	80100b2 <f_open+0x2ce>
				}
				fp->clust = clst;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80100f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d131      	bne.n	8010162 <f_open+0x37e>
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	461a      	mov	r2, r3
 8010104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010106:	fbb3 f1f2 	udiv	r1, r3, r2
 801010a:	fb02 f201 	mul.w	r2, r2, r1
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	2b00      	cmp	r3, #0
 8010112:	d026      	beq.n	8010162 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010118:	4618      	mov	r0, r3
 801011a:	f7fe fb45 	bl	800e7a8 <clust2sect>
 801011e:	6478      	str	r0, [r7, #68]	; 0x44
 8010120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010122:	2b00      	cmp	r3, #0
 8010124:	d103      	bne.n	801012e <f_open+0x34a>
						res = FR_INT_ERR;
 8010126:	2302      	movs	r3, #2
 8010128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801012c:	e019      	b.n	8010162 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	899b      	ldrh	r3, [r3, #12]
 8010132:	461a      	mov	r2, r3
 8010134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010136:	fbb3 f2f2 	udiv	r2, r3, r2
 801013a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801013c:	441a      	add	r2, r3
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	7858      	ldrb	r0, [r3, #1]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	6a1a      	ldr	r2, [r3, #32]
 8010150:	2301      	movs	r3, #1
 8010152:	f7fd ff7d 	bl	800e050 <disk_read>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d002      	beq.n	8010162 <f_open+0x37e>
 801015c:	2301      	movs	r3, #1
 801015e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010166:	2b00      	cmp	r3, #0
 8010168:	d002      	beq.n	8010170 <f_open+0x38c>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010174:	4618      	mov	r0, r3
 8010176:	3760      	adds	r7, #96	; 0x60
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b08e      	sub	sp, #56	; 0x38
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
 8010188:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	2200      	movs	r2, #0
 8010192:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f107 0214 	add.w	r2, r7, #20
 801019a:	4611      	mov	r1, r2
 801019c:	4618      	mov	r0, r3
 801019e:	f7ff fda5 	bl	800fcec <validate>
 80101a2:	4603      	mov	r3, r0
 80101a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80101a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d107      	bne.n	80101c0 <f_read+0x44>
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	7d5b      	ldrb	r3, [r3, #21]
 80101b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80101b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d002      	beq.n	80101c6 <f_read+0x4a>
 80101c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101c4:	e135      	b.n	8010432 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d101      	bne.n	80101d6 <f_read+0x5a>
 80101d2:	2307      	movs	r3, #7
 80101d4:	e12d      	b.n	8010432 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	68da      	ldr	r2, [r3, #12]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	699b      	ldr	r3, [r3, #24]
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	6a3b      	ldr	r3, [r7, #32]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	f240 811e 	bls.w	8010428 <f_read+0x2ac>
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80101f0:	e11a      	b.n	8010428 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	699b      	ldr	r3, [r3, #24]
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	8992      	ldrh	r2, [r2, #12]
 80101fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80101fe:	fb02 f201 	mul.w	r2, r2, r1
 8010202:	1a9b      	subs	r3, r3, r2
 8010204:	2b00      	cmp	r3, #0
 8010206:	f040 80d5 	bne.w	80103b4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	699b      	ldr	r3, [r3, #24]
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	8992      	ldrh	r2, [r2, #12]
 8010212:	fbb3 f3f2 	udiv	r3, r3, r2
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	8952      	ldrh	r2, [r2, #10]
 801021a:	3a01      	subs	r2, #1
 801021c:	4013      	ands	r3, r2
 801021e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d12f      	bne.n	8010286 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d103      	bne.n	8010236 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	633b      	str	r3, [r7, #48]	; 0x30
 8010234:	e013      	b.n	801025e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801023a:	2b00      	cmp	r3, #0
 801023c:	d007      	beq.n	801024e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	699b      	ldr	r3, [r3, #24]
 8010242:	4619      	mov	r1, r3
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	f7fe fdb2 	bl	800edae <clmt_clust>
 801024a:	6338      	str	r0, [r7, #48]	; 0x30
 801024c:	e007      	b.n	801025e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	69db      	ldr	r3, [r3, #28]
 8010254:	4619      	mov	r1, r3
 8010256:	4610      	mov	r0, r2
 8010258:	f7fe fac5 	bl	800e7e6 <get_fat>
 801025c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	2b01      	cmp	r3, #1
 8010262:	d804      	bhi.n	801026e <f_read+0xf2>
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2202      	movs	r2, #2
 8010268:	755a      	strb	r2, [r3, #21]
 801026a:	2302      	movs	r3, #2
 801026c:	e0e1      	b.n	8010432 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801026e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010274:	d104      	bne.n	8010280 <f_read+0x104>
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	755a      	strb	r2, [r3, #21]
 801027c:	2301      	movs	r3, #1
 801027e:	e0d8      	b.n	8010432 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010284:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010286:	697a      	ldr	r2, [r7, #20]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	69db      	ldr	r3, [r3, #28]
 801028c:	4619      	mov	r1, r3
 801028e:	4610      	mov	r0, r2
 8010290:	f7fe fa8a 	bl	800e7a8 <clust2sect>
 8010294:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d104      	bne.n	80102a6 <f_read+0x12a>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2202      	movs	r2, #2
 80102a0:	755a      	strb	r2, [r3, #21]
 80102a2:	2302      	movs	r3, #2
 80102a4:	e0c5      	b.n	8010432 <f_read+0x2b6>
			sect += csect;
 80102a6:	69ba      	ldr	r2, [r7, #24]
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	4413      	add	r3, r2
 80102ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	899b      	ldrh	r3, [r3, #12]
 80102b2:	461a      	mov	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80102ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80102bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d041      	beq.n	8010346 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80102c2:	69fa      	ldr	r2, [r7, #28]
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	4413      	add	r3, r2
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	8952      	ldrh	r2, [r2, #10]
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d905      	bls.n	80102dc <f_read+0x160>
					cc = fs->csize - csect;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	895b      	ldrh	r3, [r3, #10]
 80102d4:	461a      	mov	r2, r3
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	7858      	ldrb	r0, [r3, #1]
 80102e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e2:	69ba      	ldr	r2, [r7, #24]
 80102e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80102e6:	f7fd feb3 	bl	800e050 <disk_read>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d004      	beq.n	80102fa <f_read+0x17e>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2201      	movs	r2, #1
 80102f4:	755a      	strb	r2, [r3, #21]
 80102f6:	2301      	movs	r3, #1
 80102f8:	e09b      	b.n	8010432 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	7d1b      	ldrb	r3, [r3, #20]
 80102fe:	b25b      	sxtb	r3, r3
 8010300:	2b00      	cmp	r3, #0
 8010302:	da18      	bge.n	8010336 <f_read+0x1ba>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6a1a      	ldr	r2, [r3, #32]
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801030e:	429a      	cmp	r2, r3
 8010310:	d911      	bls.n	8010336 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	6a1a      	ldr	r2, [r3, #32]
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	697a      	ldr	r2, [r7, #20]
 801031c:	8992      	ldrh	r2, [r2, #12]
 801031e:	fb02 f303 	mul.w	r3, r2, r3
 8010322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010324:	18d0      	adds	r0, r2, r3
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	899b      	ldrh	r3, [r3, #12]
 8010330:	461a      	mov	r2, r3
 8010332:	f7fd ff6d 	bl	800e210 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	899b      	ldrh	r3, [r3, #12]
 801033a:	461a      	mov	r2, r3
 801033c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033e:	fb02 f303 	mul.w	r3, r2, r3
 8010342:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010344:	e05c      	b.n	8010400 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6a1b      	ldr	r3, [r3, #32]
 801034a:	69ba      	ldr	r2, [r7, #24]
 801034c:	429a      	cmp	r2, r3
 801034e:	d02e      	beq.n	80103ae <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	7d1b      	ldrb	r3, [r3, #20]
 8010354:	b25b      	sxtb	r3, r3
 8010356:	2b00      	cmp	r3, #0
 8010358:	da18      	bge.n	801038c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	7858      	ldrb	r0, [r3, #1]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6a1a      	ldr	r2, [r3, #32]
 8010368:	2301      	movs	r3, #1
 801036a:	f7fd fe91 	bl	800e090 <disk_write>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d004      	beq.n	801037e <f_read+0x202>
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2201      	movs	r2, #1
 8010378:	755a      	strb	r2, [r3, #21]
 801037a:	2301      	movs	r3, #1
 801037c:	e059      	b.n	8010432 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	7d1b      	ldrb	r3, [r3, #20]
 8010382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010386:	b2da      	uxtb	r2, r3
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	7858      	ldrb	r0, [r3, #1]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010396:	2301      	movs	r3, #1
 8010398:	69ba      	ldr	r2, [r7, #24]
 801039a:	f7fd fe59 	bl	800e050 <disk_read>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d004      	beq.n	80103ae <f_read+0x232>
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2201      	movs	r2, #1
 80103a8:	755a      	strb	r2, [r3, #21]
 80103aa:	2301      	movs	r3, #1
 80103ac:	e041      	b.n	8010432 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	69ba      	ldr	r2, [r7, #24]
 80103b2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	899b      	ldrh	r3, [r3, #12]
 80103b8:	4618      	mov	r0, r3
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	8992      	ldrh	r2, [r2, #12]
 80103c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80103c6:	fb02 f201 	mul.w	r2, r2, r1
 80103ca:	1a9b      	subs	r3, r3, r2
 80103cc:	1ac3      	subs	r3, r0, r3
 80103ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80103d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d901      	bls.n	80103dc <f_read+0x260>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	699b      	ldr	r3, [r3, #24]
 80103e6:	697a      	ldr	r2, [r7, #20]
 80103e8:	8992      	ldrh	r2, [r2, #12]
 80103ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80103ee:	fb02 f200 	mul.w	r2, r2, r0
 80103f2:	1a9b      	subs	r3, r3, r2
 80103f4:	440b      	add	r3, r1
 80103f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103f8:	4619      	mov	r1, r3
 80103fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103fc:	f7fd ff08 	bl	800e210 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010404:	4413      	add	r3, r2
 8010406:	627b      	str	r3, [r7, #36]	; 0x24
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	699a      	ldr	r2, [r3, #24]
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	441a      	add	r2, r3
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	619a      	str	r2, [r3, #24]
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	441a      	add	r2, r3
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010424:	1ad3      	subs	r3, r2, r3
 8010426:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	f47f aee1 	bne.w	80101f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3738      	adds	r7, #56	; 0x38
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b08c      	sub	sp, #48	; 0x30
 801043e:	af00      	add	r7, sp, #0
 8010440:	60f8      	str	r0, [r7, #12]
 8010442:	60b9      	str	r1, [r7, #8]
 8010444:	607a      	str	r2, [r7, #4]
 8010446:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f107 0210 	add.w	r2, r7, #16
 8010458:	4611      	mov	r1, r2
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff fc46 	bl	800fcec <validate>
 8010460:	4603      	mov	r3, r0
 8010462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801046a:	2b00      	cmp	r3, #0
 801046c:	d107      	bne.n	801047e <f_write+0x44>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	7d5b      	ldrb	r3, [r3, #21]
 8010472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801047a:	2b00      	cmp	r3, #0
 801047c:	d002      	beq.n	8010484 <f_write+0x4a>
 801047e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010482:	e16a      	b.n	801075a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	7d1b      	ldrb	r3, [r3, #20]
 8010488:	f003 0302 	and.w	r3, r3, #2
 801048c:	2b00      	cmp	r3, #0
 801048e:	d101      	bne.n	8010494 <f_write+0x5a>
 8010490:	2307      	movs	r3, #7
 8010492:	e162      	b.n	801075a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	699a      	ldr	r2, [r3, #24]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	441a      	add	r2, r3
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	699b      	ldr	r3, [r3, #24]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	f080 814c 	bcs.w	801073e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	699b      	ldr	r3, [r3, #24]
 80104aa:	43db      	mvns	r3, r3
 80104ac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80104ae:	e146      	b.n	801073e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	699b      	ldr	r3, [r3, #24]
 80104b4:	693a      	ldr	r2, [r7, #16]
 80104b6:	8992      	ldrh	r2, [r2, #12]
 80104b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80104bc:	fb02 f201 	mul.w	r2, r2, r1
 80104c0:	1a9b      	subs	r3, r3, r2
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f040 80f1 	bne.w	80106aa <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	699b      	ldr	r3, [r3, #24]
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	8992      	ldrh	r2, [r2, #12]
 80104d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	8952      	ldrh	r2, [r2, #10]
 80104d8:	3a01      	subs	r2, #1
 80104da:	4013      	ands	r3, r2
 80104dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d143      	bne.n	801056c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	699b      	ldr	r3, [r3, #24]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10c      	bne.n	8010506 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d11a      	bne.n	801052e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2100      	movs	r1, #0
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fe fbbe 	bl	800ec7e <create_chain>
 8010502:	62b8      	str	r0, [r7, #40]	; 0x28
 8010504:	e013      	b.n	801052e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801050a:	2b00      	cmp	r3, #0
 801050c:	d007      	beq.n	801051e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	699b      	ldr	r3, [r3, #24]
 8010512:	4619      	mov	r1, r3
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f7fe fc4a 	bl	800edae <clmt_clust>
 801051a:	62b8      	str	r0, [r7, #40]	; 0x28
 801051c:	e007      	b.n	801052e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801051e:	68fa      	ldr	r2, [r7, #12]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	4619      	mov	r1, r3
 8010526:	4610      	mov	r0, r2
 8010528:	f7fe fba9 	bl	800ec7e <create_chain>
 801052c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010530:	2b00      	cmp	r3, #0
 8010532:	f000 8109 	beq.w	8010748 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	2b01      	cmp	r3, #1
 801053a:	d104      	bne.n	8010546 <f_write+0x10c>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2202      	movs	r2, #2
 8010540:	755a      	strb	r2, [r3, #21]
 8010542:	2302      	movs	r3, #2
 8010544:	e109      	b.n	801075a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801054c:	d104      	bne.n	8010558 <f_write+0x11e>
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2201      	movs	r2, #1
 8010552:	755a      	strb	r2, [r3, #21]
 8010554:	2301      	movs	r3, #1
 8010556:	e100      	b.n	801075a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801055c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d102      	bne.n	801056c <f_write+0x132>
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801056a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	7d1b      	ldrb	r3, [r3, #20]
 8010570:	b25b      	sxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	da18      	bge.n	80105a8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	7858      	ldrb	r0, [r3, #1]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a1a      	ldr	r2, [r3, #32]
 8010584:	2301      	movs	r3, #1
 8010586:	f7fd fd83 	bl	800e090 <disk_write>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <f_write+0x160>
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2201      	movs	r2, #1
 8010594:	755a      	strb	r2, [r3, #21]
 8010596:	2301      	movs	r3, #1
 8010598:	e0df      	b.n	801075a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	7d1b      	ldrb	r3, [r3, #20]
 801059e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80105a8:	693a      	ldr	r2, [r7, #16]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	69db      	ldr	r3, [r3, #28]
 80105ae:	4619      	mov	r1, r3
 80105b0:	4610      	mov	r0, r2
 80105b2:	f7fe f8f9 	bl	800e7a8 <clust2sect>
 80105b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d104      	bne.n	80105c8 <f_write+0x18e>
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2202      	movs	r2, #2
 80105c2:	755a      	strb	r2, [r3, #21]
 80105c4:	2302      	movs	r3, #2
 80105c6:	e0c8      	b.n	801075a <f_write+0x320>
			sect += csect;
 80105c8:	697a      	ldr	r2, [r7, #20]
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	4413      	add	r3, r2
 80105ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	899b      	ldrh	r3, [r3, #12]
 80105d4:	461a      	mov	r2, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80105dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80105de:	6a3b      	ldr	r3, [r7, #32]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d043      	beq.n	801066c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105e4:	69ba      	ldr	r2, [r7, #24]
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	4413      	add	r3, r2
 80105ea:	693a      	ldr	r2, [r7, #16]
 80105ec:	8952      	ldrh	r2, [r2, #10]
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d905      	bls.n	80105fe <f_write+0x1c4>
					cc = fs->csize - csect;
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	895b      	ldrh	r3, [r3, #10]
 80105f6:	461a      	mov	r2, r3
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	7858      	ldrb	r0, [r3, #1]
 8010602:	6a3b      	ldr	r3, [r7, #32]
 8010604:	697a      	ldr	r2, [r7, #20]
 8010606:	69f9      	ldr	r1, [r7, #28]
 8010608:	f7fd fd42 	bl	800e090 <disk_write>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d004      	beq.n	801061c <f_write+0x1e2>
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2201      	movs	r2, #1
 8010616:	755a      	strb	r2, [r3, #21]
 8010618:	2301      	movs	r3, #1
 801061a:	e09e      	b.n	801075a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	6a1a      	ldr	r2, [r3, #32]
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	6a3a      	ldr	r2, [r7, #32]
 8010626:	429a      	cmp	r2, r3
 8010628:	d918      	bls.n	801065c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6a1a      	ldr	r2, [r3, #32]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	1ad3      	subs	r3, r2, r3
 8010638:	693a      	ldr	r2, [r7, #16]
 801063a:	8992      	ldrh	r2, [r2, #12]
 801063c:	fb02 f303 	mul.w	r3, r2, r3
 8010640:	69fa      	ldr	r2, [r7, #28]
 8010642:	18d1      	adds	r1, r2, r3
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	899b      	ldrh	r3, [r3, #12]
 8010648:	461a      	mov	r2, r3
 801064a:	f7fd fde1 	bl	800e210 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	7d1b      	ldrb	r3, [r3, #20]
 8010652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010656:	b2da      	uxtb	r2, r3
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	899b      	ldrh	r3, [r3, #12]
 8010660:	461a      	mov	r2, r3
 8010662:	6a3b      	ldr	r3, [r7, #32]
 8010664:	fb02 f303 	mul.w	r3, r2, r3
 8010668:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801066a:	e04b      	b.n	8010704 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6a1b      	ldr	r3, [r3, #32]
 8010670:	697a      	ldr	r2, [r7, #20]
 8010672:	429a      	cmp	r2, r3
 8010674:	d016      	beq.n	80106a4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	699a      	ldr	r2, [r3, #24]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801067e:	429a      	cmp	r2, r3
 8010680:	d210      	bcs.n	80106a4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	7858      	ldrb	r0, [r3, #1]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801068c:	2301      	movs	r3, #1
 801068e:	697a      	ldr	r2, [r7, #20]
 8010690:	f7fd fcde 	bl	800e050 <disk_read>
 8010694:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010696:	2b00      	cmp	r3, #0
 8010698:	d004      	beq.n	80106a4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2201      	movs	r2, #1
 801069e:	755a      	strb	r2, [r3, #21]
 80106a0:	2301      	movs	r3, #1
 80106a2:	e05a      	b.n	801075a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	697a      	ldr	r2, [r7, #20]
 80106a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	899b      	ldrh	r3, [r3, #12]
 80106ae:	4618      	mov	r0, r3
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	693a      	ldr	r2, [r7, #16]
 80106b6:	8992      	ldrh	r2, [r2, #12]
 80106b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80106bc:	fb02 f201 	mul.w	r2, r2, r1
 80106c0:	1a9b      	subs	r3, r3, r2
 80106c2:	1ac3      	subs	r3, r0, r3
 80106c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80106c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d901      	bls.n	80106d2 <f_write+0x298>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	699b      	ldr	r3, [r3, #24]
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	8992      	ldrh	r2, [r2, #12]
 80106e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80106e4:	fb02 f200 	mul.w	r2, r2, r0
 80106e8:	1a9b      	subs	r3, r3, r2
 80106ea:	440b      	add	r3, r1
 80106ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ee:	69f9      	ldr	r1, [r7, #28]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fd fd8d 	bl	800e210 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	7d1b      	ldrb	r3, [r3, #20]
 80106fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010704:	69fa      	ldr	r2, [r7, #28]
 8010706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010708:	4413      	add	r3, r2
 801070a:	61fb      	str	r3, [r7, #28]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	699a      	ldr	r2, [r3, #24]
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	441a      	add	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	619a      	str	r2, [r3, #24]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	68da      	ldr	r2, [r3, #12]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	699b      	ldr	r3, [r3, #24]
 8010720:	429a      	cmp	r2, r3
 8010722:	bf38      	it	cc
 8010724:	461a      	movcc	r2, r3
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	60da      	str	r2, [r3, #12]
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010730:	441a      	add	r2, r3
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	f47f aeb5 	bne.w	80104b0 <f_write+0x76>
 8010746:	e000      	b.n	801074a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010748:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010752:	b2da      	uxtb	r2, r3
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3730      	adds	r7, #48	; 0x30
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b086      	sub	sp, #24
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f107 0208 	add.w	r2, r7, #8
 8010770:	4611      	mov	r1, r2
 8010772:	4618      	mov	r0, r3
 8010774:	f7ff faba 	bl	800fcec <validate>
 8010778:	4603      	mov	r3, r0
 801077a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801077c:	7dfb      	ldrb	r3, [r7, #23]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d168      	bne.n	8010854 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	7d1b      	ldrb	r3, [r3, #20]
 8010786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801078a:	2b00      	cmp	r3, #0
 801078c:	d062      	beq.n	8010854 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	7d1b      	ldrb	r3, [r3, #20]
 8010792:	b25b      	sxtb	r3, r3
 8010794:	2b00      	cmp	r3, #0
 8010796:	da15      	bge.n	80107c4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	7858      	ldrb	r0, [r3, #1]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6a1a      	ldr	r2, [r3, #32]
 80107a6:	2301      	movs	r3, #1
 80107a8:	f7fd fc72 	bl	800e090 <disk_write>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d001      	beq.n	80107b6 <f_sync+0x54>
 80107b2:	2301      	movs	r3, #1
 80107b4:	e04f      	b.n	8010856 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	7d1b      	ldrb	r3, [r3, #20]
 80107ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80107c4:	f7fd f9b4 	bl	800db30 <get_fattime>
 80107c8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d0:	4619      	mov	r1, r3
 80107d2:	4610      	mov	r0, r2
 80107d4:	f7fd ff4a 	bl	800e66c <move_window>
 80107d8:	4603      	mov	r3, r0
 80107da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80107dc:	7dfb      	ldrb	r3, [r7, #23]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d138      	bne.n	8010854 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	330b      	adds	r3, #11
 80107ec:	781a      	ldrb	r2, [r3, #0]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	330b      	adds	r3, #11
 80107f2:	f042 0220 	orr.w	r2, r2, #32
 80107f6:	b2d2      	uxtb	r2, r2
 80107f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6818      	ldr	r0, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	689b      	ldr	r3, [r3, #8]
 8010802:	461a      	mov	r2, r3
 8010804:	68f9      	ldr	r1, [r7, #12]
 8010806:	f7fe fccf 	bl	800f1a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f103 021c 	add.w	r2, r3, #28
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	4619      	mov	r1, r3
 8010816:	4610      	mov	r0, r2
 8010818:	f7fd fcce 	bl	800e1b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	3316      	adds	r3, #22
 8010820:	6939      	ldr	r1, [r7, #16]
 8010822:	4618      	mov	r0, r3
 8010824:	f7fd fcc8 	bl	800e1b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	3312      	adds	r3, #18
 801082c:	2100      	movs	r1, #0
 801082e:	4618      	mov	r0, r3
 8010830:	f7fd fca7 	bl	800e182 <st_word>
					fs->wflag = 1;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	2201      	movs	r2, #1
 8010838:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	4618      	mov	r0, r3
 801083e:	f7fd ff43 	bl	800e6c8 <sync_fs>
 8010842:	4603      	mov	r3, r0
 8010844:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	7d1b      	ldrb	r3, [r3, #20]
 801084a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801084e:	b2da      	uxtb	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010854:	7dfb      	ldrb	r3, [r7, #23]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3718      	adds	r7, #24
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}

0801085e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801085e:	b580      	push	{r7, lr}
 8010860:	b084      	sub	sp, #16
 8010862:	af00      	add	r7, sp, #0
 8010864:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f7ff ff7b 	bl	8010762 <f_sync>
 801086c:	4603      	mov	r3, r0
 801086e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010870:	7bfb      	ldrb	r3, [r7, #15]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d118      	bne.n	80108a8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f107 0208 	add.w	r2, r7, #8
 801087c:	4611      	mov	r1, r2
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff fa34 	bl	800fcec <validate>
 8010884:	4603      	mov	r3, r0
 8010886:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010888:	7bfb      	ldrb	r3, [r7, #15]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d10c      	bne.n	80108a8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	691b      	ldr	r3, [r3, #16]
 8010892:	4618      	mov	r0, r3
 8010894:	f7fd fe46 	bl	800e524 <dec_lock>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d102      	bne.n	80108a8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80108a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80108b2:	b590      	push	{r4, r7, lr}
 80108b4:	b091      	sub	sp, #68	; 0x44
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80108ba:	f107 0108 	add.w	r1, r7, #8
 80108be:	1d3b      	adds	r3, r7, #4
 80108c0:	2200      	movs	r2, #0
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fe ff8c 	bl	800f7e0 <find_volume>
 80108c8:	4603      	mov	r3, r0
 80108ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80108ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d131      	bne.n	801093a <f_chdir+0x88>
		dj.obj.fs = fs;
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	f107 030c 	add.w	r3, r7, #12
 80108e0:	4611      	mov	r1, r2
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fe fe4c 	bl	800f580 <follow_path>
 80108e8:	4603      	mov	r3, r0
 80108ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80108ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d11a      	bne.n	801092c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80108f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80108fa:	b25b      	sxtb	r3, r3
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	da03      	bge.n	8010908 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	697a      	ldr	r2, [r7, #20]
 8010904:	619a      	str	r2, [r3, #24]
 8010906:	e011      	b.n	801092c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010908:	7cbb      	ldrb	r3, [r7, #18]
 801090a:	f003 0310 	and.w	r3, r3, #16
 801090e:	2b00      	cmp	r3, #0
 8010910:	d009      	beq.n	8010926 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010916:	68bc      	ldr	r4, [r7, #8]
 8010918:	4611      	mov	r1, r2
 801091a:	4618      	mov	r0, r3
 801091c:	f7fe fc25 	bl	800f16a <ld_clust>
 8010920:	4603      	mov	r3, r0
 8010922:	61a3      	str	r3, [r4, #24]
 8010924:	e002      	b.n	801092c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010926:	2305      	movs	r3, #5
 8010928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801092c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010930:	2b04      	cmp	r3, #4
 8010932:	d102      	bne.n	801093a <f_chdir+0x88>
 8010934:	2305      	movs	r3, #5
 8010936:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801093a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801093e:	4618      	mov	r0, r3
 8010940:	3744      	adds	r7, #68	; 0x44
 8010942:	46bd      	mov	sp, r7
 8010944:	bd90      	pop	{r4, r7, pc}

08010946 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b090      	sub	sp, #64	; 0x40
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f107 0208 	add.w	r2, r7, #8
 8010956:	4611      	mov	r1, r2
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff f9c7 	bl	800fcec <validate>
 801095e:	4603      	mov	r3, r0
 8010960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010968:	2b00      	cmp	r3, #0
 801096a:	d103      	bne.n	8010974 <f_lseek+0x2e>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	7d5b      	ldrb	r3, [r3, #21]
 8010970:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010974:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <f_lseek+0x3c>
 801097c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010980:	e201      	b.n	8010d86 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 80d9 	beq.w	8010b3e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010992:	d15a      	bne.n	8010a4a <f_lseek+0x104>
			tbl = fp->cltbl;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010998:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099c:	1d1a      	adds	r2, r3, #4
 801099e:	627a      	str	r2, [r7, #36]	; 0x24
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	617b      	str	r3, [r7, #20]
 80109a4:	2302      	movs	r3, #2
 80109a6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d03a      	beq.n	8010a2a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80109b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b6:	613b      	str	r3, [r7, #16]
 80109b8:	2300      	movs	r3, #0
 80109ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109be:	3302      	adds	r3, #2
 80109c0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c8:	3301      	adds	r3, #1
 80109ca:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fd ff08 	bl	800e7e6 <get_fat>
 80109d6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80109d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d804      	bhi.n	80109e8 <f_lseek+0xa2>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2202      	movs	r2, #2
 80109e2:	755a      	strb	r2, [r3, #21]
 80109e4:	2302      	movs	r3, #2
 80109e6:	e1ce      	b.n	8010d86 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ee:	d104      	bne.n	80109fa <f_lseek+0xb4>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2201      	movs	r2, #1
 80109f4:	755a      	strb	r2, [r3, #21]
 80109f6:	2301      	movs	r3, #1
 80109f8:	e1c5      	b.n	8010d86 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	3301      	adds	r3, #1
 80109fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d0de      	beq.n	80109c2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d809      	bhi.n	8010a20 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0e:	1d1a      	adds	r2, r3, #4
 8010a10:	627a      	str	r2, [r7, #36]	; 0x24
 8010a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	1d1a      	adds	r2, r3, #4
 8010a1a:	627a      	str	r2, [r7, #36]	; 0x24
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	69db      	ldr	r3, [r3, #28]
 8010a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d3c4      	bcc.n	80109b4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a30:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d803      	bhi.n	8010a42 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	601a      	str	r2, [r3, #0]
 8010a40:	e19f      	b.n	8010d82 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010a42:	2311      	movs	r3, #17
 8010a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010a48:	e19b      	b.n	8010d82 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d902      	bls.n	8010a5a <f_lseek+0x114>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	683a      	ldr	r2, [r7, #0]
 8010a5e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 818d 	beq.w	8010d82 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7fe f99d 	bl	800edae <clmt_clust>
 8010a74:	4602      	mov	r2, r0
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	69db      	ldr	r3, [r3, #28]
 8010a80:	4619      	mov	r1, r3
 8010a82:	4610      	mov	r0, r2
 8010a84:	f7fd fe90 	bl	800e7a8 <clust2sect>
 8010a88:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d104      	bne.n	8010a9a <f_lseek+0x154>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2202      	movs	r2, #2
 8010a94:	755a      	strb	r2, [r3, #21]
 8010a96:	2302      	movs	r3, #2
 8010a98:	e175      	b.n	8010d86 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	68ba      	ldr	r2, [r7, #8]
 8010aa0:	8992      	ldrh	r2, [r2, #12]
 8010aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aa6:	68ba      	ldr	r2, [r7, #8]
 8010aa8:	8952      	ldrh	r2, [r2, #10]
 8010aaa:	3a01      	subs	r2, #1
 8010aac:	4013      	ands	r3, r2
 8010aae:	69ba      	ldr	r2, [r7, #24]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	699b      	ldr	r3, [r3, #24]
 8010ab8:	68ba      	ldr	r2, [r7, #8]
 8010aba:	8992      	ldrh	r2, [r2, #12]
 8010abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ac0:	fb02 f201 	mul.w	r2, r2, r1
 8010ac4:	1a9b      	subs	r3, r3, r2
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	f000 815b 	beq.w	8010d82 <f_lseek+0x43c>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6a1b      	ldr	r3, [r3, #32]
 8010ad0:	69ba      	ldr	r2, [r7, #24]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	f000 8155 	beq.w	8010d82 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	7d1b      	ldrb	r3, [r3, #20]
 8010adc:	b25b      	sxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	da18      	bge.n	8010b14 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	7858      	ldrb	r0, [r3, #1]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6a1a      	ldr	r2, [r3, #32]
 8010af0:	2301      	movs	r3, #1
 8010af2:	f7fd facd 	bl	800e090 <disk_write>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d004      	beq.n	8010b06 <f_lseek+0x1c0>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2201      	movs	r2, #1
 8010b00:	755a      	strb	r2, [r3, #21]
 8010b02:	2301      	movs	r3, #1
 8010b04:	e13f      	b.n	8010d86 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	7d1b      	ldrb	r3, [r3, #20]
 8010b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	7858      	ldrb	r0, [r3, #1]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b1e:	2301      	movs	r3, #1
 8010b20:	69ba      	ldr	r2, [r7, #24]
 8010b22:	f7fd fa95 	bl	800e050 <disk_read>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d004      	beq.n	8010b36 <f_lseek+0x1f0>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	755a      	strb	r2, [r3, #21]
 8010b32:	2301      	movs	r3, #1
 8010b34:	e127      	b.n	8010d86 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	69ba      	ldr	r2, [r7, #24]
 8010b3a:	621a      	str	r2, [r3, #32]
 8010b3c:	e121      	b.n	8010d82 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d908      	bls.n	8010b5a <f_lseek+0x214>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	7d1b      	ldrb	r3, [r3, #20]
 8010b4c:	f003 0302 	and.w	r3, r3, #2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d102      	bne.n	8010b5a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	699b      	ldr	r3, [r3, #24]
 8010b5e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010b60:	2300      	movs	r3, #0
 8010b62:	637b      	str	r3, [r7, #52]	; 0x34
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b68:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f000 80b5 	beq.w	8010cdc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	895b      	ldrh	r3, [r3, #10]
 8010b76:	461a      	mov	r2, r3
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	899b      	ldrh	r3, [r3, #12]
 8010b7c:	fb03 f302 	mul.w	r3, r3, r2
 8010b80:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d01b      	beq.n	8010bc0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	1e5a      	subs	r2, r3, #1
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	1e59      	subs	r1, r3, #1
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d30f      	bcc.n	8010bc0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010ba0:	6a3b      	ldr	r3, [r7, #32]
 8010ba2:	1e5a      	subs	r2, r3, #1
 8010ba4:	69fb      	ldr	r3, [r7, #28]
 8010ba6:	425b      	negs	r3, r3
 8010ba8:	401a      	ands	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	699b      	ldr	r3, [r3, #24]
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	69db      	ldr	r3, [r3, #28]
 8010bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bbe:	e022      	b.n	8010c06 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d119      	bne.n	8010c00 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2100      	movs	r1, #0
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fe f854 	bl	800ec7e <create_chain>
 8010bd6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d104      	bne.n	8010be8 <f_lseek+0x2a2>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2202      	movs	r2, #2
 8010be2:	755a      	strb	r2, [r3, #21]
 8010be4:	2302      	movs	r3, #2
 8010be6:	e0ce      	b.n	8010d86 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bee:	d104      	bne.n	8010bfa <f_lseek+0x2b4>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	755a      	strb	r2, [r3, #21]
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	e0c5      	b.n	8010d86 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bfe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c04:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d067      	beq.n	8010cdc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010c0c:	e03a      	b.n	8010c84 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	603b      	str	r3, [r7, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	699a      	ldr	r2, [r3, #24]
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	441a      	add	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	7d1b      	ldrb	r3, [r3, #20]
 8010c26:	f003 0302 	and.w	r3, r3, #2
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00b      	beq.n	8010c46 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7fe f823 	bl	800ec7e <create_chain>
 8010c38:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d108      	bne.n	8010c52 <f_lseek+0x30c>
							ofs = 0; break;
 8010c40:	2300      	movs	r3, #0
 8010c42:	603b      	str	r3, [r7, #0]
 8010c44:	e022      	b.n	8010c8c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fd fdcb 	bl	800e7e6 <get_fat>
 8010c50:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c58:	d104      	bne.n	8010c64 <f_lseek+0x31e>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	755a      	strb	r2, [r3, #21]
 8010c60:	2301      	movs	r3, #1
 8010c62:	e090      	b.n	8010d86 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d904      	bls.n	8010c74 <f_lseek+0x32e>
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	69db      	ldr	r3, [r3, #28]
 8010c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d304      	bcc.n	8010c7e <f_lseek+0x338>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2202      	movs	r2, #2
 8010c78:	755a      	strb	r2, [r3, #21]
 8010c7a:	2302      	movs	r3, #2
 8010c7c:	e083      	b.n	8010d86 <f_lseek+0x440>
					fp->clust = clst;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c82:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010c84:	683a      	ldr	r2, [r7, #0]
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d8c0      	bhi.n	8010c0e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	699a      	ldr	r2, [r3, #24]
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	441a      	add	r2, r3
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	899b      	ldrh	r3, [r3, #12]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ca4:	fb02 f201 	mul.w	r2, r2, r1
 8010ca8:	1a9b      	subs	r3, r3, r2
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d016      	beq.n	8010cdc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fd fd78 	bl	800e7a8 <clust2sect>
 8010cb8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d104      	bne.n	8010cca <f_lseek+0x384>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	755a      	strb	r2, [r3, #21]
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	e05d      	b.n	8010d86 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	899b      	ldrh	r3, [r3, #12]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cd8:	4413      	add	r3, r2
 8010cda:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	699a      	ldr	r2, [r3, #24]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d90a      	bls.n	8010cfe <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	699a      	ldr	r2, [r3, #24]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	7d1b      	ldrb	r3, [r3, #20]
 8010cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	8992      	ldrh	r2, [r2, #12]
 8010d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d0a:	fb02 f201 	mul.w	r2, r2, r1
 8010d0e:	1a9b      	subs	r3, r3, r2
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d036      	beq.n	8010d82 <f_lseek+0x43c>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6a1b      	ldr	r3, [r3, #32]
 8010d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d031      	beq.n	8010d82 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	7d1b      	ldrb	r3, [r3, #20]
 8010d22:	b25b      	sxtb	r3, r3
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	da18      	bge.n	8010d5a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d28:	68bb      	ldr	r3, [r7, #8]
 8010d2a:	7858      	ldrb	r0, [r3, #1]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a1a      	ldr	r2, [r3, #32]
 8010d36:	2301      	movs	r3, #1
 8010d38:	f7fd f9aa 	bl	800e090 <disk_write>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d004      	beq.n	8010d4c <f_lseek+0x406>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2201      	movs	r2, #1
 8010d46:	755a      	strb	r2, [r3, #21]
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e01c      	b.n	8010d86 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	7d1b      	ldrb	r3, [r3, #20]
 8010d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	7858      	ldrb	r0, [r3, #1]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d64:	2301      	movs	r3, #1
 8010d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d68:	f7fd f972 	bl	800e050 <disk_read>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d004      	beq.n	8010d7c <f_lseek+0x436>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2201      	movs	r2, #1
 8010d76:	755a      	strb	r2, [r3, #21]
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e004      	b.n	8010d86 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d80:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010d82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3740      	adds	r7, #64	; 0x40
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b09e      	sub	sp, #120	; 0x78
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010d9a:	f107 010c 	add.w	r1, r7, #12
 8010d9e:	1d3b      	adds	r3, r7, #4
 8010da0:	2202      	movs	r2, #2
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7fe fd1c 	bl	800f7e0 <find_volume>
 8010da8:	4603      	mov	r3, r0
 8010daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8010db2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f040 80a4 	bne.w	8010f04 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010dc2:	4611      	mov	r1, r2
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7fe fbdb 	bl	800f580 <follow_path>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8010dd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d108      	bne.n	8010dea <f_unlink+0x5c>
 8010dd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010ddc:	f003 0320 	and.w	r3, r3, #32
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010de4:	2306      	movs	r3, #6
 8010de6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010dea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d108      	bne.n	8010e04 <f_unlink+0x76>
 8010df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010df6:	2102      	movs	r1, #2
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7fd fa87 	bl	800e30c <chk_lock>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010e04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d17b      	bne.n	8010f04 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010e0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010e10:	b25b      	sxtb	r3, r3
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	da03      	bge.n	8010e1e <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010e16:	2306      	movs	r3, #6
 8010e18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010e1c:	e008      	b.n	8010e30 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010e22:	f003 0301 	and.w	r3, r3, #1
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d002      	beq.n	8010e30 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010e2a:	2307      	movs	r3, #7
 8010e2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8010e30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d13d      	bne.n	8010eb4 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fe f993 	bl	800f16a <ld_clust>
 8010e44:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010e46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8010e4a:	f003 0310 	and.w	r3, r3, #16
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d030      	beq.n	8010eb4 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	699b      	ldr	r3, [r3, #24]
 8010e56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d103      	bne.n	8010e64 <f_unlink+0xd6>
						res = FR_DENIED;
 8010e5c:	2307      	movs	r3, #7
 8010e5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010e62:	e027      	b.n	8010eb4 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e6a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010e6c:	f107 0310 	add.w	r3, r7, #16
 8010e70:	2100      	movs	r1, #0
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fd ffd3 	bl	800ee1e <dir_sdi>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8010e7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d116      	bne.n	8010eb4 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010e86:	f107 0310 	add.w	r3, r7, #16
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fe f9ab 	bl	800f1e8 <dir_read>
 8010e92:	4603      	mov	r3, r0
 8010e94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010e98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <f_unlink+0x118>
 8010ea0:	2307      	movs	r3, #7
 8010ea2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010ea6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010eaa:	2b04      	cmp	r3, #4
 8010eac:	d102      	bne.n	8010eb4 <f_unlink+0x126>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8010eb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d123      	bne.n	8010f04 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7fe fa75 	bl	800f3b0 <dir_remove>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010ecc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10c      	bne.n	8010eee <f_unlink+0x160>
 8010ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d009      	beq.n	8010eee <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010ede:	2200      	movs	r2, #0
 8010ee0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fd fe66 	bl	800ebb4 <remove_chain>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8010eee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d106      	bne.n	8010f04 <f_unlink+0x176>
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fd fbe5 	bl	800e6c8 <sync_fs>
 8010efe:	4603      	mov	r3, r0
 8010f00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010f04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3778      	adds	r7, #120	; 0x78
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b096      	sub	sp, #88	; 0x58
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010f18:	f107 0108 	add.w	r1, r7, #8
 8010f1c:	1d3b      	adds	r3, r7, #4
 8010f1e:	2202      	movs	r2, #2
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fe fc5d 	bl	800f7e0 <find_volume>
 8010f26:	4603      	mov	r3, r0
 8010f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f040 80ff 	bne.w	8011138 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	f107 030c 	add.w	r3, r7, #12
 8010f40:	4611      	mov	r1, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fe fb1c 	bl	800f580 <follow_path>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010f4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d102      	bne.n	8010f5c <f_mkdir+0x4c>
 8010f56:	2308      	movs	r3, #8
 8010f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8010f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f60:	2b04      	cmp	r3, #4
 8010f62:	d108      	bne.n	8010f76 <f_mkdir+0x66>
 8010f64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010f68:	f003 0320 	and.w	r3, r3, #32
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d002      	beq.n	8010f76 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8010f70:	2306      	movs	r3, #6
 8010f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010f76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f7a:	2b04      	cmp	r3, #4
 8010f7c:	f040 80dc 	bne.w	8011138 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010f80:	f107 030c 	add.w	r3, r7, #12
 8010f84:	2100      	movs	r1, #0
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fd fe79 	bl	800ec7e <create_chain>
 8010f8c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	895b      	ldrh	r3, [r3, #10]
 8010f92:	461a      	mov	r2, r3
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	899b      	ldrh	r3, [r3, #12]
 8010f98:	fb03 f302 	mul.w	r3, r3, r2
 8010f9c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d102      	bne.n	8010fb0 <f_mkdir+0xa0>
 8010faa:	2307      	movs	r3, #7
 8010fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8010fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d102      	bne.n	8010fbc <f_mkdir+0xac>
 8010fb6:	2302      	movs	r3, #2
 8010fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc2:	d102      	bne.n	8010fca <f_mkdir+0xba>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010fca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <f_mkdir+0xd0>
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fd fb05 	bl	800e5e4 <sync_window>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8010fe0:	f7fc fda6 	bl	800db30 <get_fattime>
 8010fe4:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d16c      	bne.n	80110c8 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fd fbd8 	bl	800e7a8 <clust2sect>
 8010ff8:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	3338      	adds	r3, #56	; 0x38
 8010ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	899b      	ldrh	r3, [r3, #12]
 8011004:	461a      	mov	r2, r3
 8011006:	2100      	movs	r1, #0
 8011008:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801100a:	f7fd f922 	bl	800e252 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801100e:	220b      	movs	r2, #11
 8011010:	2120      	movs	r1, #32
 8011012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011014:	f7fd f91d 	bl	800e252 <mem_set>
					dir[DIR_Name] = '.';
 8011018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801101a:	222e      	movs	r2, #46	; 0x2e
 801101c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801101e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011020:	330b      	adds	r3, #11
 8011022:	2210      	movs	r2, #16
 8011024:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011028:	3316      	adds	r3, #22
 801102a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801102c:	4618      	mov	r0, r3
 801102e:	f7fd f8c3 	bl	800e1b8 <st_dword>
					st_clust(fs, dir, dcl);
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011038:	4618      	mov	r0, r3
 801103a:	f7fe f8b5 	bl	800f1a8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801103e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011040:	3320      	adds	r3, #32
 8011042:	2220      	movs	r2, #32
 8011044:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011046:	4618      	mov	r0, r3
 8011048:	f7fd f8e2 	bl	800e210 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104e:	3321      	adds	r3, #33	; 0x21
 8011050:	222e      	movs	r2, #46	; 0x2e
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	2b03      	cmp	r3, #3
 801105e:	d106      	bne.n	801106e <f_mkdir+0x15e>
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011066:	429a      	cmp	r2, r3
 8011068:	d101      	bne.n	801106e <f_mkdir+0x15e>
 801106a:	2300      	movs	r3, #0
 801106c:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801106e:	68b8      	ldr	r0, [r7, #8]
 8011070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011072:	3320      	adds	r3, #32
 8011074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011076:	4619      	mov	r1, r3
 8011078:	f7fe f896 	bl	800f1a8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	895b      	ldrh	r3, [r3, #10]
 8011080:	653b      	str	r3, [r7, #80]	; 0x50
 8011082:	e01c      	b.n	80110be <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8011084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011086:	1c5a      	adds	r2, r3, #1
 8011088:	64fa      	str	r2, [r7, #76]	; 0x4c
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2201      	movs	r2, #1
 8011092:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	4618      	mov	r0, r3
 8011098:	f7fd faa4 	bl	800e5e4 <sync_window>
 801109c:	4603      	mov	r3, r0
 801109e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80110a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10d      	bne.n	80110c6 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	461a      	mov	r2, r3
 80110b0:	2100      	movs	r1, #0
 80110b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110b4:	f7fd f8cd 	bl	800e252 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80110b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ba:	3b01      	subs	r3, #1
 80110bc:	653b      	str	r3, [r7, #80]	; 0x50
 80110be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d1df      	bne.n	8011084 <f_mkdir+0x174>
 80110c4:	e000      	b.n	80110c8 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 80110c6:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80110c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d107      	bne.n	80110e0 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80110d0:	f107 030c 	add.w	r3, r7, #12
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fe f939 	bl	800f34c <dir_register>
 80110da:	4603      	mov	r3, r0
 80110dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80110e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d120      	bne.n	801112a <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80110ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ee:	3316      	adds	r3, #22
 80110f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fd f860 	bl	800e1b8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fe f852 	bl	800f1a8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011106:	330b      	adds	r3, #11
 8011108:	2210      	movs	r2, #16
 801110a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	2201      	movs	r2, #1
 8011110:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10e      	bne.n	8011138 <f_mkdir+0x228>
					res = sync_fs(fs);
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	4618      	mov	r0, r3
 801111e:	f7fd fad3 	bl	800e6c8 <sync_fs>
 8011122:	4603      	mov	r3, r0
 8011124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011128:	e006      	b.n	8011138 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801112a:	f107 030c 	add.w	r3, r7, #12
 801112e:	2200      	movs	r2, #0
 8011130:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011132:	4618      	mov	r0, r3
 8011134:	f7fd fd3e 	bl	800ebb4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801113c:	4618      	mov	r0, r3
 801113e:	3758      	adds	r7, #88	; 0x58
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b088      	sub	sp, #32
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011150:	2300      	movs	r3, #0
 8011152:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011158:	e01b      	b.n	8011192 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801115a:	f107 0310 	add.w	r3, r7, #16
 801115e:	f107 0114 	add.w	r1, r7, #20
 8011162:	2201      	movs	r2, #1
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff f809 	bl	801017c <f_read>
		if (rc != 1) break;
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d116      	bne.n	801119e <f_gets+0x5a>
		c = s[0];
 8011170:	7d3b      	ldrb	r3, [r7, #20]
 8011172:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011174:	7dfb      	ldrb	r3, [r7, #23]
 8011176:	2b0d      	cmp	r3, #13
 8011178:	d100      	bne.n	801117c <f_gets+0x38>
 801117a:	e00a      	b.n	8011192 <f_gets+0x4e>
		*p++ = c;
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	61ba      	str	r2, [r7, #24]
 8011182:	7dfa      	ldrb	r2, [r7, #23]
 8011184:	701a      	strb	r2, [r3, #0]
		n++;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	3301      	adds	r3, #1
 801118a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801118c:	7dfb      	ldrb	r3, [r7, #23]
 801118e:	2b0a      	cmp	r3, #10
 8011190:	d007      	beq.n	80111a2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	3b01      	subs	r3, #1
 8011196:	69fa      	ldr	r2, [r7, #28]
 8011198:	429a      	cmp	r2, r3
 801119a:	dbde      	blt.n	801115a <f_gets+0x16>
 801119c:	e002      	b.n	80111a4 <f_gets+0x60>
		if (rc != 1) break;
 801119e:	bf00      	nop
 80111a0:	e000      	b.n	80111a4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80111a2:	bf00      	nop
	}
	*p = 0;
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	2200      	movs	r2, #0
 80111a8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d001      	beq.n	80111b4 <f_gets+0x70>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	e000      	b.n	80111b6 <f_gets+0x72>
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3720      	adds	r7, #32
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
	...

080111c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b087      	sub	sp, #28
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	4613      	mov	r3, r2
 80111cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80111ce:	2301      	movs	r3, #1
 80111d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80111d6:	4b1f      	ldr	r3, [pc, #124]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 80111d8:	7a5b      	ldrb	r3, [r3, #9]
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d131      	bne.n	8011244 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80111e0:	4b1c      	ldr	r3, [pc, #112]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 80111e2:	7a5b      	ldrb	r3, [r3, #9]
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	461a      	mov	r2, r3
 80111e8:	4b1a      	ldr	r3, [pc, #104]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 80111ea:	2100      	movs	r1, #0
 80111ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80111ee:	4b19      	ldr	r3, [pc, #100]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 80111f0:	7a5b      	ldrb	r3, [r3, #9]
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	4a17      	ldr	r2, [pc, #92]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	4413      	add	r3, r2
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80111fe:	4b15      	ldr	r3, [pc, #84]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 8011200:	7a5b      	ldrb	r3, [r3, #9]
 8011202:	b2db      	uxtb	r3, r3
 8011204:	461a      	mov	r2, r3
 8011206:	4b13      	ldr	r3, [pc, #76]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 8011208:	4413      	add	r3, r2
 801120a:	79fa      	ldrb	r2, [r7, #7]
 801120c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801120e:	4b11      	ldr	r3, [pc, #68]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 8011210:	7a5b      	ldrb	r3, [r3, #9]
 8011212:	b2db      	uxtb	r3, r3
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	b2d1      	uxtb	r1, r2
 8011218:	4a0e      	ldr	r2, [pc, #56]	; (8011254 <FATFS_LinkDriverEx+0x94>)
 801121a:	7251      	strb	r1, [r2, #9]
 801121c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801121e:	7dbb      	ldrb	r3, [r7, #22]
 8011220:	3330      	adds	r3, #48	; 0x30
 8011222:	b2da      	uxtb	r2, r3
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	3301      	adds	r3, #1
 801122c:	223a      	movs	r2, #58	; 0x3a
 801122e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	3302      	adds	r3, #2
 8011234:	222f      	movs	r2, #47	; 0x2f
 8011236:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	3303      	adds	r3, #3
 801123c:	2200      	movs	r2, #0
 801123e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011240:	2300      	movs	r3, #0
 8011242:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011244:	7dfb      	ldrb	r3, [r7, #23]
}
 8011246:	4618      	mov	r0, r3
 8011248:	371c      	adds	r7, #28
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	20036a8c 	.word	0x20036a8c

08011258 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011262:	2200      	movs	r2, #0
 8011264:	6839      	ldr	r1, [r7, #0]
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff ffaa 	bl	80111c0 <FATFS_LinkDriverEx>
 801126c:	4603      	mov	r3, r0
}
 801126e:	4618      	mov	r0, r3
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
	...

08011278 <cos>:
 8011278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801127a:	ec51 0b10 	vmov	r0, r1, d0
 801127e:	4a1e      	ldr	r2, [pc, #120]	; (80112f8 <cos+0x80>)
 8011280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011284:	4293      	cmp	r3, r2
 8011286:	dc06      	bgt.n	8011296 <cos+0x1e>
 8011288:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80112f0 <cos+0x78>
 801128c:	f000 fb80 	bl	8011990 <__kernel_cos>
 8011290:	ec51 0b10 	vmov	r0, r1, d0
 8011294:	e007      	b.n	80112a6 <cos+0x2e>
 8011296:	4a19      	ldr	r2, [pc, #100]	; (80112fc <cos+0x84>)
 8011298:	4293      	cmp	r3, r2
 801129a:	dd09      	ble.n	80112b0 <cos+0x38>
 801129c:	ee10 2a10 	vmov	r2, s0
 80112a0:	460b      	mov	r3, r1
 80112a2:	f7ef f809 	bl	80002b8 <__aeabi_dsub>
 80112a6:	ec41 0b10 	vmov	d0, r0, r1
 80112aa:	b005      	add	sp, #20
 80112ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80112b0:	4668      	mov	r0, sp
 80112b2:	f000 f8c9 	bl	8011448 <__ieee754_rem_pio2>
 80112b6:	f000 0003 	and.w	r0, r0, #3
 80112ba:	2801      	cmp	r0, #1
 80112bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112c0:	ed9d 0b00 	vldr	d0, [sp]
 80112c4:	d007      	beq.n	80112d6 <cos+0x5e>
 80112c6:	2802      	cmp	r0, #2
 80112c8:	d00e      	beq.n	80112e8 <cos+0x70>
 80112ca:	2800      	cmp	r0, #0
 80112cc:	d0de      	beq.n	801128c <cos+0x14>
 80112ce:	2001      	movs	r0, #1
 80112d0:	f000 ff66 	bl	80121a0 <__kernel_sin>
 80112d4:	e7dc      	b.n	8011290 <cos+0x18>
 80112d6:	f000 ff63 	bl	80121a0 <__kernel_sin>
 80112da:	ec53 2b10 	vmov	r2, r3, d0
 80112de:	ee10 0a10 	vmov	r0, s0
 80112e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80112e6:	e7de      	b.n	80112a6 <cos+0x2e>
 80112e8:	f000 fb52 	bl	8011990 <__kernel_cos>
 80112ec:	e7f5      	b.n	80112da <cos+0x62>
 80112ee:	bf00      	nop
	...
 80112f8:	3fe921fb 	.word	0x3fe921fb
 80112fc:	7fefffff 	.word	0x7fefffff

08011300 <sin>:
 8011300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011302:	ec51 0b10 	vmov	r0, r1, d0
 8011306:	4a20      	ldr	r2, [pc, #128]	; (8011388 <sin+0x88>)
 8011308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801130c:	4293      	cmp	r3, r2
 801130e:	dc07      	bgt.n	8011320 <sin+0x20>
 8011310:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011380 <sin+0x80>
 8011314:	2000      	movs	r0, #0
 8011316:	f000 ff43 	bl	80121a0 <__kernel_sin>
 801131a:	ec51 0b10 	vmov	r0, r1, d0
 801131e:	e007      	b.n	8011330 <sin+0x30>
 8011320:	4a1a      	ldr	r2, [pc, #104]	; (801138c <sin+0x8c>)
 8011322:	4293      	cmp	r3, r2
 8011324:	dd09      	ble.n	801133a <sin+0x3a>
 8011326:	ee10 2a10 	vmov	r2, s0
 801132a:	460b      	mov	r3, r1
 801132c:	f7ee ffc4 	bl	80002b8 <__aeabi_dsub>
 8011330:	ec41 0b10 	vmov	d0, r0, r1
 8011334:	b005      	add	sp, #20
 8011336:	f85d fb04 	ldr.w	pc, [sp], #4
 801133a:	4668      	mov	r0, sp
 801133c:	f000 f884 	bl	8011448 <__ieee754_rem_pio2>
 8011340:	f000 0003 	and.w	r0, r0, #3
 8011344:	2801      	cmp	r0, #1
 8011346:	ed9d 1b02 	vldr	d1, [sp, #8]
 801134a:	ed9d 0b00 	vldr	d0, [sp]
 801134e:	d004      	beq.n	801135a <sin+0x5a>
 8011350:	2802      	cmp	r0, #2
 8011352:	d005      	beq.n	8011360 <sin+0x60>
 8011354:	b970      	cbnz	r0, 8011374 <sin+0x74>
 8011356:	2001      	movs	r0, #1
 8011358:	e7dd      	b.n	8011316 <sin+0x16>
 801135a:	f000 fb19 	bl	8011990 <__kernel_cos>
 801135e:	e7dc      	b.n	801131a <sin+0x1a>
 8011360:	2001      	movs	r0, #1
 8011362:	f000 ff1d 	bl	80121a0 <__kernel_sin>
 8011366:	ec53 2b10 	vmov	r2, r3, d0
 801136a:	ee10 0a10 	vmov	r0, s0
 801136e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011372:	e7dd      	b.n	8011330 <sin+0x30>
 8011374:	f000 fb0c 	bl	8011990 <__kernel_cos>
 8011378:	e7f5      	b.n	8011366 <sin+0x66>
 801137a:	bf00      	nop
 801137c:	f3af 8000 	nop.w
	...
 8011388:	3fe921fb 	.word	0x3fe921fb
 801138c:	7fefffff 	.word	0x7fefffff

08011390 <sqrt>:
 8011390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011394:	ed2d 8b02 	vpush	{d8}
 8011398:	b08b      	sub	sp, #44	; 0x2c
 801139a:	ec55 4b10 	vmov	r4, r5, d0
 801139e:	f000 fa45 	bl	801182c <__ieee754_sqrt>
 80113a2:	4b26      	ldr	r3, [pc, #152]	; (801143c <sqrt+0xac>)
 80113a4:	eeb0 8a40 	vmov.f32	s16, s0
 80113a8:	eef0 8a60 	vmov.f32	s17, s1
 80113ac:	f993 6000 	ldrsb.w	r6, [r3]
 80113b0:	1c73      	adds	r3, r6, #1
 80113b2:	d02a      	beq.n	801140a <sqrt+0x7a>
 80113b4:	4622      	mov	r2, r4
 80113b6:	462b      	mov	r3, r5
 80113b8:	4620      	mov	r0, r4
 80113ba:	4629      	mov	r1, r5
 80113bc:	f7ef fbce 	bl	8000b5c <__aeabi_dcmpun>
 80113c0:	4607      	mov	r7, r0
 80113c2:	bb10      	cbnz	r0, 801140a <sqrt+0x7a>
 80113c4:	f04f 0800 	mov.w	r8, #0
 80113c8:	f04f 0900 	mov.w	r9, #0
 80113cc:	4642      	mov	r2, r8
 80113ce:	464b      	mov	r3, r9
 80113d0:	4620      	mov	r0, r4
 80113d2:	4629      	mov	r1, r5
 80113d4:	f7ef fb9a 	bl	8000b0c <__aeabi_dcmplt>
 80113d8:	b1b8      	cbz	r0, 801140a <sqrt+0x7a>
 80113da:	2301      	movs	r3, #1
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	4b18      	ldr	r3, [pc, #96]	; (8011440 <sqrt+0xb0>)
 80113e0:	9301      	str	r3, [sp, #4]
 80113e2:	9708      	str	r7, [sp, #32]
 80113e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80113e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80113ec:	b9b6      	cbnz	r6, 801141c <sqrt+0x8c>
 80113ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80113f2:	4668      	mov	r0, sp
 80113f4:	f001 f81c 	bl	8012430 <matherr>
 80113f8:	b1d0      	cbz	r0, 8011430 <sqrt+0xa0>
 80113fa:	9b08      	ldr	r3, [sp, #32]
 80113fc:	b11b      	cbz	r3, 8011406 <sqrt+0x76>
 80113fe:	f001 f8a1 	bl	8012544 <__errno>
 8011402:	9b08      	ldr	r3, [sp, #32]
 8011404:	6003      	str	r3, [r0, #0]
 8011406:	ed9d 8b06 	vldr	d8, [sp, #24]
 801140a:	eeb0 0a48 	vmov.f32	s0, s16
 801140e:	eef0 0a68 	vmov.f32	s1, s17
 8011412:	b00b      	add	sp, #44	; 0x2c
 8011414:	ecbd 8b02 	vpop	{d8}
 8011418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801141c:	4642      	mov	r2, r8
 801141e:	464b      	mov	r3, r9
 8011420:	4640      	mov	r0, r8
 8011422:	4649      	mov	r1, r9
 8011424:	f7ef fa2a 	bl	800087c <__aeabi_ddiv>
 8011428:	2e02      	cmp	r6, #2
 801142a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801142e:	d1e0      	bne.n	80113f2 <sqrt+0x62>
 8011430:	f001 f888 	bl	8012544 <__errno>
 8011434:	2321      	movs	r3, #33	; 0x21
 8011436:	6003      	str	r3, [r0, #0]
 8011438:	e7df      	b.n	80113fa <sqrt+0x6a>
 801143a:	bf00      	nop
 801143c:	2000000a 	.word	0x2000000a
 8011440:	08017604 	.word	0x08017604
 8011444:	00000000 	.word	0x00000000

08011448 <__ieee754_rem_pio2>:
 8011448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144c:	ec57 6b10 	vmov	r6, r7, d0
 8011450:	4bc3      	ldr	r3, [pc, #780]	; (8011760 <__ieee754_rem_pio2+0x318>)
 8011452:	b08d      	sub	sp, #52	; 0x34
 8011454:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011458:	4598      	cmp	r8, r3
 801145a:	4604      	mov	r4, r0
 801145c:	9704      	str	r7, [sp, #16]
 801145e:	dc07      	bgt.n	8011470 <__ieee754_rem_pio2+0x28>
 8011460:	2200      	movs	r2, #0
 8011462:	2300      	movs	r3, #0
 8011464:	ed84 0b00 	vstr	d0, [r4]
 8011468:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801146c:	2500      	movs	r5, #0
 801146e:	e027      	b.n	80114c0 <__ieee754_rem_pio2+0x78>
 8011470:	4bbc      	ldr	r3, [pc, #752]	; (8011764 <__ieee754_rem_pio2+0x31c>)
 8011472:	4598      	cmp	r8, r3
 8011474:	dc75      	bgt.n	8011562 <__ieee754_rem_pio2+0x11a>
 8011476:	9b04      	ldr	r3, [sp, #16]
 8011478:	4dbb      	ldr	r5, [pc, #748]	; (8011768 <__ieee754_rem_pio2+0x320>)
 801147a:	2b00      	cmp	r3, #0
 801147c:	ee10 0a10 	vmov	r0, s0
 8011480:	a3a9      	add	r3, pc, #676	; (adr r3, 8011728 <__ieee754_rem_pio2+0x2e0>)
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	4639      	mov	r1, r7
 8011488:	dd36      	ble.n	80114f8 <__ieee754_rem_pio2+0xb0>
 801148a:	f7ee ff15 	bl	80002b8 <__aeabi_dsub>
 801148e:	45a8      	cmp	r8, r5
 8011490:	4606      	mov	r6, r0
 8011492:	460f      	mov	r7, r1
 8011494:	d018      	beq.n	80114c8 <__ieee754_rem_pio2+0x80>
 8011496:	a3a6      	add	r3, pc, #664	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2e8>)
 8011498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149c:	f7ee ff0c 	bl	80002b8 <__aeabi_dsub>
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	e9c4 2300 	strd	r2, r3, [r4]
 80114a8:	4630      	mov	r0, r6
 80114aa:	4639      	mov	r1, r7
 80114ac:	f7ee ff04 	bl	80002b8 <__aeabi_dsub>
 80114b0:	a39f      	add	r3, pc, #636	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2e8>)
 80114b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b6:	f7ee feff 	bl	80002b8 <__aeabi_dsub>
 80114ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114be:	2501      	movs	r5, #1
 80114c0:	4628      	mov	r0, r5
 80114c2:	b00d      	add	sp, #52	; 0x34
 80114c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c8:	a39b      	add	r3, pc, #620	; (adr r3, 8011738 <__ieee754_rem_pio2+0x2f0>)
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	f7ee fef3 	bl	80002b8 <__aeabi_dsub>
 80114d2:	a39b      	add	r3, pc, #620	; (adr r3, 8011740 <__ieee754_rem_pio2+0x2f8>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	4606      	mov	r6, r0
 80114da:	460f      	mov	r7, r1
 80114dc:	f7ee feec 	bl	80002b8 <__aeabi_dsub>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	e9c4 2300 	strd	r2, r3, [r4]
 80114e8:	4630      	mov	r0, r6
 80114ea:	4639      	mov	r1, r7
 80114ec:	f7ee fee4 	bl	80002b8 <__aeabi_dsub>
 80114f0:	a393      	add	r3, pc, #588	; (adr r3, 8011740 <__ieee754_rem_pio2+0x2f8>)
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	e7de      	b.n	80114b6 <__ieee754_rem_pio2+0x6e>
 80114f8:	f7ee fee0 	bl	80002bc <__adddf3>
 80114fc:	45a8      	cmp	r8, r5
 80114fe:	4606      	mov	r6, r0
 8011500:	460f      	mov	r7, r1
 8011502:	d016      	beq.n	8011532 <__ieee754_rem_pio2+0xea>
 8011504:	a38a      	add	r3, pc, #552	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2e8>)
 8011506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150a:	f7ee fed7 	bl	80002bc <__adddf3>
 801150e:	4602      	mov	r2, r0
 8011510:	460b      	mov	r3, r1
 8011512:	e9c4 2300 	strd	r2, r3, [r4]
 8011516:	4630      	mov	r0, r6
 8011518:	4639      	mov	r1, r7
 801151a:	f7ee fecd 	bl	80002b8 <__aeabi_dsub>
 801151e:	a384      	add	r3, pc, #528	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2e8>)
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	f7ee feca 	bl	80002bc <__adddf3>
 8011528:	f04f 35ff 	mov.w	r5, #4294967295
 801152c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011530:	e7c6      	b.n	80114c0 <__ieee754_rem_pio2+0x78>
 8011532:	a381      	add	r3, pc, #516	; (adr r3, 8011738 <__ieee754_rem_pio2+0x2f0>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ee fec0 	bl	80002bc <__adddf3>
 801153c:	a380      	add	r3, pc, #512	; (adr r3, 8011740 <__ieee754_rem_pio2+0x2f8>)
 801153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011542:	4606      	mov	r6, r0
 8011544:	460f      	mov	r7, r1
 8011546:	f7ee feb9 	bl	80002bc <__adddf3>
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	e9c4 2300 	strd	r2, r3, [r4]
 8011552:	4630      	mov	r0, r6
 8011554:	4639      	mov	r1, r7
 8011556:	f7ee feaf 	bl	80002b8 <__aeabi_dsub>
 801155a:	a379      	add	r3, pc, #484	; (adr r3, 8011740 <__ieee754_rem_pio2+0x2f8>)
 801155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011560:	e7e0      	b.n	8011524 <__ieee754_rem_pio2+0xdc>
 8011562:	4b82      	ldr	r3, [pc, #520]	; (801176c <__ieee754_rem_pio2+0x324>)
 8011564:	4598      	cmp	r8, r3
 8011566:	f300 80d0 	bgt.w	801170a <__ieee754_rem_pio2+0x2c2>
 801156a:	f000 fed3 	bl	8012314 <fabs>
 801156e:	ec57 6b10 	vmov	r6, r7, d0
 8011572:	ee10 0a10 	vmov	r0, s0
 8011576:	a374      	add	r3, pc, #464	; (adr r3, 8011748 <__ieee754_rem_pio2+0x300>)
 8011578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157c:	4639      	mov	r1, r7
 801157e:	f7ef f853 	bl	8000628 <__aeabi_dmul>
 8011582:	2200      	movs	r2, #0
 8011584:	4b7a      	ldr	r3, [pc, #488]	; (8011770 <__ieee754_rem_pio2+0x328>)
 8011586:	f7ee fe99 	bl	80002bc <__adddf3>
 801158a:	f7ef fafd 	bl	8000b88 <__aeabi_d2iz>
 801158e:	4605      	mov	r5, r0
 8011590:	f7ee ffe0 	bl	8000554 <__aeabi_i2d>
 8011594:	a364      	add	r3, pc, #400	; (adr r3, 8011728 <__ieee754_rem_pio2+0x2e0>)
 8011596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801159e:	f7ef f843 	bl	8000628 <__aeabi_dmul>
 80115a2:	4602      	mov	r2, r0
 80115a4:	460b      	mov	r3, r1
 80115a6:	4630      	mov	r0, r6
 80115a8:	4639      	mov	r1, r7
 80115aa:	f7ee fe85 	bl	80002b8 <__aeabi_dsub>
 80115ae:	a360      	add	r3, pc, #384	; (adr r3, 8011730 <__ieee754_rem_pio2+0x2e8>)
 80115b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b4:	4682      	mov	sl, r0
 80115b6:	468b      	mov	fp, r1
 80115b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115bc:	f7ef f834 	bl	8000628 <__aeabi_dmul>
 80115c0:	2d1f      	cmp	r5, #31
 80115c2:	4606      	mov	r6, r0
 80115c4:	460f      	mov	r7, r1
 80115c6:	dc0c      	bgt.n	80115e2 <__ieee754_rem_pio2+0x19a>
 80115c8:	1e6a      	subs	r2, r5, #1
 80115ca:	4b6a      	ldr	r3, [pc, #424]	; (8011774 <__ieee754_rem_pio2+0x32c>)
 80115cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115d0:	4543      	cmp	r3, r8
 80115d2:	d006      	beq.n	80115e2 <__ieee754_rem_pio2+0x19a>
 80115d4:	4632      	mov	r2, r6
 80115d6:	463b      	mov	r3, r7
 80115d8:	4650      	mov	r0, sl
 80115da:	4659      	mov	r1, fp
 80115dc:	f7ee fe6c 	bl	80002b8 <__aeabi_dsub>
 80115e0:	e00e      	b.n	8011600 <__ieee754_rem_pio2+0x1b8>
 80115e2:	4632      	mov	r2, r6
 80115e4:	463b      	mov	r3, r7
 80115e6:	4650      	mov	r0, sl
 80115e8:	4659      	mov	r1, fp
 80115ea:	f7ee fe65 	bl	80002b8 <__aeabi_dsub>
 80115ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80115f2:	9305      	str	r3, [sp, #20]
 80115f4:	9a05      	ldr	r2, [sp, #20]
 80115f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	2b10      	cmp	r3, #16
 80115fe:	dc02      	bgt.n	8011606 <__ieee754_rem_pio2+0x1be>
 8011600:	e9c4 0100 	strd	r0, r1, [r4]
 8011604:	e039      	b.n	801167a <__ieee754_rem_pio2+0x232>
 8011606:	a34c      	add	r3, pc, #304	; (adr r3, 8011738 <__ieee754_rem_pio2+0x2f0>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011610:	f7ef f80a 	bl	8000628 <__aeabi_dmul>
 8011614:	4606      	mov	r6, r0
 8011616:	460f      	mov	r7, r1
 8011618:	4602      	mov	r2, r0
 801161a:	460b      	mov	r3, r1
 801161c:	4650      	mov	r0, sl
 801161e:	4659      	mov	r1, fp
 8011620:	f7ee fe4a 	bl	80002b8 <__aeabi_dsub>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4680      	mov	r8, r0
 801162a:	4689      	mov	r9, r1
 801162c:	4650      	mov	r0, sl
 801162e:	4659      	mov	r1, fp
 8011630:	f7ee fe42 	bl	80002b8 <__aeabi_dsub>
 8011634:	4632      	mov	r2, r6
 8011636:	463b      	mov	r3, r7
 8011638:	f7ee fe3e 	bl	80002b8 <__aeabi_dsub>
 801163c:	a340      	add	r3, pc, #256	; (adr r3, 8011740 <__ieee754_rem_pio2+0x2f8>)
 801163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011642:	4606      	mov	r6, r0
 8011644:	460f      	mov	r7, r1
 8011646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801164a:	f7ee ffed 	bl	8000628 <__aeabi_dmul>
 801164e:	4632      	mov	r2, r6
 8011650:	463b      	mov	r3, r7
 8011652:	f7ee fe31 	bl	80002b8 <__aeabi_dsub>
 8011656:	4602      	mov	r2, r0
 8011658:	460b      	mov	r3, r1
 801165a:	4606      	mov	r6, r0
 801165c:	460f      	mov	r7, r1
 801165e:	4640      	mov	r0, r8
 8011660:	4649      	mov	r1, r9
 8011662:	f7ee fe29 	bl	80002b8 <__aeabi_dsub>
 8011666:	9a05      	ldr	r2, [sp, #20]
 8011668:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	2b31      	cmp	r3, #49	; 0x31
 8011670:	dc20      	bgt.n	80116b4 <__ieee754_rem_pio2+0x26c>
 8011672:	e9c4 0100 	strd	r0, r1, [r4]
 8011676:	46c2      	mov	sl, r8
 8011678:	46cb      	mov	fp, r9
 801167a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801167e:	4650      	mov	r0, sl
 8011680:	4642      	mov	r2, r8
 8011682:	464b      	mov	r3, r9
 8011684:	4659      	mov	r1, fp
 8011686:	f7ee fe17 	bl	80002b8 <__aeabi_dsub>
 801168a:	463b      	mov	r3, r7
 801168c:	4632      	mov	r2, r6
 801168e:	f7ee fe13 	bl	80002b8 <__aeabi_dsub>
 8011692:	9b04      	ldr	r3, [sp, #16]
 8011694:	2b00      	cmp	r3, #0
 8011696:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801169a:	f6bf af11 	bge.w	80114c0 <__ieee754_rem_pio2+0x78>
 801169e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80116a2:	6063      	str	r3, [r4, #4]
 80116a4:	f8c4 8000 	str.w	r8, [r4]
 80116a8:	60a0      	str	r0, [r4, #8]
 80116aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80116ae:	60e3      	str	r3, [r4, #12]
 80116b0:	426d      	negs	r5, r5
 80116b2:	e705      	b.n	80114c0 <__ieee754_rem_pio2+0x78>
 80116b4:	a326      	add	r3, pc, #152	; (adr r3, 8011750 <__ieee754_rem_pio2+0x308>)
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116be:	f7ee ffb3 	bl	8000628 <__aeabi_dmul>
 80116c2:	4606      	mov	r6, r0
 80116c4:	460f      	mov	r7, r1
 80116c6:	4602      	mov	r2, r0
 80116c8:	460b      	mov	r3, r1
 80116ca:	4640      	mov	r0, r8
 80116cc:	4649      	mov	r1, r9
 80116ce:	f7ee fdf3 	bl	80002b8 <__aeabi_dsub>
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	4682      	mov	sl, r0
 80116d8:	468b      	mov	fp, r1
 80116da:	4640      	mov	r0, r8
 80116dc:	4649      	mov	r1, r9
 80116de:	f7ee fdeb 	bl	80002b8 <__aeabi_dsub>
 80116e2:	4632      	mov	r2, r6
 80116e4:	463b      	mov	r3, r7
 80116e6:	f7ee fde7 	bl	80002b8 <__aeabi_dsub>
 80116ea:	a31b      	add	r3, pc, #108	; (adr r3, 8011758 <__ieee754_rem_pio2+0x310>)
 80116ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f0:	4606      	mov	r6, r0
 80116f2:	460f      	mov	r7, r1
 80116f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116f8:	f7ee ff96 	bl	8000628 <__aeabi_dmul>
 80116fc:	4632      	mov	r2, r6
 80116fe:	463b      	mov	r3, r7
 8011700:	f7ee fdda 	bl	80002b8 <__aeabi_dsub>
 8011704:	4606      	mov	r6, r0
 8011706:	460f      	mov	r7, r1
 8011708:	e764      	b.n	80115d4 <__ieee754_rem_pio2+0x18c>
 801170a:	4b1b      	ldr	r3, [pc, #108]	; (8011778 <__ieee754_rem_pio2+0x330>)
 801170c:	4598      	cmp	r8, r3
 801170e:	dd35      	ble.n	801177c <__ieee754_rem_pio2+0x334>
 8011710:	ee10 2a10 	vmov	r2, s0
 8011714:	463b      	mov	r3, r7
 8011716:	4630      	mov	r0, r6
 8011718:	4639      	mov	r1, r7
 801171a:	f7ee fdcd 	bl	80002b8 <__aeabi_dsub>
 801171e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011722:	e9c4 0100 	strd	r0, r1, [r4]
 8011726:	e6a1      	b.n	801146c <__ieee754_rem_pio2+0x24>
 8011728:	54400000 	.word	0x54400000
 801172c:	3ff921fb 	.word	0x3ff921fb
 8011730:	1a626331 	.word	0x1a626331
 8011734:	3dd0b461 	.word	0x3dd0b461
 8011738:	1a600000 	.word	0x1a600000
 801173c:	3dd0b461 	.word	0x3dd0b461
 8011740:	2e037073 	.word	0x2e037073
 8011744:	3ba3198a 	.word	0x3ba3198a
 8011748:	6dc9c883 	.word	0x6dc9c883
 801174c:	3fe45f30 	.word	0x3fe45f30
 8011750:	2e000000 	.word	0x2e000000
 8011754:	3ba3198a 	.word	0x3ba3198a
 8011758:	252049c1 	.word	0x252049c1
 801175c:	397b839a 	.word	0x397b839a
 8011760:	3fe921fb 	.word	0x3fe921fb
 8011764:	4002d97b 	.word	0x4002d97b
 8011768:	3ff921fb 	.word	0x3ff921fb
 801176c:	413921fb 	.word	0x413921fb
 8011770:	3fe00000 	.word	0x3fe00000
 8011774:	0801760c 	.word	0x0801760c
 8011778:	7fefffff 	.word	0x7fefffff
 801177c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011780:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011784:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011788:	4630      	mov	r0, r6
 801178a:	460f      	mov	r7, r1
 801178c:	f7ef f9fc 	bl	8000b88 <__aeabi_d2iz>
 8011790:	f7ee fee0 	bl	8000554 <__aeabi_i2d>
 8011794:	4602      	mov	r2, r0
 8011796:	460b      	mov	r3, r1
 8011798:	4630      	mov	r0, r6
 801179a:	4639      	mov	r1, r7
 801179c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80117a0:	f7ee fd8a 	bl	80002b8 <__aeabi_dsub>
 80117a4:	2200      	movs	r2, #0
 80117a6:	4b1f      	ldr	r3, [pc, #124]	; (8011824 <__ieee754_rem_pio2+0x3dc>)
 80117a8:	f7ee ff3e 	bl	8000628 <__aeabi_dmul>
 80117ac:	460f      	mov	r7, r1
 80117ae:	4606      	mov	r6, r0
 80117b0:	f7ef f9ea 	bl	8000b88 <__aeabi_d2iz>
 80117b4:	f7ee fece 	bl	8000554 <__aeabi_i2d>
 80117b8:	4602      	mov	r2, r0
 80117ba:	460b      	mov	r3, r1
 80117bc:	4630      	mov	r0, r6
 80117be:	4639      	mov	r1, r7
 80117c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117c4:	f7ee fd78 	bl	80002b8 <__aeabi_dsub>
 80117c8:	2200      	movs	r2, #0
 80117ca:	4b16      	ldr	r3, [pc, #88]	; (8011824 <__ieee754_rem_pio2+0x3dc>)
 80117cc:	f7ee ff2c 	bl	8000628 <__aeabi_dmul>
 80117d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80117d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80117d8:	f04f 0803 	mov.w	r8, #3
 80117dc:	2600      	movs	r6, #0
 80117de:	2700      	movs	r7, #0
 80117e0:	4632      	mov	r2, r6
 80117e2:	463b      	mov	r3, r7
 80117e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80117e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80117ec:	f7ef f984 	bl	8000af8 <__aeabi_dcmpeq>
 80117f0:	b9b0      	cbnz	r0, 8011820 <__ieee754_rem_pio2+0x3d8>
 80117f2:	4b0d      	ldr	r3, [pc, #52]	; (8011828 <__ieee754_rem_pio2+0x3e0>)
 80117f4:	9301      	str	r3, [sp, #4]
 80117f6:	2302      	movs	r3, #2
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	462a      	mov	r2, r5
 80117fc:	4643      	mov	r3, r8
 80117fe:	4621      	mov	r1, r4
 8011800:	a806      	add	r0, sp, #24
 8011802:	f000 f98d 	bl	8011b20 <__kernel_rem_pio2>
 8011806:	9b04      	ldr	r3, [sp, #16]
 8011808:	2b00      	cmp	r3, #0
 801180a:	4605      	mov	r5, r0
 801180c:	f6bf ae58 	bge.w	80114c0 <__ieee754_rem_pio2+0x78>
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011816:	6063      	str	r3, [r4, #4]
 8011818:	68e3      	ldr	r3, [r4, #12]
 801181a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801181e:	e746      	b.n	80116ae <__ieee754_rem_pio2+0x266>
 8011820:	46d0      	mov	r8, sl
 8011822:	e7dd      	b.n	80117e0 <__ieee754_rem_pio2+0x398>
 8011824:	41700000 	.word	0x41700000
 8011828:	0801768c 	.word	0x0801768c

0801182c <__ieee754_sqrt>:
 801182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011830:	4955      	ldr	r1, [pc, #340]	; (8011988 <__ieee754_sqrt+0x15c>)
 8011832:	ec55 4b10 	vmov	r4, r5, d0
 8011836:	43a9      	bics	r1, r5
 8011838:	462b      	mov	r3, r5
 801183a:	462a      	mov	r2, r5
 801183c:	d112      	bne.n	8011864 <__ieee754_sqrt+0x38>
 801183e:	ee10 2a10 	vmov	r2, s0
 8011842:	ee10 0a10 	vmov	r0, s0
 8011846:	4629      	mov	r1, r5
 8011848:	f7ee feee 	bl	8000628 <__aeabi_dmul>
 801184c:	4602      	mov	r2, r0
 801184e:	460b      	mov	r3, r1
 8011850:	4620      	mov	r0, r4
 8011852:	4629      	mov	r1, r5
 8011854:	f7ee fd32 	bl	80002bc <__adddf3>
 8011858:	4604      	mov	r4, r0
 801185a:	460d      	mov	r5, r1
 801185c:	ec45 4b10 	vmov	d0, r4, r5
 8011860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011864:	2d00      	cmp	r5, #0
 8011866:	ee10 0a10 	vmov	r0, s0
 801186a:	4621      	mov	r1, r4
 801186c:	dc0f      	bgt.n	801188e <__ieee754_sqrt+0x62>
 801186e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011872:	4330      	orrs	r0, r6
 8011874:	d0f2      	beq.n	801185c <__ieee754_sqrt+0x30>
 8011876:	b155      	cbz	r5, 801188e <__ieee754_sqrt+0x62>
 8011878:	ee10 2a10 	vmov	r2, s0
 801187c:	4620      	mov	r0, r4
 801187e:	4629      	mov	r1, r5
 8011880:	f7ee fd1a 	bl	80002b8 <__aeabi_dsub>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	f7ee fff8 	bl	800087c <__aeabi_ddiv>
 801188c:	e7e4      	b.n	8011858 <__ieee754_sqrt+0x2c>
 801188e:	151b      	asrs	r3, r3, #20
 8011890:	d073      	beq.n	801197a <__ieee754_sqrt+0x14e>
 8011892:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011896:	07dd      	lsls	r5, r3, #31
 8011898:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801189c:	bf48      	it	mi
 801189e:	0fc8      	lsrmi	r0, r1, #31
 80118a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80118a4:	bf44      	itt	mi
 80118a6:	0049      	lslmi	r1, r1, #1
 80118a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80118ac:	2500      	movs	r5, #0
 80118ae:	1058      	asrs	r0, r3, #1
 80118b0:	0fcb      	lsrs	r3, r1, #31
 80118b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80118b6:	0049      	lsls	r1, r1, #1
 80118b8:	2316      	movs	r3, #22
 80118ba:	462c      	mov	r4, r5
 80118bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80118c0:	19a7      	adds	r7, r4, r6
 80118c2:	4297      	cmp	r7, r2
 80118c4:	bfde      	ittt	le
 80118c6:	19bc      	addle	r4, r7, r6
 80118c8:	1bd2      	suble	r2, r2, r7
 80118ca:	19ad      	addle	r5, r5, r6
 80118cc:	0fcf      	lsrs	r7, r1, #31
 80118ce:	3b01      	subs	r3, #1
 80118d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80118d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80118dc:	d1f0      	bne.n	80118c0 <__ieee754_sqrt+0x94>
 80118de:	f04f 0c20 	mov.w	ip, #32
 80118e2:	469e      	mov	lr, r3
 80118e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80118e8:	42a2      	cmp	r2, r4
 80118ea:	eb06 070e 	add.w	r7, r6, lr
 80118ee:	dc02      	bgt.n	80118f6 <__ieee754_sqrt+0xca>
 80118f0:	d112      	bne.n	8011918 <__ieee754_sqrt+0xec>
 80118f2:	428f      	cmp	r7, r1
 80118f4:	d810      	bhi.n	8011918 <__ieee754_sqrt+0xec>
 80118f6:	2f00      	cmp	r7, #0
 80118f8:	eb07 0e06 	add.w	lr, r7, r6
 80118fc:	da42      	bge.n	8011984 <__ieee754_sqrt+0x158>
 80118fe:	f1be 0f00 	cmp.w	lr, #0
 8011902:	db3f      	blt.n	8011984 <__ieee754_sqrt+0x158>
 8011904:	f104 0801 	add.w	r8, r4, #1
 8011908:	1b12      	subs	r2, r2, r4
 801190a:	428f      	cmp	r7, r1
 801190c:	bf88      	it	hi
 801190e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011912:	1bc9      	subs	r1, r1, r7
 8011914:	4433      	add	r3, r6
 8011916:	4644      	mov	r4, r8
 8011918:	0052      	lsls	r2, r2, #1
 801191a:	f1bc 0c01 	subs.w	ip, ip, #1
 801191e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011922:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011926:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801192a:	d1dd      	bne.n	80118e8 <__ieee754_sqrt+0xbc>
 801192c:	430a      	orrs	r2, r1
 801192e:	d006      	beq.n	801193e <__ieee754_sqrt+0x112>
 8011930:	1c5c      	adds	r4, r3, #1
 8011932:	bf13      	iteet	ne
 8011934:	3301      	addne	r3, #1
 8011936:	3501      	addeq	r5, #1
 8011938:	4663      	moveq	r3, ip
 801193a:	f023 0301 	bicne.w	r3, r3, #1
 801193e:	106a      	asrs	r2, r5, #1
 8011940:	085b      	lsrs	r3, r3, #1
 8011942:	07e9      	lsls	r1, r5, #31
 8011944:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011948:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801194c:	bf48      	it	mi
 801194e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011952:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011956:	461c      	mov	r4, r3
 8011958:	e780      	b.n	801185c <__ieee754_sqrt+0x30>
 801195a:	0aca      	lsrs	r2, r1, #11
 801195c:	3815      	subs	r0, #21
 801195e:	0549      	lsls	r1, r1, #21
 8011960:	2a00      	cmp	r2, #0
 8011962:	d0fa      	beq.n	801195a <__ieee754_sqrt+0x12e>
 8011964:	02d6      	lsls	r6, r2, #11
 8011966:	d50a      	bpl.n	801197e <__ieee754_sqrt+0x152>
 8011968:	f1c3 0420 	rsb	r4, r3, #32
 801196c:	fa21 f404 	lsr.w	r4, r1, r4
 8011970:	1e5d      	subs	r5, r3, #1
 8011972:	4099      	lsls	r1, r3
 8011974:	4322      	orrs	r2, r4
 8011976:	1b43      	subs	r3, r0, r5
 8011978:	e78b      	b.n	8011892 <__ieee754_sqrt+0x66>
 801197a:	4618      	mov	r0, r3
 801197c:	e7f0      	b.n	8011960 <__ieee754_sqrt+0x134>
 801197e:	0052      	lsls	r2, r2, #1
 8011980:	3301      	adds	r3, #1
 8011982:	e7ef      	b.n	8011964 <__ieee754_sqrt+0x138>
 8011984:	46a0      	mov	r8, r4
 8011986:	e7bf      	b.n	8011908 <__ieee754_sqrt+0xdc>
 8011988:	7ff00000 	.word	0x7ff00000
 801198c:	00000000 	.word	0x00000000

08011990 <__kernel_cos>:
 8011990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011994:	ec59 8b10 	vmov	r8, r9, d0
 8011998:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801199c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80119a0:	ed2d 8b02 	vpush	{d8}
 80119a4:	eeb0 8a41 	vmov.f32	s16, s2
 80119a8:	eef0 8a61 	vmov.f32	s17, s3
 80119ac:	da07      	bge.n	80119be <__kernel_cos+0x2e>
 80119ae:	ee10 0a10 	vmov	r0, s0
 80119b2:	4649      	mov	r1, r9
 80119b4:	f7ef f8e8 	bl	8000b88 <__aeabi_d2iz>
 80119b8:	2800      	cmp	r0, #0
 80119ba:	f000 8089 	beq.w	8011ad0 <__kernel_cos+0x140>
 80119be:	4642      	mov	r2, r8
 80119c0:	464b      	mov	r3, r9
 80119c2:	4640      	mov	r0, r8
 80119c4:	4649      	mov	r1, r9
 80119c6:	f7ee fe2f 	bl	8000628 <__aeabi_dmul>
 80119ca:	2200      	movs	r2, #0
 80119cc:	4b4e      	ldr	r3, [pc, #312]	; (8011b08 <__kernel_cos+0x178>)
 80119ce:	4604      	mov	r4, r0
 80119d0:	460d      	mov	r5, r1
 80119d2:	f7ee fe29 	bl	8000628 <__aeabi_dmul>
 80119d6:	a340      	add	r3, pc, #256	; (adr r3, 8011ad8 <__kernel_cos+0x148>)
 80119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119dc:	4682      	mov	sl, r0
 80119de:	468b      	mov	fp, r1
 80119e0:	4620      	mov	r0, r4
 80119e2:	4629      	mov	r1, r5
 80119e4:	f7ee fe20 	bl	8000628 <__aeabi_dmul>
 80119e8:	a33d      	add	r3, pc, #244	; (adr r3, 8011ae0 <__kernel_cos+0x150>)
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	f7ee fc65 	bl	80002bc <__adddf3>
 80119f2:	4622      	mov	r2, r4
 80119f4:	462b      	mov	r3, r5
 80119f6:	f7ee fe17 	bl	8000628 <__aeabi_dmul>
 80119fa:	a33b      	add	r3, pc, #236	; (adr r3, 8011ae8 <__kernel_cos+0x158>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	f7ee fc5a 	bl	80002b8 <__aeabi_dsub>
 8011a04:	4622      	mov	r2, r4
 8011a06:	462b      	mov	r3, r5
 8011a08:	f7ee fe0e 	bl	8000628 <__aeabi_dmul>
 8011a0c:	a338      	add	r3, pc, #224	; (adr r3, 8011af0 <__kernel_cos+0x160>)
 8011a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a12:	f7ee fc53 	bl	80002bc <__adddf3>
 8011a16:	4622      	mov	r2, r4
 8011a18:	462b      	mov	r3, r5
 8011a1a:	f7ee fe05 	bl	8000628 <__aeabi_dmul>
 8011a1e:	a336      	add	r3, pc, #216	; (adr r3, 8011af8 <__kernel_cos+0x168>)
 8011a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a24:	f7ee fc48 	bl	80002b8 <__aeabi_dsub>
 8011a28:	4622      	mov	r2, r4
 8011a2a:	462b      	mov	r3, r5
 8011a2c:	f7ee fdfc 	bl	8000628 <__aeabi_dmul>
 8011a30:	a333      	add	r3, pc, #204	; (adr r3, 8011b00 <__kernel_cos+0x170>)
 8011a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a36:	f7ee fc41 	bl	80002bc <__adddf3>
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	462b      	mov	r3, r5
 8011a3e:	f7ee fdf3 	bl	8000628 <__aeabi_dmul>
 8011a42:	4622      	mov	r2, r4
 8011a44:	462b      	mov	r3, r5
 8011a46:	f7ee fdef 	bl	8000628 <__aeabi_dmul>
 8011a4a:	ec53 2b18 	vmov	r2, r3, d8
 8011a4e:	4604      	mov	r4, r0
 8011a50:	460d      	mov	r5, r1
 8011a52:	4640      	mov	r0, r8
 8011a54:	4649      	mov	r1, r9
 8011a56:	f7ee fde7 	bl	8000628 <__aeabi_dmul>
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	4629      	mov	r1, r5
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ee fc29 	bl	80002b8 <__aeabi_dsub>
 8011a66:	4b29      	ldr	r3, [pc, #164]	; (8011b0c <__kernel_cos+0x17c>)
 8011a68:	429e      	cmp	r6, r3
 8011a6a:	4680      	mov	r8, r0
 8011a6c:	4689      	mov	r9, r1
 8011a6e:	dc11      	bgt.n	8011a94 <__kernel_cos+0x104>
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	4650      	mov	r0, sl
 8011a76:	4659      	mov	r1, fp
 8011a78:	f7ee fc1e 	bl	80002b8 <__aeabi_dsub>
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	4924      	ldr	r1, [pc, #144]	; (8011b10 <__kernel_cos+0x180>)
 8011a80:	4602      	mov	r2, r0
 8011a82:	2000      	movs	r0, #0
 8011a84:	f7ee fc18 	bl	80002b8 <__aeabi_dsub>
 8011a88:	ecbd 8b02 	vpop	{d8}
 8011a8c:	ec41 0b10 	vmov	d0, r0, r1
 8011a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a94:	4b1f      	ldr	r3, [pc, #124]	; (8011b14 <__kernel_cos+0x184>)
 8011a96:	491e      	ldr	r1, [pc, #120]	; (8011b10 <__kernel_cos+0x180>)
 8011a98:	429e      	cmp	r6, r3
 8011a9a:	bfcc      	ite	gt
 8011a9c:	4d1e      	ldrgt	r5, [pc, #120]	; (8011b18 <__kernel_cos+0x188>)
 8011a9e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011aa2:	2400      	movs	r4, #0
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	462b      	mov	r3, r5
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	f7ee fc05 	bl	80002b8 <__aeabi_dsub>
 8011aae:	4622      	mov	r2, r4
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	460f      	mov	r7, r1
 8011ab4:	462b      	mov	r3, r5
 8011ab6:	4650      	mov	r0, sl
 8011ab8:	4659      	mov	r1, fp
 8011aba:	f7ee fbfd 	bl	80002b8 <__aeabi_dsub>
 8011abe:	4642      	mov	r2, r8
 8011ac0:	464b      	mov	r3, r9
 8011ac2:	f7ee fbf9 	bl	80002b8 <__aeabi_dsub>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	460b      	mov	r3, r1
 8011aca:	4630      	mov	r0, r6
 8011acc:	4639      	mov	r1, r7
 8011ace:	e7d9      	b.n	8011a84 <__kernel_cos+0xf4>
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	490f      	ldr	r1, [pc, #60]	; (8011b10 <__kernel_cos+0x180>)
 8011ad4:	e7d8      	b.n	8011a88 <__kernel_cos+0xf8>
 8011ad6:	bf00      	nop
 8011ad8:	be8838d4 	.word	0xbe8838d4
 8011adc:	bda8fae9 	.word	0xbda8fae9
 8011ae0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011ae4:	3e21ee9e 	.word	0x3e21ee9e
 8011ae8:	809c52ad 	.word	0x809c52ad
 8011aec:	3e927e4f 	.word	0x3e927e4f
 8011af0:	19cb1590 	.word	0x19cb1590
 8011af4:	3efa01a0 	.word	0x3efa01a0
 8011af8:	16c15177 	.word	0x16c15177
 8011afc:	3f56c16c 	.word	0x3f56c16c
 8011b00:	5555554c 	.word	0x5555554c
 8011b04:	3fa55555 	.word	0x3fa55555
 8011b08:	3fe00000 	.word	0x3fe00000
 8011b0c:	3fd33332 	.word	0x3fd33332
 8011b10:	3ff00000 	.word	0x3ff00000
 8011b14:	3fe90000 	.word	0x3fe90000
 8011b18:	3fd20000 	.word	0x3fd20000
 8011b1c:	00000000 	.word	0x00000000

08011b20 <__kernel_rem_pio2>:
 8011b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b24:	ed2d 8b02 	vpush	{d8}
 8011b28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011b2c:	1ed4      	subs	r4, r2, #3
 8011b2e:	9308      	str	r3, [sp, #32]
 8011b30:	9101      	str	r1, [sp, #4]
 8011b32:	4bc5      	ldr	r3, [pc, #788]	; (8011e48 <__kernel_rem_pio2+0x328>)
 8011b34:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011b36:	9009      	str	r0, [sp, #36]	; 0x24
 8011b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b3c:	9304      	str	r3, [sp, #16]
 8011b3e:	9b08      	ldr	r3, [sp, #32]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	9307      	str	r3, [sp, #28]
 8011b44:	2318      	movs	r3, #24
 8011b46:	fb94 f4f3 	sdiv	r4, r4, r3
 8011b4a:	f06f 0317 	mvn.w	r3, #23
 8011b4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011b52:	fb04 3303 	mla	r3, r4, r3, r3
 8011b56:	eb03 0a02 	add.w	sl, r3, r2
 8011b5a:	9b04      	ldr	r3, [sp, #16]
 8011b5c:	9a07      	ldr	r2, [sp, #28]
 8011b5e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011e38 <__kernel_rem_pio2+0x318>
 8011b62:	eb03 0802 	add.w	r8, r3, r2
 8011b66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011b68:	1aa7      	subs	r7, r4, r2
 8011b6a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011b6e:	ae22      	add	r6, sp, #136	; 0x88
 8011b70:	2500      	movs	r5, #0
 8011b72:	4545      	cmp	r5, r8
 8011b74:	dd13      	ble.n	8011b9e <__kernel_rem_pio2+0x7e>
 8011b76:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011e38 <__kernel_rem_pio2+0x318>
 8011b7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011b7e:	2600      	movs	r6, #0
 8011b80:	9b04      	ldr	r3, [sp, #16]
 8011b82:	429e      	cmp	r6, r3
 8011b84:	dc32      	bgt.n	8011bec <__kernel_rem_pio2+0xcc>
 8011b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b88:	9302      	str	r3, [sp, #8]
 8011b8a:	9b08      	ldr	r3, [sp, #32]
 8011b8c:	199d      	adds	r5, r3, r6
 8011b8e:	ab22      	add	r3, sp, #136	; 0x88
 8011b90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011b94:	9306      	str	r3, [sp, #24]
 8011b96:	ec59 8b18 	vmov	r8, r9, d8
 8011b9a:	2700      	movs	r7, #0
 8011b9c:	e01f      	b.n	8011bde <__kernel_rem_pio2+0xbe>
 8011b9e:	42ef      	cmn	r7, r5
 8011ba0:	d407      	bmi.n	8011bb2 <__kernel_rem_pio2+0x92>
 8011ba2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011ba6:	f7ee fcd5 	bl	8000554 <__aeabi_i2d>
 8011baa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011bae:	3501      	adds	r5, #1
 8011bb0:	e7df      	b.n	8011b72 <__kernel_rem_pio2+0x52>
 8011bb2:	ec51 0b18 	vmov	r0, r1, d8
 8011bb6:	e7f8      	b.n	8011baa <__kernel_rem_pio2+0x8a>
 8011bb8:	9906      	ldr	r1, [sp, #24]
 8011bba:	9d02      	ldr	r5, [sp, #8]
 8011bbc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011bc0:	9106      	str	r1, [sp, #24]
 8011bc2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011bc6:	9502      	str	r5, [sp, #8]
 8011bc8:	f7ee fd2e 	bl	8000628 <__aeabi_dmul>
 8011bcc:	4602      	mov	r2, r0
 8011bce:	460b      	mov	r3, r1
 8011bd0:	4640      	mov	r0, r8
 8011bd2:	4649      	mov	r1, r9
 8011bd4:	f7ee fb72 	bl	80002bc <__adddf3>
 8011bd8:	3701      	adds	r7, #1
 8011bda:	4680      	mov	r8, r0
 8011bdc:	4689      	mov	r9, r1
 8011bde:	9b07      	ldr	r3, [sp, #28]
 8011be0:	429f      	cmp	r7, r3
 8011be2:	dde9      	ble.n	8011bb8 <__kernel_rem_pio2+0x98>
 8011be4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011be8:	3601      	adds	r6, #1
 8011bea:	e7c9      	b.n	8011b80 <__kernel_rem_pio2+0x60>
 8011bec:	9b04      	ldr	r3, [sp, #16]
 8011bee:	aa0e      	add	r2, sp, #56	; 0x38
 8011bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bf4:	930c      	str	r3, [sp, #48]	; 0x30
 8011bf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011bf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011bfc:	9c04      	ldr	r4, [sp, #16]
 8011bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c00:	ab9a      	add	r3, sp, #616	; 0x268
 8011c02:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011c06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c0e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011c12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011c16:	ab9a      	add	r3, sp, #616	; 0x268
 8011c18:	445b      	add	r3, fp
 8011c1a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011c1e:	2500      	movs	r5, #0
 8011c20:	1b63      	subs	r3, r4, r5
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	dc78      	bgt.n	8011d18 <__kernel_rem_pio2+0x1f8>
 8011c26:	4650      	mov	r0, sl
 8011c28:	ec49 8b10 	vmov	d0, r8, r9
 8011c2c:	f000 fc04 	bl	8012438 <scalbn>
 8011c30:	ec57 6b10 	vmov	r6, r7, d0
 8011c34:	2200      	movs	r2, #0
 8011c36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011c3a:	ee10 0a10 	vmov	r0, s0
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee fcf2 	bl	8000628 <__aeabi_dmul>
 8011c44:	ec41 0b10 	vmov	d0, r0, r1
 8011c48:	f000 fb6e 	bl	8012328 <floor>
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	ec51 0b10 	vmov	r0, r1, d0
 8011c52:	4b7e      	ldr	r3, [pc, #504]	; (8011e4c <__kernel_rem_pio2+0x32c>)
 8011c54:	f7ee fce8 	bl	8000628 <__aeabi_dmul>
 8011c58:	4602      	mov	r2, r0
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	4639      	mov	r1, r7
 8011c60:	f7ee fb2a 	bl	80002b8 <__aeabi_dsub>
 8011c64:	460f      	mov	r7, r1
 8011c66:	4606      	mov	r6, r0
 8011c68:	f7ee ff8e 	bl	8000b88 <__aeabi_d2iz>
 8011c6c:	9006      	str	r0, [sp, #24]
 8011c6e:	f7ee fc71 	bl	8000554 <__aeabi_i2d>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	4630      	mov	r0, r6
 8011c78:	4639      	mov	r1, r7
 8011c7a:	f7ee fb1d 	bl	80002b8 <__aeabi_dsub>
 8011c7e:	f1ba 0f00 	cmp.w	sl, #0
 8011c82:	4606      	mov	r6, r0
 8011c84:	460f      	mov	r7, r1
 8011c86:	dd6c      	ble.n	8011d62 <__kernel_rem_pio2+0x242>
 8011c88:	1e62      	subs	r2, r4, #1
 8011c8a:	ab0e      	add	r3, sp, #56	; 0x38
 8011c8c:	f1ca 0118 	rsb	r1, sl, #24
 8011c90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011c94:	9d06      	ldr	r5, [sp, #24]
 8011c96:	fa40 f301 	asr.w	r3, r0, r1
 8011c9a:	441d      	add	r5, r3
 8011c9c:	408b      	lsls	r3, r1
 8011c9e:	1ac0      	subs	r0, r0, r3
 8011ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8011ca2:	9506      	str	r5, [sp, #24]
 8011ca4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011ca8:	f1ca 0317 	rsb	r3, sl, #23
 8011cac:	fa40 f303 	asr.w	r3, r0, r3
 8011cb0:	9302      	str	r3, [sp, #8]
 8011cb2:	9b02      	ldr	r3, [sp, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	dd62      	ble.n	8011d7e <__kernel_rem_pio2+0x25e>
 8011cb8:	9b06      	ldr	r3, [sp, #24]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	9306      	str	r3, [sp, #24]
 8011cc0:	4615      	mov	r5, r2
 8011cc2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011cc6:	4294      	cmp	r4, r2
 8011cc8:	f300 8095 	bgt.w	8011df6 <__kernel_rem_pio2+0x2d6>
 8011ccc:	f1ba 0f00 	cmp.w	sl, #0
 8011cd0:	dd07      	ble.n	8011ce2 <__kernel_rem_pio2+0x1c2>
 8011cd2:	f1ba 0f01 	cmp.w	sl, #1
 8011cd6:	f000 80a2 	beq.w	8011e1e <__kernel_rem_pio2+0x2fe>
 8011cda:	f1ba 0f02 	cmp.w	sl, #2
 8011cde:	f000 80c1 	beq.w	8011e64 <__kernel_rem_pio2+0x344>
 8011ce2:	9b02      	ldr	r3, [sp, #8]
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	d14a      	bne.n	8011d7e <__kernel_rem_pio2+0x25e>
 8011ce8:	4632      	mov	r2, r6
 8011cea:	463b      	mov	r3, r7
 8011cec:	2000      	movs	r0, #0
 8011cee:	4958      	ldr	r1, [pc, #352]	; (8011e50 <__kernel_rem_pio2+0x330>)
 8011cf0:	f7ee fae2 	bl	80002b8 <__aeabi_dsub>
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	460f      	mov	r7, r1
 8011cf8:	2d00      	cmp	r5, #0
 8011cfa:	d040      	beq.n	8011d7e <__kernel_rem_pio2+0x25e>
 8011cfc:	4650      	mov	r0, sl
 8011cfe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011e40 <__kernel_rem_pio2+0x320>
 8011d02:	f000 fb99 	bl	8012438 <scalbn>
 8011d06:	4630      	mov	r0, r6
 8011d08:	4639      	mov	r1, r7
 8011d0a:	ec53 2b10 	vmov	r2, r3, d0
 8011d0e:	f7ee fad3 	bl	80002b8 <__aeabi_dsub>
 8011d12:	4606      	mov	r6, r0
 8011d14:	460f      	mov	r7, r1
 8011d16:	e032      	b.n	8011d7e <__kernel_rem_pio2+0x25e>
 8011d18:	2200      	movs	r2, #0
 8011d1a:	4b4e      	ldr	r3, [pc, #312]	; (8011e54 <__kernel_rem_pio2+0x334>)
 8011d1c:	4640      	mov	r0, r8
 8011d1e:	4649      	mov	r1, r9
 8011d20:	f7ee fc82 	bl	8000628 <__aeabi_dmul>
 8011d24:	f7ee ff30 	bl	8000b88 <__aeabi_d2iz>
 8011d28:	f7ee fc14 	bl	8000554 <__aeabi_i2d>
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	4b4a      	ldr	r3, [pc, #296]	; (8011e58 <__kernel_rem_pio2+0x338>)
 8011d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d34:	f7ee fc78 	bl	8000628 <__aeabi_dmul>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	4649      	mov	r1, r9
 8011d40:	f7ee faba 	bl	80002b8 <__aeabi_dsub>
 8011d44:	f7ee ff20 	bl	8000b88 <__aeabi_d2iz>
 8011d48:	ab0e      	add	r3, sp, #56	; 0x38
 8011d4a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011d4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d56:	f7ee fab1 	bl	80002bc <__adddf3>
 8011d5a:	3501      	adds	r5, #1
 8011d5c:	4680      	mov	r8, r0
 8011d5e:	4689      	mov	r9, r1
 8011d60:	e75e      	b.n	8011c20 <__kernel_rem_pio2+0x100>
 8011d62:	d105      	bne.n	8011d70 <__kernel_rem_pio2+0x250>
 8011d64:	1e63      	subs	r3, r4, #1
 8011d66:	aa0e      	add	r2, sp, #56	; 0x38
 8011d68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011d6c:	15c3      	asrs	r3, r0, #23
 8011d6e:	e79f      	b.n	8011cb0 <__kernel_rem_pio2+0x190>
 8011d70:	2200      	movs	r2, #0
 8011d72:	4b3a      	ldr	r3, [pc, #232]	; (8011e5c <__kernel_rem_pio2+0x33c>)
 8011d74:	f7ee fede 	bl	8000b34 <__aeabi_dcmpge>
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d139      	bne.n	8011df0 <__kernel_rem_pio2+0x2d0>
 8011d7c:	9002      	str	r0, [sp, #8]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	2300      	movs	r3, #0
 8011d82:	4630      	mov	r0, r6
 8011d84:	4639      	mov	r1, r7
 8011d86:	f7ee feb7 	bl	8000af8 <__aeabi_dcmpeq>
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	f000 80c7 	beq.w	8011f1e <__kernel_rem_pio2+0x3fe>
 8011d90:	1e65      	subs	r5, r4, #1
 8011d92:	462b      	mov	r3, r5
 8011d94:	2200      	movs	r2, #0
 8011d96:	9904      	ldr	r1, [sp, #16]
 8011d98:	428b      	cmp	r3, r1
 8011d9a:	da6a      	bge.n	8011e72 <__kernel_rem_pio2+0x352>
 8011d9c:	2a00      	cmp	r2, #0
 8011d9e:	f000 8088 	beq.w	8011eb2 <__kernel_rem_pio2+0x392>
 8011da2:	ab0e      	add	r3, sp, #56	; 0x38
 8011da4:	f1aa 0a18 	sub.w	sl, sl, #24
 8011da8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f000 80b4 	beq.w	8011f1a <__kernel_rem_pio2+0x3fa>
 8011db2:	4650      	mov	r0, sl
 8011db4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011e40 <__kernel_rem_pio2+0x320>
 8011db8:	f000 fb3e 	bl	8012438 <scalbn>
 8011dbc:	00ec      	lsls	r4, r5, #3
 8011dbe:	ab72      	add	r3, sp, #456	; 0x1c8
 8011dc0:	191e      	adds	r6, r3, r4
 8011dc2:	ec59 8b10 	vmov	r8, r9, d0
 8011dc6:	f106 0a08 	add.w	sl, r6, #8
 8011dca:	462f      	mov	r7, r5
 8011dcc:	2f00      	cmp	r7, #0
 8011dce:	f280 80df 	bge.w	8011f90 <__kernel_rem_pio2+0x470>
 8011dd2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011e38 <__kernel_rem_pio2+0x318>
 8011dd6:	f04f 0a00 	mov.w	sl, #0
 8011dda:	eba5 030a 	sub.w	r3, r5, sl
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f2c0 810a 	blt.w	8011ff8 <__kernel_rem_pio2+0x4d8>
 8011de4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011e60 <__kernel_rem_pio2+0x340>
 8011de8:	ec59 8b18 	vmov	r8, r9, d8
 8011dec:	2700      	movs	r7, #0
 8011dee:	e0f5      	b.n	8011fdc <__kernel_rem_pio2+0x4bc>
 8011df0:	2302      	movs	r3, #2
 8011df2:	9302      	str	r3, [sp, #8]
 8011df4:	e760      	b.n	8011cb8 <__kernel_rem_pio2+0x198>
 8011df6:	ab0e      	add	r3, sp, #56	; 0x38
 8011df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dfc:	b94d      	cbnz	r5, 8011e12 <__kernel_rem_pio2+0x2f2>
 8011dfe:	b12b      	cbz	r3, 8011e0c <__kernel_rem_pio2+0x2ec>
 8011e00:	a80e      	add	r0, sp, #56	; 0x38
 8011e02:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011e06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	3201      	adds	r2, #1
 8011e0e:	461d      	mov	r5, r3
 8011e10:	e759      	b.n	8011cc6 <__kernel_rem_pio2+0x1a6>
 8011e12:	a80e      	add	r0, sp, #56	; 0x38
 8011e14:	1acb      	subs	r3, r1, r3
 8011e16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011e1a:	462b      	mov	r3, r5
 8011e1c:	e7f6      	b.n	8011e0c <__kernel_rem_pio2+0x2ec>
 8011e1e:	1e62      	subs	r2, r4, #1
 8011e20:	ab0e      	add	r3, sp, #56	; 0x38
 8011e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011e2a:	a90e      	add	r1, sp, #56	; 0x38
 8011e2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011e30:	e757      	b.n	8011ce2 <__kernel_rem_pio2+0x1c2>
 8011e32:	bf00      	nop
 8011e34:	f3af 8000 	nop.w
	...
 8011e44:	3ff00000 	.word	0x3ff00000
 8011e48:	080177d8 	.word	0x080177d8
 8011e4c:	40200000 	.word	0x40200000
 8011e50:	3ff00000 	.word	0x3ff00000
 8011e54:	3e700000 	.word	0x3e700000
 8011e58:	41700000 	.word	0x41700000
 8011e5c:	3fe00000 	.word	0x3fe00000
 8011e60:	08017798 	.word	0x08017798
 8011e64:	1e62      	subs	r2, r4, #1
 8011e66:	ab0e      	add	r3, sp, #56	; 0x38
 8011e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011e70:	e7db      	b.n	8011e2a <__kernel_rem_pio2+0x30a>
 8011e72:	a90e      	add	r1, sp, #56	; 0x38
 8011e74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	430a      	orrs	r2, r1
 8011e7c:	e78b      	b.n	8011d96 <__kernel_rem_pio2+0x276>
 8011e7e:	3301      	adds	r3, #1
 8011e80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011e84:	2900      	cmp	r1, #0
 8011e86:	d0fa      	beq.n	8011e7e <__kernel_rem_pio2+0x35e>
 8011e88:	9a08      	ldr	r2, [sp, #32]
 8011e8a:	4422      	add	r2, r4
 8011e8c:	00d2      	lsls	r2, r2, #3
 8011e8e:	a922      	add	r1, sp, #136	; 0x88
 8011e90:	18e3      	adds	r3, r4, r3
 8011e92:	9206      	str	r2, [sp, #24]
 8011e94:	440a      	add	r2, r1
 8011e96:	9302      	str	r3, [sp, #8]
 8011e98:	f10b 0108 	add.w	r1, fp, #8
 8011e9c:	f102 0308 	add.w	r3, r2, #8
 8011ea0:	1c66      	adds	r6, r4, #1
 8011ea2:	910a      	str	r1, [sp, #40]	; 0x28
 8011ea4:	2500      	movs	r5, #0
 8011ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8011ea8:	9b02      	ldr	r3, [sp, #8]
 8011eaa:	42b3      	cmp	r3, r6
 8011eac:	da04      	bge.n	8011eb8 <__kernel_rem_pio2+0x398>
 8011eae:	461c      	mov	r4, r3
 8011eb0:	e6a6      	b.n	8011c00 <__kernel_rem_pio2+0xe0>
 8011eb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	e7e3      	b.n	8011e80 <__kernel_rem_pio2+0x360>
 8011eb8:	9b06      	ldr	r3, [sp, #24]
 8011eba:	18ef      	adds	r7, r5, r3
 8011ebc:	ab22      	add	r3, sp, #136	; 0x88
 8011ebe:	441f      	add	r7, r3
 8011ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ec2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011ec6:	f7ee fb45 	bl	8000554 <__aeabi_i2d>
 8011eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ecc:	461c      	mov	r4, r3
 8011ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ed0:	e9c7 0100 	strd	r0, r1, [r7]
 8011ed4:	eb03 0b05 	add.w	fp, r3, r5
 8011ed8:	2700      	movs	r7, #0
 8011eda:	f04f 0800 	mov.w	r8, #0
 8011ede:	f04f 0900 	mov.w	r9, #0
 8011ee2:	9b07      	ldr	r3, [sp, #28]
 8011ee4:	429f      	cmp	r7, r3
 8011ee6:	dd08      	ble.n	8011efa <__kernel_rem_pio2+0x3da>
 8011ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eea:	aa72      	add	r2, sp, #456	; 0x1c8
 8011eec:	18eb      	adds	r3, r5, r3
 8011eee:	4413      	add	r3, r2
 8011ef0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011ef4:	3601      	adds	r6, #1
 8011ef6:	3508      	adds	r5, #8
 8011ef8:	e7d6      	b.n	8011ea8 <__kernel_rem_pio2+0x388>
 8011efa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011efe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011f02:	f7ee fb91 	bl	8000628 <__aeabi_dmul>
 8011f06:	4602      	mov	r2, r0
 8011f08:	460b      	mov	r3, r1
 8011f0a:	4640      	mov	r0, r8
 8011f0c:	4649      	mov	r1, r9
 8011f0e:	f7ee f9d5 	bl	80002bc <__adddf3>
 8011f12:	3701      	adds	r7, #1
 8011f14:	4680      	mov	r8, r0
 8011f16:	4689      	mov	r9, r1
 8011f18:	e7e3      	b.n	8011ee2 <__kernel_rem_pio2+0x3c2>
 8011f1a:	3d01      	subs	r5, #1
 8011f1c:	e741      	b.n	8011da2 <__kernel_rem_pio2+0x282>
 8011f1e:	f1ca 0000 	rsb	r0, sl, #0
 8011f22:	ec47 6b10 	vmov	d0, r6, r7
 8011f26:	f000 fa87 	bl	8012438 <scalbn>
 8011f2a:	ec57 6b10 	vmov	r6, r7, d0
 8011f2e:	2200      	movs	r2, #0
 8011f30:	4b99      	ldr	r3, [pc, #612]	; (8012198 <__kernel_rem_pio2+0x678>)
 8011f32:	ee10 0a10 	vmov	r0, s0
 8011f36:	4639      	mov	r1, r7
 8011f38:	f7ee fdfc 	bl	8000b34 <__aeabi_dcmpge>
 8011f3c:	b1f8      	cbz	r0, 8011f7e <__kernel_rem_pio2+0x45e>
 8011f3e:	2200      	movs	r2, #0
 8011f40:	4b96      	ldr	r3, [pc, #600]	; (801219c <__kernel_rem_pio2+0x67c>)
 8011f42:	4630      	mov	r0, r6
 8011f44:	4639      	mov	r1, r7
 8011f46:	f7ee fb6f 	bl	8000628 <__aeabi_dmul>
 8011f4a:	f7ee fe1d 	bl	8000b88 <__aeabi_d2iz>
 8011f4e:	4680      	mov	r8, r0
 8011f50:	f7ee fb00 	bl	8000554 <__aeabi_i2d>
 8011f54:	2200      	movs	r2, #0
 8011f56:	4b90      	ldr	r3, [pc, #576]	; (8012198 <__kernel_rem_pio2+0x678>)
 8011f58:	f7ee fb66 	bl	8000628 <__aeabi_dmul>
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	4602      	mov	r2, r0
 8011f60:	4639      	mov	r1, r7
 8011f62:	4630      	mov	r0, r6
 8011f64:	f7ee f9a8 	bl	80002b8 <__aeabi_dsub>
 8011f68:	f7ee fe0e 	bl	8000b88 <__aeabi_d2iz>
 8011f6c:	1c65      	adds	r5, r4, #1
 8011f6e:	ab0e      	add	r3, sp, #56	; 0x38
 8011f70:	f10a 0a18 	add.w	sl, sl, #24
 8011f74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011f78:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011f7c:	e719      	b.n	8011db2 <__kernel_rem_pio2+0x292>
 8011f7e:	4630      	mov	r0, r6
 8011f80:	4639      	mov	r1, r7
 8011f82:	f7ee fe01 	bl	8000b88 <__aeabi_d2iz>
 8011f86:	ab0e      	add	r3, sp, #56	; 0x38
 8011f88:	4625      	mov	r5, r4
 8011f8a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011f8e:	e710      	b.n	8011db2 <__kernel_rem_pio2+0x292>
 8011f90:	ab0e      	add	r3, sp, #56	; 0x38
 8011f92:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011f96:	f7ee fadd 	bl	8000554 <__aeabi_i2d>
 8011f9a:	4642      	mov	r2, r8
 8011f9c:	464b      	mov	r3, r9
 8011f9e:	f7ee fb43 	bl	8000628 <__aeabi_dmul>
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011fa8:	4b7c      	ldr	r3, [pc, #496]	; (801219c <__kernel_rem_pio2+0x67c>)
 8011faa:	4640      	mov	r0, r8
 8011fac:	4649      	mov	r1, r9
 8011fae:	f7ee fb3b 	bl	8000628 <__aeabi_dmul>
 8011fb2:	3f01      	subs	r7, #1
 8011fb4:	4680      	mov	r8, r0
 8011fb6:	4689      	mov	r9, r1
 8011fb8:	e708      	b.n	8011dcc <__kernel_rem_pio2+0x2ac>
 8011fba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011fc6:	f7ee fb2f 	bl	8000628 <__aeabi_dmul>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	460b      	mov	r3, r1
 8011fce:	4640      	mov	r0, r8
 8011fd0:	4649      	mov	r1, r9
 8011fd2:	f7ee f973 	bl	80002bc <__adddf3>
 8011fd6:	3701      	adds	r7, #1
 8011fd8:	4680      	mov	r8, r0
 8011fda:	4689      	mov	r9, r1
 8011fdc:	9b04      	ldr	r3, [sp, #16]
 8011fde:	429f      	cmp	r7, r3
 8011fe0:	dc01      	bgt.n	8011fe6 <__kernel_rem_pio2+0x4c6>
 8011fe2:	45ba      	cmp	sl, r7
 8011fe4:	dae9      	bge.n	8011fba <__kernel_rem_pio2+0x49a>
 8011fe6:	ab4a      	add	r3, sp, #296	; 0x128
 8011fe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011fec:	e9c3 8900 	strd	r8, r9, [r3]
 8011ff0:	f10a 0a01 	add.w	sl, sl, #1
 8011ff4:	3e08      	subs	r6, #8
 8011ff6:	e6f0      	b.n	8011dda <__kernel_rem_pio2+0x2ba>
 8011ff8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011ffa:	2b03      	cmp	r3, #3
 8011ffc:	d85b      	bhi.n	80120b6 <__kernel_rem_pio2+0x596>
 8011ffe:	e8df f003 	tbb	[pc, r3]
 8012002:	264a      	.short	0x264a
 8012004:	0226      	.short	0x0226
 8012006:	ab9a      	add	r3, sp, #616	; 0x268
 8012008:	441c      	add	r4, r3
 801200a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801200e:	46a2      	mov	sl, r4
 8012010:	46ab      	mov	fp, r5
 8012012:	f1bb 0f00 	cmp.w	fp, #0
 8012016:	dc6c      	bgt.n	80120f2 <__kernel_rem_pio2+0x5d2>
 8012018:	46a2      	mov	sl, r4
 801201a:	46ab      	mov	fp, r5
 801201c:	f1bb 0f01 	cmp.w	fp, #1
 8012020:	f300 8086 	bgt.w	8012130 <__kernel_rem_pio2+0x610>
 8012024:	2000      	movs	r0, #0
 8012026:	2100      	movs	r1, #0
 8012028:	2d01      	cmp	r5, #1
 801202a:	f300 80a0 	bgt.w	801216e <__kernel_rem_pio2+0x64e>
 801202e:	9b02      	ldr	r3, [sp, #8]
 8012030:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012034:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012038:	2b00      	cmp	r3, #0
 801203a:	f040 809e 	bne.w	801217a <__kernel_rem_pio2+0x65a>
 801203e:	9b01      	ldr	r3, [sp, #4]
 8012040:	e9c3 7800 	strd	r7, r8, [r3]
 8012044:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012048:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801204c:	e033      	b.n	80120b6 <__kernel_rem_pio2+0x596>
 801204e:	3408      	adds	r4, #8
 8012050:	ab4a      	add	r3, sp, #296	; 0x128
 8012052:	441c      	add	r4, r3
 8012054:	462e      	mov	r6, r5
 8012056:	2000      	movs	r0, #0
 8012058:	2100      	movs	r1, #0
 801205a:	2e00      	cmp	r6, #0
 801205c:	da3a      	bge.n	80120d4 <__kernel_rem_pio2+0x5b4>
 801205e:	9b02      	ldr	r3, [sp, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d03d      	beq.n	80120e0 <__kernel_rem_pio2+0x5c0>
 8012064:	4602      	mov	r2, r0
 8012066:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801206a:	9c01      	ldr	r4, [sp, #4]
 801206c:	e9c4 2300 	strd	r2, r3, [r4]
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012078:	f7ee f91e 	bl	80002b8 <__aeabi_dsub>
 801207c:	ae4c      	add	r6, sp, #304	; 0x130
 801207e:	2401      	movs	r4, #1
 8012080:	42a5      	cmp	r5, r4
 8012082:	da30      	bge.n	80120e6 <__kernel_rem_pio2+0x5c6>
 8012084:	9b02      	ldr	r3, [sp, #8]
 8012086:	b113      	cbz	r3, 801208e <__kernel_rem_pio2+0x56e>
 8012088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801208c:	4619      	mov	r1, r3
 801208e:	9b01      	ldr	r3, [sp, #4]
 8012090:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012094:	e00f      	b.n	80120b6 <__kernel_rem_pio2+0x596>
 8012096:	ab9a      	add	r3, sp, #616	; 0x268
 8012098:	441c      	add	r4, r3
 801209a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801209e:	2000      	movs	r0, #0
 80120a0:	2100      	movs	r1, #0
 80120a2:	2d00      	cmp	r5, #0
 80120a4:	da10      	bge.n	80120c8 <__kernel_rem_pio2+0x5a8>
 80120a6:	9b02      	ldr	r3, [sp, #8]
 80120a8:	b113      	cbz	r3, 80120b0 <__kernel_rem_pio2+0x590>
 80120aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120ae:	4619      	mov	r1, r3
 80120b0:	9b01      	ldr	r3, [sp, #4]
 80120b2:	e9c3 0100 	strd	r0, r1, [r3]
 80120b6:	9b06      	ldr	r3, [sp, #24]
 80120b8:	f003 0007 	and.w	r0, r3, #7
 80120bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80120c0:	ecbd 8b02 	vpop	{d8}
 80120c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80120cc:	f7ee f8f6 	bl	80002bc <__adddf3>
 80120d0:	3d01      	subs	r5, #1
 80120d2:	e7e6      	b.n	80120a2 <__kernel_rem_pio2+0x582>
 80120d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80120d8:	f7ee f8f0 	bl	80002bc <__adddf3>
 80120dc:	3e01      	subs	r6, #1
 80120de:	e7bc      	b.n	801205a <__kernel_rem_pio2+0x53a>
 80120e0:	4602      	mov	r2, r0
 80120e2:	460b      	mov	r3, r1
 80120e4:	e7c1      	b.n	801206a <__kernel_rem_pio2+0x54a>
 80120e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80120ea:	f7ee f8e7 	bl	80002bc <__adddf3>
 80120ee:	3401      	adds	r4, #1
 80120f0:	e7c6      	b.n	8012080 <__kernel_rem_pio2+0x560>
 80120f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80120f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80120fa:	4640      	mov	r0, r8
 80120fc:	ec53 2b17 	vmov	r2, r3, d7
 8012100:	4649      	mov	r1, r9
 8012102:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012106:	f7ee f8d9 	bl	80002bc <__adddf3>
 801210a:	4602      	mov	r2, r0
 801210c:	460b      	mov	r3, r1
 801210e:	4606      	mov	r6, r0
 8012110:	460f      	mov	r7, r1
 8012112:	4640      	mov	r0, r8
 8012114:	4649      	mov	r1, r9
 8012116:	f7ee f8cf 	bl	80002b8 <__aeabi_dsub>
 801211a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801211e:	f7ee f8cd 	bl	80002bc <__adddf3>
 8012122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012126:	e9ca 0100 	strd	r0, r1, [sl]
 801212a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801212e:	e770      	b.n	8012012 <__kernel_rem_pio2+0x4f2>
 8012130:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012134:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012138:	4630      	mov	r0, r6
 801213a:	ec53 2b17 	vmov	r2, r3, d7
 801213e:	4639      	mov	r1, r7
 8012140:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012144:	f7ee f8ba 	bl	80002bc <__adddf3>
 8012148:	4602      	mov	r2, r0
 801214a:	460b      	mov	r3, r1
 801214c:	4680      	mov	r8, r0
 801214e:	4689      	mov	r9, r1
 8012150:	4630      	mov	r0, r6
 8012152:	4639      	mov	r1, r7
 8012154:	f7ee f8b0 	bl	80002b8 <__aeabi_dsub>
 8012158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801215c:	f7ee f8ae 	bl	80002bc <__adddf3>
 8012160:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012164:	e9ca 0100 	strd	r0, r1, [sl]
 8012168:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801216c:	e756      	b.n	801201c <__kernel_rem_pio2+0x4fc>
 801216e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012172:	f7ee f8a3 	bl	80002bc <__adddf3>
 8012176:	3d01      	subs	r5, #1
 8012178:	e756      	b.n	8012028 <__kernel_rem_pio2+0x508>
 801217a:	9b01      	ldr	r3, [sp, #4]
 801217c:	9a01      	ldr	r2, [sp, #4]
 801217e:	601f      	str	r7, [r3, #0]
 8012180:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012184:	605c      	str	r4, [r3, #4]
 8012186:	609d      	str	r5, [r3, #8]
 8012188:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801218c:	60d3      	str	r3, [r2, #12]
 801218e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012192:	6110      	str	r0, [r2, #16]
 8012194:	6153      	str	r3, [r2, #20]
 8012196:	e78e      	b.n	80120b6 <__kernel_rem_pio2+0x596>
 8012198:	41700000 	.word	0x41700000
 801219c:	3e700000 	.word	0x3e700000

080121a0 <__kernel_sin>:
 80121a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a4:	ec55 4b10 	vmov	r4, r5, d0
 80121a8:	b085      	sub	sp, #20
 80121aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80121ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80121b2:	ed8d 1b00 	vstr	d1, [sp]
 80121b6:	9002      	str	r0, [sp, #8]
 80121b8:	da06      	bge.n	80121c8 <__kernel_sin+0x28>
 80121ba:	ee10 0a10 	vmov	r0, s0
 80121be:	4629      	mov	r1, r5
 80121c0:	f7ee fce2 	bl	8000b88 <__aeabi_d2iz>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d051      	beq.n	801226c <__kernel_sin+0xcc>
 80121c8:	4622      	mov	r2, r4
 80121ca:	462b      	mov	r3, r5
 80121cc:	4620      	mov	r0, r4
 80121ce:	4629      	mov	r1, r5
 80121d0:	f7ee fa2a 	bl	8000628 <__aeabi_dmul>
 80121d4:	4682      	mov	sl, r0
 80121d6:	468b      	mov	fp, r1
 80121d8:	4602      	mov	r2, r0
 80121da:	460b      	mov	r3, r1
 80121dc:	4620      	mov	r0, r4
 80121de:	4629      	mov	r1, r5
 80121e0:	f7ee fa22 	bl	8000628 <__aeabi_dmul>
 80121e4:	a341      	add	r3, pc, #260	; (adr r3, 80122ec <__kernel_sin+0x14c>)
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	4680      	mov	r8, r0
 80121ec:	4689      	mov	r9, r1
 80121ee:	4650      	mov	r0, sl
 80121f0:	4659      	mov	r1, fp
 80121f2:	f7ee fa19 	bl	8000628 <__aeabi_dmul>
 80121f6:	a33f      	add	r3, pc, #252	; (adr r3, 80122f4 <__kernel_sin+0x154>)
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	f7ee f85c 	bl	80002b8 <__aeabi_dsub>
 8012200:	4652      	mov	r2, sl
 8012202:	465b      	mov	r3, fp
 8012204:	f7ee fa10 	bl	8000628 <__aeabi_dmul>
 8012208:	a33c      	add	r3, pc, #240	; (adr r3, 80122fc <__kernel_sin+0x15c>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee f855 	bl	80002bc <__adddf3>
 8012212:	4652      	mov	r2, sl
 8012214:	465b      	mov	r3, fp
 8012216:	f7ee fa07 	bl	8000628 <__aeabi_dmul>
 801221a:	a33a      	add	r3, pc, #232	; (adr r3, 8012304 <__kernel_sin+0x164>)
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	f7ee f84a 	bl	80002b8 <__aeabi_dsub>
 8012224:	4652      	mov	r2, sl
 8012226:	465b      	mov	r3, fp
 8012228:	f7ee f9fe 	bl	8000628 <__aeabi_dmul>
 801222c:	a337      	add	r3, pc, #220	; (adr r3, 801230c <__kernel_sin+0x16c>)
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f7ee f843 	bl	80002bc <__adddf3>
 8012236:	9b02      	ldr	r3, [sp, #8]
 8012238:	4606      	mov	r6, r0
 801223a:	460f      	mov	r7, r1
 801223c:	b9db      	cbnz	r3, 8012276 <__kernel_sin+0xd6>
 801223e:	4602      	mov	r2, r0
 8012240:	460b      	mov	r3, r1
 8012242:	4650      	mov	r0, sl
 8012244:	4659      	mov	r1, fp
 8012246:	f7ee f9ef 	bl	8000628 <__aeabi_dmul>
 801224a:	a325      	add	r3, pc, #148	; (adr r3, 80122e0 <__kernel_sin+0x140>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	f7ee f832 	bl	80002b8 <__aeabi_dsub>
 8012254:	4642      	mov	r2, r8
 8012256:	464b      	mov	r3, r9
 8012258:	f7ee f9e6 	bl	8000628 <__aeabi_dmul>
 801225c:	4602      	mov	r2, r0
 801225e:	460b      	mov	r3, r1
 8012260:	4620      	mov	r0, r4
 8012262:	4629      	mov	r1, r5
 8012264:	f7ee f82a 	bl	80002bc <__adddf3>
 8012268:	4604      	mov	r4, r0
 801226a:	460d      	mov	r5, r1
 801226c:	ec45 4b10 	vmov	d0, r4, r5
 8012270:	b005      	add	sp, #20
 8012272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012276:	2200      	movs	r2, #0
 8012278:	4b1b      	ldr	r3, [pc, #108]	; (80122e8 <__kernel_sin+0x148>)
 801227a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801227e:	f7ee f9d3 	bl	8000628 <__aeabi_dmul>
 8012282:	4632      	mov	r2, r6
 8012284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012288:	463b      	mov	r3, r7
 801228a:	4640      	mov	r0, r8
 801228c:	4649      	mov	r1, r9
 801228e:	f7ee f9cb 	bl	8000628 <__aeabi_dmul>
 8012292:	4602      	mov	r2, r0
 8012294:	460b      	mov	r3, r1
 8012296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801229a:	f7ee f80d 	bl	80002b8 <__aeabi_dsub>
 801229e:	4652      	mov	r2, sl
 80122a0:	465b      	mov	r3, fp
 80122a2:	f7ee f9c1 	bl	8000628 <__aeabi_dmul>
 80122a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122aa:	f7ee f805 	bl	80002b8 <__aeabi_dsub>
 80122ae:	a30c      	add	r3, pc, #48	; (adr r3, 80122e0 <__kernel_sin+0x140>)
 80122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b4:	4606      	mov	r6, r0
 80122b6:	460f      	mov	r7, r1
 80122b8:	4640      	mov	r0, r8
 80122ba:	4649      	mov	r1, r9
 80122bc:	f7ee f9b4 	bl	8000628 <__aeabi_dmul>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	4630      	mov	r0, r6
 80122c6:	4639      	mov	r1, r7
 80122c8:	f7ed fff8 	bl	80002bc <__adddf3>
 80122cc:	4602      	mov	r2, r0
 80122ce:	460b      	mov	r3, r1
 80122d0:	4620      	mov	r0, r4
 80122d2:	4629      	mov	r1, r5
 80122d4:	f7ed fff0 	bl	80002b8 <__aeabi_dsub>
 80122d8:	e7c6      	b.n	8012268 <__kernel_sin+0xc8>
 80122da:	bf00      	nop
 80122dc:	f3af 8000 	nop.w
 80122e0:	55555549 	.word	0x55555549
 80122e4:	3fc55555 	.word	0x3fc55555
 80122e8:	3fe00000 	.word	0x3fe00000
 80122ec:	5acfd57c 	.word	0x5acfd57c
 80122f0:	3de5d93a 	.word	0x3de5d93a
 80122f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80122f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80122fc:	57b1fe7d 	.word	0x57b1fe7d
 8012300:	3ec71de3 	.word	0x3ec71de3
 8012304:	19c161d5 	.word	0x19c161d5
 8012308:	3f2a01a0 	.word	0x3f2a01a0
 801230c:	1110f8a6 	.word	0x1110f8a6
 8012310:	3f811111 	.word	0x3f811111

08012314 <fabs>:
 8012314:	ec51 0b10 	vmov	r0, r1, d0
 8012318:	ee10 2a10 	vmov	r2, s0
 801231c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012320:	ec43 2b10 	vmov	d0, r2, r3
 8012324:	4770      	bx	lr
	...

08012328 <floor>:
 8012328:	ec51 0b10 	vmov	r0, r1, d0
 801232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012330:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012334:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012338:	2e13      	cmp	r6, #19
 801233a:	460c      	mov	r4, r1
 801233c:	ee10 5a10 	vmov	r5, s0
 8012340:	4680      	mov	r8, r0
 8012342:	dc34      	bgt.n	80123ae <floor+0x86>
 8012344:	2e00      	cmp	r6, #0
 8012346:	da16      	bge.n	8012376 <floor+0x4e>
 8012348:	a335      	add	r3, pc, #212	; (adr r3, 8012420 <floor+0xf8>)
 801234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234e:	f7ed ffb5 	bl	80002bc <__adddf3>
 8012352:	2200      	movs	r2, #0
 8012354:	2300      	movs	r3, #0
 8012356:	f7ee fbf7 	bl	8000b48 <__aeabi_dcmpgt>
 801235a:	b148      	cbz	r0, 8012370 <floor+0x48>
 801235c:	2c00      	cmp	r4, #0
 801235e:	da59      	bge.n	8012414 <floor+0xec>
 8012360:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012364:	4a30      	ldr	r2, [pc, #192]	; (8012428 <floor+0x100>)
 8012366:	432b      	orrs	r3, r5
 8012368:	2500      	movs	r5, #0
 801236a:	42ab      	cmp	r3, r5
 801236c:	bf18      	it	ne
 801236e:	4614      	movne	r4, r2
 8012370:	4621      	mov	r1, r4
 8012372:	4628      	mov	r0, r5
 8012374:	e025      	b.n	80123c2 <floor+0x9a>
 8012376:	4f2d      	ldr	r7, [pc, #180]	; (801242c <floor+0x104>)
 8012378:	4137      	asrs	r7, r6
 801237a:	ea01 0307 	and.w	r3, r1, r7
 801237e:	4303      	orrs	r3, r0
 8012380:	d01f      	beq.n	80123c2 <floor+0x9a>
 8012382:	a327      	add	r3, pc, #156	; (adr r3, 8012420 <floor+0xf8>)
 8012384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012388:	f7ed ff98 	bl	80002bc <__adddf3>
 801238c:	2200      	movs	r2, #0
 801238e:	2300      	movs	r3, #0
 8012390:	f7ee fbda 	bl	8000b48 <__aeabi_dcmpgt>
 8012394:	2800      	cmp	r0, #0
 8012396:	d0eb      	beq.n	8012370 <floor+0x48>
 8012398:	2c00      	cmp	r4, #0
 801239a:	bfbe      	ittt	lt
 801239c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80123a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80123a4:	19a4      	addlt	r4, r4, r6
 80123a6:	ea24 0407 	bic.w	r4, r4, r7
 80123aa:	2500      	movs	r5, #0
 80123ac:	e7e0      	b.n	8012370 <floor+0x48>
 80123ae:	2e33      	cmp	r6, #51	; 0x33
 80123b0:	dd0b      	ble.n	80123ca <floor+0xa2>
 80123b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80123b6:	d104      	bne.n	80123c2 <floor+0x9a>
 80123b8:	ee10 2a10 	vmov	r2, s0
 80123bc:	460b      	mov	r3, r1
 80123be:	f7ed ff7d 	bl	80002bc <__adddf3>
 80123c2:	ec41 0b10 	vmov	d0, r0, r1
 80123c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80123ce:	f04f 33ff 	mov.w	r3, #4294967295
 80123d2:	fa23 f707 	lsr.w	r7, r3, r7
 80123d6:	4207      	tst	r7, r0
 80123d8:	d0f3      	beq.n	80123c2 <floor+0x9a>
 80123da:	a311      	add	r3, pc, #68	; (adr r3, 8012420 <floor+0xf8>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ed ff6c 	bl	80002bc <__adddf3>
 80123e4:	2200      	movs	r2, #0
 80123e6:	2300      	movs	r3, #0
 80123e8:	f7ee fbae 	bl	8000b48 <__aeabi_dcmpgt>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d0bf      	beq.n	8012370 <floor+0x48>
 80123f0:	2c00      	cmp	r4, #0
 80123f2:	da02      	bge.n	80123fa <floor+0xd2>
 80123f4:	2e14      	cmp	r6, #20
 80123f6:	d103      	bne.n	8012400 <floor+0xd8>
 80123f8:	3401      	adds	r4, #1
 80123fa:	ea25 0507 	bic.w	r5, r5, r7
 80123fe:	e7b7      	b.n	8012370 <floor+0x48>
 8012400:	2301      	movs	r3, #1
 8012402:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012406:	fa03 f606 	lsl.w	r6, r3, r6
 801240a:	4435      	add	r5, r6
 801240c:	4545      	cmp	r5, r8
 801240e:	bf38      	it	cc
 8012410:	18e4      	addcc	r4, r4, r3
 8012412:	e7f2      	b.n	80123fa <floor+0xd2>
 8012414:	2500      	movs	r5, #0
 8012416:	462c      	mov	r4, r5
 8012418:	e7aa      	b.n	8012370 <floor+0x48>
 801241a:	bf00      	nop
 801241c:	f3af 8000 	nop.w
 8012420:	8800759c 	.word	0x8800759c
 8012424:	7e37e43c 	.word	0x7e37e43c
 8012428:	bff00000 	.word	0xbff00000
 801242c:	000fffff 	.word	0x000fffff

08012430 <matherr>:
 8012430:	2000      	movs	r0, #0
 8012432:	4770      	bx	lr
 8012434:	0000      	movs	r0, r0
	...

08012438 <scalbn>:
 8012438:	b570      	push	{r4, r5, r6, lr}
 801243a:	ec55 4b10 	vmov	r4, r5, d0
 801243e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012442:	4606      	mov	r6, r0
 8012444:	462b      	mov	r3, r5
 8012446:	b9aa      	cbnz	r2, 8012474 <scalbn+0x3c>
 8012448:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801244c:	4323      	orrs	r3, r4
 801244e:	d03b      	beq.n	80124c8 <scalbn+0x90>
 8012450:	4b31      	ldr	r3, [pc, #196]	; (8012518 <scalbn+0xe0>)
 8012452:	4629      	mov	r1, r5
 8012454:	2200      	movs	r2, #0
 8012456:	ee10 0a10 	vmov	r0, s0
 801245a:	f7ee f8e5 	bl	8000628 <__aeabi_dmul>
 801245e:	4b2f      	ldr	r3, [pc, #188]	; (801251c <scalbn+0xe4>)
 8012460:	429e      	cmp	r6, r3
 8012462:	4604      	mov	r4, r0
 8012464:	460d      	mov	r5, r1
 8012466:	da12      	bge.n	801248e <scalbn+0x56>
 8012468:	a327      	add	r3, pc, #156	; (adr r3, 8012508 <scalbn+0xd0>)
 801246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246e:	f7ee f8db 	bl	8000628 <__aeabi_dmul>
 8012472:	e009      	b.n	8012488 <scalbn+0x50>
 8012474:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012478:	428a      	cmp	r2, r1
 801247a:	d10c      	bne.n	8012496 <scalbn+0x5e>
 801247c:	ee10 2a10 	vmov	r2, s0
 8012480:	4620      	mov	r0, r4
 8012482:	4629      	mov	r1, r5
 8012484:	f7ed ff1a 	bl	80002bc <__adddf3>
 8012488:	4604      	mov	r4, r0
 801248a:	460d      	mov	r5, r1
 801248c:	e01c      	b.n	80124c8 <scalbn+0x90>
 801248e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012492:	460b      	mov	r3, r1
 8012494:	3a36      	subs	r2, #54	; 0x36
 8012496:	4432      	add	r2, r6
 8012498:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801249c:	428a      	cmp	r2, r1
 801249e:	dd0b      	ble.n	80124b8 <scalbn+0x80>
 80124a0:	ec45 4b11 	vmov	d1, r4, r5
 80124a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012510 <scalbn+0xd8>
 80124a8:	f000 f83c 	bl	8012524 <copysign>
 80124ac:	a318      	add	r3, pc, #96	; (adr r3, 8012510 <scalbn+0xd8>)
 80124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b2:	ec51 0b10 	vmov	r0, r1, d0
 80124b6:	e7da      	b.n	801246e <scalbn+0x36>
 80124b8:	2a00      	cmp	r2, #0
 80124ba:	dd08      	ble.n	80124ce <scalbn+0x96>
 80124bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124c8:	ec45 4b10 	vmov	d0, r4, r5
 80124cc:	bd70      	pop	{r4, r5, r6, pc}
 80124ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80124d2:	da0d      	bge.n	80124f0 <scalbn+0xb8>
 80124d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80124d8:	429e      	cmp	r6, r3
 80124da:	ec45 4b11 	vmov	d1, r4, r5
 80124de:	dce1      	bgt.n	80124a4 <scalbn+0x6c>
 80124e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012508 <scalbn+0xd0>
 80124e4:	f000 f81e 	bl	8012524 <copysign>
 80124e8:	a307      	add	r3, pc, #28	; (adr r3, 8012508 <scalbn+0xd0>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	e7e0      	b.n	80124b2 <scalbn+0x7a>
 80124f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124f4:	3236      	adds	r2, #54	; 0x36
 80124f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124fe:	4620      	mov	r0, r4
 8012500:	4629      	mov	r1, r5
 8012502:	2200      	movs	r2, #0
 8012504:	4b06      	ldr	r3, [pc, #24]	; (8012520 <scalbn+0xe8>)
 8012506:	e7b2      	b.n	801246e <scalbn+0x36>
 8012508:	c2f8f359 	.word	0xc2f8f359
 801250c:	01a56e1f 	.word	0x01a56e1f
 8012510:	8800759c 	.word	0x8800759c
 8012514:	7e37e43c 	.word	0x7e37e43c
 8012518:	43500000 	.word	0x43500000
 801251c:	ffff3cb0 	.word	0xffff3cb0
 8012520:	3c900000 	.word	0x3c900000

08012524 <copysign>:
 8012524:	ec51 0b10 	vmov	r0, r1, d0
 8012528:	ee11 0a90 	vmov	r0, s3
 801252c:	ee10 2a10 	vmov	r2, s0
 8012530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012538:	ea41 0300 	orr.w	r3, r1, r0
 801253c:	ec43 2b10 	vmov	d0, r2, r3
 8012540:	4770      	bx	lr
	...

08012544 <__errno>:
 8012544:	4b01      	ldr	r3, [pc, #4]	; (801254c <__errno+0x8>)
 8012546:	6818      	ldr	r0, [r3, #0]
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop
 801254c:	2000000c 	.word	0x2000000c

08012550 <__libc_init_array>:
 8012550:	b570      	push	{r4, r5, r6, lr}
 8012552:	4e0d      	ldr	r6, [pc, #52]	; (8012588 <__libc_init_array+0x38>)
 8012554:	4c0d      	ldr	r4, [pc, #52]	; (801258c <__libc_init_array+0x3c>)
 8012556:	1ba4      	subs	r4, r4, r6
 8012558:	10a4      	asrs	r4, r4, #2
 801255a:	2500      	movs	r5, #0
 801255c:	42a5      	cmp	r5, r4
 801255e:	d109      	bne.n	8012574 <__libc_init_array+0x24>
 8012560:	4e0b      	ldr	r6, [pc, #44]	; (8012590 <__libc_init_array+0x40>)
 8012562:	4c0c      	ldr	r4, [pc, #48]	; (8012594 <__libc_init_array+0x44>)
 8012564:	f004 feec 	bl	8017340 <_init>
 8012568:	1ba4      	subs	r4, r4, r6
 801256a:	10a4      	asrs	r4, r4, #2
 801256c:	2500      	movs	r5, #0
 801256e:	42a5      	cmp	r5, r4
 8012570:	d105      	bne.n	801257e <__libc_init_array+0x2e>
 8012572:	bd70      	pop	{r4, r5, r6, pc}
 8012574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012578:	4798      	blx	r3
 801257a:	3501      	adds	r5, #1
 801257c:	e7ee      	b.n	801255c <__libc_init_array+0xc>
 801257e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012582:	4798      	blx	r3
 8012584:	3501      	adds	r5, #1
 8012586:	e7f2      	b.n	801256e <__libc_init_array+0x1e>
 8012588:	08017b2c 	.word	0x08017b2c
 801258c:	08017b2c 	.word	0x08017b2c
 8012590:	08017b2c 	.word	0x08017b2c
 8012594:	08017b34 	.word	0x08017b34

08012598 <memset>:
 8012598:	4402      	add	r2, r0
 801259a:	4603      	mov	r3, r0
 801259c:	4293      	cmp	r3, r2
 801259e:	d100      	bne.n	80125a2 <memset+0xa>
 80125a0:	4770      	bx	lr
 80125a2:	f803 1b01 	strb.w	r1, [r3], #1
 80125a6:	e7f9      	b.n	801259c <memset+0x4>

080125a8 <__cvt>:
 80125a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125ac:	ec55 4b10 	vmov	r4, r5, d0
 80125b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80125b2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80125b6:	2d00      	cmp	r5, #0
 80125b8:	460e      	mov	r6, r1
 80125ba:	4691      	mov	r9, r2
 80125bc:	4619      	mov	r1, r3
 80125be:	bfb8      	it	lt
 80125c0:	4622      	movlt	r2, r4
 80125c2:	462b      	mov	r3, r5
 80125c4:	f027 0720 	bic.w	r7, r7, #32
 80125c8:	bfbb      	ittet	lt
 80125ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80125ce:	461d      	movlt	r5, r3
 80125d0:	2300      	movge	r3, #0
 80125d2:	232d      	movlt	r3, #45	; 0x2d
 80125d4:	bfb8      	it	lt
 80125d6:	4614      	movlt	r4, r2
 80125d8:	2f46      	cmp	r7, #70	; 0x46
 80125da:	700b      	strb	r3, [r1, #0]
 80125dc:	d004      	beq.n	80125e8 <__cvt+0x40>
 80125de:	2f45      	cmp	r7, #69	; 0x45
 80125e0:	d100      	bne.n	80125e4 <__cvt+0x3c>
 80125e2:	3601      	adds	r6, #1
 80125e4:	2102      	movs	r1, #2
 80125e6:	e000      	b.n	80125ea <__cvt+0x42>
 80125e8:	2103      	movs	r1, #3
 80125ea:	ab03      	add	r3, sp, #12
 80125ec:	9301      	str	r3, [sp, #4]
 80125ee:	ab02      	add	r3, sp, #8
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	4632      	mov	r2, r6
 80125f4:	4653      	mov	r3, sl
 80125f6:	ec45 4b10 	vmov	d0, r4, r5
 80125fa:	f001 ff9d 	bl	8014538 <_dtoa_r>
 80125fe:	2f47      	cmp	r7, #71	; 0x47
 8012600:	4680      	mov	r8, r0
 8012602:	d102      	bne.n	801260a <__cvt+0x62>
 8012604:	f019 0f01 	tst.w	r9, #1
 8012608:	d026      	beq.n	8012658 <__cvt+0xb0>
 801260a:	2f46      	cmp	r7, #70	; 0x46
 801260c:	eb08 0906 	add.w	r9, r8, r6
 8012610:	d111      	bne.n	8012636 <__cvt+0x8e>
 8012612:	f898 3000 	ldrb.w	r3, [r8]
 8012616:	2b30      	cmp	r3, #48	; 0x30
 8012618:	d10a      	bne.n	8012630 <__cvt+0x88>
 801261a:	2200      	movs	r2, #0
 801261c:	2300      	movs	r3, #0
 801261e:	4620      	mov	r0, r4
 8012620:	4629      	mov	r1, r5
 8012622:	f7ee fa69 	bl	8000af8 <__aeabi_dcmpeq>
 8012626:	b918      	cbnz	r0, 8012630 <__cvt+0x88>
 8012628:	f1c6 0601 	rsb	r6, r6, #1
 801262c:	f8ca 6000 	str.w	r6, [sl]
 8012630:	f8da 3000 	ldr.w	r3, [sl]
 8012634:	4499      	add	r9, r3
 8012636:	2200      	movs	r2, #0
 8012638:	2300      	movs	r3, #0
 801263a:	4620      	mov	r0, r4
 801263c:	4629      	mov	r1, r5
 801263e:	f7ee fa5b 	bl	8000af8 <__aeabi_dcmpeq>
 8012642:	b938      	cbnz	r0, 8012654 <__cvt+0xac>
 8012644:	2230      	movs	r2, #48	; 0x30
 8012646:	9b03      	ldr	r3, [sp, #12]
 8012648:	454b      	cmp	r3, r9
 801264a:	d205      	bcs.n	8012658 <__cvt+0xb0>
 801264c:	1c59      	adds	r1, r3, #1
 801264e:	9103      	str	r1, [sp, #12]
 8012650:	701a      	strb	r2, [r3, #0]
 8012652:	e7f8      	b.n	8012646 <__cvt+0x9e>
 8012654:	f8cd 900c 	str.w	r9, [sp, #12]
 8012658:	9b03      	ldr	r3, [sp, #12]
 801265a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801265c:	eba3 0308 	sub.w	r3, r3, r8
 8012660:	4640      	mov	r0, r8
 8012662:	6013      	str	r3, [r2, #0]
 8012664:	b004      	add	sp, #16
 8012666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801266a <__exponent>:
 801266a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801266c:	2900      	cmp	r1, #0
 801266e:	4604      	mov	r4, r0
 8012670:	bfba      	itte	lt
 8012672:	4249      	neglt	r1, r1
 8012674:	232d      	movlt	r3, #45	; 0x2d
 8012676:	232b      	movge	r3, #43	; 0x2b
 8012678:	2909      	cmp	r1, #9
 801267a:	f804 2b02 	strb.w	r2, [r4], #2
 801267e:	7043      	strb	r3, [r0, #1]
 8012680:	dd20      	ble.n	80126c4 <__exponent+0x5a>
 8012682:	f10d 0307 	add.w	r3, sp, #7
 8012686:	461f      	mov	r7, r3
 8012688:	260a      	movs	r6, #10
 801268a:	fb91 f5f6 	sdiv	r5, r1, r6
 801268e:	fb06 1115 	mls	r1, r6, r5, r1
 8012692:	3130      	adds	r1, #48	; 0x30
 8012694:	2d09      	cmp	r5, #9
 8012696:	f803 1c01 	strb.w	r1, [r3, #-1]
 801269a:	f103 32ff 	add.w	r2, r3, #4294967295
 801269e:	4629      	mov	r1, r5
 80126a0:	dc09      	bgt.n	80126b6 <__exponent+0x4c>
 80126a2:	3130      	adds	r1, #48	; 0x30
 80126a4:	3b02      	subs	r3, #2
 80126a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80126aa:	42bb      	cmp	r3, r7
 80126ac:	4622      	mov	r2, r4
 80126ae:	d304      	bcc.n	80126ba <__exponent+0x50>
 80126b0:	1a10      	subs	r0, r2, r0
 80126b2:	b003      	add	sp, #12
 80126b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126b6:	4613      	mov	r3, r2
 80126b8:	e7e7      	b.n	801268a <__exponent+0x20>
 80126ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126be:	f804 2b01 	strb.w	r2, [r4], #1
 80126c2:	e7f2      	b.n	80126aa <__exponent+0x40>
 80126c4:	2330      	movs	r3, #48	; 0x30
 80126c6:	4419      	add	r1, r3
 80126c8:	7083      	strb	r3, [r0, #2]
 80126ca:	1d02      	adds	r2, r0, #4
 80126cc:	70c1      	strb	r1, [r0, #3]
 80126ce:	e7ef      	b.n	80126b0 <__exponent+0x46>

080126d0 <_printf_float>:
 80126d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	b08d      	sub	sp, #52	; 0x34
 80126d6:	460c      	mov	r4, r1
 80126d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80126dc:	4616      	mov	r6, r2
 80126de:	461f      	mov	r7, r3
 80126e0:	4605      	mov	r5, r0
 80126e2:	f003 f995 	bl	8015a10 <_localeconv_r>
 80126e6:	6803      	ldr	r3, [r0, #0]
 80126e8:	9304      	str	r3, [sp, #16]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7ed fd88 	bl	8000200 <strlen>
 80126f0:	2300      	movs	r3, #0
 80126f2:	930a      	str	r3, [sp, #40]	; 0x28
 80126f4:	f8d8 3000 	ldr.w	r3, [r8]
 80126f8:	9005      	str	r0, [sp, #20]
 80126fa:	3307      	adds	r3, #7
 80126fc:	f023 0307 	bic.w	r3, r3, #7
 8012700:	f103 0208 	add.w	r2, r3, #8
 8012704:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012708:	f8d4 b000 	ldr.w	fp, [r4]
 801270c:	f8c8 2000 	str.w	r2, [r8]
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012718:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801271c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012720:	9307      	str	r3, [sp, #28]
 8012722:	f8cd 8018 	str.w	r8, [sp, #24]
 8012726:	f04f 32ff 	mov.w	r2, #4294967295
 801272a:	4ba7      	ldr	r3, [pc, #668]	; (80129c8 <_printf_float+0x2f8>)
 801272c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012730:	f7ee fa14 	bl	8000b5c <__aeabi_dcmpun>
 8012734:	bb70      	cbnz	r0, 8012794 <_printf_float+0xc4>
 8012736:	f04f 32ff 	mov.w	r2, #4294967295
 801273a:	4ba3      	ldr	r3, [pc, #652]	; (80129c8 <_printf_float+0x2f8>)
 801273c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012740:	f7ee f9ee 	bl	8000b20 <__aeabi_dcmple>
 8012744:	bb30      	cbnz	r0, 8012794 <_printf_float+0xc4>
 8012746:	2200      	movs	r2, #0
 8012748:	2300      	movs	r3, #0
 801274a:	4640      	mov	r0, r8
 801274c:	4649      	mov	r1, r9
 801274e:	f7ee f9dd 	bl	8000b0c <__aeabi_dcmplt>
 8012752:	b110      	cbz	r0, 801275a <_printf_float+0x8a>
 8012754:	232d      	movs	r3, #45	; 0x2d
 8012756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801275a:	4a9c      	ldr	r2, [pc, #624]	; (80129cc <_printf_float+0x2fc>)
 801275c:	4b9c      	ldr	r3, [pc, #624]	; (80129d0 <_printf_float+0x300>)
 801275e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012762:	bf8c      	ite	hi
 8012764:	4690      	movhi	r8, r2
 8012766:	4698      	movls	r8, r3
 8012768:	2303      	movs	r3, #3
 801276a:	f02b 0204 	bic.w	r2, fp, #4
 801276e:	6123      	str	r3, [r4, #16]
 8012770:	6022      	str	r2, [r4, #0]
 8012772:	f04f 0900 	mov.w	r9, #0
 8012776:	9700      	str	r7, [sp, #0]
 8012778:	4633      	mov	r3, r6
 801277a:	aa0b      	add	r2, sp, #44	; 0x2c
 801277c:	4621      	mov	r1, r4
 801277e:	4628      	mov	r0, r5
 8012780:	f000 f9e6 	bl	8012b50 <_printf_common>
 8012784:	3001      	adds	r0, #1
 8012786:	f040 808d 	bne.w	80128a4 <_printf_float+0x1d4>
 801278a:	f04f 30ff 	mov.w	r0, #4294967295
 801278e:	b00d      	add	sp, #52	; 0x34
 8012790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012794:	4642      	mov	r2, r8
 8012796:	464b      	mov	r3, r9
 8012798:	4640      	mov	r0, r8
 801279a:	4649      	mov	r1, r9
 801279c:	f7ee f9de 	bl	8000b5c <__aeabi_dcmpun>
 80127a0:	b110      	cbz	r0, 80127a8 <_printf_float+0xd8>
 80127a2:	4a8c      	ldr	r2, [pc, #560]	; (80129d4 <_printf_float+0x304>)
 80127a4:	4b8c      	ldr	r3, [pc, #560]	; (80129d8 <_printf_float+0x308>)
 80127a6:	e7da      	b.n	801275e <_printf_float+0x8e>
 80127a8:	6861      	ldr	r1, [r4, #4]
 80127aa:	1c4b      	adds	r3, r1, #1
 80127ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80127b0:	a80a      	add	r0, sp, #40	; 0x28
 80127b2:	d13e      	bne.n	8012832 <_printf_float+0x162>
 80127b4:	2306      	movs	r3, #6
 80127b6:	6063      	str	r3, [r4, #4]
 80127b8:	2300      	movs	r3, #0
 80127ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80127be:	ab09      	add	r3, sp, #36	; 0x24
 80127c0:	9300      	str	r3, [sp, #0]
 80127c2:	ec49 8b10 	vmov	d0, r8, r9
 80127c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127ca:	6022      	str	r2, [r4, #0]
 80127cc:	f8cd a004 	str.w	sl, [sp, #4]
 80127d0:	6861      	ldr	r1, [r4, #4]
 80127d2:	4628      	mov	r0, r5
 80127d4:	f7ff fee8 	bl	80125a8 <__cvt>
 80127d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80127dc:	2b47      	cmp	r3, #71	; 0x47
 80127de:	4680      	mov	r8, r0
 80127e0:	d109      	bne.n	80127f6 <_printf_float+0x126>
 80127e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127e4:	1cd8      	adds	r0, r3, #3
 80127e6:	db02      	blt.n	80127ee <_printf_float+0x11e>
 80127e8:	6862      	ldr	r2, [r4, #4]
 80127ea:	4293      	cmp	r3, r2
 80127ec:	dd47      	ble.n	801287e <_printf_float+0x1ae>
 80127ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80127f2:	fa5f fa8a 	uxtb.w	sl, sl
 80127f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80127fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127fc:	d824      	bhi.n	8012848 <_printf_float+0x178>
 80127fe:	3901      	subs	r1, #1
 8012800:	4652      	mov	r2, sl
 8012802:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012806:	9109      	str	r1, [sp, #36]	; 0x24
 8012808:	f7ff ff2f 	bl	801266a <__exponent>
 801280c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801280e:	1813      	adds	r3, r2, r0
 8012810:	2a01      	cmp	r2, #1
 8012812:	4681      	mov	r9, r0
 8012814:	6123      	str	r3, [r4, #16]
 8012816:	dc02      	bgt.n	801281e <_printf_float+0x14e>
 8012818:	6822      	ldr	r2, [r4, #0]
 801281a:	07d1      	lsls	r1, r2, #31
 801281c:	d501      	bpl.n	8012822 <_printf_float+0x152>
 801281e:	3301      	adds	r3, #1
 8012820:	6123      	str	r3, [r4, #16]
 8012822:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012826:	2b00      	cmp	r3, #0
 8012828:	d0a5      	beq.n	8012776 <_printf_float+0xa6>
 801282a:	232d      	movs	r3, #45	; 0x2d
 801282c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012830:	e7a1      	b.n	8012776 <_printf_float+0xa6>
 8012832:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012836:	f000 8177 	beq.w	8012b28 <_printf_float+0x458>
 801283a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801283e:	d1bb      	bne.n	80127b8 <_printf_float+0xe8>
 8012840:	2900      	cmp	r1, #0
 8012842:	d1b9      	bne.n	80127b8 <_printf_float+0xe8>
 8012844:	2301      	movs	r3, #1
 8012846:	e7b6      	b.n	80127b6 <_printf_float+0xe6>
 8012848:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801284c:	d119      	bne.n	8012882 <_printf_float+0x1b2>
 801284e:	2900      	cmp	r1, #0
 8012850:	6863      	ldr	r3, [r4, #4]
 8012852:	dd0c      	ble.n	801286e <_printf_float+0x19e>
 8012854:	6121      	str	r1, [r4, #16]
 8012856:	b913      	cbnz	r3, 801285e <_printf_float+0x18e>
 8012858:	6822      	ldr	r2, [r4, #0]
 801285a:	07d2      	lsls	r2, r2, #31
 801285c:	d502      	bpl.n	8012864 <_printf_float+0x194>
 801285e:	3301      	adds	r3, #1
 8012860:	440b      	add	r3, r1
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012866:	65a3      	str	r3, [r4, #88]	; 0x58
 8012868:	f04f 0900 	mov.w	r9, #0
 801286c:	e7d9      	b.n	8012822 <_printf_float+0x152>
 801286e:	b913      	cbnz	r3, 8012876 <_printf_float+0x1a6>
 8012870:	6822      	ldr	r2, [r4, #0]
 8012872:	07d0      	lsls	r0, r2, #31
 8012874:	d501      	bpl.n	801287a <_printf_float+0x1aa>
 8012876:	3302      	adds	r3, #2
 8012878:	e7f3      	b.n	8012862 <_printf_float+0x192>
 801287a:	2301      	movs	r3, #1
 801287c:	e7f1      	b.n	8012862 <_printf_float+0x192>
 801287e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012882:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012886:	4293      	cmp	r3, r2
 8012888:	db05      	blt.n	8012896 <_printf_float+0x1c6>
 801288a:	6822      	ldr	r2, [r4, #0]
 801288c:	6123      	str	r3, [r4, #16]
 801288e:	07d1      	lsls	r1, r2, #31
 8012890:	d5e8      	bpl.n	8012864 <_printf_float+0x194>
 8012892:	3301      	adds	r3, #1
 8012894:	e7e5      	b.n	8012862 <_printf_float+0x192>
 8012896:	2b00      	cmp	r3, #0
 8012898:	bfd4      	ite	le
 801289a:	f1c3 0302 	rsble	r3, r3, #2
 801289e:	2301      	movgt	r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	e7de      	b.n	8012862 <_printf_float+0x192>
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	055a      	lsls	r2, r3, #21
 80128a8:	d407      	bmi.n	80128ba <_printf_float+0x1ea>
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	4642      	mov	r2, r8
 80128ae:	4631      	mov	r1, r6
 80128b0:	4628      	mov	r0, r5
 80128b2:	47b8      	blx	r7
 80128b4:	3001      	adds	r0, #1
 80128b6:	d12b      	bne.n	8012910 <_printf_float+0x240>
 80128b8:	e767      	b.n	801278a <_printf_float+0xba>
 80128ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80128be:	f240 80dc 	bls.w	8012a7a <_printf_float+0x3aa>
 80128c2:	2200      	movs	r2, #0
 80128c4:	2300      	movs	r3, #0
 80128c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128ca:	f7ee f915 	bl	8000af8 <__aeabi_dcmpeq>
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d033      	beq.n	801293a <_printf_float+0x26a>
 80128d2:	2301      	movs	r3, #1
 80128d4:	4a41      	ldr	r2, [pc, #260]	; (80129dc <_printf_float+0x30c>)
 80128d6:	4631      	mov	r1, r6
 80128d8:	4628      	mov	r0, r5
 80128da:	47b8      	blx	r7
 80128dc:	3001      	adds	r0, #1
 80128de:	f43f af54 	beq.w	801278a <_printf_float+0xba>
 80128e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128e6:	429a      	cmp	r2, r3
 80128e8:	db02      	blt.n	80128f0 <_printf_float+0x220>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	07d8      	lsls	r0, r3, #31
 80128ee:	d50f      	bpl.n	8012910 <_printf_float+0x240>
 80128f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128f4:	4631      	mov	r1, r6
 80128f6:	4628      	mov	r0, r5
 80128f8:	47b8      	blx	r7
 80128fa:	3001      	adds	r0, #1
 80128fc:	f43f af45 	beq.w	801278a <_printf_float+0xba>
 8012900:	f04f 0800 	mov.w	r8, #0
 8012904:	f104 091a 	add.w	r9, r4, #26
 8012908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801290a:	3b01      	subs	r3, #1
 801290c:	4543      	cmp	r3, r8
 801290e:	dc09      	bgt.n	8012924 <_printf_float+0x254>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	079b      	lsls	r3, r3, #30
 8012914:	f100 8103 	bmi.w	8012b1e <_printf_float+0x44e>
 8012918:	68e0      	ldr	r0, [r4, #12]
 801291a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801291c:	4298      	cmp	r0, r3
 801291e:	bfb8      	it	lt
 8012920:	4618      	movlt	r0, r3
 8012922:	e734      	b.n	801278e <_printf_float+0xbe>
 8012924:	2301      	movs	r3, #1
 8012926:	464a      	mov	r2, r9
 8012928:	4631      	mov	r1, r6
 801292a:	4628      	mov	r0, r5
 801292c:	47b8      	blx	r7
 801292e:	3001      	adds	r0, #1
 8012930:	f43f af2b 	beq.w	801278a <_printf_float+0xba>
 8012934:	f108 0801 	add.w	r8, r8, #1
 8012938:	e7e6      	b.n	8012908 <_printf_float+0x238>
 801293a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801293c:	2b00      	cmp	r3, #0
 801293e:	dc2b      	bgt.n	8012998 <_printf_float+0x2c8>
 8012940:	2301      	movs	r3, #1
 8012942:	4a26      	ldr	r2, [pc, #152]	; (80129dc <_printf_float+0x30c>)
 8012944:	4631      	mov	r1, r6
 8012946:	4628      	mov	r0, r5
 8012948:	47b8      	blx	r7
 801294a:	3001      	adds	r0, #1
 801294c:	f43f af1d 	beq.w	801278a <_printf_float+0xba>
 8012950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012952:	b923      	cbnz	r3, 801295e <_printf_float+0x28e>
 8012954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012956:	b913      	cbnz	r3, 801295e <_printf_float+0x28e>
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	07d9      	lsls	r1, r3, #31
 801295c:	d5d8      	bpl.n	8012910 <_printf_float+0x240>
 801295e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012962:	4631      	mov	r1, r6
 8012964:	4628      	mov	r0, r5
 8012966:	47b8      	blx	r7
 8012968:	3001      	adds	r0, #1
 801296a:	f43f af0e 	beq.w	801278a <_printf_float+0xba>
 801296e:	f04f 0900 	mov.w	r9, #0
 8012972:	f104 0a1a 	add.w	sl, r4, #26
 8012976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012978:	425b      	negs	r3, r3
 801297a:	454b      	cmp	r3, r9
 801297c:	dc01      	bgt.n	8012982 <_printf_float+0x2b2>
 801297e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012980:	e794      	b.n	80128ac <_printf_float+0x1dc>
 8012982:	2301      	movs	r3, #1
 8012984:	4652      	mov	r2, sl
 8012986:	4631      	mov	r1, r6
 8012988:	4628      	mov	r0, r5
 801298a:	47b8      	blx	r7
 801298c:	3001      	adds	r0, #1
 801298e:	f43f aefc 	beq.w	801278a <_printf_float+0xba>
 8012992:	f109 0901 	add.w	r9, r9, #1
 8012996:	e7ee      	b.n	8012976 <_printf_float+0x2a6>
 8012998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801299a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801299c:	429a      	cmp	r2, r3
 801299e:	bfa8      	it	ge
 80129a0:	461a      	movge	r2, r3
 80129a2:	2a00      	cmp	r2, #0
 80129a4:	4691      	mov	r9, r2
 80129a6:	dd07      	ble.n	80129b8 <_printf_float+0x2e8>
 80129a8:	4613      	mov	r3, r2
 80129aa:	4631      	mov	r1, r6
 80129ac:	4642      	mov	r2, r8
 80129ae:	4628      	mov	r0, r5
 80129b0:	47b8      	blx	r7
 80129b2:	3001      	adds	r0, #1
 80129b4:	f43f aee9 	beq.w	801278a <_printf_float+0xba>
 80129b8:	f104 031a 	add.w	r3, r4, #26
 80129bc:	f04f 0b00 	mov.w	fp, #0
 80129c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129c4:	9306      	str	r3, [sp, #24]
 80129c6:	e015      	b.n	80129f4 <_printf_float+0x324>
 80129c8:	7fefffff 	.word	0x7fefffff
 80129cc:	080177f0 	.word	0x080177f0
 80129d0:	080177ec 	.word	0x080177ec
 80129d4:	080177f8 	.word	0x080177f8
 80129d8:	080177f4 	.word	0x080177f4
 80129dc:	08017a1b 	.word	0x08017a1b
 80129e0:	2301      	movs	r3, #1
 80129e2:	9a06      	ldr	r2, [sp, #24]
 80129e4:	4631      	mov	r1, r6
 80129e6:	4628      	mov	r0, r5
 80129e8:	47b8      	blx	r7
 80129ea:	3001      	adds	r0, #1
 80129ec:	f43f aecd 	beq.w	801278a <_printf_float+0xba>
 80129f0:	f10b 0b01 	add.w	fp, fp, #1
 80129f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80129f8:	ebaa 0309 	sub.w	r3, sl, r9
 80129fc:	455b      	cmp	r3, fp
 80129fe:	dcef      	bgt.n	80129e0 <_printf_float+0x310>
 8012a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a04:	429a      	cmp	r2, r3
 8012a06:	44d0      	add	r8, sl
 8012a08:	db15      	blt.n	8012a36 <_printf_float+0x366>
 8012a0a:	6823      	ldr	r3, [r4, #0]
 8012a0c:	07da      	lsls	r2, r3, #31
 8012a0e:	d412      	bmi.n	8012a36 <_printf_float+0x366>
 8012a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a14:	eba3 020a 	sub.w	r2, r3, sl
 8012a18:	eba3 0a01 	sub.w	sl, r3, r1
 8012a1c:	4592      	cmp	sl, r2
 8012a1e:	bfa8      	it	ge
 8012a20:	4692      	movge	sl, r2
 8012a22:	f1ba 0f00 	cmp.w	sl, #0
 8012a26:	dc0e      	bgt.n	8012a46 <_printf_float+0x376>
 8012a28:	f04f 0800 	mov.w	r8, #0
 8012a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a30:	f104 091a 	add.w	r9, r4, #26
 8012a34:	e019      	b.n	8012a6a <_printf_float+0x39a>
 8012a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a3a:	4631      	mov	r1, r6
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	47b8      	blx	r7
 8012a40:	3001      	adds	r0, #1
 8012a42:	d1e5      	bne.n	8012a10 <_printf_float+0x340>
 8012a44:	e6a1      	b.n	801278a <_printf_float+0xba>
 8012a46:	4653      	mov	r3, sl
 8012a48:	4642      	mov	r2, r8
 8012a4a:	4631      	mov	r1, r6
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	47b8      	blx	r7
 8012a50:	3001      	adds	r0, #1
 8012a52:	d1e9      	bne.n	8012a28 <_printf_float+0x358>
 8012a54:	e699      	b.n	801278a <_printf_float+0xba>
 8012a56:	2301      	movs	r3, #1
 8012a58:	464a      	mov	r2, r9
 8012a5a:	4631      	mov	r1, r6
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	47b8      	blx	r7
 8012a60:	3001      	adds	r0, #1
 8012a62:	f43f ae92 	beq.w	801278a <_printf_float+0xba>
 8012a66:	f108 0801 	add.w	r8, r8, #1
 8012a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a6e:	1a9b      	subs	r3, r3, r2
 8012a70:	eba3 030a 	sub.w	r3, r3, sl
 8012a74:	4543      	cmp	r3, r8
 8012a76:	dcee      	bgt.n	8012a56 <_printf_float+0x386>
 8012a78:	e74a      	b.n	8012910 <_printf_float+0x240>
 8012a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a7c:	2a01      	cmp	r2, #1
 8012a7e:	dc01      	bgt.n	8012a84 <_printf_float+0x3b4>
 8012a80:	07db      	lsls	r3, r3, #31
 8012a82:	d53a      	bpl.n	8012afa <_printf_float+0x42a>
 8012a84:	2301      	movs	r3, #1
 8012a86:	4642      	mov	r2, r8
 8012a88:	4631      	mov	r1, r6
 8012a8a:	4628      	mov	r0, r5
 8012a8c:	47b8      	blx	r7
 8012a8e:	3001      	adds	r0, #1
 8012a90:	f43f ae7b 	beq.w	801278a <_printf_float+0xba>
 8012a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a98:	4631      	mov	r1, r6
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	47b8      	blx	r7
 8012a9e:	3001      	adds	r0, #1
 8012aa0:	f108 0801 	add.w	r8, r8, #1
 8012aa4:	f43f ae71 	beq.w	801278a <_printf_float+0xba>
 8012aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aaa:	2200      	movs	r2, #0
 8012aac:	f103 3aff 	add.w	sl, r3, #4294967295
 8012ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	f7ee f81f 	bl	8000af8 <__aeabi_dcmpeq>
 8012aba:	b9c8      	cbnz	r0, 8012af0 <_printf_float+0x420>
 8012abc:	4653      	mov	r3, sl
 8012abe:	4642      	mov	r2, r8
 8012ac0:	4631      	mov	r1, r6
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	47b8      	blx	r7
 8012ac6:	3001      	adds	r0, #1
 8012ac8:	d10e      	bne.n	8012ae8 <_printf_float+0x418>
 8012aca:	e65e      	b.n	801278a <_printf_float+0xba>
 8012acc:	2301      	movs	r3, #1
 8012ace:	4652      	mov	r2, sl
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	47b8      	blx	r7
 8012ad6:	3001      	adds	r0, #1
 8012ad8:	f43f ae57 	beq.w	801278a <_printf_float+0xba>
 8012adc:	f108 0801 	add.w	r8, r8, #1
 8012ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ae2:	3b01      	subs	r3, #1
 8012ae4:	4543      	cmp	r3, r8
 8012ae6:	dcf1      	bgt.n	8012acc <_printf_float+0x3fc>
 8012ae8:	464b      	mov	r3, r9
 8012aea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012aee:	e6de      	b.n	80128ae <_printf_float+0x1de>
 8012af0:	f04f 0800 	mov.w	r8, #0
 8012af4:	f104 0a1a 	add.w	sl, r4, #26
 8012af8:	e7f2      	b.n	8012ae0 <_printf_float+0x410>
 8012afa:	2301      	movs	r3, #1
 8012afc:	e7df      	b.n	8012abe <_printf_float+0x3ee>
 8012afe:	2301      	movs	r3, #1
 8012b00:	464a      	mov	r2, r9
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	47b8      	blx	r7
 8012b08:	3001      	adds	r0, #1
 8012b0a:	f43f ae3e 	beq.w	801278a <_printf_float+0xba>
 8012b0e:	f108 0801 	add.w	r8, r8, #1
 8012b12:	68e3      	ldr	r3, [r4, #12]
 8012b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b16:	1a9b      	subs	r3, r3, r2
 8012b18:	4543      	cmp	r3, r8
 8012b1a:	dcf0      	bgt.n	8012afe <_printf_float+0x42e>
 8012b1c:	e6fc      	b.n	8012918 <_printf_float+0x248>
 8012b1e:	f04f 0800 	mov.w	r8, #0
 8012b22:	f104 0919 	add.w	r9, r4, #25
 8012b26:	e7f4      	b.n	8012b12 <_printf_float+0x442>
 8012b28:	2900      	cmp	r1, #0
 8012b2a:	f43f ae8b 	beq.w	8012844 <_printf_float+0x174>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012b34:	ab09      	add	r3, sp, #36	; 0x24
 8012b36:	9300      	str	r3, [sp, #0]
 8012b38:	ec49 8b10 	vmov	d0, r8, r9
 8012b3c:	6022      	str	r2, [r4, #0]
 8012b3e:	f8cd a004 	str.w	sl, [sp, #4]
 8012b42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012b46:	4628      	mov	r0, r5
 8012b48:	f7ff fd2e 	bl	80125a8 <__cvt>
 8012b4c:	4680      	mov	r8, r0
 8012b4e:	e648      	b.n	80127e2 <_printf_float+0x112>

08012b50 <_printf_common>:
 8012b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b54:	4691      	mov	r9, r2
 8012b56:	461f      	mov	r7, r3
 8012b58:	688a      	ldr	r2, [r1, #8]
 8012b5a:	690b      	ldr	r3, [r1, #16]
 8012b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b60:	4293      	cmp	r3, r2
 8012b62:	bfb8      	it	lt
 8012b64:	4613      	movlt	r3, r2
 8012b66:	f8c9 3000 	str.w	r3, [r9]
 8012b6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b6e:	4606      	mov	r6, r0
 8012b70:	460c      	mov	r4, r1
 8012b72:	b112      	cbz	r2, 8012b7a <_printf_common+0x2a>
 8012b74:	3301      	adds	r3, #1
 8012b76:	f8c9 3000 	str.w	r3, [r9]
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	0699      	lsls	r1, r3, #26
 8012b7e:	bf42      	ittt	mi
 8012b80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012b84:	3302      	addmi	r3, #2
 8012b86:	f8c9 3000 	strmi.w	r3, [r9]
 8012b8a:	6825      	ldr	r5, [r4, #0]
 8012b8c:	f015 0506 	ands.w	r5, r5, #6
 8012b90:	d107      	bne.n	8012ba2 <_printf_common+0x52>
 8012b92:	f104 0a19 	add.w	sl, r4, #25
 8012b96:	68e3      	ldr	r3, [r4, #12]
 8012b98:	f8d9 2000 	ldr.w	r2, [r9]
 8012b9c:	1a9b      	subs	r3, r3, r2
 8012b9e:	42ab      	cmp	r3, r5
 8012ba0:	dc28      	bgt.n	8012bf4 <_printf_common+0xa4>
 8012ba2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012ba6:	6822      	ldr	r2, [r4, #0]
 8012ba8:	3300      	adds	r3, #0
 8012baa:	bf18      	it	ne
 8012bac:	2301      	movne	r3, #1
 8012bae:	0692      	lsls	r2, r2, #26
 8012bb0:	d42d      	bmi.n	8012c0e <_printf_common+0xbe>
 8012bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bb6:	4639      	mov	r1, r7
 8012bb8:	4630      	mov	r0, r6
 8012bba:	47c0      	blx	r8
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	d020      	beq.n	8012c02 <_printf_common+0xb2>
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	68e5      	ldr	r5, [r4, #12]
 8012bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8012bc8:	f003 0306 	and.w	r3, r3, #6
 8012bcc:	2b04      	cmp	r3, #4
 8012bce:	bf08      	it	eq
 8012bd0:	1aad      	subeq	r5, r5, r2
 8012bd2:	68a3      	ldr	r3, [r4, #8]
 8012bd4:	6922      	ldr	r2, [r4, #16]
 8012bd6:	bf0c      	ite	eq
 8012bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bdc:	2500      	movne	r5, #0
 8012bde:	4293      	cmp	r3, r2
 8012be0:	bfc4      	itt	gt
 8012be2:	1a9b      	subgt	r3, r3, r2
 8012be4:	18ed      	addgt	r5, r5, r3
 8012be6:	f04f 0900 	mov.w	r9, #0
 8012bea:	341a      	adds	r4, #26
 8012bec:	454d      	cmp	r5, r9
 8012bee:	d11a      	bne.n	8012c26 <_printf_common+0xd6>
 8012bf0:	2000      	movs	r0, #0
 8012bf2:	e008      	b.n	8012c06 <_printf_common+0xb6>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	4652      	mov	r2, sl
 8012bf8:	4639      	mov	r1, r7
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	47c0      	blx	r8
 8012bfe:	3001      	adds	r0, #1
 8012c00:	d103      	bne.n	8012c0a <_printf_common+0xba>
 8012c02:	f04f 30ff 	mov.w	r0, #4294967295
 8012c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0a:	3501      	adds	r5, #1
 8012c0c:	e7c3      	b.n	8012b96 <_printf_common+0x46>
 8012c0e:	18e1      	adds	r1, r4, r3
 8012c10:	1c5a      	adds	r2, r3, #1
 8012c12:	2030      	movs	r0, #48	; 0x30
 8012c14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c18:	4422      	add	r2, r4
 8012c1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c22:	3302      	adds	r3, #2
 8012c24:	e7c5      	b.n	8012bb2 <_printf_common+0x62>
 8012c26:	2301      	movs	r3, #1
 8012c28:	4622      	mov	r2, r4
 8012c2a:	4639      	mov	r1, r7
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	47c0      	blx	r8
 8012c30:	3001      	adds	r0, #1
 8012c32:	d0e6      	beq.n	8012c02 <_printf_common+0xb2>
 8012c34:	f109 0901 	add.w	r9, r9, #1
 8012c38:	e7d8      	b.n	8012bec <_printf_common+0x9c>
	...

08012c3c <_printf_i>:
 8012c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012c44:	460c      	mov	r4, r1
 8012c46:	7e09      	ldrb	r1, [r1, #24]
 8012c48:	b085      	sub	sp, #20
 8012c4a:	296e      	cmp	r1, #110	; 0x6e
 8012c4c:	4617      	mov	r7, r2
 8012c4e:	4606      	mov	r6, r0
 8012c50:	4698      	mov	r8, r3
 8012c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c54:	f000 80b3 	beq.w	8012dbe <_printf_i+0x182>
 8012c58:	d822      	bhi.n	8012ca0 <_printf_i+0x64>
 8012c5a:	2963      	cmp	r1, #99	; 0x63
 8012c5c:	d036      	beq.n	8012ccc <_printf_i+0x90>
 8012c5e:	d80a      	bhi.n	8012c76 <_printf_i+0x3a>
 8012c60:	2900      	cmp	r1, #0
 8012c62:	f000 80b9 	beq.w	8012dd8 <_printf_i+0x19c>
 8012c66:	2958      	cmp	r1, #88	; 0x58
 8012c68:	f000 8083 	beq.w	8012d72 <_printf_i+0x136>
 8012c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012c74:	e032      	b.n	8012cdc <_printf_i+0xa0>
 8012c76:	2964      	cmp	r1, #100	; 0x64
 8012c78:	d001      	beq.n	8012c7e <_printf_i+0x42>
 8012c7a:	2969      	cmp	r1, #105	; 0x69
 8012c7c:	d1f6      	bne.n	8012c6c <_printf_i+0x30>
 8012c7e:	6820      	ldr	r0, [r4, #0]
 8012c80:	6813      	ldr	r3, [r2, #0]
 8012c82:	0605      	lsls	r5, r0, #24
 8012c84:	f103 0104 	add.w	r1, r3, #4
 8012c88:	d52a      	bpl.n	8012ce0 <_printf_i+0xa4>
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	6011      	str	r1, [r2, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	da03      	bge.n	8012c9a <_printf_i+0x5e>
 8012c92:	222d      	movs	r2, #45	; 0x2d
 8012c94:	425b      	negs	r3, r3
 8012c96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012c9a:	486f      	ldr	r0, [pc, #444]	; (8012e58 <_printf_i+0x21c>)
 8012c9c:	220a      	movs	r2, #10
 8012c9e:	e039      	b.n	8012d14 <_printf_i+0xd8>
 8012ca0:	2973      	cmp	r1, #115	; 0x73
 8012ca2:	f000 809d 	beq.w	8012de0 <_printf_i+0x1a4>
 8012ca6:	d808      	bhi.n	8012cba <_printf_i+0x7e>
 8012ca8:	296f      	cmp	r1, #111	; 0x6f
 8012caa:	d020      	beq.n	8012cee <_printf_i+0xb2>
 8012cac:	2970      	cmp	r1, #112	; 0x70
 8012cae:	d1dd      	bne.n	8012c6c <_printf_i+0x30>
 8012cb0:	6823      	ldr	r3, [r4, #0]
 8012cb2:	f043 0320 	orr.w	r3, r3, #32
 8012cb6:	6023      	str	r3, [r4, #0]
 8012cb8:	e003      	b.n	8012cc2 <_printf_i+0x86>
 8012cba:	2975      	cmp	r1, #117	; 0x75
 8012cbc:	d017      	beq.n	8012cee <_printf_i+0xb2>
 8012cbe:	2978      	cmp	r1, #120	; 0x78
 8012cc0:	d1d4      	bne.n	8012c6c <_printf_i+0x30>
 8012cc2:	2378      	movs	r3, #120	; 0x78
 8012cc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012cc8:	4864      	ldr	r0, [pc, #400]	; (8012e5c <_printf_i+0x220>)
 8012cca:	e055      	b.n	8012d78 <_printf_i+0x13c>
 8012ccc:	6813      	ldr	r3, [r2, #0]
 8012cce:	1d19      	adds	r1, r3, #4
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	6011      	str	r1, [r2, #0]
 8012cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cdc:	2301      	movs	r3, #1
 8012cde:	e08c      	b.n	8012dfa <_printf_i+0x1be>
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	6011      	str	r1, [r2, #0]
 8012ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ce8:	bf18      	it	ne
 8012cea:	b21b      	sxthne	r3, r3
 8012cec:	e7cf      	b.n	8012c8e <_printf_i+0x52>
 8012cee:	6813      	ldr	r3, [r2, #0]
 8012cf0:	6825      	ldr	r5, [r4, #0]
 8012cf2:	1d18      	adds	r0, r3, #4
 8012cf4:	6010      	str	r0, [r2, #0]
 8012cf6:	0628      	lsls	r0, r5, #24
 8012cf8:	d501      	bpl.n	8012cfe <_printf_i+0xc2>
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	e002      	b.n	8012d04 <_printf_i+0xc8>
 8012cfe:	0668      	lsls	r0, r5, #25
 8012d00:	d5fb      	bpl.n	8012cfa <_printf_i+0xbe>
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	4854      	ldr	r0, [pc, #336]	; (8012e58 <_printf_i+0x21c>)
 8012d06:	296f      	cmp	r1, #111	; 0x6f
 8012d08:	bf14      	ite	ne
 8012d0a:	220a      	movne	r2, #10
 8012d0c:	2208      	moveq	r2, #8
 8012d0e:	2100      	movs	r1, #0
 8012d10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d14:	6865      	ldr	r5, [r4, #4]
 8012d16:	60a5      	str	r5, [r4, #8]
 8012d18:	2d00      	cmp	r5, #0
 8012d1a:	f2c0 8095 	blt.w	8012e48 <_printf_i+0x20c>
 8012d1e:	6821      	ldr	r1, [r4, #0]
 8012d20:	f021 0104 	bic.w	r1, r1, #4
 8012d24:	6021      	str	r1, [r4, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d13d      	bne.n	8012da6 <_printf_i+0x16a>
 8012d2a:	2d00      	cmp	r5, #0
 8012d2c:	f040 808e 	bne.w	8012e4c <_printf_i+0x210>
 8012d30:	4665      	mov	r5, ip
 8012d32:	2a08      	cmp	r2, #8
 8012d34:	d10b      	bne.n	8012d4e <_printf_i+0x112>
 8012d36:	6823      	ldr	r3, [r4, #0]
 8012d38:	07db      	lsls	r3, r3, #31
 8012d3a:	d508      	bpl.n	8012d4e <_printf_i+0x112>
 8012d3c:	6923      	ldr	r3, [r4, #16]
 8012d3e:	6862      	ldr	r2, [r4, #4]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	bfde      	ittt	le
 8012d44:	2330      	movle	r3, #48	; 0x30
 8012d46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012d4e:	ebac 0305 	sub.w	r3, ip, r5
 8012d52:	6123      	str	r3, [r4, #16]
 8012d54:	f8cd 8000 	str.w	r8, [sp]
 8012d58:	463b      	mov	r3, r7
 8012d5a:	aa03      	add	r2, sp, #12
 8012d5c:	4621      	mov	r1, r4
 8012d5e:	4630      	mov	r0, r6
 8012d60:	f7ff fef6 	bl	8012b50 <_printf_common>
 8012d64:	3001      	adds	r0, #1
 8012d66:	d14d      	bne.n	8012e04 <_printf_i+0x1c8>
 8012d68:	f04f 30ff 	mov.w	r0, #4294967295
 8012d6c:	b005      	add	sp, #20
 8012d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d72:	4839      	ldr	r0, [pc, #228]	; (8012e58 <_printf_i+0x21c>)
 8012d74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012d78:	6813      	ldr	r3, [r2, #0]
 8012d7a:	6821      	ldr	r1, [r4, #0]
 8012d7c:	1d1d      	adds	r5, r3, #4
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	6015      	str	r5, [r2, #0]
 8012d82:	060a      	lsls	r2, r1, #24
 8012d84:	d50b      	bpl.n	8012d9e <_printf_i+0x162>
 8012d86:	07ca      	lsls	r2, r1, #31
 8012d88:	bf44      	itt	mi
 8012d8a:	f041 0120 	orrmi.w	r1, r1, #32
 8012d8e:	6021      	strmi	r1, [r4, #0]
 8012d90:	b91b      	cbnz	r3, 8012d9a <_printf_i+0x15e>
 8012d92:	6822      	ldr	r2, [r4, #0]
 8012d94:	f022 0220 	bic.w	r2, r2, #32
 8012d98:	6022      	str	r2, [r4, #0]
 8012d9a:	2210      	movs	r2, #16
 8012d9c:	e7b7      	b.n	8012d0e <_printf_i+0xd2>
 8012d9e:	064d      	lsls	r5, r1, #25
 8012da0:	bf48      	it	mi
 8012da2:	b29b      	uxthmi	r3, r3
 8012da4:	e7ef      	b.n	8012d86 <_printf_i+0x14a>
 8012da6:	4665      	mov	r5, ip
 8012da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012dac:	fb02 3311 	mls	r3, r2, r1, r3
 8012db0:	5cc3      	ldrb	r3, [r0, r3]
 8012db2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012db6:	460b      	mov	r3, r1
 8012db8:	2900      	cmp	r1, #0
 8012dba:	d1f5      	bne.n	8012da8 <_printf_i+0x16c>
 8012dbc:	e7b9      	b.n	8012d32 <_printf_i+0xf6>
 8012dbe:	6813      	ldr	r3, [r2, #0]
 8012dc0:	6825      	ldr	r5, [r4, #0]
 8012dc2:	6961      	ldr	r1, [r4, #20]
 8012dc4:	1d18      	adds	r0, r3, #4
 8012dc6:	6010      	str	r0, [r2, #0]
 8012dc8:	0628      	lsls	r0, r5, #24
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	d501      	bpl.n	8012dd2 <_printf_i+0x196>
 8012dce:	6019      	str	r1, [r3, #0]
 8012dd0:	e002      	b.n	8012dd8 <_printf_i+0x19c>
 8012dd2:	066a      	lsls	r2, r5, #25
 8012dd4:	d5fb      	bpl.n	8012dce <_printf_i+0x192>
 8012dd6:	8019      	strh	r1, [r3, #0]
 8012dd8:	2300      	movs	r3, #0
 8012dda:	6123      	str	r3, [r4, #16]
 8012ddc:	4665      	mov	r5, ip
 8012dde:	e7b9      	b.n	8012d54 <_printf_i+0x118>
 8012de0:	6813      	ldr	r3, [r2, #0]
 8012de2:	1d19      	adds	r1, r3, #4
 8012de4:	6011      	str	r1, [r2, #0]
 8012de6:	681d      	ldr	r5, [r3, #0]
 8012de8:	6862      	ldr	r2, [r4, #4]
 8012dea:	2100      	movs	r1, #0
 8012dec:	4628      	mov	r0, r5
 8012dee:	f7ed fa0f 	bl	8000210 <memchr>
 8012df2:	b108      	cbz	r0, 8012df8 <_printf_i+0x1bc>
 8012df4:	1b40      	subs	r0, r0, r5
 8012df6:	6060      	str	r0, [r4, #4]
 8012df8:	6863      	ldr	r3, [r4, #4]
 8012dfa:	6123      	str	r3, [r4, #16]
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e02:	e7a7      	b.n	8012d54 <_printf_i+0x118>
 8012e04:	6923      	ldr	r3, [r4, #16]
 8012e06:	462a      	mov	r2, r5
 8012e08:	4639      	mov	r1, r7
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	47c0      	blx	r8
 8012e0e:	3001      	adds	r0, #1
 8012e10:	d0aa      	beq.n	8012d68 <_printf_i+0x12c>
 8012e12:	6823      	ldr	r3, [r4, #0]
 8012e14:	079b      	lsls	r3, r3, #30
 8012e16:	d413      	bmi.n	8012e40 <_printf_i+0x204>
 8012e18:	68e0      	ldr	r0, [r4, #12]
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	4298      	cmp	r0, r3
 8012e1e:	bfb8      	it	lt
 8012e20:	4618      	movlt	r0, r3
 8012e22:	e7a3      	b.n	8012d6c <_printf_i+0x130>
 8012e24:	2301      	movs	r3, #1
 8012e26:	464a      	mov	r2, r9
 8012e28:	4639      	mov	r1, r7
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	47c0      	blx	r8
 8012e2e:	3001      	adds	r0, #1
 8012e30:	d09a      	beq.n	8012d68 <_printf_i+0x12c>
 8012e32:	3501      	adds	r5, #1
 8012e34:	68e3      	ldr	r3, [r4, #12]
 8012e36:	9a03      	ldr	r2, [sp, #12]
 8012e38:	1a9b      	subs	r3, r3, r2
 8012e3a:	42ab      	cmp	r3, r5
 8012e3c:	dcf2      	bgt.n	8012e24 <_printf_i+0x1e8>
 8012e3e:	e7eb      	b.n	8012e18 <_printf_i+0x1dc>
 8012e40:	2500      	movs	r5, #0
 8012e42:	f104 0919 	add.w	r9, r4, #25
 8012e46:	e7f5      	b.n	8012e34 <_printf_i+0x1f8>
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d1ac      	bne.n	8012da6 <_printf_i+0x16a>
 8012e4c:	7803      	ldrb	r3, [r0, #0]
 8012e4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e56:	e76c      	b.n	8012d32 <_printf_i+0xf6>
 8012e58:	080177fc 	.word	0x080177fc
 8012e5c:	0801780d 	.word	0x0801780d

08012e60 <_scanf_float>:
 8012e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	469a      	mov	sl, r3
 8012e66:	688b      	ldr	r3, [r1, #8]
 8012e68:	4616      	mov	r6, r2
 8012e6a:	1e5a      	subs	r2, r3, #1
 8012e6c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e70:	b087      	sub	sp, #28
 8012e72:	bf83      	ittte	hi
 8012e74:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012e78:	189b      	addhi	r3, r3, r2
 8012e7a:	9301      	strhi	r3, [sp, #4]
 8012e7c:	2300      	movls	r3, #0
 8012e7e:	bf86      	itte	hi
 8012e80:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012e84:	608b      	strhi	r3, [r1, #8]
 8012e86:	9301      	strls	r3, [sp, #4]
 8012e88:	680b      	ldr	r3, [r1, #0]
 8012e8a:	4688      	mov	r8, r1
 8012e8c:	f04f 0b00 	mov.w	fp, #0
 8012e90:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012e94:	f848 3b1c 	str.w	r3, [r8], #28
 8012e98:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012e9c:	4607      	mov	r7, r0
 8012e9e:	460c      	mov	r4, r1
 8012ea0:	4645      	mov	r5, r8
 8012ea2:	465a      	mov	r2, fp
 8012ea4:	46d9      	mov	r9, fp
 8012ea6:	f8cd b008 	str.w	fp, [sp, #8]
 8012eaa:	68a1      	ldr	r1, [r4, #8]
 8012eac:	b181      	cbz	r1, 8012ed0 <_scanf_float+0x70>
 8012eae:	6833      	ldr	r3, [r6, #0]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b49      	cmp	r3, #73	; 0x49
 8012eb4:	d071      	beq.n	8012f9a <_scanf_float+0x13a>
 8012eb6:	d84d      	bhi.n	8012f54 <_scanf_float+0xf4>
 8012eb8:	2b39      	cmp	r3, #57	; 0x39
 8012eba:	d840      	bhi.n	8012f3e <_scanf_float+0xde>
 8012ebc:	2b31      	cmp	r3, #49	; 0x31
 8012ebe:	f080 8088 	bcs.w	8012fd2 <_scanf_float+0x172>
 8012ec2:	2b2d      	cmp	r3, #45	; 0x2d
 8012ec4:	f000 8090 	beq.w	8012fe8 <_scanf_float+0x188>
 8012ec8:	d815      	bhi.n	8012ef6 <_scanf_float+0x96>
 8012eca:	2b2b      	cmp	r3, #43	; 0x2b
 8012ecc:	f000 808c 	beq.w	8012fe8 <_scanf_float+0x188>
 8012ed0:	f1b9 0f00 	cmp.w	r9, #0
 8012ed4:	d003      	beq.n	8012ede <_scanf_float+0x7e>
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012edc:	6023      	str	r3, [r4, #0]
 8012ede:	3a01      	subs	r2, #1
 8012ee0:	2a01      	cmp	r2, #1
 8012ee2:	f200 80ea 	bhi.w	80130ba <_scanf_float+0x25a>
 8012ee6:	4545      	cmp	r5, r8
 8012ee8:	f200 80dc 	bhi.w	80130a4 <_scanf_float+0x244>
 8012eec:	2601      	movs	r6, #1
 8012eee:	4630      	mov	r0, r6
 8012ef0:	b007      	add	sp, #28
 8012ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8012ef8:	f000 809f 	beq.w	801303a <_scanf_float+0x1da>
 8012efc:	2b30      	cmp	r3, #48	; 0x30
 8012efe:	d1e7      	bne.n	8012ed0 <_scanf_float+0x70>
 8012f00:	6820      	ldr	r0, [r4, #0]
 8012f02:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012f06:	d064      	beq.n	8012fd2 <_scanf_float+0x172>
 8012f08:	9b01      	ldr	r3, [sp, #4]
 8012f0a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012f0e:	6020      	str	r0, [r4, #0]
 8012f10:	f109 0901 	add.w	r9, r9, #1
 8012f14:	b11b      	cbz	r3, 8012f1e <_scanf_float+0xbe>
 8012f16:	3b01      	subs	r3, #1
 8012f18:	3101      	adds	r1, #1
 8012f1a:	9301      	str	r3, [sp, #4]
 8012f1c:	60a1      	str	r1, [r4, #8]
 8012f1e:	68a3      	ldr	r3, [r4, #8]
 8012f20:	3b01      	subs	r3, #1
 8012f22:	60a3      	str	r3, [r4, #8]
 8012f24:	6923      	ldr	r3, [r4, #16]
 8012f26:	3301      	adds	r3, #1
 8012f28:	6123      	str	r3, [r4, #16]
 8012f2a:	6873      	ldr	r3, [r6, #4]
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	6073      	str	r3, [r6, #4]
 8012f32:	f340 80ac 	ble.w	801308e <_scanf_float+0x22e>
 8012f36:	6833      	ldr	r3, [r6, #0]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	6033      	str	r3, [r6, #0]
 8012f3c:	e7b5      	b.n	8012eaa <_scanf_float+0x4a>
 8012f3e:	2b45      	cmp	r3, #69	; 0x45
 8012f40:	f000 8085 	beq.w	801304e <_scanf_float+0x1ee>
 8012f44:	2b46      	cmp	r3, #70	; 0x46
 8012f46:	d06a      	beq.n	801301e <_scanf_float+0x1be>
 8012f48:	2b41      	cmp	r3, #65	; 0x41
 8012f4a:	d1c1      	bne.n	8012ed0 <_scanf_float+0x70>
 8012f4c:	2a01      	cmp	r2, #1
 8012f4e:	d1bf      	bne.n	8012ed0 <_scanf_float+0x70>
 8012f50:	2202      	movs	r2, #2
 8012f52:	e046      	b.n	8012fe2 <_scanf_float+0x182>
 8012f54:	2b65      	cmp	r3, #101	; 0x65
 8012f56:	d07a      	beq.n	801304e <_scanf_float+0x1ee>
 8012f58:	d818      	bhi.n	8012f8c <_scanf_float+0x12c>
 8012f5a:	2b54      	cmp	r3, #84	; 0x54
 8012f5c:	d066      	beq.n	801302c <_scanf_float+0x1cc>
 8012f5e:	d811      	bhi.n	8012f84 <_scanf_float+0x124>
 8012f60:	2b4e      	cmp	r3, #78	; 0x4e
 8012f62:	d1b5      	bne.n	8012ed0 <_scanf_float+0x70>
 8012f64:	2a00      	cmp	r2, #0
 8012f66:	d146      	bne.n	8012ff6 <_scanf_float+0x196>
 8012f68:	f1b9 0f00 	cmp.w	r9, #0
 8012f6c:	d145      	bne.n	8012ffa <_scanf_float+0x19a>
 8012f6e:	6821      	ldr	r1, [r4, #0]
 8012f70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012f74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012f78:	d13f      	bne.n	8012ffa <_scanf_float+0x19a>
 8012f7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012f7e:	6021      	str	r1, [r4, #0]
 8012f80:	2201      	movs	r2, #1
 8012f82:	e02e      	b.n	8012fe2 <_scanf_float+0x182>
 8012f84:	2b59      	cmp	r3, #89	; 0x59
 8012f86:	d01e      	beq.n	8012fc6 <_scanf_float+0x166>
 8012f88:	2b61      	cmp	r3, #97	; 0x61
 8012f8a:	e7de      	b.n	8012f4a <_scanf_float+0xea>
 8012f8c:	2b6e      	cmp	r3, #110	; 0x6e
 8012f8e:	d0e9      	beq.n	8012f64 <_scanf_float+0x104>
 8012f90:	d815      	bhi.n	8012fbe <_scanf_float+0x15e>
 8012f92:	2b66      	cmp	r3, #102	; 0x66
 8012f94:	d043      	beq.n	801301e <_scanf_float+0x1be>
 8012f96:	2b69      	cmp	r3, #105	; 0x69
 8012f98:	d19a      	bne.n	8012ed0 <_scanf_float+0x70>
 8012f9a:	f1bb 0f00 	cmp.w	fp, #0
 8012f9e:	d138      	bne.n	8013012 <_scanf_float+0x1b2>
 8012fa0:	f1b9 0f00 	cmp.w	r9, #0
 8012fa4:	d197      	bne.n	8012ed6 <_scanf_float+0x76>
 8012fa6:	6821      	ldr	r1, [r4, #0]
 8012fa8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012fac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012fb0:	d195      	bne.n	8012ede <_scanf_float+0x7e>
 8012fb2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012fb6:	6021      	str	r1, [r4, #0]
 8012fb8:	f04f 0b01 	mov.w	fp, #1
 8012fbc:	e011      	b.n	8012fe2 <_scanf_float+0x182>
 8012fbe:	2b74      	cmp	r3, #116	; 0x74
 8012fc0:	d034      	beq.n	801302c <_scanf_float+0x1cc>
 8012fc2:	2b79      	cmp	r3, #121	; 0x79
 8012fc4:	d184      	bne.n	8012ed0 <_scanf_float+0x70>
 8012fc6:	f1bb 0f07 	cmp.w	fp, #7
 8012fca:	d181      	bne.n	8012ed0 <_scanf_float+0x70>
 8012fcc:	f04f 0b08 	mov.w	fp, #8
 8012fd0:	e007      	b.n	8012fe2 <_scanf_float+0x182>
 8012fd2:	eb12 0f0b 	cmn.w	r2, fp
 8012fd6:	f47f af7b 	bne.w	8012ed0 <_scanf_float+0x70>
 8012fda:	6821      	ldr	r1, [r4, #0]
 8012fdc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012fe0:	6021      	str	r1, [r4, #0]
 8012fe2:	702b      	strb	r3, [r5, #0]
 8012fe4:	3501      	adds	r5, #1
 8012fe6:	e79a      	b.n	8012f1e <_scanf_float+0xbe>
 8012fe8:	6821      	ldr	r1, [r4, #0]
 8012fea:	0608      	lsls	r0, r1, #24
 8012fec:	f57f af70 	bpl.w	8012ed0 <_scanf_float+0x70>
 8012ff0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012ff4:	e7f4      	b.n	8012fe0 <_scanf_float+0x180>
 8012ff6:	2a02      	cmp	r2, #2
 8012ff8:	d047      	beq.n	801308a <_scanf_float+0x22a>
 8012ffa:	f1bb 0f01 	cmp.w	fp, #1
 8012ffe:	d003      	beq.n	8013008 <_scanf_float+0x1a8>
 8013000:	f1bb 0f04 	cmp.w	fp, #4
 8013004:	f47f af64 	bne.w	8012ed0 <_scanf_float+0x70>
 8013008:	f10b 0b01 	add.w	fp, fp, #1
 801300c:	fa5f fb8b 	uxtb.w	fp, fp
 8013010:	e7e7      	b.n	8012fe2 <_scanf_float+0x182>
 8013012:	f1bb 0f03 	cmp.w	fp, #3
 8013016:	d0f7      	beq.n	8013008 <_scanf_float+0x1a8>
 8013018:	f1bb 0f05 	cmp.w	fp, #5
 801301c:	e7f2      	b.n	8013004 <_scanf_float+0x1a4>
 801301e:	f1bb 0f02 	cmp.w	fp, #2
 8013022:	f47f af55 	bne.w	8012ed0 <_scanf_float+0x70>
 8013026:	f04f 0b03 	mov.w	fp, #3
 801302a:	e7da      	b.n	8012fe2 <_scanf_float+0x182>
 801302c:	f1bb 0f06 	cmp.w	fp, #6
 8013030:	f47f af4e 	bne.w	8012ed0 <_scanf_float+0x70>
 8013034:	f04f 0b07 	mov.w	fp, #7
 8013038:	e7d3      	b.n	8012fe2 <_scanf_float+0x182>
 801303a:	6821      	ldr	r1, [r4, #0]
 801303c:	0588      	lsls	r0, r1, #22
 801303e:	f57f af47 	bpl.w	8012ed0 <_scanf_float+0x70>
 8013042:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013046:	6021      	str	r1, [r4, #0]
 8013048:	f8cd 9008 	str.w	r9, [sp, #8]
 801304c:	e7c9      	b.n	8012fe2 <_scanf_float+0x182>
 801304e:	6821      	ldr	r1, [r4, #0]
 8013050:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013054:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013058:	d006      	beq.n	8013068 <_scanf_float+0x208>
 801305a:	0548      	lsls	r0, r1, #21
 801305c:	f57f af38 	bpl.w	8012ed0 <_scanf_float+0x70>
 8013060:	f1b9 0f00 	cmp.w	r9, #0
 8013064:	f43f af3b 	beq.w	8012ede <_scanf_float+0x7e>
 8013068:	0588      	lsls	r0, r1, #22
 801306a:	bf58      	it	pl
 801306c:	9802      	ldrpl	r0, [sp, #8]
 801306e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013072:	bf58      	it	pl
 8013074:	eba9 0000 	subpl.w	r0, r9, r0
 8013078:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801307c:	bf58      	it	pl
 801307e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013082:	6021      	str	r1, [r4, #0]
 8013084:	f04f 0900 	mov.w	r9, #0
 8013088:	e7ab      	b.n	8012fe2 <_scanf_float+0x182>
 801308a:	2203      	movs	r2, #3
 801308c:	e7a9      	b.n	8012fe2 <_scanf_float+0x182>
 801308e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013092:	9205      	str	r2, [sp, #20]
 8013094:	4631      	mov	r1, r6
 8013096:	4638      	mov	r0, r7
 8013098:	4798      	blx	r3
 801309a:	9a05      	ldr	r2, [sp, #20]
 801309c:	2800      	cmp	r0, #0
 801309e:	f43f af04 	beq.w	8012eaa <_scanf_float+0x4a>
 80130a2:	e715      	b.n	8012ed0 <_scanf_float+0x70>
 80130a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80130ac:	4632      	mov	r2, r6
 80130ae:	4638      	mov	r0, r7
 80130b0:	4798      	blx	r3
 80130b2:	6923      	ldr	r3, [r4, #16]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	6123      	str	r3, [r4, #16]
 80130b8:	e715      	b.n	8012ee6 <_scanf_float+0x86>
 80130ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80130be:	2b06      	cmp	r3, #6
 80130c0:	d80a      	bhi.n	80130d8 <_scanf_float+0x278>
 80130c2:	f1bb 0f02 	cmp.w	fp, #2
 80130c6:	d968      	bls.n	801319a <_scanf_float+0x33a>
 80130c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80130cc:	fa5f fb8b 	uxtb.w	fp, fp
 80130d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80130d4:	455d      	cmp	r5, fp
 80130d6:	d14b      	bne.n	8013170 <_scanf_float+0x310>
 80130d8:	6823      	ldr	r3, [r4, #0]
 80130da:	05da      	lsls	r2, r3, #23
 80130dc:	d51f      	bpl.n	801311e <_scanf_float+0x2be>
 80130de:	055b      	lsls	r3, r3, #21
 80130e0:	d468      	bmi.n	80131b4 <_scanf_float+0x354>
 80130e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80130e6:	6923      	ldr	r3, [r4, #16]
 80130e8:	2965      	cmp	r1, #101	; 0x65
 80130ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80130ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80130f2:	6123      	str	r3, [r4, #16]
 80130f4:	d00d      	beq.n	8013112 <_scanf_float+0x2b2>
 80130f6:	2945      	cmp	r1, #69	; 0x45
 80130f8:	d00b      	beq.n	8013112 <_scanf_float+0x2b2>
 80130fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130fe:	4632      	mov	r2, r6
 8013100:	4638      	mov	r0, r7
 8013102:	4798      	blx	r3
 8013104:	6923      	ldr	r3, [r4, #16]
 8013106:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801310a:	3b01      	subs	r3, #1
 801310c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013110:	6123      	str	r3, [r4, #16]
 8013112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013116:	4632      	mov	r2, r6
 8013118:	4638      	mov	r0, r7
 801311a:	4798      	blx	r3
 801311c:	465d      	mov	r5, fp
 801311e:	6826      	ldr	r6, [r4, #0]
 8013120:	f016 0610 	ands.w	r6, r6, #16
 8013124:	d17a      	bne.n	801321c <_scanf_float+0x3bc>
 8013126:	702e      	strb	r6, [r5, #0]
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801312e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013132:	d142      	bne.n	80131ba <_scanf_float+0x35a>
 8013134:	9b02      	ldr	r3, [sp, #8]
 8013136:	eba9 0303 	sub.w	r3, r9, r3
 801313a:	425a      	negs	r2, r3
 801313c:	2b00      	cmp	r3, #0
 801313e:	d149      	bne.n	80131d4 <_scanf_float+0x374>
 8013140:	2200      	movs	r2, #0
 8013142:	4641      	mov	r1, r8
 8013144:	4638      	mov	r0, r7
 8013146:	f000 ffcb 	bl	80140e0 <_strtod_r>
 801314a:	6825      	ldr	r5, [r4, #0]
 801314c:	f8da 3000 	ldr.w	r3, [sl]
 8013150:	f015 0f02 	tst.w	r5, #2
 8013154:	f103 0204 	add.w	r2, r3, #4
 8013158:	ec59 8b10 	vmov	r8, r9, d0
 801315c:	f8ca 2000 	str.w	r2, [sl]
 8013160:	d043      	beq.n	80131ea <_scanf_float+0x38a>
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	e9c3 8900 	strd	r8, r9, [r3]
 8013168:	68e3      	ldr	r3, [r4, #12]
 801316a:	3301      	adds	r3, #1
 801316c:	60e3      	str	r3, [r4, #12]
 801316e:	e6be      	b.n	8012eee <_scanf_float+0x8e>
 8013170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013174:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013178:	4632      	mov	r2, r6
 801317a:	4638      	mov	r0, r7
 801317c:	4798      	blx	r3
 801317e:	6923      	ldr	r3, [r4, #16]
 8013180:	3b01      	subs	r3, #1
 8013182:	6123      	str	r3, [r4, #16]
 8013184:	e7a6      	b.n	80130d4 <_scanf_float+0x274>
 8013186:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801318a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801318e:	4632      	mov	r2, r6
 8013190:	4638      	mov	r0, r7
 8013192:	4798      	blx	r3
 8013194:	6923      	ldr	r3, [r4, #16]
 8013196:	3b01      	subs	r3, #1
 8013198:	6123      	str	r3, [r4, #16]
 801319a:	4545      	cmp	r5, r8
 801319c:	d8f3      	bhi.n	8013186 <_scanf_float+0x326>
 801319e:	e6a5      	b.n	8012eec <_scanf_float+0x8c>
 80131a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80131a8:	4632      	mov	r2, r6
 80131aa:	4638      	mov	r0, r7
 80131ac:	4798      	blx	r3
 80131ae:	6923      	ldr	r3, [r4, #16]
 80131b0:	3b01      	subs	r3, #1
 80131b2:	6123      	str	r3, [r4, #16]
 80131b4:	4545      	cmp	r5, r8
 80131b6:	d8f3      	bhi.n	80131a0 <_scanf_float+0x340>
 80131b8:	e698      	b.n	8012eec <_scanf_float+0x8c>
 80131ba:	9b03      	ldr	r3, [sp, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d0bf      	beq.n	8013140 <_scanf_float+0x2e0>
 80131c0:	9904      	ldr	r1, [sp, #16]
 80131c2:	230a      	movs	r3, #10
 80131c4:	4632      	mov	r2, r6
 80131c6:	3101      	adds	r1, #1
 80131c8:	4638      	mov	r0, r7
 80131ca:	f001 f815 	bl	80141f8 <_strtol_r>
 80131ce:	9b03      	ldr	r3, [sp, #12]
 80131d0:	9d04      	ldr	r5, [sp, #16]
 80131d2:	1ac2      	subs	r2, r0, r3
 80131d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80131d8:	429d      	cmp	r5, r3
 80131da:	bf28      	it	cs
 80131dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80131e0:	490f      	ldr	r1, [pc, #60]	; (8013220 <_scanf_float+0x3c0>)
 80131e2:	4628      	mov	r0, r5
 80131e4:	f000 f8d4 	bl	8013390 <siprintf>
 80131e8:	e7aa      	b.n	8013140 <_scanf_float+0x2e0>
 80131ea:	f015 0504 	ands.w	r5, r5, #4
 80131ee:	d1b8      	bne.n	8013162 <_scanf_float+0x302>
 80131f0:	681f      	ldr	r7, [r3, #0]
 80131f2:	ee10 2a10 	vmov	r2, s0
 80131f6:	464b      	mov	r3, r9
 80131f8:	ee10 0a10 	vmov	r0, s0
 80131fc:	4649      	mov	r1, r9
 80131fe:	f7ed fcad 	bl	8000b5c <__aeabi_dcmpun>
 8013202:	b128      	cbz	r0, 8013210 <_scanf_float+0x3b0>
 8013204:	4628      	mov	r0, r5
 8013206:	f000 f889 	bl	801331c <nanf>
 801320a:	ed87 0a00 	vstr	s0, [r7]
 801320e:	e7ab      	b.n	8013168 <_scanf_float+0x308>
 8013210:	4640      	mov	r0, r8
 8013212:	4649      	mov	r1, r9
 8013214:	f7ed fd00 	bl	8000c18 <__aeabi_d2f>
 8013218:	6038      	str	r0, [r7, #0]
 801321a:	e7a5      	b.n	8013168 <_scanf_float+0x308>
 801321c:	2600      	movs	r6, #0
 801321e:	e666      	b.n	8012eee <_scanf_float+0x8e>
 8013220:	0801781e 	.word	0x0801781e

08013224 <iprintf>:
 8013224:	b40f      	push	{r0, r1, r2, r3}
 8013226:	4b0a      	ldr	r3, [pc, #40]	; (8013250 <iprintf+0x2c>)
 8013228:	b513      	push	{r0, r1, r4, lr}
 801322a:	681c      	ldr	r4, [r3, #0]
 801322c:	b124      	cbz	r4, 8013238 <iprintf+0x14>
 801322e:	69a3      	ldr	r3, [r4, #24]
 8013230:	b913      	cbnz	r3, 8013238 <iprintf+0x14>
 8013232:	4620      	mov	r0, r4
 8013234:	f002 f828 	bl	8015288 <__sinit>
 8013238:	ab05      	add	r3, sp, #20
 801323a:	9a04      	ldr	r2, [sp, #16]
 801323c:	68a1      	ldr	r1, [r4, #8]
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	4620      	mov	r0, r4
 8013242:	f003 fc69 	bl	8016b18 <_vfiprintf_r>
 8013246:	b002      	add	sp, #8
 8013248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801324c:	b004      	add	sp, #16
 801324e:	4770      	bx	lr
 8013250:	2000000c 	.word	0x2000000c

08013254 <_puts_r>:
 8013254:	b570      	push	{r4, r5, r6, lr}
 8013256:	460e      	mov	r6, r1
 8013258:	4605      	mov	r5, r0
 801325a:	b118      	cbz	r0, 8013264 <_puts_r+0x10>
 801325c:	6983      	ldr	r3, [r0, #24]
 801325e:	b90b      	cbnz	r3, 8013264 <_puts_r+0x10>
 8013260:	f002 f812 	bl	8015288 <__sinit>
 8013264:	69ab      	ldr	r3, [r5, #24]
 8013266:	68ac      	ldr	r4, [r5, #8]
 8013268:	b913      	cbnz	r3, 8013270 <_puts_r+0x1c>
 801326a:	4628      	mov	r0, r5
 801326c:	f002 f80c 	bl	8015288 <__sinit>
 8013270:	4b23      	ldr	r3, [pc, #140]	; (8013300 <_puts_r+0xac>)
 8013272:	429c      	cmp	r4, r3
 8013274:	d117      	bne.n	80132a6 <_puts_r+0x52>
 8013276:	686c      	ldr	r4, [r5, #4]
 8013278:	89a3      	ldrh	r3, [r4, #12]
 801327a:	071b      	lsls	r3, r3, #28
 801327c:	d51d      	bpl.n	80132ba <_puts_r+0x66>
 801327e:	6923      	ldr	r3, [r4, #16]
 8013280:	b1db      	cbz	r3, 80132ba <_puts_r+0x66>
 8013282:	3e01      	subs	r6, #1
 8013284:	68a3      	ldr	r3, [r4, #8]
 8013286:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801328a:	3b01      	subs	r3, #1
 801328c:	60a3      	str	r3, [r4, #8]
 801328e:	b9e9      	cbnz	r1, 80132cc <_puts_r+0x78>
 8013290:	2b00      	cmp	r3, #0
 8013292:	da2e      	bge.n	80132f2 <_puts_r+0x9e>
 8013294:	4622      	mov	r2, r4
 8013296:	210a      	movs	r1, #10
 8013298:	4628      	mov	r0, r5
 801329a:	f000 ffdf 	bl	801425c <__swbuf_r>
 801329e:	3001      	adds	r0, #1
 80132a0:	d011      	beq.n	80132c6 <_puts_r+0x72>
 80132a2:	200a      	movs	r0, #10
 80132a4:	e011      	b.n	80132ca <_puts_r+0x76>
 80132a6:	4b17      	ldr	r3, [pc, #92]	; (8013304 <_puts_r+0xb0>)
 80132a8:	429c      	cmp	r4, r3
 80132aa:	d101      	bne.n	80132b0 <_puts_r+0x5c>
 80132ac:	68ac      	ldr	r4, [r5, #8]
 80132ae:	e7e3      	b.n	8013278 <_puts_r+0x24>
 80132b0:	4b15      	ldr	r3, [pc, #84]	; (8013308 <_puts_r+0xb4>)
 80132b2:	429c      	cmp	r4, r3
 80132b4:	bf08      	it	eq
 80132b6:	68ec      	ldreq	r4, [r5, #12]
 80132b8:	e7de      	b.n	8013278 <_puts_r+0x24>
 80132ba:	4621      	mov	r1, r4
 80132bc:	4628      	mov	r0, r5
 80132be:	f001 f831 	bl	8014324 <__swsetup_r>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d0dd      	beq.n	8013282 <_puts_r+0x2e>
 80132c6:	f04f 30ff 	mov.w	r0, #4294967295
 80132ca:	bd70      	pop	{r4, r5, r6, pc}
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	da04      	bge.n	80132da <_puts_r+0x86>
 80132d0:	69a2      	ldr	r2, [r4, #24]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	dc06      	bgt.n	80132e4 <_puts_r+0x90>
 80132d6:	290a      	cmp	r1, #10
 80132d8:	d004      	beq.n	80132e4 <_puts_r+0x90>
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	1c5a      	adds	r2, r3, #1
 80132de:	6022      	str	r2, [r4, #0]
 80132e0:	7019      	strb	r1, [r3, #0]
 80132e2:	e7cf      	b.n	8013284 <_puts_r+0x30>
 80132e4:	4622      	mov	r2, r4
 80132e6:	4628      	mov	r0, r5
 80132e8:	f000 ffb8 	bl	801425c <__swbuf_r>
 80132ec:	3001      	adds	r0, #1
 80132ee:	d1c9      	bne.n	8013284 <_puts_r+0x30>
 80132f0:	e7e9      	b.n	80132c6 <_puts_r+0x72>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	200a      	movs	r0, #10
 80132f6:	1c5a      	adds	r2, r3, #1
 80132f8:	6022      	str	r2, [r4, #0]
 80132fa:	7018      	strb	r0, [r3, #0]
 80132fc:	e7e5      	b.n	80132ca <_puts_r+0x76>
 80132fe:	bf00      	nop
 8013300:	080178a8 	.word	0x080178a8
 8013304:	080178c8 	.word	0x080178c8
 8013308:	08017888 	.word	0x08017888

0801330c <puts>:
 801330c:	4b02      	ldr	r3, [pc, #8]	; (8013318 <puts+0xc>)
 801330e:	4601      	mov	r1, r0
 8013310:	6818      	ldr	r0, [r3, #0]
 8013312:	f7ff bf9f 	b.w	8013254 <_puts_r>
 8013316:	bf00      	nop
 8013318:	2000000c 	.word	0x2000000c

0801331c <nanf>:
 801331c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013324 <nanf+0x8>
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	7fc00000 	.word	0x7fc00000

08013328 <sniprintf>:
 8013328:	b40c      	push	{r2, r3}
 801332a:	b530      	push	{r4, r5, lr}
 801332c:	4b17      	ldr	r3, [pc, #92]	; (801338c <sniprintf+0x64>)
 801332e:	1e0c      	subs	r4, r1, #0
 8013330:	b09d      	sub	sp, #116	; 0x74
 8013332:	681d      	ldr	r5, [r3, #0]
 8013334:	da08      	bge.n	8013348 <sniprintf+0x20>
 8013336:	238b      	movs	r3, #139	; 0x8b
 8013338:	602b      	str	r3, [r5, #0]
 801333a:	f04f 30ff 	mov.w	r0, #4294967295
 801333e:	b01d      	add	sp, #116	; 0x74
 8013340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013344:	b002      	add	sp, #8
 8013346:	4770      	bx	lr
 8013348:	f44f 7302 	mov.w	r3, #520	; 0x208
 801334c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013350:	bf14      	ite	ne
 8013352:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013356:	4623      	moveq	r3, r4
 8013358:	9304      	str	r3, [sp, #16]
 801335a:	9307      	str	r3, [sp, #28]
 801335c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013360:	9002      	str	r0, [sp, #8]
 8013362:	9006      	str	r0, [sp, #24]
 8013364:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013368:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801336a:	ab21      	add	r3, sp, #132	; 0x84
 801336c:	a902      	add	r1, sp, #8
 801336e:	4628      	mov	r0, r5
 8013370:	9301      	str	r3, [sp, #4]
 8013372:	f003 f905 	bl	8016580 <_svfiprintf_r>
 8013376:	1c43      	adds	r3, r0, #1
 8013378:	bfbc      	itt	lt
 801337a:	238b      	movlt	r3, #139	; 0x8b
 801337c:	602b      	strlt	r3, [r5, #0]
 801337e:	2c00      	cmp	r4, #0
 8013380:	d0dd      	beq.n	801333e <sniprintf+0x16>
 8013382:	9b02      	ldr	r3, [sp, #8]
 8013384:	2200      	movs	r2, #0
 8013386:	701a      	strb	r2, [r3, #0]
 8013388:	e7d9      	b.n	801333e <sniprintf+0x16>
 801338a:	bf00      	nop
 801338c:	2000000c 	.word	0x2000000c

08013390 <siprintf>:
 8013390:	b40e      	push	{r1, r2, r3}
 8013392:	b500      	push	{lr}
 8013394:	b09c      	sub	sp, #112	; 0x70
 8013396:	ab1d      	add	r3, sp, #116	; 0x74
 8013398:	9002      	str	r0, [sp, #8]
 801339a:	9006      	str	r0, [sp, #24]
 801339c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133a0:	4809      	ldr	r0, [pc, #36]	; (80133c8 <siprintf+0x38>)
 80133a2:	9107      	str	r1, [sp, #28]
 80133a4:	9104      	str	r1, [sp, #16]
 80133a6:	4909      	ldr	r1, [pc, #36]	; (80133cc <siprintf+0x3c>)
 80133a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133ac:	9105      	str	r1, [sp, #20]
 80133ae:	6800      	ldr	r0, [r0, #0]
 80133b0:	9301      	str	r3, [sp, #4]
 80133b2:	a902      	add	r1, sp, #8
 80133b4:	f003 f8e4 	bl	8016580 <_svfiprintf_r>
 80133b8:	9b02      	ldr	r3, [sp, #8]
 80133ba:	2200      	movs	r2, #0
 80133bc:	701a      	strb	r2, [r3, #0]
 80133be:	b01c      	add	sp, #112	; 0x70
 80133c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80133c4:	b003      	add	sp, #12
 80133c6:	4770      	bx	lr
 80133c8:	2000000c 	.word	0x2000000c
 80133cc:	ffff0208 	.word	0xffff0208

080133d0 <siscanf>:
 80133d0:	b40e      	push	{r1, r2, r3}
 80133d2:	b530      	push	{r4, r5, lr}
 80133d4:	b09c      	sub	sp, #112	; 0x70
 80133d6:	ac1f      	add	r4, sp, #124	; 0x7c
 80133d8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80133dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80133e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80133e4:	9002      	str	r0, [sp, #8]
 80133e6:	9006      	str	r0, [sp, #24]
 80133e8:	f7ec ff0a 	bl	8000200 <strlen>
 80133ec:	4b0b      	ldr	r3, [pc, #44]	; (801341c <siscanf+0x4c>)
 80133ee:	9003      	str	r0, [sp, #12]
 80133f0:	9007      	str	r0, [sp, #28]
 80133f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80133f4:	480a      	ldr	r0, [pc, #40]	; (8013420 <siscanf+0x50>)
 80133f6:	9401      	str	r4, [sp, #4]
 80133f8:	2300      	movs	r3, #0
 80133fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80133fc:	9314      	str	r3, [sp, #80]	; 0x50
 80133fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013402:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013406:	462a      	mov	r2, r5
 8013408:	4623      	mov	r3, r4
 801340a:	a902      	add	r1, sp, #8
 801340c:	6800      	ldr	r0, [r0, #0]
 801340e:	f003 fa09 	bl	8016824 <__ssvfiscanf_r>
 8013412:	b01c      	add	sp, #112	; 0x70
 8013414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013418:	b003      	add	sp, #12
 801341a:	4770      	bx	lr
 801341c:	08013447 	.word	0x08013447
 8013420:	2000000c 	.word	0x2000000c

08013424 <__sread>:
 8013424:	b510      	push	{r4, lr}
 8013426:	460c      	mov	r4, r1
 8013428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801342c:	f003 fde2 	bl	8016ff4 <_read_r>
 8013430:	2800      	cmp	r0, #0
 8013432:	bfab      	itete	ge
 8013434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013436:	89a3      	ldrhlt	r3, [r4, #12]
 8013438:	181b      	addge	r3, r3, r0
 801343a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801343e:	bfac      	ite	ge
 8013440:	6563      	strge	r3, [r4, #84]	; 0x54
 8013442:	81a3      	strhlt	r3, [r4, #12]
 8013444:	bd10      	pop	{r4, pc}

08013446 <__seofread>:
 8013446:	2000      	movs	r0, #0
 8013448:	4770      	bx	lr

0801344a <__swrite>:
 801344a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801344e:	461f      	mov	r7, r3
 8013450:	898b      	ldrh	r3, [r1, #12]
 8013452:	05db      	lsls	r3, r3, #23
 8013454:	4605      	mov	r5, r0
 8013456:	460c      	mov	r4, r1
 8013458:	4616      	mov	r6, r2
 801345a:	d505      	bpl.n	8013468 <__swrite+0x1e>
 801345c:	2302      	movs	r3, #2
 801345e:	2200      	movs	r2, #0
 8013460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013464:	f002 fae2 	bl	8015a2c <_lseek_r>
 8013468:	89a3      	ldrh	r3, [r4, #12]
 801346a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801346e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013472:	81a3      	strh	r3, [r4, #12]
 8013474:	4632      	mov	r2, r6
 8013476:	463b      	mov	r3, r7
 8013478:	4628      	mov	r0, r5
 801347a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801347e:	f000 bf3f 	b.w	8014300 <_write_r>

08013482 <__sseek>:
 8013482:	b510      	push	{r4, lr}
 8013484:	460c      	mov	r4, r1
 8013486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801348a:	f002 facf 	bl	8015a2c <_lseek_r>
 801348e:	1c43      	adds	r3, r0, #1
 8013490:	89a3      	ldrh	r3, [r4, #12]
 8013492:	bf15      	itete	ne
 8013494:	6560      	strne	r0, [r4, #84]	; 0x54
 8013496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801349a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801349e:	81a3      	strheq	r3, [r4, #12]
 80134a0:	bf18      	it	ne
 80134a2:	81a3      	strhne	r3, [r4, #12]
 80134a4:	bd10      	pop	{r4, pc}

080134a6 <__sclose>:
 80134a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134aa:	f000 bfa9 	b.w	8014400 <_close_r>

080134ae <strcpy>:
 80134ae:	4603      	mov	r3, r0
 80134b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134b4:	f803 2b01 	strb.w	r2, [r3], #1
 80134b8:	2a00      	cmp	r2, #0
 80134ba:	d1f9      	bne.n	80134b0 <strcpy+0x2>
 80134bc:	4770      	bx	lr

080134be <sulp>:
 80134be:	b570      	push	{r4, r5, r6, lr}
 80134c0:	4604      	mov	r4, r0
 80134c2:	460d      	mov	r5, r1
 80134c4:	ec45 4b10 	vmov	d0, r4, r5
 80134c8:	4616      	mov	r6, r2
 80134ca:	f002 fe15 	bl	80160f8 <__ulp>
 80134ce:	ec51 0b10 	vmov	r0, r1, d0
 80134d2:	b17e      	cbz	r6, 80134f4 <sulp+0x36>
 80134d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80134d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80134dc:	2b00      	cmp	r3, #0
 80134de:	dd09      	ble.n	80134f4 <sulp+0x36>
 80134e0:	051b      	lsls	r3, r3, #20
 80134e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80134e6:	2400      	movs	r4, #0
 80134e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80134ec:	4622      	mov	r2, r4
 80134ee:	462b      	mov	r3, r5
 80134f0:	f7ed f89a 	bl	8000628 <__aeabi_dmul>
 80134f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080134f8 <_strtod_l>:
 80134f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134fc:	461f      	mov	r7, r3
 80134fe:	b0a1      	sub	sp, #132	; 0x84
 8013500:	2300      	movs	r3, #0
 8013502:	4681      	mov	r9, r0
 8013504:	4638      	mov	r0, r7
 8013506:	460e      	mov	r6, r1
 8013508:	9217      	str	r2, [sp, #92]	; 0x5c
 801350a:	931c      	str	r3, [sp, #112]	; 0x70
 801350c:	f002 fa7e 	bl	8015a0c <__localeconv_l>
 8013510:	4680      	mov	r8, r0
 8013512:	6800      	ldr	r0, [r0, #0]
 8013514:	f7ec fe74 	bl	8000200 <strlen>
 8013518:	f04f 0a00 	mov.w	sl, #0
 801351c:	4604      	mov	r4, r0
 801351e:	f04f 0b00 	mov.w	fp, #0
 8013522:	961b      	str	r6, [sp, #108]	; 0x6c
 8013524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013526:	781a      	ldrb	r2, [r3, #0]
 8013528:	2a0d      	cmp	r2, #13
 801352a:	d832      	bhi.n	8013592 <_strtod_l+0x9a>
 801352c:	2a09      	cmp	r2, #9
 801352e:	d236      	bcs.n	801359e <_strtod_l+0xa6>
 8013530:	2a00      	cmp	r2, #0
 8013532:	d03e      	beq.n	80135b2 <_strtod_l+0xba>
 8013534:	2300      	movs	r3, #0
 8013536:	930d      	str	r3, [sp, #52]	; 0x34
 8013538:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801353a:	782b      	ldrb	r3, [r5, #0]
 801353c:	2b30      	cmp	r3, #48	; 0x30
 801353e:	f040 80ac 	bne.w	801369a <_strtod_l+0x1a2>
 8013542:	786b      	ldrb	r3, [r5, #1]
 8013544:	2b58      	cmp	r3, #88	; 0x58
 8013546:	d001      	beq.n	801354c <_strtod_l+0x54>
 8013548:	2b78      	cmp	r3, #120	; 0x78
 801354a:	d167      	bne.n	801361c <_strtod_l+0x124>
 801354c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801354e:	9301      	str	r3, [sp, #4]
 8013550:	ab1c      	add	r3, sp, #112	; 0x70
 8013552:	9300      	str	r3, [sp, #0]
 8013554:	9702      	str	r7, [sp, #8]
 8013556:	ab1d      	add	r3, sp, #116	; 0x74
 8013558:	4a88      	ldr	r2, [pc, #544]	; (801377c <_strtod_l+0x284>)
 801355a:	a91b      	add	r1, sp, #108	; 0x6c
 801355c:	4648      	mov	r0, r9
 801355e:	f001 ff6c 	bl	801543a <__gethex>
 8013562:	f010 0407 	ands.w	r4, r0, #7
 8013566:	4606      	mov	r6, r0
 8013568:	d005      	beq.n	8013576 <_strtod_l+0x7e>
 801356a:	2c06      	cmp	r4, #6
 801356c:	d12b      	bne.n	80135c6 <_strtod_l+0xce>
 801356e:	3501      	adds	r5, #1
 8013570:	2300      	movs	r3, #0
 8013572:	951b      	str	r5, [sp, #108]	; 0x6c
 8013574:	930d      	str	r3, [sp, #52]	; 0x34
 8013576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013578:	2b00      	cmp	r3, #0
 801357a:	f040 859a 	bne.w	80140b2 <_strtod_l+0xbba>
 801357e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013580:	b1e3      	cbz	r3, 80135bc <_strtod_l+0xc4>
 8013582:	4652      	mov	r2, sl
 8013584:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013588:	ec43 2b10 	vmov	d0, r2, r3
 801358c:	b021      	add	sp, #132	; 0x84
 801358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013592:	2a2b      	cmp	r2, #43	; 0x2b
 8013594:	d015      	beq.n	80135c2 <_strtod_l+0xca>
 8013596:	2a2d      	cmp	r2, #45	; 0x2d
 8013598:	d004      	beq.n	80135a4 <_strtod_l+0xac>
 801359a:	2a20      	cmp	r2, #32
 801359c:	d1ca      	bne.n	8013534 <_strtod_l+0x3c>
 801359e:	3301      	adds	r3, #1
 80135a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80135a2:	e7bf      	b.n	8013524 <_strtod_l+0x2c>
 80135a4:	2201      	movs	r2, #1
 80135a6:	920d      	str	r2, [sp, #52]	; 0x34
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80135ac:	785b      	ldrb	r3, [r3, #1]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d1c2      	bne.n	8013538 <_strtod_l+0x40>
 80135b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80135b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f040 8579 	bne.w	80140ae <_strtod_l+0xbb6>
 80135bc:	4652      	mov	r2, sl
 80135be:	465b      	mov	r3, fp
 80135c0:	e7e2      	b.n	8013588 <_strtod_l+0x90>
 80135c2:	2200      	movs	r2, #0
 80135c4:	e7ef      	b.n	80135a6 <_strtod_l+0xae>
 80135c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80135c8:	b13a      	cbz	r2, 80135da <_strtod_l+0xe2>
 80135ca:	2135      	movs	r1, #53	; 0x35
 80135cc:	a81e      	add	r0, sp, #120	; 0x78
 80135ce:	f002 fe8b 	bl	80162e8 <__copybits>
 80135d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80135d4:	4648      	mov	r0, r9
 80135d6:	f002 faf8 	bl	8015bca <_Bfree>
 80135da:	3c01      	subs	r4, #1
 80135dc:	2c04      	cmp	r4, #4
 80135de:	d806      	bhi.n	80135ee <_strtod_l+0xf6>
 80135e0:	e8df f004 	tbb	[pc, r4]
 80135e4:	1714030a 	.word	0x1714030a
 80135e8:	0a          	.byte	0x0a
 80135e9:	00          	.byte	0x00
 80135ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80135ee:	0730      	lsls	r0, r6, #28
 80135f0:	d5c1      	bpl.n	8013576 <_strtod_l+0x7e>
 80135f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80135f6:	e7be      	b.n	8013576 <_strtod_l+0x7e>
 80135f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80135fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80135fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013602:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013606:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801360a:	e7f0      	b.n	80135ee <_strtod_l+0xf6>
 801360c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013780 <_strtod_l+0x288>
 8013610:	e7ed      	b.n	80135ee <_strtod_l+0xf6>
 8013612:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013616:	f04f 3aff 	mov.w	sl, #4294967295
 801361a:	e7e8      	b.n	80135ee <_strtod_l+0xf6>
 801361c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801361e:	1c5a      	adds	r2, r3, #1
 8013620:	921b      	str	r2, [sp, #108]	; 0x6c
 8013622:	785b      	ldrb	r3, [r3, #1]
 8013624:	2b30      	cmp	r3, #48	; 0x30
 8013626:	d0f9      	beq.n	801361c <_strtod_l+0x124>
 8013628:	2b00      	cmp	r3, #0
 801362a:	d0a4      	beq.n	8013576 <_strtod_l+0x7e>
 801362c:	2301      	movs	r3, #1
 801362e:	2500      	movs	r5, #0
 8013630:	9306      	str	r3, [sp, #24]
 8013632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013634:	9308      	str	r3, [sp, #32]
 8013636:	9507      	str	r5, [sp, #28]
 8013638:	9505      	str	r5, [sp, #20]
 801363a:	220a      	movs	r2, #10
 801363c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801363e:	7807      	ldrb	r7, [r0, #0]
 8013640:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013644:	b2d9      	uxtb	r1, r3
 8013646:	2909      	cmp	r1, #9
 8013648:	d929      	bls.n	801369e <_strtod_l+0x1a6>
 801364a:	4622      	mov	r2, r4
 801364c:	f8d8 1000 	ldr.w	r1, [r8]
 8013650:	f003 fd24 	bl	801709c <strncmp>
 8013654:	2800      	cmp	r0, #0
 8013656:	d031      	beq.n	80136bc <_strtod_l+0x1c4>
 8013658:	2000      	movs	r0, #0
 801365a:	9c05      	ldr	r4, [sp, #20]
 801365c:	9004      	str	r0, [sp, #16]
 801365e:	463b      	mov	r3, r7
 8013660:	4602      	mov	r2, r0
 8013662:	2b65      	cmp	r3, #101	; 0x65
 8013664:	d001      	beq.n	801366a <_strtod_l+0x172>
 8013666:	2b45      	cmp	r3, #69	; 0x45
 8013668:	d114      	bne.n	8013694 <_strtod_l+0x19c>
 801366a:	b924      	cbnz	r4, 8013676 <_strtod_l+0x17e>
 801366c:	b910      	cbnz	r0, 8013674 <_strtod_l+0x17c>
 801366e:	9b06      	ldr	r3, [sp, #24]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d09e      	beq.n	80135b2 <_strtod_l+0xba>
 8013674:	2400      	movs	r4, #0
 8013676:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013678:	1c73      	adds	r3, r6, #1
 801367a:	931b      	str	r3, [sp, #108]	; 0x6c
 801367c:	7873      	ldrb	r3, [r6, #1]
 801367e:	2b2b      	cmp	r3, #43	; 0x2b
 8013680:	d078      	beq.n	8013774 <_strtod_l+0x27c>
 8013682:	2b2d      	cmp	r3, #45	; 0x2d
 8013684:	d070      	beq.n	8013768 <_strtod_l+0x270>
 8013686:	f04f 0c00 	mov.w	ip, #0
 801368a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801368e:	2f09      	cmp	r7, #9
 8013690:	d97c      	bls.n	801378c <_strtod_l+0x294>
 8013692:	961b      	str	r6, [sp, #108]	; 0x6c
 8013694:	f04f 0e00 	mov.w	lr, #0
 8013698:	e09a      	b.n	80137d0 <_strtod_l+0x2d8>
 801369a:	2300      	movs	r3, #0
 801369c:	e7c7      	b.n	801362e <_strtod_l+0x136>
 801369e:	9905      	ldr	r1, [sp, #20]
 80136a0:	2908      	cmp	r1, #8
 80136a2:	bfdd      	ittte	le
 80136a4:	9907      	ldrle	r1, [sp, #28]
 80136a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80136aa:	9307      	strle	r3, [sp, #28]
 80136ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 80136b0:	9b05      	ldr	r3, [sp, #20]
 80136b2:	3001      	adds	r0, #1
 80136b4:	3301      	adds	r3, #1
 80136b6:	9305      	str	r3, [sp, #20]
 80136b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80136ba:	e7bf      	b.n	801363c <_strtod_l+0x144>
 80136bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136be:	191a      	adds	r2, r3, r4
 80136c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80136c2:	9a05      	ldr	r2, [sp, #20]
 80136c4:	5d1b      	ldrb	r3, [r3, r4]
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	d037      	beq.n	801373a <_strtod_l+0x242>
 80136ca:	9c05      	ldr	r4, [sp, #20]
 80136cc:	4602      	mov	r2, r0
 80136ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80136d2:	2909      	cmp	r1, #9
 80136d4:	d913      	bls.n	80136fe <_strtod_l+0x206>
 80136d6:	2101      	movs	r1, #1
 80136d8:	9104      	str	r1, [sp, #16]
 80136da:	e7c2      	b.n	8013662 <_strtod_l+0x16a>
 80136dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136de:	1c5a      	adds	r2, r3, #1
 80136e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80136e2:	785b      	ldrb	r3, [r3, #1]
 80136e4:	3001      	adds	r0, #1
 80136e6:	2b30      	cmp	r3, #48	; 0x30
 80136e8:	d0f8      	beq.n	80136dc <_strtod_l+0x1e4>
 80136ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80136ee:	2a08      	cmp	r2, #8
 80136f0:	f200 84e4 	bhi.w	80140bc <_strtod_l+0xbc4>
 80136f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80136f6:	9208      	str	r2, [sp, #32]
 80136f8:	4602      	mov	r2, r0
 80136fa:	2000      	movs	r0, #0
 80136fc:	4604      	mov	r4, r0
 80136fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013702:	f100 0101 	add.w	r1, r0, #1
 8013706:	d012      	beq.n	801372e <_strtod_l+0x236>
 8013708:	440a      	add	r2, r1
 801370a:	eb00 0c04 	add.w	ip, r0, r4
 801370e:	4621      	mov	r1, r4
 8013710:	270a      	movs	r7, #10
 8013712:	458c      	cmp	ip, r1
 8013714:	d113      	bne.n	801373e <_strtod_l+0x246>
 8013716:	1821      	adds	r1, r4, r0
 8013718:	2908      	cmp	r1, #8
 801371a:	f104 0401 	add.w	r4, r4, #1
 801371e:	4404      	add	r4, r0
 8013720:	dc19      	bgt.n	8013756 <_strtod_l+0x25e>
 8013722:	9b07      	ldr	r3, [sp, #28]
 8013724:	210a      	movs	r1, #10
 8013726:	fb01 e303 	mla	r3, r1, r3, lr
 801372a:	9307      	str	r3, [sp, #28]
 801372c:	2100      	movs	r1, #0
 801372e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013730:	1c58      	adds	r0, r3, #1
 8013732:	901b      	str	r0, [sp, #108]	; 0x6c
 8013734:	785b      	ldrb	r3, [r3, #1]
 8013736:	4608      	mov	r0, r1
 8013738:	e7c9      	b.n	80136ce <_strtod_l+0x1d6>
 801373a:	9805      	ldr	r0, [sp, #20]
 801373c:	e7d3      	b.n	80136e6 <_strtod_l+0x1ee>
 801373e:	2908      	cmp	r1, #8
 8013740:	f101 0101 	add.w	r1, r1, #1
 8013744:	dc03      	bgt.n	801374e <_strtod_l+0x256>
 8013746:	9b07      	ldr	r3, [sp, #28]
 8013748:	437b      	muls	r3, r7
 801374a:	9307      	str	r3, [sp, #28]
 801374c:	e7e1      	b.n	8013712 <_strtod_l+0x21a>
 801374e:	2910      	cmp	r1, #16
 8013750:	bfd8      	it	le
 8013752:	437d      	mulle	r5, r7
 8013754:	e7dd      	b.n	8013712 <_strtod_l+0x21a>
 8013756:	2c10      	cmp	r4, #16
 8013758:	bfdc      	itt	le
 801375a:	210a      	movle	r1, #10
 801375c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013760:	e7e4      	b.n	801372c <_strtod_l+0x234>
 8013762:	2301      	movs	r3, #1
 8013764:	9304      	str	r3, [sp, #16]
 8013766:	e781      	b.n	801366c <_strtod_l+0x174>
 8013768:	f04f 0c01 	mov.w	ip, #1
 801376c:	1cb3      	adds	r3, r6, #2
 801376e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013770:	78b3      	ldrb	r3, [r6, #2]
 8013772:	e78a      	b.n	801368a <_strtod_l+0x192>
 8013774:	f04f 0c00 	mov.w	ip, #0
 8013778:	e7f8      	b.n	801376c <_strtod_l+0x274>
 801377a:	bf00      	nop
 801377c:	08017824 	.word	0x08017824
 8013780:	7ff00000 	.word	0x7ff00000
 8013784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013786:	1c5f      	adds	r7, r3, #1
 8013788:	971b      	str	r7, [sp, #108]	; 0x6c
 801378a:	785b      	ldrb	r3, [r3, #1]
 801378c:	2b30      	cmp	r3, #48	; 0x30
 801378e:	d0f9      	beq.n	8013784 <_strtod_l+0x28c>
 8013790:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013794:	2f08      	cmp	r7, #8
 8013796:	f63f af7d 	bhi.w	8013694 <_strtod_l+0x19c>
 801379a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801379e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137a0:	930a      	str	r3, [sp, #40]	; 0x28
 80137a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137a4:	1c5f      	adds	r7, r3, #1
 80137a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80137a8:	785b      	ldrb	r3, [r3, #1]
 80137aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80137ae:	f1b8 0f09 	cmp.w	r8, #9
 80137b2:	d937      	bls.n	8013824 <_strtod_l+0x32c>
 80137b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137b6:	1a7f      	subs	r7, r7, r1
 80137b8:	2f08      	cmp	r7, #8
 80137ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80137be:	dc37      	bgt.n	8013830 <_strtod_l+0x338>
 80137c0:	45be      	cmp	lr, r7
 80137c2:	bfa8      	it	ge
 80137c4:	46be      	movge	lr, r7
 80137c6:	f1bc 0f00 	cmp.w	ip, #0
 80137ca:	d001      	beq.n	80137d0 <_strtod_l+0x2d8>
 80137cc:	f1ce 0e00 	rsb	lr, lr, #0
 80137d0:	2c00      	cmp	r4, #0
 80137d2:	d151      	bne.n	8013878 <_strtod_l+0x380>
 80137d4:	2800      	cmp	r0, #0
 80137d6:	f47f aece 	bne.w	8013576 <_strtod_l+0x7e>
 80137da:	9a06      	ldr	r2, [sp, #24]
 80137dc:	2a00      	cmp	r2, #0
 80137de:	f47f aeca 	bne.w	8013576 <_strtod_l+0x7e>
 80137e2:	9a04      	ldr	r2, [sp, #16]
 80137e4:	2a00      	cmp	r2, #0
 80137e6:	f47f aee4 	bne.w	80135b2 <_strtod_l+0xba>
 80137ea:	2b4e      	cmp	r3, #78	; 0x4e
 80137ec:	d027      	beq.n	801383e <_strtod_l+0x346>
 80137ee:	dc21      	bgt.n	8013834 <_strtod_l+0x33c>
 80137f0:	2b49      	cmp	r3, #73	; 0x49
 80137f2:	f47f aede 	bne.w	80135b2 <_strtod_l+0xba>
 80137f6:	49a0      	ldr	r1, [pc, #640]	; (8013a78 <_strtod_l+0x580>)
 80137f8:	a81b      	add	r0, sp, #108	; 0x6c
 80137fa:	f002 f851 	bl	80158a0 <__match>
 80137fe:	2800      	cmp	r0, #0
 8013800:	f43f aed7 	beq.w	80135b2 <_strtod_l+0xba>
 8013804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013806:	499d      	ldr	r1, [pc, #628]	; (8013a7c <_strtod_l+0x584>)
 8013808:	3b01      	subs	r3, #1
 801380a:	a81b      	add	r0, sp, #108	; 0x6c
 801380c:	931b      	str	r3, [sp, #108]	; 0x6c
 801380e:	f002 f847 	bl	80158a0 <__match>
 8013812:	b910      	cbnz	r0, 801381a <_strtod_l+0x322>
 8013814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013816:	3301      	adds	r3, #1
 8013818:	931b      	str	r3, [sp, #108]	; 0x6c
 801381a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013a90 <_strtod_l+0x598>
 801381e:	f04f 0a00 	mov.w	sl, #0
 8013822:	e6a8      	b.n	8013576 <_strtod_l+0x7e>
 8013824:	210a      	movs	r1, #10
 8013826:	fb01 3e0e 	mla	lr, r1, lr, r3
 801382a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801382e:	e7b8      	b.n	80137a2 <_strtod_l+0x2aa>
 8013830:	46be      	mov	lr, r7
 8013832:	e7c8      	b.n	80137c6 <_strtod_l+0x2ce>
 8013834:	2b69      	cmp	r3, #105	; 0x69
 8013836:	d0de      	beq.n	80137f6 <_strtod_l+0x2fe>
 8013838:	2b6e      	cmp	r3, #110	; 0x6e
 801383a:	f47f aeba 	bne.w	80135b2 <_strtod_l+0xba>
 801383e:	4990      	ldr	r1, [pc, #576]	; (8013a80 <_strtod_l+0x588>)
 8013840:	a81b      	add	r0, sp, #108	; 0x6c
 8013842:	f002 f82d 	bl	80158a0 <__match>
 8013846:	2800      	cmp	r0, #0
 8013848:	f43f aeb3 	beq.w	80135b2 <_strtod_l+0xba>
 801384c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b28      	cmp	r3, #40	; 0x28
 8013852:	d10e      	bne.n	8013872 <_strtod_l+0x37a>
 8013854:	aa1e      	add	r2, sp, #120	; 0x78
 8013856:	498b      	ldr	r1, [pc, #556]	; (8013a84 <_strtod_l+0x58c>)
 8013858:	a81b      	add	r0, sp, #108	; 0x6c
 801385a:	f002 f835 	bl	80158c8 <__hexnan>
 801385e:	2805      	cmp	r0, #5
 8013860:	d107      	bne.n	8013872 <_strtod_l+0x37a>
 8013862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013864:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013868:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801386c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013870:	e681      	b.n	8013576 <_strtod_l+0x7e>
 8013872:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013a98 <_strtod_l+0x5a0>
 8013876:	e7d2      	b.n	801381e <_strtod_l+0x326>
 8013878:	ebae 0302 	sub.w	r3, lr, r2
 801387c:	9306      	str	r3, [sp, #24]
 801387e:	9b05      	ldr	r3, [sp, #20]
 8013880:	9807      	ldr	r0, [sp, #28]
 8013882:	2b00      	cmp	r3, #0
 8013884:	bf08      	it	eq
 8013886:	4623      	moveq	r3, r4
 8013888:	2c10      	cmp	r4, #16
 801388a:	9305      	str	r3, [sp, #20]
 801388c:	46a0      	mov	r8, r4
 801388e:	bfa8      	it	ge
 8013890:	f04f 0810 	movge.w	r8, #16
 8013894:	f7ec fe4e 	bl	8000534 <__aeabi_ui2d>
 8013898:	2c09      	cmp	r4, #9
 801389a:	4682      	mov	sl, r0
 801389c:	468b      	mov	fp, r1
 801389e:	dc13      	bgt.n	80138c8 <_strtod_l+0x3d0>
 80138a0:	9b06      	ldr	r3, [sp, #24]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	f43f ae67 	beq.w	8013576 <_strtod_l+0x7e>
 80138a8:	9b06      	ldr	r3, [sp, #24]
 80138aa:	dd7a      	ble.n	80139a2 <_strtod_l+0x4aa>
 80138ac:	2b16      	cmp	r3, #22
 80138ae:	dc61      	bgt.n	8013974 <_strtod_l+0x47c>
 80138b0:	4a75      	ldr	r2, [pc, #468]	; (8013a88 <_strtod_l+0x590>)
 80138b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80138b6:	e9de 0100 	ldrd	r0, r1, [lr]
 80138ba:	4652      	mov	r2, sl
 80138bc:	465b      	mov	r3, fp
 80138be:	f7ec feb3 	bl	8000628 <__aeabi_dmul>
 80138c2:	4682      	mov	sl, r0
 80138c4:	468b      	mov	fp, r1
 80138c6:	e656      	b.n	8013576 <_strtod_l+0x7e>
 80138c8:	4b6f      	ldr	r3, [pc, #444]	; (8013a88 <_strtod_l+0x590>)
 80138ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80138ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80138d2:	f7ec fea9 	bl	8000628 <__aeabi_dmul>
 80138d6:	4606      	mov	r6, r0
 80138d8:	4628      	mov	r0, r5
 80138da:	460f      	mov	r7, r1
 80138dc:	f7ec fe2a 	bl	8000534 <__aeabi_ui2d>
 80138e0:	4602      	mov	r2, r0
 80138e2:	460b      	mov	r3, r1
 80138e4:	4630      	mov	r0, r6
 80138e6:	4639      	mov	r1, r7
 80138e8:	f7ec fce8 	bl	80002bc <__adddf3>
 80138ec:	2c0f      	cmp	r4, #15
 80138ee:	4682      	mov	sl, r0
 80138f0:	468b      	mov	fp, r1
 80138f2:	ddd5      	ble.n	80138a0 <_strtod_l+0x3a8>
 80138f4:	9b06      	ldr	r3, [sp, #24]
 80138f6:	eba4 0808 	sub.w	r8, r4, r8
 80138fa:	4498      	add	r8, r3
 80138fc:	f1b8 0f00 	cmp.w	r8, #0
 8013900:	f340 8096 	ble.w	8013a30 <_strtod_l+0x538>
 8013904:	f018 030f 	ands.w	r3, r8, #15
 8013908:	d00a      	beq.n	8013920 <_strtod_l+0x428>
 801390a:	495f      	ldr	r1, [pc, #380]	; (8013a88 <_strtod_l+0x590>)
 801390c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013910:	4652      	mov	r2, sl
 8013912:	465b      	mov	r3, fp
 8013914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013918:	f7ec fe86 	bl	8000628 <__aeabi_dmul>
 801391c:	4682      	mov	sl, r0
 801391e:	468b      	mov	fp, r1
 8013920:	f038 080f 	bics.w	r8, r8, #15
 8013924:	d073      	beq.n	8013a0e <_strtod_l+0x516>
 8013926:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801392a:	dd47      	ble.n	80139bc <_strtod_l+0x4c4>
 801392c:	2400      	movs	r4, #0
 801392e:	46a0      	mov	r8, r4
 8013930:	9407      	str	r4, [sp, #28]
 8013932:	9405      	str	r4, [sp, #20]
 8013934:	2322      	movs	r3, #34	; 0x22
 8013936:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013a90 <_strtod_l+0x598>
 801393a:	f8c9 3000 	str.w	r3, [r9]
 801393e:	f04f 0a00 	mov.w	sl, #0
 8013942:	9b07      	ldr	r3, [sp, #28]
 8013944:	2b00      	cmp	r3, #0
 8013946:	f43f ae16 	beq.w	8013576 <_strtod_l+0x7e>
 801394a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801394c:	4648      	mov	r0, r9
 801394e:	f002 f93c 	bl	8015bca <_Bfree>
 8013952:	9905      	ldr	r1, [sp, #20]
 8013954:	4648      	mov	r0, r9
 8013956:	f002 f938 	bl	8015bca <_Bfree>
 801395a:	4641      	mov	r1, r8
 801395c:	4648      	mov	r0, r9
 801395e:	f002 f934 	bl	8015bca <_Bfree>
 8013962:	9907      	ldr	r1, [sp, #28]
 8013964:	4648      	mov	r0, r9
 8013966:	f002 f930 	bl	8015bca <_Bfree>
 801396a:	4621      	mov	r1, r4
 801396c:	4648      	mov	r0, r9
 801396e:	f002 f92c 	bl	8015bca <_Bfree>
 8013972:	e600      	b.n	8013576 <_strtod_l+0x7e>
 8013974:	9a06      	ldr	r2, [sp, #24]
 8013976:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801397a:	4293      	cmp	r3, r2
 801397c:	dbba      	blt.n	80138f4 <_strtod_l+0x3fc>
 801397e:	4d42      	ldr	r5, [pc, #264]	; (8013a88 <_strtod_l+0x590>)
 8013980:	f1c4 040f 	rsb	r4, r4, #15
 8013984:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013988:	4652      	mov	r2, sl
 801398a:	465b      	mov	r3, fp
 801398c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013990:	f7ec fe4a 	bl	8000628 <__aeabi_dmul>
 8013994:	9b06      	ldr	r3, [sp, #24]
 8013996:	1b1c      	subs	r4, r3, r4
 8013998:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801399c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80139a0:	e78d      	b.n	80138be <_strtod_l+0x3c6>
 80139a2:	f113 0f16 	cmn.w	r3, #22
 80139a6:	dba5      	blt.n	80138f4 <_strtod_l+0x3fc>
 80139a8:	4a37      	ldr	r2, [pc, #220]	; (8013a88 <_strtod_l+0x590>)
 80139aa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80139ae:	e9d2 2300 	ldrd	r2, r3, [r2]
 80139b2:	4650      	mov	r0, sl
 80139b4:	4659      	mov	r1, fp
 80139b6:	f7ec ff61 	bl	800087c <__aeabi_ddiv>
 80139ba:	e782      	b.n	80138c2 <_strtod_l+0x3ca>
 80139bc:	2300      	movs	r3, #0
 80139be:	4e33      	ldr	r6, [pc, #204]	; (8013a8c <_strtod_l+0x594>)
 80139c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80139c4:	4650      	mov	r0, sl
 80139c6:	4659      	mov	r1, fp
 80139c8:	461d      	mov	r5, r3
 80139ca:	f1b8 0f01 	cmp.w	r8, #1
 80139ce:	dc21      	bgt.n	8013a14 <_strtod_l+0x51c>
 80139d0:	b10b      	cbz	r3, 80139d6 <_strtod_l+0x4de>
 80139d2:	4682      	mov	sl, r0
 80139d4:	468b      	mov	fp, r1
 80139d6:	4b2d      	ldr	r3, [pc, #180]	; (8013a8c <_strtod_l+0x594>)
 80139d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80139dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80139e0:	4652      	mov	r2, sl
 80139e2:	465b      	mov	r3, fp
 80139e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80139e8:	f7ec fe1e 	bl	8000628 <__aeabi_dmul>
 80139ec:	4b28      	ldr	r3, [pc, #160]	; (8013a90 <_strtod_l+0x598>)
 80139ee:	460a      	mov	r2, r1
 80139f0:	400b      	ands	r3, r1
 80139f2:	4928      	ldr	r1, [pc, #160]	; (8013a94 <_strtod_l+0x59c>)
 80139f4:	428b      	cmp	r3, r1
 80139f6:	4682      	mov	sl, r0
 80139f8:	d898      	bhi.n	801392c <_strtod_l+0x434>
 80139fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80139fe:	428b      	cmp	r3, r1
 8013a00:	bf86      	itte	hi
 8013a02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013a9c <_strtod_l+0x5a4>
 8013a06:	f04f 3aff 	movhi.w	sl, #4294967295
 8013a0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9304      	str	r3, [sp, #16]
 8013a12:	e077      	b.n	8013b04 <_strtod_l+0x60c>
 8013a14:	f018 0f01 	tst.w	r8, #1
 8013a18:	d006      	beq.n	8013a28 <_strtod_l+0x530>
 8013a1a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a22:	f7ec fe01 	bl	8000628 <__aeabi_dmul>
 8013a26:	2301      	movs	r3, #1
 8013a28:	3501      	adds	r5, #1
 8013a2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013a2e:	e7cc      	b.n	80139ca <_strtod_l+0x4d2>
 8013a30:	d0ed      	beq.n	8013a0e <_strtod_l+0x516>
 8013a32:	f1c8 0800 	rsb	r8, r8, #0
 8013a36:	f018 020f 	ands.w	r2, r8, #15
 8013a3a:	d00a      	beq.n	8013a52 <_strtod_l+0x55a>
 8013a3c:	4b12      	ldr	r3, [pc, #72]	; (8013a88 <_strtod_l+0x590>)
 8013a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a42:	4650      	mov	r0, sl
 8013a44:	4659      	mov	r1, fp
 8013a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a4a:	f7ec ff17 	bl	800087c <__aeabi_ddiv>
 8013a4e:	4682      	mov	sl, r0
 8013a50:	468b      	mov	fp, r1
 8013a52:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013a56:	d0da      	beq.n	8013a0e <_strtod_l+0x516>
 8013a58:	f1b8 0f1f 	cmp.w	r8, #31
 8013a5c:	dd20      	ble.n	8013aa0 <_strtod_l+0x5a8>
 8013a5e:	2400      	movs	r4, #0
 8013a60:	46a0      	mov	r8, r4
 8013a62:	9407      	str	r4, [sp, #28]
 8013a64:	9405      	str	r4, [sp, #20]
 8013a66:	2322      	movs	r3, #34	; 0x22
 8013a68:	f04f 0a00 	mov.w	sl, #0
 8013a6c:	f04f 0b00 	mov.w	fp, #0
 8013a70:	f8c9 3000 	str.w	r3, [r9]
 8013a74:	e765      	b.n	8013942 <_strtod_l+0x44a>
 8013a76:	bf00      	nop
 8013a78:	080177f1 	.word	0x080177f1
 8013a7c:	0801787b 	.word	0x0801787b
 8013a80:	080177f9 	.word	0x080177f9
 8013a84:	08017838 	.word	0x08017838
 8013a88:	08017920 	.word	0x08017920
 8013a8c:	080178f8 	.word	0x080178f8
 8013a90:	7ff00000 	.word	0x7ff00000
 8013a94:	7ca00000 	.word	0x7ca00000
 8013a98:	fff80000 	.word	0xfff80000
 8013a9c:	7fefffff 	.word	0x7fefffff
 8013aa0:	f018 0310 	ands.w	r3, r8, #16
 8013aa4:	bf18      	it	ne
 8013aa6:	236a      	movne	r3, #106	; 0x6a
 8013aa8:	4da0      	ldr	r5, [pc, #640]	; (8013d2c <_strtod_l+0x834>)
 8013aaa:	9304      	str	r3, [sp, #16]
 8013aac:	4650      	mov	r0, sl
 8013aae:	4659      	mov	r1, fp
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	f1b8 0f00 	cmp.w	r8, #0
 8013ab6:	f300 810a 	bgt.w	8013cce <_strtod_l+0x7d6>
 8013aba:	b10b      	cbz	r3, 8013ac0 <_strtod_l+0x5c8>
 8013abc:	4682      	mov	sl, r0
 8013abe:	468b      	mov	fp, r1
 8013ac0:	9b04      	ldr	r3, [sp, #16]
 8013ac2:	b1bb      	cbz	r3, 8013af4 <_strtod_l+0x5fc>
 8013ac4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013ac8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	4659      	mov	r1, fp
 8013ad0:	dd10      	ble.n	8013af4 <_strtod_l+0x5fc>
 8013ad2:	2b1f      	cmp	r3, #31
 8013ad4:	f340 8107 	ble.w	8013ce6 <_strtod_l+0x7ee>
 8013ad8:	2b34      	cmp	r3, #52	; 0x34
 8013ada:	bfde      	ittt	le
 8013adc:	3b20      	suble	r3, #32
 8013ade:	f04f 32ff 	movle.w	r2, #4294967295
 8013ae2:	fa02 f303 	lslle.w	r3, r2, r3
 8013ae6:	f04f 0a00 	mov.w	sl, #0
 8013aea:	bfcc      	ite	gt
 8013aec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013af0:	ea03 0b01 	andle.w	fp, r3, r1
 8013af4:	2200      	movs	r2, #0
 8013af6:	2300      	movs	r3, #0
 8013af8:	4650      	mov	r0, sl
 8013afa:	4659      	mov	r1, fp
 8013afc:	f7ec fffc 	bl	8000af8 <__aeabi_dcmpeq>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d1ac      	bne.n	8013a5e <_strtod_l+0x566>
 8013b04:	9b07      	ldr	r3, [sp, #28]
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	9a05      	ldr	r2, [sp, #20]
 8013b0a:	9908      	ldr	r1, [sp, #32]
 8013b0c:	4623      	mov	r3, r4
 8013b0e:	4648      	mov	r0, r9
 8013b10:	f002 f8ad 	bl	8015c6e <__s2b>
 8013b14:	9007      	str	r0, [sp, #28]
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f43f af08 	beq.w	801392c <_strtod_l+0x434>
 8013b1c:	9a06      	ldr	r2, [sp, #24]
 8013b1e:	9b06      	ldr	r3, [sp, #24]
 8013b20:	2a00      	cmp	r2, #0
 8013b22:	f1c3 0300 	rsb	r3, r3, #0
 8013b26:	bfa8      	it	ge
 8013b28:	2300      	movge	r3, #0
 8013b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8013b2c:	2400      	movs	r4, #0
 8013b2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013b32:	9316      	str	r3, [sp, #88]	; 0x58
 8013b34:	46a0      	mov	r8, r4
 8013b36:	9b07      	ldr	r3, [sp, #28]
 8013b38:	4648      	mov	r0, r9
 8013b3a:	6859      	ldr	r1, [r3, #4]
 8013b3c:	f002 f811 	bl	8015b62 <_Balloc>
 8013b40:	9005      	str	r0, [sp, #20]
 8013b42:	2800      	cmp	r0, #0
 8013b44:	f43f aef6 	beq.w	8013934 <_strtod_l+0x43c>
 8013b48:	9b07      	ldr	r3, [sp, #28]
 8013b4a:	691a      	ldr	r2, [r3, #16]
 8013b4c:	3202      	adds	r2, #2
 8013b4e:	f103 010c 	add.w	r1, r3, #12
 8013b52:	0092      	lsls	r2, r2, #2
 8013b54:	300c      	adds	r0, #12
 8013b56:	f001 fff9 	bl	8015b4c <memcpy>
 8013b5a:	aa1e      	add	r2, sp, #120	; 0x78
 8013b5c:	a91d      	add	r1, sp, #116	; 0x74
 8013b5e:	ec4b ab10 	vmov	d0, sl, fp
 8013b62:	4648      	mov	r0, r9
 8013b64:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013b68:	f002 fb3c 	bl	80161e4 <__d2b>
 8013b6c:	901c      	str	r0, [sp, #112]	; 0x70
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	f43f aee0 	beq.w	8013934 <_strtod_l+0x43c>
 8013b74:	2101      	movs	r1, #1
 8013b76:	4648      	mov	r0, r9
 8013b78:	f002 f905 	bl	8015d86 <__i2b>
 8013b7c:	4680      	mov	r8, r0
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	f43f aed8 	beq.w	8013934 <_strtod_l+0x43c>
 8013b84:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013b86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013b88:	2e00      	cmp	r6, #0
 8013b8a:	bfab      	itete	ge
 8013b8c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013b8e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013b90:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013b92:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013b94:	bfac      	ite	ge
 8013b96:	18f7      	addge	r7, r6, r3
 8013b98:	1b9d      	sublt	r5, r3, r6
 8013b9a:	9b04      	ldr	r3, [sp, #16]
 8013b9c:	1af6      	subs	r6, r6, r3
 8013b9e:	4416      	add	r6, r2
 8013ba0:	4b63      	ldr	r3, [pc, #396]	; (8013d30 <_strtod_l+0x838>)
 8013ba2:	3e01      	subs	r6, #1
 8013ba4:	429e      	cmp	r6, r3
 8013ba6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013baa:	f280 80af 	bge.w	8013d0c <_strtod_l+0x814>
 8013bae:	1b9b      	subs	r3, r3, r6
 8013bb0:	2b1f      	cmp	r3, #31
 8013bb2:	eba2 0203 	sub.w	r2, r2, r3
 8013bb6:	f04f 0101 	mov.w	r1, #1
 8013bba:	f300 809b 	bgt.w	8013cf4 <_strtod_l+0x7fc>
 8013bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8013bc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8013bc8:	18be      	adds	r6, r7, r2
 8013bca:	9b04      	ldr	r3, [sp, #16]
 8013bcc:	42b7      	cmp	r7, r6
 8013bce:	4415      	add	r5, r2
 8013bd0:	441d      	add	r5, r3
 8013bd2:	463b      	mov	r3, r7
 8013bd4:	bfa8      	it	ge
 8013bd6:	4633      	movge	r3, r6
 8013bd8:	42ab      	cmp	r3, r5
 8013bda:	bfa8      	it	ge
 8013bdc:	462b      	movge	r3, r5
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	bfc2      	ittt	gt
 8013be2:	1af6      	subgt	r6, r6, r3
 8013be4:	1aed      	subgt	r5, r5, r3
 8013be6:	1aff      	subgt	r7, r7, r3
 8013be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bea:	b1bb      	cbz	r3, 8013c1c <_strtod_l+0x724>
 8013bec:	4641      	mov	r1, r8
 8013bee:	461a      	mov	r2, r3
 8013bf0:	4648      	mov	r0, r9
 8013bf2:	f002 f967 	bl	8015ec4 <__pow5mult>
 8013bf6:	4680      	mov	r8, r0
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	f43f ae9b 	beq.w	8013934 <_strtod_l+0x43c>
 8013bfe:	4601      	mov	r1, r0
 8013c00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c02:	4648      	mov	r0, r9
 8013c04:	f002 f8c8 	bl	8015d98 <__multiply>
 8013c08:	900c      	str	r0, [sp, #48]	; 0x30
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	f43f ae92 	beq.w	8013934 <_strtod_l+0x43c>
 8013c10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c12:	4648      	mov	r0, r9
 8013c14:	f001 ffd9 	bl	8015bca <_Bfree>
 8013c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c1a:	931c      	str	r3, [sp, #112]	; 0x70
 8013c1c:	2e00      	cmp	r6, #0
 8013c1e:	dc7a      	bgt.n	8013d16 <_strtod_l+0x81e>
 8013c20:	9b06      	ldr	r3, [sp, #24]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	dd08      	ble.n	8013c38 <_strtod_l+0x740>
 8013c26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013c28:	9905      	ldr	r1, [sp, #20]
 8013c2a:	4648      	mov	r0, r9
 8013c2c:	f002 f94a 	bl	8015ec4 <__pow5mult>
 8013c30:	9005      	str	r0, [sp, #20]
 8013c32:	2800      	cmp	r0, #0
 8013c34:	f43f ae7e 	beq.w	8013934 <_strtod_l+0x43c>
 8013c38:	2d00      	cmp	r5, #0
 8013c3a:	dd08      	ble.n	8013c4e <_strtod_l+0x756>
 8013c3c:	462a      	mov	r2, r5
 8013c3e:	9905      	ldr	r1, [sp, #20]
 8013c40:	4648      	mov	r0, r9
 8013c42:	f002 f98d 	bl	8015f60 <__lshift>
 8013c46:	9005      	str	r0, [sp, #20]
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	f43f ae73 	beq.w	8013934 <_strtod_l+0x43c>
 8013c4e:	2f00      	cmp	r7, #0
 8013c50:	dd08      	ble.n	8013c64 <_strtod_l+0x76c>
 8013c52:	4641      	mov	r1, r8
 8013c54:	463a      	mov	r2, r7
 8013c56:	4648      	mov	r0, r9
 8013c58:	f002 f982 	bl	8015f60 <__lshift>
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	f43f ae68 	beq.w	8013934 <_strtod_l+0x43c>
 8013c64:	9a05      	ldr	r2, [sp, #20]
 8013c66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c68:	4648      	mov	r0, r9
 8013c6a:	f002 f9e7 	bl	801603c <__mdiff>
 8013c6e:	4604      	mov	r4, r0
 8013c70:	2800      	cmp	r0, #0
 8013c72:	f43f ae5f 	beq.w	8013934 <_strtod_l+0x43c>
 8013c76:	68c3      	ldr	r3, [r0, #12]
 8013c78:	930c      	str	r3, [sp, #48]	; 0x30
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	60c3      	str	r3, [r0, #12]
 8013c7e:	4641      	mov	r1, r8
 8013c80:	f002 f9c2 	bl	8016008 <__mcmp>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	da55      	bge.n	8013d34 <_strtod_l+0x83c>
 8013c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c8a:	b9e3      	cbnz	r3, 8013cc6 <_strtod_l+0x7ce>
 8013c8c:	f1ba 0f00 	cmp.w	sl, #0
 8013c90:	d119      	bne.n	8013cc6 <_strtod_l+0x7ce>
 8013c92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c96:	b9b3      	cbnz	r3, 8013cc6 <_strtod_l+0x7ce>
 8013c98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c9c:	0d1b      	lsrs	r3, r3, #20
 8013c9e:	051b      	lsls	r3, r3, #20
 8013ca0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013ca4:	d90f      	bls.n	8013cc6 <_strtod_l+0x7ce>
 8013ca6:	6963      	ldr	r3, [r4, #20]
 8013ca8:	b913      	cbnz	r3, 8013cb0 <_strtod_l+0x7b8>
 8013caa:	6923      	ldr	r3, [r4, #16]
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	dd0a      	ble.n	8013cc6 <_strtod_l+0x7ce>
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	4648      	mov	r0, r9
 8013cb6:	f002 f953 	bl	8015f60 <__lshift>
 8013cba:	4641      	mov	r1, r8
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	f002 f9a3 	bl	8016008 <__mcmp>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	dc67      	bgt.n	8013d96 <_strtod_l+0x89e>
 8013cc6:	9b04      	ldr	r3, [sp, #16]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d171      	bne.n	8013db0 <_strtod_l+0x8b8>
 8013ccc:	e63d      	b.n	801394a <_strtod_l+0x452>
 8013cce:	f018 0f01 	tst.w	r8, #1
 8013cd2:	d004      	beq.n	8013cde <_strtod_l+0x7e6>
 8013cd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013cd8:	f7ec fca6 	bl	8000628 <__aeabi_dmul>
 8013cdc:	2301      	movs	r3, #1
 8013cde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013ce2:	3508      	adds	r5, #8
 8013ce4:	e6e5      	b.n	8013ab2 <_strtod_l+0x5ba>
 8013ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8013cea:	fa02 f303 	lsl.w	r3, r2, r3
 8013cee:	ea03 0a0a 	and.w	sl, r3, sl
 8013cf2:	e6ff      	b.n	8013af4 <_strtod_l+0x5fc>
 8013cf4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013cf8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013cfc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013d00:	36e2      	adds	r6, #226	; 0xe2
 8013d02:	fa01 f306 	lsl.w	r3, r1, r6
 8013d06:	930a      	str	r3, [sp, #40]	; 0x28
 8013d08:	910f      	str	r1, [sp, #60]	; 0x3c
 8013d0a:	e75d      	b.n	8013bc8 <_strtod_l+0x6d0>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8013d10:	2301      	movs	r3, #1
 8013d12:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d14:	e758      	b.n	8013bc8 <_strtod_l+0x6d0>
 8013d16:	4632      	mov	r2, r6
 8013d18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d1a:	4648      	mov	r0, r9
 8013d1c:	f002 f920 	bl	8015f60 <__lshift>
 8013d20:	901c      	str	r0, [sp, #112]	; 0x70
 8013d22:	2800      	cmp	r0, #0
 8013d24:	f47f af7c 	bne.w	8013c20 <_strtod_l+0x728>
 8013d28:	e604      	b.n	8013934 <_strtod_l+0x43c>
 8013d2a:	bf00      	nop
 8013d2c:	08017850 	.word	0x08017850
 8013d30:	fffffc02 	.word	0xfffffc02
 8013d34:	465d      	mov	r5, fp
 8013d36:	f040 8086 	bne.w	8013e46 <_strtod_l+0x94e>
 8013d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d40:	b32a      	cbz	r2, 8013d8e <_strtod_l+0x896>
 8013d42:	4aaf      	ldr	r2, [pc, #700]	; (8014000 <_strtod_l+0xb08>)
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d153      	bne.n	8013df0 <_strtod_l+0x8f8>
 8013d48:	9b04      	ldr	r3, [sp, #16]
 8013d4a:	4650      	mov	r0, sl
 8013d4c:	b1d3      	cbz	r3, 8013d84 <_strtod_l+0x88c>
 8013d4e:	4aad      	ldr	r2, [pc, #692]	; (8014004 <_strtod_l+0xb0c>)
 8013d50:	402a      	ands	r2, r5
 8013d52:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013d56:	f04f 31ff 	mov.w	r1, #4294967295
 8013d5a:	d816      	bhi.n	8013d8a <_strtod_l+0x892>
 8013d5c:	0d12      	lsrs	r2, r2, #20
 8013d5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013d62:	fa01 f303 	lsl.w	r3, r1, r3
 8013d66:	4298      	cmp	r0, r3
 8013d68:	d142      	bne.n	8013df0 <_strtod_l+0x8f8>
 8013d6a:	4ba7      	ldr	r3, [pc, #668]	; (8014008 <_strtod_l+0xb10>)
 8013d6c:	429d      	cmp	r5, r3
 8013d6e:	d102      	bne.n	8013d76 <_strtod_l+0x87e>
 8013d70:	3001      	adds	r0, #1
 8013d72:	f43f addf 	beq.w	8013934 <_strtod_l+0x43c>
 8013d76:	4ba3      	ldr	r3, [pc, #652]	; (8014004 <_strtod_l+0xb0c>)
 8013d78:	402b      	ands	r3, r5
 8013d7a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013d7e:	f04f 0a00 	mov.w	sl, #0
 8013d82:	e7a0      	b.n	8013cc6 <_strtod_l+0x7ce>
 8013d84:	f04f 33ff 	mov.w	r3, #4294967295
 8013d88:	e7ed      	b.n	8013d66 <_strtod_l+0x86e>
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	e7eb      	b.n	8013d66 <_strtod_l+0x86e>
 8013d8e:	bb7b      	cbnz	r3, 8013df0 <_strtod_l+0x8f8>
 8013d90:	f1ba 0f00 	cmp.w	sl, #0
 8013d94:	d12c      	bne.n	8013df0 <_strtod_l+0x8f8>
 8013d96:	9904      	ldr	r1, [sp, #16]
 8013d98:	4a9a      	ldr	r2, [pc, #616]	; (8014004 <_strtod_l+0xb0c>)
 8013d9a:	465b      	mov	r3, fp
 8013d9c:	b1f1      	cbz	r1, 8013ddc <_strtod_l+0x8e4>
 8013d9e:	ea02 010b 	and.w	r1, r2, fp
 8013da2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013da6:	dc19      	bgt.n	8013ddc <_strtod_l+0x8e4>
 8013da8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013dac:	f77f ae5b 	ble.w	8013a66 <_strtod_l+0x56e>
 8013db0:	4a96      	ldr	r2, [pc, #600]	; (801400c <_strtod_l+0xb14>)
 8013db2:	2300      	movs	r3, #0
 8013db4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013db8:	4650      	mov	r0, sl
 8013dba:	4659      	mov	r1, fp
 8013dbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013dc0:	f7ec fc32 	bl	8000628 <__aeabi_dmul>
 8013dc4:	4682      	mov	sl, r0
 8013dc6:	468b      	mov	fp, r1
 8013dc8:	2900      	cmp	r1, #0
 8013dca:	f47f adbe 	bne.w	801394a <_strtod_l+0x452>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	f47f adbb 	bne.w	801394a <_strtod_l+0x452>
 8013dd4:	2322      	movs	r3, #34	; 0x22
 8013dd6:	f8c9 3000 	str.w	r3, [r9]
 8013dda:	e5b6      	b.n	801394a <_strtod_l+0x452>
 8013ddc:	4013      	ands	r3, r2
 8013dde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013de2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013de6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013dea:	f04f 3aff 	mov.w	sl, #4294967295
 8013dee:	e76a      	b.n	8013cc6 <_strtod_l+0x7ce>
 8013df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013df2:	b193      	cbz	r3, 8013e1a <_strtod_l+0x922>
 8013df4:	422b      	tst	r3, r5
 8013df6:	f43f af66 	beq.w	8013cc6 <_strtod_l+0x7ce>
 8013dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dfc:	9a04      	ldr	r2, [sp, #16]
 8013dfe:	4650      	mov	r0, sl
 8013e00:	4659      	mov	r1, fp
 8013e02:	b173      	cbz	r3, 8013e22 <_strtod_l+0x92a>
 8013e04:	f7ff fb5b 	bl	80134be <sulp>
 8013e08:	4602      	mov	r2, r0
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e10:	f7ec fa54 	bl	80002bc <__adddf3>
 8013e14:	4682      	mov	sl, r0
 8013e16:	468b      	mov	fp, r1
 8013e18:	e755      	b.n	8013cc6 <_strtod_l+0x7ce>
 8013e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e1c:	ea13 0f0a 	tst.w	r3, sl
 8013e20:	e7e9      	b.n	8013df6 <_strtod_l+0x8fe>
 8013e22:	f7ff fb4c 	bl	80134be <sulp>
 8013e26:	4602      	mov	r2, r0
 8013e28:	460b      	mov	r3, r1
 8013e2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e2e:	f7ec fa43 	bl	80002b8 <__aeabi_dsub>
 8013e32:	2200      	movs	r2, #0
 8013e34:	2300      	movs	r3, #0
 8013e36:	4682      	mov	sl, r0
 8013e38:	468b      	mov	fp, r1
 8013e3a:	f7ec fe5d 	bl	8000af8 <__aeabi_dcmpeq>
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	f47f ae11 	bne.w	8013a66 <_strtod_l+0x56e>
 8013e44:	e73f      	b.n	8013cc6 <_strtod_l+0x7ce>
 8013e46:	4641      	mov	r1, r8
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f002 fa1a 	bl	8016282 <__ratio>
 8013e4e:	ec57 6b10 	vmov	r6, r7, d0
 8013e52:	2200      	movs	r2, #0
 8013e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e58:	ee10 0a10 	vmov	r0, s0
 8013e5c:	4639      	mov	r1, r7
 8013e5e:	f7ec fe5f 	bl	8000b20 <__aeabi_dcmple>
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d077      	beq.n	8013f56 <_strtod_l+0xa5e>
 8013e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d04a      	beq.n	8013f02 <_strtod_l+0xa0a>
 8013e6c:	4b68      	ldr	r3, [pc, #416]	; (8014010 <_strtod_l+0xb18>)
 8013e6e:	2200      	movs	r2, #0
 8013e70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013e74:	4f66      	ldr	r7, [pc, #408]	; (8014010 <_strtod_l+0xb18>)
 8013e76:	2600      	movs	r6, #0
 8013e78:	4b62      	ldr	r3, [pc, #392]	; (8014004 <_strtod_l+0xb0c>)
 8013e7a:	402b      	ands	r3, r5
 8013e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e80:	4b64      	ldr	r3, [pc, #400]	; (8014014 <_strtod_l+0xb1c>)
 8013e82:	429a      	cmp	r2, r3
 8013e84:	f040 80ce 	bne.w	8014024 <_strtod_l+0xb2c>
 8013e88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013e90:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013e94:	ec4b ab10 	vmov	d0, sl, fp
 8013e98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013e9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013ea0:	f002 f92a 	bl	80160f8 <__ulp>
 8013ea4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ea8:	ec53 2b10 	vmov	r2, r3, d0
 8013eac:	f7ec fbbc 	bl	8000628 <__aeabi_dmul>
 8013eb0:	4652      	mov	r2, sl
 8013eb2:	465b      	mov	r3, fp
 8013eb4:	f7ec fa02 	bl	80002bc <__adddf3>
 8013eb8:	460b      	mov	r3, r1
 8013eba:	4952      	ldr	r1, [pc, #328]	; (8014004 <_strtod_l+0xb0c>)
 8013ebc:	4a56      	ldr	r2, [pc, #344]	; (8014018 <_strtod_l+0xb20>)
 8013ebe:	4019      	ands	r1, r3
 8013ec0:	4291      	cmp	r1, r2
 8013ec2:	4682      	mov	sl, r0
 8013ec4:	d95b      	bls.n	8013f7e <_strtod_l+0xa86>
 8013ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ec8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d103      	bne.n	8013ed8 <_strtod_l+0x9e0>
 8013ed0:	9b08      	ldr	r3, [sp, #32]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	f43f ad2e 	beq.w	8013934 <_strtod_l+0x43c>
 8013ed8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014008 <_strtod_l+0xb10>
 8013edc:	f04f 3aff 	mov.w	sl, #4294967295
 8013ee0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ee2:	4648      	mov	r0, r9
 8013ee4:	f001 fe71 	bl	8015bca <_Bfree>
 8013ee8:	9905      	ldr	r1, [sp, #20]
 8013eea:	4648      	mov	r0, r9
 8013eec:	f001 fe6d 	bl	8015bca <_Bfree>
 8013ef0:	4641      	mov	r1, r8
 8013ef2:	4648      	mov	r0, r9
 8013ef4:	f001 fe69 	bl	8015bca <_Bfree>
 8013ef8:	4621      	mov	r1, r4
 8013efa:	4648      	mov	r0, r9
 8013efc:	f001 fe65 	bl	8015bca <_Bfree>
 8013f00:	e619      	b.n	8013b36 <_strtod_l+0x63e>
 8013f02:	f1ba 0f00 	cmp.w	sl, #0
 8013f06:	d11a      	bne.n	8013f3e <_strtod_l+0xa46>
 8013f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f0c:	b9eb      	cbnz	r3, 8013f4a <_strtod_l+0xa52>
 8013f0e:	2200      	movs	r2, #0
 8013f10:	4b3f      	ldr	r3, [pc, #252]	; (8014010 <_strtod_l+0xb18>)
 8013f12:	4630      	mov	r0, r6
 8013f14:	4639      	mov	r1, r7
 8013f16:	f7ec fdf9 	bl	8000b0c <__aeabi_dcmplt>
 8013f1a:	b9c8      	cbnz	r0, 8013f50 <_strtod_l+0xa58>
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	4639      	mov	r1, r7
 8013f20:	2200      	movs	r2, #0
 8013f22:	4b3e      	ldr	r3, [pc, #248]	; (801401c <_strtod_l+0xb24>)
 8013f24:	f7ec fb80 	bl	8000628 <__aeabi_dmul>
 8013f28:	4606      	mov	r6, r0
 8013f2a:	460f      	mov	r7, r1
 8013f2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013f30:	9618      	str	r6, [sp, #96]	; 0x60
 8013f32:	9319      	str	r3, [sp, #100]	; 0x64
 8013f34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013f38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013f3c:	e79c      	b.n	8013e78 <_strtod_l+0x980>
 8013f3e:	f1ba 0f01 	cmp.w	sl, #1
 8013f42:	d102      	bne.n	8013f4a <_strtod_l+0xa52>
 8013f44:	2d00      	cmp	r5, #0
 8013f46:	f43f ad8e 	beq.w	8013a66 <_strtod_l+0x56e>
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	4b34      	ldr	r3, [pc, #208]	; (8014020 <_strtod_l+0xb28>)
 8013f4e:	e78f      	b.n	8013e70 <_strtod_l+0x978>
 8013f50:	2600      	movs	r6, #0
 8013f52:	4f32      	ldr	r7, [pc, #200]	; (801401c <_strtod_l+0xb24>)
 8013f54:	e7ea      	b.n	8013f2c <_strtod_l+0xa34>
 8013f56:	4b31      	ldr	r3, [pc, #196]	; (801401c <_strtod_l+0xb24>)
 8013f58:	4630      	mov	r0, r6
 8013f5a:	4639      	mov	r1, r7
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f7ec fb63 	bl	8000628 <__aeabi_dmul>
 8013f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f64:	4606      	mov	r6, r0
 8013f66:	460f      	mov	r7, r1
 8013f68:	b933      	cbnz	r3, 8013f78 <_strtod_l+0xa80>
 8013f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f6e:	9010      	str	r0, [sp, #64]	; 0x40
 8013f70:	9311      	str	r3, [sp, #68]	; 0x44
 8013f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f76:	e7df      	b.n	8013f38 <_strtod_l+0xa40>
 8013f78:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013f7c:	e7f9      	b.n	8013f72 <_strtod_l+0xa7a>
 8013f7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013f82:	9b04      	ldr	r3, [sp, #16]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d1ab      	bne.n	8013ee0 <_strtod_l+0x9e8>
 8013f88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f8c:	0d1b      	lsrs	r3, r3, #20
 8013f8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f90:	051b      	lsls	r3, r3, #20
 8013f92:	429a      	cmp	r2, r3
 8013f94:	465d      	mov	r5, fp
 8013f96:	d1a3      	bne.n	8013ee0 <_strtod_l+0x9e8>
 8013f98:	4639      	mov	r1, r7
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	f7ec fdf4 	bl	8000b88 <__aeabi_d2iz>
 8013fa0:	f7ec fad8 	bl	8000554 <__aeabi_i2d>
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	4639      	mov	r1, r7
 8013faa:	4630      	mov	r0, r6
 8013fac:	f7ec f984 	bl	80002b8 <__aeabi_dsub>
 8013fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	460f      	mov	r7, r1
 8013fb6:	b933      	cbnz	r3, 8013fc6 <_strtod_l+0xace>
 8013fb8:	f1ba 0f00 	cmp.w	sl, #0
 8013fbc:	d103      	bne.n	8013fc6 <_strtod_l+0xace>
 8013fbe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013fc2:	2d00      	cmp	r5, #0
 8013fc4:	d06d      	beq.n	80140a2 <_strtod_l+0xbaa>
 8013fc6:	a30a      	add	r3, pc, #40	; (adr r3, 8013ff0 <_strtod_l+0xaf8>)
 8013fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fcc:	4630      	mov	r0, r6
 8013fce:	4639      	mov	r1, r7
 8013fd0:	f7ec fd9c 	bl	8000b0c <__aeabi_dcmplt>
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	f47f acb8 	bne.w	801394a <_strtod_l+0x452>
 8013fda:	a307      	add	r3, pc, #28	; (adr r3, 8013ff8 <_strtod_l+0xb00>)
 8013fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	4639      	mov	r1, r7
 8013fe4:	f7ec fdb0 	bl	8000b48 <__aeabi_dcmpgt>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	f43f af79 	beq.w	8013ee0 <_strtod_l+0x9e8>
 8013fee:	e4ac      	b.n	801394a <_strtod_l+0x452>
 8013ff0:	94a03595 	.word	0x94a03595
 8013ff4:	3fdfffff 	.word	0x3fdfffff
 8013ff8:	35afe535 	.word	0x35afe535
 8013ffc:	3fe00000 	.word	0x3fe00000
 8014000:	000fffff 	.word	0x000fffff
 8014004:	7ff00000 	.word	0x7ff00000
 8014008:	7fefffff 	.word	0x7fefffff
 801400c:	39500000 	.word	0x39500000
 8014010:	3ff00000 	.word	0x3ff00000
 8014014:	7fe00000 	.word	0x7fe00000
 8014018:	7c9fffff 	.word	0x7c9fffff
 801401c:	3fe00000 	.word	0x3fe00000
 8014020:	bff00000 	.word	0xbff00000
 8014024:	9b04      	ldr	r3, [sp, #16]
 8014026:	b333      	cbz	r3, 8014076 <_strtod_l+0xb7e>
 8014028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801402a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801402e:	d822      	bhi.n	8014076 <_strtod_l+0xb7e>
 8014030:	a327      	add	r3, pc, #156	; (adr r3, 80140d0 <_strtod_l+0xbd8>)
 8014032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014036:	4630      	mov	r0, r6
 8014038:	4639      	mov	r1, r7
 801403a:	f7ec fd71 	bl	8000b20 <__aeabi_dcmple>
 801403e:	b1a0      	cbz	r0, 801406a <_strtod_l+0xb72>
 8014040:	4639      	mov	r1, r7
 8014042:	4630      	mov	r0, r6
 8014044:	f7ec fdc8 	bl	8000bd8 <__aeabi_d2uiz>
 8014048:	2800      	cmp	r0, #0
 801404a:	bf08      	it	eq
 801404c:	2001      	moveq	r0, #1
 801404e:	f7ec fa71 	bl	8000534 <__aeabi_ui2d>
 8014052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014054:	4606      	mov	r6, r0
 8014056:	460f      	mov	r7, r1
 8014058:	bb03      	cbnz	r3, 801409c <_strtod_l+0xba4>
 801405a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801405e:	9012      	str	r0, [sp, #72]	; 0x48
 8014060:	9313      	str	r3, [sp, #76]	; 0x4c
 8014062:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014066:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801406a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801406c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801406e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014072:	1a9b      	subs	r3, r3, r2
 8014074:	930b      	str	r3, [sp, #44]	; 0x2c
 8014076:	ed9d 0b08 	vldr	d0, [sp, #32]
 801407a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801407e:	f002 f83b 	bl	80160f8 <__ulp>
 8014082:	4650      	mov	r0, sl
 8014084:	ec53 2b10 	vmov	r2, r3, d0
 8014088:	4659      	mov	r1, fp
 801408a:	f7ec facd 	bl	8000628 <__aeabi_dmul>
 801408e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014092:	f7ec f913 	bl	80002bc <__adddf3>
 8014096:	4682      	mov	sl, r0
 8014098:	468b      	mov	fp, r1
 801409a:	e772      	b.n	8013f82 <_strtod_l+0xa8a>
 801409c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80140a0:	e7df      	b.n	8014062 <_strtod_l+0xb6a>
 80140a2:	a30d      	add	r3, pc, #52	; (adr r3, 80140d8 <_strtod_l+0xbe0>)
 80140a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a8:	f7ec fd30 	bl	8000b0c <__aeabi_dcmplt>
 80140ac:	e79c      	b.n	8013fe8 <_strtod_l+0xaf0>
 80140ae:	2300      	movs	r3, #0
 80140b0:	930d      	str	r3, [sp, #52]	; 0x34
 80140b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80140b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80140b6:	6013      	str	r3, [r2, #0]
 80140b8:	f7ff ba61 	b.w	801357e <_strtod_l+0x86>
 80140bc:	2b65      	cmp	r3, #101	; 0x65
 80140be:	f04f 0200 	mov.w	r2, #0
 80140c2:	f43f ab4e 	beq.w	8013762 <_strtod_l+0x26a>
 80140c6:	2101      	movs	r1, #1
 80140c8:	4614      	mov	r4, r2
 80140ca:	9104      	str	r1, [sp, #16]
 80140cc:	f7ff bacb 	b.w	8013666 <_strtod_l+0x16e>
 80140d0:	ffc00000 	.word	0xffc00000
 80140d4:	41dfffff 	.word	0x41dfffff
 80140d8:	94a03595 	.word	0x94a03595
 80140dc:	3fcfffff 	.word	0x3fcfffff

080140e0 <_strtod_r>:
 80140e0:	4b05      	ldr	r3, [pc, #20]	; (80140f8 <_strtod_r+0x18>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	b410      	push	{r4}
 80140e6:	6a1b      	ldr	r3, [r3, #32]
 80140e8:	4c04      	ldr	r4, [pc, #16]	; (80140fc <_strtod_r+0x1c>)
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	bf08      	it	eq
 80140ee:	4623      	moveq	r3, r4
 80140f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140f4:	f7ff ba00 	b.w	80134f8 <_strtod_l>
 80140f8:	2000000c 	.word	0x2000000c
 80140fc:	20000070 	.word	0x20000070

08014100 <_strtol_l.isra.0>:
 8014100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014104:	4680      	mov	r8, r0
 8014106:	4689      	mov	r9, r1
 8014108:	4692      	mov	sl, r2
 801410a:	461e      	mov	r6, r3
 801410c:	460f      	mov	r7, r1
 801410e:	463d      	mov	r5, r7
 8014110:	9808      	ldr	r0, [sp, #32]
 8014112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014116:	f001 fc67 	bl	80159e8 <__locale_ctype_ptr_l>
 801411a:	4420      	add	r0, r4
 801411c:	7843      	ldrb	r3, [r0, #1]
 801411e:	f013 0308 	ands.w	r3, r3, #8
 8014122:	d132      	bne.n	801418a <_strtol_l.isra.0+0x8a>
 8014124:	2c2d      	cmp	r4, #45	; 0x2d
 8014126:	d132      	bne.n	801418e <_strtol_l.isra.0+0x8e>
 8014128:	787c      	ldrb	r4, [r7, #1]
 801412a:	1cbd      	adds	r5, r7, #2
 801412c:	2201      	movs	r2, #1
 801412e:	2e00      	cmp	r6, #0
 8014130:	d05d      	beq.n	80141ee <_strtol_l.isra.0+0xee>
 8014132:	2e10      	cmp	r6, #16
 8014134:	d109      	bne.n	801414a <_strtol_l.isra.0+0x4a>
 8014136:	2c30      	cmp	r4, #48	; 0x30
 8014138:	d107      	bne.n	801414a <_strtol_l.isra.0+0x4a>
 801413a:	782b      	ldrb	r3, [r5, #0]
 801413c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014140:	2b58      	cmp	r3, #88	; 0x58
 8014142:	d14f      	bne.n	80141e4 <_strtol_l.isra.0+0xe4>
 8014144:	786c      	ldrb	r4, [r5, #1]
 8014146:	2610      	movs	r6, #16
 8014148:	3502      	adds	r5, #2
 801414a:	2a00      	cmp	r2, #0
 801414c:	bf14      	ite	ne
 801414e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014152:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014156:	2700      	movs	r7, #0
 8014158:	fbb1 fcf6 	udiv	ip, r1, r6
 801415c:	4638      	mov	r0, r7
 801415e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014162:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014166:	2b09      	cmp	r3, #9
 8014168:	d817      	bhi.n	801419a <_strtol_l.isra.0+0x9a>
 801416a:	461c      	mov	r4, r3
 801416c:	42a6      	cmp	r6, r4
 801416e:	dd23      	ble.n	80141b8 <_strtol_l.isra.0+0xb8>
 8014170:	1c7b      	adds	r3, r7, #1
 8014172:	d007      	beq.n	8014184 <_strtol_l.isra.0+0x84>
 8014174:	4584      	cmp	ip, r0
 8014176:	d31c      	bcc.n	80141b2 <_strtol_l.isra.0+0xb2>
 8014178:	d101      	bne.n	801417e <_strtol_l.isra.0+0x7e>
 801417a:	45a6      	cmp	lr, r4
 801417c:	db19      	blt.n	80141b2 <_strtol_l.isra.0+0xb2>
 801417e:	fb00 4006 	mla	r0, r0, r6, r4
 8014182:	2701      	movs	r7, #1
 8014184:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014188:	e7eb      	b.n	8014162 <_strtol_l.isra.0+0x62>
 801418a:	462f      	mov	r7, r5
 801418c:	e7bf      	b.n	801410e <_strtol_l.isra.0+0xe>
 801418e:	2c2b      	cmp	r4, #43	; 0x2b
 8014190:	bf04      	itt	eq
 8014192:	1cbd      	addeq	r5, r7, #2
 8014194:	787c      	ldrbeq	r4, [r7, #1]
 8014196:	461a      	mov	r2, r3
 8014198:	e7c9      	b.n	801412e <_strtol_l.isra.0+0x2e>
 801419a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801419e:	2b19      	cmp	r3, #25
 80141a0:	d801      	bhi.n	80141a6 <_strtol_l.isra.0+0xa6>
 80141a2:	3c37      	subs	r4, #55	; 0x37
 80141a4:	e7e2      	b.n	801416c <_strtol_l.isra.0+0x6c>
 80141a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80141aa:	2b19      	cmp	r3, #25
 80141ac:	d804      	bhi.n	80141b8 <_strtol_l.isra.0+0xb8>
 80141ae:	3c57      	subs	r4, #87	; 0x57
 80141b0:	e7dc      	b.n	801416c <_strtol_l.isra.0+0x6c>
 80141b2:	f04f 37ff 	mov.w	r7, #4294967295
 80141b6:	e7e5      	b.n	8014184 <_strtol_l.isra.0+0x84>
 80141b8:	1c7b      	adds	r3, r7, #1
 80141ba:	d108      	bne.n	80141ce <_strtol_l.isra.0+0xce>
 80141bc:	2322      	movs	r3, #34	; 0x22
 80141be:	f8c8 3000 	str.w	r3, [r8]
 80141c2:	4608      	mov	r0, r1
 80141c4:	f1ba 0f00 	cmp.w	sl, #0
 80141c8:	d107      	bne.n	80141da <_strtol_l.isra.0+0xda>
 80141ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ce:	b102      	cbz	r2, 80141d2 <_strtol_l.isra.0+0xd2>
 80141d0:	4240      	negs	r0, r0
 80141d2:	f1ba 0f00 	cmp.w	sl, #0
 80141d6:	d0f8      	beq.n	80141ca <_strtol_l.isra.0+0xca>
 80141d8:	b10f      	cbz	r7, 80141de <_strtol_l.isra.0+0xde>
 80141da:	f105 39ff 	add.w	r9, r5, #4294967295
 80141de:	f8ca 9000 	str.w	r9, [sl]
 80141e2:	e7f2      	b.n	80141ca <_strtol_l.isra.0+0xca>
 80141e4:	2430      	movs	r4, #48	; 0x30
 80141e6:	2e00      	cmp	r6, #0
 80141e8:	d1af      	bne.n	801414a <_strtol_l.isra.0+0x4a>
 80141ea:	2608      	movs	r6, #8
 80141ec:	e7ad      	b.n	801414a <_strtol_l.isra.0+0x4a>
 80141ee:	2c30      	cmp	r4, #48	; 0x30
 80141f0:	d0a3      	beq.n	801413a <_strtol_l.isra.0+0x3a>
 80141f2:	260a      	movs	r6, #10
 80141f4:	e7a9      	b.n	801414a <_strtol_l.isra.0+0x4a>
	...

080141f8 <_strtol_r>:
 80141f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141fa:	4c06      	ldr	r4, [pc, #24]	; (8014214 <_strtol_r+0x1c>)
 80141fc:	4d06      	ldr	r5, [pc, #24]	; (8014218 <_strtol_r+0x20>)
 80141fe:	6824      	ldr	r4, [r4, #0]
 8014200:	6a24      	ldr	r4, [r4, #32]
 8014202:	2c00      	cmp	r4, #0
 8014204:	bf08      	it	eq
 8014206:	462c      	moveq	r4, r5
 8014208:	9400      	str	r4, [sp, #0]
 801420a:	f7ff ff79 	bl	8014100 <_strtol_l.isra.0>
 801420e:	b003      	add	sp, #12
 8014210:	bd30      	pop	{r4, r5, pc}
 8014212:	bf00      	nop
 8014214:	2000000c 	.word	0x2000000c
 8014218:	20000070 	.word	0x20000070

0801421c <_vsiprintf_r>:
 801421c:	b500      	push	{lr}
 801421e:	b09b      	sub	sp, #108	; 0x6c
 8014220:	9100      	str	r1, [sp, #0]
 8014222:	9104      	str	r1, [sp, #16]
 8014224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014228:	9105      	str	r1, [sp, #20]
 801422a:	9102      	str	r1, [sp, #8]
 801422c:	4905      	ldr	r1, [pc, #20]	; (8014244 <_vsiprintf_r+0x28>)
 801422e:	9103      	str	r1, [sp, #12]
 8014230:	4669      	mov	r1, sp
 8014232:	f002 f9a5 	bl	8016580 <_svfiprintf_r>
 8014236:	9b00      	ldr	r3, [sp, #0]
 8014238:	2200      	movs	r2, #0
 801423a:	701a      	strb	r2, [r3, #0]
 801423c:	b01b      	add	sp, #108	; 0x6c
 801423e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014242:	bf00      	nop
 8014244:	ffff0208 	.word	0xffff0208

08014248 <vsiprintf>:
 8014248:	4613      	mov	r3, r2
 801424a:	460a      	mov	r2, r1
 801424c:	4601      	mov	r1, r0
 801424e:	4802      	ldr	r0, [pc, #8]	; (8014258 <vsiprintf+0x10>)
 8014250:	6800      	ldr	r0, [r0, #0]
 8014252:	f7ff bfe3 	b.w	801421c <_vsiprintf_r>
 8014256:	bf00      	nop
 8014258:	2000000c 	.word	0x2000000c

0801425c <__swbuf_r>:
 801425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425e:	460e      	mov	r6, r1
 8014260:	4614      	mov	r4, r2
 8014262:	4605      	mov	r5, r0
 8014264:	b118      	cbz	r0, 801426e <__swbuf_r+0x12>
 8014266:	6983      	ldr	r3, [r0, #24]
 8014268:	b90b      	cbnz	r3, 801426e <__swbuf_r+0x12>
 801426a:	f001 f80d 	bl	8015288 <__sinit>
 801426e:	4b21      	ldr	r3, [pc, #132]	; (80142f4 <__swbuf_r+0x98>)
 8014270:	429c      	cmp	r4, r3
 8014272:	d12a      	bne.n	80142ca <__swbuf_r+0x6e>
 8014274:	686c      	ldr	r4, [r5, #4]
 8014276:	69a3      	ldr	r3, [r4, #24]
 8014278:	60a3      	str	r3, [r4, #8]
 801427a:	89a3      	ldrh	r3, [r4, #12]
 801427c:	071a      	lsls	r2, r3, #28
 801427e:	d52e      	bpl.n	80142de <__swbuf_r+0x82>
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	b363      	cbz	r3, 80142de <__swbuf_r+0x82>
 8014284:	6923      	ldr	r3, [r4, #16]
 8014286:	6820      	ldr	r0, [r4, #0]
 8014288:	1ac0      	subs	r0, r0, r3
 801428a:	6963      	ldr	r3, [r4, #20]
 801428c:	b2f6      	uxtb	r6, r6
 801428e:	4283      	cmp	r3, r0
 8014290:	4637      	mov	r7, r6
 8014292:	dc04      	bgt.n	801429e <__swbuf_r+0x42>
 8014294:	4621      	mov	r1, r4
 8014296:	4628      	mov	r0, r5
 8014298:	f000 ff8c 	bl	80151b4 <_fflush_r>
 801429c:	bb28      	cbnz	r0, 80142ea <__swbuf_r+0x8e>
 801429e:	68a3      	ldr	r3, [r4, #8]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	60a3      	str	r3, [r4, #8]
 80142a4:	6823      	ldr	r3, [r4, #0]
 80142a6:	1c5a      	adds	r2, r3, #1
 80142a8:	6022      	str	r2, [r4, #0]
 80142aa:	701e      	strb	r6, [r3, #0]
 80142ac:	6963      	ldr	r3, [r4, #20]
 80142ae:	3001      	adds	r0, #1
 80142b0:	4283      	cmp	r3, r0
 80142b2:	d004      	beq.n	80142be <__swbuf_r+0x62>
 80142b4:	89a3      	ldrh	r3, [r4, #12]
 80142b6:	07db      	lsls	r3, r3, #31
 80142b8:	d519      	bpl.n	80142ee <__swbuf_r+0x92>
 80142ba:	2e0a      	cmp	r6, #10
 80142bc:	d117      	bne.n	80142ee <__swbuf_r+0x92>
 80142be:	4621      	mov	r1, r4
 80142c0:	4628      	mov	r0, r5
 80142c2:	f000 ff77 	bl	80151b4 <_fflush_r>
 80142c6:	b190      	cbz	r0, 80142ee <__swbuf_r+0x92>
 80142c8:	e00f      	b.n	80142ea <__swbuf_r+0x8e>
 80142ca:	4b0b      	ldr	r3, [pc, #44]	; (80142f8 <__swbuf_r+0x9c>)
 80142cc:	429c      	cmp	r4, r3
 80142ce:	d101      	bne.n	80142d4 <__swbuf_r+0x78>
 80142d0:	68ac      	ldr	r4, [r5, #8]
 80142d2:	e7d0      	b.n	8014276 <__swbuf_r+0x1a>
 80142d4:	4b09      	ldr	r3, [pc, #36]	; (80142fc <__swbuf_r+0xa0>)
 80142d6:	429c      	cmp	r4, r3
 80142d8:	bf08      	it	eq
 80142da:	68ec      	ldreq	r4, [r5, #12]
 80142dc:	e7cb      	b.n	8014276 <__swbuf_r+0x1a>
 80142de:	4621      	mov	r1, r4
 80142e0:	4628      	mov	r0, r5
 80142e2:	f000 f81f 	bl	8014324 <__swsetup_r>
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d0cc      	beq.n	8014284 <__swbuf_r+0x28>
 80142ea:	f04f 37ff 	mov.w	r7, #4294967295
 80142ee:	4638      	mov	r0, r7
 80142f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142f2:	bf00      	nop
 80142f4:	080178a8 	.word	0x080178a8
 80142f8:	080178c8 	.word	0x080178c8
 80142fc:	08017888 	.word	0x08017888

08014300 <_write_r>:
 8014300:	b538      	push	{r3, r4, r5, lr}
 8014302:	4c07      	ldr	r4, [pc, #28]	; (8014320 <_write_r+0x20>)
 8014304:	4605      	mov	r5, r0
 8014306:	4608      	mov	r0, r1
 8014308:	4611      	mov	r1, r2
 801430a:	2200      	movs	r2, #0
 801430c:	6022      	str	r2, [r4, #0]
 801430e:	461a      	mov	r2, r3
 8014310:	f7ef fbcd 	bl	8003aae <_write>
 8014314:	1c43      	adds	r3, r0, #1
 8014316:	d102      	bne.n	801431e <_write_r+0x1e>
 8014318:	6823      	ldr	r3, [r4, #0]
 801431a:	b103      	cbz	r3, 801431e <_write_r+0x1e>
 801431c:	602b      	str	r3, [r5, #0]
 801431e:	bd38      	pop	{r3, r4, r5, pc}
 8014320:	2003b434 	.word	0x2003b434

08014324 <__swsetup_r>:
 8014324:	4b32      	ldr	r3, [pc, #200]	; (80143f0 <__swsetup_r+0xcc>)
 8014326:	b570      	push	{r4, r5, r6, lr}
 8014328:	681d      	ldr	r5, [r3, #0]
 801432a:	4606      	mov	r6, r0
 801432c:	460c      	mov	r4, r1
 801432e:	b125      	cbz	r5, 801433a <__swsetup_r+0x16>
 8014330:	69ab      	ldr	r3, [r5, #24]
 8014332:	b913      	cbnz	r3, 801433a <__swsetup_r+0x16>
 8014334:	4628      	mov	r0, r5
 8014336:	f000 ffa7 	bl	8015288 <__sinit>
 801433a:	4b2e      	ldr	r3, [pc, #184]	; (80143f4 <__swsetup_r+0xd0>)
 801433c:	429c      	cmp	r4, r3
 801433e:	d10f      	bne.n	8014360 <__swsetup_r+0x3c>
 8014340:	686c      	ldr	r4, [r5, #4]
 8014342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014346:	b29a      	uxth	r2, r3
 8014348:	0715      	lsls	r5, r2, #28
 801434a:	d42c      	bmi.n	80143a6 <__swsetup_r+0x82>
 801434c:	06d0      	lsls	r0, r2, #27
 801434e:	d411      	bmi.n	8014374 <__swsetup_r+0x50>
 8014350:	2209      	movs	r2, #9
 8014352:	6032      	str	r2, [r6, #0]
 8014354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014358:	81a3      	strh	r3, [r4, #12]
 801435a:	f04f 30ff 	mov.w	r0, #4294967295
 801435e:	e03e      	b.n	80143de <__swsetup_r+0xba>
 8014360:	4b25      	ldr	r3, [pc, #148]	; (80143f8 <__swsetup_r+0xd4>)
 8014362:	429c      	cmp	r4, r3
 8014364:	d101      	bne.n	801436a <__swsetup_r+0x46>
 8014366:	68ac      	ldr	r4, [r5, #8]
 8014368:	e7eb      	b.n	8014342 <__swsetup_r+0x1e>
 801436a:	4b24      	ldr	r3, [pc, #144]	; (80143fc <__swsetup_r+0xd8>)
 801436c:	429c      	cmp	r4, r3
 801436e:	bf08      	it	eq
 8014370:	68ec      	ldreq	r4, [r5, #12]
 8014372:	e7e6      	b.n	8014342 <__swsetup_r+0x1e>
 8014374:	0751      	lsls	r1, r2, #29
 8014376:	d512      	bpl.n	801439e <__swsetup_r+0x7a>
 8014378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801437a:	b141      	cbz	r1, 801438e <__swsetup_r+0x6a>
 801437c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014380:	4299      	cmp	r1, r3
 8014382:	d002      	beq.n	801438a <__swsetup_r+0x66>
 8014384:	4630      	mov	r0, r6
 8014386:	f001 fff9 	bl	801637c <_free_r>
 801438a:	2300      	movs	r3, #0
 801438c:	6363      	str	r3, [r4, #52]	; 0x34
 801438e:	89a3      	ldrh	r3, [r4, #12]
 8014390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014394:	81a3      	strh	r3, [r4, #12]
 8014396:	2300      	movs	r3, #0
 8014398:	6063      	str	r3, [r4, #4]
 801439a:	6923      	ldr	r3, [r4, #16]
 801439c:	6023      	str	r3, [r4, #0]
 801439e:	89a3      	ldrh	r3, [r4, #12]
 80143a0:	f043 0308 	orr.w	r3, r3, #8
 80143a4:	81a3      	strh	r3, [r4, #12]
 80143a6:	6923      	ldr	r3, [r4, #16]
 80143a8:	b94b      	cbnz	r3, 80143be <__swsetup_r+0x9a>
 80143aa:	89a3      	ldrh	r3, [r4, #12]
 80143ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143b4:	d003      	beq.n	80143be <__swsetup_r+0x9a>
 80143b6:	4621      	mov	r1, r4
 80143b8:	4630      	mov	r0, r6
 80143ba:	f001 fb6d 	bl	8015a98 <__smakebuf_r>
 80143be:	89a2      	ldrh	r2, [r4, #12]
 80143c0:	f012 0301 	ands.w	r3, r2, #1
 80143c4:	d00c      	beq.n	80143e0 <__swsetup_r+0xbc>
 80143c6:	2300      	movs	r3, #0
 80143c8:	60a3      	str	r3, [r4, #8]
 80143ca:	6963      	ldr	r3, [r4, #20]
 80143cc:	425b      	negs	r3, r3
 80143ce:	61a3      	str	r3, [r4, #24]
 80143d0:	6923      	ldr	r3, [r4, #16]
 80143d2:	b953      	cbnz	r3, 80143ea <__swsetup_r+0xc6>
 80143d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80143dc:	d1ba      	bne.n	8014354 <__swsetup_r+0x30>
 80143de:	bd70      	pop	{r4, r5, r6, pc}
 80143e0:	0792      	lsls	r2, r2, #30
 80143e2:	bf58      	it	pl
 80143e4:	6963      	ldrpl	r3, [r4, #20]
 80143e6:	60a3      	str	r3, [r4, #8]
 80143e8:	e7f2      	b.n	80143d0 <__swsetup_r+0xac>
 80143ea:	2000      	movs	r0, #0
 80143ec:	e7f7      	b.n	80143de <__swsetup_r+0xba>
 80143ee:	bf00      	nop
 80143f0:	2000000c 	.word	0x2000000c
 80143f4:	080178a8 	.word	0x080178a8
 80143f8:	080178c8 	.word	0x080178c8
 80143fc:	08017888 	.word	0x08017888

08014400 <_close_r>:
 8014400:	b538      	push	{r3, r4, r5, lr}
 8014402:	4c06      	ldr	r4, [pc, #24]	; (801441c <_close_r+0x1c>)
 8014404:	2300      	movs	r3, #0
 8014406:	4605      	mov	r5, r0
 8014408:	4608      	mov	r0, r1
 801440a:	6023      	str	r3, [r4, #0]
 801440c:	f7f1 fa41 	bl	8005892 <_close>
 8014410:	1c43      	adds	r3, r0, #1
 8014412:	d102      	bne.n	801441a <_close_r+0x1a>
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	b103      	cbz	r3, 801441a <_close_r+0x1a>
 8014418:	602b      	str	r3, [r5, #0]
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	2003b434 	.word	0x2003b434

08014420 <quorem>:
 8014420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014424:	6903      	ldr	r3, [r0, #16]
 8014426:	690c      	ldr	r4, [r1, #16]
 8014428:	42a3      	cmp	r3, r4
 801442a:	4680      	mov	r8, r0
 801442c:	f2c0 8082 	blt.w	8014534 <quorem+0x114>
 8014430:	3c01      	subs	r4, #1
 8014432:	f101 0714 	add.w	r7, r1, #20
 8014436:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801443a:	f100 0614 	add.w	r6, r0, #20
 801443e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014442:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014446:	eb06 030c 	add.w	r3, r6, ip
 801444a:	3501      	adds	r5, #1
 801444c:	eb07 090c 	add.w	r9, r7, ip
 8014450:	9301      	str	r3, [sp, #4]
 8014452:	fbb0 f5f5 	udiv	r5, r0, r5
 8014456:	b395      	cbz	r5, 80144be <quorem+0x9e>
 8014458:	f04f 0a00 	mov.w	sl, #0
 801445c:	4638      	mov	r0, r7
 801445e:	46b6      	mov	lr, r6
 8014460:	46d3      	mov	fp, sl
 8014462:	f850 2b04 	ldr.w	r2, [r0], #4
 8014466:	b293      	uxth	r3, r2
 8014468:	fb05 a303 	mla	r3, r5, r3, sl
 801446c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014470:	b29b      	uxth	r3, r3
 8014472:	ebab 0303 	sub.w	r3, fp, r3
 8014476:	0c12      	lsrs	r2, r2, #16
 8014478:	f8de b000 	ldr.w	fp, [lr]
 801447c:	fb05 a202 	mla	r2, r5, r2, sl
 8014480:	fa13 f38b 	uxtah	r3, r3, fp
 8014484:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014488:	fa1f fb82 	uxth.w	fp, r2
 801448c:	f8de 2000 	ldr.w	r2, [lr]
 8014490:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014498:	b29b      	uxth	r3, r3
 801449a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801449e:	4581      	cmp	r9, r0
 80144a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80144a4:	f84e 3b04 	str.w	r3, [lr], #4
 80144a8:	d2db      	bcs.n	8014462 <quorem+0x42>
 80144aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80144ae:	b933      	cbnz	r3, 80144be <quorem+0x9e>
 80144b0:	9b01      	ldr	r3, [sp, #4]
 80144b2:	3b04      	subs	r3, #4
 80144b4:	429e      	cmp	r6, r3
 80144b6:	461a      	mov	r2, r3
 80144b8:	d330      	bcc.n	801451c <quorem+0xfc>
 80144ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80144be:	4640      	mov	r0, r8
 80144c0:	f001 fda2 	bl	8016008 <__mcmp>
 80144c4:	2800      	cmp	r0, #0
 80144c6:	db25      	blt.n	8014514 <quorem+0xf4>
 80144c8:	3501      	adds	r5, #1
 80144ca:	4630      	mov	r0, r6
 80144cc:	f04f 0c00 	mov.w	ip, #0
 80144d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80144d4:	f8d0 e000 	ldr.w	lr, [r0]
 80144d8:	b293      	uxth	r3, r2
 80144da:	ebac 0303 	sub.w	r3, ip, r3
 80144de:	0c12      	lsrs	r2, r2, #16
 80144e0:	fa13 f38e 	uxtah	r3, r3, lr
 80144e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80144e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144f2:	45b9      	cmp	r9, r7
 80144f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144f8:	f840 3b04 	str.w	r3, [r0], #4
 80144fc:	d2e8      	bcs.n	80144d0 <quorem+0xb0>
 80144fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014502:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014506:	b92a      	cbnz	r2, 8014514 <quorem+0xf4>
 8014508:	3b04      	subs	r3, #4
 801450a:	429e      	cmp	r6, r3
 801450c:	461a      	mov	r2, r3
 801450e:	d30b      	bcc.n	8014528 <quorem+0x108>
 8014510:	f8c8 4010 	str.w	r4, [r8, #16]
 8014514:	4628      	mov	r0, r5
 8014516:	b003      	add	sp, #12
 8014518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801451c:	6812      	ldr	r2, [r2, #0]
 801451e:	3b04      	subs	r3, #4
 8014520:	2a00      	cmp	r2, #0
 8014522:	d1ca      	bne.n	80144ba <quorem+0x9a>
 8014524:	3c01      	subs	r4, #1
 8014526:	e7c5      	b.n	80144b4 <quorem+0x94>
 8014528:	6812      	ldr	r2, [r2, #0]
 801452a:	3b04      	subs	r3, #4
 801452c:	2a00      	cmp	r2, #0
 801452e:	d1ef      	bne.n	8014510 <quorem+0xf0>
 8014530:	3c01      	subs	r4, #1
 8014532:	e7ea      	b.n	801450a <quorem+0xea>
 8014534:	2000      	movs	r0, #0
 8014536:	e7ee      	b.n	8014516 <quorem+0xf6>

08014538 <_dtoa_r>:
 8014538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801453c:	ec57 6b10 	vmov	r6, r7, d0
 8014540:	b097      	sub	sp, #92	; 0x5c
 8014542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014544:	9106      	str	r1, [sp, #24]
 8014546:	4604      	mov	r4, r0
 8014548:	920b      	str	r2, [sp, #44]	; 0x2c
 801454a:	9312      	str	r3, [sp, #72]	; 0x48
 801454c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014550:	e9cd 6700 	strd	r6, r7, [sp]
 8014554:	b93d      	cbnz	r5, 8014566 <_dtoa_r+0x2e>
 8014556:	2010      	movs	r0, #16
 8014558:	f001 fade 	bl	8015b18 <malloc>
 801455c:	6260      	str	r0, [r4, #36]	; 0x24
 801455e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014562:	6005      	str	r5, [r0, #0]
 8014564:	60c5      	str	r5, [r0, #12]
 8014566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014568:	6819      	ldr	r1, [r3, #0]
 801456a:	b151      	cbz	r1, 8014582 <_dtoa_r+0x4a>
 801456c:	685a      	ldr	r2, [r3, #4]
 801456e:	604a      	str	r2, [r1, #4]
 8014570:	2301      	movs	r3, #1
 8014572:	4093      	lsls	r3, r2
 8014574:	608b      	str	r3, [r1, #8]
 8014576:	4620      	mov	r0, r4
 8014578:	f001 fb27 	bl	8015bca <_Bfree>
 801457c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801457e:	2200      	movs	r2, #0
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	1e3b      	subs	r3, r7, #0
 8014584:	bfbb      	ittet	lt
 8014586:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801458a:	9301      	strlt	r3, [sp, #4]
 801458c:	2300      	movge	r3, #0
 801458e:	2201      	movlt	r2, #1
 8014590:	bfac      	ite	ge
 8014592:	f8c8 3000 	strge.w	r3, [r8]
 8014596:	f8c8 2000 	strlt.w	r2, [r8]
 801459a:	4baf      	ldr	r3, [pc, #700]	; (8014858 <_dtoa_r+0x320>)
 801459c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80145a0:	ea33 0308 	bics.w	r3, r3, r8
 80145a4:	d114      	bne.n	80145d0 <_dtoa_r+0x98>
 80145a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80145ac:	6013      	str	r3, [r2, #0]
 80145ae:	9b00      	ldr	r3, [sp, #0]
 80145b0:	b923      	cbnz	r3, 80145bc <_dtoa_r+0x84>
 80145b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80145b6:	2800      	cmp	r0, #0
 80145b8:	f000 8542 	beq.w	8015040 <_dtoa_r+0xb08>
 80145bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801486c <_dtoa_r+0x334>
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	f000 8544 	beq.w	8015050 <_dtoa_r+0xb18>
 80145c8:	f10b 0303 	add.w	r3, fp, #3
 80145cc:	f000 bd3e 	b.w	801504c <_dtoa_r+0xb14>
 80145d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80145d4:	2200      	movs	r2, #0
 80145d6:	2300      	movs	r3, #0
 80145d8:	4630      	mov	r0, r6
 80145da:	4639      	mov	r1, r7
 80145dc:	f7ec fa8c 	bl	8000af8 <__aeabi_dcmpeq>
 80145e0:	4681      	mov	r9, r0
 80145e2:	b168      	cbz	r0, 8014600 <_dtoa_r+0xc8>
 80145e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145e6:	2301      	movs	r3, #1
 80145e8:	6013      	str	r3, [r2, #0]
 80145ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	f000 8524 	beq.w	801503a <_dtoa_r+0xb02>
 80145f2:	4b9a      	ldr	r3, [pc, #616]	; (801485c <_dtoa_r+0x324>)
 80145f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80145fa:	6013      	str	r3, [r2, #0]
 80145fc:	f000 bd28 	b.w	8015050 <_dtoa_r+0xb18>
 8014600:	aa14      	add	r2, sp, #80	; 0x50
 8014602:	a915      	add	r1, sp, #84	; 0x54
 8014604:	ec47 6b10 	vmov	d0, r6, r7
 8014608:	4620      	mov	r0, r4
 801460a:	f001 fdeb 	bl	80161e4 <__d2b>
 801460e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014612:	9004      	str	r0, [sp, #16]
 8014614:	2d00      	cmp	r5, #0
 8014616:	d07c      	beq.n	8014712 <_dtoa_r+0x1da>
 8014618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801461c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014620:	46b2      	mov	sl, r6
 8014622:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801462a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801462e:	2200      	movs	r2, #0
 8014630:	4b8b      	ldr	r3, [pc, #556]	; (8014860 <_dtoa_r+0x328>)
 8014632:	4650      	mov	r0, sl
 8014634:	4659      	mov	r1, fp
 8014636:	f7eb fe3f 	bl	80002b8 <__aeabi_dsub>
 801463a:	a381      	add	r3, pc, #516	; (adr r3, 8014840 <_dtoa_r+0x308>)
 801463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014640:	f7eb fff2 	bl	8000628 <__aeabi_dmul>
 8014644:	a380      	add	r3, pc, #512	; (adr r3, 8014848 <_dtoa_r+0x310>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	f7eb fe37 	bl	80002bc <__adddf3>
 801464e:	4606      	mov	r6, r0
 8014650:	4628      	mov	r0, r5
 8014652:	460f      	mov	r7, r1
 8014654:	f7eb ff7e 	bl	8000554 <__aeabi_i2d>
 8014658:	a37d      	add	r3, pc, #500	; (adr r3, 8014850 <_dtoa_r+0x318>)
 801465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465e:	f7eb ffe3 	bl	8000628 <__aeabi_dmul>
 8014662:	4602      	mov	r2, r0
 8014664:	460b      	mov	r3, r1
 8014666:	4630      	mov	r0, r6
 8014668:	4639      	mov	r1, r7
 801466a:	f7eb fe27 	bl	80002bc <__adddf3>
 801466e:	4606      	mov	r6, r0
 8014670:	460f      	mov	r7, r1
 8014672:	f7ec fa89 	bl	8000b88 <__aeabi_d2iz>
 8014676:	2200      	movs	r2, #0
 8014678:	4682      	mov	sl, r0
 801467a:	2300      	movs	r3, #0
 801467c:	4630      	mov	r0, r6
 801467e:	4639      	mov	r1, r7
 8014680:	f7ec fa44 	bl	8000b0c <__aeabi_dcmplt>
 8014684:	b148      	cbz	r0, 801469a <_dtoa_r+0x162>
 8014686:	4650      	mov	r0, sl
 8014688:	f7eb ff64 	bl	8000554 <__aeabi_i2d>
 801468c:	4632      	mov	r2, r6
 801468e:	463b      	mov	r3, r7
 8014690:	f7ec fa32 	bl	8000af8 <__aeabi_dcmpeq>
 8014694:	b908      	cbnz	r0, 801469a <_dtoa_r+0x162>
 8014696:	f10a 3aff 	add.w	sl, sl, #4294967295
 801469a:	f1ba 0f16 	cmp.w	sl, #22
 801469e:	d859      	bhi.n	8014754 <_dtoa_r+0x21c>
 80146a0:	4970      	ldr	r1, [pc, #448]	; (8014864 <_dtoa_r+0x32c>)
 80146a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80146a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146ae:	f7ec fa4b 	bl	8000b48 <__aeabi_dcmpgt>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d050      	beq.n	8014758 <_dtoa_r+0x220>
 80146b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146ba:	2300      	movs	r3, #0
 80146bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80146be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80146c0:	1b5d      	subs	r5, r3, r5
 80146c2:	f1b5 0801 	subs.w	r8, r5, #1
 80146c6:	bf49      	itett	mi
 80146c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80146cc:	2300      	movpl	r3, #0
 80146ce:	9305      	strmi	r3, [sp, #20]
 80146d0:	f04f 0800 	movmi.w	r8, #0
 80146d4:	bf58      	it	pl
 80146d6:	9305      	strpl	r3, [sp, #20]
 80146d8:	f1ba 0f00 	cmp.w	sl, #0
 80146dc:	db3e      	blt.n	801475c <_dtoa_r+0x224>
 80146de:	2300      	movs	r3, #0
 80146e0:	44d0      	add	r8, sl
 80146e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80146e6:	9307      	str	r3, [sp, #28]
 80146e8:	9b06      	ldr	r3, [sp, #24]
 80146ea:	2b09      	cmp	r3, #9
 80146ec:	f200 8090 	bhi.w	8014810 <_dtoa_r+0x2d8>
 80146f0:	2b05      	cmp	r3, #5
 80146f2:	bfc4      	itt	gt
 80146f4:	3b04      	subgt	r3, #4
 80146f6:	9306      	strgt	r3, [sp, #24]
 80146f8:	9b06      	ldr	r3, [sp, #24]
 80146fa:	f1a3 0302 	sub.w	r3, r3, #2
 80146fe:	bfcc      	ite	gt
 8014700:	2500      	movgt	r5, #0
 8014702:	2501      	movle	r5, #1
 8014704:	2b03      	cmp	r3, #3
 8014706:	f200 808f 	bhi.w	8014828 <_dtoa_r+0x2f0>
 801470a:	e8df f003 	tbb	[pc, r3]
 801470e:	7f7d      	.short	0x7f7d
 8014710:	7131      	.short	0x7131
 8014712:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014716:	441d      	add	r5, r3
 8014718:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801471c:	2820      	cmp	r0, #32
 801471e:	dd13      	ble.n	8014748 <_dtoa_r+0x210>
 8014720:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014724:	9b00      	ldr	r3, [sp, #0]
 8014726:	fa08 f800 	lsl.w	r8, r8, r0
 801472a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801472e:	fa23 f000 	lsr.w	r0, r3, r0
 8014732:	ea48 0000 	orr.w	r0, r8, r0
 8014736:	f7eb fefd 	bl	8000534 <__aeabi_ui2d>
 801473a:	2301      	movs	r3, #1
 801473c:	4682      	mov	sl, r0
 801473e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014742:	3d01      	subs	r5, #1
 8014744:	9313      	str	r3, [sp, #76]	; 0x4c
 8014746:	e772      	b.n	801462e <_dtoa_r+0xf6>
 8014748:	9b00      	ldr	r3, [sp, #0]
 801474a:	f1c0 0020 	rsb	r0, r0, #32
 801474e:	fa03 f000 	lsl.w	r0, r3, r0
 8014752:	e7f0      	b.n	8014736 <_dtoa_r+0x1fe>
 8014754:	2301      	movs	r3, #1
 8014756:	e7b1      	b.n	80146bc <_dtoa_r+0x184>
 8014758:	900f      	str	r0, [sp, #60]	; 0x3c
 801475a:	e7b0      	b.n	80146be <_dtoa_r+0x186>
 801475c:	9b05      	ldr	r3, [sp, #20]
 801475e:	eba3 030a 	sub.w	r3, r3, sl
 8014762:	9305      	str	r3, [sp, #20]
 8014764:	f1ca 0300 	rsb	r3, sl, #0
 8014768:	9307      	str	r3, [sp, #28]
 801476a:	2300      	movs	r3, #0
 801476c:	930e      	str	r3, [sp, #56]	; 0x38
 801476e:	e7bb      	b.n	80146e8 <_dtoa_r+0x1b0>
 8014770:	2301      	movs	r3, #1
 8014772:	930a      	str	r3, [sp, #40]	; 0x28
 8014774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014776:	2b00      	cmp	r3, #0
 8014778:	dd59      	ble.n	801482e <_dtoa_r+0x2f6>
 801477a:	9302      	str	r3, [sp, #8]
 801477c:	4699      	mov	r9, r3
 801477e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014780:	2200      	movs	r2, #0
 8014782:	6072      	str	r2, [r6, #4]
 8014784:	2204      	movs	r2, #4
 8014786:	f102 0014 	add.w	r0, r2, #20
 801478a:	4298      	cmp	r0, r3
 801478c:	6871      	ldr	r1, [r6, #4]
 801478e:	d953      	bls.n	8014838 <_dtoa_r+0x300>
 8014790:	4620      	mov	r0, r4
 8014792:	f001 f9e6 	bl	8015b62 <_Balloc>
 8014796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014798:	6030      	str	r0, [r6, #0]
 801479a:	f1b9 0f0e 	cmp.w	r9, #14
 801479e:	f8d3 b000 	ldr.w	fp, [r3]
 80147a2:	f200 80e6 	bhi.w	8014972 <_dtoa_r+0x43a>
 80147a6:	2d00      	cmp	r5, #0
 80147a8:	f000 80e3 	beq.w	8014972 <_dtoa_r+0x43a>
 80147ac:	ed9d 7b00 	vldr	d7, [sp]
 80147b0:	f1ba 0f00 	cmp.w	sl, #0
 80147b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80147b8:	dd74      	ble.n	80148a4 <_dtoa_r+0x36c>
 80147ba:	4a2a      	ldr	r2, [pc, #168]	; (8014864 <_dtoa_r+0x32c>)
 80147bc:	f00a 030f 	and.w	r3, sl, #15
 80147c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80147c4:	ed93 7b00 	vldr	d7, [r3]
 80147c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80147cc:	06f0      	lsls	r0, r6, #27
 80147ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80147d2:	d565      	bpl.n	80148a0 <_dtoa_r+0x368>
 80147d4:	4b24      	ldr	r3, [pc, #144]	; (8014868 <_dtoa_r+0x330>)
 80147d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80147da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80147de:	f7ec f84d 	bl	800087c <__aeabi_ddiv>
 80147e2:	e9cd 0100 	strd	r0, r1, [sp]
 80147e6:	f006 060f 	and.w	r6, r6, #15
 80147ea:	2503      	movs	r5, #3
 80147ec:	4f1e      	ldr	r7, [pc, #120]	; (8014868 <_dtoa_r+0x330>)
 80147ee:	e04c      	b.n	801488a <_dtoa_r+0x352>
 80147f0:	2301      	movs	r3, #1
 80147f2:	930a      	str	r3, [sp, #40]	; 0x28
 80147f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147f6:	4453      	add	r3, sl
 80147f8:	f103 0901 	add.w	r9, r3, #1
 80147fc:	9302      	str	r3, [sp, #8]
 80147fe:	464b      	mov	r3, r9
 8014800:	2b01      	cmp	r3, #1
 8014802:	bfb8      	it	lt
 8014804:	2301      	movlt	r3, #1
 8014806:	e7ba      	b.n	801477e <_dtoa_r+0x246>
 8014808:	2300      	movs	r3, #0
 801480a:	e7b2      	b.n	8014772 <_dtoa_r+0x23a>
 801480c:	2300      	movs	r3, #0
 801480e:	e7f0      	b.n	80147f2 <_dtoa_r+0x2ba>
 8014810:	2501      	movs	r5, #1
 8014812:	2300      	movs	r3, #0
 8014814:	9306      	str	r3, [sp, #24]
 8014816:	950a      	str	r5, [sp, #40]	; 0x28
 8014818:	f04f 33ff 	mov.w	r3, #4294967295
 801481c:	9302      	str	r3, [sp, #8]
 801481e:	4699      	mov	r9, r3
 8014820:	2200      	movs	r2, #0
 8014822:	2312      	movs	r3, #18
 8014824:	920b      	str	r2, [sp, #44]	; 0x2c
 8014826:	e7aa      	b.n	801477e <_dtoa_r+0x246>
 8014828:	2301      	movs	r3, #1
 801482a:	930a      	str	r3, [sp, #40]	; 0x28
 801482c:	e7f4      	b.n	8014818 <_dtoa_r+0x2e0>
 801482e:	2301      	movs	r3, #1
 8014830:	9302      	str	r3, [sp, #8]
 8014832:	4699      	mov	r9, r3
 8014834:	461a      	mov	r2, r3
 8014836:	e7f5      	b.n	8014824 <_dtoa_r+0x2ec>
 8014838:	3101      	adds	r1, #1
 801483a:	6071      	str	r1, [r6, #4]
 801483c:	0052      	lsls	r2, r2, #1
 801483e:	e7a2      	b.n	8014786 <_dtoa_r+0x24e>
 8014840:	636f4361 	.word	0x636f4361
 8014844:	3fd287a7 	.word	0x3fd287a7
 8014848:	8b60c8b3 	.word	0x8b60c8b3
 801484c:	3fc68a28 	.word	0x3fc68a28
 8014850:	509f79fb 	.word	0x509f79fb
 8014854:	3fd34413 	.word	0x3fd34413
 8014858:	7ff00000 	.word	0x7ff00000
 801485c:	08017a1c 	.word	0x08017a1c
 8014860:	3ff80000 	.word	0x3ff80000
 8014864:	08017920 	.word	0x08017920
 8014868:	080178f8 	.word	0x080178f8
 801486c:	08017881 	.word	0x08017881
 8014870:	07f1      	lsls	r1, r6, #31
 8014872:	d508      	bpl.n	8014886 <_dtoa_r+0x34e>
 8014874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014878:	e9d7 2300 	ldrd	r2, r3, [r7]
 801487c:	f7eb fed4 	bl	8000628 <__aeabi_dmul>
 8014880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014884:	3501      	adds	r5, #1
 8014886:	1076      	asrs	r6, r6, #1
 8014888:	3708      	adds	r7, #8
 801488a:	2e00      	cmp	r6, #0
 801488c:	d1f0      	bne.n	8014870 <_dtoa_r+0x338>
 801488e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014896:	f7eb fff1 	bl	800087c <__aeabi_ddiv>
 801489a:	e9cd 0100 	strd	r0, r1, [sp]
 801489e:	e01a      	b.n	80148d6 <_dtoa_r+0x39e>
 80148a0:	2502      	movs	r5, #2
 80148a2:	e7a3      	b.n	80147ec <_dtoa_r+0x2b4>
 80148a4:	f000 80a0 	beq.w	80149e8 <_dtoa_r+0x4b0>
 80148a8:	f1ca 0600 	rsb	r6, sl, #0
 80148ac:	4b9f      	ldr	r3, [pc, #636]	; (8014b2c <_dtoa_r+0x5f4>)
 80148ae:	4fa0      	ldr	r7, [pc, #640]	; (8014b30 <_dtoa_r+0x5f8>)
 80148b0:	f006 020f 	and.w	r2, r6, #15
 80148b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80148c0:	f7eb feb2 	bl	8000628 <__aeabi_dmul>
 80148c4:	e9cd 0100 	strd	r0, r1, [sp]
 80148c8:	1136      	asrs	r6, r6, #4
 80148ca:	2300      	movs	r3, #0
 80148cc:	2502      	movs	r5, #2
 80148ce:	2e00      	cmp	r6, #0
 80148d0:	d17f      	bne.n	80149d2 <_dtoa_r+0x49a>
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1e1      	bne.n	801489a <_dtoa_r+0x362>
 80148d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f000 8087 	beq.w	80149ec <_dtoa_r+0x4b4>
 80148de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80148e2:	2200      	movs	r2, #0
 80148e4:	4b93      	ldr	r3, [pc, #588]	; (8014b34 <_dtoa_r+0x5fc>)
 80148e6:	4630      	mov	r0, r6
 80148e8:	4639      	mov	r1, r7
 80148ea:	f7ec f90f 	bl	8000b0c <__aeabi_dcmplt>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d07c      	beq.n	80149ec <_dtoa_r+0x4b4>
 80148f2:	f1b9 0f00 	cmp.w	r9, #0
 80148f6:	d079      	beq.n	80149ec <_dtoa_r+0x4b4>
 80148f8:	9b02      	ldr	r3, [sp, #8]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	dd35      	ble.n	801496a <_dtoa_r+0x432>
 80148fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014902:	9308      	str	r3, [sp, #32]
 8014904:	4639      	mov	r1, r7
 8014906:	2200      	movs	r2, #0
 8014908:	4b8b      	ldr	r3, [pc, #556]	; (8014b38 <_dtoa_r+0x600>)
 801490a:	4630      	mov	r0, r6
 801490c:	f7eb fe8c 	bl	8000628 <__aeabi_dmul>
 8014910:	e9cd 0100 	strd	r0, r1, [sp]
 8014914:	9f02      	ldr	r7, [sp, #8]
 8014916:	3501      	adds	r5, #1
 8014918:	4628      	mov	r0, r5
 801491a:	f7eb fe1b 	bl	8000554 <__aeabi_i2d>
 801491e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014922:	f7eb fe81 	bl	8000628 <__aeabi_dmul>
 8014926:	2200      	movs	r2, #0
 8014928:	4b84      	ldr	r3, [pc, #528]	; (8014b3c <_dtoa_r+0x604>)
 801492a:	f7eb fcc7 	bl	80002bc <__adddf3>
 801492e:	4605      	mov	r5, r0
 8014930:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014934:	2f00      	cmp	r7, #0
 8014936:	d15d      	bne.n	80149f4 <_dtoa_r+0x4bc>
 8014938:	2200      	movs	r2, #0
 801493a:	4b81      	ldr	r3, [pc, #516]	; (8014b40 <_dtoa_r+0x608>)
 801493c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014940:	f7eb fcba 	bl	80002b8 <__aeabi_dsub>
 8014944:	462a      	mov	r2, r5
 8014946:	4633      	mov	r3, r6
 8014948:	e9cd 0100 	strd	r0, r1, [sp]
 801494c:	f7ec f8fc 	bl	8000b48 <__aeabi_dcmpgt>
 8014950:	2800      	cmp	r0, #0
 8014952:	f040 8288 	bne.w	8014e66 <_dtoa_r+0x92e>
 8014956:	462a      	mov	r2, r5
 8014958:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801495c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014960:	f7ec f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8014964:	2800      	cmp	r0, #0
 8014966:	f040 827c 	bne.w	8014e62 <_dtoa_r+0x92a>
 801496a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801496e:	e9cd 2300 	strd	r2, r3, [sp]
 8014972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014974:	2b00      	cmp	r3, #0
 8014976:	f2c0 8150 	blt.w	8014c1a <_dtoa_r+0x6e2>
 801497a:	f1ba 0f0e 	cmp.w	sl, #14
 801497e:	f300 814c 	bgt.w	8014c1a <_dtoa_r+0x6e2>
 8014982:	4b6a      	ldr	r3, [pc, #424]	; (8014b2c <_dtoa_r+0x5f4>)
 8014984:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014988:	ed93 7b00 	vldr	d7, [r3]
 801498c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801498e:	2b00      	cmp	r3, #0
 8014990:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014994:	f280 80d8 	bge.w	8014b48 <_dtoa_r+0x610>
 8014998:	f1b9 0f00 	cmp.w	r9, #0
 801499c:	f300 80d4 	bgt.w	8014b48 <_dtoa_r+0x610>
 80149a0:	f040 825e 	bne.w	8014e60 <_dtoa_r+0x928>
 80149a4:	2200      	movs	r2, #0
 80149a6:	4b66      	ldr	r3, [pc, #408]	; (8014b40 <_dtoa_r+0x608>)
 80149a8:	ec51 0b17 	vmov	r0, r1, d7
 80149ac:	f7eb fe3c 	bl	8000628 <__aeabi_dmul>
 80149b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149b4:	f7ec f8be 	bl	8000b34 <__aeabi_dcmpge>
 80149b8:	464f      	mov	r7, r9
 80149ba:	464e      	mov	r6, r9
 80149bc:	2800      	cmp	r0, #0
 80149be:	f040 8234 	bne.w	8014e2a <_dtoa_r+0x8f2>
 80149c2:	2331      	movs	r3, #49	; 0x31
 80149c4:	f10b 0501 	add.w	r5, fp, #1
 80149c8:	f88b 3000 	strb.w	r3, [fp]
 80149cc:	f10a 0a01 	add.w	sl, sl, #1
 80149d0:	e22f      	b.n	8014e32 <_dtoa_r+0x8fa>
 80149d2:	07f2      	lsls	r2, r6, #31
 80149d4:	d505      	bpl.n	80149e2 <_dtoa_r+0x4aa>
 80149d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149da:	f7eb fe25 	bl	8000628 <__aeabi_dmul>
 80149de:	3501      	adds	r5, #1
 80149e0:	2301      	movs	r3, #1
 80149e2:	1076      	asrs	r6, r6, #1
 80149e4:	3708      	adds	r7, #8
 80149e6:	e772      	b.n	80148ce <_dtoa_r+0x396>
 80149e8:	2502      	movs	r5, #2
 80149ea:	e774      	b.n	80148d6 <_dtoa_r+0x39e>
 80149ec:	f8cd a020 	str.w	sl, [sp, #32]
 80149f0:	464f      	mov	r7, r9
 80149f2:	e791      	b.n	8014918 <_dtoa_r+0x3e0>
 80149f4:	4b4d      	ldr	r3, [pc, #308]	; (8014b2c <_dtoa_r+0x5f4>)
 80149f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80149fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80149fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d047      	beq.n	8014a94 <_dtoa_r+0x55c>
 8014a04:	4602      	mov	r2, r0
 8014a06:	460b      	mov	r3, r1
 8014a08:	2000      	movs	r0, #0
 8014a0a:	494e      	ldr	r1, [pc, #312]	; (8014b44 <_dtoa_r+0x60c>)
 8014a0c:	f7eb ff36 	bl	800087c <__aeabi_ddiv>
 8014a10:	462a      	mov	r2, r5
 8014a12:	4633      	mov	r3, r6
 8014a14:	f7eb fc50 	bl	80002b8 <__aeabi_dsub>
 8014a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014a1c:	465d      	mov	r5, fp
 8014a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a22:	f7ec f8b1 	bl	8000b88 <__aeabi_d2iz>
 8014a26:	4606      	mov	r6, r0
 8014a28:	f7eb fd94 	bl	8000554 <__aeabi_i2d>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a34:	f7eb fc40 	bl	80002b8 <__aeabi_dsub>
 8014a38:	3630      	adds	r6, #48	; 0x30
 8014a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8014a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014a42:	e9cd 0100 	strd	r0, r1, [sp]
 8014a46:	f7ec f861 	bl	8000b0c <__aeabi_dcmplt>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d163      	bne.n	8014b16 <_dtoa_r+0x5de>
 8014a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a52:	2000      	movs	r0, #0
 8014a54:	4937      	ldr	r1, [pc, #220]	; (8014b34 <_dtoa_r+0x5fc>)
 8014a56:	f7eb fc2f 	bl	80002b8 <__aeabi_dsub>
 8014a5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014a5e:	f7ec f855 	bl	8000b0c <__aeabi_dcmplt>
 8014a62:	2800      	cmp	r0, #0
 8014a64:	f040 80b7 	bne.w	8014bd6 <_dtoa_r+0x69e>
 8014a68:	eba5 030b 	sub.w	r3, r5, fp
 8014a6c:	429f      	cmp	r7, r3
 8014a6e:	f77f af7c 	ble.w	801496a <_dtoa_r+0x432>
 8014a72:	2200      	movs	r2, #0
 8014a74:	4b30      	ldr	r3, [pc, #192]	; (8014b38 <_dtoa_r+0x600>)
 8014a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014a7a:	f7eb fdd5 	bl	8000628 <__aeabi_dmul>
 8014a7e:	2200      	movs	r2, #0
 8014a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014a84:	4b2c      	ldr	r3, [pc, #176]	; (8014b38 <_dtoa_r+0x600>)
 8014a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a8a:	f7eb fdcd 	bl	8000628 <__aeabi_dmul>
 8014a8e:	e9cd 0100 	strd	r0, r1, [sp]
 8014a92:	e7c4      	b.n	8014a1e <_dtoa_r+0x4e6>
 8014a94:	462a      	mov	r2, r5
 8014a96:	4633      	mov	r3, r6
 8014a98:	f7eb fdc6 	bl	8000628 <__aeabi_dmul>
 8014a9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014aa0:	eb0b 0507 	add.w	r5, fp, r7
 8014aa4:	465e      	mov	r6, fp
 8014aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014aaa:	f7ec f86d 	bl	8000b88 <__aeabi_d2iz>
 8014aae:	4607      	mov	r7, r0
 8014ab0:	f7eb fd50 	bl	8000554 <__aeabi_i2d>
 8014ab4:	3730      	adds	r7, #48	; 0x30
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	460b      	mov	r3, r1
 8014aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014abe:	f7eb fbfb 	bl	80002b8 <__aeabi_dsub>
 8014ac2:	f806 7b01 	strb.w	r7, [r6], #1
 8014ac6:	42ae      	cmp	r6, r5
 8014ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8014acc:	f04f 0200 	mov.w	r2, #0
 8014ad0:	d126      	bne.n	8014b20 <_dtoa_r+0x5e8>
 8014ad2:	4b1c      	ldr	r3, [pc, #112]	; (8014b44 <_dtoa_r+0x60c>)
 8014ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ad8:	f7eb fbf0 	bl	80002bc <__adddf3>
 8014adc:	4602      	mov	r2, r0
 8014ade:	460b      	mov	r3, r1
 8014ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ae4:	f7ec f830 	bl	8000b48 <__aeabi_dcmpgt>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d174      	bne.n	8014bd6 <_dtoa_r+0x69e>
 8014aec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014af0:	2000      	movs	r0, #0
 8014af2:	4914      	ldr	r1, [pc, #80]	; (8014b44 <_dtoa_r+0x60c>)
 8014af4:	f7eb fbe0 	bl	80002b8 <__aeabi_dsub>
 8014af8:	4602      	mov	r2, r0
 8014afa:	460b      	mov	r3, r1
 8014afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b00:	f7ec f804 	bl	8000b0c <__aeabi_dcmplt>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	f43f af30 	beq.w	801496a <_dtoa_r+0x432>
 8014b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b0e:	2b30      	cmp	r3, #48	; 0x30
 8014b10:	f105 32ff 	add.w	r2, r5, #4294967295
 8014b14:	d002      	beq.n	8014b1c <_dtoa_r+0x5e4>
 8014b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014b1a:	e04a      	b.n	8014bb2 <_dtoa_r+0x67a>
 8014b1c:	4615      	mov	r5, r2
 8014b1e:	e7f4      	b.n	8014b0a <_dtoa_r+0x5d2>
 8014b20:	4b05      	ldr	r3, [pc, #20]	; (8014b38 <_dtoa_r+0x600>)
 8014b22:	f7eb fd81 	bl	8000628 <__aeabi_dmul>
 8014b26:	e9cd 0100 	strd	r0, r1, [sp]
 8014b2a:	e7bc      	b.n	8014aa6 <_dtoa_r+0x56e>
 8014b2c:	08017920 	.word	0x08017920
 8014b30:	080178f8 	.word	0x080178f8
 8014b34:	3ff00000 	.word	0x3ff00000
 8014b38:	40240000 	.word	0x40240000
 8014b3c:	401c0000 	.word	0x401c0000
 8014b40:	40140000 	.word	0x40140000
 8014b44:	3fe00000 	.word	0x3fe00000
 8014b48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014b4c:	465d      	mov	r5, fp
 8014b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014b52:	4630      	mov	r0, r6
 8014b54:	4639      	mov	r1, r7
 8014b56:	f7eb fe91 	bl	800087c <__aeabi_ddiv>
 8014b5a:	f7ec f815 	bl	8000b88 <__aeabi_d2iz>
 8014b5e:	4680      	mov	r8, r0
 8014b60:	f7eb fcf8 	bl	8000554 <__aeabi_i2d>
 8014b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014b68:	f7eb fd5e 	bl	8000628 <__aeabi_dmul>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	460b      	mov	r3, r1
 8014b70:	4630      	mov	r0, r6
 8014b72:	4639      	mov	r1, r7
 8014b74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014b78:	f7eb fb9e 	bl	80002b8 <__aeabi_dsub>
 8014b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8014b80:	eba5 060b 	sub.w	r6, r5, fp
 8014b84:	45b1      	cmp	r9, r6
 8014b86:	4602      	mov	r2, r0
 8014b88:	460b      	mov	r3, r1
 8014b8a:	d139      	bne.n	8014c00 <_dtoa_r+0x6c8>
 8014b8c:	f7eb fb96 	bl	80002bc <__adddf3>
 8014b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014b94:	4606      	mov	r6, r0
 8014b96:	460f      	mov	r7, r1
 8014b98:	f7eb ffd6 	bl	8000b48 <__aeabi_dcmpgt>
 8014b9c:	b9c8      	cbnz	r0, 8014bd2 <_dtoa_r+0x69a>
 8014b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014ba2:	4630      	mov	r0, r6
 8014ba4:	4639      	mov	r1, r7
 8014ba6:	f7eb ffa7 	bl	8000af8 <__aeabi_dcmpeq>
 8014baa:	b110      	cbz	r0, 8014bb2 <_dtoa_r+0x67a>
 8014bac:	f018 0f01 	tst.w	r8, #1
 8014bb0:	d10f      	bne.n	8014bd2 <_dtoa_r+0x69a>
 8014bb2:	9904      	ldr	r1, [sp, #16]
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f001 f808 	bl	8015bca <_Bfree>
 8014bba:	2300      	movs	r3, #0
 8014bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bbe:	702b      	strb	r3, [r5, #0]
 8014bc0:	f10a 0301 	add.w	r3, sl, #1
 8014bc4:	6013      	str	r3, [r2, #0]
 8014bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f000 8241 	beq.w	8015050 <_dtoa_r+0xb18>
 8014bce:	601d      	str	r5, [r3, #0]
 8014bd0:	e23e      	b.n	8015050 <_dtoa_r+0xb18>
 8014bd2:	f8cd a020 	str.w	sl, [sp, #32]
 8014bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014bda:	2a39      	cmp	r2, #57	; 0x39
 8014bdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8014be0:	d108      	bne.n	8014bf4 <_dtoa_r+0x6bc>
 8014be2:	459b      	cmp	fp, r3
 8014be4:	d10a      	bne.n	8014bfc <_dtoa_r+0x6c4>
 8014be6:	9b08      	ldr	r3, [sp, #32]
 8014be8:	3301      	adds	r3, #1
 8014bea:	9308      	str	r3, [sp, #32]
 8014bec:	2330      	movs	r3, #48	; 0x30
 8014bee:	f88b 3000 	strb.w	r3, [fp]
 8014bf2:	465b      	mov	r3, fp
 8014bf4:	781a      	ldrb	r2, [r3, #0]
 8014bf6:	3201      	adds	r2, #1
 8014bf8:	701a      	strb	r2, [r3, #0]
 8014bfa:	e78c      	b.n	8014b16 <_dtoa_r+0x5de>
 8014bfc:	461d      	mov	r5, r3
 8014bfe:	e7ea      	b.n	8014bd6 <_dtoa_r+0x69e>
 8014c00:	2200      	movs	r2, #0
 8014c02:	4b9b      	ldr	r3, [pc, #620]	; (8014e70 <_dtoa_r+0x938>)
 8014c04:	f7eb fd10 	bl	8000628 <__aeabi_dmul>
 8014c08:	2200      	movs	r2, #0
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	4606      	mov	r6, r0
 8014c0e:	460f      	mov	r7, r1
 8014c10:	f7eb ff72 	bl	8000af8 <__aeabi_dcmpeq>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	d09a      	beq.n	8014b4e <_dtoa_r+0x616>
 8014c18:	e7cb      	b.n	8014bb2 <_dtoa_r+0x67a>
 8014c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c1c:	2a00      	cmp	r2, #0
 8014c1e:	f000 808b 	beq.w	8014d38 <_dtoa_r+0x800>
 8014c22:	9a06      	ldr	r2, [sp, #24]
 8014c24:	2a01      	cmp	r2, #1
 8014c26:	dc6e      	bgt.n	8014d06 <_dtoa_r+0x7ce>
 8014c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014c2a:	2a00      	cmp	r2, #0
 8014c2c:	d067      	beq.n	8014cfe <_dtoa_r+0x7c6>
 8014c2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c32:	9f07      	ldr	r7, [sp, #28]
 8014c34:	9d05      	ldr	r5, [sp, #20]
 8014c36:	9a05      	ldr	r2, [sp, #20]
 8014c38:	2101      	movs	r1, #1
 8014c3a:	441a      	add	r2, r3
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	9205      	str	r2, [sp, #20]
 8014c40:	4498      	add	r8, r3
 8014c42:	f001 f8a0 	bl	8015d86 <__i2b>
 8014c46:	4606      	mov	r6, r0
 8014c48:	2d00      	cmp	r5, #0
 8014c4a:	dd0c      	ble.n	8014c66 <_dtoa_r+0x72e>
 8014c4c:	f1b8 0f00 	cmp.w	r8, #0
 8014c50:	dd09      	ble.n	8014c66 <_dtoa_r+0x72e>
 8014c52:	4545      	cmp	r5, r8
 8014c54:	9a05      	ldr	r2, [sp, #20]
 8014c56:	462b      	mov	r3, r5
 8014c58:	bfa8      	it	ge
 8014c5a:	4643      	movge	r3, r8
 8014c5c:	1ad2      	subs	r2, r2, r3
 8014c5e:	9205      	str	r2, [sp, #20]
 8014c60:	1aed      	subs	r5, r5, r3
 8014c62:	eba8 0803 	sub.w	r8, r8, r3
 8014c66:	9b07      	ldr	r3, [sp, #28]
 8014c68:	b1eb      	cbz	r3, 8014ca6 <_dtoa_r+0x76e>
 8014c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d067      	beq.n	8014d40 <_dtoa_r+0x808>
 8014c70:	b18f      	cbz	r7, 8014c96 <_dtoa_r+0x75e>
 8014c72:	4631      	mov	r1, r6
 8014c74:	463a      	mov	r2, r7
 8014c76:	4620      	mov	r0, r4
 8014c78:	f001 f924 	bl	8015ec4 <__pow5mult>
 8014c7c:	9a04      	ldr	r2, [sp, #16]
 8014c7e:	4601      	mov	r1, r0
 8014c80:	4606      	mov	r6, r0
 8014c82:	4620      	mov	r0, r4
 8014c84:	f001 f888 	bl	8015d98 <__multiply>
 8014c88:	9904      	ldr	r1, [sp, #16]
 8014c8a:	9008      	str	r0, [sp, #32]
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f000 ff9c 	bl	8015bca <_Bfree>
 8014c92:	9b08      	ldr	r3, [sp, #32]
 8014c94:	9304      	str	r3, [sp, #16]
 8014c96:	9b07      	ldr	r3, [sp, #28]
 8014c98:	1bda      	subs	r2, r3, r7
 8014c9a:	d004      	beq.n	8014ca6 <_dtoa_r+0x76e>
 8014c9c:	9904      	ldr	r1, [sp, #16]
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f001 f910 	bl	8015ec4 <__pow5mult>
 8014ca4:	9004      	str	r0, [sp, #16]
 8014ca6:	2101      	movs	r1, #1
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f001 f86c 	bl	8015d86 <__i2b>
 8014cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cb0:	4607      	mov	r7, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f000 81d0 	beq.w	8015058 <_dtoa_r+0xb20>
 8014cb8:	461a      	mov	r2, r3
 8014cba:	4601      	mov	r1, r0
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	f001 f901 	bl	8015ec4 <__pow5mult>
 8014cc2:	9b06      	ldr	r3, [sp, #24]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	4607      	mov	r7, r0
 8014cc8:	dc40      	bgt.n	8014d4c <_dtoa_r+0x814>
 8014cca:	9b00      	ldr	r3, [sp, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d139      	bne.n	8014d44 <_dtoa_r+0x80c>
 8014cd0:	9b01      	ldr	r3, [sp, #4]
 8014cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d136      	bne.n	8014d48 <_dtoa_r+0x810>
 8014cda:	9b01      	ldr	r3, [sp, #4]
 8014cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ce0:	0d1b      	lsrs	r3, r3, #20
 8014ce2:	051b      	lsls	r3, r3, #20
 8014ce4:	b12b      	cbz	r3, 8014cf2 <_dtoa_r+0x7ba>
 8014ce6:	9b05      	ldr	r3, [sp, #20]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	9305      	str	r3, [sp, #20]
 8014cec:	f108 0801 	add.w	r8, r8, #1
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	9307      	str	r3, [sp, #28]
 8014cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d12a      	bne.n	8014d50 <_dtoa_r+0x818>
 8014cfa:	2001      	movs	r0, #1
 8014cfc:	e030      	b.n	8014d60 <_dtoa_r+0x828>
 8014cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d04:	e795      	b.n	8014c32 <_dtoa_r+0x6fa>
 8014d06:	9b07      	ldr	r3, [sp, #28]
 8014d08:	f109 37ff 	add.w	r7, r9, #4294967295
 8014d0c:	42bb      	cmp	r3, r7
 8014d0e:	bfbf      	itttt	lt
 8014d10:	9b07      	ldrlt	r3, [sp, #28]
 8014d12:	9707      	strlt	r7, [sp, #28]
 8014d14:	1afa      	sublt	r2, r7, r3
 8014d16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014d18:	bfbb      	ittet	lt
 8014d1a:	189b      	addlt	r3, r3, r2
 8014d1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014d1e:	1bdf      	subge	r7, r3, r7
 8014d20:	2700      	movlt	r7, #0
 8014d22:	f1b9 0f00 	cmp.w	r9, #0
 8014d26:	bfb5      	itete	lt
 8014d28:	9b05      	ldrlt	r3, [sp, #20]
 8014d2a:	9d05      	ldrge	r5, [sp, #20]
 8014d2c:	eba3 0509 	sublt.w	r5, r3, r9
 8014d30:	464b      	movge	r3, r9
 8014d32:	bfb8      	it	lt
 8014d34:	2300      	movlt	r3, #0
 8014d36:	e77e      	b.n	8014c36 <_dtoa_r+0x6fe>
 8014d38:	9f07      	ldr	r7, [sp, #28]
 8014d3a:	9d05      	ldr	r5, [sp, #20]
 8014d3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014d3e:	e783      	b.n	8014c48 <_dtoa_r+0x710>
 8014d40:	9a07      	ldr	r2, [sp, #28]
 8014d42:	e7ab      	b.n	8014c9c <_dtoa_r+0x764>
 8014d44:	2300      	movs	r3, #0
 8014d46:	e7d4      	b.n	8014cf2 <_dtoa_r+0x7ba>
 8014d48:	9b00      	ldr	r3, [sp, #0]
 8014d4a:	e7d2      	b.n	8014cf2 <_dtoa_r+0x7ba>
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	9307      	str	r3, [sp, #28]
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014d56:	6918      	ldr	r0, [r3, #16]
 8014d58:	f000 ffc7 	bl	8015cea <__hi0bits>
 8014d5c:	f1c0 0020 	rsb	r0, r0, #32
 8014d60:	4440      	add	r0, r8
 8014d62:	f010 001f 	ands.w	r0, r0, #31
 8014d66:	d047      	beq.n	8014df8 <_dtoa_r+0x8c0>
 8014d68:	f1c0 0320 	rsb	r3, r0, #32
 8014d6c:	2b04      	cmp	r3, #4
 8014d6e:	dd3b      	ble.n	8014de8 <_dtoa_r+0x8b0>
 8014d70:	9b05      	ldr	r3, [sp, #20]
 8014d72:	f1c0 001c 	rsb	r0, r0, #28
 8014d76:	4403      	add	r3, r0
 8014d78:	9305      	str	r3, [sp, #20]
 8014d7a:	4405      	add	r5, r0
 8014d7c:	4480      	add	r8, r0
 8014d7e:	9b05      	ldr	r3, [sp, #20]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	dd05      	ble.n	8014d90 <_dtoa_r+0x858>
 8014d84:	461a      	mov	r2, r3
 8014d86:	9904      	ldr	r1, [sp, #16]
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f001 f8e9 	bl	8015f60 <__lshift>
 8014d8e:	9004      	str	r0, [sp, #16]
 8014d90:	f1b8 0f00 	cmp.w	r8, #0
 8014d94:	dd05      	ble.n	8014da2 <_dtoa_r+0x86a>
 8014d96:	4639      	mov	r1, r7
 8014d98:	4642      	mov	r2, r8
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f001 f8e0 	bl	8015f60 <__lshift>
 8014da0:	4607      	mov	r7, r0
 8014da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014da4:	b353      	cbz	r3, 8014dfc <_dtoa_r+0x8c4>
 8014da6:	4639      	mov	r1, r7
 8014da8:	9804      	ldr	r0, [sp, #16]
 8014daa:	f001 f92d 	bl	8016008 <__mcmp>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	da24      	bge.n	8014dfc <_dtoa_r+0x8c4>
 8014db2:	2300      	movs	r3, #0
 8014db4:	220a      	movs	r2, #10
 8014db6:	9904      	ldr	r1, [sp, #16]
 8014db8:	4620      	mov	r0, r4
 8014dba:	f000 ff1d 	bl	8015bf8 <__multadd>
 8014dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dc0:	9004      	str	r0, [sp, #16]
 8014dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	f000 814d 	beq.w	8015066 <_dtoa_r+0xb2e>
 8014dcc:	2300      	movs	r3, #0
 8014dce:	4631      	mov	r1, r6
 8014dd0:	220a      	movs	r2, #10
 8014dd2:	4620      	mov	r0, r4
 8014dd4:	f000 ff10 	bl	8015bf8 <__multadd>
 8014dd8:	9b02      	ldr	r3, [sp, #8]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	4606      	mov	r6, r0
 8014dde:	dc4f      	bgt.n	8014e80 <_dtoa_r+0x948>
 8014de0:	9b06      	ldr	r3, [sp, #24]
 8014de2:	2b02      	cmp	r3, #2
 8014de4:	dd4c      	ble.n	8014e80 <_dtoa_r+0x948>
 8014de6:	e011      	b.n	8014e0c <_dtoa_r+0x8d4>
 8014de8:	d0c9      	beq.n	8014d7e <_dtoa_r+0x846>
 8014dea:	9a05      	ldr	r2, [sp, #20]
 8014dec:	331c      	adds	r3, #28
 8014dee:	441a      	add	r2, r3
 8014df0:	9205      	str	r2, [sp, #20]
 8014df2:	441d      	add	r5, r3
 8014df4:	4498      	add	r8, r3
 8014df6:	e7c2      	b.n	8014d7e <_dtoa_r+0x846>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	e7f6      	b.n	8014dea <_dtoa_r+0x8b2>
 8014dfc:	f1b9 0f00 	cmp.w	r9, #0
 8014e00:	dc38      	bgt.n	8014e74 <_dtoa_r+0x93c>
 8014e02:	9b06      	ldr	r3, [sp, #24]
 8014e04:	2b02      	cmp	r3, #2
 8014e06:	dd35      	ble.n	8014e74 <_dtoa_r+0x93c>
 8014e08:	f8cd 9008 	str.w	r9, [sp, #8]
 8014e0c:	9b02      	ldr	r3, [sp, #8]
 8014e0e:	b963      	cbnz	r3, 8014e2a <_dtoa_r+0x8f2>
 8014e10:	4639      	mov	r1, r7
 8014e12:	2205      	movs	r2, #5
 8014e14:	4620      	mov	r0, r4
 8014e16:	f000 feef 	bl	8015bf8 <__multadd>
 8014e1a:	4601      	mov	r1, r0
 8014e1c:	4607      	mov	r7, r0
 8014e1e:	9804      	ldr	r0, [sp, #16]
 8014e20:	f001 f8f2 	bl	8016008 <__mcmp>
 8014e24:	2800      	cmp	r0, #0
 8014e26:	f73f adcc 	bgt.w	80149c2 <_dtoa_r+0x48a>
 8014e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e2c:	465d      	mov	r5, fp
 8014e2e:	ea6f 0a03 	mvn.w	sl, r3
 8014e32:	f04f 0900 	mov.w	r9, #0
 8014e36:	4639      	mov	r1, r7
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f000 fec6 	bl	8015bca <_Bfree>
 8014e3e:	2e00      	cmp	r6, #0
 8014e40:	f43f aeb7 	beq.w	8014bb2 <_dtoa_r+0x67a>
 8014e44:	f1b9 0f00 	cmp.w	r9, #0
 8014e48:	d005      	beq.n	8014e56 <_dtoa_r+0x91e>
 8014e4a:	45b1      	cmp	r9, r6
 8014e4c:	d003      	beq.n	8014e56 <_dtoa_r+0x91e>
 8014e4e:	4649      	mov	r1, r9
 8014e50:	4620      	mov	r0, r4
 8014e52:	f000 feba 	bl	8015bca <_Bfree>
 8014e56:	4631      	mov	r1, r6
 8014e58:	4620      	mov	r0, r4
 8014e5a:	f000 feb6 	bl	8015bca <_Bfree>
 8014e5e:	e6a8      	b.n	8014bb2 <_dtoa_r+0x67a>
 8014e60:	2700      	movs	r7, #0
 8014e62:	463e      	mov	r6, r7
 8014e64:	e7e1      	b.n	8014e2a <_dtoa_r+0x8f2>
 8014e66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014e6a:	463e      	mov	r6, r7
 8014e6c:	e5a9      	b.n	80149c2 <_dtoa_r+0x48a>
 8014e6e:	bf00      	nop
 8014e70:	40240000 	.word	0x40240000
 8014e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e76:	f8cd 9008 	str.w	r9, [sp, #8]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f000 80fa 	beq.w	8015074 <_dtoa_r+0xb3c>
 8014e80:	2d00      	cmp	r5, #0
 8014e82:	dd05      	ble.n	8014e90 <_dtoa_r+0x958>
 8014e84:	4631      	mov	r1, r6
 8014e86:	462a      	mov	r2, r5
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f001 f869 	bl	8015f60 <__lshift>
 8014e8e:	4606      	mov	r6, r0
 8014e90:	9b07      	ldr	r3, [sp, #28]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d04c      	beq.n	8014f30 <_dtoa_r+0x9f8>
 8014e96:	6871      	ldr	r1, [r6, #4]
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f000 fe62 	bl	8015b62 <_Balloc>
 8014e9e:	6932      	ldr	r2, [r6, #16]
 8014ea0:	3202      	adds	r2, #2
 8014ea2:	4605      	mov	r5, r0
 8014ea4:	0092      	lsls	r2, r2, #2
 8014ea6:	f106 010c 	add.w	r1, r6, #12
 8014eaa:	300c      	adds	r0, #12
 8014eac:	f000 fe4e 	bl	8015b4c <memcpy>
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	4629      	mov	r1, r5
 8014eb4:	4620      	mov	r0, r4
 8014eb6:	f001 f853 	bl	8015f60 <__lshift>
 8014eba:	9b00      	ldr	r3, [sp, #0]
 8014ebc:	f8cd b014 	str.w	fp, [sp, #20]
 8014ec0:	f003 0301 	and.w	r3, r3, #1
 8014ec4:	46b1      	mov	r9, r6
 8014ec6:	9307      	str	r3, [sp, #28]
 8014ec8:	4606      	mov	r6, r0
 8014eca:	4639      	mov	r1, r7
 8014ecc:	9804      	ldr	r0, [sp, #16]
 8014ece:	f7ff faa7 	bl	8014420 <quorem>
 8014ed2:	4649      	mov	r1, r9
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014eda:	9804      	ldr	r0, [sp, #16]
 8014edc:	f001 f894 	bl	8016008 <__mcmp>
 8014ee0:	4632      	mov	r2, r6
 8014ee2:	9000      	str	r0, [sp, #0]
 8014ee4:	4639      	mov	r1, r7
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f001 f8a8 	bl	801603c <__mdiff>
 8014eec:	68c3      	ldr	r3, [r0, #12]
 8014eee:	4602      	mov	r2, r0
 8014ef0:	bb03      	cbnz	r3, 8014f34 <_dtoa_r+0x9fc>
 8014ef2:	4601      	mov	r1, r0
 8014ef4:	9008      	str	r0, [sp, #32]
 8014ef6:	9804      	ldr	r0, [sp, #16]
 8014ef8:	f001 f886 	bl	8016008 <__mcmp>
 8014efc:	9a08      	ldr	r2, [sp, #32]
 8014efe:	4603      	mov	r3, r0
 8014f00:	4611      	mov	r1, r2
 8014f02:	4620      	mov	r0, r4
 8014f04:	9308      	str	r3, [sp, #32]
 8014f06:	f000 fe60 	bl	8015bca <_Bfree>
 8014f0a:	9b08      	ldr	r3, [sp, #32]
 8014f0c:	b9a3      	cbnz	r3, 8014f38 <_dtoa_r+0xa00>
 8014f0e:	9a06      	ldr	r2, [sp, #24]
 8014f10:	b992      	cbnz	r2, 8014f38 <_dtoa_r+0xa00>
 8014f12:	9a07      	ldr	r2, [sp, #28]
 8014f14:	b982      	cbnz	r2, 8014f38 <_dtoa_r+0xa00>
 8014f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014f1a:	d029      	beq.n	8014f70 <_dtoa_r+0xa38>
 8014f1c:	9b00      	ldr	r3, [sp, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	dd01      	ble.n	8014f26 <_dtoa_r+0x9ee>
 8014f22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014f26:	9b05      	ldr	r3, [sp, #20]
 8014f28:	1c5d      	adds	r5, r3, #1
 8014f2a:	f883 8000 	strb.w	r8, [r3]
 8014f2e:	e782      	b.n	8014e36 <_dtoa_r+0x8fe>
 8014f30:	4630      	mov	r0, r6
 8014f32:	e7c2      	b.n	8014eba <_dtoa_r+0x982>
 8014f34:	2301      	movs	r3, #1
 8014f36:	e7e3      	b.n	8014f00 <_dtoa_r+0x9c8>
 8014f38:	9a00      	ldr	r2, [sp, #0]
 8014f3a:	2a00      	cmp	r2, #0
 8014f3c:	db04      	blt.n	8014f48 <_dtoa_r+0xa10>
 8014f3e:	d125      	bne.n	8014f8c <_dtoa_r+0xa54>
 8014f40:	9a06      	ldr	r2, [sp, #24]
 8014f42:	bb1a      	cbnz	r2, 8014f8c <_dtoa_r+0xa54>
 8014f44:	9a07      	ldr	r2, [sp, #28]
 8014f46:	bb0a      	cbnz	r2, 8014f8c <_dtoa_r+0xa54>
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	ddec      	ble.n	8014f26 <_dtoa_r+0x9ee>
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	9904      	ldr	r1, [sp, #16]
 8014f50:	4620      	mov	r0, r4
 8014f52:	f001 f805 	bl	8015f60 <__lshift>
 8014f56:	4639      	mov	r1, r7
 8014f58:	9004      	str	r0, [sp, #16]
 8014f5a:	f001 f855 	bl	8016008 <__mcmp>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	dc03      	bgt.n	8014f6a <_dtoa_r+0xa32>
 8014f62:	d1e0      	bne.n	8014f26 <_dtoa_r+0x9ee>
 8014f64:	f018 0f01 	tst.w	r8, #1
 8014f68:	d0dd      	beq.n	8014f26 <_dtoa_r+0x9ee>
 8014f6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014f6e:	d1d8      	bne.n	8014f22 <_dtoa_r+0x9ea>
 8014f70:	9b05      	ldr	r3, [sp, #20]
 8014f72:	9a05      	ldr	r2, [sp, #20]
 8014f74:	1c5d      	adds	r5, r3, #1
 8014f76:	2339      	movs	r3, #57	; 0x39
 8014f78:	7013      	strb	r3, [r2, #0]
 8014f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f7e:	2b39      	cmp	r3, #57	; 0x39
 8014f80:	f105 32ff 	add.w	r2, r5, #4294967295
 8014f84:	d04f      	beq.n	8015026 <_dtoa_r+0xaee>
 8014f86:	3301      	adds	r3, #1
 8014f88:	7013      	strb	r3, [r2, #0]
 8014f8a:	e754      	b.n	8014e36 <_dtoa_r+0x8fe>
 8014f8c:	9a05      	ldr	r2, [sp, #20]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	f102 0501 	add.w	r5, r2, #1
 8014f94:	dd06      	ble.n	8014fa4 <_dtoa_r+0xa6c>
 8014f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014f9a:	d0e9      	beq.n	8014f70 <_dtoa_r+0xa38>
 8014f9c:	f108 0801 	add.w	r8, r8, #1
 8014fa0:	9b05      	ldr	r3, [sp, #20]
 8014fa2:	e7c2      	b.n	8014f2a <_dtoa_r+0x9f2>
 8014fa4:	9a02      	ldr	r2, [sp, #8]
 8014fa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014faa:	eba5 030b 	sub.w	r3, r5, fp
 8014fae:	4293      	cmp	r3, r2
 8014fb0:	d021      	beq.n	8014ff6 <_dtoa_r+0xabe>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	220a      	movs	r2, #10
 8014fb6:	9904      	ldr	r1, [sp, #16]
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f000 fe1d 	bl	8015bf8 <__multadd>
 8014fbe:	45b1      	cmp	r9, r6
 8014fc0:	9004      	str	r0, [sp, #16]
 8014fc2:	f04f 0300 	mov.w	r3, #0
 8014fc6:	f04f 020a 	mov.w	r2, #10
 8014fca:	4649      	mov	r1, r9
 8014fcc:	4620      	mov	r0, r4
 8014fce:	d105      	bne.n	8014fdc <_dtoa_r+0xaa4>
 8014fd0:	f000 fe12 	bl	8015bf8 <__multadd>
 8014fd4:	4681      	mov	r9, r0
 8014fd6:	4606      	mov	r6, r0
 8014fd8:	9505      	str	r5, [sp, #20]
 8014fda:	e776      	b.n	8014eca <_dtoa_r+0x992>
 8014fdc:	f000 fe0c 	bl	8015bf8 <__multadd>
 8014fe0:	4631      	mov	r1, r6
 8014fe2:	4681      	mov	r9, r0
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	220a      	movs	r2, #10
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f000 fe05 	bl	8015bf8 <__multadd>
 8014fee:	4606      	mov	r6, r0
 8014ff0:	e7f2      	b.n	8014fd8 <_dtoa_r+0xaa0>
 8014ff2:	f04f 0900 	mov.w	r9, #0
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	9904      	ldr	r1, [sp, #16]
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f000 ffb0 	bl	8015f60 <__lshift>
 8015000:	4639      	mov	r1, r7
 8015002:	9004      	str	r0, [sp, #16]
 8015004:	f001 f800 	bl	8016008 <__mcmp>
 8015008:	2800      	cmp	r0, #0
 801500a:	dcb6      	bgt.n	8014f7a <_dtoa_r+0xa42>
 801500c:	d102      	bne.n	8015014 <_dtoa_r+0xadc>
 801500e:	f018 0f01 	tst.w	r8, #1
 8015012:	d1b2      	bne.n	8014f7a <_dtoa_r+0xa42>
 8015014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015018:	2b30      	cmp	r3, #48	; 0x30
 801501a:	f105 32ff 	add.w	r2, r5, #4294967295
 801501e:	f47f af0a 	bne.w	8014e36 <_dtoa_r+0x8fe>
 8015022:	4615      	mov	r5, r2
 8015024:	e7f6      	b.n	8015014 <_dtoa_r+0xadc>
 8015026:	4593      	cmp	fp, r2
 8015028:	d105      	bne.n	8015036 <_dtoa_r+0xafe>
 801502a:	2331      	movs	r3, #49	; 0x31
 801502c:	f10a 0a01 	add.w	sl, sl, #1
 8015030:	f88b 3000 	strb.w	r3, [fp]
 8015034:	e6ff      	b.n	8014e36 <_dtoa_r+0x8fe>
 8015036:	4615      	mov	r5, r2
 8015038:	e79f      	b.n	8014f7a <_dtoa_r+0xa42>
 801503a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80150a0 <_dtoa_r+0xb68>
 801503e:	e007      	b.n	8015050 <_dtoa_r+0xb18>
 8015040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015042:	f8df b060 	ldr.w	fp, [pc, #96]	; 80150a4 <_dtoa_r+0xb6c>
 8015046:	b11b      	cbz	r3, 8015050 <_dtoa_r+0xb18>
 8015048:	f10b 0308 	add.w	r3, fp, #8
 801504c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801504e:	6013      	str	r3, [r2, #0]
 8015050:	4658      	mov	r0, fp
 8015052:	b017      	add	sp, #92	; 0x5c
 8015054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015058:	9b06      	ldr	r3, [sp, #24]
 801505a:	2b01      	cmp	r3, #1
 801505c:	f77f ae35 	ble.w	8014cca <_dtoa_r+0x792>
 8015060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015062:	9307      	str	r3, [sp, #28]
 8015064:	e649      	b.n	8014cfa <_dtoa_r+0x7c2>
 8015066:	9b02      	ldr	r3, [sp, #8]
 8015068:	2b00      	cmp	r3, #0
 801506a:	dc03      	bgt.n	8015074 <_dtoa_r+0xb3c>
 801506c:	9b06      	ldr	r3, [sp, #24]
 801506e:	2b02      	cmp	r3, #2
 8015070:	f73f aecc 	bgt.w	8014e0c <_dtoa_r+0x8d4>
 8015074:	465d      	mov	r5, fp
 8015076:	4639      	mov	r1, r7
 8015078:	9804      	ldr	r0, [sp, #16]
 801507a:	f7ff f9d1 	bl	8014420 <quorem>
 801507e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015082:	f805 8b01 	strb.w	r8, [r5], #1
 8015086:	9a02      	ldr	r2, [sp, #8]
 8015088:	eba5 030b 	sub.w	r3, r5, fp
 801508c:	429a      	cmp	r2, r3
 801508e:	ddb0      	ble.n	8014ff2 <_dtoa_r+0xaba>
 8015090:	2300      	movs	r3, #0
 8015092:	220a      	movs	r2, #10
 8015094:	9904      	ldr	r1, [sp, #16]
 8015096:	4620      	mov	r0, r4
 8015098:	f000 fdae 	bl	8015bf8 <__multadd>
 801509c:	9004      	str	r0, [sp, #16]
 801509e:	e7ea      	b.n	8015076 <_dtoa_r+0xb3e>
 80150a0:	08017a1b 	.word	0x08017a1b
 80150a4:	08017878 	.word	0x08017878

080150a8 <__sflush_r>:
 80150a8:	898a      	ldrh	r2, [r1, #12]
 80150aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ae:	4605      	mov	r5, r0
 80150b0:	0710      	lsls	r0, r2, #28
 80150b2:	460c      	mov	r4, r1
 80150b4:	d458      	bmi.n	8015168 <__sflush_r+0xc0>
 80150b6:	684b      	ldr	r3, [r1, #4]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	dc05      	bgt.n	80150c8 <__sflush_r+0x20>
 80150bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80150be:	2b00      	cmp	r3, #0
 80150c0:	dc02      	bgt.n	80150c8 <__sflush_r+0x20>
 80150c2:	2000      	movs	r0, #0
 80150c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150ca:	2e00      	cmp	r6, #0
 80150cc:	d0f9      	beq.n	80150c2 <__sflush_r+0x1a>
 80150ce:	2300      	movs	r3, #0
 80150d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80150d4:	682f      	ldr	r7, [r5, #0]
 80150d6:	6a21      	ldr	r1, [r4, #32]
 80150d8:	602b      	str	r3, [r5, #0]
 80150da:	d032      	beq.n	8015142 <__sflush_r+0x9a>
 80150dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80150de:	89a3      	ldrh	r3, [r4, #12]
 80150e0:	075a      	lsls	r2, r3, #29
 80150e2:	d505      	bpl.n	80150f0 <__sflush_r+0x48>
 80150e4:	6863      	ldr	r3, [r4, #4]
 80150e6:	1ac0      	subs	r0, r0, r3
 80150e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80150ea:	b10b      	cbz	r3, 80150f0 <__sflush_r+0x48>
 80150ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80150ee:	1ac0      	subs	r0, r0, r3
 80150f0:	2300      	movs	r3, #0
 80150f2:	4602      	mov	r2, r0
 80150f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150f6:	6a21      	ldr	r1, [r4, #32]
 80150f8:	4628      	mov	r0, r5
 80150fa:	47b0      	blx	r6
 80150fc:	1c43      	adds	r3, r0, #1
 80150fe:	89a3      	ldrh	r3, [r4, #12]
 8015100:	d106      	bne.n	8015110 <__sflush_r+0x68>
 8015102:	6829      	ldr	r1, [r5, #0]
 8015104:	291d      	cmp	r1, #29
 8015106:	d848      	bhi.n	801519a <__sflush_r+0xf2>
 8015108:	4a29      	ldr	r2, [pc, #164]	; (80151b0 <__sflush_r+0x108>)
 801510a:	40ca      	lsrs	r2, r1
 801510c:	07d6      	lsls	r6, r2, #31
 801510e:	d544      	bpl.n	801519a <__sflush_r+0xf2>
 8015110:	2200      	movs	r2, #0
 8015112:	6062      	str	r2, [r4, #4]
 8015114:	04d9      	lsls	r1, r3, #19
 8015116:	6922      	ldr	r2, [r4, #16]
 8015118:	6022      	str	r2, [r4, #0]
 801511a:	d504      	bpl.n	8015126 <__sflush_r+0x7e>
 801511c:	1c42      	adds	r2, r0, #1
 801511e:	d101      	bne.n	8015124 <__sflush_r+0x7c>
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	b903      	cbnz	r3, 8015126 <__sflush_r+0x7e>
 8015124:	6560      	str	r0, [r4, #84]	; 0x54
 8015126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015128:	602f      	str	r7, [r5, #0]
 801512a:	2900      	cmp	r1, #0
 801512c:	d0c9      	beq.n	80150c2 <__sflush_r+0x1a>
 801512e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015132:	4299      	cmp	r1, r3
 8015134:	d002      	beq.n	801513c <__sflush_r+0x94>
 8015136:	4628      	mov	r0, r5
 8015138:	f001 f920 	bl	801637c <_free_r>
 801513c:	2000      	movs	r0, #0
 801513e:	6360      	str	r0, [r4, #52]	; 0x34
 8015140:	e7c0      	b.n	80150c4 <__sflush_r+0x1c>
 8015142:	2301      	movs	r3, #1
 8015144:	4628      	mov	r0, r5
 8015146:	47b0      	blx	r6
 8015148:	1c41      	adds	r1, r0, #1
 801514a:	d1c8      	bne.n	80150de <__sflush_r+0x36>
 801514c:	682b      	ldr	r3, [r5, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d0c5      	beq.n	80150de <__sflush_r+0x36>
 8015152:	2b1d      	cmp	r3, #29
 8015154:	d001      	beq.n	801515a <__sflush_r+0xb2>
 8015156:	2b16      	cmp	r3, #22
 8015158:	d101      	bne.n	801515e <__sflush_r+0xb6>
 801515a:	602f      	str	r7, [r5, #0]
 801515c:	e7b1      	b.n	80150c2 <__sflush_r+0x1a>
 801515e:	89a3      	ldrh	r3, [r4, #12]
 8015160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015164:	81a3      	strh	r3, [r4, #12]
 8015166:	e7ad      	b.n	80150c4 <__sflush_r+0x1c>
 8015168:	690f      	ldr	r7, [r1, #16]
 801516a:	2f00      	cmp	r7, #0
 801516c:	d0a9      	beq.n	80150c2 <__sflush_r+0x1a>
 801516e:	0793      	lsls	r3, r2, #30
 8015170:	680e      	ldr	r6, [r1, #0]
 8015172:	bf08      	it	eq
 8015174:	694b      	ldreq	r3, [r1, #20]
 8015176:	600f      	str	r7, [r1, #0]
 8015178:	bf18      	it	ne
 801517a:	2300      	movne	r3, #0
 801517c:	eba6 0807 	sub.w	r8, r6, r7
 8015180:	608b      	str	r3, [r1, #8]
 8015182:	f1b8 0f00 	cmp.w	r8, #0
 8015186:	dd9c      	ble.n	80150c2 <__sflush_r+0x1a>
 8015188:	4643      	mov	r3, r8
 801518a:	463a      	mov	r2, r7
 801518c:	6a21      	ldr	r1, [r4, #32]
 801518e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015190:	4628      	mov	r0, r5
 8015192:	47b0      	blx	r6
 8015194:	2800      	cmp	r0, #0
 8015196:	dc06      	bgt.n	80151a6 <__sflush_r+0xfe>
 8015198:	89a3      	ldrh	r3, [r4, #12]
 801519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801519e:	81a3      	strh	r3, [r4, #12]
 80151a0:	f04f 30ff 	mov.w	r0, #4294967295
 80151a4:	e78e      	b.n	80150c4 <__sflush_r+0x1c>
 80151a6:	4407      	add	r7, r0
 80151a8:	eba8 0800 	sub.w	r8, r8, r0
 80151ac:	e7e9      	b.n	8015182 <__sflush_r+0xda>
 80151ae:	bf00      	nop
 80151b0:	20400001 	.word	0x20400001

080151b4 <_fflush_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	690b      	ldr	r3, [r1, #16]
 80151b8:	4605      	mov	r5, r0
 80151ba:	460c      	mov	r4, r1
 80151bc:	b1db      	cbz	r3, 80151f6 <_fflush_r+0x42>
 80151be:	b118      	cbz	r0, 80151c8 <_fflush_r+0x14>
 80151c0:	6983      	ldr	r3, [r0, #24]
 80151c2:	b90b      	cbnz	r3, 80151c8 <_fflush_r+0x14>
 80151c4:	f000 f860 	bl	8015288 <__sinit>
 80151c8:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <_fflush_r+0x48>)
 80151ca:	429c      	cmp	r4, r3
 80151cc:	d109      	bne.n	80151e2 <_fflush_r+0x2e>
 80151ce:	686c      	ldr	r4, [r5, #4]
 80151d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151d4:	b17b      	cbz	r3, 80151f6 <_fflush_r+0x42>
 80151d6:	4621      	mov	r1, r4
 80151d8:	4628      	mov	r0, r5
 80151da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151de:	f7ff bf63 	b.w	80150a8 <__sflush_r>
 80151e2:	4b07      	ldr	r3, [pc, #28]	; (8015200 <_fflush_r+0x4c>)
 80151e4:	429c      	cmp	r4, r3
 80151e6:	d101      	bne.n	80151ec <_fflush_r+0x38>
 80151e8:	68ac      	ldr	r4, [r5, #8]
 80151ea:	e7f1      	b.n	80151d0 <_fflush_r+0x1c>
 80151ec:	4b05      	ldr	r3, [pc, #20]	; (8015204 <_fflush_r+0x50>)
 80151ee:	429c      	cmp	r4, r3
 80151f0:	bf08      	it	eq
 80151f2:	68ec      	ldreq	r4, [r5, #12]
 80151f4:	e7ec      	b.n	80151d0 <_fflush_r+0x1c>
 80151f6:	2000      	movs	r0, #0
 80151f8:	bd38      	pop	{r3, r4, r5, pc}
 80151fa:	bf00      	nop
 80151fc:	080178a8 	.word	0x080178a8
 8015200:	080178c8 	.word	0x080178c8
 8015204:	08017888 	.word	0x08017888

08015208 <std>:
 8015208:	2300      	movs	r3, #0
 801520a:	b510      	push	{r4, lr}
 801520c:	4604      	mov	r4, r0
 801520e:	e9c0 3300 	strd	r3, r3, [r0]
 8015212:	6083      	str	r3, [r0, #8]
 8015214:	8181      	strh	r1, [r0, #12]
 8015216:	6643      	str	r3, [r0, #100]	; 0x64
 8015218:	81c2      	strh	r2, [r0, #14]
 801521a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801521e:	6183      	str	r3, [r0, #24]
 8015220:	4619      	mov	r1, r3
 8015222:	2208      	movs	r2, #8
 8015224:	305c      	adds	r0, #92	; 0x5c
 8015226:	f7fd f9b7 	bl	8012598 <memset>
 801522a:	4b05      	ldr	r3, [pc, #20]	; (8015240 <std+0x38>)
 801522c:	6263      	str	r3, [r4, #36]	; 0x24
 801522e:	4b05      	ldr	r3, [pc, #20]	; (8015244 <std+0x3c>)
 8015230:	62a3      	str	r3, [r4, #40]	; 0x28
 8015232:	4b05      	ldr	r3, [pc, #20]	; (8015248 <std+0x40>)
 8015234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015236:	4b05      	ldr	r3, [pc, #20]	; (801524c <std+0x44>)
 8015238:	6224      	str	r4, [r4, #32]
 801523a:	6323      	str	r3, [r4, #48]	; 0x30
 801523c:	bd10      	pop	{r4, pc}
 801523e:	bf00      	nop
 8015240:	08013425 	.word	0x08013425
 8015244:	0801344b 	.word	0x0801344b
 8015248:	08013483 	.word	0x08013483
 801524c:	080134a7 	.word	0x080134a7

08015250 <_cleanup_r>:
 8015250:	4901      	ldr	r1, [pc, #4]	; (8015258 <_cleanup_r+0x8>)
 8015252:	f000 b885 	b.w	8015360 <_fwalk_reent>
 8015256:	bf00      	nop
 8015258:	080151b5 	.word	0x080151b5

0801525c <__sfmoreglue>:
 801525c:	b570      	push	{r4, r5, r6, lr}
 801525e:	1e4a      	subs	r2, r1, #1
 8015260:	2568      	movs	r5, #104	; 0x68
 8015262:	4355      	muls	r5, r2
 8015264:	460e      	mov	r6, r1
 8015266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801526a:	f001 f8d5 	bl	8016418 <_malloc_r>
 801526e:	4604      	mov	r4, r0
 8015270:	b140      	cbz	r0, 8015284 <__sfmoreglue+0x28>
 8015272:	2100      	movs	r1, #0
 8015274:	e9c0 1600 	strd	r1, r6, [r0]
 8015278:	300c      	adds	r0, #12
 801527a:	60a0      	str	r0, [r4, #8]
 801527c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015280:	f7fd f98a 	bl	8012598 <memset>
 8015284:	4620      	mov	r0, r4
 8015286:	bd70      	pop	{r4, r5, r6, pc}

08015288 <__sinit>:
 8015288:	6983      	ldr	r3, [r0, #24]
 801528a:	b510      	push	{r4, lr}
 801528c:	4604      	mov	r4, r0
 801528e:	bb33      	cbnz	r3, 80152de <__sinit+0x56>
 8015290:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015294:	6503      	str	r3, [r0, #80]	; 0x50
 8015296:	4b12      	ldr	r3, [pc, #72]	; (80152e0 <__sinit+0x58>)
 8015298:	4a12      	ldr	r2, [pc, #72]	; (80152e4 <__sinit+0x5c>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	6282      	str	r2, [r0, #40]	; 0x28
 801529e:	4298      	cmp	r0, r3
 80152a0:	bf04      	itt	eq
 80152a2:	2301      	moveq	r3, #1
 80152a4:	6183      	streq	r3, [r0, #24]
 80152a6:	f000 f81f 	bl	80152e8 <__sfp>
 80152aa:	6060      	str	r0, [r4, #4]
 80152ac:	4620      	mov	r0, r4
 80152ae:	f000 f81b 	bl	80152e8 <__sfp>
 80152b2:	60a0      	str	r0, [r4, #8]
 80152b4:	4620      	mov	r0, r4
 80152b6:	f000 f817 	bl	80152e8 <__sfp>
 80152ba:	2200      	movs	r2, #0
 80152bc:	60e0      	str	r0, [r4, #12]
 80152be:	2104      	movs	r1, #4
 80152c0:	6860      	ldr	r0, [r4, #4]
 80152c2:	f7ff ffa1 	bl	8015208 <std>
 80152c6:	2201      	movs	r2, #1
 80152c8:	2109      	movs	r1, #9
 80152ca:	68a0      	ldr	r0, [r4, #8]
 80152cc:	f7ff ff9c 	bl	8015208 <std>
 80152d0:	2202      	movs	r2, #2
 80152d2:	2112      	movs	r1, #18
 80152d4:	68e0      	ldr	r0, [r4, #12]
 80152d6:	f7ff ff97 	bl	8015208 <std>
 80152da:	2301      	movs	r3, #1
 80152dc:	61a3      	str	r3, [r4, #24]
 80152de:	bd10      	pop	{r4, pc}
 80152e0:	080177e8 	.word	0x080177e8
 80152e4:	08015251 	.word	0x08015251

080152e8 <__sfp>:
 80152e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ea:	4b1b      	ldr	r3, [pc, #108]	; (8015358 <__sfp+0x70>)
 80152ec:	681e      	ldr	r6, [r3, #0]
 80152ee:	69b3      	ldr	r3, [r6, #24]
 80152f0:	4607      	mov	r7, r0
 80152f2:	b913      	cbnz	r3, 80152fa <__sfp+0x12>
 80152f4:	4630      	mov	r0, r6
 80152f6:	f7ff ffc7 	bl	8015288 <__sinit>
 80152fa:	3648      	adds	r6, #72	; 0x48
 80152fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015300:	3b01      	subs	r3, #1
 8015302:	d503      	bpl.n	801530c <__sfp+0x24>
 8015304:	6833      	ldr	r3, [r6, #0]
 8015306:	b133      	cbz	r3, 8015316 <__sfp+0x2e>
 8015308:	6836      	ldr	r6, [r6, #0]
 801530a:	e7f7      	b.n	80152fc <__sfp+0x14>
 801530c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015310:	b16d      	cbz	r5, 801532e <__sfp+0x46>
 8015312:	3468      	adds	r4, #104	; 0x68
 8015314:	e7f4      	b.n	8015300 <__sfp+0x18>
 8015316:	2104      	movs	r1, #4
 8015318:	4638      	mov	r0, r7
 801531a:	f7ff ff9f 	bl	801525c <__sfmoreglue>
 801531e:	6030      	str	r0, [r6, #0]
 8015320:	2800      	cmp	r0, #0
 8015322:	d1f1      	bne.n	8015308 <__sfp+0x20>
 8015324:	230c      	movs	r3, #12
 8015326:	603b      	str	r3, [r7, #0]
 8015328:	4604      	mov	r4, r0
 801532a:	4620      	mov	r0, r4
 801532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801532e:	4b0b      	ldr	r3, [pc, #44]	; (801535c <__sfp+0x74>)
 8015330:	6665      	str	r5, [r4, #100]	; 0x64
 8015332:	e9c4 5500 	strd	r5, r5, [r4]
 8015336:	60a5      	str	r5, [r4, #8]
 8015338:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801533c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015340:	2208      	movs	r2, #8
 8015342:	4629      	mov	r1, r5
 8015344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015348:	f7fd f926 	bl	8012598 <memset>
 801534c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015354:	e7e9      	b.n	801532a <__sfp+0x42>
 8015356:	bf00      	nop
 8015358:	080177e8 	.word	0x080177e8
 801535c:	ffff0001 	.word	0xffff0001

08015360 <_fwalk_reent>:
 8015360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015364:	4680      	mov	r8, r0
 8015366:	4689      	mov	r9, r1
 8015368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801536c:	2600      	movs	r6, #0
 801536e:	b914      	cbnz	r4, 8015376 <_fwalk_reent+0x16>
 8015370:	4630      	mov	r0, r6
 8015372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015376:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801537a:	3f01      	subs	r7, #1
 801537c:	d501      	bpl.n	8015382 <_fwalk_reent+0x22>
 801537e:	6824      	ldr	r4, [r4, #0]
 8015380:	e7f5      	b.n	801536e <_fwalk_reent+0xe>
 8015382:	89ab      	ldrh	r3, [r5, #12]
 8015384:	2b01      	cmp	r3, #1
 8015386:	d907      	bls.n	8015398 <_fwalk_reent+0x38>
 8015388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801538c:	3301      	adds	r3, #1
 801538e:	d003      	beq.n	8015398 <_fwalk_reent+0x38>
 8015390:	4629      	mov	r1, r5
 8015392:	4640      	mov	r0, r8
 8015394:	47c8      	blx	r9
 8015396:	4306      	orrs	r6, r0
 8015398:	3568      	adds	r5, #104	; 0x68
 801539a:	e7ee      	b.n	801537a <_fwalk_reent+0x1a>

0801539c <rshift>:
 801539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801539e:	6906      	ldr	r6, [r0, #16]
 80153a0:	114b      	asrs	r3, r1, #5
 80153a2:	429e      	cmp	r6, r3
 80153a4:	f100 0414 	add.w	r4, r0, #20
 80153a8:	dd30      	ble.n	801540c <rshift+0x70>
 80153aa:	f011 011f 	ands.w	r1, r1, #31
 80153ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80153b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80153b6:	d108      	bne.n	80153ca <rshift+0x2e>
 80153b8:	4621      	mov	r1, r4
 80153ba:	42b2      	cmp	r2, r6
 80153bc:	460b      	mov	r3, r1
 80153be:	d211      	bcs.n	80153e4 <rshift+0x48>
 80153c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80153c4:	f841 3b04 	str.w	r3, [r1], #4
 80153c8:	e7f7      	b.n	80153ba <rshift+0x1e>
 80153ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80153ce:	f1c1 0c20 	rsb	ip, r1, #32
 80153d2:	40cd      	lsrs	r5, r1
 80153d4:	3204      	adds	r2, #4
 80153d6:	4623      	mov	r3, r4
 80153d8:	42b2      	cmp	r2, r6
 80153da:	4617      	mov	r7, r2
 80153dc:	d30c      	bcc.n	80153f8 <rshift+0x5c>
 80153de:	601d      	str	r5, [r3, #0]
 80153e0:	b105      	cbz	r5, 80153e4 <rshift+0x48>
 80153e2:	3304      	adds	r3, #4
 80153e4:	1b1a      	subs	r2, r3, r4
 80153e6:	42a3      	cmp	r3, r4
 80153e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80153ec:	bf08      	it	eq
 80153ee:	2300      	moveq	r3, #0
 80153f0:	6102      	str	r2, [r0, #16]
 80153f2:	bf08      	it	eq
 80153f4:	6143      	streq	r3, [r0, #20]
 80153f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153f8:	683f      	ldr	r7, [r7, #0]
 80153fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80153fe:	433d      	orrs	r5, r7
 8015400:	f843 5b04 	str.w	r5, [r3], #4
 8015404:	f852 5b04 	ldr.w	r5, [r2], #4
 8015408:	40cd      	lsrs	r5, r1
 801540a:	e7e5      	b.n	80153d8 <rshift+0x3c>
 801540c:	4623      	mov	r3, r4
 801540e:	e7e9      	b.n	80153e4 <rshift+0x48>

08015410 <__hexdig_fun>:
 8015410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015414:	2b09      	cmp	r3, #9
 8015416:	d802      	bhi.n	801541e <__hexdig_fun+0xe>
 8015418:	3820      	subs	r0, #32
 801541a:	b2c0      	uxtb	r0, r0
 801541c:	4770      	bx	lr
 801541e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015422:	2b05      	cmp	r3, #5
 8015424:	d801      	bhi.n	801542a <__hexdig_fun+0x1a>
 8015426:	3847      	subs	r0, #71	; 0x47
 8015428:	e7f7      	b.n	801541a <__hexdig_fun+0xa>
 801542a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801542e:	2b05      	cmp	r3, #5
 8015430:	d801      	bhi.n	8015436 <__hexdig_fun+0x26>
 8015432:	3827      	subs	r0, #39	; 0x27
 8015434:	e7f1      	b.n	801541a <__hexdig_fun+0xa>
 8015436:	2000      	movs	r0, #0
 8015438:	4770      	bx	lr

0801543a <__gethex>:
 801543a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801543e:	b08b      	sub	sp, #44	; 0x2c
 8015440:	468a      	mov	sl, r1
 8015442:	9002      	str	r0, [sp, #8]
 8015444:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015446:	9306      	str	r3, [sp, #24]
 8015448:	4690      	mov	r8, r2
 801544a:	f000 fadf 	bl	8015a0c <__localeconv_l>
 801544e:	6803      	ldr	r3, [r0, #0]
 8015450:	9303      	str	r3, [sp, #12]
 8015452:	4618      	mov	r0, r3
 8015454:	f7ea fed4 	bl	8000200 <strlen>
 8015458:	9b03      	ldr	r3, [sp, #12]
 801545a:	9001      	str	r0, [sp, #4]
 801545c:	4403      	add	r3, r0
 801545e:	f04f 0b00 	mov.w	fp, #0
 8015462:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015466:	9307      	str	r3, [sp, #28]
 8015468:	f8da 3000 	ldr.w	r3, [sl]
 801546c:	3302      	adds	r3, #2
 801546e:	461f      	mov	r7, r3
 8015470:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015474:	2830      	cmp	r0, #48	; 0x30
 8015476:	d06c      	beq.n	8015552 <__gethex+0x118>
 8015478:	f7ff ffca 	bl	8015410 <__hexdig_fun>
 801547c:	4604      	mov	r4, r0
 801547e:	2800      	cmp	r0, #0
 8015480:	d16a      	bne.n	8015558 <__gethex+0x11e>
 8015482:	9a01      	ldr	r2, [sp, #4]
 8015484:	9903      	ldr	r1, [sp, #12]
 8015486:	4638      	mov	r0, r7
 8015488:	f001 fe08 	bl	801709c <strncmp>
 801548c:	2800      	cmp	r0, #0
 801548e:	d166      	bne.n	801555e <__gethex+0x124>
 8015490:	9b01      	ldr	r3, [sp, #4]
 8015492:	5cf8      	ldrb	r0, [r7, r3]
 8015494:	18fe      	adds	r6, r7, r3
 8015496:	f7ff ffbb 	bl	8015410 <__hexdig_fun>
 801549a:	2800      	cmp	r0, #0
 801549c:	d062      	beq.n	8015564 <__gethex+0x12a>
 801549e:	4633      	mov	r3, r6
 80154a0:	7818      	ldrb	r0, [r3, #0]
 80154a2:	2830      	cmp	r0, #48	; 0x30
 80154a4:	461f      	mov	r7, r3
 80154a6:	f103 0301 	add.w	r3, r3, #1
 80154aa:	d0f9      	beq.n	80154a0 <__gethex+0x66>
 80154ac:	f7ff ffb0 	bl	8015410 <__hexdig_fun>
 80154b0:	fab0 f580 	clz	r5, r0
 80154b4:	096d      	lsrs	r5, r5, #5
 80154b6:	4634      	mov	r4, r6
 80154b8:	f04f 0b01 	mov.w	fp, #1
 80154bc:	463a      	mov	r2, r7
 80154be:	4616      	mov	r6, r2
 80154c0:	3201      	adds	r2, #1
 80154c2:	7830      	ldrb	r0, [r6, #0]
 80154c4:	f7ff ffa4 	bl	8015410 <__hexdig_fun>
 80154c8:	2800      	cmp	r0, #0
 80154ca:	d1f8      	bne.n	80154be <__gethex+0x84>
 80154cc:	9a01      	ldr	r2, [sp, #4]
 80154ce:	9903      	ldr	r1, [sp, #12]
 80154d0:	4630      	mov	r0, r6
 80154d2:	f001 fde3 	bl	801709c <strncmp>
 80154d6:	b950      	cbnz	r0, 80154ee <__gethex+0xb4>
 80154d8:	b954      	cbnz	r4, 80154f0 <__gethex+0xb6>
 80154da:	9b01      	ldr	r3, [sp, #4]
 80154dc:	18f4      	adds	r4, r6, r3
 80154de:	4622      	mov	r2, r4
 80154e0:	4616      	mov	r6, r2
 80154e2:	3201      	adds	r2, #1
 80154e4:	7830      	ldrb	r0, [r6, #0]
 80154e6:	f7ff ff93 	bl	8015410 <__hexdig_fun>
 80154ea:	2800      	cmp	r0, #0
 80154ec:	d1f8      	bne.n	80154e0 <__gethex+0xa6>
 80154ee:	b10c      	cbz	r4, 80154f4 <__gethex+0xba>
 80154f0:	1ba4      	subs	r4, r4, r6
 80154f2:	00a4      	lsls	r4, r4, #2
 80154f4:	7833      	ldrb	r3, [r6, #0]
 80154f6:	2b50      	cmp	r3, #80	; 0x50
 80154f8:	d001      	beq.n	80154fe <__gethex+0xc4>
 80154fa:	2b70      	cmp	r3, #112	; 0x70
 80154fc:	d140      	bne.n	8015580 <__gethex+0x146>
 80154fe:	7873      	ldrb	r3, [r6, #1]
 8015500:	2b2b      	cmp	r3, #43	; 0x2b
 8015502:	d031      	beq.n	8015568 <__gethex+0x12e>
 8015504:	2b2d      	cmp	r3, #45	; 0x2d
 8015506:	d033      	beq.n	8015570 <__gethex+0x136>
 8015508:	1c71      	adds	r1, r6, #1
 801550a:	f04f 0900 	mov.w	r9, #0
 801550e:	7808      	ldrb	r0, [r1, #0]
 8015510:	f7ff ff7e 	bl	8015410 <__hexdig_fun>
 8015514:	1e43      	subs	r3, r0, #1
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b18      	cmp	r3, #24
 801551a:	d831      	bhi.n	8015580 <__gethex+0x146>
 801551c:	f1a0 0210 	sub.w	r2, r0, #16
 8015520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015524:	f7ff ff74 	bl	8015410 <__hexdig_fun>
 8015528:	1e43      	subs	r3, r0, #1
 801552a:	b2db      	uxtb	r3, r3
 801552c:	2b18      	cmp	r3, #24
 801552e:	d922      	bls.n	8015576 <__gethex+0x13c>
 8015530:	f1b9 0f00 	cmp.w	r9, #0
 8015534:	d000      	beq.n	8015538 <__gethex+0xfe>
 8015536:	4252      	negs	r2, r2
 8015538:	4414      	add	r4, r2
 801553a:	f8ca 1000 	str.w	r1, [sl]
 801553e:	b30d      	cbz	r5, 8015584 <__gethex+0x14a>
 8015540:	f1bb 0f00 	cmp.w	fp, #0
 8015544:	bf0c      	ite	eq
 8015546:	2706      	moveq	r7, #6
 8015548:	2700      	movne	r7, #0
 801554a:	4638      	mov	r0, r7
 801554c:	b00b      	add	sp, #44	; 0x2c
 801554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015552:	f10b 0b01 	add.w	fp, fp, #1
 8015556:	e78a      	b.n	801546e <__gethex+0x34>
 8015558:	2500      	movs	r5, #0
 801555a:	462c      	mov	r4, r5
 801555c:	e7ae      	b.n	80154bc <__gethex+0x82>
 801555e:	463e      	mov	r6, r7
 8015560:	2501      	movs	r5, #1
 8015562:	e7c7      	b.n	80154f4 <__gethex+0xba>
 8015564:	4604      	mov	r4, r0
 8015566:	e7fb      	b.n	8015560 <__gethex+0x126>
 8015568:	f04f 0900 	mov.w	r9, #0
 801556c:	1cb1      	adds	r1, r6, #2
 801556e:	e7ce      	b.n	801550e <__gethex+0xd4>
 8015570:	f04f 0901 	mov.w	r9, #1
 8015574:	e7fa      	b.n	801556c <__gethex+0x132>
 8015576:	230a      	movs	r3, #10
 8015578:	fb03 0202 	mla	r2, r3, r2, r0
 801557c:	3a10      	subs	r2, #16
 801557e:	e7cf      	b.n	8015520 <__gethex+0xe6>
 8015580:	4631      	mov	r1, r6
 8015582:	e7da      	b.n	801553a <__gethex+0x100>
 8015584:	1bf3      	subs	r3, r6, r7
 8015586:	3b01      	subs	r3, #1
 8015588:	4629      	mov	r1, r5
 801558a:	2b07      	cmp	r3, #7
 801558c:	dc49      	bgt.n	8015622 <__gethex+0x1e8>
 801558e:	9802      	ldr	r0, [sp, #8]
 8015590:	f000 fae7 	bl	8015b62 <_Balloc>
 8015594:	9b01      	ldr	r3, [sp, #4]
 8015596:	f100 0914 	add.w	r9, r0, #20
 801559a:	f04f 0b00 	mov.w	fp, #0
 801559e:	f1c3 0301 	rsb	r3, r3, #1
 80155a2:	4605      	mov	r5, r0
 80155a4:	f8cd 9010 	str.w	r9, [sp, #16]
 80155a8:	46da      	mov	sl, fp
 80155aa:	9308      	str	r3, [sp, #32]
 80155ac:	42b7      	cmp	r7, r6
 80155ae:	d33b      	bcc.n	8015628 <__gethex+0x1ee>
 80155b0:	9804      	ldr	r0, [sp, #16]
 80155b2:	f840 ab04 	str.w	sl, [r0], #4
 80155b6:	eba0 0009 	sub.w	r0, r0, r9
 80155ba:	1080      	asrs	r0, r0, #2
 80155bc:	6128      	str	r0, [r5, #16]
 80155be:	0147      	lsls	r7, r0, #5
 80155c0:	4650      	mov	r0, sl
 80155c2:	f000 fb92 	bl	8015cea <__hi0bits>
 80155c6:	f8d8 6000 	ldr.w	r6, [r8]
 80155ca:	1a3f      	subs	r7, r7, r0
 80155cc:	42b7      	cmp	r7, r6
 80155ce:	dd64      	ble.n	801569a <__gethex+0x260>
 80155d0:	1bbf      	subs	r7, r7, r6
 80155d2:	4639      	mov	r1, r7
 80155d4:	4628      	mov	r0, r5
 80155d6:	f000 fea1 	bl	801631c <__any_on>
 80155da:	4682      	mov	sl, r0
 80155dc:	b178      	cbz	r0, 80155fe <__gethex+0x1c4>
 80155de:	1e7b      	subs	r3, r7, #1
 80155e0:	1159      	asrs	r1, r3, #5
 80155e2:	f003 021f 	and.w	r2, r3, #31
 80155e6:	f04f 0a01 	mov.w	sl, #1
 80155ea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80155ee:	fa0a f202 	lsl.w	r2, sl, r2
 80155f2:	420a      	tst	r2, r1
 80155f4:	d003      	beq.n	80155fe <__gethex+0x1c4>
 80155f6:	4553      	cmp	r3, sl
 80155f8:	dc46      	bgt.n	8015688 <__gethex+0x24e>
 80155fa:	f04f 0a02 	mov.w	sl, #2
 80155fe:	4639      	mov	r1, r7
 8015600:	4628      	mov	r0, r5
 8015602:	f7ff fecb 	bl	801539c <rshift>
 8015606:	443c      	add	r4, r7
 8015608:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801560c:	42a3      	cmp	r3, r4
 801560e:	da52      	bge.n	80156b6 <__gethex+0x27c>
 8015610:	4629      	mov	r1, r5
 8015612:	9802      	ldr	r0, [sp, #8]
 8015614:	f000 fad9 	bl	8015bca <_Bfree>
 8015618:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801561a:	2300      	movs	r3, #0
 801561c:	6013      	str	r3, [r2, #0]
 801561e:	27a3      	movs	r7, #163	; 0xa3
 8015620:	e793      	b.n	801554a <__gethex+0x110>
 8015622:	3101      	adds	r1, #1
 8015624:	105b      	asrs	r3, r3, #1
 8015626:	e7b0      	b.n	801558a <__gethex+0x150>
 8015628:	1e73      	subs	r3, r6, #1
 801562a:	9305      	str	r3, [sp, #20]
 801562c:	9a07      	ldr	r2, [sp, #28]
 801562e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015632:	4293      	cmp	r3, r2
 8015634:	d018      	beq.n	8015668 <__gethex+0x22e>
 8015636:	f1bb 0f20 	cmp.w	fp, #32
 801563a:	d107      	bne.n	801564c <__gethex+0x212>
 801563c:	9b04      	ldr	r3, [sp, #16]
 801563e:	f8c3 a000 	str.w	sl, [r3]
 8015642:	3304      	adds	r3, #4
 8015644:	f04f 0a00 	mov.w	sl, #0
 8015648:	9304      	str	r3, [sp, #16]
 801564a:	46d3      	mov	fp, sl
 801564c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015650:	f7ff fede 	bl	8015410 <__hexdig_fun>
 8015654:	f000 000f 	and.w	r0, r0, #15
 8015658:	fa00 f00b 	lsl.w	r0, r0, fp
 801565c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015660:	f10b 0b04 	add.w	fp, fp, #4
 8015664:	9b05      	ldr	r3, [sp, #20]
 8015666:	e00d      	b.n	8015684 <__gethex+0x24a>
 8015668:	9b05      	ldr	r3, [sp, #20]
 801566a:	9a08      	ldr	r2, [sp, #32]
 801566c:	4413      	add	r3, r2
 801566e:	42bb      	cmp	r3, r7
 8015670:	d3e1      	bcc.n	8015636 <__gethex+0x1fc>
 8015672:	4618      	mov	r0, r3
 8015674:	9a01      	ldr	r2, [sp, #4]
 8015676:	9903      	ldr	r1, [sp, #12]
 8015678:	9309      	str	r3, [sp, #36]	; 0x24
 801567a:	f001 fd0f 	bl	801709c <strncmp>
 801567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015680:	2800      	cmp	r0, #0
 8015682:	d1d8      	bne.n	8015636 <__gethex+0x1fc>
 8015684:	461e      	mov	r6, r3
 8015686:	e791      	b.n	80155ac <__gethex+0x172>
 8015688:	1eb9      	subs	r1, r7, #2
 801568a:	4628      	mov	r0, r5
 801568c:	f000 fe46 	bl	801631c <__any_on>
 8015690:	2800      	cmp	r0, #0
 8015692:	d0b2      	beq.n	80155fa <__gethex+0x1c0>
 8015694:	f04f 0a03 	mov.w	sl, #3
 8015698:	e7b1      	b.n	80155fe <__gethex+0x1c4>
 801569a:	da09      	bge.n	80156b0 <__gethex+0x276>
 801569c:	1bf7      	subs	r7, r6, r7
 801569e:	4629      	mov	r1, r5
 80156a0:	463a      	mov	r2, r7
 80156a2:	9802      	ldr	r0, [sp, #8]
 80156a4:	f000 fc5c 	bl	8015f60 <__lshift>
 80156a8:	1be4      	subs	r4, r4, r7
 80156aa:	4605      	mov	r5, r0
 80156ac:	f100 0914 	add.w	r9, r0, #20
 80156b0:	f04f 0a00 	mov.w	sl, #0
 80156b4:	e7a8      	b.n	8015608 <__gethex+0x1ce>
 80156b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80156ba:	42a0      	cmp	r0, r4
 80156bc:	dd6a      	ble.n	8015794 <__gethex+0x35a>
 80156be:	1b04      	subs	r4, r0, r4
 80156c0:	42a6      	cmp	r6, r4
 80156c2:	dc2e      	bgt.n	8015722 <__gethex+0x2e8>
 80156c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80156c8:	2b02      	cmp	r3, #2
 80156ca:	d022      	beq.n	8015712 <__gethex+0x2d8>
 80156cc:	2b03      	cmp	r3, #3
 80156ce:	d024      	beq.n	801571a <__gethex+0x2e0>
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d115      	bne.n	8015700 <__gethex+0x2c6>
 80156d4:	42a6      	cmp	r6, r4
 80156d6:	d113      	bne.n	8015700 <__gethex+0x2c6>
 80156d8:	2e01      	cmp	r6, #1
 80156da:	dc0b      	bgt.n	80156f4 <__gethex+0x2ba>
 80156dc:	9a06      	ldr	r2, [sp, #24]
 80156de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80156e2:	6013      	str	r3, [r2, #0]
 80156e4:	2301      	movs	r3, #1
 80156e6:	612b      	str	r3, [r5, #16]
 80156e8:	f8c9 3000 	str.w	r3, [r9]
 80156ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156ee:	2762      	movs	r7, #98	; 0x62
 80156f0:	601d      	str	r5, [r3, #0]
 80156f2:	e72a      	b.n	801554a <__gethex+0x110>
 80156f4:	1e71      	subs	r1, r6, #1
 80156f6:	4628      	mov	r0, r5
 80156f8:	f000 fe10 	bl	801631c <__any_on>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d1ed      	bne.n	80156dc <__gethex+0x2a2>
 8015700:	4629      	mov	r1, r5
 8015702:	9802      	ldr	r0, [sp, #8]
 8015704:	f000 fa61 	bl	8015bca <_Bfree>
 8015708:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801570a:	2300      	movs	r3, #0
 801570c:	6013      	str	r3, [r2, #0]
 801570e:	2750      	movs	r7, #80	; 0x50
 8015710:	e71b      	b.n	801554a <__gethex+0x110>
 8015712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015714:	2b00      	cmp	r3, #0
 8015716:	d0e1      	beq.n	80156dc <__gethex+0x2a2>
 8015718:	e7f2      	b.n	8015700 <__gethex+0x2c6>
 801571a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1dd      	bne.n	80156dc <__gethex+0x2a2>
 8015720:	e7ee      	b.n	8015700 <__gethex+0x2c6>
 8015722:	1e67      	subs	r7, r4, #1
 8015724:	f1ba 0f00 	cmp.w	sl, #0
 8015728:	d131      	bne.n	801578e <__gethex+0x354>
 801572a:	b127      	cbz	r7, 8015736 <__gethex+0x2fc>
 801572c:	4639      	mov	r1, r7
 801572e:	4628      	mov	r0, r5
 8015730:	f000 fdf4 	bl	801631c <__any_on>
 8015734:	4682      	mov	sl, r0
 8015736:	117a      	asrs	r2, r7, #5
 8015738:	2301      	movs	r3, #1
 801573a:	f007 071f 	and.w	r7, r7, #31
 801573e:	fa03 f707 	lsl.w	r7, r3, r7
 8015742:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015746:	4621      	mov	r1, r4
 8015748:	421f      	tst	r7, r3
 801574a:	4628      	mov	r0, r5
 801574c:	bf18      	it	ne
 801574e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015752:	1b36      	subs	r6, r6, r4
 8015754:	f7ff fe22 	bl	801539c <rshift>
 8015758:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801575c:	2702      	movs	r7, #2
 801575e:	f1ba 0f00 	cmp.w	sl, #0
 8015762:	d048      	beq.n	80157f6 <__gethex+0x3bc>
 8015764:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015768:	2b02      	cmp	r3, #2
 801576a:	d015      	beq.n	8015798 <__gethex+0x35e>
 801576c:	2b03      	cmp	r3, #3
 801576e:	d017      	beq.n	80157a0 <__gethex+0x366>
 8015770:	2b01      	cmp	r3, #1
 8015772:	d109      	bne.n	8015788 <__gethex+0x34e>
 8015774:	f01a 0f02 	tst.w	sl, #2
 8015778:	d006      	beq.n	8015788 <__gethex+0x34e>
 801577a:	f8d9 3000 	ldr.w	r3, [r9]
 801577e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015782:	f01a 0f01 	tst.w	sl, #1
 8015786:	d10e      	bne.n	80157a6 <__gethex+0x36c>
 8015788:	f047 0710 	orr.w	r7, r7, #16
 801578c:	e033      	b.n	80157f6 <__gethex+0x3bc>
 801578e:	f04f 0a01 	mov.w	sl, #1
 8015792:	e7d0      	b.n	8015736 <__gethex+0x2fc>
 8015794:	2701      	movs	r7, #1
 8015796:	e7e2      	b.n	801575e <__gethex+0x324>
 8015798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801579a:	f1c3 0301 	rsb	r3, r3, #1
 801579e:	9315      	str	r3, [sp, #84]	; 0x54
 80157a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d0f0      	beq.n	8015788 <__gethex+0x34e>
 80157a6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80157aa:	f105 0314 	add.w	r3, r5, #20
 80157ae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80157b2:	eb03 010a 	add.w	r1, r3, sl
 80157b6:	f04f 0c00 	mov.w	ip, #0
 80157ba:	4618      	mov	r0, r3
 80157bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80157c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80157c4:	d01c      	beq.n	8015800 <__gethex+0x3c6>
 80157c6:	3201      	adds	r2, #1
 80157c8:	6002      	str	r2, [r0, #0]
 80157ca:	2f02      	cmp	r7, #2
 80157cc:	f105 0314 	add.w	r3, r5, #20
 80157d0:	d138      	bne.n	8015844 <__gethex+0x40a>
 80157d2:	f8d8 2000 	ldr.w	r2, [r8]
 80157d6:	3a01      	subs	r2, #1
 80157d8:	42b2      	cmp	r2, r6
 80157da:	d10a      	bne.n	80157f2 <__gethex+0x3b8>
 80157dc:	1171      	asrs	r1, r6, #5
 80157de:	2201      	movs	r2, #1
 80157e0:	f006 061f 	and.w	r6, r6, #31
 80157e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80157e8:	fa02 f606 	lsl.w	r6, r2, r6
 80157ec:	421e      	tst	r6, r3
 80157ee:	bf18      	it	ne
 80157f0:	4617      	movne	r7, r2
 80157f2:	f047 0720 	orr.w	r7, r7, #32
 80157f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157f8:	601d      	str	r5, [r3, #0]
 80157fa:	9b06      	ldr	r3, [sp, #24]
 80157fc:	601c      	str	r4, [r3, #0]
 80157fe:	e6a4      	b.n	801554a <__gethex+0x110>
 8015800:	4299      	cmp	r1, r3
 8015802:	f843 cc04 	str.w	ip, [r3, #-4]
 8015806:	d8d8      	bhi.n	80157ba <__gethex+0x380>
 8015808:	68ab      	ldr	r3, [r5, #8]
 801580a:	4599      	cmp	r9, r3
 801580c:	db12      	blt.n	8015834 <__gethex+0x3fa>
 801580e:	6869      	ldr	r1, [r5, #4]
 8015810:	9802      	ldr	r0, [sp, #8]
 8015812:	3101      	adds	r1, #1
 8015814:	f000 f9a5 	bl	8015b62 <_Balloc>
 8015818:	692a      	ldr	r2, [r5, #16]
 801581a:	3202      	adds	r2, #2
 801581c:	f105 010c 	add.w	r1, r5, #12
 8015820:	4683      	mov	fp, r0
 8015822:	0092      	lsls	r2, r2, #2
 8015824:	300c      	adds	r0, #12
 8015826:	f000 f991 	bl	8015b4c <memcpy>
 801582a:	4629      	mov	r1, r5
 801582c:	9802      	ldr	r0, [sp, #8]
 801582e:	f000 f9cc 	bl	8015bca <_Bfree>
 8015832:	465d      	mov	r5, fp
 8015834:	692b      	ldr	r3, [r5, #16]
 8015836:	1c5a      	adds	r2, r3, #1
 8015838:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801583c:	612a      	str	r2, [r5, #16]
 801583e:	2201      	movs	r2, #1
 8015840:	615a      	str	r2, [r3, #20]
 8015842:	e7c2      	b.n	80157ca <__gethex+0x390>
 8015844:	692a      	ldr	r2, [r5, #16]
 8015846:	454a      	cmp	r2, r9
 8015848:	dd0b      	ble.n	8015862 <__gethex+0x428>
 801584a:	2101      	movs	r1, #1
 801584c:	4628      	mov	r0, r5
 801584e:	f7ff fda5 	bl	801539c <rshift>
 8015852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015856:	3401      	adds	r4, #1
 8015858:	42a3      	cmp	r3, r4
 801585a:	f6ff aed9 	blt.w	8015610 <__gethex+0x1d6>
 801585e:	2701      	movs	r7, #1
 8015860:	e7c7      	b.n	80157f2 <__gethex+0x3b8>
 8015862:	f016 061f 	ands.w	r6, r6, #31
 8015866:	d0fa      	beq.n	801585e <__gethex+0x424>
 8015868:	449a      	add	sl, r3
 801586a:	f1c6 0620 	rsb	r6, r6, #32
 801586e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015872:	f000 fa3a 	bl	8015cea <__hi0bits>
 8015876:	42b0      	cmp	r0, r6
 8015878:	dbe7      	blt.n	801584a <__gethex+0x410>
 801587a:	e7f0      	b.n	801585e <__gethex+0x424>

0801587c <L_shift>:
 801587c:	f1c2 0208 	rsb	r2, r2, #8
 8015880:	0092      	lsls	r2, r2, #2
 8015882:	b570      	push	{r4, r5, r6, lr}
 8015884:	f1c2 0620 	rsb	r6, r2, #32
 8015888:	6843      	ldr	r3, [r0, #4]
 801588a:	6804      	ldr	r4, [r0, #0]
 801588c:	fa03 f506 	lsl.w	r5, r3, r6
 8015890:	432c      	orrs	r4, r5
 8015892:	40d3      	lsrs	r3, r2
 8015894:	6004      	str	r4, [r0, #0]
 8015896:	f840 3f04 	str.w	r3, [r0, #4]!
 801589a:	4288      	cmp	r0, r1
 801589c:	d3f4      	bcc.n	8015888 <L_shift+0xc>
 801589e:	bd70      	pop	{r4, r5, r6, pc}

080158a0 <__match>:
 80158a0:	b530      	push	{r4, r5, lr}
 80158a2:	6803      	ldr	r3, [r0, #0]
 80158a4:	3301      	adds	r3, #1
 80158a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158aa:	b914      	cbnz	r4, 80158b2 <__match+0x12>
 80158ac:	6003      	str	r3, [r0, #0]
 80158ae:	2001      	movs	r0, #1
 80158b0:	bd30      	pop	{r4, r5, pc}
 80158b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80158ba:	2d19      	cmp	r5, #25
 80158bc:	bf98      	it	ls
 80158be:	3220      	addls	r2, #32
 80158c0:	42a2      	cmp	r2, r4
 80158c2:	d0f0      	beq.n	80158a6 <__match+0x6>
 80158c4:	2000      	movs	r0, #0
 80158c6:	e7f3      	b.n	80158b0 <__match+0x10>

080158c8 <__hexnan>:
 80158c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158cc:	680b      	ldr	r3, [r1, #0]
 80158ce:	6801      	ldr	r1, [r0, #0]
 80158d0:	115f      	asrs	r7, r3, #5
 80158d2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80158d6:	f013 031f 	ands.w	r3, r3, #31
 80158da:	b087      	sub	sp, #28
 80158dc:	bf18      	it	ne
 80158de:	3704      	addne	r7, #4
 80158e0:	2500      	movs	r5, #0
 80158e2:	1f3e      	subs	r6, r7, #4
 80158e4:	4682      	mov	sl, r0
 80158e6:	4690      	mov	r8, r2
 80158e8:	9301      	str	r3, [sp, #4]
 80158ea:	f847 5c04 	str.w	r5, [r7, #-4]
 80158ee:	46b1      	mov	r9, r6
 80158f0:	4634      	mov	r4, r6
 80158f2:	9502      	str	r5, [sp, #8]
 80158f4:	46ab      	mov	fp, r5
 80158f6:	784a      	ldrb	r2, [r1, #1]
 80158f8:	1c4b      	adds	r3, r1, #1
 80158fa:	9303      	str	r3, [sp, #12]
 80158fc:	b342      	cbz	r2, 8015950 <__hexnan+0x88>
 80158fe:	4610      	mov	r0, r2
 8015900:	9105      	str	r1, [sp, #20]
 8015902:	9204      	str	r2, [sp, #16]
 8015904:	f7ff fd84 	bl	8015410 <__hexdig_fun>
 8015908:	2800      	cmp	r0, #0
 801590a:	d143      	bne.n	8015994 <__hexnan+0xcc>
 801590c:	9a04      	ldr	r2, [sp, #16]
 801590e:	9905      	ldr	r1, [sp, #20]
 8015910:	2a20      	cmp	r2, #32
 8015912:	d818      	bhi.n	8015946 <__hexnan+0x7e>
 8015914:	9b02      	ldr	r3, [sp, #8]
 8015916:	459b      	cmp	fp, r3
 8015918:	dd13      	ble.n	8015942 <__hexnan+0x7a>
 801591a:	454c      	cmp	r4, r9
 801591c:	d206      	bcs.n	801592c <__hexnan+0x64>
 801591e:	2d07      	cmp	r5, #7
 8015920:	dc04      	bgt.n	801592c <__hexnan+0x64>
 8015922:	462a      	mov	r2, r5
 8015924:	4649      	mov	r1, r9
 8015926:	4620      	mov	r0, r4
 8015928:	f7ff ffa8 	bl	801587c <L_shift>
 801592c:	4544      	cmp	r4, r8
 801592e:	d944      	bls.n	80159ba <__hexnan+0xf2>
 8015930:	2300      	movs	r3, #0
 8015932:	f1a4 0904 	sub.w	r9, r4, #4
 8015936:	f844 3c04 	str.w	r3, [r4, #-4]
 801593a:	f8cd b008 	str.w	fp, [sp, #8]
 801593e:	464c      	mov	r4, r9
 8015940:	461d      	mov	r5, r3
 8015942:	9903      	ldr	r1, [sp, #12]
 8015944:	e7d7      	b.n	80158f6 <__hexnan+0x2e>
 8015946:	2a29      	cmp	r2, #41	; 0x29
 8015948:	d14a      	bne.n	80159e0 <__hexnan+0x118>
 801594a:	3102      	adds	r1, #2
 801594c:	f8ca 1000 	str.w	r1, [sl]
 8015950:	f1bb 0f00 	cmp.w	fp, #0
 8015954:	d044      	beq.n	80159e0 <__hexnan+0x118>
 8015956:	454c      	cmp	r4, r9
 8015958:	d206      	bcs.n	8015968 <__hexnan+0xa0>
 801595a:	2d07      	cmp	r5, #7
 801595c:	dc04      	bgt.n	8015968 <__hexnan+0xa0>
 801595e:	462a      	mov	r2, r5
 8015960:	4649      	mov	r1, r9
 8015962:	4620      	mov	r0, r4
 8015964:	f7ff ff8a 	bl	801587c <L_shift>
 8015968:	4544      	cmp	r4, r8
 801596a:	d928      	bls.n	80159be <__hexnan+0xf6>
 801596c:	4643      	mov	r3, r8
 801596e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015972:	f843 2b04 	str.w	r2, [r3], #4
 8015976:	42a6      	cmp	r6, r4
 8015978:	d2f9      	bcs.n	801596e <__hexnan+0xa6>
 801597a:	2200      	movs	r2, #0
 801597c:	f843 2b04 	str.w	r2, [r3], #4
 8015980:	429e      	cmp	r6, r3
 8015982:	d2fb      	bcs.n	801597c <__hexnan+0xb4>
 8015984:	6833      	ldr	r3, [r6, #0]
 8015986:	b91b      	cbnz	r3, 8015990 <__hexnan+0xc8>
 8015988:	4546      	cmp	r6, r8
 801598a:	d127      	bne.n	80159dc <__hexnan+0x114>
 801598c:	2301      	movs	r3, #1
 801598e:	6033      	str	r3, [r6, #0]
 8015990:	2005      	movs	r0, #5
 8015992:	e026      	b.n	80159e2 <__hexnan+0x11a>
 8015994:	3501      	adds	r5, #1
 8015996:	2d08      	cmp	r5, #8
 8015998:	f10b 0b01 	add.w	fp, fp, #1
 801599c:	dd06      	ble.n	80159ac <__hexnan+0xe4>
 801599e:	4544      	cmp	r4, r8
 80159a0:	d9cf      	bls.n	8015942 <__hexnan+0x7a>
 80159a2:	2300      	movs	r3, #0
 80159a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80159a8:	2501      	movs	r5, #1
 80159aa:	3c04      	subs	r4, #4
 80159ac:	6822      	ldr	r2, [r4, #0]
 80159ae:	f000 000f 	and.w	r0, r0, #15
 80159b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80159b6:	6020      	str	r0, [r4, #0]
 80159b8:	e7c3      	b.n	8015942 <__hexnan+0x7a>
 80159ba:	2508      	movs	r5, #8
 80159bc:	e7c1      	b.n	8015942 <__hexnan+0x7a>
 80159be:	9b01      	ldr	r3, [sp, #4]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d0df      	beq.n	8015984 <__hexnan+0xbc>
 80159c4:	f04f 32ff 	mov.w	r2, #4294967295
 80159c8:	f1c3 0320 	rsb	r3, r3, #32
 80159cc:	fa22 f303 	lsr.w	r3, r2, r3
 80159d0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80159d4:	401a      	ands	r2, r3
 80159d6:	f847 2c04 	str.w	r2, [r7, #-4]
 80159da:	e7d3      	b.n	8015984 <__hexnan+0xbc>
 80159dc:	3e04      	subs	r6, #4
 80159de:	e7d1      	b.n	8015984 <__hexnan+0xbc>
 80159e0:	2004      	movs	r0, #4
 80159e2:	b007      	add	sp, #28
 80159e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080159e8 <__locale_ctype_ptr_l>:
 80159e8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80159ec:	4770      	bx	lr
	...

080159f0 <__locale_ctype_ptr>:
 80159f0:	4b04      	ldr	r3, [pc, #16]	; (8015a04 <__locale_ctype_ptr+0x14>)
 80159f2:	4a05      	ldr	r2, [pc, #20]	; (8015a08 <__locale_ctype_ptr+0x18>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	6a1b      	ldr	r3, [r3, #32]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	bf08      	it	eq
 80159fc:	4613      	moveq	r3, r2
 80159fe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015a02:	4770      	bx	lr
 8015a04:	2000000c 	.word	0x2000000c
 8015a08:	20000070 	.word	0x20000070

08015a0c <__localeconv_l>:
 8015a0c:	30f0      	adds	r0, #240	; 0xf0
 8015a0e:	4770      	bx	lr

08015a10 <_localeconv_r>:
 8015a10:	4b04      	ldr	r3, [pc, #16]	; (8015a24 <_localeconv_r+0x14>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	6a18      	ldr	r0, [r3, #32]
 8015a16:	4b04      	ldr	r3, [pc, #16]	; (8015a28 <_localeconv_r+0x18>)
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	bf08      	it	eq
 8015a1c:	4618      	moveq	r0, r3
 8015a1e:	30f0      	adds	r0, #240	; 0xf0
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	2000000c 	.word	0x2000000c
 8015a28:	20000070 	.word	0x20000070

08015a2c <_lseek_r>:
 8015a2c:	b538      	push	{r3, r4, r5, lr}
 8015a2e:	4c07      	ldr	r4, [pc, #28]	; (8015a4c <_lseek_r+0x20>)
 8015a30:	4605      	mov	r5, r0
 8015a32:	4608      	mov	r0, r1
 8015a34:	4611      	mov	r1, r2
 8015a36:	2200      	movs	r2, #0
 8015a38:	6022      	str	r2, [r4, #0]
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	f7ef ff50 	bl	80058e0 <_lseek>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	d102      	bne.n	8015a4a <_lseek_r+0x1e>
 8015a44:	6823      	ldr	r3, [r4, #0]
 8015a46:	b103      	cbz	r3, 8015a4a <_lseek_r+0x1e>
 8015a48:	602b      	str	r3, [r5, #0]
 8015a4a:	bd38      	pop	{r3, r4, r5, pc}
 8015a4c:	2003b434 	.word	0x2003b434

08015a50 <__swhatbuf_r>:
 8015a50:	b570      	push	{r4, r5, r6, lr}
 8015a52:	460e      	mov	r6, r1
 8015a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a58:	2900      	cmp	r1, #0
 8015a5a:	b096      	sub	sp, #88	; 0x58
 8015a5c:	4614      	mov	r4, r2
 8015a5e:	461d      	mov	r5, r3
 8015a60:	da07      	bge.n	8015a72 <__swhatbuf_r+0x22>
 8015a62:	2300      	movs	r3, #0
 8015a64:	602b      	str	r3, [r5, #0]
 8015a66:	89b3      	ldrh	r3, [r6, #12]
 8015a68:	061a      	lsls	r2, r3, #24
 8015a6a:	d410      	bmi.n	8015a8e <__swhatbuf_r+0x3e>
 8015a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a70:	e00e      	b.n	8015a90 <__swhatbuf_r+0x40>
 8015a72:	466a      	mov	r2, sp
 8015a74:	f001 fbf8 	bl	8017268 <_fstat_r>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	dbf2      	blt.n	8015a62 <__swhatbuf_r+0x12>
 8015a7c:	9a01      	ldr	r2, [sp, #4]
 8015a7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a86:	425a      	negs	r2, r3
 8015a88:	415a      	adcs	r2, r3
 8015a8a:	602a      	str	r2, [r5, #0]
 8015a8c:	e7ee      	b.n	8015a6c <__swhatbuf_r+0x1c>
 8015a8e:	2340      	movs	r3, #64	; 0x40
 8015a90:	2000      	movs	r0, #0
 8015a92:	6023      	str	r3, [r4, #0]
 8015a94:	b016      	add	sp, #88	; 0x58
 8015a96:	bd70      	pop	{r4, r5, r6, pc}

08015a98 <__smakebuf_r>:
 8015a98:	898b      	ldrh	r3, [r1, #12]
 8015a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a9c:	079d      	lsls	r5, r3, #30
 8015a9e:	4606      	mov	r6, r0
 8015aa0:	460c      	mov	r4, r1
 8015aa2:	d507      	bpl.n	8015ab4 <__smakebuf_r+0x1c>
 8015aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015aa8:	6023      	str	r3, [r4, #0]
 8015aaa:	6123      	str	r3, [r4, #16]
 8015aac:	2301      	movs	r3, #1
 8015aae:	6163      	str	r3, [r4, #20]
 8015ab0:	b002      	add	sp, #8
 8015ab2:	bd70      	pop	{r4, r5, r6, pc}
 8015ab4:	ab01      	add	r3, sp, #4
 8015ab6:	466a      	mov	r2, sp
 8015ab8:	f7ff ffca 	bl	8015a50 <__swhatbuf_r>
 8015abc:	9900      	ldr	r1, [sp, #0]
 8015abe:	4605      	mov	r5, r0
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	f000 fca9 	bl	8016418 <_malloc_r>
 8015ac6:	b948      	cbnz	r0, 8015adc <__smakebuf_r+0x44>
 8015ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015acc:	059a      	lsls	r2, r3, #22
 8015ace:	d4ef      	bmi.n	8015ab0 <__smakebuf_r+0x18>
 8015ad0:	f023 0303 	bic.w	r3, r3, #3
 8015ad4:	f043 0302 	orr.w	r3, r3, #2
 8015ad8:	81a3      	strh	r3, [r4, #12]
 8015ada:	e7e3      	b.n	8015aa4 <__smakebuf_r+0xc>
 8015adc:	4b0d      	ldr	r3, [pc, #52]	; (8015b14 <__smakebuf_r+0x7c>)
 8015ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ae0:	89a3      	ldrh	r3, [r4, #12]
 8015ae2:	6020      	str	r0, [r4, #0]
 8015ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ae8:	81a3      	strh	r3, [r4, #12]
 8015aea:	9b00      	ldr	r3, [sp, #0]
 8015aec:	6163      	str	r3, [r4, #20]
 8015aee:	9b01      	ldr	r3, [sp, #4]
 8015af0:	6120      	str	r0, [r4, #16]
 8015af2:	b15b      	cbz	r3, 8015b0c <__smakebuf_r+0x74>
 8015af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015af8:	4630      	mov	r0, r6
 8015afa:	f001 fbc7 	bl	801728c <_isatty_r>
 8015afe:	b128      	cbz	r0, 8015b0c <__smakebuf_r+0x74>
 8015b00:	89a3      	ldrh	r3, [r4, #12]
 8015b02:	f023 0303 	bic.w	r3, r3, #3
 8015b06:	f043 0301 	orr.w	r3, r3, #1
 8015b0a:	81a3      	strh	r3, [r4, #12]
 8015b0c:	89a3      	ldrh	r3, [r4, #12]
 8015b0e:	431d      	orrs	r5, r3
 8015b10:	81a5      	strh	r5, [r4, #12]
 8015b12:	e7cd      	b.n	8015ab0 <__smakebuf_r+0x18>
 8015b14:	08015251 	.word	0x08015251

08015b18 <malloc>:
 8015b18:	4b02      	ldr	r3, [pc, #8]	; (8015b24 <malloc+0xc>)
 8015b1a:	4601      	mov	r1, r0
 8015b1c:	6818      	ldr	r0, [r3, #0]
 8015b1e:	f000 bc7b 	b.w	8016418 <_malloc_r>
 8015b22:	bf00      	nop
 8015b24:	2000000c 	.word	0x2000000c

08015b28 <__ascii_mbtowc>:
 8015b28:	b082      	sub	sp, #8
 8015b2a:	b901      	cbnz	r1, 8015b2e <__ascii_mbtowc+0x6>
 8015b2c:	a901      	add	r1, sp, #4
 8015b2e:	b142      	cbz	r2, 8015b42 <__ascii_mbtowc+0x1a>
 8015b30:	b14b      	cbz	r3, 8015b46 <__ascii_mbtowc+0x1e>
 8015b32:	7813      	ldrb	r3, [r2, #0]
 8015b34:	600b      	str	r3, [r1, #0]
 8015b36:	7812      	ldrb	r2, [r2, #0]
 8015b38:	1c10      	adds	r0, r2, #0
 8015b3a:	bf18      	it	ne
 8015b3c:	2001      	movne	r0, #1
 8015b3e:	b002      	add	sp, #8
 8015b40:	4770      	bx	lr
 8015b42:	4610      	mov	r0, r2
 8015b44:	e7fb      	b.n	8015b3e <__ascii_mbtowc+0x16>
 8015b46:	f06f 0001 	mvn.w	r0, #1
 8015b4a:	e7f8      	b.n	8015b3e <__ascii_mbtowc+0x16>

08015b4c <memcpy>:
 8015b4c:	b510      	push	{r4, lr}
 8015b4e:	1e43      	subs	r3, r0, #1
 8015b50:	440a      	add	r2, r1
 8015b52:	4291      	cmp	r1, r2
 8015b54:	d100      	bne.n	8015b58 <memcpy+0xc>
 8015b56:	bd10      	pop	{r4, pc}
 8015b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b60:	e7f7      	b.n	8015b52 <memcpy+0x6>

08015b62 <_Balloc>:
 8015b62:	b570      	push	{r4, r5, r6, lr}
 8015b64:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015b66:	4604      	mov	r4, r0
 8015b68:	460e      	mov	r6, r1
 8015b6a:	b93d      	cbnz	r5, 8015b7c <_Balloc+0x1a>
 8015b6c:	2010      	movs	r0, #16
 8015b6e:	f7ff ffd3 	bl	8015b18 <malloc>
 8015b72:	6260      	str	r0, [r4, #36]	; 0x24
 8015b74:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015b78:	6005      	str	r5, [r0, #0]
 8015b7a:	60c5      	str	r5, [r0, #12]
 8015b7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015b7e:	68eb      	ldr	r3, [r5, #12]
 8015b80:	b183      	cbz	r3, 8015ba4 <_Balloc+0x42>
 8015b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015b8a:	b9b8      	cbnz	r0, 8015bbc <_Balloc+0x5a>
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	fa01 f506 	lsl.w	r5, r1, r6
 8015b92:	1d6a      	adds	r2, r5, #5
 8015b94:	0092      	lsls	r2, r2, #2
 8015b96:	4620      	mov	r0, r4
 8015b98:	f000 fbe1 	bl	801635e <_calloc_r>
 8015b9c:	b160      	cbz	r0, 8015bb8 <_Balloc+0x56>
 8015b9e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015ba2:	e00e      	b.n	8015bc2 <_Balloc+0x60>
 8015ba4:	2221      	movs	r2, #33	; 0x21
 8015ba6:	2104      	movs	r1, #4
 8015ba8:	4620      	mov	r0, r4
 8015baa:	f000 fbd8 	bl	801635e <_calloc_r>
 8015bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bb0:	60e8      	str	r0, [r5, #12]
 8015bb2:	68db      	ldr	r3, [r3, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1e4      	bne.n	8015b82 <_Balloc+0x20>
 8015bb8:	2000      	movs	r0, #0
 8015bba:	bd70      	pop	{r4, r5, r6, pc}
 8015bbc:	6802      	ldr	r2, [r0, #0]
 8015bbe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bc8:	e7f7      	b.n	8015bba <_Balloc+0x58>

08015bca <_Bfree>:
 8015bca:	b570      	push	{r4, r5, r6, lr}
 8015bcc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015bce:	4606      	mov	r6, r0
 8015bd0:	460d      	mov	r5, r1
 8015bd2:	b93c      	cbnz	r4, 8015be4 <_Bfree+0x1a>
 8015bd4:	2010      	movs	r0, #16
 8015bd6:	f7ff ff9f 	bl	8015b18 <malloc>
 8015bda:	6270      	str	r0, [r6, #36]	; 0x24
 8015bdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015be0:	6004      	str	r4, [r0, #0]
 8015be2:	60c4      	str	r4, [r0, #12]
 8015be4:	b13d      	cbz	r5, 8015bf6 <_Bfree+0x2c>
 8015be6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015be8:	686a      	ldr	r2, [r5, #4]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015bf0:	6029      	str	r1, [r5, #0]
 8015bf2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015bf6:	bd70      	pop	{r4, r5, r6, pc}

08015bf8 <__multadd>:
 8015bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfc:	690d      	ldr	r5, [r1, #16]
 8015bfe:	461f      	mov	r7, r3
 8015c00:	4606      	mov	r6, r0
 8015c02:	460c      	mov	r4, r1
 8015c04:	f101 0c14 	add.w	ip, r1, #20
 8015c08:	2300      	movs	r3, #0
 8015c0a:	f8dc 0000 	ldr.w	r0, [ip]
 8015c0e:	b281      	uxth	r1, r0
 8015c10:	fb02 7101 	mla	r1, r2, r1, r7
 8015c14:	0c0f      	lsrs	r7, r1, #16
 8015c16:	0c00      	lsrs	r0, r0, #16
 8015c18:	fb02 7000 	mla	r0, r2, r0, r7
 8015c1c:	b289      	uxth	r1, r1
 8015c1e:	3301      	adds	r3, #1
 8015c20:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015c24:	429d      	cmp	r5, r3
 8015c26:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015c2a:	f84c 1b04 	str.w	r1, [ip], #4
 8015c2e:	dcec      	bgt.n	8015c0a <__multadd+0x12>
 8015c30:	b1d7      	cbz	r7, 8015c68 <__multadd+0x70>
 8015c32:	68a3      	ldr	r3, [r4, #8]
 8015c34:	42ab      	cmp	r3, r5
 8015c36:	dc12      	bgt.n	8015c5e <__multadd+0x66>
 8015c38:	6861      	ldr	r1, [r4, #4]
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	3101      	adds	r1, #1
 8015c3e:	f7ff ff90 	bl	8015b62 <_Balloc>
 8015c42:	6922      	ldr	r2, [r4, #16]
 8015c44:	3202      	adds	r2, #2
 8015c46:	f104 010c 	add.w	r1, r4, #12
 8015c4a:	4680      	mov	r8, r0
 8015c4c:	0092      	lsls	r2, r2, #2
 8015c4e:	300c      	adds	r0, #12
 8015c50:	f7ff ff7c 	bl	8015b4c <memcpy>
 8015c54:	4621      	mov	r1, r4
 8015c56:	4630      	mov	r0, r6
 8015c58:	f7ff ffb7 	bl	8015bca <_Bfree>
 8015c5c:	4644      	mov	r4, r8
 8015c5e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c62:	3501      	adds	r5, #1
 8015c64:	615f      	str	r7, [r3, #20]
 8015c66:	6125      	str	r5, [r4, #16]
 8015c68:	4620      	mov	r0, r4
 8015c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c6e <__s2b>:
 8015c6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c72:	460c      	mov	r4, r1
 8015c74:	4615      	mov	r5, r2
 8015c76:	461f      	mov	r7, r3
 8015c78:	2209      	movs	r2, #9
 8015c7a:	3308      	adds	r3, #8
 8015c7c:	4606      	mov	r6, r0
 8015c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c82:	2100      	movs	r1, #0
 8015c84:	2201      	movs	r2, #1
 8015c86:	429a      	cmp	r2, r3
 8015c88:	db20      	blt.n	8015ccc <__s2b+0x5e>
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	f7ff ff69 	bl	8015b62 <_Balloc>
 8015c90:	9b08      	ldr	r3, [sp, #32]
 8015c92:	6143      	str	r3, [r0, #20]
 8015c94:	2d09      	cmp	r5, #9
 8015c96:	f04f 0301 	mov.w	r3, #1
 8015c9a:	6103      	str	r3, [r0, #16]
 8015c9c:	dd19      	ble.n	8015cd2 <__s2b+0x64>
 8015c9e:	f104 0809 	add.w	r8, r4, #9
 8015ca2:	46c1      	mov	r9, r8
 8015ca4:	442c      	add	r4, r5
 8015ca6:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015caa:	4601      	mov	r1, r0
 8015cac:	3b30      	subs	r3, #48	; 0x30
 8015cae:	220a      	movs	r2, #10
 8015cb0:	4630      	mov	r0, r6
 8015cb2:	f7ff ffa1 	bl	8015bf8 <__multadd>
 8015cb6:	45a1      	cmp	r9, r4
 8015cb8:	d1f5      	bne.n	8015ca6 <__s2b+0x38>
 8015cba:	eb08 0405 	add.w	r4, r8, r5
 8015cbe:	3c08      	subs	r4, #8
 8015cc0:	1b2d      	subs	r5, r5, r4
 8015cc2:	1963      	adds	r3, r4, r5
 8015cc4:	42bb      	cmp	r3, r7
 8015cc6:	db07      	blt.n	8015cd8 <__s2b+0x6a>
 8015cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ccc:	0052      	lsls	r2, r2, #1
 8015cce:	3101      	adds	r1, #1
 8015cd0:	e7d9      	b.n	8015c86 <__s2b+0x18>
 8015cd2:	340a      	adds	r4, #10
 8015cd4:	2509      	movs	r5, #9
 8015cd6:	e7f3      	b.n	8015cc0 <__s2b+0x52>
 8015cd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015cdc:	4601      	mov	r1, r0
 8015cde:	3b30      	subs	r3, #48	; 0x30
 8015ce0:	220a      	movs	r2, #10
 8015ce2:	4630      	mov	r0, r6
 8015ce4:	f7ff ff88 	bl	8015bf8 <__multadd>
 8015ce8:	e7eb      	b.n	8015cc2 <__s2b+0x54>

08015cea <__hi0bits>:
 8015cea:	0c02      	lsrs	r2, r0, #16
 8015cec:	0412      	lsls	r2, r2, #16
 8015cee:	4603      	mov	r3, r0
 8015cf0:	b9b2      	cbnz	r2, 8015d20 <__hi0bits+0x36>
 8015cf2:	0403      	lsls	r3, r0, #16
 8015cf4:	2010      	movs	r0, #16
 8015cf6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015cfa:	bf04      	itt	eq
 8015cfc:	021b      	lsleq	r3, r3, #8
 8015cfe:	3008      	addeq	r0, #8
 8015d00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015d04:	bf04      	itt	eq
 8015d06:	011b      	lsleq	r3, r3, #4
 8015d08:	3004      	addeq	r0, #4
 8015d0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015d0e:	bf04      	itt	eq
 8015d10:	009b      	lsleq	r3, r3, #2
 8015d12:	3002      	addeq	r0, #2
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	db06      	blt.n	8015d26 <__hi0bits+0x3c>
 8015d18:	005b      	lsls	r3, r3, #1
 8015d1a:	d503      	bpl.n	8015d24 <__hi0bits+0x3a>
 8015d1c:	3001      	adds	r0, #1
 8015d1e:	4770      	bx	lr
 8015d20:	2000      	movs	r0, #0
 8015d22:	e7e8      	b.n	8015cf6 <__hi0bits+0xc>
 8015d24:	2020      	movs	r0, #32
 8015d26:	4770      	bx	lr

08015d28 <__lo0bits>:
 8015d28:	6803      	ldr	r3, [r0, #0]
 8015d2a:	f013 0207 	ands.w	r2, r3, #7
 8015d2e:	4601      	mov	r1, r0
 8015d30:	d00b      	beq.n	8015d4a <__lo0bits+0x22>
 8015d32:	07da      	lsls	r2, r3, #31
 8015d34:	d423      	bmi.n	8015d7e <__lo0bits+0x56>
 8015d36:	0798      	lsls	r0, r3, #30
 8015d38:	bf49      	itett	mi
 8015d3a:	085b      	lsrmi	r3, r3, #1
 8015d3c:	089b      	lsrpl	r3, r3, #2
 8015d3e:	2001      	movmi	r0, #1
 8015d40:	600b      	strmi	r3, [r1, #0]
 8015d42:	bf5c      	itt	pl
 8015d44:	600b      	strpl	r3, [r1, #0]
 8015d46:	2002      	movpl	r0, #2
 8015d48:	4770      	bx	lr
 8015d4a:	b298      	uxth	r0, r3
 8015d4c:	b9a8      	cbnz	r0, 8015d7a <__lo0bits+0x52>
 8015d4e:	0c1b      	lsrs	r3, r3, #16
 8015d50:	2010      	movs	r0, #16
 8015d52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015d56:	bf04      	itt	eq
 8015d58:	0a1b      	lsreq	r3, r3, #8
 8015d5a:	3008      	addeq	r0, #8
 8015d5c:	071a      	lsls	r2, r3, #28
 8015d5e:	bf04      	itt	eq
 8015d60:	091b      	lsreq	r3, r3, #4
 8015d62:	3004      	addeq	r0, #4
 8015d64:	079a      	lsls	r2, r3, #30
 8015d66:	bf04      	itt	eq
 8015d68:	089b      	lsreq	r3, r3, #2
 8015d6a:	3002      	addeq	r0, #2
 8015d6c:	07da      	lsls	r2, r3, #31
 8015d6e:	d402      	bmi.n	8015d76 <__lo0bits+0x4e>
 8015d70:	085b      	lsrs	r3, r3, #1
 8015d72:	d006      	beq.n	8015d82 <__lo0bits+0x5a>
 8015d74:	3001      	adds	r0, #1
 8015d76:	600b      	str	r3, [r1, #0]
 8015d78:	4770      	bx	lr
 8015d7a:	4610      	mov	r0, r2
 8015d7c:	e7e9      	b.n	8015d52 <__lo0bits+0x2a>
 8015d7e:	2000      	movs	r0, #0
 8015d80:	4770      	bx	lr
 8015d82:	2020      	movs	r0, #32
 8015d84:	4770      	bx	lr

08015d86 <__i2b>:
 8015d86:	b510      	push	{r4, lr}
 8015d88:	460c      	mov	r4, r1
 8015d8a:	2101      	movs	r1, #1
 8015d8c:	f7ff fee9 	bl	8015b62 <_Balloc>
 8015d90:	2201      	movs	r2, #1
 8015d92:	6144      	str	r4, [r0, #20]
 8015d94:	6102      	str	r2, [r0, #16]
 8015d96:	bd10      	pop	{r4, pc}

08015d98 <__multiply>:
 8015d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d9c:	4614      	mov	r4, r2
 8015d9e:	690a      	ldr	r2, [r1, #16]
 8015da0:	6923      	ldr	r3, [r4, #16]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	bfb8      	it	lt
 8015da6:	460b      	movlt	r3, r1
 8015da8:	4688      	mov	r8, r1
 8015daa:	bfbc      	itt	lt
 8015dac:	46a0      	movlt	r8, r4
 8015dae:	461c      	movlt	r4, r3
 8015db0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015db4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015db8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015dbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015dc0:	eb07 0609 	add.w	r6, r7, r9
 8015dc4:	42b3      	cmp	r3, r6
 8015dc6:	bfb8      	it	lt
 8015dc8:	3101      	addlt	r1, #1
 8015dca:	f7ff feca 	bl	8015b62 <_Balloc>
 8015dce:	f100 0514 	add.w	r5, r0, #20
 8015dd2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015dd6:	462b      	mov	r3, r5
 8015dd8:	2200      	movs	r2, #0
 8015dda:	4573      	cmp	r3, lr
 8015ddc:	d316      	bcc.n	8015e0c <__multiply+0x74>
 8015dde:	f104 0214 	add.w	r2, r4, #20
 8015de2:	f108 0114 	add.w	r1, r8, #20
 8015de6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015dea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	9b00      	ldr	r3, [sp, #0]
 8015df2:	9201      	str	r2, [sp, #4]
 8015df4:	4293      	cmp	r3, r2
 8015df6:	d80c      	bhi.n	8015e12 <__multiply+0x7a>
 8015df8:	2e00      	cmp	r6, #0
 8015dfa:	dd03      	ble.n	8015e04 <__multiply+0x6c>
 8015dfc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d05d      	beq.n	8015ec0 <__multiply+0x128>
 8015e04:	6106      	str	r6, [r0, #16]
 8015e06:	b003      	add	sp, #12
 8015e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0c:	f843 2b04 	str.w	r2, [r3], #4
 8015e10:	e7e3      	b.n	8015dda <__multiply+0x42>
 8015e12:	f8b2 b000 	ldrh.w	fp, [r2]
 8015e16:	f1bb 0f00 	cmp.w	fp, #0
 8015e1a:	d023      	beq.n	8015e64 <__multiply+0xcc>
 8015e1c:	4689      	mov	r9, r1
 8015e1e:	46ac      	mov	ip, r5
 8015e20:	f04f 0800 	mov.w	r8, #0
 8015e24:	f859 4b04 	ldr.w	r4, [r9], #4
 8015e28:	f8dc a000 	ldr.w	sl, [ip]
 8015e2c:	b2a3      	uxth	r3, r4
 8015e2e:	fa1f fa8a 	uxth.w	sl, sl
 8015e32:	fb0b a303 	mla	r3, fp, r3, sl
 8015e36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015e3a:	f8dc 4000 	ldr.w	r4, [ip]
 8015e3e:	4443      	add	r3, r8
 8015e40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015e44:	fb0b 840a 	mla	r4, fp, sl, r8
 8015e48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015e4c:	46e2      	mov	sl, ip
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015e54:	454f      	cmp	r7, r9
 8015e56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015e5a:	f84a 3b04 	str.w	r3, [sl], #4
 8015e5e:	d82b      	bhi.n	8015eb8 <__multiply+0x120>
 8015e60:	f8cc 8004 	str.w	r8, [ip, #4]
 8015e64:	9b01      	ldr	r3, [sp, #4]
 8015e66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015e6a:	3204      	adds	r2, #4
 8015e6c:	f1ba 0f00 	cmp.w	sl, #0
 8015e70:	d020      	beq.n	8015eb4 <__multiply+0x11c>
 8015e72:	682b      	ldr	r3, [r5, #0]
 8015e74:	4689      	mov	r9, r1
 8015e76:	46a8      	mov	r8, r5
 8015e78:	f04f 0b00 	mov.w	fp, #0
 8015e7c:	f8b9 c000 	ldrh.w	ip, [r9]
 8015e80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015e84:	fb0a 440c 	mla	r4, sl, ip, r4
 8015e88:	445c      	add	r4, fp
 8015e8a:	46c4      	mov	ip, r8
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015e92:	f84c 3b04 	str.w	r3, [ip], #4
 8015e96:	f859 3b04 	ldr.w	r3, [r9], #4
 8015e9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015e9e:	0c1b      	lsrs	r3, r3, #16
 8015ea0:	fb0a b303 	mla	r3, sl, r3, fp
 8015ea4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015ea8:	454f      	cmp	r7, r9
 8015eaa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015eae:	d805      	bhi.n	8015ebc <__multiply+0x124>
 8015eb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8015eb4:	3504      	adds	r5, #4
 8015eb6:	e79b      	b.n	8015df0 <__multiply+0x58>
 8015eb8:	46d4      	mov	ip, sl
 8015eba:	e7b3      	b.n	8015e24 <__multiply+0x8c>
 8015ebc:	46e0      	mov	r8, ip
 8015ebe:	e7dd      	b.n	8015e7c <__multiply+0xe4>
 8015ec0:	3e01      	subs	r6, #1
 8015ec2:	e799      	b.n	8015df8 <__multiply+0x60>

08015ec4 <__pow5mult>:
 8015ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ec8:	4615      	mov	r5, r2
 8015eca:	f012 0203 	ands.w	r2, r2, #3
 8015ece:	4606      	mov	r6, r0
 8015ed0:	460f      	mov	r7, r1
 8015ed2:	d007      	beq.n	8015ee4 <__pow5mult+0x20>
 8015ed4:	3a01      	subs	r2, #1
 8015ed6:	4c21      	ldr	r4, [pc, #132]	; (8015f5c <__pow5mult+0x98>)
 8015ed8:	2300      	movs	r3, #0
 8015eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015ede:	f7ff fe8b 	bl	8015bf8 <__multadd>
 8015ee2:	4607      	mov	r7, r0
 8015ee4:	10ad      	asrs	r5, r5, #2
 8015ee6:	d035      	beq.n	8015f54 <__pow5mult+0x90>
 8015ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015eea:	b93c      	cbnz	r4, 8015efc <__pow5mult+0x38>
 8015eec:	2010      	movs	r0, #16
 8015eee:	f7ff fe13 	bl	8015b18 <malloc>
 8015ef2:	6270      	str	r0, [r6, #36]	; 0x24
 8015ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ef8:	6004      	str	r4, [r0, #0]
 8015efa:	60c4      	str	r4, [r0, #12]
 8015efc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f04:	b94c      	cbnz	r4, 8015f1a <__pow5mult+0x56>
 8015f06:	f240 2171 	movw	r1, #625	; 0x271
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f7ff ff3b 	bl	8015d86 <__i2b>
 8015f10:	2300      	movs	r3, #0
 8015f12:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f16:	4604      	mov	r4, r0
 8015f18:	6003      	str	r3, [r0, #0]
 8015f1a:	f04f 0800 	mov.w	r8, #0
 8015f1e:	07eb      	lsls	r3, r5, #31
 8015f20:	d50a      	bpl.n	8015f38 <__pow5mult+0x74>
 8015f22:	4639      	mov	r1, r7
 8015f24:	4622      	mov	r2, r4
 8015f26:	4630      	mov	r0, r6
 8015f28:	f7ff ff36 	bl	8015d98 <__multiply>
 8015f2c:	4639      	mov	r1, r7
 8015f2e:	4681      	mov	r9, r0
 8015f30:	4630      	mov	r0, r6
 8015f32:	f7ff fe4a 	bl	8015bca <_Bfree>
 8015f36:	464f      	mov	r7, r9
 8015f38:	106d      	asrs	r5, r5, #1
 8015f3a:	d00b      	beq.n	8015f54 <__pow5mult+0x90>
 8015f3c:	6820      	ldr	r0, [r4, #0]
 8015f3e:	b938      	cbnz	r0, 8015f50 <__pow5mult+0x8c>
 8015f40:	4622      	mov	r2, r4
 8015f42:	4621      	mov	r1, r4
 8015f44:	4630      	mov	r0, r6
 8015f46:	f7ff ff27 	bl	8015d98 <__multiply>
 8015f4a:	6020      	str	r0, [r4, #0]
 8015f4c:	f8c0 8000 	str.w	r8, [r0]
 8015f50:	4604      	mov	r4, r0
 8015f52:	e7e4      	b.n	8015f1e <__pow5mult+0x5a>
 8015f54:	4638      	mov	r0, r7
 8015f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f5a:	bf00      	nop
 8015f5c:	080179e8 	.word	0x080179e8

08015f60 <__lshift>:
 8015f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f64:	460c      	mov	r4, r1
 8015f66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f6a:	6923      	ldr	r3, [r4, #16]
 8015f6c:	6849      	ldr	r1, [r1, #4]
 8015f6e:	eb0a 0903 	add.w	r9, sl, r3
 8015f72:	68a3      	ldr	r3, [r4, #8]
 8015f74:	4607      	mov	r7, r0
 8015f76:	4616      	mov	r6, r2
 8015f78:	f109 0501 	add.w	r5, r9, #1
 8015f7c:	42ab      	cmp	r3, r5
 8015f7e:	db32      	blt.n	8015fe6 <__lshift+0x86>
 8015f80:	4638      	mov	r0, r7
 8015f82:	f7ff fdee 	bl	8015b62 <_Balloc>
 8015f86:	2300      	movs	r3, #0
 8015f88:	4680      	mov	r8, r0
 8015f8a:	f100 0114 	add.w	r1, r0, #20
 8015f8e:	461a      	mov	r2, r3
 8015f90:	4553      	cmp	r3, sl
 8015f92:	db2b      	blt.n	8015fec <__lshift+0x8c>
 8015f94:	6920      	ldr	r0, [r4, #16]
 8015f96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f9a:	f104 0314 	add.w	r3, r4, #20
 8015f9e:	f016 021f 	ands.w	r2, r6, #31
 8015fa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015fa6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015faa:	d025      	beq.n	8015ff8 <__lshift+0x98>
 8015fac:	f1c2 0e20 	rsb	lr, r2, #32
 8015fb0:	2000      	movs	r0, #0
 8015fb2:	681e      	ldr	r6, [r3, #0]
 8015fb4:	468a      	mov	sl, r1
 8015fb6:	4096      	lsls	r6, r2
 8015fb8:	4330      	orrs	r0, r6
 8015fba:	f84a 0b04 	str.w	r0, [sl], #4
 8015fbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8015fc2:	459c      	cmp	ip, r3
 8015fc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8015fc8:	d814      	bhi.n	8015ff4 <__lshift+0x94>
 8015fca:	6048      	str	r0, [r1, #4]
 8015fcc:	b108      	cbz	r0, 8015fd2 <__lshift+0x72>
 8015fce:	f109 0502 	add.w	r5, r9, #2
 8015fd2:	3d01      	subs	r5, #1
 8015fd4:	4638      	mov	r0, r7
 8015fd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8015fda:	4621      	mov	r1, r4
 8015fdc:	f7ff fdf5 	bl	8015bca <_Bfree>
 8015fe0:	4640      	mov	r0, r8
 8015fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fe6:	3101      	adds	r1, #1
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	e7c7      	b.n	8015f7c <__lshift+0x1c>
 8015fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	e7cd      	b.n	8015f90 <__lshift+0x30>
 8015ff4:	4651      	mov	r1, sl
 8015ff6:	e7dc      	b.n	8015fb2 <__lshift+0x52>
 8015ff8:	3904      	subs	r1, #4
 8015ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ffe:	f841 2f04 	str.w	r2, [r1, #4]!
 8016002:	459c      	cmp	ip, r3
 8016004:	d8f9      	bhi.n	8015ffa <__lshift+0x9a>
 8016006:	e7e4      	b.n	8015fd2 <__lshift+0x72>

08016008 <__mcmp>:
 8016008:	6903      	ldr	r3, [r0, #16]
 801600a:	690a      	ldr	r2, [r1, #16]
 801600c:	1a9b      	subs	r3, r3, r2
 801600e:	b530      	push	{r4, r5, lr}
 8016010:	d10c      	bne.n	801602c <__mcmp+0x24>
 8016012:	0092      	lsls	r2, r2, #2
 8016014:	3014      	adds	r0, #20
 8016016:	3114      	adds	r1, #20
 8016018:	1884      	adds	r4, r0, r2
 801601a:	4411      	add	r1, r2
 801601c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016024:	4295      	cmp	r5, r2
 8016026:	d003      	beq.n	8016030 <__mcmp+0x28>
 8016028:	d305      	bcc.n	8016036 <__mcmp+0x2e>
 801602a:	2301      	movs	r3, #1
 801602c:	4618      	mov	r0, r3
 801602e:	bd30      	pop	{r4, r5, pc}
 8016030:	42a0      	cmp	r0, r4
 8016032:	d3f3      	bcc.n	801601c <__mcmp+0x14>
 8016034:	e7fa      	b.n	801602c <__mcmp+0x24>
 8016036:	f04f 33ff 	mov.w	r3, #4294967295
 801603a:	e7f7      	b.n	801602c <__mcmp+0x24>

0801603c <__mdiff>:
 801603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016040:	460d      	mov	r5, r1
 8016042:	4607      	mov	r7, r0
 8016044:	4611      	mov	r1, r2
 8016046:	4628      	mov	r0, r5
 8016048:	4614      	mov	r4, r2
 801604a:	f7ff ffdd 	bl	8016008 <__mcmp>
 801604e:	1e06      	subs	r6, r0, #0
 8016050:	d108      	bne.n	8016064 <__mdiff+0x28>
 8016052:	4631      	mov	r1, r6
 8016054:	4638      	mov	r0, r7
 8016056:	f7ff fd84 	bl	8015b62 <_Balloc>
 801605a:	2301      	movs	r3, #1
 801605c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016064:	bfa4      	itt	ge
 8016066:	4623      	movge	r3, r4
 8016068:	462c      	movge	r4, r5
 801606a:	4638      	mov	r0, r7
 801606c:	6861      	ldr	r1, [r4, #4]
 801606e:	bfa6      	itte	ge
 8016070:	461d      	movge	r5, r3
 8016072:	2600      	movge	r6, #0
 8016074:	2601      	movlt	r6, #1
 8016076:	f7ff fd74 	bl	8015b62 <_Balloc>
 801607a:	692b      	ldr	r3, [r5, #16]
 801607c:	60c6      	str	r6, [r0, #12]
 801607e:	6926      	ldr	r6, [r4, #16]
 8016080:	f105 0914 	add.w	r9, r5, #20
 8016084:	f104 0214 	add.w	r2, r4, #20
 8016088:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801608c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016090:	f100 0514 	add.w	r5, r0, #20
 8016094:	f04f 0e00 	mov.w	lr, #0
 8016098:	f852 ab04 	ldr.w	sl, [r2], #4
 801609c:	f859 4b04 	ldr.w	r4, [r9], #4
 80160a0:	fa1e f18a 	uxtah	r1, lr, sl
 80160a4:	b2a3      	uxth	r3, r4
 80160a6:	1ac9      	subs	r1, r1, r3
 80160a8:	0c23      	lsrs	r3, r4, #16
 80160aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80160ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80160b2:	b289      	uxth	r1, r1
 80160b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80160b8:	45c8      	cmp	r8, r9
 80160ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80160be:	4694      	mov	ip, r2
 80160c0:	f845 3b04 	str.w	r3, [r5], #4
 80160c4:	d8e8      	bhi.n	8016098 <__mdiff+0x5c>
 80160c6:	45bc      	cmp	ip, r7
 80160c8:	d304      	bcc.n	80160d4 <__mdiff+0x98>
 80160ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80160ce:	b183      	cbz	r3, 80160f2 <__mdiff+0xb6>
 80160d0:	6106      	str	r6, [r0, #16]
 80160d2:	e7c5      	b.n	8016060 <__mdiff+0x24>
 80160d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80160d8:	fa1e f381 	uxtah	r3, lr, r1
 80160dc:	141a      	asrs	r2, r3, #16
 80160de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80160e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80160ec:	f845 3b04 	str.w	r3, [r5], #4
 80160f0:	e7e9      	b.n	80160c6 <__mdiff+0x8a>
 80160f2:	3e01      	subs	r6, #1
 80160f4:	e7e9      	b.n	80160ca <__mdiff+0x8e>
	...

080160f8 <__ulp>:
 80160f8:	4b12      	ldr	r3, [pc, #72]	; (8016144 <__ulp+0x4c>)
 80160fa:	ee10 2a90 	vmov	r2, s1
 80160fe:	401a      	ands	r2, r3
 8016100:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016104:	2b00      	cmp	r3, #0
 8016106:	dd04      	ble.n	8016112 <__ulp+0x1a>
 8016108:	2000      	movs	r0, #0
 801610a:	4619      	mov	r1, r3
 801610c:	ec41 0b10 	vmov	d0, r0, r1
 8016110:	4770      	bx	lr
 8016112:	425b      	negs	r3, r3
 8016114:	151b      	asrs	r3, r3, #20
 8016116:	2b13      	cmp	r3, #19
 8016118:	f04f 0000 	mov.w	r0, #0
 801611c:	f04f 0100 	mov.w	r1, #0
 8016120:	dc04      	bgt.n	801612c <__ulp+0x34>
 8016122:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016126:	fa42 f103 	asr.w	r1, r2, r3
 801612a:	e7ef      	b.n	801610c <__ulp+0x14>
 801612c:	3b14      	subs	r3, #20
 801612e:	2b1e      	cmp	r3, #30
 8016130:	f04f 0201 	mov.w	r2, #1
 8016134:	bfda      	itte	le
 8016136:	f1c3 031f 	rsble	r3, r3, #31
 801613a:	fa02 f303 	lslle.w	r3, r2, r3
 801613e:	4613      	movgt	r3, r2
 8016140:	4618      	mov	r0, r3
 8016142:	e7e3      	b.n	801610c <__ulp+0x14>
 8016144:	7ff00000 	.word	0x7ff00000

08016148 <__b2d>:
 8016148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801614a:	6905      	ldr	r5, [r0, #16]
 801614c:	f100 0714 	add.w	r7, r0, #20
 8016150:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016154:	1f2e      	subs	r6, r5, #4
 8016156:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801615a:	4620      	mov	r0, r4
 801615c:	f7ff fdc5 	bl	8015cea <__hi0bits>
 8016160:	f1c0 0320 	rsb	r3, r0, #32
 8016164:	280a      	cmp	r0, #10
 8016166:	600b      	str	r3, [r1, #0]
 8016168:	f8df c074 	ldr.w	ip, [pc, #116]	; 80161e0 <__b2d+0x98>
 801616c:	dc14      	bgt.n	8016198 <__b2d+0x50>
 801616e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016172:	fa24 f10e 	lsr.w	r1, r4, lr
 8016176:	42b7      	cmp	r7, r6
 8016178:	ea41 030c 	orr.w	r3, r1, ip
 801617c:	bf34      	ite	cc
 801617e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016182:	2100      	movcs	r1, #0
 8016184:	3015      	adds	r0, #21
 8016186:	fa04 f000 	lsl.w	r0, r4, r0
 801618a:	fa21 f10e 	lsr.w	r1, r1, lr
 801618e:	ea40 0201 	orr.w	r2, r0, r1
 8016192:	ec43 2b10 	vmov	d0, r2, r3
 8016196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016198:	42b7      	cmp	r7, r6
 801619a:	bf3a      	itte	cc
 801619c:	f1a5 0608 	subcc.w	r6, r5, #8
 80161a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80161a4:	2100      	movcs	r1, #0
 80161a6:	380b      	subs	r0, #11
 80161a8:	d015      	beq.n	80161d6 <__b2d+0x8e>
 80161aa:	4084      	lsls	r4, r0
 80161ac:	f1c0 0520 	rsb	r5, r0, #32
 80161b0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80161b4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80161b8:	42be      	cmp	r6, r7
 80161ba:	fa21 fc05 	lsr.w	ip, r1, r5
 80161be:	ea44 030c 	orr.w	r3, r4, ip
 80161c2:	bf8c      	ite	hi
 80161c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80161c8:	2400      	movls	r4, #0
 80161ca:	fa01 f000 	lsl.w	r0, r1, r0
 80161ce:	40ec      	lsrs	r4, r5
 80161d0:	ea40 0204 	orr.w	r2, r0, r4
 80161d4:	e7dd      	b.n	8016192 <__b2d+0x4a>
 80161d6:	ea44 030c 	orr.w	r3, r4, ip
 80161da:	460a      	mov	r2, r1
 80161dc:	e7d9      	b.n	8016192 <__b2d+0x4a>
 80161de:	bf00      	nop
 80161e0:	3ff00000 	.word	0x3ff00000

080161e4 <__d2b>:
 80161e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161e8:	460e      	mov	r6, r1
 80161ea:	2101      	movs	r1, #1
 80161ec:	ec59 8b10 	vmov	r8, r9, d0
 80161f0:	4615      	mov	r5, r2
 80161f2:	f7ff fcb6 	bl	8015b62 <_Balloc>
 80161f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80161fa:	4607      	mov	r7, r0
 80161fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016200:	bb34      	cbnz	r4, 8016250 <__d2b+0x6c>
 8016202:	9301      	str	r3, [sp, #4]
 8016204:	f1b8 0300 	subs.w	r3, r8, #0
 8016208:	d027      	beq.n	801625a <__d2b+0x76>
 801620a:	a802      	add	r0, sp, #8
 801620c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016210:	f7ff fd8a 	bl	8015d28 <__lo0bits>
 8016214:	9900      	ldr	r1, [sp, #0]
 8016216:	b1f0      	cbz	r0, 8016256 <__d2b+0x72>
 8016218:	9a01      	ldr	r2, [sp, #4]
 801621a:	f1c0 0320 	rsb	r3, r0, #32
 801621e:	fa02 f303 	lsl.w	r3, r2, r3
 8016222:	430b      	orrs	r3, r1
 8016224:	40c2      	lsrs	r2, r0
 8016226:	617b      	str	r3, [r7, #20]
 8016228:	9201      	str	r2, [sp, #4]
 801622a:	9b01      	ldr	r3, [sp, #4]
 801622c:	61bb      	str	r3, [r7, #24]
 801622e:	2b00      	cmp	r3, #0
 8016230:	bf14      	ite	ne
 8016232:	2102      	movne	r1, #2
 8016234:	2101      	moveq	r1, #1
 8016236:	6139      	str	r1, [r7, #16]
 8016238:	b1c4      	cbz	r4, 801626c <__d2b+0x88>
 801623a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801623e:	4404      	add	r4, r0
 8016240:	6034      	str	r4, [r6, #0]
 8016242:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016246:	6028      	str	r0, [r5, #0]
 8016248:	4638      	mov	r0, r7
 801624a:	b003      	add	sp, #12
 801624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016254:	e7d5      	b.n	8016202 <__d2b+0x1e>
 8016256:	6179      	str	r1, [r7, #20]
 8016258:	e7e7      	b.n	801622a <__d2b+0x46>
 801625a:	a801      	add	r0, sp, #4
 801625c:	f7ff fd64 	bl	8015d28 <__lo0bits>
 8016260:	9b01      	ldr	r3, [sp, #4]
 8016262:	617b      	str	r3, [r7, #20]
 8016264:	2101      	movs	r1, #1
 8016266:	6139      	str	r1, [r7, #16]
 8016268:	3020      	adds	r0, #32
 801626a:	e7e5      	b.n	8016238 <__d2b+0x54>
 801626c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016274:	6030      	str	r0, [r6, #0]
 8016276:	6918      	ldr	r0, [r3, #16]
 8016278:	f7ff fd37 	bl	8015cea <__hi0bits>
 801627c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016280:	e7e1      	b.n	8016246 <__d2b+0x62>

08016282 <__ratio>:
 8016282:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016286:	4688      	mov	r8, r1
 8016288:	4669      	mov	r1, sp
 801628a:	4681      	mov	r9, r0
 801628c:	f7ff ff5c 	bl	8016148 <__b2d>
 8016290:	a901      	add	r1, sp, #4
 8016292:	4640      	mov	r0, r8
 8016294:	ec57 6b10 	vmov	r6, r7, d0
 8016298:	f7ff ff56 	bl	8016148 <__b2d>
 801629c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80162a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80162a4:	eba3 0c02 	sub.w	ip, r3, r2
 80162a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80162ac:	1a9b      	subs	r3, r3, r2
 80162ae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80162b2:	ec5b ab10 	vmov	sl, fp, d0
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	bfce      	itee	gt
 80162ba:	463a      	movgt	r2, r7
 80162bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80162c0:	465a      	movle	r2, fp
 80162c2:	4659      	mov	r1, fp
 80162c4:	463d      	mov	r5, r7
 80162c6:	bfd4      	ite	le
 80162c8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80162cc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80162d0:	4630      	mov	r0, r6
 80162d2:	ee10 2a10 	vmov	r2, s0
 80162d6:	460b      	mov	r3, r1
 80162d8:	4629      	mov	r1, r5
 80162da:	f7ea facf 	bl	800087c <__aeabi_ddiv>
 80162de:	ec41 0b10 	vmov	d0, r0, r1
 80162e2:	b003      	add	sp, #12
 80162e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162e8 <__copybits>:
 80162e8:	3901      	subs	r1, #1
 80162ea:	b510      	push	{r4, lr}
 80162ec:	1149      	asrs	r1, r1, #5
 80162ee:	6914      	ldr	r4, [r2, #16]
 80162f0:	3101      	adds	r1, #1
 80162f2:	f102 0314 	add.w	r3, r2, #20
 80162f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80162fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80162fe:	42a3      	cmp	r3, r4
 8016300:	4602      	mov	r2, r0
 8016302:	d303      	bcc.n	801630c <__copybits+0x24>
 8016304:	2300      	movs	r3, #0
 8016306:	428a      	cmp	r2, r1
 8016308:	d305      	bcc.n	8016316 <__copybits+0x2e>
 801630a:	bd10      	pop	{r4, pc}
 801630c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016310:	f840 2b04 	str.w	r2, [r0], #4
 8016314:	e7f3      	b.n	80162fe <__copybits+0x16>
 8016316:	f842 3b04 	str.w	r3, [r2], #4
 801631a:	e7f4      	b.n	8016306 <__copybits+0x1e>

0801631c <__any_on>:
 801631c:	f100 0214 	add.w	r2, r0, #20
 8016320:	6900      	ldr	r0, [r0, #16]
 8016322:	114b      	asrs	r3, r1, #5
 8016324:	4298      	cmp	r0, r3
 8016326:	b510      	push	{r4, lr}
 8016328:	db11      	blt.n	801634e <__any_on+0x32>
 801632a:	dd0a      	ble.n	8016342 <__any_on+0x26>
 801632c:	f011 011f 	ands.w	r1, r1, #31
 8016330:	d007      	beq.n	8016342 <__any_on+0x26>
 8016332:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016336:	fa24 f001 	lsr.w	r0, r4, r1
 801633a:	fa00 f101 	lsl.w	r1, r0, r1
 801633e:	428c      	cmp	r4, r1
 8016340:	d10b      	bne.n	801635a <__any_on+0x3e>
 8016342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016346:	4293      	cmp	r3, r2
 8016348:	d803      	bhi.n	8016352 <__any_on+0x36>
 801634a:	2000      	movs	r0, #0
 801634c:	bd10      	pop	{r4, pc}
 801634e:	4603      	mov	r3, r0
 8016350:	e7f7      	b.n	8016342 <__any_on+0x26>
 8016352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016356:	2900      	cmp	r1, #0
 8016358:	d0f5      	beq.n	8016346 <__any_on+0x2a>
 801635a:	2001      	movs	r0, #1
 801635c:	e7f6      	b.n	801634c <__any_on+0x30>

0801635e <_calloc_r>:
 801635e:	b538      	push	{r3, r4, r5, lr}
 8016360:	fb02 f401 	mul.w	r4, r2, r1
 8016364:	4621      	mov	r1, r4
 8016366:	f000 f857 	bl	8016418 <_malloc_r>
 801636a:	4605      	mov	r5, r0
 801636c:	b118      	cbz	r0, 8016376 <_calloc_r+0x18>
 801636e:	4622      	mov	r2, r4
 8016370:	2100      	movs	r1, #0
 8016372:	f7fc f911 	bl	8012598 <memset>
 8016376:	4628      	mov	r0, r5
 8016378:	bd38      	pop	{r3, r4, r5, pc}
	...

0801637c <_free_r>:
 801637c:	b538      	push	{r3, r4, r5, lr}
 801637e:	4605      	mov	r5, r0
 8016380:	2900      	cmp	r1, #0
 8016382:	d045      	beq.n	8016410 <_free_r+0x94>
 8016384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016388:	1f0c      	subs	r4, r1, #4
 801638a:	2b00      	cmp	r3, #0
 801638c:	bfb8      	it	lt
 801638e:	18e4      	addlt	r4, r4, r3
 8016390:	f000 ffa5 	bl	80172de <__malloc_lock>
 8016394:	4a1f      	ldr	r2, [pc, #124]	; (8016414 <_free_r+0x98>)
 8016396:	6813      	ldr	r3, [r2, #0]
 8016398:	4610      	mov	r0, r2
 801639a:	b933      	cbnz	r3, 80163aa <_free_r+0x2e>
 801639c:	6063      	str	r3, [r4, #4]
 801639e:	6014      	str	r4, [r2, #0]
 80163a0:	4628      	mov	r0, r5
 80163a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163a6:	f000 bf9b 	b.w	80172e0 <__malloc_unlock>
 80163aa:	42a3      	cmp	r3, r4
 80163ac:	d90c      	bls.n	80163c8 <_free_r+0x4c>
 80163ae:	6821      	ldr	r1, [r4, #0]
 80163b0:	1862      	adds	r2, r4, r1
 80163b2:	4293      	cmp	r3, r2
 80163b4:	bf04      	itt	eq
 80163b6:	681a      	ldreq	r2, [r3, #0]
 80163b8:	685b      	ldreq	r3, [r3, #4]
 80163ba:	6063      	str	r3, [r4, #4]
 80163bc:	bf04      	itt	eq
 80163be:	1852      	addeq	r2, r2, r1
 80163c0:	6022      	streq	r2, [r4, #0]
 80163c2:	6004      	str	r4, [r0, #0]
 80163c4:	e7ec      	b.n	80163a0 <_free_r+0x24>
 80163c6:	4613      	mov	r3, r2
 80163c8:	685a      	ldr	r2, [r3, #4]
 80163ca:	b10a      	cbz	r2, 80163d0 <_free_r+0x54>
 80163cc:	42a2      	cmp	r2, r4
 80163ce:	d9fa      	bls.n	80163c6 <_free_r+0x4a>
 80163d0:	6819      	ldr	r1, [r3, #0]
 80163d2:	1858      	adds	r0, r3, r1
 80163d4:	42a0      	cmp	r0, r4
 80163d6:	d10b      	bne.n	80163f0 <_free_r+0x74>
 80163d8:	6820      	ldr	r0, [r4, #0]
 80163da:	4401      	add	r1, r0
 80163dc:	1858      	adds	r0, r3, r1
 80163de:	4282      	cmp	r2, r0
 80163e0:	6019      	str	r1, [r3, #0]
 80163e2:	d1dd      	bne.n	80163a0 <_free_r+0x24>
 80163e4:	6810      	ldr	r0, [r2, #0]
 80163e6:	6852      	ldr	r2, [r2, #4]
 80163e8:	605a      	str	r2, [r3, #4]
 80163ea:	4401      	add	r1, r0
 80163ec:	6019      	str	r1, [r3, #0]
 80163ee:	e7d7      	b.n	80163a0 <_free_r+0x24>
 80163f0:	d902      	bls.n	80163f8 <_free_r+0x7c>
 80163f2:	230c      	movs	r3, #12
 80163f4:	602b      	str	r3, [r5, #0]
 80163f6:	e7d3      	b.n	80163a0 <_free_r+0x24>
 80163f8:	6820      	ldr	r0, [r4, #0]
 80163fa:	1821      	adds	r1, r4, r0
 80163fc:	428a      	cmp	r2, r1
 80163fe:	bf04      	itt	eq
 8016400:	6811      	ldreq	r1, [r2, #0]
 8016402:	6852      	ldreq	r2, [r2, #4]
 8016404:	6062      	str	r2, [r4, #4]
 8016406:	bf04      	itt	eq
 8016408:	1809      	addeq	r1, r1, r0
 801640a:	6021      	streq	r1, [r4, #0]
 801640c:	605c      	str	r4, [r3, #4]
 801640e:	e7c7      	b.n	80163a0 <_free_r+0x24>
 8016410:	bd38      	pop	{r3, r4, r5, pc}
 8016412:	bf00      	nop
 8016414:	20036a98 	.word	0x20036a98

08016418 <_malloc_r>:
 8016418:	b570      	push	{r4, r5, r6, lr}
 801641a:	1ccd      	adds	r5, r1, #3
 801641c:	f025 0503 	bic.w	r5, r5, #3
 8016420:	3508      	adds	r5, #8
 8016422:	2d0c      	cmp	r5, #12
 8016424:	bf38      	it	cc
 8016426:	250c      	movcc	r5, #12
 8016428:	2d00      	cmp	r5, #0
 801642a:	4606      	mov	r6, r0
 801642c:	db01      	blt.n	8016432 <_malloc_r+0x1a>
 801642e:	42a9      	cmp	r1, r5
 8016430:	d903      	bls.n	801643a <_malloc_r+0x22>
 8016432:	230c      	movs	r3, #12
 8016434:	6033      	str	r3, [r6, #0]
 8016436:	2000      	movs	r0, #0
 8016438:	bd70      	pop	{r4, r5, r6, pc}
 801643a:	f000 ff50 	bl	80172de <__malloc_lock>
 801643e:	4a21      	ldr	r2, [pc, #132]	; (80164c4 <_malloc_r+0xac>)
 8016440:	6814      	ldr	r4, [r2, #0]
 8016442:	4621      	mov	r1, r4
 8016444:	b991      	cbnz	r1, 801646c <_malloc_r+0x54>
 8016446:	4c20      	ldr	r4, [pc, #128]	; (80164c8 <_malloc_r+0xb0>)
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	b91b      	cbnz	r3, 8016454 <_malloc_r+0x3c>
 801644c:	4630      	mov	r0, r6
 801644e:	f000 fde3 	bl	8017018 <_sbrk_r>
 8016452:	6020      	str	r0, [r4, #0]
 8016454:	4629      	mov	r1, r5
 8016456:	4630      	mov	r0, r6
 8016458:	f000 fdde 	bl	8017018 <_sbrk_r>
 801645c:	1c43      	adds	r3, r0, #1
 801645e:	d124      	bne.n	80164aa <_malloc_r+0x92>
 8016460:	230c      	movs	r3, #12
 8016462:	6033      	str	r3, [r6, #0]
 8016464:	4630      	mov	r0, r6
 8016466:	f000 ff3b 	bl	80172e0 <__malloc_unlock>
 801646a:	e7e4      	b.n	8016436 <_malloc_r+0x1e>
 801646c:	680b      	ldr	r3, [r1, #0]
 801646e:	1b5b      	subs	r3, r3, r5
 8016470:	d418      	bmi.n	80164a4 <_malloc_r+0x8c>
 8016472:	2b0b      	cmp	r3, #11
 8016474:	d90f      	bls.n	8016496 <_malloc_r+0x7e>
 8016476:	600b      	str	r3, [r1, #0]
 8016478:	50cd      	str	r5, [r1, r3]
 801647a:	18cc      	adds	r4, r1, r3
 801647c:	4630      	mov	r0, r6
 801647e:	f000 ff2f 	bl	80172e0 <__malloc_unlock>
 8016482:	f104 000b 	add.w	r0, r4, #11
 8016486:	1d23      	adds	r3, r4, #4
 8016488:	f020 0007 	bic.w	r0, r0, #7
 801648c:	1ac3      	subs	r3, r0, r3
 801648e:	d0d3      	beq.n	8016438 <_malloc_r+0x20>
 8016490:	425a      	negs	r2, r3
 8016492:	50e2      	str	r2, [r4, r3]
 8016494:	e7d0      	b.n	8016438 <_malloc_r+0x20>
 8016496:	428c      	cmp	r4, r1
 8016498:	684b      	ldr	r3, [r1, #4]
 801649a:	bf16      	itet	ne
 801649c:	6063      	strne	r3, [r4, #4]
 801649e:	6013      	streq	r3, [r2, #0]
 80164a0:	460c      	movne	r4, r1
 80164a2:	e7eb      	b.n	801647c <_malloc_r+0x64>
 80164a4:	460c      	mov	r4, r1
 80164a6:	6849      	ldr	r1, [r1, #4]
 80164a8:	e7cc      	b.n	8016444 <_malloc_r+0x2c>
 80164aa:	1cc4      	adds	r4, r0, #3
 80164ac:	f024 0403 	bic.w	r4, r4, #3
 80164b0:	42a0      	cmp	r0, r4
 80164b2:	d005      	beq.n	80164c0 <_malloc_r+0xa8>
 80164b4:	1a21      	subs	r1, r4, r0
 80164b6:	4630      	mov	r0, r6
 80164b8:	f000 fdae 	bl	8017018 <_sbrk_r>
 80164bc:	3001      	adds	r0, #1
 80164be:	d0cf      	beq.n	8016460 <_malloc_r+0x48>
 80164c0:	6025      	str	r5, [r4, #0]
 80164c2:	e7db      	b.n	801647c <_malloc_r+0x64>
 80164c4:	20036a98 	.word	0x20036a98
 80164c8:	20036a9c 	.word	0x20036a9c

080164cc <__ssputs_r>:
 80164cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164d0:	688e      	ldr	r6, [r1, #8]
 80164d2:	429e      	cmp	r6, r3
 80164d4:	4682      	mov	sl, r0
 80164d6:	460c      	mov	r4, r1
 80164d8:	4690      	mov	r8, r2
 80164da:	4699      	mov	r9, r3
 80164dc:	d837      	bhi.n	801654e <__ssputs_r+0x82>
 80164de:	898a      	ldrh	r2, [r1, #12]
 80164e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80164e4:	d031      	beq.n	801654a <__ssputs_r+0x7e>
 80164e6:	6825      	ldr	r5, [r4, #0]
 80164e8:	6909      	ldr	r1, [r1, #16]
 80164ea:	1a6f      	subs	r7, r5, r1
 80164ec:	6965      	ldr	r5, [r4, #20]
 80164ee:	2302      	movs	r3, #2
 80164f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80164f8:	f109 0301 	add.w	r3, r9, #1
 80164fc:	443b      	add	r3, r7
 80164fe:	429d      	cmp	r5, r3
 8016500:	bf38      	it	cc
 8016502:	461d      	movcc	r5, r3
 8016504:	0553      	lsls	r3, r2, #21
 8016506:	d530      	bpl.n	801656a <__ssputs_r+0x9e>
 8016508:	4629      	mov	r1, r5
 801650a:	f7ff ff85 	bl	8016418 <_malloc_r>
 801650e:	4606      	mov	r6, r0
 8016510:	b950      	cbnz	r0, 8016528 <__ssputs_r+0x5c>
 8016512:	230c      	movs	r3, #12
 8016514:	f8ca 3000 	str.w	r3, [sl]
 8016518:	89a3      	ldrh	r3, [r4, #12]
 801651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801651e:	81a3      	strh	r3, [r4, #12]
 8016520:	f04f 30ff 	mov.w	r0, #4294967295
 8016524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016528:	463a      	mov	r2, r7
 801652a:	6921      	ldr	r1, [r4, #16]
 801652c:	f7ff fb0e 	bl	8015b4c <memcpy>
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801653a:	81a3      	strh	r3, [r4, #12]
 801653c:	6126      	str	r6, [r4, #16]
 801653e:	6165      	str	r5, [r4, #20]
 8016540:	443e      	add	r6, r7
 8016542:	1bed      	subs	r5, r5, r7
 8016544:	6026      	str	r6, [r4, #0]
 8016546:	60a5      	str	r5, [r4, #8]
 8016548:	464e      	mov	r6, r9
 801654a:	454e      	cmp	r6, r9
 801654c:	d900      	bls.n	8016550 <__ssputs_r+0x84>
 801654e:	464e      	mov	r6, r9
 8016550:	4632      	mov	r2, r6
 8016552:	4641      	mov	r1, r8
 8016554:	6820      	ldr	r0, [r4, #0]
 8016556:	f000 fea9 	bl	80172ac <memmove>
 801655a:	68a3      	ldr	r3, [r4, #8]
 801655c:	1b9b      	subs	r3, r3, r6
 801655e:	60a3      	str	r3, [r4, #8]
 8016560:	6823      	ldr	r3, [r4, #0]
 8016562:	441e      	add	r6, r3
 8016564:	6026      	str	r6, [r4, #0]
 8016566:	2000      	movs	r0, #0
 8016568:	e7dc      	b.n	8016524 <__ssputs_r+0x58>
 801656a:	462a      	mov	r2, r5
 801656c:	f000 feb9 	bl	80172e2 <_realloc_r>
 8016570:	4606      	mov	r6, r0
 8016572:	2800      	cmp	r0, #0
 8016574:	d1e2      	bne.n	801653c <__ssputs_r+0x70>
 8016576:	6921      	ldr	r1, [r4, #16]
 8016578:	4650      	mov	r0, sl
 801657a:	f7ff feff 	bl	801637c <_free_r>
 801657e:	e7c8      	b.n	8016512 <__ssputs_r+0x46>

08016580 <_svfiprintf_r>:
 8016580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	461d      	mov	r5, r3
 8016586:	898b      	ldrh	r3, [r1, #12]
 8016588:	061f      	lsls	r7, r3, #24
 801658a:	b09d      	sub	sp, #116	; 0x74
 801658c:	4680      	mov	r8, r0
 801658e:	460c      	mov	r4, r1
 8016590:	4616      	mov	r6, r2
 8016592:	d50f      	bpl.n	80165b4 <_svfiprintf_r+0x34>
 8016594:	690b      	ldr	r3, [r1, #16]
 8016596:	b96b      	cbnz	r3, 80165b4 <_svfiprintf_r+0x34>
 8016598:	2140      	movs	r1, #64	; 0x40
 801659a:	f7ff ff3d 	bl	8016418 <_malloc_r>
 801659e:	6020      	str	r0, [r4, #0]
 80165a0:	6120      	str	r0, [r4, #16]
 80165a2:	b928      	cbnz	r0, 80165b0 <_svfiprintf_r+0x30>
 80165a4:	230c      	movs	r3, #12
 80165a6:	f8c8 3000 	str.w	r3, [r8]
 80165aa:	f04f 30ff 	mov.w	r0, #4294967295
 80165ae:	e0c8      	b.n	8016742 <_svfiprintf_r+0x1c2>
 80165b0:	2340      	movs	r3, #64	; 0x40
 80165b2:	6163      	str	r3, [r4, #20]
 80165b4:	2300      	movs	r3, #0
 80165b6:	9309      	str	r3, [sp, #36]	; 0x24
 80165b8:	2320      	movs	r3, #32
 80165ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80165be:	2330      	movs	r3, #48	; 0x30
 80165c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165c4:	9503      	str	r5, [sp, #12]
 80165c6:	f04f 0b01 	mov.w	fp, #1
 80165ca:	4637      	mov	r7, r6
 80165cc:	463d      	mov	r5, r7
 80165ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80165d2:	b10b      	cbz	r3, 80165d8 <_svfiprintf_r+0x58>
 80165d4:	2b25      	cmp	r3, #37	; 0x25
 80165d6:	d13e      	bne.n	8016656 <_svfiprintf_r+0xd6>
 80165d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80165dc:	d00b      	beq.n	80165f6 <_svfiprintf_r+0x76>
 80165de:	4653      	mov	r3, sl
 80165e0:	4632      	mov	r2, r6
 80165e2:	4621      	mov	r1, r4
 80165e4:	4640      	mov	r0, r8
 80165e6:	f7ff ff71 	bl	80164cc <__ssputs_r>
 80165ea:	3001      	adds	r0, #1
 80165ec:	f000 80a4 	beq.w	8016738 <_svfiprintf_r+0x1b8>
 80165f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165f2:	4453      	add	r3, sl
 80165f4:	9309      	str	r3, [sp, #36]	; 0x24
 80165f6:	783b      	ldrb	r3, [r7, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	f000 809d 	beq.w	8016738 <_svfiprintf_r+0x1b8>
 80165fe:	2300      	movs	r3, #0
 8016600:	f04f 32ff 	mov.w	r2, #4294967295
 8016604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016608:	9304      	str	r3, [sp, #16]
 801660a:	9307      	str	r3, [sp, #28]
 801660c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016610:	931a      	str	r3, [sp, #104]	; 0x68
 8016612:	462f      	mov	r7, r5
 8016614:	2205      	movs	r2, #5
 8016616:	f817 1b01 	ldrb.w	r1, [r7], #1
 801661a:	4850      	ldr	r0, [pc, #320]	; (801675c <_svfiprintf_r+0x1dc>)
 801661c:	f7e9 fdf8 	bl	8000210 <memchr>
 8016620:	9b04      	ldr	r3, [sp, #16]
 8016622:	b9d0      	cbnz	r0, 801665a <_svfiprintf_r+0xda>
 8016624:	06d9      	lsls	r1, r3, #27
 8016626:	bf44      	itt	mi
 8016628:	2220      	movmi	r2, #32
 801662a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801662e:	071a      	lsls	r2, r3, #28
 8016630:	bf44      	itt	mi
 8016632:	222b      	movmi	r2, #43	; 0x2b
 8016634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016638:	782a      	ldrb	r2, [r5, #0]
 801663a:	2a2a      	cmp	r2, #42	; 0x2a
 801663c:	d015      	beq.n	801666a <_svfiprintf_r+0xea>
 801663e:	9a07      	ldr	r2, [sp, #28]
 8016640:	462f      	mov	r7, r5
 8016642:	2000      	movs	r0, #0
 8016644:	250a      	movs	r5, #10
 8016646:	4639      	mov	r1, r7
 8016648:	f811 3b01 	ldrb.w	r3, [r1], #1
 801664c:	3b30      	subs	r3, #48	; 0x30
 801664e:	2b09      	cmp	r3, #9
 8016650:	d94d      	bls.n	80166ee <_svfiprintf_r+0x16e>
 8016652:	b1b8      	cbz	r0, 8016684 <_svfiprintf_r+0x104>
 8016654:	e00f      	b.n	8016676 <_svfiprintf_r+0xf6>
 8016656:	462f      	mov	r7, r5
 8016658:	e7b8      	b.n	80165cc <_svfiprintf_r+0x4c>
 801665a:	4a40      	ldr	r2, [pc, #256]	; (801675c <_svfiprintf_r+0x1dc>)
 801665c:	1a80      	subs	r0, r0, r2
 801665e:	fa0b f000 	lsl.w	r0, fp, r0
 8016662:	4318      	orrs	r0, r3
 8016664:	9004      	str	r0, [sp, #16]
 8016666:	463d      	mov	r5, r7
 8016668:	e7d3      	b.n	8016612 <_svfiprintf_r+0x92>
 801666a:	9a03      	ldr	r2, [sp, #12]
 801666c:	1d11      	adds	r1, r2, #4
 801666e:	6812      	ldr	r2, [r2, #0]
 8016670:	9103      	str	r1, [sp, #12]
 8016672:	2a00      	cmp	r2, #0
 8016674:	db01      	blt.n	801667a <_svfiprintf_r+0xfa>
 8016676:	9207      	str	r2, [sp, #28]
 8016678:	e004      	b.n	8016684 <_svfiprintf_r+0x104>
 801667a:	4252      	negs	r2, r2
 801667c:	f043 0302 	orr.w	r3, r3, #2
 8016680:	9207      	str	r2, [sp, #28]
 8016682:	9304      	str	r3, [sp, #16]
 8016684:	783b      	ldrb	r3, [r7, #0]
 8016686:	2b2e      	cmp	r3, #46	; 0x2e
 8016688:	d10c      	bne.n	80166a4 <_svfiprintf_r+0x124>
 801668a:	787b      	ldrb	r3, [r7, #1]
 801668c:	2b2a      	cmp	r3, #42	; 0x2a
 801668e:	d133      	bne.n	80166f8 <_svfiprintf_r+0x178>
 8016690:	9b03      	ldr	r3, [sp, #12]
 8016692:	1d1a      	adds	r2, r3, #4
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	9203      	str	r2, [sp, #12]
 8016698:	2b00      	cmp	r3, #0
 801669a:	bfb8      	it	lt
 801669c:	f04f 33ff 	movlt.w	r3, #4294967295
 80166a0:	3702      	adds	r7, #2
 80166a2:	9305      	str	r3, [sp, #20]
 80166a4:	4d2e      	ldr	r5, [pc, #184]	; (8016760 <_svfiprintf_r+0x1e0>)
 80166a6:	7839      	ldrb	r1, [r7, #0]
 80166a8:	2203      	movs	r2, #3
 80166aa:	4628      	mov	r0, r5
 80166ac:	f7e9 fdb0 	bl	8000210 <memchr>
 80166b0:	b138      	cbz	r0, 80166c2 <_svfiprintf_r+0x142>
 80166b2:	2340      	movs	r3, #64	; 0x40
 80166b4:	1b40      	subs	r0, r0, r5
 80166b6:	fa03 f000 	lsl.w	r0, r3, r0
 80166ba:	9b04      	ldr	r3, [sp, #16]
 80166bc:	4303      	orrs	r3, r0
 80166be:	3701      	adds	r7, #1
 80166c0:	9304      	str	r3, [sp, #16]
 80166c2:	7839      	ldrb	r1, [r7, #0]
 80166c4:	4827      	ldr	r0, [pc, #156]	; (8016764 <_svfiprintf_r+0x1e4>)
 80166c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166ca:	2206      	movs	r2, #6
 80166cc:	1c7e      	adds	r6, r7, #1
 80166ce:	f7e9 fd9f 	bl	8000210 <memchr>
 80166d2:	2800      	cmp	r0, #0
 80166d4:	d038      	beq.n	8016748 <_svfiprintf_r+0x1c8>
 80166d6:	4b24      	ldr	r3, [pc, #144]	; (8016768 <_svfiprintf_r+0x1e8>)
 80166d8:	bb13      	cbnz	r3, 8016720 <_svfiprintf_r+0x1a0>
 80166da:	9b03      	ldr	r3, [sp, #12]
 80166dc:	3307      	adds	r3, #7
 80166de:	f023 0307 	bic.w	r3, r3, #7
 80166e2:	3308      	adds	r3, #8
 80166e4:	9303      	str	r3, [sp, #12]
 80166e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166e8:	444b      	add	r3, r9
 80166ea:	9309      	str	r3, [sp, #36]	; 0x24
 80166ec:	e76d      	b.n	80165ca <_svfiprintf_r+0x4a>
 80166ee:	fb05 3202 	mla	r2, r5, r2, r3
 80166f2:	2001      	movs	r0, #1
 80166f4:	460f      	mov	r7, r1
 80166f6:	e7a6      	b.n	8016646 <_svfiprintf_r+0xc6>
 80166f8:	2300      	movs	r3, #0
 80166fa:	3701      	adds	r7, #1
 80166fc:	9305      	str	r3, [sp, #20]
 80166fe:	4619      	mov	r1, r3
 8016700:	250a      	movs	r5, #10
 8016702:	4638      	mov	r0, r7
 8016704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016708:	3a30      	subs	r2, #48	; 0x30
 801670a:	2a09      	cmp	r2, #9
 801670c:	d903      	bls.n	8016716 <_svfiprintf_r+0x196>
 801670e:	2b00      	cmp	r3, #0
 8016710:	d0c8      	beq.n	80166a4 <_svfiprintf_r+0x124>
 8016712:	9105      	str	r1, [sp, #20]
 8016714:	e7c6      	b.n	80166a4 <_svfiprintf_r+0x124>
 8016716:	fb05 2101 	mla	r1, r5, r1, r2
 801671a:	2301      	movs	r3, #1
 801671c:	4607      	mov	r7, r0
 801671e:	e7f0      	b.n	8016702 <_svfiprintf_r+0x182>
 8016720:	ab03      	add	r3, sp, #12
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	4622      	mov	r2, r4
 8016726:	4b11      	ldr	r3, [pc, #68]	; (801676c <_svfiprintf_r+0x1ec>)
 8016728:	a904      	add	r1, sp, #16
 801672a:	4640      	mov	r0, r8
 801672c:	f7fb ffd0 	bl	80126d0 <_printf_float>
 8016730:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016734:	4681      	mov	r9, r0
 8016736:	d1d6      	bne.n	80166e6 <_svfiprintf_r+0x166>
 8016738:	89a3      	ldrh	r3, [r4, #12]
 801673a:	065b      	lsls	r3, r3, #25
 801673c:	f53f af35 	bmi.w	80165aa <_svfiprintf_r+0x2a>
 8016740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016742:	b01d      	add	sp, #116	; 0x74
 8016744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016748:	ab03      	add	r3, sp, #12
 801674a:	9300      	str	r3, [sp, #0]
 801674c:	4622      	mov	r2, r4
 801674e:	4b07      	ldr	r3, [pc, #28]	; (801676c <_svfiprintf_r+0x1ec>)
 8016750:	a904      	add	r1, sp, #16
 8016752:	4640      	mov	r0, r8
 8016754:	f7fc fa72 	bl	8012c3c <_printf_i>
 8016758:	e7ea      	b.n	8016730 <_svfiprintf_r+0x1b0>
 801675a:	bf00      	nop
 801675c:	080179f4 	.word	0x080179f4
 8016760:	080179fa 	.word	0x080179fa
 8016764:	080179fe 	.word	0x080179fe
 8016768:	080126d1 	.word	0x080126d1
 801676c:	080164cd 	.word	0x080164cd

08016770 <_sungetc_r>:
 8016770:	b538      	push	{r3, r4, r5, lr}
 8016772:	1c4b      	adds	r3, r1, #1
 8016774:	4614      	mov	r4, r2
 8016776:	d103      	bne.n	8016780 <_sungetc_r+0x10>
 8016778:	f04f 35ff 	mov.w	r5, #4294967295
 801677c:	4628      	mov	r0, r5
 801677e:	bd38      	pop	{r3, r4, r5, pc}
 8016780:	8993      	ldrh	r3, [r2, #12]
 8016782:	f023 0320 	bic.w	r3, r3, #32
 8016786:	8193      	strh	r3, [r2, #12]
 8016788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801678a:	6852      	ldr	r2, [r2, #4]
 801678c:	b2cd      	uxtb	r5, r1
 801678e:	b18b      	cbz	r3, 80167b4 <_sungetc_r+0x44>
 8016790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016792:	4293      	cmp	r3, r2
 8016794:	dd08      	ble.n	80167a8 <_sungetc_r+0x38>
 8016796:	6823      	ldr	r3, [r4, #0]
 8016798:	1e5a      	subs	r2, r3, #1
 801679a:	6022      	str	r2, [r4, #0]
 801679c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80167a0:	6863      	ldr	r3, [r4, #4]
 80167a2:	3301      	adds	r3, #1
 80167a4:	6063      	str	r3, [r4, #4]
 80167a6:	e7e9      	b.n	801677c <_sungetc_r+0xc>
 80167a8:	4621      	mov	r1, r4
 80167aa:	f000 fd15 	bl	80171d8 <__submore>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d0f1      	beq.n	8016796 <_sungetc_r+0x26>
 80167b2:	e7e1      	b.n	8016778 <_sungetc_r+0x8>
 80167b4:	6921      	ldr	r1, [r4, #16]
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	b151      	cbz	r1, 80167d0 <_sungetc_r+0x60>
 80167ba:	4299      	cmp	r1, r3
 80167bc:	d208      	bcs.n	80167d0 <_sungetc_r+0x60>
 80167be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80167c2:	42a9      	cmp	r1, r5
 80167c4:	d104      	bne.n	80167d0 <_sungetc_r+0x60>
 80167c6:	3b01      	subs	r3, #1
 80167c8:	3201      	adds	r2, #1
 80167ca:	6023      	str	r3, [r4, #0]
 80167cc:	6062      	str	r2, [r4, #4]
 80167ce:	e7d5      	b.n	801677c <_sungetc_r+0xc>
 80167d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80167d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167d8:	6363      	str	r3, [r4, #52]	; 0x34
 80167da:	2303      	movs	r3, #3
 80167dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80167de:	4623      	mov	r3, r4
 80167e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80167e4:	6023      	str	r3, [r4, #0]
 80167e6:	2301      	movs	r3, #1
 80167e8:	e7dc      	b.n	80167a4 <_sungetc_r+0x34>

080167ea <__ssrefill_r>:
 80167ea:	b510      	push	{r4, lr}
 80167ec:	460c      	mov	r4, r1
 80167ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80167f0:	b169      	cbz	r1, 801680e <__ssrefill_r+0x24>
 80167f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167f6:	4299      	cmp	r1, r3
 80167f8:	d001      	beq.n	80167fe <__ssrefill_r+0x14>
 80167fa:	f7ff fdbf 	bl	801637c <_free_r>
 80167fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016800:	6063      	str	r3, [r4, #4]
 8016802:	2000      	movs	r0, #0
 8016804:	6360      	str	r0, [r4, #52]	; 0x34
 8016806:	b113      	cbz	r3, 801680e <__ssrefill_r+0x24>
 8016808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801680a:	6023      	str	r3, [r4, #0]
 801680c:	bd10      	pop	{r4, pc}
 801680e:	6923      	ldr	r3, [r4, #16]
 8016810:	6023      	str	r3, [r4, #0]
 8016812:	2300      	movs	r3, #0
 8016814:	6063      	str	r3, [r4, #4]
 8016816:	89a3      	ldrh	r3, [r4, #12]
 8016818:	f043 0320 	orr.w	r3, r3, #32
 801681c:	81a3      	strh	r3, [r4, #12]
 801681e:	f04f 30ff 	mov.w	r0, #4294967295
 8016822:	e7f3      	b.n	801680c <__ssrefill_r+0x22>

08016824 <__ssvfiscanf_r>:
 8016824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016828:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801682c:	460c      	mov	r4, r1
 801682e:	2100      	movs	r1, #0
 8016830:	9144      	str	r1, [sp, #272]	; 0x110
 8016832:	9145      	str	r1, [sp, #276]	; 0x114
 8016834:	499f      	ldr	r1, [pc, #636]	; (8016ab4 <__ssvfiscanf_r+0x290>)
 8016836:	91a0      	str	r1, [sp, #640]	; 0x280
 8016838:	f10d 0804 	add.w	r8, sp, #4
 801683c:	499e      	ldr	r1, [pc, #632]	; (8016ab8 <__ssvfiscanf_r+0x294>)
 801683e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016abc <__ssvfiscanf_r+0x298>
 8016842:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016846:	4606      	mov	r6, r0
 8016848:	4692      	mov	sl, r2
 801684a:	91a1      	str	r1, [sp, #644]	; 0x284
 801684c:	9300      	str	r3, [sp, #0]
 801684e:	270a      	movs	r7, #10
 8016850:	f89a 3000 	ldrb.w	r3, [sl]
 8016854:	2b00      	cmp	r3, #0
 8016856:	f000 812a 	beq.w	8016aae <__ssvfiscanf_r+0x28a>
 801685a:	4655      	mov	r5, sl
 801685c:	f7ff f8c8 	bl	80159f0 <__locale_ctype_ptr>
 8016860:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016864:	4458      	add	r0, fp
 8016866:	7843      	ldrb	r3, [r0, #1]
 8016868:	f013 0308 	ands.w	r3, r3, #8
 801686c:	d01c      	beq.n	80168a8 <__ssvfiscanf_r+0x84>
 801686e:	6863      	ldr	r3, [r4, #4]
 8016870:	2b00      	cmp	r3, #0
 8016872:	dd12      	ble.n	801689a <__ssvfiscanf_r+0x76>
 8016874:	f7ff f8bc 	bl	80159f0 <__locale_ctype_ptr>
 8016878:	6823      	ldr	r3, [r4, #0]
 801687a:	781a      	ldrb	r2, [r3, #0]
 801687c:	4410      	add	r0, r2
 801687e:	7842      	ldrb	r2, [r0, #1]
 8016880:	0712      	lsls	r2, r2, #28
 8016882:	d401      	bmi.n	8016888 <__ssvfiscanf_r+0x64>
 8016884:	46aa      	mov	sl, r5
 8016886:	e7e3      	b.n	8016850 <__ssvfiscanf_r+0x2c>
 8016888:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801688a:	3201      	adds	r2, #1
 801688c:	9245      	str	r2, [sp, #276]	; 0x114
 801688e:	6862      	ldr	r2, [r4, #4]
 8016890:	3301      	adds	r3, #1
 8016892:	3a01      	subs	r2, #1
 8016894:	6062      	str	r2, [r4, #4]
 8016896:	6023      	str	r3, [r4, #0]
 8016898:	e7e9      	b.n	801686e <__ssvfiscanf_r+0x4a>
 801689a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801689c:	4621      	mov	r1, r4
 801689e:	4630      	mov	r0, r6
 80168a0:	4798      	blx	r3
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d0e6      	beq.n	8016874 <__ssvfiscanf_r+0x50>
 80168a6:	e7ed      	b.n	8016884 <__ssvfiscanf_r+0x60>
 80168a8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80168ac:	f040 8082 	bne.w	80169b4 <__ssvfiscanf_r+0x190>
 80168b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80168b2:	9341      	str	r3, [sp, #260]	; 0x104
 80168b4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80168b8:	2b2a      	cmp	r3, #42	; 0x2a
 80168ba:	d103      	bne.n	80168c4 <__ssvfiscanf_r+0xa0>
 80168bc:	2310      	movs	r3, #16
 80168be:	9341      	str	r3, [sp, #260]	; 0x104
 80168c0:	f10a 0502 	add.w	r5, sl, #2
 80168c4:	46aa      	mov	sl, r5
 80168c6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80168ca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80168ce:	2a09      	cmp	r2, #9
 80168d0:	d922      	bls.n	8016918 <__ssvfiscanf_r+0xf4>
 80168d2:	2203      	movs	r2, #3
 80168d4:	4879      	ldr	r0, [pc, #484]	; (8016abc <__ssvfiscanf_r+0x298>)
 80168d6:	f7e9 fc9b 	bl	8000210 <memchr>
 80168da:	b138      	cbz	r0, 80168ec <__ssvfiscanf_r+0xc8>
 80168dc:	eba0 0309 	sub.w	r3, r0, r9
 80168e0:	2001      	movs	r0, #1
 80168e2:	4098      	lsls	r0, r3
 80168e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80168e6:	4318      	orrs	r0, r3
 80168e8:	9041      	str	r0, [sp, #260]	; 0x104
 80168ea:	46aa      	mov	sl, r5
 80168ec:	f89a 3000 	ldrb.w	r3, [sl]
 80168f0:	2b67      	cmp	r3, #103	; 0x67
 80168f2:	f10a 0501 	add.w	r5, sl, #1
 80168f6:	d82b      	bhi.n	8016950 <__ssvfiscanf_r+0x12c>
 80168f8:	2b65      	cmp	r3, #101	; 0x65
 80168fa:	f080 809f 	bcs.w	8016a3c <__ssvfiscanf_r+0x218>
 80168fe:	2b47      	cmp	r3, #71	; 0x47
 8016900:	d810      	bhi.n	8016924 <__ssvfiscanf_r+0x100>
 8016902:	2b45      	cmp	r3, #69	; 0x45
 8016904:	f080 809a 	bcs.w	8016a3c <__ssvfiscanf_r+0x218>
 8016908:	2b00      	cmp	r3, #0
 801690a:	d06c      	beq.n	80169e6 <__ssvfiscanf_r+0x1c2>
 801690c:	2b25      	cmp	r3, #37	; 0x25
 801690e:	d051      	beq.n	80169b4 <__ssvfiscanf_r+0x190>
 8016910:	2303      	movs	r3, #3
 8016912:	9347      	str	r3, [sp, #284]	; 0x11c
 8016914:	9742      	str	r7, [sp, #264]	; 0x108
 8016916:	e027      	b.n	8016968 <__ssvfiscanf_r+0x144>
 8016918:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801691a:	fb07 1303 	mla	r3, r7, r3, r1
 801691e:	3b30      	subs	r3, #48	; 0x30
 8016920:	9343      	str	r3, [sp, #268]	; 0x10c
 8016922:	e7cf      	b.n	80168c4 <__ssvfiscanf_r+0xa0>
 8016924:	2b5b      	cmp	r3, #91	; 0x5b
 8016926:	d06a      	beq.n	80169fe <__ssvfiscanf_r+0x1da>
 8016928:	d80c      	bhi.n	8016944 <__ssvfiscanf_r+0x120>
 801692a:	2b58      	cmp	r3, #88	; 0x58
 801692c:	d1f0      	bne.n	8016910 <__ssvfiscanf_r+0xec>
 801692e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016934:	9241      	str	r2, [sp, #260]	; 0x104
 8016936:	2210      	movs	r2, #16
 8016938:	9242      	str	r2, [sp, #264]	; 0x108
 801693a:	2b6e      	cmp	r3, #110	; 0x6e
 801693c:	bf8c      	ite	hi
 801693e:	2304      	movhi	r3, #4
 8016940:	2303      	movls	r3, #3
 8016942:	e010      	b.n	8016966 <__ssvfiscanf_r+0x142>
 8016944:	2b63      	cmp	r3, #99	; 0x63
 8016946:	d065      	beq.n	8016a14 <__ssvfiscanf_r+0x1f0>
 8016948:	2b64      	cmp	r3, #100	; 0x64
 801694a:	d1e1      	bne.n	8016910 <__ssvfiscanf_r+0xec>
 801694c:	9742      	str	r7, [sp, #264]	; 0x108
 801694e:	e7f4      	b.n	801693a <__ssvfiscanf_r+0x116>
 8016950:	2b70      	cmp	r3, #112	; 0x70
 8016952:	d04b      	beq.n	80169ec <__ssvfiscanf_r+0x1c8>
 8016954:	d826      	bhi.n	80169a4 <__ssvfiscanf_r+0x180>
 8016956:	2b6e      	cmp	r3, #110	; 0x6e
 8016958:	d062      	beq.n	8016a20 <__ssvfiscanf_r+0x1fc>
 801695a:	d84c      	bhi.n	80169f6 <__ssvfiscanf_r+0x1d2>
 801695c:	2b69      	cmp	r3, #105	; 0x69
 801695e:	d1d7      	bne.n	8016910 <__ssvfiscanf_r+0xec>
 8016960:	2300      	movs	r3, #0
 8016962:	9342      	str	r3, [sp, #264]	; 0x108
 8016964:	2303      	movs	r3, #3
 8016966:	9347      	str	r3, [sp, #284]	; 0x11c
 8016968:	6863      	ldr	r3, [r4, #4]
 801696a:	2b00      	cmp	r3, #0
 801696c:	dd68      	ble.n	8016a40 <__ssvfiscanf_r+0x21c>
 801696e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016970:	0659      	lsls	r1, r3, #25
 8016972:	d407      	bmi.n	8016984 <__ssvfiscanf_r+0x160>
 8016974:	f7ff f83c 	bl	80159f0 <__locale_ctype_ptr>
 8016978:	6823      	ldr	r3, [r4, #0]
 801697a:	781a      	ldrb	r2, [r3, #0]
 801697c:	4410      	add	r0, r2
 801697e:	7842      	ldrb	r2, [r0, #1]
 8016980:	0712      	lsls	r2, r2, #28
 8016982:	d464      	bmi.n	8016a4e <__ssvfiscanf_r+0x22a>
 8016984:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016986:	2b02      	cmp	r3, #2
 8016988:	dc73      	bgt.n	8016a72 <__ssvfiscanf_r+0x24e>
 801698a:	466b      	mov	r3, sp
 801698c:	4622      	mov	r2, r4
 801698e:	a941      	add	r1, sp, #260	; 0x104
 8016990:	4630      	mov	r0, r6
 8016992:	f000 f9d7 	bl	8016d44 <_scanf_chars>
 8016996:	2801      	cmp	r0, #1
 8016998:	f000 8089 	beq.w	8016aae <__ssvfiscanf_r+0x28a>
 801699c:	2802      	cmp	r0, #2
 801699e:	f47f af71 	bne.w	8016884 <__ssvfiscanf_r+0x60>
 80169a2:	e01d      	b.n	80169e0 <__ssvfiscanf_r+0x1bc>
 80169a4:	2b75      	cmp	r3, #117	; 0x75
 80169a6:	d0d1      	beq.n	801694c <__ssvfiscanf_r+0x128>
 80169a8:	2b78      	cmp	r3, #120	; 0x78
 80169aa:	d0c0      	beq.n	801692e <__ssvfiscanf_r+0x10a>
 80169ac:	2b73      	cmp	r3, #115	; 0x73
 80169ae:	d1af      	bne.n	8016910 <__ssvfiscanf_r+0xec>
 80169b0:	2302      	movs	r3, #2
 80169b2:	e7d8      	b.n	8016966 <__ssvfiscanf_r+0x142>
 80169b4:	6863      	ldr	r3, [r4, #4]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	dd0c      	ble.n	80169d4 <__ssvfiscanf_r+0x1b0>
 80169ba:	6823      	ldr	r3, [r4, #0]
 80169bc:	781a      	ldrb	r2, [r3, #0]
 80169be:	455a      	cmp	r2, fp
 80169c0:	d175      	bne.n	8016aae <__ssvfiscanf_r+0x28a>
 80169c2:	3301      	adds	r3, #1
 80169c4:	6862      	ldr	r2, [r4, #4]
 80169c6:	6023      	str	r3, [r4, #0]
 80169c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80169ca:	3a01      	subs	r2, #1
 80169cc:	3301      	adds	r3, #1
 80169ce:	6062      	str	r2, [r4, #4]
 80169d0:	9345      	str	r3, [sp, #276]	; 0x114
 80169d2:	e757      	b.n	8016884 <__ssvfiscanf_r+0x60>
 80169d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80169d6:	4621      	mov	r1, r4
 80169d8:	4630      	mov	r0, r6
 80169da:	4798      	blx	r3
 80169dc:	2800      	cmp	r0, #0
 80169de:	d0ec      	beq.n	80169ba <__ssvfiscanf_r+0x196>
 80169e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80169e2:	2800      	cmp	r0, #0
 80169e4:	d159      	bne.n	8016a9a <__ssvfiscanf_r+0x276>
 80169e6:	f04f 30ff 	mov.w	r0, #4294967295
 80169ea:	e05c      	b.n	8016aa6 <__ssvfiscanf_r+0x282>
 80169ec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80169ee:	f042 0220 	orr.w	r2, r2, #32
 80169f2:	9241      	str	r2, [sp, #260]	; 0x104
 80169f4:	e79b      	b.n	801692e <__ssvfiscanf_r+0x10a>
 80169f6:	2308      	movs	r3, #8
 80169f8:	9342      	str	r3, [sp, #264]	; 0x108
 80169fa:	2304      	movs	r3, #4
 80169fc:	e7b3      	b.n	8016966 <__ssvfiscanf_r+0x142>
 80169fe:	4629      	mov	r1, r5
 8016a00:	4640      	mov	r0, r8
 8016a02:	f000 fb19 	bl	8017038 <__sccl>
 8016a06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a0c:	9341      	str	r3, [sp, #260]	; 0x104
 8016a0e:	4605      	mov	r5, r0
 8016a10:	2301      	movs	r3, #1
 8016a12:	e7a8      	b.n	8016966 <__ssvfiscanf_r+0x142>
 8016a14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a1a:	9341      	str	r3, [sp, #260]	; 0x104
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	e7a2      	b.n	8016966 <__ssvfiscanf_r+0x142>
 8016a20:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016a22:	06c3      	lsls	r3, r0, #27
 8016a24:	f53f af2e 	bmi.w	8016884 <__ssvfiscanf_r+0x60>
 8016a28:	9b00      	ldr	r3, [sp, #0]
 8016a2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016a2c:	1d19      	adds	r1, r3, #4
 8016a2e:	9100      	str	r1, [sp, #0]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	07c0      	lsls	r0, r0, #31
 8016a34:	bf4c      	ite	mi
 8016a36:	801a      	strhmi	r2, [r3, #0]
 8016a38:	601a      	strpl	r2, [r3, #0]
 8016a3a:	e723      	b.n	8016884 <__ssvfiscanf_r+0x60>
 8016a3c:	2305      	movs	r3, #5
 8016a3e:	e792      	b.n	8016966 <__ssvfiscanf_r+0x142>
 8016a40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a42:	4621      	mov	r1, r4
 8016a44:	4630      	mov	r0, r6
 8016a46:	4798      	blx	r3
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	d090      	beq.n	801696e <__ssvfiscanf_r+0x14a>
 8016a4c:	e7c8      	b.n	80169e0 <__ssvfiscanf_r+0x1bc>
 8016a4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016a50:	3201      	adds	r2, #1
 8016a52:	9245      	str	r2, [sp, #276]	; 0x114
 8016a54:	6862      	ldr	r2, [r4, #4]
 8016a56:	3a01      	subs	r2, #1
 8016a58:	2a00      	cmp	r2, #0
 8016a5a:	6062      	str	r2, [r4, #4]
 8016a5c:	dd02      	ble.n	8016a64 <__ssvfiscanf_r+0x240>
 8016a5e:	3301      	adds	r3, #1
 8016a60:	6023      	str	r3, [r4, #0]
 8016a62:	e787      	b.n	8016974 <__ssvfiscanf_r+0x150>
 8016a64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a66:	4621      	mov	r1, r4
 8016a68:	4630      	mov	r0, r6
 8016a6a:	4798      	blx	r3
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	d081      	beq.n	8016974 <__ssvfiscanf_r+0x150>
 8016a70:	e7b6      	b.n	80169e0 <__ssvfiscanf_r+0x1bc>
 8016a72:	2b04      	cmp	r3, #4
 8016a74:	dc06      	bgt.n	8016a84 <__ssvfiscanf_r+0x260>
 8016a76:	466b      	mov	r3, sp
 8016a78:	4622      	mov	r2, r4
 8016a7a:	a941      	add	r1, sp, #260	; 0x104
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f000 f9c5 	bl	8016e0c <_scanf_i>
 8016a82:	e788      	b.n	8016996 <__ssvfiscanf_r+0x172>
 8016a84:	4b0e      	ldr	r3, [pc, #56]	; (8016ac0 <__ssvfiscanf_r+0x29c>)
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	f43f aefc 	beq.w	8016884 <__ssvfiscanf_r+0x60>
 8016a8c:	466b      	mov	r3, sp
 8016a8e:	4622      	mov	r2, r4
 8016a90:	a941      	add	r1, sp, #260	; 0x104
 8016a92:	4630      	mov	r0, r6
 8016a94:	f7fc f9e4 	bl	8012e60 <_scanf_float>
 8016a98:	e77d      	b.n	8016996 <__ssvfiscanf_r+0x172>
 8016a9a:	89a3      	ldrh	r3, [r4, #12]
 8016a9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016aa0:	bf18      	it	ne
 8016aa2:	f04f 30ff 	movne.w	r0, #4294967295
 8016aa6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aae:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016ab0:	e7f9      	b.n	8016aa6 <__ssvfiscanf_r+0x282>
 8016ab2:	bf00      	nop
 8016ab4:	08016771 	.word	0x08016771
 8016ab8:	080167eb 	.word	0x080167eb
 8016abc:	080179fa 	.word	0x080179fa
 8016ac0:	08012e61 	.word	0x08012e61

08016ac4 <__sfputc_r>:
 8016ac4:	6893      	ldr	r3, [r2, #8]
 8016ac6:	3b01      	subs	r3, #1
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	b410      	push	{r4}
 8016acc:	6093      	str	r3, [r2, #8]
 8016ace:	da08      	bge.n	8016ae2 <__sfputc_r+0x1e>
 8016ad0:	6994      	ldr	r4, [r2, #24]
 8016ad2:	42a3      	cmp	r3, r4
 8016ad4:	db01      	blt.n	8016ada <__sfputc_r+0x16>
 8016ad6:	290a      	cmp	r1, #10
 8016ad8:	d103      	bne.n	8016ae2 <__sfputc_r+0x1e>
 8016ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ade:	f7fd bbbd 	b.w	801425c <__swbuf_r>
 8016ae2:	6813      	ldr	r3, [r2, #0]
 8016ae4:	1c58      	adds	r0, r3, #1
 8016ae6:	6010      	str	r0, [r2, #0]
 8016ae8:	7019      	strb	r1, [r3, #0]
 8016aea:	4608      	mov	r0, r1
 8016aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016af0:	4770      	bx	lr

08016af2 <__sfputs_r>:
 8016af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af4:	4606      	mov	r6, r0
 8016af6:	460f      	mov	r7, r1
 8016af8:	4614      	mov	r4, r2
 8016afa:	18d5      	adds	r5, r2, r3
 8016afc:	42ac      	cmp	r4, r5
 8016afe:	d101      	bne.n	8016b04 <__sfputs_r+0x12>
 8016b00:	2000      	movs	r0, #0
 8016b02:	e007      	b.n	8016b14 <__sfputs_r+0x22>
 8016b04:	463a      	mov	r2, r7
 8016b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7ff ffda 	bl	8016ac4 <__sfputc_r>
 8016b10:	1c43      	adds	r3, r0, #1
 8016b12:	d1f3      	bne.n	8016afc <__sfputs_r+0xa>
 8016b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016b18 <_vfiprintf_r>:
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	460c      	mov	r4, r1
 8016b1e:	b09d      	sub	sp, #116	; 0x74
 8016b20:	4617      	mov	r7, r2
 8016b22:	461d      	mov	r5, r3
 8016b24:	4606      	mov	r6, r0
 8016b26:	b118      	cbz	r0, 8016b30 <_vfiprintf_r+0x18>
 8016b28:	6983      	ldr	r3, [r0, #24]
 8016b2a:	b90b      	cbnz	r3, 8016b30 <_vfiprintf_r+0x18>
 8016b2c:	f7fe fbac 	bl	8015288 <__sinit>
 8016b30:	4b7c      	ldr	r3, [pc, #496]	; (8016d24 <_vfiprintf_r+0x20c>)
 8016b32:	429c      	cmp	r4, r3
 8016b34:	d158      	bne.n	8016be8 <_vfiprintf_r+0xd0>
 8016b36:	6874      	ldr	r4, [r6, #4]
 8016b38:	89a3      	ldrh	r3, [r4, #12]
 8016b3a:	0718      	lsls	r0, r3, #28
 8016b3c:	d55e      	bpl.n	8016bfc <_vfiprintf_r+0xe4>
 8016b3e:	6923      	ldr	r3, [r4, #16]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d05b      	beq.n	8016bfc <_vfiprintf_r+0xe4>
 8016b44:	2300      	movs	r3, #0
 8016b46:	9309      	str	r3, [sp, #36]	; 0x24
 8016b48:	2320      	movs	r3, #32
 8016b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b4e:	2330      	movs	r3, #48	; 0x30
 8016b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b54:	9503      	str	r5, [sp, #12]
 8016b56:	f04f 0b01 	mov.w	fp, #1
 8016b5a:	46b8      	mov	r8, r7
 8016b5c:	4645      	mov	r5, r8
 8016b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016b62:	b10b      	cbz	r3, 8016b68 <_vfiprintf_r+0x50>
 8016b64:	2b25      	cmp	r3, #37	; 0x25
 8016b66:	d154      	bne.n	8016c12 <_vfiprintf_r+0xfa>
 8016b68:	ebb8 0a07 	subs.w	sl, r8, r7
 8016b6c:	d00b      	beq.n	8016b86 <_vfiprintf_r+0x6e>
 8016b6e:	4653      	mov	r3, sl
 8016b70:	463a      	mov	r2, r7
 8016b72:	4621      	mov	r1, r4
 8016b74:	4630      	mov	r0, r6
 8016b76:	f7ff ffbc 	bl	8016af2 <__sfputs_r>
 8016b7a:	3001      	adds	r0, #1
 8016b7c:	f000 80c2 	beq.w	8016d04 <_vfiprintf_r+0x1ec>
 8016b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b82:	4453      	add	r3, sl
 8016b84:	9309      	str	r3, [sp, #36]	; 0x24
 8016b86:	f898 3000 	ldrb.w	r3, [r8]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	f000 80ba 	beq.w	8016d04 <_vfiprintf_r+0x1ec>
 8016b90:	2300      	movs	r3, #0
 8016b92:	f04f 32ff 	mov.w	r2, #4294967295
 8016b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b9a:	9304      	str	r3, [sp, #16]
 8016b9c:	9307      	str	r3, [sp, #28]
 8016b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8016ba4:	46a8      	mov	r8, r5
 8016ba6:	2205      	movs	r2, #5
 8016ba8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016bac:	485e      	ldr	r0, [pc, #376]	; (8016d28 <_vfiprintf_r+0x210>)
 8016bae:	f7e9 fb2f 	bl	8000210 <memchr>
 8016bb2:	9b04      	ldr	r3, [sp, #16]
 8016bb4:	bb78      	cbnz	r0, 8016c16 <_vfiprintf_r+0xfe>
 8016bb6:	06d9      	lsls	r1, r3, #27
 8016bb8:	bf44      	itt	mi
 8016bba:	2220      	movmi	r2, #32
 8016bbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bc0:	071a      	lsls	r2, r3, #28
 8016bc2:	bf44      	itt	mi
 8016bc4:	222b      	movmi	r2, #43	; 0x2b
 8016bc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bca:	782a      	ldrb	r2, [r5, #0]
 8016bcc:	2a2a      	cmp	r2, #42	; 0x2a
 8016bce:	d02a      	beq.n	8016c26 <_vfiprintf_r+0x10e>
 8016bd0:	9a07      	ldr	r2, [sp, #28]
 8016bd2:	46a8      	mov	r8, r5
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	250a      	movs	r5, #10
 8016bd8:	4641      	mov	r1, r8
 8016bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bde:	3b30      	subs	r3, #48	; 0x30
 8016be0:	2b09      	cmp	r3, #9
 8016be2:	d969      	bls.n	8016cb8 <_vfiprintf_r+0x1a0>
 8016be4:	b360      	cbz	r0, 8016c40 <_vfiprintf_r+0x128>
 8016be6:	e024      	b.n	8016c32 <_vfiprintf_r+0x11a>
 8016be8:	4b50      	ldr	r3, [pc, #320]	; (8016d2c <_vfiprintf_r+0x214>)
 8016bea:	429c      	cmp	r4, r3
 8016bec:	d101      	bne.n	8016bf2 <_vfiprintf_r+0xda>
 8016bee:	68b4      	ldr	r4, [r6, #8]
 8016bf0:	e7a2      	b.n	8016b38 <_vfiprintf_r+0x20>
 8016bf2:	4b4f      	ldr	r3, [pc, #316]	; (8016d30 <_vfiprintf_r+0x218>)
 8016bf4:	429c      	cmp	r4, r3
 8016bf6:	bf08      	it	eq
 8016bf8:	68f4      	ldreq	r4, [r6, #12]
 8016bfa:	e79d      	b.n	8016b38 <_vfiprintf_r+0x20>
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f7fd fb90 	bl	8014324 <__swsetup_r>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d09d      	beq.n	8016b44 <_vfiprintf_r+0x2c>
 8016c08:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0c:	b01d      	add	sp, #116	; 0x74
 8016c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c12:	46a8      	mov	r8, r5
 8016c14:	e7a2      	b.n	8016b5c <_vfiprintf_r+0x44>
 8016c16:	4a44      	ldr	r2, [pc, #272]	; (8016d28 <_vfiprintf_r+0x210>)
 8016c18:	1a80      	subs	r0, r0, r2
 8016c1a:	fa0b f000 	lsl.w	r0, fp, r0
 8016c1e:	4318      	orrs	r0, r3
 8016c20:	9004      	str	r0, [sp, #16]
 8016c22:	4645      	mov	r5, r8
 8016c24:	e7be      	b.n	8016ba4 <_vfiprintf_r+0x8c>
 8016c26:	9a03      	ldr	r2, [sp, #12]
 8016c28:	1d11      	adds	r1, r2, #4
 8016c2a:	6812      	ldr	r2, [r2, #0]
 8016c2c:	9103      	str	r1, [sp, #12]
 8016c2e:	2a00      	cmp	r2, #0
 8016c30:	db01      	blt.n	8016c36 <_vfiprintf_r+0x11e>
 8016c32:	9207      	str	r2, [sp, #28]
 8016c34:	e004      	b.n	8016c40 <_vfiprintf_r+0x128>
 8016c36:	4252      	negs	r2, r2
 8016c38:	f043 0302 	orr.w	r3, r3, #2
 8016c3c:	9207      	str	r2, [sp, #28]
 8016c3e:	9304      	str	r3, [sp, #16]
 8016c40:	f898 3000 	ldrb.w	r3, [r8]
 8016c44:	2b2e      	cmp	r3, #46	; 0x2e
 8016c46:	d10e      	bne.n	8016c66 <_vfiprintf_r+0x14e>
 8016c48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8016c4e:	d138      	bne.n	8016cc2 <_vfiprintf_r+0x1aa>
 8016c50:	9b03      	ldr	r3, [sp, #12]
 8016c52:	1d1a      	adds	r2, r3, #4
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	9203      	str	r2, [sp, #12]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	bfb8      	it	lt
 8016c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c60:	f108 0802 	add.w	r8, r8, #2
 8016c64:	9305      	str	r3, [sp, #20]
 8016c66:	4d33      	ldr	r5, [pc, #204]	; (8016d34 <_vfiprintf_r+0x21c>)
 8016c68:	f898 1000 	ldrb.w	r1, [r8]
 8016c6c:	2203      	movs	r2, #3
 8016c6e:	4628      	mov	r0, r5
 8016c70:	f7e9 face 	bl	8000210 <memchr>
 8016c74:	b140      	cbz	r0, 8016c88 <_vfiprintf_r+0x170>
 8016c76:	2340      	movs	r3, #64	; 0x40
 8016c78:	1b40      	subs	r0, r0, r5
 8016c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8016c7e:	9b04      	ldr	r3, [sp, #16]
 8016c80:	4303      	orrs	r3, r0
 8016c82:	f108 0801 	add.w	r8, r8, #1
 8016c86:	9304      	str	r3, [sp, #16]
 8016c88:	f898 1000 	ldrb.w	r1, [r8]
 8016c8c:	482a      	ldr	r0, [pc, #168]	; (8016d38 <_vfiprintf_r+0x220>)
 8016c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c92:	2206      	movs	r2, #6
 8016c94:	f108 0701 	add.w	r7, r8, #1
 8016c98:	f7e9 faba 	bl	8000210 <memchr>
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d037      	beq.n	8016d10 <_vfiprintf_r+0x1f8>
 8016ca0:	4b26      	ldr	r3, [pc, #152]	; (8016d3c <_vfiprintf_r+0x224>)
 8016ca2:	bb1b      	cbnz	r3, 8016cec <_vfiprintf_r+0x1d4>
 8016ca4:	9b03      	ldr	r3, [sp, #12]
 8016ca6:	3307      	adds	r3, #7
 8016ca8:	f023 0307 	bic.w	r3, r3, #7
 8016cac:	3308      	adds	r3, #8
 8016cae:	9303      	str	r3, [sp, #12]
 8016cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cb2:	444b      	add	r3, r9
 8016cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8016cb6:	e750      	b.n	8016b5a <_vfiprintf_r+0x42>
 8016cb8:	fb05 3202 	mla	r2, r5, r2, r3
 8016cbc:	2001      	movs	r0, #1
 8016cbe:	4688      	mov	r8, r1
 8016cc0:	e78a      	b.n	8016bd8 <_vfiprintf_r+0xc0>
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	f108 0801 	add.w	r8, r8, #1
 8016cc8:	9305      	str	r3, [sp, #20]
 8016cca:	4619      	mov	r1, r3
 8016ccc:	250a      	movs	r5, #10
 8016cce:	4640      	mov	r0, r8
 8016cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016cd4:	3a30      	subs	r2, #48	; 0x30
 8016cd6:	2a09      	cmp	r2, #9
 8016cd8:	d903      	bls.n	8016ce2 <_vfiprintf_r+0x1ca>
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d0c3      	beq.n	8016c66 <_vfiprintf_r+0x14e>
 8016cde:	9105      	str	r1, [sp, #20]
 8016ce0:	e7c1      	b.n	8016c66 <_vfiprintf_r+0x14e>
 8016ce2:	fb05 2101 	mla	r1, r5, r1, r2
 8016ce6:	2301      	movs	r3, #1
 8016ce8:	4680      	mov	r8, r0
 8016cea:	e7f0      	b.n	8016cce <_vfiprintf_r+0x1b6>
 8016cec:	ab03      	add	r3, sp, #12
 8016cee:	9300      	str	r3, [sp, #0]
 8016cf0:	4622      	mov	r2, r4
 8016cf2:	4b13      	ldr	r3, [pc, #76]	; (8016d40 <_vfiprintf_r+0x228>)
 8016cf4:	a904      	add	r1, sp, #16
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	f7fb fcea 	bl	80126d0 <_printf_float>
 8016cfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016d00:	4681      	mov	r9, r0
 8016d02:	d1d5      	bne.n	8016cb0 <_vfiprintf_r+0x198>
 8016d04:	89a3      	ldrh	r3, [r4, #12]
 8016d06:	065b      	lsls	r3, r3, #25
 8016d08:	f53f af7e 	bmi.w	8016c08 <_vfiprintf_r+0xf0>
 8016d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d0e:	e77d      	b.n	8016c0c <_vfiprintf_r+0xf4>
 8016d10:	ab03      	add	r3, sp, #12
 8016d12:	9300      	str	r3, [sp, #0]
 8016d14:	4622      	mov	r2, r4
 8016d16:	4b0a      	ldr	r3, [pc, #40]	; (8016d40 <_vfiprintf_r+0x228>)
 8016d18:	a904      	add	r1, sp, #16
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f7fb ff8e 	bl	8012c3c <_printf_i>
 8016d20:	e7ec      	b.n	8016cfc <_vfiprintf_r+0x1e4>
 8016d22:	bf00      	nop
 8016d24:	080178a8 	.word	0x080178a8
 8016d28:	080179f4 	.word	0x080179f4
 8016d2c:	080178c8 	.word	0x080178c8
 8016d30:	08017888 	.word	0x08017888
 8016d34:	080179fa 	.word	0x080179fa
 8016d38:	080179fe 	.word	0x080179fe
 8016d3c:	080126d1 	.word	0x080126d1
 8016d40:	08016af3 	.word	0x08016af3

08016d44 <_scanf_chars>:
 8016d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d48:	4615      	mov	r5, r2
 8016d4a:	688a      	ldr	r2, [r1, #8]
 8016d4c:	4680      	mov	r8, r0
 8016d4e:	460c      	mov	r4, r1
 8016d50:	b932      	cbnz	r2, 8016d60 <_scanf_chars+0x1c>
 8016d52:	698a      	ldr	r2, [r1, #24]
 8016d54:	2a00      	cmp	r2, #0
 8016d56:	bf14      	ite	ne
 8016d58:	f04f 32ff 	movne.w	r2, #4294967295
 8016d5c:	2201      	moveq	r2, #1
 8016d5e:	608a      	str	r2, [r1, #8]
 8016d60:	6822      	ldr	r2, [r4, #0]
 8016d62:	06d1      	lsls	r1, r2, #27
 8016d64:	bf5f      	itttt	pl
 8016d66:	681a      	ldrpl	r2, [r3, #0]
 8016d68:	1d11      	addpl	r1, r2, #4
 8016d6a:	6019      	strpl	r1, [r3, #0]
 8016d6c:	6817      	ldrpl	r7, [r2, #0]
 8016d6e:	2600      	movs	r6, #0
 8016d70:	69a3      	ldr	r3, [r4, #24]
 8016d72:	b1db      	cbz	r3, 8016dac <_scanf_chars+0x68>
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d107      	bne.n	8016d88 <_scanf_chars+0x44>
 8016d78:	682b      	ldr	r3, [r5, #0]
 8016d7a:	6962      	ldr	r2, [r4, #20]
 8016d7c:	781b      	ldrb	r3, [r3, #0]
 8016d7e:	5cd3      	ldrb	r3, [r2, r3]
 8016d80:	b9a3      	cbnz	r3, 8016dac <_scanf_chars+0x68>
 8016d82:	2e00      	cmp	r6, #0
 8016d84:	d132      	bne.n	8016dec <_scanf_chars+0xa8>
 8016d86:	e006      	b.n	8016d96 <_scanf_chars+0x52>
 8016d88:	2b02      	cmp	r3, #2
 8016d8a:	d007      	beq.n	8016d9c <_scanf_chars+0x58>
 8016d8c:	2e00      	cmp	r6, #0
 8016d8e:	d12d      	bne.n	8016dec <_scanf_chars+0xa8>
 8016d90:	69a3      	ldr	r3, [r4, #24]
 8016d92:	2b01      	cmp	r3, #1
 8016d94:	d12a      	bne.n	8016dec <_scanf_chars+0xa8>
 8016d96:	2001      	movs	r0, #1
 8016d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9c:	f7fe fe28 	bl	80159f0 <__locale_ctype_ptr>
 8016da0:	682b      	ldr	r3, [r5, #0]
 8016da2:	781b      	ldrb	r3, [r3, #0]
 8016da4:	4418      	add	r0, r3
 8016da6:	7843      	ldrb	r3, [r0, #1]
 8016da8:	071b      	lsls	r3, r3, #28
 8016daa:	d4ef      	bmi.n	8016d8c <_scanf_chars+0x48>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	06da      	lsls	r2, r3, #27
 8016db0:	bf5e      	ittt	pl
 8016db2:	682b      	ldrpl	r3, [r5, #0]
 8016db4:	781b      	ldrbpl	r3, [r3, #0]
 8016db6:	703b      	strbpl	r3, [r7, #0]
 8016db8:	682a      	ldr	r2, [r5, #0]
 8016dba:	686b      	ldr	r3, [r5, #4]
 8016dbc:	f102 0201 	add.w	r2, r2, #1
 8016dc0:	602a      	str	r2, [r5, #0]
 8016dc2:	68a2      	ldr	r2, [r4, #8]
 8016dc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8016dc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8016dcc:	606b      	str	r3, [r5, #4]
 8016dce:	f106 0601 	add.w	r6, r6, #1
 8016dd2:	bf58      	it	pl
 8016dd4:	3701      	addpl	r7, #1
 8016dd6:	60a2      	str	r2, [r4, #8]
 8016dd8:	b142      	cbz	r2, 8016dec <_scanf_chars+0xa8>
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	dcc8      	bgt.n	8016d70 <_scanf_chars+0x2c>
 8016dde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016de2:	4629      	mov	r1, r5
 8016de4:	4640      	mov	r0, r8
 8016de6:	4798      	blx	r3
 8016de8:	2800      	cmp	r0, #0
 8016dea:	d0c1      	beq.n	8016d70 <_scanf_chars+0x2c>
 8016dec:	6823      	ldr	r3, [r4, #0]
 8016dee:	f013 0310 	ands.w	r3, r3, #16
 8016df2:	d105      	bne.n	8016e00 <_scanf_chars+0xbc>
 8016df4:	68e2      	ldr	r2, [r4, #12]
 8016df6:	3201      	adds	r2, #1
 8016df8:	60e2      	str	r2, [r4, #12]
 8016dfa:	69a2      	ldr	r2, [r4, #24]
 8016dfc:	b102      	cbz	r2, 8016e00 <_scanf_chars+0xbc>
 8016dfe:	703b      	strb	r3, [r7, #0]
 8016e00:	6923      	ldr	r3, [r4, #16]
 8016e02:	441e      	add	r6, r3
 8016e04:	6126      	str	r6, [r4, #16]
 8016e06:	2000      	movs	r0, #0
 8016e08:	e7c6      	b.n	8016d98 <_scanf_chars+0x54>
	...

08016e0c <_scanf_i>:
 8016e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e10:	469a      	mov	sl, r3
 8016e12:	4b74      	ldr	r3, [pc, #464]	; (8016fe4 <_scanf_i+0x1d8>)
 8016e14:	460c      	mov	r4, r1
 8016e16:	4683      	mov	fp, r0
 8016e18:	4616      	mov	r6, r2
 8016e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016e1e:	b087      	sub	sp, #28
 8016e20:	ab03      	add	r3, sp, #12
 8016e22:	68a7      	ldr	r7, [r4, #8]
 8016e24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016e28:	4b6f      	ldr	r3, [pc, #444]	; (8016fe8 <_scanf_i+0x1dc>)
 8016e2a:	69a1      	ldr	r1, [r4, #24]
 8016e2c:	4a6f      	ldr	r2, [pc, #444]	; (8016fec <_scanf_i+0x1e0>)
 8016e2e:	2903      	cmp	r1, #3
 8016e30:	bf08      	it	eq
 8016e32:	461a      	moveq	r2, r3
 8016e34:	1e7b      	subs	r3, r7, #1
 8016e36:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016e3a:	bf84      	itt	hi
 8016e3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016e40:	60a3      	strhi	r3, [r4, #8]
 8016e42:	6823      	ldr	r3, [r4, #0]
 8016e44:	9200      	str	r2, [sp, #0]
 8016e46:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016e4a:	bf88      	it	hi
 8016e4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016e50:	f104 091c 	add.w	r9, r4, #28
 8016e54:	6023      	str	r3, [r4, #0]
 8016e56:	bf8c      	ite	hi
 8016e58:	197f      	addhi	r7, r7, r5
 8016e5a:	2700      	movls	r7, #0
 8016e5c:	464b      	mov	r3, r9
 8016e5e:	f04f 0800 	mov.w	r8, #0
 8016e62:	9301      	str	r3, [sp, #4]
 8016e64:	6831      	ldr	r1, [r6, #0]
 8016e66:	ab03      	add	r3, sp, #12
 8016e68:	2202      	movs	r2, #2
 8016e6a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016e6e:	7809      	ldrb	r1, [r1, #0]
 8016e70:	f7e9 f9ce 	bl	8000210 <memchr>
 8016e74:	9b01      	ldr	r3, [sp, #4]
 8016e76:	b330      	cbz	r0, 8016ec6 <_scanf_i+0xba>
 8016e78:	f1b8 0f01 	cmp.w	r8, #1
 8016e7c:	d15a      	bne.n	8016f34 <_scanf_i+0x128>
 8016e7e:	6862      	ldr	r2, [r4, #4]
 8016e80:	b92a      	cbnz	r2, 8016e8e <_scanf_i+0x82>
 8016e82:	6822      	ldr	r2, [r4, #0]
 8016e84:	2108      	movs	r1, #8
 8016e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e8a:	6061      	str	r1, [r4, #4]
 8016e8c:	6022      	str	r2, [r4, #0]
 8016e8e:	6822      	ldr	r2, [r4, #0]
 8016e90:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016e94:	6022      	str	r2, [r4, #0]
 8016e96:	68a2      	ldr	r2, [r4, #8]
 8016e98:	1e51      	subs	r1, r2, #1
 8016e9a:	60a1      	str	r1, [r4, #8]
 8016e9c:	b19a      	cbz	r2, 8016ec6 <_scanf_i+0xba>
 8016e9e:	6832      	ldr	r2, [r6, #0]
 8016ea0:	1c51      	adds	r1, r2, #1
 8016ea2:	6031      	str	r1, [r6, #0]
 8016ea4:	7812      	ldrb	r2, [r2, #0]
 8016ea6:	701a      	strb	r2, [r3, #0]
 8016ea8:	1c5d      	adds	r5, r3, #1
 8016eaa:	6873      	ldr	r3, [r6, #4]
 8016eac:	3b01      	subs	r3, #1
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	6073      	str	r3, [r6, #4]
 8016eb2:	dc07      	bgt.n	8016ec4 <_scanf_i+0xb8>
 8016eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016eb8:	4631      	mov	r1, r6
 8016eba:	4658      	mov	r0, fp
 8016ebc:	4798      	blx	r3
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	f040 8086 	bne.w	8016fd0 <_scanf_i+0x1c4>
 8016ec4:	462b      	mov	r3, r5
 8016ec6:	f108 0801 	add.w	r8, r8, #1
 8016eca:	f1b8 0f03 	cmp.w	r8, #3
 8016ece:	d1c8      	bne.n	8016e62 <_scanf_i+0x56>
 8016ed0:	6862      	ldr	r2, [r4, #4]
 8016ed2:	b90a      	cbnz	r2, 8016ed8 <_scanf_i+0xcc>
 8016ed4:	220a      	movs	r2, #10
 8016ed6:	6062      	str	r2, [r4, #4]
 8016ed8:	6862      	ldr	r2, [r4, #4]
 8016eda:	4945      	ldr	r1, [pc, #276]	; (8016ff0 <_scanf_i+0x1e4>)
 8016edc:	6960      	ldr	r0, [r4, #20]
 8016ede:	9301      	str	r3, [sp, #4]
 8016ee0:	1a89      	subs	r1, r1, r2
 8016ee2:	f000 f8a9 	bl	8017038 <__sccl>
 8016ee6:	9b01      	ldr	r3, [sp, #4]
 8016ee8:	f04f 0800 	mov.w	r8, #0
 8016eec:	461d      	mov	r5, r3
 8016eee:	68a3      	ldr	r3, [r4, #8]
 8016ef0:	6822      	ldr	r2, [r4, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d03a      	beq.n	8016f6c <_scanf_i+0x160>
 8016ef6:	6831      	ldr	r1, [r6, #0]
 8016ef8:	6960      	ldr	r0, [r4, #20]
 8016efa:	f891 c000 	ldrb.w	ip, [r1]
 8016efe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d032      	beq.n	8016f6c <_scanf_i+0x160>
 8016f06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016f0a:	d121      	bne.n	8016f50 <_scanf_i+0x144>
 8016f0c:	0510      	lsls	r0, r2, #20
 8016f0e:	d51f      	bpl.n	8016f50 <_scanf_i+0x144>
 8016f10:	f108 0801 	add.w	r8, r8, #1
 8016f14:	b117      	cbz	r7, 8016f1c <_scanf_i+0x110>
 8016f16:	3301      	adds	r3, #1
 8016f18:	3f01      	subs	r7, #1
 8016f1a:	60a3      	str	r3, [r4, #8]
 8016f1c:	6873      	ldr	r3, [r6, #4]
 8016f1e:	3b01      	subs	r3, #1
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	6073      	str	r3, [r6, #4]
 8016f24:	dd1b      	ble.n	8016f5e <_scanf_i+0x152>
 8016f26:	6833      	ldr	r3, [r6, #0]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	6033      	str	r3, [r6, #0]
 8016f2c:	68a3      	ldr	r3, [r4, #8]
 8016f2e:	3b01      	subs	r3, #1
 8016f30:	60a3      	str	r3, [r4, #8]
 8016f32:	e7dc      	b.n	8016eee <_scanf_i+0xe2>
 8016f34:	f1b8 0f02 	cmp.w	r8, #2
 8016f38:	d1ad      	bne.n	8016e96 <_scanf_i+0x8a>
 8016f3a:	6822      	ldr	r2, [r4, #0]
 8016f3c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016f40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016f44:	d1bf      	bne.n	8016ec6 <_scanf_i+0xba>
 8016f46:	2110      	movs	r1, #16
 8016f48:	6061      	str	r1, [r4, #4]
 8016f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016f4e:	e7a1      	b.n	8016e94 <_scanf_i+0x88>
 8016f50:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016f54:	6022      	str	r2, [r4, #0]
 8016f56:	780b      	ldrb	r3, [r1, #0]
 8016f58:	702b      	strb	r3, [r5, #0]
 8016f5a:	3501      	adds	r5, #1
 8016f5c:	e7de      	b.n	8016f1c <_scanf_i+0x110>
 8016f5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016f62:	4631      	mov	r1, r6
 8016f64:	4658      	mov	r0, fp
 8016f66:	4798      	blx	r3
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	d0df      	beq.n	8016f2c <_scanf_i+0x120>
 8016f6c:	6823      	ldr	r3, [r4, #0]
 8016f6e:	05d9      	lsls	r1, r3, #23
 8016f70:	d50c      	bpl.n	8016f8c <_scanf_i+0x180>
 8016f72:	454d      	cmp	r5, r9
 8016f74:	d908      	bls.n	8016f88 <_scanf_i+0x17c>
 8016f76:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f7e:	4632      	mov	r2, r6
 8016f80:	4658      	mov	r0, fp
 8016f82:	4798      	blx	r3
 8016f84:	1e6f      	subs	r7, r5, #1
 8016f86:	463d      	mov	r5, r7
 8016f88:	454d      	cmp	r5, r9
 8016f8a:	d029      	beq.n	8016fe0 <_scanf_i+0x1d4>
 8016f8c:	6822      	ldr	r2, [r4, #0]
 8016f8e:	f012 0210 	ands.w	r2, r2, #16
 8016f92:	d113      	bne.n	8016fbc <_scanf_i+0x1b0>
 8016f94:	702a      	strb	r2, [r5, #0]
 8016f96:	6863      	ldr	r3, [r4, #4]
 8016f98:	9e00      	ldr	r6, [sp, #0]
 8016f9a:	4649      	mov	r1, r9
 8016f9c:	4658      	mov	r0, fp
 8016f9e:	47b0      	blx	r6
 8016fa0:	f8da 3000 	ldr.w	r3, [sl]
 8016fa4:	6821      	ldr	r1, [r4, #0]
 8016fa6:	1d1a      	adds	r2, r3, #4
 8016fa8:	f8ca 2000 	str.w	r2, [sl]
 8016fac:	f011 0f20 	tst.w	r1, #32
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	d010      	beq.n	8016fd6 <_scanf_i+0x1ca>
 8016fb4:	6018      	str	r0, [r3, #0]
 8016fb6:	68e3      	ldr	r3, [r4, #12]
 8016fb8:	3301      	adds	r3, #1
 8016fba:	60e3      	str	r3, [r4, #12]
 8016fbc:	eba5 0509 	sub.w	r5, r5, r9
 8016fc0:	44a8      	add	r8, r5
 8016fc2:	6925      	ldr	r5, [r4, #16]
 8016fc4:	4445      	add	r5, r8
 8016fc6:	6125      	str	r5, [r4, #16]
 8016fc8:	2000      	movs	r0, #0
 8016fca:	b007      	add	sp, #28
 8016fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fd0:	f04f 0800 	mov.w	r8, #0
 8016fd4:	e7ca      	b.n	8016f6c <_scanf_i+0x160>
 8016fd6:	07ca      	lsls	r2, r1, #31
 8016fd8:	bf4c      	ite	mi
 8016fda:	8018      	strhmi	r0, [r3, #0]
 8016fdc:	6018      	strpl	r0, [r3, #0]
 8016fde:	e7ea      	b.n	8016fb6 <_scanf_i+0x1aa>
 8016fe0:	2001      	movs	r0, #1
 8016fe2:	e7f2      	b.n	8016fca <_scanf_i+0x1be>
 8016fe4:	08017544 	.word	0x08017544
 8016fe8:	080141f9 	.word	0x080141f9
 8016fec:	080171b5 	.word	0x080171b5
 8016ff0:	08017a15 	.word	0x08017a15

08016ff4 <_read_r>:
 8016ff4:	b538      	push	{r3, r4, r5, lr}
 8016ff6:	4c07      	ldr	r4, [pc, #28]	; (8017014 <_read_r+0x20>)
 8016ff8:	4605      	mov	r5, r0
 8016ffa:	4608      	mov	r0, r1
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	2200      	movs	r2, #0
 8017000:	6022      	str	r2, [r4, #0]
 8017002:	461a      	mov	r2, r3
 8017004:	f7ee fc28 	bl	8005858 <_read>
 8017008:	1c43      	adds	r3, r0, #1
 801700a:	d102      	bne.n	8017012 <_read_r+0x1e>
 801700c:	6823      	ldr	r3, [r4, #0]
 801700e:	b103      	cbz	r3, 8017012 <_read_r+0x1e>
 8017010:	602b      	str	r3, [r5, #0]
 8017012:	bd38      	pop	{r3, r4, r5, pc}
 8017014:	2003b434 	.word	0x2003b434

08017018 <_sbrk_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4c06      	ldr	r4, [pc, #24]	; (8017034 <_sbrk_r+0x1c>)
 801701c:	2300      	movs	r3, #0
 801701e:	4605      	mov	r5, r0
 8017020:	4608      	mov	r0, r1
 8017022:	6023      	str	r3, [r4, #0]
 8017024:	f7ee fc6a 	bl	80058fc <_sbrk>
 8017028:	1c43      	adds	r3, r0, #1
 801702a:	d102      	bne.n	8017032 <_sbrk_r+0x1a>
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	b103      	cbz	r3, 8017032 <_sbrk_r+0x1a>
 8017030:	602b      	str	r3, [r5, #0]
 8017032:	bd38      	pop	{r3, r4, r5, pc}
 8017034:	2003b434 	.word	0x2003b434

08017038 <__sccl>:
 8017038:	b570      	push	{r4, r5, r6, lr}
 801703a:	780b      	ldrb	r3, [r1, #0]
 801703c:	2b5e      	cmp	r3, #94	; 0x5e
 801703e:	bf13      	iteet	ne
 8017040:	1c4a      	addne	r2, r1, #1
 8017042:	1c8a      	addeq	r2, r1, #2
 8017044:	784b      	ldrbeq	r3, [r1, #1]
 8017046:	2100      	movne	r1, #0
 8017048:	bf08      	it	eq
 801704a:	2101      	moveq	r1, #1
 801704c:	1e44      	subs	r4, r0, #1
 801704e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017052:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017056:	42ac      	cmp	r4, r5
 8017058:	d1fb      	bne.n	8017052 <__sccl+0x1a>
 801705a:	b913      	cbnz	r3, 8017062 <__sccl+0x2a>
 801705c:	3a01      	subs	r2, #1
 801705e:	4610      	mov	r0, r2
 8017060:	bd70      	pop	{r4, r5, r6, pc}
 8017062:	f081 0401 	eor.w	r4, r1, #1
 8017066:	54c4      	strb	r4, [r0, r3]
 8017068:	1c51      	adds	r1, r2, #1
 801706a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801706e:	2d2d      	cmp	r5, #45	; 0x2d
 8017070:	f101 36ff 	add.w	r6, r1, #4294967295
 8017074:	460a      	mov	r2, r1
 8017076:	d006      	beq.n	8017086 <__sccl+0x4e>
 8017078:	2d5d      	cmp	r5, #93	; 0x5d
 801707a:	d0f0      	beq.n	801705e <__sccl+0x26>
 801707c:	b90d      	cbnz	r5, 8017082 <__sccl+0x4a>
 801707e:	4632      	mov	r2, r6
 8017080:	e7ed      	b.n	801705e <__sccl+0x26>
 8017082:	462b      	mov	r3, r5
 8017084:	e7ef      	b.n	8017066 <__sccl+0x2e>
 8017086:	780e      	ldrb	r6, [r1, #0]
 8017088:	2e5d      	cmp	r6, #93	; 0x5d
 801708a:	d0fa      	beq.n	8017082 <__sccl+0x4a>
 801708c:	42b3      	cmp	r3, r6
 801708e:	dcf8      	bgt.n	8017082 <__sccl+0x4a>
 8017090:	3301      	adds	r3, #1
 8017092:	429e      	cmp	r6, r3
 8017094:	54c4      	strb	r4, [r0, r3]
 8017096:	dcfb      	bgt.n	8017090 <__sccl+0x58>
 8017098:	3102      	adds	r1, #2
 801709a:	e7e6      	b.n	801706a <__sccl+0x32>

0801709c <strncmp>:
 801709c:	b510      	push	{r4, lr}
 801709e:	b16a      	cbz	r2, 80170bc <strncmp+0x20>
 80170a0:	3901      	subs	r1, #1
 80170a2:	1884      	adds	r4, r0, r2
 80170a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80170a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80170ac:	4293      	cmp	r3, r2
 80170ae:	d103      	bne.n	80170b8 <strncmp+0x1c>
 80170b0:	42a0      	cmp	r0, r4
 80170b2:	d001      	beq.n	80170b8 <strncmp+0x1c>
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d1f5      	bne.n	80170a4 <strncmp+0x8>
 80170b8:	1a98      	subs	r0, r3, r2
 80170ba:	bd10      	pop	{r4, pc}
 80170bc:	4610      	mov	r0, r2
 80170be:	e7fc      	b.n	80170ba <strncmp+0x1e>

080170c0 <_strtoul_l.isra.0>:
 80170c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170c4:	4680      	mov	r8, r0
 80170c6:	4689      	mov	r9, r1
 80170c8:	4692      	mov	sl, r2
 80170ca:	461e      	mov	r6, r3
 80170cc:	460f      	mov	r7, r1
 80170ce:	463d      	mov	r5, r7
 80170d0:	9808      	ldr	r0, [sp, #32]
 80170d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80170d6:	f7fe fc87 	bl	80159e8 <__locale_ctype_ptr_l>
 80170da:	4420      	add	r0, r4
 80170dc:	7843      	ldrb	r3, [r0, #1]
 80170de:	f013 0308 	ands.w	r3, r3, #8
 80170e2:	d130      	bne.n	8017146 <_strtoul_l.isra.0+0x86>
 80170e4:	2c2d      	cmp	r4, #45	; 0x2d
 80170e6:	d130      	bne.n	801714a <_strtoul_l.isra.0+0x8a>
 80170e8:	787c      	ldrb	r4, [r7, #1]
 80170ea:	1cbd      	adds	r5, r7, #2
 80170ec:	2101      	movs	r1, #1
 80170ee:	2e00      	cmp	r6, #0
 80170f0:	d05c      	beq.n	80171ac <_strtoul_l.isra.0+0xec>
 80170f2:	2e10      	cmp	r6, #16
 80170f4:	d109      	bne.n	801710a <_strtoul_l.isra.0+0x4a>
 80170f6:	2c30      	cmp	r4, #48	; 0x30
 80170f8:	d107      	bne.n	801710a <_strtoul_l.isra.0+0x4a>
 80170fa:	782b      	ldrb	r3, [r5, #0]
 80170fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017100:	2b58      	cmp	r3, #88	; 0x58
 8017102:	d14e      	bne.n	80171a2 <_strtoul_l.isra.0+0xe2>
 8017104:	786c      	ldrb	r4, [r5, #1]
 8017106:	2610      	movs	r6, #16
 8017108:	3502      	adds	r5, #2
 801710a:	f04f 32ff 	mov.w	r2, #4294967295
 801710e:	2300      	movs	r3, #0
 8017110:	fbb2 f2f6 	udiv	r2, r2, r6
 8017114:	fb06 fc02 	mul.w	ip, r6, r2
 8017118:	ea6f 0c0c 	mvn.w	ip, ip
 801711c:	4618      	mov	r0, r3
 801711e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017122:	2f09      	cmp	r7, #9
 8017124:	d817      	bhi.n	8017156 <_strtoul_l.isra.0+0x96>
 8017126:	463c      	mov	r4, r7
 8017128:	42a6      	cmp	r6, r4
 801712a:	dd23      	ble.n	8017174 <_strtoul_l.isra.0+0xb4>
 801712c:	2b00      	cmp	r3, #0
 801712e:	db1e      	blt.n	801716e <_strtoul_l.isra.0+0xae>
 8017130:	4282      	cmp	r2, r0
 8017132:	d31c      	bcc.n	801716e <_strtoul_l.isra.0+0xae>
 8017134:	d101      	bne.n	801713a <_strtoul_l.isra.0+0x7a>
 8017136:	45a4      	cmp	ip, r4
 8017138:	db19      	blt.n	801716e <_strtoul_l.isra.0+0xae>
 801713a:	fb00 4006 	mla	r0, r0, r6, r4
 801713e:	2301      	movs	r3, #1
 8017140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017144:	e7eb      	b.n	801711e <_strtoul_l.isra.0+0x5e>
 8017146:	462f      	mov	r7, r5
 8017148:	e7c1      	b.n	80170ce <_strtoul_l.isra.0+0xe>
 801714a:	2c2b      	cmp	r4, #43	; 0x2b
 801714c:	bf04      	itt	eq
 801714e:	1cbd      	addeq	r5, r7, #2
 8017150:	787c      	ldrbeq	r4, [r7, #1]
 8017152:	4619      	mov	r1, r3
 8017154:	e7cb      	b.n	80170ee <_strtoul_l.isra.0+0x2e>
 8017156:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801715a:	2f19      	cmp	r7, #25
 801715c:	d801      	bhi.n	8017162 <_strtoul_l.isra.0+0xa2>
 801715e:	3c37      	subs	r4, #55	; 0x37
 8017160:	e7e2      	b.n	8017128 <_strtoul_l.isra.0+0x68>
 8017162:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017166:	2f19      	cmp	r7, #25
 8017168:	d804      	bhi.n	8017174 <_strtoul_l.isra.0+0xb4>
 801716a:	3c57      	subs	r4, #87	; 0x57
 801716c:	e7dc      	b.n	8017128 <_strtoul_l.isra.0+0x68>
 801716e:	f04f 33ff 	mov.w	r3, #4294967295
 8017172:	e7e5      	b.n	8017140 <_strtoul_l.isra.0+0x80>
 8017174:	2b00      	cmp	r3, #0
 8017176:	da09      	bge.n	801718c <_strtoul_l.isra.0+0xcc>
 8017178:	2322      	movs	r3, #34	; 0x22
 801717a:	f8c8 3000 	str.w	r3, [r8]
 801717e:	f04f 30ff 	mov.w	r0, #4294967295
 8017182:	f1ba 0f00 	cmp.w	sl, #0
 8017186:	d107      	bne.n	8017198 <_strtoul_l.isra.0+0xd8>
 8017188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801718c:	b101      	cbz	r1, 8017190 <_strtoul_l.isra.0+0xd0>
 801718e:	4240      	negs	r0, r0
 8017190:	f1ba 0f00 	cmp.w	sl, #0
 8017194:	d0f8      	beq.n	8017188 <_strtoul_l.isra.0+0xc8>
 8017196:	b10b      	cbz	r3, 801719c <_strtoul_l.isra.0+0xdc>
 8017198:	f105 39ff 	add.w	r9, r5, #4294967295
 801719c:	f8ca 9000 	str.w	r9, [sl]
 80171a0:	e7f2      	b.n	8017188 <_strtoul_l.isra.0+0xc8>
 80171a2:	2430      	movs	r4, #48	; 0x30
 80171a4:	2e00      	cmp	r6, #0
 80171a6:	d1b0      	bne.n	801710a <_strtoul_l.isra.0+0x4a>
 80171a8:	2608      	movs	r6, #8
 80171aa:	e7ae      	b.n	801710a <_strtoul_l.isra.0+0x4a>
 80171ac:	2c30      	cmp	r4, #48	; 0x30
 80171ae:	d0a4      	beq.n	80170fa <_strtoul_l.isra.0+0x3a>
 80171b0:	260a      	movs	r6, #10
 80171b2:	e7aa      	b.n	801710a <_strtoul_l.isra.0+0x4a>

080171b4 <_strtoul_r>:
 80171b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171b6:	4c06      	ldr	r4, [pc, #24]	; (80171d0 <_strtoul_r+0x1c>)
 80171b8:	4d06      	ldr	r5, [pc, #24]	; (80171d4 <_strtoul_r+0x20>)
 80171ba:	6824      	ldr	r4, [r4, #0]
 80171bc:	6a24      	ldr	r4, [r4, #32]
 80171be:	2c00      	cmp	r4, #0
 80171c0:	bf08      	it	eq
 80171c2:	462c      	moveq	r4, r5
 80171c4:	9400      	str	r4, [sp, #0]
 80171c6:	f7ff ff7b 	bl	80170c0 <_strtoul_l.isra.0>
 80171ca:	b003      	add	sp, #12
 80171cc:	bd30      	pop	{r4, r5, pc}
 80171ce:	bf00      	nop
 80171d0:	2000000c 	.word	0x2000000c
 80171d4:	20000070 	.word	0x20000070

080171d8 <__submore>:
 80171d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171dc:	460c      	mov	r4, r1
 80171de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80171e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171e4:	4299      	cmp	r1, r3
 80171e6:	d11d      	bne.n	8017224 <__submore+0x4c>
 80171e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80171ec:	f7ff f914 	bl	8016418 <_malloc_r>
 80171f0:	b918      	cbnz	r0, 80171fa <__submore+0x22>
 80171f2:	f04f 30ff 	mov.w	r0, #4294967295
 80171f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8017200:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017204:	6360      	str	r0, [r4, #52]	; 0x34
 8017206:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801720a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801720e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017212:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017216:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801721a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801721e:	6020      	str	r0, [r4, #0]
 8017220:	2000      	movs	r0, #0
 8017222:	e7e8      	b.n	80171f6 <__submore+0x1e>
 8017224:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017226:	0077      	lsls	r7, r6, #1
 8017228:	463a      	mov	r2, r7
 801722a:	f000 f85a 	bl	80172e2 <_realloc_r>
 801722e:	4605      	mov	r5, r0
 8017230:	2800      	cmp	r0, #0
 8017232:	d0de      	beq.n	80171f2 <__submore+0x1a>
 8017234:	eb00 0806 	add.w	r8, r0, r6
 8017238:	4601      	mov	r1, r0
 801723a:	4632      	mov	r2, r6
 801723c:	4640      	mov	r0, r8
 801723e:	f7fe fc85 	bl	8015b4c <memcpy>
 8017242:	f8c4 8000 	str.w	r8, [r4]
 8017246:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801724a:	e7e9      	b.n	8017220 <__submore+0x48>

0801724c <__ascii_wctomb>:
 801724c:	b149      	cbz	r1, 8017262 <__ascii_wctomb+0x16>
 801724e:	2aff      	cmp	r2, #255	; 0xff
 8017250:	bf85      	ittet	hi
 8017252:	238a      	movhi	r3, #138	; 0x8a
 8017254:	6003      	strhi	r3, [r0, #0]
 8017256:	700a      	strbls	r2, [r1, #0]
 8017258:	f04f 30ff 	movhi.w	r0, #4294967295
 801725c:	bf98      	it	ls
 801725e:	2001      	movls	r0, #1
 8017260:	4770      	bx	lr
 8017262:	4608      	mov	r0, r1
 8017264:	4770      	bx	lr
	...

08017268 <_fstat_r>:
 8017268:	b538      	push	{r3, r4, r5, lr}
 801726a:	4c07      	ldr	r4, [pc, #28]	; (8017288 <_fstat_r+0x20>)
 801726c:	2300      	movs	r3, #0
 801726e:	4605      	mov	r5, r0
 8017270:	4608      	mov	r0, r1
 8017272:	4611      	mov	r1, r2
 8017274:	6023      	str	r3, [r4, #0]
 8017276:	f7ee fb18 	bl	80058aa <_fstat>
 801727a:	1c43      	adds	r3, r0, #1
 801727c:	d102      	bne.n	8017284 <_fstat_r+0x1c>
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	b103      	cbz	r3, 8017284 <_fstat_r+0x1c>
 8017282:	602b      	str	r3, [r5, #0]
 8017284:	bd38      	pop	{r3, r4, r5, pc}
 8017286:	bf00      	nop
 8017288:	2003b434 	.word	0x2003b434

0801728c <_isatty_r>:
 801728c:	b538      	push	{r3, r4, r5, lr}
 801728e:	4c06      	ldr	r4, [pc, #24]	; (80172a8 <_isatty_r+0x1c>)
 8017290:	2300      	movs	r3, #0
 8017292:	4605      	mov	r5, r0
 8017294:	4608      	mov	r0, r1
 8017296:	6023      	str	r3, [r4, #0]
 8017298:	f7ee fb17 	bl	80058ca <_isatty>
 801729c:	1c43      	adds	r3, r0, #1
 801729e:	d102      	bne.n	80172a6 <_isatty_r+0x1a>
 80172a0:	6823      	ldr	r3, [r4, #0]
 80172a2:	b103      	cbz	r3, 80172a6 <_isatty_r+0x1a>
 80172a4:	602b      	str	r3, [r5, #0]
 80172a6:	bd38      	pop	{r3, r4, r5, pc}
 80172a8:	2003b434 	.word	0x2003b434

080172ac <memmove>:
 80172ac:	4288      	cmp	r0, r1
 80172ae:	b510      	push	{r4, lr}
 80172b0:	eb01 0302 	add.w	r3, r1, r2
 80172b4:	d807      	bhi.n	80172c6 <memmove+0x1a>
 80172b6:	1e42      	subs	r2, r0, #1
 80172b8:	4299      	cmp	r1, r3
 80172ba:	d00a      	beq.n	80172d2 <memmove+0x26>
 80172bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80172c4:	e7f8      	b.n	80172b8 <memmove+0xc>
 80172c6:	4283      	cmp	r3, r0
 80172c8:	d9f5      	bls.n	80172b6 <memmove+0xa>
 80172ca:	1881      	adds	r1, r0, r2
 80172cc:	1ad2      	subs	r2, r2, r3
 80172ce:	42d3      	cmn	r3, r2
 80172d0:	d100      	bne.n	80172d4 <memmove+0x28>
 80172d2:	bd10      	pop	{r4, pc}
 80172d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80172dc:	e7f7      	b.n	80172ce <memmove+0x22>

080172de <__malloc_lock>:
 80172de:	4770      	bx	lr

080172e0 <__malloc_unlock>:
 80172e0:	4770      	bx	lr

080172e2 <_realloc_r>:
 80172e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172e4:	4607      	mov	r7, r0
 80172e6:	4614      	mov	r4, r2
 80172e8:	460e      	mov	r6, r1
 80172ea:	b921      	cbnz	r1, 80172f6 <_realloc_r+0x14>
 80172ec:	4611      	mov	r1, r2
 80172ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80172f2:	f7ff b891 	b.w	8016418 <_malloc_r>
 80172f6:	b922      	cbnz	r2, 8017302 <_realloc_r+0x20>
 80172f8:	f7ff f840 	bl	801637c <_free_r>
 80172fc:	4625      	mov	r5, r4
 80172fe:	4628      	mov	r0, r5
 8017300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017302:	f000 f814 	bl	801732e <_malloc_usable_size_r>
 8017306:	42a0      	cmp	r0, r4
 8017308:	d20f      	bcs.n	801732a <_realloc_r+0x48>
 801730a:	4621      	mov	r1, r4
 801730c:	4638      	mov	r0, r7
 801730e:	f7ff f883 	bl	8016418 <_malloc_r>
 8017312:	4605      	mov	r5, r0
 8017314:	2800      	cmp	r0, #0
 8017316:	d0f2      	beq.n	80172fe <_realloc_r+0x1c>
 8017318:	4631      	mov	r1, r6
 801731a:	4622      	mov	r2, r4
 801731c:	f7fe fc16 	bl	8015b4c <memcpy>
 8017320:	4631      	mov	r1, r6
 8017322:	4638      	mov	r0, r7
 8017324:	f7ff f82a 	bl	801637c <_free_r>
 8017328:	e7e9      	b.n	80172fe <_realloc_r+0x1c>
 801732a:	4635      	mov	r5, r6
 801732c:	e7e7      	b.n	80172fe <_realloc_r+0x1c>

0801732e <_malloc_usable_size_r>:
 801732e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017332:	1f18      	subs	r0, r3, #4
 8017334:	2b00      	cmp	r3, #0
 8017336:	bfbc      	itt	lt
 8017338:	580b      	ldrlt	r3, [r1, r0]
 801733a:	18c0      	addlt	r0, r0, r3
 801733c:	4770      	bx	lr
	...

08017340 <_init>:
 8017340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017342:	bf00      	nop
 8017344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017346:	bc08      	pop	{r3}
 8017348:	469e      	mov	lr, r3
 801734a:	4770      	bx	lr

0801734c <_fini>:
 801734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801734e:	bf00      	nop
 8017350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017352:	bc08      	pop	{r3}
 8017354:	469e      	mov	lr, r3
 8017356:	4770      	bx	lr
