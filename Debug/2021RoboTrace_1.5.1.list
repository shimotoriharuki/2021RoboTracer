
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ad8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08018c98  08018c98  00028c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019814  08019814  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019814  08019814  00029814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801981c  0801981c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801981c  0801981c  0002981c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019824  08019824  00029824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c90  200001e0  08019a04  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e70  08019a04  00030e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000390e5  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000794d  00000000  00000000  000692f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a8  00000000  00000000  00070c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe8  00000000  00000000  00072ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035241  00000000  00000000  00074ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025bbb  00000000  00000000  000aa111  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c28  00000000  00000000  000cfccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e08f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4e4  00000000  00000000  001e0970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018c80 	.word	0x08018c80

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018c80 	.word	0x08018c80

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 faf6 	bl	800a5c8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e968 	.word	0x2003e968

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fade 	bl	800a5c8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e968 	.word	0x2003e968

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 f97f 	bl	800a324 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 fee6 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 fee0 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 feda 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fed4 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fece 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fec8 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 fec2 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 febc 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 feb6 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 feb0 	bl	8008df8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fea4 	bl	8008df8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fe9e 	bl	8008df8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f97d 	bl	8016428 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d f89e 	bl	800e2f8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d f89a 	bl	800e2f8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003ebbc 	.word	0x2003ebbc
 80011e0:	2003e8a0 	.word	0x2003e8a0
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 fc2e 	bl	8012dac <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d7ac 	.word	0x2003d7ac

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 fff9 	bl	8015590 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 fc72 	bl	8012e94 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 fc6d 	bl	8012e94 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f011 f9db 	bl	8012982 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018c98 	.word	0x08018c98
 80015f8:	2003d71c 	.word	0x2003d71c
 80015fc:	2003d7ac 	.word	0x2003d7ac
 8001600:	2003d79c 	.word	0x2003d79c

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 fbe9 	bl	8012e00 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fe54 	bl	80132dc <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 fbe3 	bl	8012e00 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 ff94 	bl	8015590 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 fc10 	bl	8012e94 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f011 f97e 	bl	8012982 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 fb82 	bl	8012dac <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d61c 	.word	0x2003d61c
 80016b8:	2003c4dc 	.word	0x2003c4dc
 80016bc:	08018cb4 	.word	0x08018cb4
 80016c0:	08018c98 	.word	0x08018c98
 80016c4:	2003d71c 	.word	0x2003d71c
 80016c8:	2003d7ac 	.word	0x2003d7ac
 80016cc:	2003d79c 	.word	0x2003d79c

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 ff97 	bl	8015638 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 ffb2 	bl	8013698 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 fb34 	bl	8012dac <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08018ca4 	.word	0x08018ca4
 8001754:	2003d71c 	.word	0x2003d71c
 8001758:	2003d7ac 	.word	0x2003d7ac

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 ff51 	bl	8015638 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 ff6c 	bl	8013698 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 faee 	bl	8012dac <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018cb0 	.word	0x08018cb0
 80017e0:	2003d71c 	.word	0x2003d71c
 80017e4:	2003d7ac 	.word	0x2003d7ac

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fd50 	bl	801229c <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018cc0 	.word	0x08018cc0
 800181c:	2003c5dc 	.word	0x2003c5dc

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 ff2f 	bl	8015690 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 ff2b 	bl	8015690 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d61c 	.word	0x2003d61c
 8001848:	2003c4dc 	.word	0x2003c4dc

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fe05 	bl	8013460 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 fad2 	bl	8012e00 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 fd61 	bl	8012328 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 faca 	bl	8012e00 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d61c 	.word	0x2003d61c
 8001874:	2003c4dc 	.word	0x2003c4dc
 8001878:	2003d7ac 	.word	0x2003d7ac
 800187c:	08018cb4 	.word	0x08018cb4

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d71c 	.word	0x2003d71c

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fd28 	bl	800a324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b fed1 	bl	800d684 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b fffe 	bl	800d8ec <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fd14 	bl	800a324 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e848 	.word	0x2003e848

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fcf7 	bl	800a324 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b fea0 	bl	800d684 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b fe9a 	bl	800d684 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fce4 	bl	800a324 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e848 	.word	0x2003e848

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7e4 	.word	0x2003e7e4
 8001a2c:	2003e7e2 	.word	0x2003e7e2
 8001a30:	2003e7dc 	.word	0x2003e7dc

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f007 f9a2 	bl	8008df8 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08018cc4 	.word	0x08018cc4
 8001ac0:	08018cd0 	.word	0x08018cd0
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7e4 	.word	0x2003e7e4
 8001b6c:	2003e7e2 	.word	0x2003e7e2
 8001b70:	2003e7dc 	.word	0x2003e7dc
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f007 f8ec 	bl	8008df8 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f896 	bl	8008df8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08018cd4 	.word	0x08018cd4
 8001d34:	08018ce0 	.word	0x08018ce0

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 fc37 	bl	800a5c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fd2b 	bl	800a7c4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9fc 	.word	0x2003e9fc

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 fbff 	bl	800a5c8 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9fc 	.word	0x2003e9fc

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f008 fa55 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f008 fa45 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f008 fa34 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f008 fa24 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f008 fa14 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 fa05 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 f9ff 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f008 f9f9 	bl	800a324 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 f9ef 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 f9e9 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f008 f9e3 	bl	800a324 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 f9d9 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 f9d3 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f008 f9cd 	bl	800a324 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f008 f9c3 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f008 f9bd 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f008 f9b7 	bl	800a324 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f008 f9ad 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f008 f9a7 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f008 f9a1 	bl	800a324 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f008 f997 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f008 f991 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f008 f98b 	bl	800a324 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f008 f981 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f008 f97b 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f008 f975 	bl	800a324 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f008 f96b 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f008 f965 	bl	800a324 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f008 f95f 	bl	800a324 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f008 f946 	bl	800a324 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f008 f93b 	bl	800a324 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f008 f931 	bl	800a324 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f008 f926 	bl	800a324 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 fe7e 	bl	8008ec4 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e920 	.word	0x2003e920

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fcdb 	bl	8008df8 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fc4e 	bl	8004e2c <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018cec 	.word	0x08018cec
 800266c:	08018cf8 	.word	0x08018cf8
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), correction_check_cnt_(0)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e0:	3314      	adds	r3, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027ec:	3316      	adds	r3, #22
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027f8:	3318      	adds	r3, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002810:	334e      	adds	r3, #78	; 0x4e
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800281c:	3350      	adds	r3, #80	; 0x50
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002828:	3351      	adds	r3, #81	; 0x51
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002834:	3352      	adds	r3, #82	; 0x52
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800285c:	335c      	adds	r3, #92	; 0x5c
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]

{
	motor_ = motor;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002884:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	82fb      	strh	r3, [r7, #22]
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	f241 726f 	movw	r2, #5999	; 0x176f
 800289c:	4293      	cmp	r3, r2
 800289e:	d80e      	bhi.n	80028be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17e>
		velocity_table_[i] = 0;
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028a8:	3314      	adds	r3, #20
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	3301      	adds	r3, #1
 80028ba:	82fb      	strh	r3, [r7, #22]
 80028bc:	e7eb      	b.n	8002896 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	82bb      	strh	r3, [r7, #20]
 80028c2:	8abb      	ldrh	r3, [r7, #20]
 80028c4:	2b63      	cmp	r3, #99	; 0x63
 80028c6:	d80e      	bhi.n	80028e6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
		crossline_distance_[i] = 0;
 80028c8:	8abb      	ldrh	r3, [r7, #20]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028d0:	3306      	adds	r3, #6
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028de:	8abb      	ldrh	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	82bb      	strh	r3, [r7, #20]
 80028e4:	e7ed      	b.n	80028c2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x182>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	827b      	strh	r3, [r7, #18]
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f0:	d20e      	bcs.n	8002910 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
		sideline_distance_[i] = 0;
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028fa:	332a      	adds	r3, #42	; 0x2a
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	3301      	adds	r3, #1
 800290c:	827b      	strh	r3, [r7, #18]
 800290e:	e7ec      	b.n	80028ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1aa>
	}
}
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002974:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029cc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029d4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdcd 	bl	8000578 <__aeabi_f2d>
 80029de:	a318      	add	r3, pc, #96	; (adr r3, 8002a40 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe20 	bl	8000628 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4625      	mov	r5, r4
 80029ee:	461c      	mov	r4, r3
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdbf 	bl	8000578 <__aeabi_f2d>
 80029fa:	a313      	add	r3, pc, #76	; (adr r3, 8002a48 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc56 	bl	80002bc <__adddf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	4618      	mov	r0, r3
 8002a16:	4621      	mov	r1, r4
 8002a18:	f7fe f8fe 	bl	8000c18 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a24:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a2a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	ee07 3a90 	vmov	s15, r3

}
 8002a32:	eeb0 0a67 	vmov.f32	s0, s15
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	47ae147b 	.word	0x47ae147b
 8002a44:	3fb47ae1 	.word	0x3fb47ae1
 8002a48:	d70a3d71 	.word	0xd70a3d71
 8002a4c:	3fed70a3 	.word	0x3fed70a3
 8002a50:	2000025c 	.word	0x2000025c
 8002a54:	20000280 	.word	0x20000280
 8002a58:	20000260 	.word	0x20000260
 8002a5c:	00000000 	.word	0x00000000

08002a60 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff59 	bl	8002920 <_ZN9LineTrace9calcErrorEv>
 8002a6e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd5d 	bl	8000578 <__aeabi_f2d>
 8002abe:	a32a      	add	r3, pc, #168	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd feda 	bl	800087c <__aeabi_ddiv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4618      	mov	r0, r3
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f7fe f8a2 	bl	8000c18 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd4b 	bl	8000578 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd3e 	bl	8000578 <__aeabi_f2d>
 8002afc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd91 	bl	8000628 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbd5 	bl	80002bc <__adddf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f7fe f87d 	bl	8000c18 <__aeabi_d2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b22:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b48:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	4610      	mov	r0, r2
 8002b52:	f002 fd4d 	bl	80055f0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6013      	str	r3, [r2, #0]

}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	f3af 8000 	nop.w
 8002b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b6c:	3f50624d 	.word	0x3f50624d
 8002b70:	20000288 	.word	0x20000288
 8002b74:	20000284 	.word	0x20000284

08002b78 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fc8f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 f80e 	bl	8004bb0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fd39 	bl	8004610 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fd9e 	bl	80046fc <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c00:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d50f      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d506      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d94d      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ca2:	3352      	adds	r3, #82	; 0x52
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cae:	3318      	adds	r3, #24
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f98b 	bl	8003fd4 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cbe:	e032      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 f9f7 	bl	80040b4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e028      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	dd0f      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd06      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d908      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000268 	.word	0x20000268
 8002d38:	2000026c 	.word	0x2000026c
 8002d3c:	2000028f 	.word	0x2000028f
 8002d40:	44160000 	.word	0x44160000
 8002d44:	2000028c 	.word	0x2000028c
 8002d48:	2000028e 	.word	0x2000028e
 8002d4c:	43fa0000 	.word	0x43fa0000

08002d50 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d62:	3318      	adds	r3, #24
 8002d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d133      	bne.n	8002dd4 <_ZN9LineTrace15radius2VelocityEf+0x84>
		if(radius < 200) velocity = 1.3;
 8002d6c:	edd7 7a00 	vldr	s15, [r7]
 8002d70:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002ed0 <_ZN9LineTrace15radius2VelocityEf+0x180>
 8002d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d501      	bpl.n	8002d82 <_ZN9LineTrace15radius2VelocityEf+0x32>
 8002d7e:	4b55      	ldr	r3, [pc, #340]	; (8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x184>)
 8002d80:	60fb      	str	r3, [r7, #12]
		if(radius < 500) velocity = 1.6;
 8002d82:	edd7 7a00 	vldr	s15, [r7]
 8002d86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	d502      	bpl.n	8002d9a <_ZN9LineTrace15radius2VelocityEf+0x4a>
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <_ZN9LineTrace15radius2VelocityEf+0x18c>)
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e08f      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1500) velocity = 1.8;
 8002d9a:	edd7 7a00 	vldr	s15, [r7]
 8002d9e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d502      	bpl.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0x62>
 8002dac:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x194>)
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e083      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 2000) velocity = 2.0;
 8002db2:	edd7 7a00 	vldr	s15, [r7]
 8002db6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x198>
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	d503      	bpl.n	8002dcc <_ZN9LineTrace15radius2VelocityEf+0x7c>
 8002dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e076      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else velocity = max_velocity_;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e072      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dda:	3318      	adds	r3, #24
 8002ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d168      	bne.n	8002eb6 <_ZN9LineTrace15radius2VelocityEf+0x166>
		if(radius < 100) velocity = min_velocity2_;
 8002de4:	edd7 7a00 	vldr	s15, [r7]
 8002de8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002eec <_ZN9LineTrace15radius2VelocityEf+0x19c>
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d504      	bpl.n	8002e00 <_ZN9LineTrace15radius2VelocityEf+0xb0>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	e05c      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 150) velocity = 1.4;
 8002e00:	edd7 7a00 	vldr	s15, [r7]
 8002e04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002ef0 <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 8002e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e10:	d502      	bpl.n	8002e18 <_ZN9LineTrace15radius2VelocityEf+0xc8>
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <_ZN9LineTrace15radius2VelocityEf+0x1a4>)
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e050      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 300) velocity = 1.5;
 8002e18:	edd7 7a00 	vldr	s15, [r7]
 8002e1c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002ef8 <_ZN9LineTrace15radius2VelocityEf+0x1a8>
 8002e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d503      	bpl.n	8002e32 <_ZN9LineTrace15radius2VelocityEf+0xe2>
 8002e2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e043      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 500) velocity = 1.7;
 8002e32:	edd7 7a00 	vldr	s15, [r7]
 8002e36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x188>
 8002e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d502      	bpl.n	8002e4a <_ZN9LineTrace15radius2VelocityEf+0xfa>
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <_ZN9LineTrace15radius2VelocityEf+0x1ac>)
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e037      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 800) velocity = 1.8;
 8002e4a:	edd7 7a00 	vldr	s15, [r7]
 8002e4e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002f00 <_ZN9LineTrace15radius2VelocityEf+0x1b0>
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	d502      	bpl.n	8002e62 <_ZN9LineTrace15radius2VelocityEf+0x112>
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x194>)
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e02b      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1000) velocity = 2.0;
 8002e62:	edd7 7a00 	vldr	s15, [r7]
 8002e66:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f04 <_ZN9LineTrace15radius2VelocityEf+0x1b4>
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d503      	bpl.n	8002e7c <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8002e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e01e      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 1500) velocity = 2.2;
 8002e7c:	edd7 7a00 	vldr	s15, [r7]
 8002e80:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x190>
 8002e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8c:	d502      	bpl.n	8002e94 <_ZN9LineTrace15radius2VelocityEf+0x144>
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <_ZN9LineTrace15radius2VelocityEf+0x1b8>)
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e012      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else if(radius < 2000) velocity = 2.4;
 8002e94:	edd7 7a00 	vldr	s15, [r7]
 8002e98:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x198>
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d502      	bpl.n	8002eac <_ZN9LineTrace15radius2VelocityEf+0x15c>
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <_ZN9LineTrace15radius2VelocityEf+0x1bc>)
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e006      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
		else velocity = max_velocity2_;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e001      	b.n	8002eba <_ZN9LineTrace15radius2VelocityEf+0x16a>
	}
	else velocity = 1.3;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x184>)
 8002eb8:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	ee07 3a90 	vmov	s15, r3
}
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	43480000 	.word	0x43480000
 8002ed4:	3fa66666 	.word	0x3fa66666
 8002ed8:	43fa0000 	.word	0x43fa0000
 8002edc:	3fcccccd 	.word	0x3fcccccd
 8002ee0:	44bb8000 	.word	0x44bb8000
 8002ee4:	3fe66666 	.word	0x3fe66666
 8002ee8:	44fa0000 	.word	0x44fa0000
 8002eec:	42c80000 	.word	0x42c80000
 8002ef0:	43160000 	.word	0x43160000
 8002ef4:	3fb33333 	.word	0x3fb33333
 8002ef8:	43960000 	.word	0x43960000
 8002efc:	3fd9999a 	.word	0x3fd9999a
 8002f00:	44480000 	.word	0x44480000
 8002f04:	447a0000 	.word	0x447a0000
 8002f08:	400ccccd 	.word	0x400ccccd
 8002f0c:	4019999a 	.word	0x4019999a

08002f10 <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	; 0x2c
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fad2 	bl	80044c6 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f22:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fad8 	bl	80044de <_ZN6Logger20getThetaArrayPointerEv>
 8002f2e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f30:	2300      	movs	r3, #0
 8002f32:	837b      	strh	r3, [r7, #26]
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d84b      	bhi.n	8002fd6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f3e:	8b7b      	ldrh	r3, [r7, #26]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f4a:	8b7b      	ldrh	r3, [r7, #26]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	d101      	bne.n	8002f68 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002f64:	4b30      	ldr	r3, [pc, #192]	; (8003028 <_ZN9LineTrace20createVelocityTabeleEv+0x118>)
 8002f66:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f74:	eeb0 0a66 	vmov.f32	s0, s13
 8002f78:	f7ff fbd2 	bl	8002720 <_ZSt3absf>
 8002f7c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f84:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800302c <_ZN9LineTrace20createVelocityTabeleEv+0x11c>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	db01      	blt.n	8002f96 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <_ZN9LineTrace20createVelocityTabeleEv+0x120>)
 8002f94:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f96:	8b7c      	ldrh	r4, [r7, #26]
 8002f98:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fed7 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8002fa2:	eef0 7a40 	vmov.f32	s15, s0
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fac:	3314      	adds	r3, #20
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	441a      	add	r2, r3
 8002fc0:	8b7b      	ldrh	r3, [r7, #26]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fce:	8b7b      	ldrh	r3, [r7, #26]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	837b      	strh	r3, [r7, #26]
 8002fd4:	e7ae      	b.n	8002f34 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fdc:	3358      	adds	r3, #88	; 0x58
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	6939      	ldr	r1, [r7, #16]
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8f1 	bl	80031d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ff4:	3354      	adds	r3, #84	; 0x54
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	6939      	ldr	r1, [r7, #16]
 8002ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f98d 	bl	8003320 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800300c:	3354      	adds	r3, #84	; 0x54
 800300e:	2200      	movs	r2, #0
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	f241 7270 	movw	r2, #6000	; 0x1770
 8003016:	4907      	ldr	r1, [pc, #28]	; (8003034 <_ZN9LineTrace20createVelocityTabeleEv+0x124>)
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 800301a:	f7fe faf3 	bl	8001604 <sd_write_array_float>

}
 800301e:	bf00      	nop
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	3727c5ac 	.word	0x3727c5ac
 800302c:	459c4000 	.word	0x459c4000
 8003030:	459c4000 	.word	0x459c4000
 8003034:	08018d3c 	.word	0x08018d3c
 8003038:	08018d4c 	.word	0x08018d4c

0800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b08d      	sub	sp, #52	; 0x34
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69d8      	ldr	r0, [r3, #28]
 8003048:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x16c>)
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x170>)
 800304c:	4958      	ldr	r1, [pc, #352]	; (80031b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x174>)
 800304e:	f001 fac2 	bl	80045d6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003058:	331c      	adds	r3, #28
 800305a:	2264      	movs	r2, #100	; 0x64
 800305c:	4955      	ldr	r1, [pc, #340]	; (80031b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x178>)
 800305e:	4854      	ldr	r0, [pc, #336]	; (80031b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x174>)
 8003060:	f7fe fb36 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800306a:	33ac      	adds	r3, #172	; 0xac
 800306c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003070:	4951      	ldr	r1, [pc, #324]	; (80031b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x17c>)
 8003072:	484f      	ldr	r0, [pc, #316]	; (80031b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x174>)
 8003074:	f7fe fb2c 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fa22 	bl	80044c6 <_ZN6Logger23getDistanceArrayPointerEv>
 8003082:	6178      	str	r0, [r7, #20]
	p_theta= logger_->getThetaArrayPointer();
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4618      	mov	r0, r3
 800308a:	f001 fa28 	bl	80044de <_ZN6Logger20getThetaArrayPointerEv>
 800308e:	6138      	str	r0, [r7, #16]

	float temp_distance, temp_theta;
	float pre_radius = 0;;
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003096:	2300      	movs	r3, #0
 8003098:	847b      	strh	r3, [r7, #34]	; 0x22
 800309a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800309c:	f241 726f 	movw	r2, #5999	; 0x176f
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d84d      	bhi.n	8003140 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x104>

		temp_distance = p_distance[i];
 80030a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4413      	add	r3, r2
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80030b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 80030bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d101      	bne.n	80030ce <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x92>
 80030ca:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x180>)
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
		float radius_origin = abs(temp_distance / temp_theta);
 80030ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80030d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030da:	eeb0 0a66 	vmov.f32	s0, s13
 80030de:	f7ff fb1f 	bl	8002720 <_ZSt3absf>
 80030e2:	ed87 0a07 	vstr	s0, [r7, #28]
		if(radius_origin >= 5000) radius_origin = 5000;
 80030e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ea:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80031c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x184>
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	db01      	blt.n	80030fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xc0>
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x188>)
 80030fa:	61fb      	str	r3, [r7, #28]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80030fc:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80030fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fe24 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8003108:	eef0 7a40 	vmov.f32	s15, s0
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003112:	3314      	adds	r3, #20
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3304      	adds	r3, #4
 800311a:	edc3 7a00 	vstr	s15, [r3]
		pre_radius = radius_origin;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	60fb      	str	r3, [r7, #12]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	441a      	add	r2, r3
 800312a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	3324      	adds	r3, #36	; 0x24
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800313a:	3301      	adds	r3, #1
 800313c:	847b      	strh	r3, [r7, #34]	; 0x22
 800313e:	e7ac      	b.n	800309a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x5e>
	}
	for(uint16_t i = 1; i < LOG_DATA_SIZE_DIS; i++){
 8003140:	2301      	movs	r3, #1
 8003142:	837b      	strh	r3, [r7, #26]
 8003144:	8b7b      	ldrh	r3, [r7, #26]
 8003146:	f241 726f 	movw	r2, #5999	; 0x176f
 800314a:	4293      	cmp	r3, r2
 800314c:	d803      	bhi.n	8003156 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x11a>
 800314e:	8b7b      	ldrh	r3, [r7, #26]
 8003150:	3301      	adds	r3, #1
 8003152:	837b      	strh	r3, [r7, #26]
 8003154:	e7f6      	b.n	8003144 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x108>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800315c:	3358      	adds	r3, #88	; 0x58
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	6979      	ldr	r1, [r7, #20]
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f831 	bl	80031d0 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003174:	3354      	adds	r3, #84	; 0x54
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	eeb0 0a67 	vmov.f32	s0, s15
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8cd 	bl	8003320 <_ZN9LineTrace20accelerateProcessingEfPKf>


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800318c:	3354      	adds	r3, #84	; 0x54
 800318e:	2200      	movs	r2, #0
 8003190:	9200      	str	r2, [sp, #0]
 8003192:	f241 7270 	movw	r2, #6000	; 0x1770
 8003196:	490c      	ldr	r1, [pc, #48]	; (80031c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x18c>)
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x174>)
 800319a:	f7fe fa33 	bl	8001604 <sd_write_array_float>

}
 800319e:	bf00      	nop
 80031a0:	372c      	adds	r7, #44	; 0x2c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	08018d58 	.word	0x08018d58
 80031ac:	08018d64 	.word	0x08018d64
 80031b0:	08018d4c 	.word	0x08018d4c
 80031b4:	08018d74 	.word	0x08018d74
 80031b8:	08018d84 	.word	0x08018d84
 80031bc:	3727c5ac 	.word	0x3727c5ac
 80031c0:	459c4000 	.word	0x459c4000
 80031c4:	459c4000 	.word	0x459c4000
 80031c8:	08018d3c 	.word	0x08018d3c
 80031cc:	00000000 	.word	0x00000000

080031d0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031dc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031de:	f241 736f 	movw	r3, #5999	; 0x176f
 80031e2:	83fb      	strh	r3, [r7, #30]
 80031e4:	8bfb      	ldrh	r3, [r7, #30]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8091 	beq.w	800330e <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80031ec:	8bfb      	ldrh	r3, [r7, #30]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80031f6:	3314      	adds	r3, #20
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	ed93 7a00 	vldr	s14, [r3]
 8003202:	8bfb      	ldrh	r3, [r7, #30]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800320a:	3314      	adds	r3, #20
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800321e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	dd6c      	ble.n	8003306 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 800322c:	8bfb      	ldrh	r3, [r7, #30]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd f99e 	bl	8000578 <__aeabi_f2d>
 800323c:	a336      	add	r3, pc, #216	; (adr r3, 8003318 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f9f1 	bl	8000628 <__aeabi_dmul>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	4625      	mov	r5, r4
 800324c:	461c      	mov	r4, r3
 800324e:	69b8      	ldr	r0, [r7, #24]
 8003250:	f7fd f992 	bl	8000578 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4620      	mov	r0, r4
 800325a:	4629      	mov	r1, r5
 800325c:	f7fd fb0e 	bl	800087c <__aeabi_ddiv>
 8003260:	4603      	mov	r3, r0
 8003262:	460c      	mov	r4, r1
 8003264:	4618      	mov	r0, r3
 8003266:	4621      	mov	r1, r4
 8003268:	f7fd fcd6 	bl	8000c18 <__aeabi_d2f>
 800326c:	4603      	mov	r3, r0
 800326e:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003270:	edd7 6a06 	vldr	s13, [r7, #24]
 8003274:	ed97 7a05 	vldr	s14, [r7, #20]
 8003278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003280:	ed97 7a04 	vldr	s14, [r7, #16]
 8003284:	edd7 7a02 	vldr	s15, [r7, #8]
 8003288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	dd39      	ble.n	8003306 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003292:	8bfb      	ldrh	r3, [r7, #30]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800329a:	3314      	adds	r3, #20
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd f967 	bl	8000578 <__aeabi_f2d>
 80032aa:	4604      	mov	r4, r0
 80032ac:	460d      	mov	r5, r1
 80032ae:	8bfb      	ldrh	r3, [r7, #30]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	ed93 7a00 	vldr	s14, [r3]
 80032ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	ee17 0a90 	vmov	r0, s15
 80032c6:	f7fd f957 	bl	8000578 <__aeabi_f2d>
 80032ca:	a313      	add	r3, pc, #76	; (adr r3, 8003318 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	f7fd f9aa 	bl	8000628 <__aeabi_dmul>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4620      	mov	r0, r4
 80032da:	4629      	mov	r1, r5
 80032dc:	f7fc ffee 	bl	80002bc <__adddf3>
 80032e0:	4603      	mov	r3, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	4619      	mov	r1, r3
 80032e6:	4622      	mov	r2, r4
 80032e8:	8bfb      	ldrh	r3, [r7, #30]
 80032ea:	1e5c      	subs	r4, r3, #1
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	f7fd fc92 	bl	8000c18 <__aeabi_d2f>
 80032f4:	4601      	mov	r1, r0
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80032fc:	3314      	adds	r3, #20
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	3304      	adds	r3, #4
 8003304:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003306:	8bfb      	ldrh	r3, [r7, #30]
 8003308:	3b01      	subs	r3, #1
 800330a:	83fb      	strh	r3, [r7, #30]
 800330c:	e76a      	b.n	80031e4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bdb0      	pop	{r4, r5, r7, pc}
 8003316:	bf00      	nop
 8003318:	d2f1a9fc 	.word	0xd2f1a9fc
 800331c:	3f50624d 	.word	0x3f50624d

08003320 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	ed87 0a02 	vstr	s0, [r7, #8]
 800332c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800332e:	2300      	movs	r3, #0
 8003330:	83fb      	strh	r3, [r7, #30]
 8003332:	8bfb      	ldrh	r3, [r7, #30]
 8003334:	f241 726f 	movw	r2, #5999	; 0x176f
 8003338:	4293      	cmp	r3, r2
 800333a:	f200 8091 	bhi.w	8003460 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800333e:	8bfb      	ldrh	r3, [r7, #30]
 8003340:	3301      	adds	r3, #1
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003348:	3314      	adds	r3, #20
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	3304      	adds	r3, #4
 8003350:	ed93 7a00 	vldr	s14, [r3]
 8003354:	8bfb      	ldrh	r3, [r7, #30]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800335c:	3314      	adds	r3, #20
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3304      	adds	r3, #4
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336c:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003370:	edd7 7a06 	vldr	s15, [r7, #24]
 8003374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	dd6c      	ble.n	8003458 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 800337e:	8bfb      	ldrh	r3, [r7, #30]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8f5 	bl	8000578 <__aeabi_f2d>
 800338e:	a336      	add	r3, pc, #216	; (adr r3, 8003468 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f948 	bl	8000628 <__aeabi_dmul>
 8003398:	4603      	mov	r3, r0
 800339a:	460c      	mov	r4, r1
 800339c:	4625      	mov	r5, r4
 800339e:	461c      	mov	r4, r3
 80033a0:	69b8      	ldr	r0, [r7, #24]
 80033a2:	f7fd f8e9 	bl	8000578 <__aeabi_f2d>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	f7fd fa65 	bl	800087c <__aeabi_ddiv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	4618      	mov	r0, r3
 80033b8:	4621      	mov	r1, r4
 80033ba:	f7fd fc2d 	bl	8000c18 <__aeabi_d2f>
 80033be:	4603      	mov	r3, r0
 80033c0:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80033c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80033ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ce:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80033d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e2:	dd39      	ble.n	8003458 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033e4:	8bfb      	ldrh	r3, [r7, #30]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80033ec:	3314      	adds	r3, #20
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f8be 	bl	8000578 <__aeabi_f2d>
 80033fc:	4604      	mov	r4, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	8bfb      	ldrh	r3, [r7, #30]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	ed93 7a00 	vldr	s14, [r3]
 800340c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003414:	ee17 0a90 	vmov	r0, s15
 8003418:	f7fd f8ae 	bl	8000578 <__aeabi_f2d>
 800341c:	a312      	add	r3, pc, #72	; (adr r3, 8003468 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fd f901 	bl	8000628 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4620      	mov	r0, r4
 800342c:	4629      	mov	r1, r5
 800342e:	f7fc ff45 	bl	80002bc <__adddf3>
 8003432:	4603      	mov	r3, r0
 8003434:	460c      	mov	r4, r1
 8003436:	4619      	mov	r1, r3
 8003438:	4622      	mov	r2, r4
 800343a:	8bfb      	ldrh	r3, [r7, #30]
 800343c:	1c5c      	adds	r4, r3, #1
 800343e:	4608      	mov	r0, r1
 8003440:	4611      	mov	r1, r2
 8003442:	f7fd fbe9 	bl	8000c18 <__aeabi_d2f>
 8003446:	4601      	mov	r1, r0
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800344e:	3314      	adds	r3, #20
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	3301      	adds	r3, #1
 800345c:	83fb      	strh	r3, [r7, #30]
 800345e:	e768      	b.n	8003332 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003460:	bf00      	nop
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bdb0      	pop	{r4, r5, r7, pc}
 8003468:	d2f1a9fc 	.word	0xd2f1a9fc
 800346c:	3f50624d 	.word	0x3f50624d

08003470 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800347e:	3314      	adds	r3, #20
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8087 	beq.w	8003596 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd ffed 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003492:	eeb0 7a40 	vmov.f32	s14, s0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034aa:	bfac      	ite	ge
 80034ac:	2301      	movge	r3, #1
 80034ae:	2300      	movlt	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d025      	beq.n	8003502 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80034bc:	3350      	adds	r3, #80	; 0x50
 80034be:	ed93 7a00 	vldr	s14, [r3]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034c8:	3316      	adds	r3, #22
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80034e2:	3350      	adds	r3, #80	; 0x50
 80034e4:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ee:	3316      	adds	r3, #22
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034fc:	3316      	adds	r3, #22
 80034fe:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003500:	e7c2      	b.n	8003488 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003508:	3316      	adds	r3, #22
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003510:	4293      	cmp	r3, r2
 8003512:	d906      	bls.n	8003522 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800351a:	3316      	adds	r3, #22
 800351c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003520:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003528:	3350      	adds	r3, #80	; 0x50
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800352e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd ff99 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800353a:	eef0 7a40 	vmov.f32	s15, s0
 800353e:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003540:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800354a:	3316      	adds	r3, #22
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003550:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003558:	3316      	adds	r3, #22
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003562:	3314      	adds	r3, #20
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f985 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800357e:	3316      	adds	r3, #22
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003588:	3314      	adds	r3, #20
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	3304      	adds	r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a06      	ldr	r2, [pc, #24]	; (80035ac <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003594:	6013      	str	r3, [r2, #0]

	}
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000270 	.word	0x20000270
 80035a4:	20000274 	.word	0x20000274
 80035a8:	20000278 	.word	0x20000278
 80035ac:	2000027c 	.word	0x2000027c

080035b0 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd ff44 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 80035c6:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fadd 	bl	8004b8e <_ZN8Odometry8getThetaEv>
 80035d4:	ec54 3b10 	vmov	r3, r4, d0
 80035d8:	4618      	mov	r0, r3
 80035da:	4621      	mov	r1, r4
 80035dc:	f7fd fb1c 	bl	8000c18 <__aeabi_d2f>
 80035e0:	4603      	mov	r3, r0
 80035e2:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80035e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f0:	d101      	bne.n	80035f6 <_ZN9LineTrace8isStableEv+0x46>
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <_ZN9LineTrace8isStableEv+0xd0>)
 80035f4:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80035f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80035fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80035fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003602:	eeb0 0a66 	vmov.f32	s0, s13
 8003606:	f7ff f88b 	bl	8002720 <_ZSt3absf>
 800360a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800360e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003612:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003684 <_ZN9LineTrace8isStableEv+0xd4>
 8003616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	db01      	blt.n	8003624 <_ZN9LineTrace8isStableEv+0x74>
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <_ZN9LineTrace8isStableEv+0xd8>)
 8003622:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800362a:	3352      	adds	r3, #82	; 0x52
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <_ZN9LineTrace8isStableEv+0xdc>)
 8003634:	2200      	movs	r2, #0
 8003636:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800363e:	3352      	adds	r3, #82	; 0x52
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003644:	edd7 7a03 	vldr	s15, [r7, #12]
 8003648:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003690 <_ZN9LineTrace8isStableEv+0xe0>
 800364c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	db06      	blt.n	8003664 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <_ZN9LineTrace8isStableEv+0xdc>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <_ZN9LineTrace8isStableEv+0xdc>)
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e002      	b.n	800366a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <_ZN9LineTrace8isStableEv+0xdc>)
 8003666:	2200      	movs	r2, #0
 8003668:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <_ZN9LineTrace8isStableEv+0xdc>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	2b16      	cmp	r3, #22
 8003670:	d901      	bls.n	8003676 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	3727c5ac 	.word	0x3727c5ac
 8003684:	459c4000 	.word	0x459c4000
 8003688:	459c4000 	.word	0x459c4000
 800368c:	20000290 	.word	0x20000290
 8003690:	44fa0000 	.word	0x44fa0000

08003694 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08c      	sub	sp, #48	; 0x30
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800369c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a0:	2201      	movs	r2, #1
 80036a2:	4942      	ldr	r1, [pc, #264]	; (80037ac <_ZN9LineTrace4initEv+0x118>)
 80036a4:	4842      	ldr	r0, [pc, #264]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 80036a6:	f7fe f813 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80036aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ae:	2201      	movs	r2, #1
 80036b0:	4940      	ldr	r1, [pc, #256]	; (80037b4 <_ZN9LineTrace4initEv+0x120>)
 80036b2:	483f      	ldr	r0, [pc, #252]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 80036b4:	f7fe f80c 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80036b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036bc:	2201      	movs	r2, #1
 80036be:	493e      	ldr	r1, [pc, #248]	; (80037b8 <_ZN9LineTrace4initEv+0x124>)
 80036c0:	483b      	ldr	r0, [pc, #236]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 80036c2:	f7fe f805 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80036c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036ce:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80036d2:	eeb0 1a66 	vmov.f32	s2, s13
 80036d6:	eef0 0a47 	vmov.f32	s1, s14
 80036da:	eeb0 0a67 	vmov.f32	s0, s15
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f87a 	bl	80037d8 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80036e4:	f107 0320 	add.w	r3, r7, #32
 80036e8:	2201      	movs	r2, #1
 80036ea:	4934      	ldr	r1, [pc, #208]	; (80037bc <_ZN9LineTrace4initEv+0x128>)
 80036ec:	4830      	ldr	r0, [pc, #192]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 80036ee:	f7fd ffef 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	2201      	movs	r2, #1
 80036f8:	4931      	ldr	r1, [pc, #196]	; (80037c0 <_ZN9LineTrace4initEv+0x12c>)
 80036fa:	482d      	ldr	r0, [pc, #180]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 80036fc:	f7fd ffe8 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003700:	f107 0318 	add.w	r3, r7, #24
 8003704:	2201      	movs	r2, #1
 8003706:	492f      	ldr	r1, [pc, #188]	; (80037c4 <_ZN9LineTrace4initEv+0x130>)
 8003708:	4829      	ldr	r0, [pc, #164]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 800370a:	f7fd ffe1 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	2201      	movs	r2, #1
 8003714:	492c      	ldr	r1, [pc, #176]	; (80037c8 <_ZN9LineTrace4initEv+0x134>)
 8003716:	4826      	ldr	r0, [pc, #152]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 8003718:	f7fd ffda 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	2201      	movs	r2, #1
 8003722:	492a      	ldr	r1, [pc, #168]	; (80037cc <_ZN9LineTrace4initEv+0x138>)
 8003724:	4822      	ldr	r0, [pc, #136]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 8003726:	f7fd ffd3 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800372a:	edd7 7a08 	vldr	s15, [r7, #32]
 800372e:	eeb0 0a67 	vmov.f32	s0, s15
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8a5 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003738:	edd7 7a07 	vldr	s15, [r7, #28]
 800373c:	eeb0 0a67 	vmov.f32	s0, s15
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8ad 	bl	80038a0 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003746:	edd7 7a06 	vldr	s15, [r7, #24]
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8b5 	bl	80038be <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003754:	edd7 7a05 	vldr	s15, [r7, #20]
 8003758:	eeb0 0a67 	vmov.f32	s0, s15
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8be 	bl	80038de <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003762:	edd7 7a04 	vldr	s15, [r7, #16]
 8003766:	eeb0 0a67 	vmov.f32	s0, s15
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8c7 	bl	80038fe <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	2201      	movs	r2, #1
 8003776:	4916      	ldr	r1, [pc, #88]	; (80037d0 <_ZN9LineTrace4initEv+0x13c>)
 8003778:	480d      	ldr	r0, [pc, #52]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 800377a:	f7fd ffa9 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	2201      	movs	r2, #1
 8003784:	4913      	ldr	r1, [pc, #76]	; (80037d4 <_ZN9LineTrace4initEv+0x140>)
 8003786:	480a      	ldr	r0, [pc, #40]	; (80037b0 <_ZN9LineTrace4initEv+0x11c>)
 8003788:	f7fd ffa2 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 800378c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003790:	ed97 7a02 	vldr	s14, [r7, #8]
 8003794:	eef0 0a47 	vmov.f32	s1, s14
 8003798:	eeb0 0a67 	vmov.f32	s0, s15
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f90c 	bl	80039ba <_ZN9LineTrace12setMaxAccDecEff>
}
 80037a2:	bf00      	nop
 80037a4:	3730      	adds	r7, #48	; 0x30
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	08018d90 	.word	0x08018d90
 80037b0:	08018d98 	.word	0x08018d98
 80037b4:	08018da0 	.word	0x08018da0
 80037b8:	08018da8 	.word	0x08018da8
 80037bc:	08018db0 	.word	0x08018db0
 80037c0:	08018dbc 	.word	0x08018dbc
 80037c4:	08018dc8 	.word	0x08018dc8
 80037c8:	08018dd4 	.word	0x08018dd4
 80037cc:	08018de0 	.word	0x08018de0
 80037d0:	08018dec 	.word	0x08018dec
 80037d4:	08018df4 	.word	0x08018df4

080037d8 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80037e4:	edc7 0a01 	vstr	s1, [r7, #4]
 80037e8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	return kp_;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	ee07 3a90 	vmov	s15, r3
}
 800381a:	eeb0 0a67 	vmov.f32	s0, s15
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	ee07 3a90 	vmov	s15, r3
}
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
	return kd_;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	ee07 3a90 	vmov	s15, r3
}
 8003856:	eeb0 0a67 	vmov.f32	s0, s15
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392a:	ee07 3a90 	vmov	s15, r3
}
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	ee07 3a90 	vmov	s15, r3
}
 800394c:	eeb0 0a67 	vmov.f32	s0, s15
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003968:	ee07 3a90 	vmov	s15, r3
}
 800396c:	eeb0 0a67 	vmov.f32	s0, s15
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	ee07 3a90 	vmov	s15, r3
}
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	ee07 3a90 	vmov	s15, r3
}
 80039ac:	eeb0 0a67 	vmov.f32	s0, s15
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80039c6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039d0:	3354      	adds	r3, #84	; 0x54
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039dc:	3358      	adds	r3, #88	; 0x58
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039fc:	3354      	adds	r3, #84	; 0x54
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	ee07 3a90 	vmov	s15, r3
}
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a20:	3358      	adds	r3, #88	; 0x58
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	ee07 3a90 	vmov	s15, r3
}
 8003a28:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80fc 	beq.w	8003c44 <_ZN9LineTrace4flipEv+0x20c>
		// ---- line following processing -----//
		pidTrace();
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff f807 	bl	8002a60 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003a52:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fa9a 	bl	8003f90 <_ZN9LineTrace16isTargetDistanceEf>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d028      	beq.n	8003ab4 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9f8 	bl	8003e58 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fda1 	bl	80035b0 <_ZN9LineTrace8isStableEv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00c      	beq.n	8003a8e <_ZN9LineTrace4flipEv+0x56>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fb27 	bl	80050cc <_ZN10SideSensor9getStatusEv>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	43db      	mvns	r3, r3
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d101      	bne.n	8003a8e <_ZN9LineTrace4flipEv+0x56>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <_ZN9LineTrace4flipEv+0x58>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a9a:	3351      	adds	r3, #81	; 0x51
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fd fcff 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f87e 	bl	8004bb0 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fcdb 	bl	8003470 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff f888 	bl	8002bd0 <_ZN9LineTrace11isCrossLineEv>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 fb26 	bl	800511c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fd12 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fb36 	bl	8005150 <_ZN10SideSensor13getIgnoreFlagEv>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00f      	beq.n	8003b0a <_ZN9LineTrace4flipEv+0xd2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fcf6 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003af4:	eeb0 7a40 	vmov.f32	s14, s0
 8003af8:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003c4c <_ZN9LineTrace4flipEv+0x214>
 8003afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b04:	db01      	blt.n	8003b0a <_ZN9LineTrace4flipEv+0xd2>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <_ZN9LineTrace4flipEv+0xd4>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fb0e 	bl	8005136 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b20:	3351      	adds	r3, #81	; 0x51
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <_ZN9LineTrace4flipEv+0x108>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 facd 	bl	80050cc <_ZN10SideSensor9getStatusEv>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d101      	bne.n	8003b40 <_ZN9LineTrace4flipEv+0x108>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <_ZN9LineTrace4flipEv+0x10a>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d020      	beq.n	8003b88 <_ZN9LineTrace4flipEv+0x150>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b4c:	3318      	adds	r3, #24
 8003b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa73 	bl	8004042 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003b5c:	e008      	b.n	8003b70 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fade 	bl	8004120 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b6a:	335c      	adds	r3, #92	; 0x5c
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b76:	3351      	adds	r3, #81	; 0x51
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b82:	3352      	adds	r3, #82	; 0x52
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b8e:	3351      	adds	r3, #81	; 0x51
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <_ZN9LineTrace4flipEv+0x170>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fa67 	bl	8002074 <_ZN3LED2LREaa>
 8003ba6:	e007      	b.n	8003bb8 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	330c      	adds	r3, #12
 8003bac:	2200      	movs	r2, #0
 8003bae:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fa5e 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fd59 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003c50 <_ZN9LineTrace4flipEv+0x218>
 8003bd0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003c50 <_ZN9LineTrace4flipEv+0x218>
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fd0b 	bl	80055f0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003be0:	335c      	adds	r3, #92	; 0x5c
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bee:	335c      	adds	r3, #92	; 0x5c
 8003bf0:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bf8:	335c      	adds	r3, #92	; 0x5c
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d906      	bls.n	8003c12 <_ZN9LineTrace4flipEv+0x1da>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c0a:	335c      	adds	r3, #92	; 0x5c
 8003c0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c10:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 500) led_.LR(-1, 1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c18:	335c      	adds	r3, #92	; 0x5c
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c20:	d808      	bhi.n	8003c34 <_ZN9LineTrace4flipEv+0x1fc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	330c      	adds	r3, #12
 8003c26:	2201      	movs	r2, #1
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fa21 	bl	8002074 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003c32:	e007      	b.n	8003c44 <_ZN9LineTrace4flipEv+0x20c>
		else led_.LR(-1, 0);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	330c      	adds	r3, #12
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fa18 	bl	8002074 <_ZN3LED2LREaa>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	43480000 	.word	0x43480000
 8003c50:	00000000 	.word	0x00000000

08003c54 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 fd16 	bl	80056a2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fa3e 	bl	80050fc <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c86:	334c      	adds	r3, #76	; 0x4c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c92:	334e      	adds	r3, #78	; 0x4e
 8003c94:	2200      	movs	r2, #0
 8003c96:	801a      	strh	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fd07 	bl	80056c8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe f9d5 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69d8      	ldr	r0, [r3, #28]
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <_ZN9LineTrace4stopEv+0xb4>)
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <_ZN9LineTrace4stopEv+0xb8>)
 8003ce2:	491e      	ldr	r1, [pc, #120]	; (8003d5c <_ZN9LineTrace4stopEv+0xbc>)
 8003ce4:	f000 fc30 	bl	8004548 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003ce8:	e006      	b.n	8003cf8 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69d8      	ldr	r0, [r3, #28]
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <_ZN9LineTrace4stopEv+0xc0>)
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <_ZN9LineTrace4stopEv+0xc4>)
 8003cf2:	491a      	ldr	r1, [pc, #104]	; (8003d5c <_ZN9LineTrace4stopEv+0xbc>)
 8003cf4:	f000 fc4b 	bl	800458e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cfe:	331c      	adds	r3, #28
 8003d00:	2200      	movs	r2, #0
 8003d02:	9200      	str	r2, [sp, #0]
 8003d04:	2264      	movs	r2, #100	; 0x64
 8003d06:	4918      	ldr	r1, [pc, #96]	; (8003d68 <_ZN9LineTrace4stopEv+0xc8>)
 8003d08:	4814      	ldr	r0, [pc, #80]	; (8003d5c <_ZN9LineTrace4stopEv+0xbc>)
 8003d0a:	f7fd fc7b 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003d14:	33ac      	adds	r3, #172	; 0xac
 8003d16:	2200      	movs	r2, #0
 8003d18:	9200      	str	r2, [sp, #0]
 8003d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d1e:	4913      	ldr	r1, [pc, #76]	; (8003d6c <_ZN9LineTrace4stopEv+0xcc>)
 8003d20:	480e      	ldr	r0, [pc, #56]	; (8003d5c <_ZN9LineTrace4stopEv+0xbc>)
 8003d22:	f7fd fc6f 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe f99f 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fcb5 	bl	80046aa <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fc63 	bl	8004610 <_ZN6Logger10resetLogs2Ev>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	08018d58 	.word	0x08018d58
 8003d58:	08018d64 	.word	0x08018d64
 8003d5c:	08018d4c 	.word	0x08018d4c
 8003d60:	08018dfc 	.word	0x08018dfc
 8003d64:	08018e08 	.word	0x08018e08
 8003d68:	08018d74 	.word	0x08018d74
 8003d6c:	08018d84 	.word	0x08018d84

08003d70 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	737b      	strb	r3, [r7, #13]
	start();
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff67 	bl	8003c54 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003d86:	7b7b      	ldrb	r3, [r7, #13]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d15b      	bne.n	8003e44 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003d8c:	89fb      	ldrh	r3, [r7, #14]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <_ZN9LineTrace7runningEv+0x28>
 8003d92:	2b0a      	cmp	r3, #10
 8003d94:	d030      	beq.n	8003df8 <_ZN9LineTrace7runningEv+0x88>
 8003d96:	e054      	b.n	8003e42 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f9a1 	bl	80050e4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d044      	beq.n	8003e3c <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fee0 	bl	8002b78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f89f 	bl	8003f0c <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fb93 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fd fb71 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	330c      	adds	r3, #12
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe f941 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003df2:	230a      	movs	r3, #10
 8003df4:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003df6:	e021      	b.n	8003e3c <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 f971 	bl	80050e4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fe fecb 	bl	8002bae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f88a 	bl	8003f32 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003e1e:	2064      	movs	r0, #100	; 0x64
 8003e20:	f004 ffea 	bl	8008df8 <HAL_Delay>

				setTargetVelocity(0);
 8003e24:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003e54 <_ZN9LineTrace7runningEv+0xe4>
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff fd2a 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e32:	f004 ffe1 	bl	8008df8 <HAL_Delay>

				goal_flag = true;
 8003e36:	2301      	movs	r3, #1
 8003e38:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003e3a:	e001      	b.n	8003e40 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003e3c:	bf00      	nop
 8003e3e:	e7a2      	b.n	8003d86 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003e40:	bf00      	nop
	while(goal_flag == false){
 8003e42:	e7a0      	b.n	8003d86 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff2b 	bl	8003ca0 <_ZN9LineTrace4stopEv>
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	00000000 	.word	0x00000000

08003e58 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	ed2d 8b02 	vpush	{d8}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d046      	beq.n	8003efc <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e74:	3318      	adds	r3, #24
 8003e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11c      	bne.n	8003eb8 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69dc      	ldr	r4, [r3, #28]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fae1 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fe7a 	bl	8004b8e <_ZN8Odometry8getThetaEv>
 8003e9a:	ec53 2b10 	vmov	r2, r3, d0
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f7fc feb9 	bl	8000c18 <__aeabi_d2f>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	ee00 3a90 	vmov	s1, r3
 8003eac:	eeb0 0a48 	vmov.f32	s0, s16
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f000 fa78 	bl	80043a6 <_ZN6Logger21storeDistanceAndThetaEff>
 8003eb6:	e01b      	b.n	8003ef0 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69dc      	ldr	r4, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fc1d 	bl	8005700 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003ec6:	eeb0 8a40 	vmov.f32	s16, s0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fe5d 	bl	8004b8e <_ZN8Odometry8getThetaEv>
 8003ed4:	ec53 2b10 	vmov	r2, r3, d0
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f7fc fe9c 	bl	8000c18 <__aeabi_d2f>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	ee00 3a90 	vmov	s1, r3
 8003ee6:	eeb0 0a48 	vmov.f32	s0, s16
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 faa2 	bl	8004434 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003efa:	801a      	strh	r2, [r3, #0]
	}
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	ecbd 8b02 	vpop	{d8}
 8003f06:	bd90      	pop	{r4, r7, pc}
 8003f08:	20000264 	.word	0x20000264

08003f0c <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd fad3 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f24:	3314      	adds	r3, #20
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f40:	3314      	adds	r3, #20
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f4c:	3316      	adds	r3, #22
 8003f4e:	2200      	movs	r2, #0
 8003f50:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003f58:	3350      	adds	r3, #80	; 0x50
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f7e:	3318      	adds	r3, #24
 8003f80:	887a      	ldrh	r2, [r7, #2]
 8003f82:	801a      	strh	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fa52 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003faa:	eeb0 7a40 	vmov.f32	s14, s0
 8003fae:	edd7 7a00 	vldr	s15, [r7]
 8003fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fba:	bf94      	ite	ls
 8003fbc:	2301      	movls	r3, #1
 8003fbe:	2300      	movhi	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fe6:	334c      	adds	r3, #76	; 0x4c
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	461c      	mov	r4, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fd fa3d 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003ff2:	eef0 7a40 	vmov.f32	s15, s0
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003ffc:	3306      	adds	r3, #6
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3304      	adds	r3, #4
 8004004:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800400e:	334c      	adds	r3, #76	; 0x4c
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800401c:	334c      	adds	r3, #76	; 0x4c
 800401e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004026:	334c      	adds	r3, #76	; 0x4c
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	2b63      	cmp	r3, #99	; 0x63
 800402c:	d905      	bls.n	800403a <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004034:	334c      	adds	r3, #76	; 0x4c
 8004036:	2263      	movs	r2, #99	; 0x63
 8004038:	801a      	strh	r2, [r3, #0]
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bd90      	pop	{r4, r7, pc}

08004042 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8004042:	b590      	push	{r4, r7, lr}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004054:	334e      	adds	r3, #78	; 0x4e
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	461c      	mov	r4, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f7fd fa06 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004060:	eef0 7a40 	vmov.f32	s15, s0
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 800406a:	332a      	adds	r3, #42	; 0x2a
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800407c:	334e      	adds	r3, #78	; 0x4e
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	3301      	adds	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800408a:	334e      	adds	r3, #78	; 0x4e
 800408c:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004094:	334e      	adds	r3, #78	; 0x4e
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800409c:	d306      	bcc.n	80040ac <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040a4:	334e      	adds	r3, #78	; 0x4e
 80040a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040aa:	801a      	strh	r2, [r3, #0]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd90      	pop	{r4, r7, pc}

080040b4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6959      	ldr	r1, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040c6:	334c      	adds	r3, #76	; 0x4c
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80040d0:	3306      	adds	r3, #6
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	3304      	adds	r3, #4
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	eeb0 0a67 	vmov.f32	s0, s15
 80040e0:	4608      	mov	r0, r1
 80040e2:	f7fd f9d2 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ec:	334c      	adds	r3, #76	; 0x4c
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040fa:	334c      	adds	r3, #76	; 0x4c
 80040fc:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004104:	334c      	adds	r3, #76	; 0x4c
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	2b63      	cmp	r3, #99	; 0x63
 800410a:	d905      	bls.n	8004118 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004112:	334c      	adds	r3, #76	; 0x4c
 8004114:	2263      	movs	r2, #99	; 0x63
 8004116:	801a      	strh	r2, [r3, #0]

}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004128:	2300      	movs	r3, #0
 800412a:	82fb      	strh	r3, [r7, #22]
 800412c:	8afb      	ldrh	r3, [r7, #22]
 800412e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004132:	d239      	bcs.n	80041a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8004134:	8afb      	ldrh	r3, [r7, #22]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800413c:	332a      	adds	r3, #42	; 0x2a
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	3304      	adds	r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd f98d 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004152:	eeb0 7a40 	vmov.f32	s14, s0
 8004156:	edd7 7a04 	vldr	s15, [r7, #16]
 800415a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800415e:	eeb0 0a67 	vmov.f32	s0, s15
 8004162:	f7fe fadd 	bl	8002720 <_ZSt3absf>
 8004166:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 800416a:	edd7 7a03 	vldr	s15, [r7, #12]
 800416e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80041d0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8004172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417a:	d811      	bhi.n	80041a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6959      	ldr	r1, [r3, #20]
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004188:	332a      	adds	r3, #42	; 0x2a
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	edd3 7a00 	vldr	s15, [r3]
 8004194:	eeb0 0a67 	vmov.f32	s0, s15
 8004198:	4608      	mov	r0, r1
 800419a:	f7fd f976 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 800419e:	e003      	b.n	80041a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80041a0:	8afb      	ldrh	r3, [r7, #22]
 80041a2:	3301      	adds	r3, #1
 80041a4:	82fb      	strh	r3, [r7, #22]
 80041a6:	e7c1      	b.n	800412c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041ae:	334e      	adds	r3, #78	; 0x4e
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b6:	d306      	bcc.n	80041c6 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041be:	334e      	adds	r3, #78	; 0x4e
 80041c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041c4:	801a      	strh	r2, [r3, #0]

}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	42a00000 	.word	0x42a00000

080041d4 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041e2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041f0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041f4:	2200      	movs	r2, #0
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004202:	2200      	movs	r2, #0
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800420c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004210:	2200      	movs	r2, #0
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004230:	f7fd fada 	bl	80017e8 <sd_mount>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004244:	f7fc ff2c 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004248:	2100      	movs	r1, #0
 800424a:	2000      	movs	r0, #0
 800424c:	f7fc ff38 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004250:	4815      	ldr	r0, [pc, #84]	; (80042a8 <_ZN6Logger10sdCardInitEv+0x84>)
 8004252:	f7fc ff5f 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004256:	2101      	movs	r1, #1
 8004258:	2000      	movs	r0, #0
 800425a:	f7fc ff31 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800425e:	4813      	ldr	r0, [pc, #76]	; (80042ac <_ZN6Logger10sdCardInitEv+0x88>)
 8004260:	f7fc ff58 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004268:	f004 fdc6 	bl	8008df8 <HAL_Delay>

	  ret = true;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e015      	b.n	800429e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004272:	f7fc ff15 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004276:	2100      	movs	r1, #0
 8004278:	2000      	movs	r0, #0
 800427a:	f7fc ff21 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800427e:	480a      	ldr	r0, [pc, #40]	; (80042a8 <_ZN6Logger10sdCardInitEv+0x84>)
 8004280:	f7fc ff48 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004284:	2101      	movs	r1, #1
 8004286:	2000      	movs	r0, #0
 8004288:	f7fc ff1a 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800428c:	4808      	ldr	r0, [pc, #32]	; (80042b0 <_ZN6Logger10sdCardInitEv+0x8c>)
 800428e:	f7fc ff41 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004296:	f004 fdaf 	bl	8008df8 <HAL_Delay>

	  ret = false;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	08018e18 	.word	0x08018e18
 80042ac:	08018e24 	.word	0x08018e24
 80042b0:	08018e2c 	.word	0x08018e2c

080042b4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042c6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d027      	beq.n	8004320 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042d6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042ec:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042fc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004300:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004308:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <_ZN6Logger8storeLogEf+0x6c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004318:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800431c:	2200      	movs	r2, #0
 800431e:	801a      	strh	r2, [r3, #0]
	}
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800433e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d028      	beq.n	800439a <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800434e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	3304      	adds	r3, #4
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004366:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004376:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800437a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004382:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d006      	beq.n	800439a <_ZN6Logger9storeLog2Ef+0x6e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004392:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004396:	2200      	movs	r2, #0
 8004398:	801a      	strh	r2, [r3, #0]
	}
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80043b2:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043bc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	3302      	adds	r3, #2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043d4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80043e0:	3312      	adds	r3, #18
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043f0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004400:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004404:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800440c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	f241 726f 	movw	r2, #5999	; 0x176f
 8004416:	4293      	cmp	r3, r2
 8004418:	d906      	bls.n	8004428 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004420:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004424:	2200      	movs	r2, #0
 8004426:	801a      	strh	r2, [r3, #0]
	//}
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004440:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800444a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004456:	3322      	adds	r3, #34	; 0x22
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004466:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004472:	3352      	adds	r3, #82	; 0x52
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004482:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004492:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004496:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800449e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	f241 726f 	movw	r2, #5999	; 0x176f
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d906      	bls.n	80044ba <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80044b2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80044b6:	2200      	movs	r2, #0
 80044b8:	801a      	strh	r2, [r3, #0]
	//}
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3308      	adds	r3, #8
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
	return store_theta_;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80044ec:	3348      	adds	r3, #72	; 0x48
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af02      	add	r7, sp, #8
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	2300      	movs	r3, #0
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	2201      	movs	r2, #1
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	68b8      	ldr	r0, [r7, #8]
 8004514:	f7fd f876 	bl	8001604 <sd_write_array_float>
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	2300      	movs	r3, #0
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	2201      	movs	r2, #1
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f7fd f862 	bl	8001604 <sd_write_array_float>
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f103 0208 	add.w	r2, r3, #8
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	f241 7270 	movw	r2, #6000	; 0x1770
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7fd f84b 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004574:	3348      	adds	r3, #72	; 0x48
 8004576:	2200      	movs	r2, #0
 8004578:	9200      	str	r2, [sp, #0]
 800457a:	f241 7270 	movw	r2, #6000	; 0x1770
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	68b8      	ldr	r0, [r7, #8]
 8004582:	f7fd f83f 	bl	8001604 <sd_write_array_float>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af02      	add	r7, sp, #8
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80045a2:	3388      	adds	r3, #136	; 0x88
 80045a4:	2200      	movs	r2, #0
 80045a6:	9200      	str	r2, [sp, #0]
 80045a8:	f241 7270 	movw	r2, #6000	; 0x1770
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	68b8      	ldr	r0, [r7, #8]
 80045b0:	f7fd f828 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80045ba:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80045be:	2200      	movs	r2, #0
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	f241 7270 	movw	r2, #6000	; 0x1770
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	68b8      	ldr	r0, [r7, #8]
 80045ca:	f7fd f81b 	bl	8001604 <sd_write_array_float>
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3308      	adds	r3, #8
 80045e8:	f241 7270 	movw	r2, #6000	; 0x1770
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	68b8      	ldr	r0, [r7, #8]
 80045f0:	f7fd f86e 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80045fa:	3348      	adds	r3, #72	; 0x48
 80045fc:	f241 7270 	movw	r2, #6000	; 0x1770
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	68b8      	ldr	r0, [r7, #8]
 8004604:	f7fd f864 	bl	80016d0 <sd_read_array_float>
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004610:	b480      	push	{r7}
 8004612:	b08b      	sub	sp, #44	; 0x2c
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800461e:	3388      	adds	r3, #136	; 0x88
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800462c:	3340      	adds	r3, #64	; 0x40
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	429a      	cmp	r2, r3
 8004636:	d009      	beq.n	800464c <_ZN6Logger10resetLogs2Ev+0x3c>
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	617b      	str	r3, [r7, #20]
		log = 0;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	3304      	adds	r3, #4
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e7f1      	b.n	8004630 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004652:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004662:	3340      	adds	r3, #64	; 0x40
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	429a      	cmp	r2, r3
 800466c:	d009      	beq.n	8004682 <_ZN6Logger10resetLogs2Ev+0x72>
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	3304      	adds	r3, #4
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	e7f1      	b.n	8004666 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004688:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800468c:	2200      	movs	r2, #0
 800468e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004696:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800469a:	2200      	movs	r2, #0
 800469c:	801a      	strh	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	372c      	adds	r7, #44	; 0x2c
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046b8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046bc:	2200      	movs	r2, #0
 80046be:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046c6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80046ca:	2200      	movs	r2, #0
 80046cc:	801a      	strh	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <_ZN6Logger5startEv>:

void Logger::start()
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800470a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	805a      	strh	r2, [r3, #2]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004748:	2108      	movs	r1, #8
 800474a:	4805      	ldr	r0, [pc, #20]	; (8004760 <_ZN5Motor4initEv+0x20>)
 800474c:	f009 fd04 	bl	800e158 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004750:	210c      	movs	r1, #12
 8004752:	4803      	ldr	r0, [pc, #12]	; (8004760 <_ZN5Motor4initEv+0x20>)
 8004754:	f009 fd00 	bl	800e158 <HAL_TIM_PWM_Start>

}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	2003e8e0 	.word	0x2003e8e0

08004764 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004772:	2b00      	cmp	r3, #0
 8004774:	da0d      	bge.n	8004792 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004776:	2200      	movs	r2, #0
 8004778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800477c:	481f      	ldr	r0, [pc, #124]	; (80047fc <_ZN5Motor9motorCtrlEv+0x98>)
 800477e:	f005 fdd1 	bl	800a324 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004788:	b29b      	uxth	r3, r3
 800478a:	425b      	negs	r3, r3
 800478c:	b29b      	uxth	r3, r3
 800478e:	81fb      	strh	r3, [r7, #14]
 8004790:	e00a      	b.n	80047a8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004792:	2201      	movs	r2, #1
 8004794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004798:	4818      	ldr	r0, [pc, #96]	; (80047fc <_ZN5Motor9motorCtrlEv+0x98>)
 800479a:	f005 fdc3 	bl	800a324 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da0d      	bge.n	80047ce <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80047b2:	2201      	movs	r2, #1
 80047b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047b8:	4810      	ldr	r0, [pc, #64]	; (80047fc <_ZN5Motor9motorCtrlEv+0x98>)
 80047ba:	f005 fdb3 	bl	800a324 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	425b      	negs	r3, r3
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	81bb      	strh	r3, [r7, #12]
 80047cc:	e00a      	b.n	80047e4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80047ce:	2200      	movs	r2, #0
 80047d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047d4:	4809      	ldr	r0, [pc, #36]	; (80047fc <_ZN5Motor9motorCtrlEv+0x98>)
 80047d6:	f005 fda5 	bl	800a324 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80047e4:	89fa      	ldrh	r2, [r7, #14]
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <_ZN5Motor9motorCtrlEv+0x9c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80047ec:	89ba      	ldrh	r2, [r7, #12]
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <_ZN5Motor9motorCtrlEv+0x9c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40020c00 	.word	0x40020c00
 8004800:	2003e8e0 	.word	0x2003e8e0

08004804 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6178      	str	r0, [r7, #20]
 800480c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004810:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	4b30      	ldr	r3, [pc, #192]	; (80048dc <_ZN5Motor8setRatioEdd+0xd8>)
 800481a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800481e:	f7fc f993 	bl	8000b48 <__aeabi_dcmpgt>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <_ZN5Motor8setRatioEdd+0x30>
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	4c2b      	ldr	r4, [pc, #172]	; (80048dc <_ZN5Motor8setRatioEdd+0xd8>)
 800482e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004832:	e00e      	b.n	8004852 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <_ZN5Motor8setRatioEdd+0xdc>)
 800483a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800483e:	f7fc f965 	bl	8000b0c <__aeabi_dcmplt>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <_ZN5Motor8setRatioEdd+0x4e>
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	4c24      	ldr	r4, [pc, #144]	; (80048e0 <_ZN5Motor8setRatioEdd+0xdc>)
 800484e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <_ZN5Motor8setRatioEdd+0xd8>)
 8004858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800485c:	f7fc f974 	bl	8000b48 <__aeabi_dcmpgt>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <_ZN5Motor8setRatioEdd+0x6e>
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	4c1c      	ldr	r4, [pc, #112]	; (80048dc <_ZN5Motor8setRatioEdd+0xd8>)
 800486c:	e9c7 3400 	strd	r3, r4, [r7]
 8004870:	e00e      	b.n	8004890 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <_ZN5Motor8setRatioEdd+0xdc>)
 8004878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487c:	f7fc f946 	bl	8000b0c <__aeabi_dcmplt>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <_ZN5Motor8setRatioEdd+0x8c>
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	4c15      	ldr	r4, [pc, #84]	; (80048e0 <_ZN5Motor8setRatioEdd+0xdc>)
 800488c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <_ZN5Motor8setRatioEdd+0xe0>)
 8004896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800489a:	f7fb fec5 	bl	8000628 <__aeabi_dmul>
 800489e:	4603      	mov	r3, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	4618      	mov	r0, r3
 80048a4:	4621      	mov	r1, r4
 80048a6:	f7fc f96f 	bl	8000b88 <__aeabi_d2iz>
 80048aa:	4603      	mov	r3, r0
 80048ac:	b21a      	sxth	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <_ZN5Motor8setRatioEdd+0xe0>)
 80048b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048bc:	f7fb feb4 	bl	8000628 <__aeabi_dmul>
 80048c0:	4603      	mov	r3, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	4618      	mov	r0, r3
 80048c6:	4621      	mov	r1, r4
 80048c8:	f7fc f95e 	bl	8000b88 <__aeabi_d2iz>
 80048cc:	4603      	mov	r3, r0
 80048ce:	b21a      	sxth	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	805a      	strh	r2, [r3, #2]

}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd90      	pop	{r4, r7, pc}
 80048dc:	3ff00000 	.word	0x3ff00000
 80048e0:	bff00000 	.word	0xbff00000
 80048e4:	409c2000 	.word	0x409c2000

080048e8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80048e8:	b490      	push	{r4, r7}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f04f 0400 	mov.w	r4, #0
 8004900:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f04f 0400 	mov.w	r4, #0
 800490e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	f04f 0400 	mov.w	r4, #0
 800491c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	f04f 0400 	mov.w	r4, #0
 8004938:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	609a      	str	r2, [r3, #8]
}
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bc90      	pop	{r4, r7}
 8004958:	4770      	bx	lr
 800495a:	0000      	movs	r0, r0
 800495c:	0000      	movs	r0, r0
	...

08004960 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd f902 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8004974:	ee10 3a10 	vmov	r3, s0
 8004978:	4618      	mov	r0, r3
 800497a:	f7fb fdfd 	bl	8000578 <__aeabi_f2d>
 800497e:	4603      	mov	r3, r0
 8004980:	460c      	mov	r4, r1
 8004982:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc fd50 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004990:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004994:	a376      	add	r3, pc, #472	; (adr r3, 8004b70 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800499e:	f7fb fe43 	bl	8000628 <__aeabi_dmul>
 80049a2:	4603      	mov	r3, r0
 80049a4:	460c      	mov	r4, r1
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7fb fde0 	bl	8000578 <__aeabi_f2d>
 80049b8:	4682      	mov	sl, r0
 80049ba:	468b      	mov	fp, r1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049d0:	f7fb ff54 	bl	800087c <__aeabi_ddiv>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fb fc6e 	bl	80002bc <__adddf3>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	ec43 2b17 	vmov	d7, r2, r3
 80049e8:	eeb0 0a47 	vmov.f32	s0, s14
 80049ec:	eef0 0a67 	vmov.f32	s1, s15
 80049f0:	f00e fef6 	bl	80137e0 <cos>
 80049f4:	ec53 2b10 	vmov	r2, r3, d0
 80049f8:	4650      	mov	r0, sl
 80049fa:	4659      	mov	r1, fp
 80049fc:	f7fb fe14 	bl	8000628 <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fc58 	bl	80002bc <__adddf3>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	460c      	mov	r4, r1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7fb fdab 	bl	8000578 <__aeabi_f2d>
 8004a22:	4682      	mov	sl, r0
 8004a24:	468b      	mov	fp, r1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a3a:	f7fb ff1f 	bl	800087c <__aeabi_ddiv>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4640      	mov	r0, r8
 8004a44:	4649      	mov	r1, r9
 8004a46:	f7fb fc39 	bl	80002bc <__adddf3>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	ec43 2b17 	vmov	d7, r2, r3
 8004a52:	eeb0 0a47 	vmov.f32	s0, s14
 8004a56:	eef0 0a67 	vmov.f32	s1, s15
 8004a5a:	f00e ff05 	bl	8013868 <sin>
 8004a5e:	ec53 2b10 	vmov	r2, r3, d0
 8004a62:	4650      	mov	r0, sl
 8004a64:	4659      	mov	r1, fp
 8004a66:	f7fb fddf 	bl	8000628 <__aeabi_dmul>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb fc23 	bl	80002bc <__adddf3>
 8004a76:	4603      	mov	r3, r0
 8004a78:	460c      	mov	r4, r1
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4623      	mov	r3, r4
 8004a90:	f7fb fc14 	bl	80002bc <__adddf3>
 8004a94:	4603      	mov	r3, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8004aae:	eef0 0a67 	vmov.f32	s1, s15
 8004ab2:	f00e fe95 	bl	80137e0 <cos>
 8004ab6:	ec51 0b10 	vmov	r0, r1, d0
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004ac0:	f7fb fdb2 	bl	8000628 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7fb fbf6 	bl	80002bc <__adddf3>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aea:	eef0 0a67 	vmov.f32	s1, s15
 8004aee:	f00e febb 	bl	8013868 <sin>
 8004af2:	ec51 0b10 	vmov	r0, r1, d0
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004afc:	f7fb fd94 	bl	8000628 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4620      	mov	r0, r4
 8004b06:	4629      	mov	r1, r5
 8004b08:	f7fb fbd8 	bl	80002bc <__adddf3>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	4621      	mov	r1, r4
 8004b20:	f7fc f87a 	bl	8000c18 <__aeabi_d2f>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004b28:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004b30:	4618      	mov	r0, r3
 8004b32:	4621      	mov	r1, r4
 8004b34:	f7fc f870 	bl	8000c18 <__aeabi_d2f>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004b3c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004b44:	4618      	mov	r0, r3
 8004b46:	4621      	mov	r1, r4
 8004b48:	f7fc f866 	bl	8000c18 <__aeabi_d2f>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004b50:	601a      	str	r2, [r3, #0]
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5c:	f3af 8000 	nop.w
 8004b60:	405b8000 	.word	0x405b8000
 8004b64:	20000294 	.word	0x20000294
 8004b68:	20000298 	.word	0x20000298
 8004b6c:	2000029c 	.word	0x2000029c
 8004b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8004b74:	3f50624d 	.word	0x3f50624d

08004b78 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff feed 	bl	8004960 <_ZN8Odometry12calcPotitionEv>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004b8e:	b490      	push	{r4, r7}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
	return theta_;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004b9c:	ec44 3b17 	vmov	d7, r3, r4
}
 8004ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ba4:	eef0 0a67 	vmov.f32	s1, s15
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc90      	pop	{r4, r7}
 8004bae:	4770      	bx	lr

08004bb0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004bb0:	b490      	push	{r4, r7}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f04f 0400 	mov.w	r4, #0
 8004bc2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	f04f 0400 	mov.w	r4, #0
 8004bd0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	f04f 0400 	mov.w	r4, #0
 8004bde:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc90      	pop	{r4, r7}
 8004bea:	4770      	bx	lr

08004bec <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004bec:	b490      	push	{r4, r7}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c2a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004c2e:	2200      	movs	r2, #0
 8004c30:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <_ZN13PathFollowingC1Ev+0xec>)
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	f04f 0400 	mov.w	r4, #0
 8004c3c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <_ZN13PathFollowingC1Ev+0xec>)
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004c4e:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <_ZN13PathFollowingC1Ev+0xec>)
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	f04f 0400 	mov.w	r4, #0
 8004c58:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	f04f 0400 	mov.w	r4, #0
 8004c66:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	f04f 0400 	mov.w	r4, #0
 8004c74:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004c78:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004c86:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004c94:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <_ZN13PathFollowingC1Ev+0xf0>)
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	f04f 0400 	mov.w	r4, #0
 8004c9e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <_ZN13PathFollowingC1Ev+0xf0>)
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	f04f 0400 	mov.w	r4, #0
 8004cac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004cb0:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	f04f 0400 	mov.w	r4, #0
 8004cba:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004cbe:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc90      	pop	{r4, r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	2003ede0 	.word	0x2003ede0
 8004cdc:	2003ed70 	.word	0x2003ed70
 8004ce0:	2003edd0 	.word	0x2003edd0

08004ce4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004cec:	f001 fc92 	bl	8006614 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004cf0:	f107 0318 	add.w	r3, r7, #24
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4915      	ldr	r1, [pc, #84]	; (8004d4c <_ZN13PathFollowing4initEv+0x68>)
 8004cf8:	4815      	ldr	r0, [pc, #84]	; (8004d50 <_ZN13PathFollowing4initEv+0x6c>)
 8004cfa:	f7fc fd2f 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004cfe:	f107 0310 	add.w	r3, r7, #16
 8004d02:	2201      	movs	r2, #1
 8004d04:	4913      	ldr	r1, [pc, #76]	; (8004d54 <_ZN13PathFollowing4initEv+0x70>)
 8004d06:	4812      	ldr	r0, [pc, #72]	; (8004d50 <_ZN13PathFollowing4initEv+0x6c>)
 8004d08:	f7fc fd28 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004d0c:	f107 0308 	add.w	r3, r7, #8
 8004d10:	2201      	movs	r2, #1
 8004d12:	4911      	ldr	r1, [pc, #68]	; (8004d58 <_ZN13PathFollowing4initEv+0x74>)
 8004d14:	480e      	ldr	r0, [pc, #56]	; (8004d50 <_ZN13PathFollowing4initEv+0x6c>)
 8004d16:	f7fc fd21 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004d1a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d1e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004d22:	ed97 5b02 	vldr	d5, [r7, #8]
 8004d26:	eeb0 2a45 	vmov.f32	s4, s10
 8004d2a:	eef0 2a65 	vmov.f32	s5, s11
 8004d2e:	eeb0 1a46 	vmov.f32	s2, s12
 8004d32:	eef0 1a66 	vmov.f32	s3, s13
 8004d36:	eeb0 0a47 	vmov.f32	s0, s14
 8004d3a:	eef0 0a67 	vmov.f32	s1, s15
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f80c 	bl	8004d5c <_ZN13PathFollowing7setGainEddd>
}
 8004d44:	bf00      	nop
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08018e34 	.word	0x08018e34
 8004d50:	08018e3c 	.word	0x08018e3c
 8004d54:	08018e44 	.word	0x08018e44
 8004d58:	08018e4c 	.word	0x08018e4c

08004d5c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004d5c:	b490      	push	{r4, r7}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	61f8      	str	r0, [r7, #28]
 8004d64:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d68:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d6c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004d70:	4a09      	ldr	r2, [pc, #36]	; (8004d98 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004d76:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004d7a:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d80:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004d86:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d8a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004d8e:	bf00      	nop
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc90      	pop	{r4, r7}
 8004d96:	4770      	bx	lr
 8004d98:	2003ede0 	.word	0x2003ede0

08004d9c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004da4:	2088      	movs	r0, #136	; 0x88
 8004da6:	f7fd f82a 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004daa:	2080      	movs	r0, #128	; 0x80
 8004dac:	f7fd f827 	bl	8001dfe <INA260_init>
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004dc0:	2188      	movs	r1, #136	; 0x88
 8004dc2:	2002      	movs	r0, #2
 8004dc4:	f7fc ffb8 	bl	8001d38 <INA260_read>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fb fbc2 	bl	8000554 <__aeabi_i2d>
 8004dd0:	a30c      	add	r3, pc, #48	; (adr r3, 8004e04 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fc27 	bl	8000628 <__aeabi_dmul>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	4618      	mov	r0, r3
 8004de0:	4621      	mov	r1, r4
 8004de2:	f7fb ff19 	bl	8000c18 <__aeabi_d2f>
 8004de6:	4602      	mov	r2, r0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a03      	ldr	r2, [pc, #12]	; (8004e00 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004df2:	6013      	str	r3, [r2, #0]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	f3af 8000 	nop.w
 8004e00:	200002a0 	.word	0x200002a0
 8004e04:	47ae147b 	.word	0x47ae147b
 8004e08:	3f547ae1 	.word	0x3f547ae1

08004e0c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	ee07 3a90 	vmov	s15, r3

}
 8004e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004e38:	2102      	movs	r1, #2
 8004e3a:	4822      	ldr	r0, [pc, #136]	; (8004ec4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e3c:	f005 fa5a 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004e58:	2108      	movs	r1, #8
 8004e5a:	481a      	ldr	r0, [pc, #104]	; (8004ec4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e5c:	f005 fa4a 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004e70:	89fb      	ldrh	r3, [r7, #14]
 8004e72:	f043 0302 	orr.w	r3, r3, #2
 8004e76:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004e78:	2110      	movs	r1, #16
 8004e7a:	4812      	ldr	r0, [pc, #72]	; (8004ec4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e7c:	f005 fa3a 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	480a      	ldr	r0, [pc, #40]	; (8004ec4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004e9c:	f005 fa2a 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004eb0:	89fb      	ldrh	r3, [r7, #14]
 8004eb2:	f043 0308 	orr.w	r3, r3, #8
 8004eb6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004eb8:	89fb      	ldrh	r3, [r7, #14]

}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40020c00 	.word	0x40020c00

08004ec8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	805a      	strh	r2, [r3, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	809a      	strh	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	719a      	strb	r2, [r3, #6]
{

}
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	799b      	ldrb	r3, [r3, #6]
 8004f04:	f083 0301 	eor.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80c7 	beq.w	800509e <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004f10:	4b65      	ldr	r3, [pc, #404]	; (80050a8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	f083 0301 	eor.w	r3, r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d027      	beq.n	8004f6e <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004f1e:	2104      	movs	r1, #4
 8004f20:	4862      	ldr	r0, [pc, #392]	; (80050ac <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004f22:	f005 f9e7 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d006      	beq.n	8004f44 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004f36:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	4b5c      	ldr	r3, [pc, #368]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	e002      	b.n	8004f4a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004f44:	4b5a      	ldr	r3, [pc, #360]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004f4a:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d93f      	bls.n	8004fd2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004f60:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004f66:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	e031      	b.n	8004fd2 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004f6e:	4b4e      	ldr	r3, [pc, #312]	; (80050a8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d02d      	beq.n	8004fd2 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004f76:	2104      	movs	r1, #4
 8004f78:	484c      	ldr	r0, [pc, #304]	; (80050ac <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004f7a:	f005 f9bb 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004f8e:	4b48      	ldr	r3, [pc, #288]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f98:	801a      	strh	r2, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004f9c:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004fa2:	4b43      	ldr	r3, [pc, #268]	; (80050b0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d913      	bls.n	8004fd2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	f083 0301 	eor.w	r3, r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	889b      	ldrh	r3, [r3, #4]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	889a      	ldrh	r2, [r3, #4]
 8004fce:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004fd0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004fd2:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f083 0301 	eor.w	r3, r3, #1
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d027      	beq.n	8005030 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fe4:	4835      	ldr	r0, [pc, #212]	; (80050bc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004fe6:	f005 f985 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e002      	b.n	800500e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005008:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800500a:	2200      	movs	r2, #0
 800500c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800500e:	4b2c      	ldr	r3, [pc, #176]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d90c      	bls.n	8005030 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	f043 0302 	orr.w	r3, r3, #2
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800502a:	4b25      	ldr	r3, [pc, #148]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800502c:	2200      	movs	r2, #0
 800502e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005030:	4b21      	ldr	r3, [pc, #132]	; (80050b8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02e      	beq.n	8005096 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800503c:	481f      	ldr	r0, [pc, #124]	; (80050bc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800503e:	f005 f959 	bl	800a2f4 <HAL_GPIO_ReadPin>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf14      	ite	ne
 8005048:	2301      	movne	r3, #1
 800504a:	2300      	moveq	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d006      	beq.n	8005060 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e002      	b.n	8005066 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005062:	2200      	movs	r2, #0
 8005064:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	2b04      	cmp	r3, #4
 800506c:	d913      	bls.n	8005096 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f083 0302 	eor.w	r3, r3, #2
 8005076:	b29a      	uxth	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	885b      	ldrh	r3, [r3, #2]
 8005086:	3301      	adds	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	885a      	ldrh	r2, [r3, #2]
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8005094:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 800509c:	801a      	strh	r2, [r3, #0]
	}

}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200002aa 	.word	0x200002aa
 80050ac:	40021000 	.word	0x40021000
 80050b0:	200002ae 	.word	0x200002ae
 80050b4:	200002a8 	.word	0x200002a8
 80050b8:	200002ab 	.word	0x200002ab
 80050bc:	40020c00 	.word	0x40020c00
 80050c0:	200002ac 	.word	0x200002ac
 80050c4:	200002a6 	.word	0x200002a6
 80050c8:	200002a4 	.word	0x200002a4

080050cc <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	return status_;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	881b      	ldrh	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	889b      	ldrh	r3, [r3, #4]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	809a      	strh	r2, [r3, #4]
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	719a      	strb	r2, [r3, #6]
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	719a      	strb	r2, [r3, #6]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	799b      	ldrb	r3, [r3, #6]
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005178:	3308      	adds	r3, #8
 800517a:	4611      	mov	r1, r2
 800517c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005180:	4618      	mov	r0, r3
 8005182:	f00f fbad 	bl	80148e0 <memcpy>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	08018e70 	.word	0x08018e70

080051bc <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d010      	beq.n	80051f4 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	ed97 0a00 	vldr	s0, [r7]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff f86a 	bl	80042b4 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80051ea:	eeb0 0a67 	vmov.f32	s0, s15
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7ff f89c 	bl	800432c <_ZN6Logger9storeLog2Ef>
	}

}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a07      	ldr	r2, [pc, #28]	; (8005228 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff f974 	bl	80044fa <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a06      	ldr	r2, [pc, #24]	; (8005230 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8005218:	4904      	ldr	r1, [pc, #16]	; (800522c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff f980 	bl	8004520 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	08019064 	.word	0x08019064
 800522c:	08019070 	.word	0x08019070
 8005230:	0801907c 	.word	0x0801907c

08005234 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8005234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005242:	2b00      	cmp	r3, #0
 8005244:	d046      	beq.n	80052d4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3204      	adds	r2, #4
 8005258:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800525c:	ee07 3a90 	vmov	s15, r3
 8005260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005274:	3301      	adds	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005286:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800528e:	2bf9      	cmp	r3, #249	; 0xf9
 8005290:	d903      	bls.n	800529a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22fa      	movs	r2, #250	; 0xfa
 8005296:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685c      	ldr	r4, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb f967 	bl	8000578 <__aeabi_f2d>
 80052aa:	4605      	mov	r5, r0
 80052ac:	460e      	mov	r6, r1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80052b4:	eef1 7a67 	vneg.f32	s15, s15
 80052b8:	ee17 3a90 	vmov	r3, s15
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fb f95b 	bl	8000578 <__aeabi_f2d>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	ec43 2b11 	vmov	d1, r2, r3
 80052ca:	ec46 5b10 	vmov	d0, r5, r6
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff fa98 	bl	8004804 <_ZN5Motor8setRatioEdd>

	}

}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052dc:	200002b0 	.word	0x200002b0

080052e0 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff f9e4 	bl	80046da <_ZN6Logger5startEv>
	processing_flag_ = true;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	0000      	movs	r0, r0
 8005324:	0000      	movs	r0, r0
	...

08005328 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff f9e1 	bl	80046fc <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005368 <_ZN20SystemIdentification4stopEv+0x40>
 8005352:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005368 <_ZN20SystemIdentification4stopEv+0x40>
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fa54 	bl	8004804 <_ZN5Motor8setRatioEdd>
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	f3af 8000 	nop.w
	...

08005370 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	605a      	str	r2, [r3, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	615a      	str	r2, [r3, #20]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	619a      	str	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	61da      	str	r2, [r3, #28]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	621a      	str	r2, [r3, #32]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005408:	b590      	push	{r4, r7, lr}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	f107 020c 	add.w	r2, r7, #12
 8005418:	f107 0110 	add.w	r1, r7, #16
 800541c:	4618      	mov	r0, r3
 800541e:	f7fb fff3 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005422:	ed97 7a04 	vldr	s14, [r7, #16]
 8005426:	edd7 7a03 	vldr	s15, [r7, #12]
 800542a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800542e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005436:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800543a:	6978      	ldr	r0, [r7, #20]
 800543c:	f7fb f89c 	bl	8000578 <__aeabi_f2d>
 8005440:	a30b      	add	r3, pc, #44	; (adr r3, 8005470 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb f8ef 	bl	8000628 <__aeabi_dmul>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	4618      	mov	r0, r3
 8005450:	4621      	mov	r1, r4
 8005452:	f7fb fbe1 	bl	8000c18 <__aeabi_d2f>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	ee07 3a90 	vmov	s15, r3
}
 8005464:	eeb0 0a67 	vmov.f32	s0, s15
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	bd90      	pop	{r4, r7, pc}
 800546e:	bf00      	nop
 8005470:	1ab1d998 	.word	0x1ab1d998
 8005474:	3f7830b5 	.word	0x3f7830b5

08005478 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	ed93 7a00 	vldr	s14, [r3]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	edd3 7a02 	vldr	s15, [r3, #8]
 800548c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005490:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800549e:	4b48      	ldr	r3, [pc, #288]	; (80055c0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80054b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fb f857 	bl	8000578 <__aeabi_f2d>
 80054ca:	4604      	mov	r4, r0
 80054cc:	460d      	mov	r5, r1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80054d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80054d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054dc:	ee17 0a90 	vmov	r0, s15
 80054e0:	f7fb f84a 	bl	8000578 <__aeabi_f2d>
 80054e4:	a334      	add	r3, pc, #208	; (adr r3, 80055b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f7fb f89d 	bl	8000628 <__aeabi_dmul>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4620      	mov	r0, r4
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7fa fee1 	bl	80002bc <__adddf3>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	4618      	mov	r0, r3
 8005500:	4621      	mov	r1, r4
 8005502:	f7fb fb89 	bl	8000c18 <__aeabi_d2f>
 8005506:	4602      	mov	r2, r0
 8005508:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800550a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005512:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005514:	edd3 7a00 	vldr	s15, [r3]
 8005518:	edd7 6a05 	vldr	s13, [r7, #20]
 800551c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005524:	ee17 0a90 	vmov	r0, s15
 8005528:	f7fb f826 	bl	8000578 <__aeabi_f2d>
 800552c:	a322      	add	r3, pc, #136	; (adr r3, 80055b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fb f9a3 	bl	800087c <__aeabi_ddiv>
 8005536:	4603      	mov	r3, r0
 8005538:	460c      	mov	r4, r1
 800553a:	4618      	mov	r0, r3
 800553c:	4621      	mov	r1, r4
 800553e:	f7fb fb6b 	bl	8000c18 <__aeabi_d2f>
 8005542:	4603      	mov	r3, r0
 8005544:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005546:	ed97 7a04 	vldr	s14, [r7, #16]
 800554a:	edd7 7a03 	vldr	s15, [r7, #12]
 800554e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005554:	edd3 7a00 	vldr	s15, [r3]
 8005558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800556a:	edd7 7a02 	vldr	s15, [r7, #8]
 800556e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005572:	ee17 0a90 	vmov	r0, s15
 8005576:	f7fa ffff 	bl	8000578 <__aeabi_f2d>
 800557a:	4605      	mov	r5, r0
 800557c:	460e      	mov	r6, r1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005584:	ed97 7a02 	vldr	s14, [r7, #8]
 8005588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558c:	ee17 0a90 	vmov	r0, s15
 8005590:	f7fa fff2 	bl	8000578 <__aeabi_f2d>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	ec43 2b11 	vmov	d1, r2, r3
 800559c:	ec46 5b10 	vmov	d0, r5, r6
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff f92f 	bl	8004804 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80055a6:	4a07      	ldr	r2, [pc, #28]	; (80055c4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b4:	f3af 8000 	nop.w
 80055b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80055bc:	3f50624d 	.word	0x3f50624d
 80055c0:	200002b8 	.word	0x200002b8
 80055c4:	200002b4 	.word	0x200002b4

080055c8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80055d4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80055fc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	ed87 0a02 	vstr	s0, [r7, #8]
 8005624:	edc7 0a01 	vstr	s1, [r7, #4]
 8005628:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	615a      	str	r2, [r3, #20]
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	ed87 0a02 	vstr	s0, [r7, #8]
 8005656:	edc7 0a01 	vstr	s1, [r7, #4]
 800565a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff febf 	bl	8005408 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff feef 	bl	8005478 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80056f8 <_ZN12VelocityCtrl4stopEv+0x30>
 80056e0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80056f8 <_ZN12VelocityCtrl4stopEv+0x30>
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff f88d 	bl	8004804 <_ZN5Motor8setRatioEdd>

}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	f3af 8000 	nop.w
	...

08005700 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	ee07 3a90 	vmov	s15, r3
}
 8005710:	eeb0 0a67 	vmov.f32	s0, s15
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005732:	f001 fe27 	bl	8007384 <cppFlip100ns>

		tim7_timer++;
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800573e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005740:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d902      	bls.n	8005750 <HAL_TIM_PeriodElapsedCallback+0x30>
 800574a:	4b18      	ldr	r3, [pc, #96]	; (80057ac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10e      	bne.n	8005778 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800575a:	f001 fdc9 	bl	80072f0 <cppFlip1ms>

		tim6_timer++;
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3301      	adds	r3, #1
 8005764:	4a14      	ldr	r2, [pc, #80]	; (80057b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005766:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d902      	bls.n	8005778 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005782:	f001 fe09 	bl	8007398 <cppFlip10ms>

		tim13_timer++;
 8005786:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3301      	adds	r3, #1
 800578c:	4a0c      	ldr	r2, [pc, #48]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800578e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d902      	bls.n	80057a0 <HAL_TIM_PeriodElapsedCallback+0x80>
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
	}

}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40001400 	.word	0x40001400
 80057ac:	2003ea94 	.word	0x2003ea94
 80057b0:	0001869f 	.word	0x0001869f
 80057b4:	40001000 	.word	0x40001000
 80057b8:	2003ea50 	.word	0x2003ea50
 80057bc:	40001c00 	.word	0x40001c00
 80057c0:	2003ea98 	.word	0x2003ea98

080057c4 <init>:

void init()
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80057c8:	2201      	movs	r2, #1
 80057ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057ce:	4808      	ldr	r0, [pc, #32]	; (80057f0 <init+0x2c>)
 80057d0:	f004 fda8 	bl	800a324 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80057d4:	4807      	ldr	r0, [pc, #28]	; (80057f4 <init+0x30>)
 80057d6:	f008 fc70 	bl	800e0ba <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80057da:	4807      	ldr	r0, [pc, #28]	; (80057f8 <init+0x34>)
 80057dc:	f008 fc6d 	bl	800e0ba <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80057e0:	4806      	ldr	r0, [pc, #24]	; (80057fc <init+0x38>)
 80057e2:	f008 fc6a 	bl	800e0ba <HAL_TIM_Base_Start_IT>

	cppInit();
 80057e6:	f001 fce3 	bl	80071b0 <cppInit>

	//path_following_initialize();

}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
 80057f4:	2003eb7c 	.word	0x2003eb7c
 80057f8:	2003ed20 	.word	0x2003ed20
 80057fc:	2003ea9c 	.word	0x2003ea9c

08005800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005804:	f003 fa86 	bl	8008d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005808:	f000 f82a 	bl	8005860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800580c:	f000 fdbc 	bl	8006388 <MX_GPIO_Init>
  MX_DMA_Init();
 8005810:	f000 fd8a 	bl	8006328 <MX_DMA_Init>
  MX_I2C2_Init();
 8005814:	f000 f9e8 	bl	8005be8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005818:	f000 fa14 	bl	8005c44 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800581c:	f000 fa32 	bl	8005c84 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005820:	f000 fa66 	bl	8005cf0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005824:	f000 fb70 	bl	8005f08 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005828:	f000 fc3c 	bl	80060a4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800582c:	f000 fd52 	bl	80062d4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005830:	f00a fc16 	bl	8010060 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005834:	f000 fbcc 	bl	8005fd0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005838:	f000 f9a8 	bl	8005b8c <MX_I2C1_Init>
  MX_TIM3_Init();
 800583c:	f000 fb00 	bl	8005e40 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005840:	f000 fc88 	bl	8006154 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005844:	f000 fcd4 	bl	80061f0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005848:	f000 f898 	bl	800597c <MX_ADC2_Init>
  MX_TIM7_Init();
 800584c:	f000 fbf6 	bl	800603c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005850:	f000 fd1c 	bl	800628c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005854:	f7ff ffb6 	bl	80057c4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005858:	f001 fdb6 	bl	80073c8 <cppLoop>
 800585c:	e7fc      	b.n	8005858 <main+0x58>
	...

08005860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b0a4      	sub	sp, #144	; 0x90
 8005864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005866:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800586a:	2234      	movs	r2, #52	; 0x34
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f00f f841 	bl	80148f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005874:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005884:	f107 030c 	add.w	r3, r7, #12
 8005888:	223c      	movs	r2, #60	; 0x3c
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f00f f832 	bl	80148f6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	4b37      	ldr	r3, [pc, #220]	; (8005974 <SystemClock_Config+0x114>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a36      	ldr	r2, [pc, #216]	; (8005974 <SystemClock_Config+0x114>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b34      	ldr	r3, [pc, #208]	; (8005974 <SystemClock_Config+0x114>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058aa:	60bb      	str	r3, [r7, #8]
 80058ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	4b31      	ldr	r3, [pc, #196]	; (8005978 <SystemClock_Config+0x118>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a30      	ldr	r2, [pc, #192]	; (8005978 <SystemClock_Config+0x118>)
 80058b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <SystemClock_Config+0x118>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058d4:	2302      	movs	r3, #2
 80058d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058dc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80058de:	2308      	movs	r3, #8
 80058e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80058e2:	23b4      	movs	r3, #180	; 0xb4
 80058e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058e8:	2302      	movs	r3, #2
 80058ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80058ee:	2308      	movs	r3, #8
 80058f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80058f4:	2302      	movs	r3, #2
 80058f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80058fe:	4618      	mov	r0, r3
 8005900:	f006 f932 	bl	800bb68 <HAL_RCC_OscConfig>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800590a:	f000 fe7f 	bl	800660c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800590e:	f005 fcad 	bl	800b26c <HAL_PWREx_EnableOverDrive>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005918:	f000 fe78 	bl	800660c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800591c:	230f      	movs	r3, #15
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005920:	2302      	movs	r3, #2
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005924:	2300      	movs	r3, #0
 8005926:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005928:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800592c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800592e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005932:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005938:	2105      	movs	r1, #5
 800593a:	4618      	mov	r0, r3
 800593c:	f005 fce6 	bl	800b30c <HAL_RCC_ClockConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005946:	f000 fe61 	bl	800660c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800594a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800594e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005950:	2300      	movs	r3, #0
 8005952:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005954:	2300      	movs	r3, #0
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	4618      	mov	r0, r3
 800595e:	f005 fec5 	bl	800b6ec <HAL_RCCEx_PeriphCLKConfig>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005968:	f000 fe50 	bl	800660c <Error_Handler>
  }
}
 800596c:	bf00      	nop
 800596e:	3790      	adds	r7, #144	; 0x90
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40023800 	.word	0x40023800
 8005978:	40007000 	.word	0x40007000

0800597c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005982:	463b      	mov	r3, r7
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800598e:	4b7c      	ldr	r3, [pc, #496]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005990:	4a7c      	ldr	r2, [pc, #496]	; (8005b84 <MX_ADC2_Init+0x208>)
 8005992:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005994:	4b7a      	ldr	r3, [pc, #488]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800599a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800599c:	4b78      	ldr	r3, [pc, #480]	; (8005b80 <MX_ADC2_Init+0x204>)
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80059a2:	4b77      	ldr	r3, [pc, #476]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80059a8:	4b75      	ldr	r3, [pc, #468]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80059ae:	4b74      	ldr	r3, [pc, #464]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80059b6:	4b72      	ldr	r3, [pc, #456]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80059bc:	4b70      	ldr	r3, [pc, #448]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059be:	4a72      	ldr	r2, [pc, #456]	; (8005b88 <MX_ADC2_Init+0x20c>)
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059c2:	4b6f      	ldr	r3, [pc, #444]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80059c8:	4b6d      	ldr	r3, [pc, #436]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059ca:	220e      	movs	r2, #14
 80059cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80059ce:	4b6c      	ldr	r3, [pc, #432]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80059d6:	4b6a      	ldr	r3, [pc, #424]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059d8:	2201      	movs	r2, #1
 80059da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80059dc:	4868      	ldr	r0, [pc, #416]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059de:	f003 fa2d 	bl	8008e3c <HAL_ADC_Init>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80059e8:	f000 fe10 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80059ec:	230a      	movs	r3, #10
 80059ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80059f0:	2301      	movs	r3, #1
 80059f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80059f4:	2306      	movs	r3, #6
 80059f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059f8:	463b      	mov	r3, r7
 80059fa:	4619      	mov	r1, r3
 80059fc:	4860      	ldr	r0, [pc, #384]	; (8005b80 <MX_ADC2_Init+0x204>)
 80059fe:	f003 fb71 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005a08:	f000 fe00 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005a0c:	230b      	movs	r3, #11
 8005a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005a10:	2302      	movs	r3, #2
 8005a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a14:	463b      	mov	r3, r7
 8005a16:	4619      	mov	r1, r3
 8005a18:	4859      	ldr	r0, [pc, #356]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005a1a:	f003 fb63 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005a24:	f000 fdf2 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005a28:	230c      	movs	r3, #12
 8005a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a30:	463b      	mov	r3, r7
 8005a32:	4619      	mov	r1, r3
 8005a34:	4852      	ldr	r0, [pc, #328]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005a36:	f003 fb55 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005a40:	f000 fde4 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a44:	230d      	movs	r3, #13
 8005a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005a48:	2304      	movs	r3, #4
 8005a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	4619      	mov	r1, r3
 8005a50:	484b      	ldr	r0, [pc, #300]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005a52:	f003 fb47 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005a5c:	f000 fdd6 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005a64:	2305      	movs	r3, #5
 8005a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a68:	463b      	mov	r3, r7
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4844      	ldr	r0, [pc, #272]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005a6e:	f003 fb39 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005a78:	f000 fdc8 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005a80:	2306      	movs	r3, #6
 8005a82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a84:	463b      	mov	r3, r7
 8005a86:	4619      	mov	r1, r3
 8005a88:	483d      	ldr	r0, [pc, #244]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005a8a:	f003 fb2b 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005a94:	f000 fdba 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005a9c:	2307      	movs	r3, #7
 8005a9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4836      	ldr	r0, [pc, #216]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005aa6:	f003 fb1d 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005ab0:	f000 fdac 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005ab8:	2308      	movs	r3, #8
 8005aba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005abc:	463b      	mov	r3, r7
 8005abe:	4619      	mov	r1, r3
 8005ac0:	482f      	ldr	r0, [pc, #188]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005ac2:	f003 fb0f 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005acc:	f000 fd9e 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005ad4:	2309      	movs	r3, #9
 8005ad6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4619      	mov	r1, r3
 8005adc:	4828      	ldr	r0, [pc, #160]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005ade:	f003 fb01 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005ae8:	f000 fd90 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005aec:	2305      	movs	r3, #5
 8005aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005af0:	230a      	movs	r3, #10
 8005af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005af4:	463b      	mov	r3, r7
 8005af6:	4619      	mov	r1, r3
 8005af8:	4821      	ldr	r0, [pc, #132]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005afa:	f003 faf3 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005b04:	f000 fd82 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005b08:	2306      	movs	r3, #6
 8005b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005b0c:	230b      	movs	r3, #11
 8005b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b10:	463b      	mov	r3, r7
 8005b12:	4619      	mov	r1, r3
 8005b14:	481a      	ldr	r0, [pc, #104]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005b16:	f003 fae5 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005b20:	f000 fd74 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005b24:	2307      	movs	r3, #7
 8005b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005b28:	230c      	movs	r3, #12
 8005b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4813      	ldr	r0, [pc, #76]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005b32:	f003 fad7 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005b3c:	f000 fd66 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005b40:	2308      	movs	r3, #8
 8005b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005b44:	230d      	movs	r3, #13
 8005b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b48:	463b      	mov	r3, r7
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	480c      	ldr	r0, [pc, #48]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005b4e:	f003 fac9 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005b58:	f000 fd58 	bl	800660c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005b5c:	2309      	movs	r3, #9
 8005b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005b60:	230e      	movs	r3, #14
 8005b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b64:	463b      	mov	r3, r7
 8005b66:	4619      	mov	r1, r3
 8005b68:	4805      	ldr	r0, [pc, #20]	; (8005b80 <MX_ADC2_Init+0x204>)
 8005b6a:	f003 fabb 	bl	80090e4 <HAL_ADC_ConfigChannel>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005b74:	f000 fd4a 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	2003e920 	.word	0x2003e920
 8005b84:	40012100 	.word	0x40012100
 8005b88:	0f000001 	.word	0x0f000001

08005b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005b92:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <MX_I2C1_Init+0x54>)
 8005b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005b98:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <MX_I2C1_Init+0x58>)
 8005b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ba2:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005bc4:	2280      	movs	r2, #128	; 0x80
 8005bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bc8:	4804      	ldr	r0, [pc, #16]	; (8005bdc <MX_I2C1_Init+0x50>)
 8005bca:	f004 fbc5 	bl	800a358 <HAL_I2C_Init>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005bd4:	f000 fd1a 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	2003e968 	.word	0x2003e968
 8005be0:	40005400 	.word	0x40005400
 8005be4:	000186a0 	.word	0x000186a0

08005be8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <MX_I2C2_Init+0x54>)
 8005bf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005bf4:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <MX_I2C2_Init+0x58>)
 8005bf6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c24:	4804      	ldr	r0, [pc, #16]	; (8005c38 <MX_I2C2_Init+0x50>)
 8005c26:	f004 fb97 	bl	800a358 <HAL_I2C_Init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c30:	f000 fcec 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c34:	bf00      	nop
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	2003e9fc 	.word	0x2003e9fc
 8005c3c:	40005800 	.word	0x40005800
 8005c40:	000186a0 	.word	0x000186a0

08005c44 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c4a:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <MX_SDIO_SD_Init+0x3c>)
 8005c4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <MX_SDIO_SD_Init+0x38>)
 8005c6e:	2202      	movs	r2, #2
 8005c70:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005c72:	bf00      	nop
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	2003ebfc 	.word	0x2003ebfc
 8005c80:	40012c00 	.word	0x40012c00

08005c84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <MX_SPI2_Init+0x68>)
 8005c8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005c8e:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c9c:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005ca2:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005ca8:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005cae:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cb8:	2228      	movs	r2, #40	; 0x28
 8005cba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc8:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cd0:	220a      	movs	r2, #10
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005cd4:	4804      	ldr	r0, [pc, #16]	; (8005ce8 <MX_SPI2_Init+0x64>)
 8005cd6:	f007 fc71 	bl	800d5bc <HAL_SPI_Init>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005ce0:	f000 fc94 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2003e848 	.word	0x2003e848
 8005cec:	40003800 	.word	0x40003800

08005cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b09a      	sub	sp, #104	; 0x68
 8005cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f00e fdf9 	bl	80148f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d0e:	f107 0320 	add.w	r3, r7, #32
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]
 8005d18:	609a      	str	r2, [r3, #8]
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	611a      	str	r2, [r3, #16]
 8005d1e:	615a      	str	r2, [r3, #20]
 8005d20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d22:	463b      	mov	r3, r7
 8005d24:	2220      	movs	r2, #32
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f00e fde4 	bl	80148f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d2e:	4b42      	ldr	r3, [pc, #264]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d30:	4a42      	ldr	r2, [pc, #264]	; (8005e3c <MX_TIM1_Init+0x14c>)
 8005d32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d34:	4b40      	ldr	r3, [pc, #256]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d3a:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005d40:	4b3d      	ldr	r3, [pc, #244]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d48:	4b3b      	ldr	r3, [pc, #236]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d4e:	4b3a      	ldr	r3, [pc, #232]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d54:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d5a:	4837      	ldr	r0, [pc, #220]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d5c:	f008 f9d1 	bl	800e102 <HAL_TIM_PWM_Init>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005d66:	f000 fc51 	bl	800660c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d72:	2301      	movs	r3, #1
 8005d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d76:	2300      	movs	r3, #0
 8005d78:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d82:	2301      	movs	r3, #1
 8005d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d86:	2300      	movs	r3, #0
 8005d88:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005d8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d92:	4619      	mov	r1, r3
 8005d94:	4828      	ldr	r0, [pc, #160]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005d96:	f008 fa1d 	bl	800e1d4 <HAL_TIM_Encoder_Init>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005da0:	f000 fc34 	bl	800660c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005da4:	2300      	movs	r3, #0
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005db0:	4619      	mov	r1, r3
 8005db2:	4821      	ldr	r0, [pc, #132]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005db4:	f008 ff44 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005dbe:	f000 fc25 	bl	800660c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dc2:	2360      	movs	r3, #96	; 0x60
 8005dc4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005dde:	f107 0320 	add.w	r3, r7, #32
 8005de2:	2208      	movs	r2, #8
 8005de4:	4619      	mov	r1, r3
 8005de6:	4814      	ldr	r0, [pc, #80]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005de8:	f008 fbc6 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005df2:	f000 fc0b 	bl	800660c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e14:	463b      	mov	r3, r7
 8005e16:	4619      	mov	r1, r3
 8005e18:	4807      	ldr	r0, [pc, #28]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005e1a:	f008 ff8d 	bl	800ed38 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005e24:	f000 fbf2 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e28:	4803      	ldr	r0, [pc, #12]	; (8005e38 <MX_TIM1_Init+0x148>)
 8005e2a:	f000 ffdf 	bl	8006dec <HAL_TIM_MspPostInit>

}
 8005e2e:	bf00      	nop
 8005e30:	3768      	adds	r7, #104	; 0x68
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2003ebbc 	.word	0x2003ebbc
 8005e3c:	40010000 	.word	0x40010000

08005e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e46:	f107 0320 	add.w	r3, r7, #32
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	609a      	str	r2, [r3, #8]
 8005e5a:	60da      	str	r2, [r3, #12]
 8005e5c:	611a      	str	r2, [r3, #16]
 8005e5e:	615a      	str	r2, [r3, #20]
 8005e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005e62:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e64:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <MX_TIM3_Init+0xc4>)
 8005e66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005e74:	4b22      	ldr	r3, [pc, #136]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e7c:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e82:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e88:	481d      	ldr	r0, [pc, #116]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005e8a:	f008 f93a 	bl	800e102 <HAL_TIM_PWM_Init>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005e94:	f000 fbba 	bl	800660c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ea0:	f107 0320 	add.w	r3, r7, #32
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4816      	ldr	r0, [pc, #88]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005ea8:	f008 feca 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005eb2:	f000 fbab 	bl	800660c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005eb6:	2360      	movs	r3, #96	; 0x60
 8005eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4619      	mov	r1, r3
 8005ecc:	480c      	ldr	r0, [pc, #48]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005ece:	f008 fb53 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005ed8:	f000 fb98 	bl	800660c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	2204      	movs	r2, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4807      	ldr	r0, [pc, #28]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005ee4:	f008 fb48 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005eee:	f000 fb8d 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005ef2:	4803      	ldr	r0, [pc, #12]	; (8005f00 <MX_TIM3_Init+0xc0>)
 8005ef4:	f000 ff7a 	bl	8006dec <HAL_TIM_MspPostInit>

}
 8005ef8:	bf00      	nop
 8005efa:	3728      	adds	r7, #40	; 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	2003ea54 	.word	0x2003ea54
 8005f04:	40000400 	.word	0x40000400

08005f08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f0e:	f107 0320 	add.w	r3, r7, #32
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
 8005f20:	609a      	str	r2, [r3, #8]
 8005f22:	60da      	str	r2, [r3, #12]
 8005f24:	611a      	str	r2, [r3, #16]
 8005f26:	615a      	str	r2, [r3, #20]
 8005f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005f2a:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f2c:	4a27      	ldr	r2, [pc, #156]	; (8005fcc <MX_TIM4_Init+0xc4>)
 8005f2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005f3c:	4b22      	ldr	r3, [pc, #136]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f3e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005f42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f44:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f50:	481d      	ldr	r0, [pc, #116]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f52:	f008 f8d6 	bl	800e102 <HAL_TIM_PWM_Init>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005f5c:	f000 fb56 	bl	800660c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f60:	2300      	movs	r3, #0
 8005f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f68:	f107 0320 	add.w	r3, r7, #32
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4816      	ldr	r0, [pc, #88]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f70:	f008 fe66 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005f7a:	f000 fb47 	bl	800660c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f7e:	2360      	movs	r3, #96	; 0x60
 8005f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	2208      	movs	r2, #8
 8005f92:	4619      	mov	r1, r3
 8005f94:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005f96:	f008 faef 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005fa0:	f000 fb34 	bl	800660c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4807      	ldr	r0, [pc, #28]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005fac:	f008 fae4 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005fb6:	f000 fb29 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005fba:	4803      	ldr	r0, [pc, #12]	; (8005fc8 <MX_TIM4_Init+0xc0>)
 8005fbc:	f000 ff16 	bl	8006dec <HAL_TIM_MspPostInit>

}
 8005fc0:	bf00      	nop
 8005fc2:	3728      	adds	r7, #40	; 0x28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	2003e8e0 	.word	0x2003e8e0
 8005fcc:	40000800 	.word	0x40000800

08005fd0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <MX_TIM6_Init+0x64>)
 8005fe0:	4a15      	ldr	r2, [pc, #84]	; (8006038 <MX_TIM6_Init+0x68>)
 8005fe2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005fe4:	4b13      	ldr	r3, [pc, #76]	; (8006034 <MX_TIM6_Init+0x64>)
 8005fe6:	2259      	movs	r2, #89	; 0x59
 8005fe8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <MX_TIM6_Init+0x64>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <MX_TIM6_Init+0x64>)
 8005ff2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ff6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ff8:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <MX_TIM6_Init+0x64>)
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ffe:	480d      	ldr	r0, [pc, #52]	; (8006034 <MX_TIM6_Init+0x64>)
 8006000:	f008 f830 	bl	800e064 <HAL_TIM_Base_Init>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800600a:	f000 faff 	bl	800660c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800600e:	2300      	movs	r3, #0
 8006010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006016:	463b      	mov	r3, r7
 8006018:	4619      	mov	r1, r3
 800601a:	4806      	ldr	r0, [pc, #24]	; (8006034 <MX_TIM6_Init+0x64>)
 800601c:	f008 fe10 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006026:	f000 faf1 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	2003eb7c 	.word	0x2003eb7c
 8006038:	40001000 	.word	0x40001000

0800603c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006042:	463b      	mov	r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <MX_TIM7_Init+0x60>)
 800604c:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <MX_TIM7_Init+0x64>)
 800604e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006050:	4b12      	ldr	r3, [pc, #72]	; (800609c <MX_TIM7_Init+0x60>)
 8006052:	22b3      	movs	r2, #179	; 0xb3
 8006054:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <MX_TIM7_Init+0x60>)
 8006058:	2200      	movs	r2, #0
 800605a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800605c:	4b0f      	ldr	r3, [pc, #60]	; (800609c <MX_TIM7_Init+0x60>)
 800605e:	2231      	movs	r2, #49	; 0x31
 8006060:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <MX_TIM7_Init+0x60>)
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006068:	480c      	ldr	r0, [pc, #48]	; (800609c <MX_TIM7_Init+0x60>)
 800606a:	f007 fffb 	bl	800e064 <HAL_TIM_Base_Init>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006074:	f000 faca 	bl	800660c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006078:	2300      	movs	r3, #0
 800607a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800607c:	2300      	movs	r3, #0
 800607e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006080:	463b      	mov	r3, r7
 8006082:	4619      	mov	r1, r3
 8006084:	4805      	ldr	r0, [pc, #20]	; (800609c <MX_TIM7_Init+0x60>)
 8006086:	f008 fddb 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006090:	f000 fabc 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	2003ed20 	.word	0x2003ed20
 80060a0:	40001400 	.word	0x40001400

080060a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	; 0x30
 80060a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060aa:	f107 030c 	add.w	r3, r7, #12
 80060ae:	2224      	movs	r2, #36	; 0x24
 80060b0:	2100      	movs	r1, #0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f00e fc1f 	bl	80148f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060b8:	1d3b      	adds	r3, r7, #4
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80060c0:	4b22      	ldr	r3, [pc, #136]	; (800614c <MX_TIM8_Init+0xa8>)
 80060c2:	4a23      	ldr	r2, [pc, #140]	; (8006150 <MX_TIM8_Init+0xac>)
 80060c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80060c6:	4b21      	ldr	r3, [pc, #132]	; (800614c <MX_TIM8_Init+0xa8>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80060cc:	4b1f      	ldr	r3, [pc, #124]	; (800614c <MX_TIM8_Init+0xa8>)
 80060ce:	2210      	movs	r2, #16
 80060d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80060d2:	4b1e      	ldr	r3, [pc, #120]	; (800614c <MX_TIM8_Init+0xa8>)
 80060d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060da:	4b1c      	ldr	r3, [pc, #112]	; (800614c <MX_TIM8_Init+0xa8>)
 80060dc:	2200      	movs	r2, #0
 80060de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <MX_TIM8_Init+0xa8>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060e6:	4b19      	ldr	r3, [pc, #100]	; (800614c <MX_TIM8_Init+0xa8>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80060ec:	2303      	movs	r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80060f4:	2301      	movs	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006104:	2301      	movs	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006108:	2300      	movs	r3, #0
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	4619      	mov	r1, r3
 8006116:	480d      	ldr	r0, [pc, #52]	; (800614c <MX_TIM8_Init+0xa8>)
 8006118:	f008 f85c 	bl	800e1d4 <HAL_TIM_Encoder_Init>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006122:	f000 fa73 	bl	800660c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800612e:	1d3b      	adds	r3, r7, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4806      	ldr	r0, [pc, #24]	; (800614c <MX_TIM8_Init+0xa8>)
 8006134:	f008 fd84 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800613e:	f000 fa65 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006142:	bf00      	nop
 8006144:	3730      	adds	r7, #48	; 0x30
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	2003e8a0 	.word	0x2003e8a0
 8006150:	40010400 	.word	0x40010400

08006154 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	611a      	str	r2, [r3, #16]
 8006168:	615a      	str	r2, [r3, #20]
 800616a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800616c:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <MX_TIM10_Init+0x94>)
 800616e:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <MX_TIM10_Init+0x98>)
 8006170:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <MX_TIM10_Init+0x94>)
 8006174:	2200      	movs	r2, #0
 8006176:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <MX_TIM10_Init+0x94>)
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800617e:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <MX_TIM10_Init+0x94>)
 8006180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006184:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <MX_TIM10_Init+0x94>)
 8006188:	2200      	movs	r2, #0
 800618a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800618c:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <MX_TIM10_Init+0x94>)
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006192:	4815      	ldr	r0, [pc, #84]	; (80061e8 <MX_TIM10_Init+0x94>)
 8006194:	f007 ff66 	bl	800e064 <HAL_TIM_Base_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800619e:	f000 fa35 	bl	800660c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80061a2:	4811      	ldr	r0, [pc, #68]	; (80061e8 <MX_TIM10_Init+0x94>)
 80061a4:	f007 ffad 	bl	800e102 <HAL_TIM_PWM_Init>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80061ae:	f000 fa2d 	bl	800660c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061b2:	2360      	movs	r3, #96	; 0x60
 80061b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	2200      	movs	r2, #0
 80061c6:	4619      	mov	r1, r3
 80061c8:	4807      	ldr	r0, [pc, #28]	; (80061e8 <MX_TIM10_Init+0x94>)
 80061ca:	f008 f9d5 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80061d4:	f000 fa1a 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80061d8:	4803      	ldr	r0, [pc, #12]	; (80061e8 <MX_TIM10_Init+0x94>)
 80061da:	f000 fe07 	bl	8006dec <HAL_TIM_MspPostInit>

}
 80061de:	bf00      	nop
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	2003e9bc 	.word	0x2003e9bc
 80061ec:	40014400 	.word	0x40014400

080061f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
 8006204:	615a      	str	r2, [r3, #20]
 8006206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006208:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <MX_TIM11_Init+0x94>)
 800620a:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <MX_TIM11_Init+0x98>)
 800620c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <MX_TIM11_Init+0x94>)
 8006210:	2200      	movs	r2, #0
 8006212:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <MX_TIM11_Init+0x94>)
 8006216:	2200      	movs	r2, #0
 8006218:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <MX_TIM11_Init+0x94>)
 800621c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006220:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <MX_TIM11_Init+0x94>)
 8006224:	2200      	movs	r2, #0
 8006226:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <MX_TIM11_Init+0x94>)
 800622a:	2200      	movs	r2, #0
 800622c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800622e:	4815      	ldr	r0, [pc, #84]	; (8006284 <MX_TIM11_Init+0x94>)
 8006230:	f007 ff18 	bl	800e064 <HAL_TIM_Base_Init>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800623a:	f000 f9e7 	bl	800660c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800623e:	4811      	ldr	r0, [pc, #68]	; (8006284 <MX_TIM11_Init+0x94>)
 8006240:	f007 ff5f 	bl	800e102 <HAL_TIM_PWM_Init>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800624a:	f000 f9df 	bl	800660c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800624e:	2360      	movs	r3, #96	; 0x60
 8006250:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	2200      	movs	r2, #0
 8006262:	4619      	mov	r1, r3
 8006264:	4807      	ldr	r0, [pc, #28]	; (8006284 <MX_TIM11_Init+0x94>)
 8006266:	f008 f987 	bl	800e578 <HAL_TIM_PWM_ConfigChannel>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006270:	f000 f9cc 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006274:	4803      	ldr	r0, [pc, #12]	; (8006284 <MX_TIM11_Init+0x94>)
 8006276:	f000 fdb9 	bl	8006dec <HAL_TIM_MspPostInit>

}
 800627a:	bf00      	nop
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	2003eadc 	.word	0x2003eadc
 8006288:	40014800 	.word	0x40014800

0800628c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006290:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <MX_TIM13_Init+0x40>)
 8006292:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <MX_TIM13_Init+0x44>)
 8006294:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <MX_TIM13_Init+0x40>)
 8006298:	2259      	movs	r2, #89	; 0x59
 800629a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800629c:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <MX_TIM13_Init+0x40>)
 800629e:	2200      	movs	r2, #0
 80062a0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <MX_TIM13_Init+0x40>)
 80062a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80062a8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <MX_TIM13_Init+0x40>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <MX_TIM13_Init+0x40>)
 80062b2:	2280      	movs	r2, #128	; 0x80
 80062b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80062b6:	4805      	ldr	r0, [pc, #20]	; (80062cc <MX_TIM13_Init+0x40>)
 80062b8:	f007 fed4 	bl	800e064 <HAL_TIM_Base_Init>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80062c2:	f000 f9a3 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2003ea9c 	.word	0x2003ea9c
 80062d0:	40001c00 	.word	0x40001c00

080062d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 80062da:	4a12      	ldr	r2, [pc, #72]	; (8006324 <MX_USART2_UART_Init+0x50>)
 80062dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062de:	4b10      	ldr	r3, [pc, #64]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 80062e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 80062fa:	220c      	movs	r2, #12
 80062fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 8006300:	2200      	movs	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 8006306:	2200      	movs	r2, #0
 8006308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800630a:	4805      	ldr	r0, [pc, #20]	; (8006320 <MX_USART2_UART_Init+0x4c>)
 800630c:	f008 fd7a 	bl	800ee04 <HAL_UART_Init>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006316:	f000 f979 	bl	800660c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	2003ec80 	.word	0x2003ec80
 8006324:	40004400 	.word	0x40004400

08006328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <MX_DMA_Init+0x5c>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	4a13      	ldr	r2, [pc, #76]	; (8006384 <MX_DMA_Init+0x5c>)
 8006338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800633c:	6313      	str	r3, [r2, #48]	; 0x30
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <MX_DMA_Init+0x5c>)
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	203a      	movs	r0, #58	; 0x3a
 8006350:	f003 fa53 	bl	80097fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006354:	203a      	movs	r0, #58	; 0x3a
 8006356:	f003 fa6c 	bl	8009832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	203b      	movs	r0, #59	; 0x3b
 8006360:	f003 fa4b 	bl	80097fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006364:	203b      	movs	r0, #59	; 0x3b
 8006366:	f003 fa64 	bl	8009832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	2045      	movs	r0, #69	; 0x45
 8006370:	f003 fa43 	bl	80097fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006374:	2045      	movs	r0, #69	; 0x45
 8006376:	f003 fa5c 	bl	8009832 <HAL_NVIC_EnableIRQ>

}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40023800 	.word	0x40023800

08006388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	; 0x30
 800638c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800638e:	f107 031c 	add.w	r3, r7, #28
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	60da      	str	r2, [r3, #12]
 800639c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	4b94      	ldr	r3, [pc, #592]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a93      	ldr	r2, [pc, #588]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063a8:	f043 0310 	orr.w	r3, r3, #16
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b91      	ldr	r3, [pc, #580]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	4b8d      	ldr	r3, [pc, #564]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	4a8c      	ldr	r2, [pc, #560]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	6313      	str	r3, [r2, #48]	; 0x30
 80063ca:	4b8a      	ldr	r3, [pc, #552]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	4b86      	ldr	r3, [pc, #536]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	4a85      	ldr	r2, [pc, #532]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063e0:	f043 0304 	orr.w	r3, r3, #4
 80063e4:	6313      	str	r3, [r2, #48]	; 0x30
 80063e6:	4b83      	ldr	r3, [pc, #524]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	4b7f      	ldr	r3, [pc, #508]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	4a7e      	ldr	r2, [pc, #504]	; (80065f4 <MX_GPIO_Init+0x26c>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6313      	str	r3, [r2, #48]	; 0x30
 8006402:	4b7c      	ldr	r3, [pc, #496]	; (80065f4 <MX_GPIO_Init+0x26c>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	4b78      	ldr	r3, [pc, #480]	; (80065f4 <MX_GPIO_Init+0x26c>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	4a77      	ldr	r2, [pc, #476]	; (80065f4 <MX_GPIO_Init+0x26c>)
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	6313      	str	r3, [r2, #48]	; 0x30
 800641e:	4b75      	ldr	r3, [pc, #468]	; (80065f4 <MX_GPIO_Init+0x26c>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	60bb      	str	r3, [r7, #8]
 8006428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	4b71      	ldr	r3, [pc, #452]	; (80065f4 <MX_GPIO_Init+0x26c>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	4a70      	ldr	r2, [pc, #448]	; (80065f4 <MX_GPIO_Init+0x26c>)
 8006434:	f043 0308 	orr.w	r3, r3, #8
 8006438:	6313      	str	r3, [r2, #48]	; 0x30
 800643a:	4b6e      	ldr	r3, [pc, #440]	; (80065f4 <MX_GPIO_Init+0x26c>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006446:	2200      	movs	r2, #0
 8006448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800644c:	486a      	ldr	r0, [pc, #424]	; (80065f8 <MX_GPIO_Init+0x270>)
 800644e:	f003 ff69 	bl	800a324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006452:	2200      	movs	r2, #0
 8006454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006458:	4868      	ldr	r0, [pc, #416]	; (80065fc <MX_GPIO_Init+0x274>)
 800645a:	f003 ff63 	bl	800a324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800645e:	2200      	movs	r2, #0
 8006460:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006464:	4866      	ldr	r0, [pc, #408]	; (8006600 <MX_GPIO_Init+0x278>)
 8006466:	f003 ff5d 	bl	800a324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800646a:	2200      	movs	r2, #0
 800646c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006470:	4864      	ldr	r0, [pc, #400]	; (8006604 <MX_GPIO_Init+0x27c>)
 8006472:	f003 ff57 	bl	800a324 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006476:	2304      	movs	r3, #4
 8006478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800647a:	2300      	movs	r3, #0
 800647c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006482:	f107 031c 	add.w	r3, r7, #28
 8006486:	4619      	mov	r1, r3
 8006488:	485b      	ldr	r0, [pc, #364]	; (80065f8 <MX_GPIO_Init+0x270>)
 800648a:	f003 fd89 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800648e:	230f      	movs	r3, #15
 8006490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006492:	2303      	movs	r3, #3
 8006494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006496:	2300      	movs	r3, #0
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800649a:	f107 031c 	add.w	r3, r7, #28
 800649e:	4619      	mov	r1, r3
 80064a0:	4859      	ldr	r0, [pc, #356]	; (8006608 <MX_GPIO_Init+0x280>)
 80064a2:	f003 fd7d 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80064a6:	23e1      	movs	r3, #225	; 0xe1
 80064a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064aa:	2303      	movs	r3, #3
 80064ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b2:	f107 031c 	add.w	r3, r7, #28
 80064b6:	4619      	mov	r1, r3
 80064b8:	4852      	ldr	r0, [pc, #328]	; (8006604 <MX_GPIO_Init+0x27c>)
 80064ba:	f003 fd71 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064be:	2303      	movs	r3, #3
 80064c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064c2:	2303      	movs	r3, #3
 80064c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064ca:	f107 031c 	add.w	r3, r7, #28
 80064ce:	4619      	mov	r1, r3
 80064d0:	484a      	ldr	r0, [pc, #296]	; (80065fc <MX_GPIO_Init+0x274>)
 80064d2:	f003 fd65 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064d6:	2304      	movs	r3, #4
 80064d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064da:	2300      	movs	r3, #0
 80064dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064de:	2301      	movs	r3, #1
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064e2:	f107 031c 	add.w	r3, r7, #28
 80064e6:	4619      	mov	r1, r3
 80064e8:	4844      	ldr	r0, [pc, #272]	; (80065fc <MX_GPIO_Init+0x274>)
 80064ea:	f003 fd59 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80064ee:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80064f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064f4:	2300      	movs	r3, #0
 80064f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064f8:	2301      	movs	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064fc:	f107 031c 	add.w	r3, r7, #28
 8006500:	4619      	mov	r1, r3
 8006502:	483d      	ldr	r0, [pc, #244]	; (80065f8 <MX_GPIO_Init+0x270>)
 8006504:	f003 fd4c 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006508:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800650c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800650e:	2301      	movs	r3, #1
 8006510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006516:	2300      	movs	r3, #0
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800651a:	f107 031c 	add.w	r3, r7, #28
 800651e:	4619      	mov	r1, r3
 8006520:	4835      	ldr	r0, [pc, #212]	; (80065f8 <MX_GPIO_Init+0x270>)
 8006522:	f003 fd3d 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800652a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800652c:	2301      	movs	r3, #1
 800652e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006530:	2300      	movs	r3, #0
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006534:	2300      	movs	r3, #0
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006538:	f107 031c 	add.w	r3, r7, #28
 800653c:	4619      	mov	r1, r3
 800653e:	482f      	ldr	r0, [pc, #188]	; (80065fc <MX_GPIO_Init+0x274>)
 8006540:	f003 fd2e 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800654a:	2300      	movs	r3, #0
 800654c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654e:	2300      	movs	r3, #0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006552:	f107 031c 	add.w	r3, r7, #28
 8006556:	4619      	mov	r1, r3
 8006558:	4829      	ldr	r0, [pc, #164]	; (8006600 <MX_GPIO_Init+0x278>)
 800655a:	f003 fd21 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800655e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006564:	2301      	movs	r3, #1
 8006566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006568:	2300      	movs	r3, #0
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800656c:	2300      	movs	r3, #0
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006570:	f107 031c 	add.w	r3, r7, #28
 8006574:	4619      	mov	r1, r3
 8006576:	4822      	ldr	r0, [pc, #136]	; (8006600 <MX_GPIO_Init+0x278>)
 8006578:	f003 fd12 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800657c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006582:	2301      	movs	r3, #1
 8006584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006586:	2301      	movs	r3, #1
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658a:	2300      	movs	r3, #0
 800658c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800658e:	f107 031c 	add.w	r3, r7, #28
 8006592:	4619      	mov	r1, r3
 8006594:	481a      	ldr	r0, [pc, #104]	; (8006600 <MX_GPIO_Init+0x278>)
 8006596:	f003 fd03 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800659a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800659e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065a0:	2301      	movs	r3, #1
 80065a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a8:	2300      	movs	r3, #0
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ac:	f107 031c 	add.w	r3, r7, #28
 80065b0:	4619      	mov	r1, r3
 80065b2:	4814      	ldr	r0, [pc, #80]	; (8006604 <MX_GPIO_Init+0x27c>)
 80065b4:	f003 fcf4 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80065b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065be:	2300      	movs	r3, #0
 80065c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c6:	f107 031c 	add.w	r3, r7, #28
 80065ca:	4619      	mov	r1, r3
 80065cc:	480d      	ldr	r0, [pc, #52]	; (8006604 <MX_GPIO_Init+0x27c>)
 80065ce:	f003 fce7 	bl	8009fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80065d2:	239b      	movs	r3, #155	; 0x9b
 80065d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065d6:	2300      	movs	r3, #0
 80065d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065da:	2301      	movs	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065de:	f107 031c 	add.w	r3, r7, #28
 80065e2:	4619      	mov	r1, r3
 80065e4:	4806      	ldr	r0, [pc, #24]	; (8006600 <MX_GPIO_Init+0x278>)
 80065e6:	f003 fcdb 	bl	8009fa0 <HAL_GPIO_Init>

}
 80065ea:	bf00      	nop
 80065ec:	3730      	adds	r7, #48	; 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	40023800 	.word	0x40023800
 80065f8:	40021000 	.word	0x40021000
 80065fc:	40020400 	.word	0x40020400
 8006600:	40020c00 	.word	0x40020c00
 8006604:	40020000 	.word	0x40020000
 8006608:	40020800 	.word	0x40020800

0800660c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006610:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006612:	e7fe      	b.n	8006612 <Error_Handler+0x6>

08006614 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006618:	bf00      	nop
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <HAL_MspInit+0x4c>)
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	4a0f      	ldr	r2, [pc, #60]	; (8006670 <HAL_MspInit+0x4c>)
 8006634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006638:	6453      	str	r3, [r2, #68]	; 0x44
 800663a:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <HAL_MspInit+0x4c>)
 800663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006642:	607b      	str	r3, [r7, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006646:	2300      	movs	r3, #0
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <HAL_MspInit+0x4c>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	4a08      	ldr	r2, [pc, #32]	; (8006670 <HAL_MspInit+0x4c>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	6413      	str	r3, [r2, #64]	; 0x40
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_MspInit+0x4c>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40023800 	.word	0x40023800

08006674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800667c:	f107 031c 	add.w	r3, r7, #28
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a4a      	ldr	r2, [pc, #296]	; (80067bc <HAL_ADC_MspInit+0x148>)
 8006692:	4293      	cmp	r3, r2
 8006694:	f040 808e 	bne.w	80067b4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	4a47      	ldr	r2, [pc, #284]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a6:	6453      	str	r3, [r2, #68]	; 0x44
 80066a8:	4b45      	ldr	r3, [pc, #276]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	4b41      	ldr	r3, [pc, #260]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	4a40      	ldr	r2, [pc, #256]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6313      	str	r3, [r2, #48]	; 0x30
 80066c4:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066d0:	2300      	movs	r3, #0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	4b3a      	ldr	r3, [pc, #232]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	4a39      	ldr	r2, [pc, #228]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	6313      	str	r3, [r2, #48]	; 0x30
 80066e0:	4b37      	ldr	r3, [pc, #220]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	4a32      	ldr	r2, [pc, #200]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066f6:	f043 0302 	orr.w	r3, r3, #2
 80066fa:	6313      	str	r3, [r2, #48]	; 0x30
 80066fc:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <HAL_ADC_MspInit+0x14c>)
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006708:	230f      	movs	r3, #15
 800670a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800670c:	2303      	movs	r3, #3
 800670e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006710:	2300      	movs	r3, #0
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006714:	f107 031c 	add.w	r3, r7, #28
 8006718:	4619      	mov	r1, r3
 800671a:	482a      	ldr	r0, [pc, #168]	; (80067c4 <HAL_ADC_MspInit+0x150>)
 800671c:	f003 fc40 	bl	8009fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006720:	23ff      	movs	r3, #255	; 0xff
 8006722:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006724:	2303      	movs	r3, #3
 8006726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	2300      	movs	r3, #0
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	4825      	ldr	r0, [pc, #148]	; (80067c8 <HAL_ADC_MspInit+0x154>)
 8006734:	f003 fc34 	bl	8009fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006738:	2303      	movs	r3, #3
 800673a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800673c:	2303      	movs	r3, #3
 800673e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006740:	2300      	movs	r3, #0
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006744:	f107 031c 	add.w	r3, r7, #28
 8006748:	4619      	mov	r1, r3
 800674a:	4820      	ldr	r0, [pc, #128]	; (80067cc <HAL_ADC_MspInit+0x158>)
 800674c:	f003 fc28 	bl	8009fa0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006750:	4b1f      	ldr	r3, [pc, #124]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006752:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <HAL_ADC_MspInit+0x160>)
 8006754:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006756:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800675c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800675e:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006764:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 800676c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006770:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006772:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006778:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 800677c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006780:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006788:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 800678c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006790:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006792:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 8006794:	2200      	movs	r2, #0
 8006796:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006798:	480d      	ldr	r0, [pc, #52]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 800679a:	f003 f865 	bl	8009868 <HAL_DMA_Init>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80067a4:	f7ff ff32 	bl	800660c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
 80067ae:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <HAL_ADC_MspInit+0x15c>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80067b4:	bf00      	nop
 80067b6:	3730      	adds	r7, #48	; 0x30
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40012100 	.word	0x40012100
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40020800 	.word	0x40020800
 80067c8:	40020000 	.word	0x40020000
 80067cc:	40020400 	.word	0x40020400
 80067d0:	2003ecc0 	.word	0x2003ecc0
 80067d4:	40026440 	.word	0x40026440

080067d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e0:	f107 031c 	add.w	r3, r7, #28
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a32      	ldr	r2, [pc, #200]	; (80068c0 <HAL_I2C_MspInit+0xe8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d12c      	bne.n	8006854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006804:	f043 0302 	orr.w	r3, r3, #2
 8006808:	6313      	str	r3, [r2, #48]	; 0x30
 800680a:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006816:	23c0      	movs	r3, #192	; 0xc0
 8006818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800681a:	2312      	movs	r3, #18
 800681c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800681e:	2301      	movs	r3, #1
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006822:	2303      	movs	r3, #3
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006826:	2304      	movs	r3, #4
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682a:	f107 031c 	add.w	r3, r7, #28
 800682e:	4619      	mov	r1, r3
 8006830:	4825      	ldr	r0, [pc, #148]	; (80068c8 <HAL_I2C_MspInit+0xf0>)
 8006832:	f003 fbb5 	bl	8009fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	4a21      	ldr	r2, [pc, #132]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006844:	6413      	str	r3, [r2, #64]	; 0x40
 8006846:	4b1f      	ldr	r3, [pc, #124]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006852:	e031      	b.n	80068b8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <HAL_I2C_MspInit+0xf4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d12c      	bne.n	80068b8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	4b18      	ldr	r3, [pc, #96]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	6313      	str	r3, [r2, #48]	; 0x30
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800687a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800687e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006880:	2312      	movs	r3, #18
 8006882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006884:	2301      	movs	r3, #1
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006888:	2303      	movs	r3, #3
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800688c:	2304      	movs	r3, #4
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006890:	f107 031c 	add.w	r3, r7, #28
 8006894:	4619      	mov	r1, r3
 8006896:	480c      	ldr	r0, [pc, #48]	; (80068c8 <HAL_I2C_MspInit+0xf0>)
 8006898:	f003 fb82 	bl	8009fa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	4a07      	ldr	r2, [pc, #28]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 80068a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068aa:	6413      	str	r3, [r2, #64]	; 0x40
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <HAL_I2C_MspInit+0xec>)
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	bf00      	nop
 80068ba:	3730      	adds	r7, #48	; 0x30
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40005400 	.word	0x40005400
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40020400 	.word	0x40020400
 80068cc:	40005800 	.word	0x40005800

080068d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	609a      	str	r2, [r3, #8]
 80068e4:	60da      	str	r2, [r3, #12]
 80068e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a69      	ldr	r2, [pc, #420]	; (8006a94 <HAL_SD_MspInit+0x1c4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f040 80cb 	bne.w	8006a8a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	4b67      	ldr	r3, [pc, #412]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	4a66      	ldr	r2, [pc, #408]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 80068fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006902:	6453      	str	r3, [r2, #68]	; 0x44
 8006904:	4b64      	ldr	r3, [pc, #400]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	4b60      	ldr	r3, [pc, #384]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 8006916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006918:	4a5f      	ldr	r2, [pc, #380]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	6313      	str	r3, [r2, #48]	; 0x30
 8006920:	4b5d      	ldr	r3, [pc, #372]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
 8006930:	4b59      	ldr	r3, [pc, #356]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	4a58      	ldr	r2, [pc, #352]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 8006936:	f043 0308 	orr.w	r3, r3, #8
 800693a:	6313      	str	r3, [r2, #48]	; 0x30
 800693c:	4b56      	ldr	r3, [pc, #344]	; (8006a98 <HAL_SD_MspInit+0x1c8>)
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006948:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800694c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694e:	2302      	movs	r3, #2
 8006950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006956:	2303      	movs	r3, #3
 8006958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800695a:	230c      	movs	r3, #12
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800695e:	f107 0314 	add.w	r3, r7, #20
 8006962:	4619      	mov	r1, r3
 8006964:	484d      	ldr	r0, [pc, #308]	; (8006a9c <HAL_SD_MspInit+0x1cc>)
 8006966:	f003 fb1b 	bl	8009fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800696a:	2304      	movs	r3, #4
 800696c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696e:	2302      	movs	r3, #2
 8006970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006976:	2303      	movs	r3, #3
 8006978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800697a:	230c      	movs	r3, #12
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800697e:	f107 0314 	add.w	r3, r7, #20
 8006982:	4619      	mov	r1, r3
 8006984:	4846      	ldr	r0, [pc, #280]	; (8006aa0 <HAL_SD_MspInit+0x1d0>)
 8006986:	f003 fb0b 	bl	8009fa0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800698a:	4b46      	ldr	r3, [pc, #280]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 800698c:	4a46      	ldr	r2, [pc, #280]	; (8006aa8 <HAL_SD_MspInit+0x1d8>)
 800698e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006990:	4b44      	ldr	r3, [pc, #272]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 8006992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006996:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006998:	4b42      	ldr	r3, [pc, #264]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 800699a:	2200      	movs	r2, #0
 800699c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800699e:	4b41      	ldr	r3, [pc, #260]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069a4:	4b3f      	ldr	r3, [pc, #252]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069ac:	4b3d      	ldr	r3, [pc, #244]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069b4:	4b3b      	ldr	r3, [pc, #236]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80069bc:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069be:	2220      	movs	r2, #32
 80069c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069c2:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069cc:	2204      	movs	r2, #4
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80069d0:	4b34      	ldr	r3, [pc, #208]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069d2:	2203      	movs	r2, #3
 80069d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80069d6:	4b33      	ldr	r3, [pc, #204]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80069de:	4b31      	ldr	r3, [pc, #196]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80069e6:	482f      	ldr	r0, [pc, #188]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069e8:	f002 ff3e 	bl	8009868 <HAL_DMA_Init>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80069f2:	f7ff fe0b 	bl	800660c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2a      	ldr	r2, [pc, #168]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40
 80069fc:	4a29      	ldr	r2, [pc, #164]	; (8006aa4 <HAL_SD_MspInit+0x1d4>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006a02:	4b2a      	ldr	r3, [pc, #168]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a04:	4a2a      	ldr	r2, [pc, #168]	; (8006ab0 <HAL_SD_MspInit+0x1e0>)
 8006a06:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006a08:	4b28      	ldr	r3, [pc, #160]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a0e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a10:	4b26      	ldr	r3, [pc, #152]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a12:	2240      	movs	r2, #64	; 0x40
 8006a14:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a16:	4b25      	ldr	r3, [pc, #148]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a1c:	4b23      	ldr	r3, [pc, #140]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a22:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a24:	4b21      	ldr	r3, [pc, #132]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a2a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a32:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006a34:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a36:	2220      	movs	r2, #32
 8006a38:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a3a:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006a40:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a44:	2204      	movs	r2, #4
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a48:	4b18      	ldr	r3, [pc, #96]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a4e:	4b17      	ldr	r3, [pc, #92]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006a5e:	4813      	ldr	r0, [pc, #76]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a60:	f002 ff02 	bl	8009868 <HAL_DMA_Init>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006a6a:	f7ff fdcf 	bl	800660c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a0e      	ldr	r2, [pc, #56]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a74:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <HAL_SD_MspInit+0x1dc>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	2031      	movs	r0, #49	; 0x31
 8006a80:	f002 febb 	bl	80097fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006a84:	2031      	movs	r0, #49	; 0x31
 8006a86:	f002 fed4 	bl	8009832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006a8a:	bf00      	nop
 8006a8c:	3728      	adds	r7, #40	; 0x28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	40020800 	.word	0x40020800
 8006aa0:	40020c00 	.word	0x40020c00
 8006aa4:	2003e7e8 	.word	0x2003e7e8
 8006aa8:	40026458 	.word	0x40026458
 8006aac:	2003eb1c 	.word	0x2003eb1c
 8006ab0:	400264a0 	.word	0x400264a0

08006ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006abc:	f107 0314 	add.w	r3, r7, #20
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a19      	ldr	r2, [pc, #100]	; (8006b38 <HAL_SPI_MspInit+0x84>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d12c      	bne.n	8006b30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <HAL_SPI_MspInit+0x88>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <HAL_SPI_MspInit+0x88>)
 8006ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <HAL_SPI_MspInit+0x88>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <HAL_SPI_MspInit+0x88>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	4a10      	ldr	r2, [pc, #64]	; (8006b3c <HAL_SPI_MspInit+0x88>)
 8006afc:	f043 0302 	orr.w	r3, r3, #2
 8006b00:	6313      	str	r3, [r2, #48]	; 0x30
 8006b02:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <HAL_SPI_MspInit+0x88>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006b0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b14:	2302      	movs	r3, #2
 8006b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b20:	2305      	movs	r3, #5
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b24:	f107 0314 	add.w	r3, r7, #20
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4805      	ldr	r0, [pc, #20]	; (8006b40 <HAL_SPI_MspInit+0x8c>)
 8006b2c:	f003 fa38 	bl	8009fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006b30:	bf00      	nop
 8006b32:	3728      	adds	r7, #40	; 0x28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40003800 	.word	0x40003800
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	40020400 	.word	0x40020400

08006b44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08c      	sub	sp, #48	; 0x30
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b4c:	f107 031c 	add.w	r3, r7, #28
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	609a      	str	r2, [r3, #8]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_TIM_PWM_MspInit+0xd4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d12d      	bne.n	8006bc2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6453      	str	r3, [r2, #68]	; 0x44
 8006b76:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006b8c:	f043 0310 	orr.w	r3, r3, #16
 8006b90:	6313      	str	r3, [r2, #48]	; 0x30
 8006b92:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006b9e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bb4:	f107 031c 	add.w	r3, r7, #28
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4819      	ldr	r0, [pc, #100]	; (8006c20 <HAL_TIM_PWM_MspInit+0xdc>)
 8006bbc:	f003 f9f0 	bl	8009fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006bc0:	e026      	b.n	8006c10 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <HAL_TIM_PWM_MspInit+0xe0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10e      	bne.n	8006bea <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bd6:	f043 0302 	orr.w	r3, r3, #2
 8006bda:	6413      	str	r3, [r2, #64]	; 0x40
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	693b      	ldr	r3, [r7, #16]
}
 8006be8:	e012      	b.n	8006c10 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <HAL_TIM_PWM_MspInit+0xe4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d10d      	bne.n	8006c10 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfc:	4a07      	ldr	r2, [pc, #28]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006bfe:	f043 0304 	orr.w	r3, r3, #4
 8006c02:	6413      	str	r3, [r2, #64]	; 0x40
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_TIM_PWM_MspInit+0xd8>)
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	3730      	adds	r7, #48	; 0x30
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	40021000 	.word	0x40021000
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800

08006c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a3e      	ldr	r2, [pc, #248]	; (8006d34 <HAL_TIM_Base_MspInit+0x108>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d116      	bne.n	8006c6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	4b3d      	ldr	r3, [pc, #244]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	4a3c      	ldr	r2, [pc, #240]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006c48:	f043 0310 	orr.w	r3, r3, #16
 8006c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4e:	4b3a      	ldr	r3, [pc, #232]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	2036      	movs	r0, #54	; 0x36
 8006c60:	f002 fdcb 	bl	80097fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006c64:	2036      	movs	r0, #54	; 0x36
 8006c66:	f002 fde4 	bl	8009832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006c6a:	e05e      	b.n	8006d2a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a32      	ldr	r2, [pc, #200]	; (8006d3c <HAL_TIM_Base_MspInit+0x110>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d116      	bne.n	8006ca4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	4b2f      	ldr	r3, [pc, #188]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	4a2e      	ldr	r2, [pc, #184]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006c80:	f043 0320 	orr.w	r3, r3, #32
 8006c84:	6413      	str	r3, [r2, #64]	; 0x40
 8006c86:	4b2c      	ldr	r3, [pc, #176]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	2037      	movs	r0, #55	; 0x37
 8006c98:	f002 fdaf 	bl	80097fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006c9c:	2037      	movs	r0, #55	; 0x37
 8006c9e:	f002 fdc8 	bl	8009832 <HAL_NVIC_EnableIRQ>
}
 8006ca2:	e042      	b.n	8006d2a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a25      	ldr	r2, [pc, #148]	; (8006d40 <HAL_TIM_Base_MspInit+0x114>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d10e      	bne.n	8006ccc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	4b21      	ldr	r3, [pc, #132]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	e02e      	b.n	8006d2a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_TIM_Base_MspInit+0x118>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10e      	bne.n	8006cf4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
}
 8006cf2:	e01a      	b.n	8006d2a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <HAL_TIM_Base_MspInit+0x11c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d115      	bne.n	8006d2a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <HAL_TIM_Base_MspInit+0x10c>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	202c      	movs	r0, #44	; 0x2c
 8006d20:	f002 fd6b 	bl	80097fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006d24:	202c      	movs	r0, #44	; 0x2c
 8006d26:	f002 fd84 	bl	8009832 <HAL_NVIC_EnableIRQ>
}
 8006d2a:	bf00      	nop
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40001000 	.word	0x40001000
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	40001400 	.word	0x40001400
 8006d40:	40014400 	.word	0x40014400
 8006d44:	40014800 	.word	0x40014800
 8006d48:	40001c00 	.word	0x40001c00

08006d4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <HAL_TIM_Encoder_MspInit+0x94>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d133      	bne.n	8006dd6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d7e:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d94:	f043 0304 	orr.w	r3, r3, #4
 8006d98:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006da6:	23c0      	movs	r3, #192	; 0xc0
 8006da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006daa:	2302      	movs	r3, #2
 8006dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006db2:	2300      	movs	r3, #0
 8006db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006db6:	2303      	movs	r3, #3
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dba:	f107 0314 	add.w	r3, r7, #20
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4809      	ldr	r0, [pc, #36]	; (8006de8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006dc2:	f003 f8ed 	bl	8009fa0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2100      	movs	r1, #0
 8006dca:	202c      	movs	r0, #44	; 0x2c
 8006dcc:	f002 fd15 	bl	80097fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006dd0:	202c      	movs	r0, #44	; 0x2c
 8006dd2:	f002 fd2e 	bl	8009832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006dd6:	bf00      	nop
 8006dd8:	3728      	adds	r7, #40	; 0x28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40010400 	.word	0x40010400
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40020800 	.word	0x40020800

08006dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	; 0x30
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df4:	f107 031c 	add.w	r3, r7, #28
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	60da      	str	r2, [r3, #12]
 8006e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5c      	ldr	r2, [pc, #368]	; (8006f7c <HAL_TIM_MspPostInit+0x190>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d11f      	bne.n	8006e4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	4b5b      	ldr	r3, [pc, #364]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	4a5a      	ldr	r2, [pc, #360]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006e18:	f043 0310 	orr.w	r3, r3, #16
 8006e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e1e:	4b58      	ldr	r3, [pc, #352]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e30:	2302      	movs	r3, #2
 8006e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e40:	f107 031c 	add.w	r3, r7, #28
 8006e44:	4619      	mov	r1, r3
 8006e46:	484f      	ldr	r0, [pc, #316]	; (8006f84 <HAL_TIM_MspPostInit+0x198>)
 8006e48:	f003 f8aa 	bl	8009fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006e4c:	e091      	b.n	8006f72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a4d      	ldr	r2, [pc, #308]	; (8006f88 <HAL_TIM_MspPostInit+0x19c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d11e      	bne.n	8006e96 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	4b48      	ldr	r3, [pc, #288]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	4a47      	ldr	r2, [pc, #284]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006e62:	f043 0302 	orr.w	r3, r3, #2
 8006e66:	6313      	str	r3, [r2, #48]	; 0x30
 8006e68:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006e74:	2330      	movs	r3, #48	; 0x30
 8006e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e80:	2300      	movs	r3, #0
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e84:	2302      	movs	r3, #2
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e88:	f107 031c 	add.w	r3, r7, #28
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	483f      	ldr	r0, [pc, #252]	; (8006f8c <HAL_TIM_MspPostInit+0x1a0>)
 8006e90:	f003 f886 	bl	8009fa0 <HAL_GPIO_Init>
}
 8006e94:	e06d      	b.n	8006f72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a3d      	ldr	r2, [pc, #244]	; (8006f90 <HAL_TIM_MspPostInit+0x1a4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d11f      	bne.n	8006ee0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	4a35      	ldr	r2, [pc, #212]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006eaa:	f043 0308 	orr.w	r3, r3, #8
 8006eae:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb0:	4b33      	ldr	r3, [pc, #204]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006ebc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ed2:	f107 031c 	add.w	r3, r7, #28
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	482e      	ldr	r0, [pc, #184]	; (8006f94 <HAL_TIM_MspPostInit+0x1a8>)
 8006eda:	f003 f861 	bl	8009fa0 <HAL_GPIO_Init>
}
 8006ede:	e048      	b.n	8006f72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <HAL_TIM_MspPostInit+0x1ac>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d11f      	bne.n	8006f2a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8006efa:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f14:	2300      	movs	r3, #0
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f1c:	f107 031c 	add.w	r3, r7, #28
 8006f20:	4619      	mov	r1, r3
 8006f22:	481a      	ldr	r0, [pc, #104]	; (8006f8c <HAL_TIM_MspPostInit+0x1a0>)
 8006f24:	f003 f83c 	bl	8009fa0 <HAL_GPIO_Init>
}
 8006f28:	e023      	b.n	8006f72 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_TIM_MspPostInit+0x1b0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d11e      	bne.n	8006f72 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006f3e:	f043 0302 	orr.w	r3, r3, #2
 8006f42:	6313      	str	r3, [r2, #48]	; 0x30
 8006f44:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_TIM_MspPostInit+0x194>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f56:	2302      	movs	r3, #2
 8006f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006f62:	2303      	movs	r3, #3
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f66:	f107 031c 	add.w	r3, r7, #28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4807      	ldr	r0, [pc, #28]	; (8006f8c <HAL_TIM_MspPostInit+0x1a0>)
 8006f6e:	f003 f817 	bl	8009fa0 <HAL_GPIO_Init>
}
 8006f72:	bf00      	nop
 8006f74:	3730      	adds	r7, #48	; 0x30
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40021000 	.word	0x40021000
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40020400 	.word	0x40020400
 8006f90:	40000800 	.word	0x40000800
 8006f94:	40020c00 	.word	0x40020c00
 8006f98:	40014400 	.word	0x40014400
 8006f9c:	40014800 	.word	0x40014800

08006fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa8:	f107 0314 	add.w	r3, r7, #20
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	605a      	str	r2, [r3, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
 8006fb4:	60da      	str	r2, [r3, #12]
 8006fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	; (8007024 <HAL_UART_MspInit+0x84>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d12b      	bne.n	800701a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	4b18      	ldr	r3, [pc, #96]	; (8007028 <HAL_UART_MspInit+0x88>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	4a17      	ldr	r2, [pc, #92]	; (8007028 <HAL_UART_MspInit+0x88>)
 8006fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <HAL_UART_MspInit+0x88>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	4b11      	ldr	r3, [pc, #68]	; (8007028 <HAL_UART_MspInit+0x88>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	4a10      	ldr	r2, [pc, #64]	; (8007028 <HAL_UART_MspInit+0x88>)
 8006fe8:	f043 0308 	orr.w	r3, r3, #8
 8006fec:	6313      	str	r3, [r2, #48]	; 0x30
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <HAL_UART_MspInit+0x88>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006ffa:	2360      	movs	r3, #96	; 0x60
 8006ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffe:	2302      	movs	r3, #2
 8007000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	2300      	movs	r3, #0
 8007004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007006:	2303      	movs	r3, #3
 8007008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800700a:	2307      	movs	r3, #7
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800700e:	f107 0314 	add.w	r3, r7, #20
 8007012:	4619      	mov	r1, r3
 8007014:	4805      	ldr	r0, [pc, #20]	; (800702c <HAL_UART_MspInit+0x8c>)
 8007016:	f002 ffc3 	bl	8009fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800701a:	bf00      	nop
 800701c:	3728      	adds	r7, #40	; 0x28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40004400 	.word	0x40004400
 8007028:	40023800 	.word	0x40023800
 800702c:	40020c00 	.word	0x40020c00

08007030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007034:	e7fe      	b.n	8007034 <NMI_Handler+0x4>

08007036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007036:	b480      	push	{r7}
 8007038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800703a:	e7fe      	b.n	800703a <HardFault_Handler+0x4>

0800703c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007040:	e7fe      	b.n	8007040 <MemManage_Handler+0x4>

08007042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007042:	b480      	push	{r7}
 8007044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007046:	e7fe      	b.n	8007046 <BusFault_Handler+0x4>

08007048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800704c:	e7fe      	b.n	800704c <UsageFault_Handler+0x4>

0800704e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800704e:	b480      	push	{r7}
 8007050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007060:	bf00      	nop
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800706a:	b480      	push	{r7}
 800706c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800706e:	bf00      	nop
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800707c:	f001 fe9c 	bl	8008db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007080:	bf00      	nop
 8007082:	bd80      	pop	{r7, pc}

08007084 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007088:	4803      	ldr	r0, [pc, #12]	; (8007098 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800708a:	f007 f96c 	bl	800e366 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800708e:	4803      	ldr	r0, [pc, #12]	; (800709c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007090:	f007 f969 	bl	800e366 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007094:	bf00      	nop
 8007096:	bd80      	pop	{r7, pc}
 8007098:	2003e8a0 	.word	0x2003e8a0
 800709c:	2003ea9c 	.word	0x2003ea9c

080070a0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80070a4:	4802      	ldr	r0, [pc, #8]	; (80070b0 <SDIO_IRQHandler+0x10>)
 80070a6:	f005 fa05 	bl	800c4b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80070aa:	bf00      	nop
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2003ebfc 	.word	0x2003ebfc

080070b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80070b8:	4802      	ldr	r0, [pc, #8]	; (80070c4 <TIM6_DAC_IRQHandler+0x10>)
 80070ba:	f007 f954 	bl	800e366 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	2003eb7c 	.word	0x2003eb7c

080070c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80070cc:	4802      	ldr	r0, [pc, #8]	; (80070d8 <TIM7_IRQHandler+0x10>)
 80070ce:	f007 f94a 	bl	800e366 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80070d2:	bf00      	nop
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	2003ed20 	.word	0x2003ed20

080070dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80070e0:	4802      	ldr	r0, [pc, #8]	; (80070ec <DMA2_Stream2_IRQHandler+0x10>)
 80070e2:	f002 fce9 	bl	8009ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80070e6:	bf00      	nop
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2003ecc0 	.word	0x2003ecc0

080070f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80070f4:	4802      	ldr	r0, [pc, #8]	; (8007100 <DMA2_Stream3_IRQHandler+0x10>)
 80070f6:	f002 fcdf 	bl	8009ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	2003e7e8 	.word	0x2003e7e8

08007104 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007108:	4802      	ldr	r0, [pc, #8]	; (8007114 <DMA2_Stream6_IRQHandler+0x10>)
 800710a:	f002 fcd5 	bl	8009ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800710e:	bf00      	nop
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	2003eb1c 	.word	0x2003eb1c

08007118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007120:	4a14      	ldr	r2, [pc, #80]	; (8007174 <_sbrk+0x5c>)
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <_sbrk+0x60>)
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800712c:	4b13      	ldr	r3, [pc, #76]	; (800717c <_sbrk+0x64>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007134:	4b11      	ldr	r3, [pc, #68]	; (800717c <_sbrk+0x64>)
 8007136:	4a12      	ldr	r2, [pc, #72]	; (8007180 <_sbrk+0x68>)
 8007138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <_sbrk+0x64>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	429a      	cmp	r2, r3
 8007146:	d207      	bcs.n	8007158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007148:	f00d fba0 	bl	801488c <__errno>
 800714c:	4602      	mov	r2, r0
 800714e:	230c      	movs	r3, #12
 8007150:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007152:	f04f 33ff 	mov.w	r3, #4294967295
 8007156:	e009      	b.n	800716c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007158:	4b08      	ldr	r3, [pc, #32]	; (800717c <_sbrk+0x64>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800715e:	4b07      	ldr	r3, [pc, #28]	; (800717c <_sbrk+0x64>)
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4413      	add	r3, r2
 8007166:	4a05      	ldr	r2, [pc, #20]	; (800717c <_sbrk+0x64>)
 8007168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800716a:	68fb      	ldr	r3, [r7, #12]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20050000 	.word	0x20050000
 8007178:	00000800 	.word	0x00000800
 800717c:	200002bc 	.word	0x200002bc
 8007180:	20040e70 	.word	0x20040e70

08007184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007188:	4b08      	ldr	r3, [pc, #32]	; (80071ac <SystemInit+0x28>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	4a07      	ldr	r2, [pc, #28]	; (80071ac <SystemInit+0x28>)
 8007190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <SystemInit+0x28>)
 800719a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800719e:	609a      	str	r2, [r3, #8]
#endif
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	e000ed00 	.word	0xe000ed00

080071b0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80071b0:	b598      	push	{r3, r4, r7, lr}
 80071b2:	af00      	add	r7, sp, #0
	lcd_init();
 80071b4:	f7f9 ff30 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80071b8:	483a      	ldr	r0, [pc, #232]	; (80072a4 <cppInit+0xf4>)
 80071ba:	f7fd fdef 	bl	8004d9c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80071be:	2064      	movs	r0, #100	; 0x64
 80071c0:	f001 fe1a 	bl	8008df8 <HAL_Delay>
	power_sensor.updateValues();
 80071c4:	4837      	ldr	r0, [pc, #220]	; (80072a4 <cppInit+0xf4>)
 80071c6:	f7fd fdf7 	bl	8004db8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80071ca:	f7f9 ff69 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80071ce:	2100      	movs	r1, #0
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7f9 ff75 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80071d6:	4834      	ldr	r0, [pc, #208]	; (80072a8 <cppInit+0xf8>)
 80071d8:	f7f9 ff9c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80071dc:	2101      	movs	r1, #1
 80071de:	2000      	movs	r0, #0
 80071e0:	f7f9 ff6e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80071e4:	482f      	ldr	r0, [pc, #188]	; (80072a4 <cppInit+0xf4>)
 80071e6:	f7fd fe11 	bl	8004e0c <_ZN11PowerSensor17getButteryVoltageEv>
 80071ea:	ee10 3a10 	vmov	r3, s0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 f9c2 	bl	8000578 <__aeabi_f2d>
 80071f4:	4603      	mov	r3, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	461a      	mov	r2, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	482b      	ldr	r0, [pc, #172]	; (80072ac <cppInit+0xfc>)
 80071fe:	f7f9 ff89 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007206:	f001 fdf7 	bl	8008df8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800720a:	4829      	ldr	r0, [pc, #164]	; (80072b0 <cppInit+0x100>)
 800720c:	f7fd f80a 	bl	8004224 <_ZN6Logger10sdCardInitEv>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <cppInit+0x76>
		led.fullColor('G');
 8007216:	2147      	movs	r1, #71	; 0x47
 8007218:	4826      	ldr	r0, [pc, #152]	; (80072b4 <cppInit+0x104>)
 800721a:	f7fa fe6f 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800721e:	2064      	movs	r0, #100	; 0x64
 8007220:	f001 fdea 	bl	8008df8 <HAL_Delay>
 8007224:	e006      	b.n	8007234 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007226:	2152      	movs	r1, #82	; 0x52
 8007228:	4822      	ldr	r0, [pc, #136]	; (80072b4 <cppInit+0x104>)
 800722a:	f7fa fe67 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800722e:	2064      	movs	r0, #100	; 0x64
 8007230:	f001 fde2 	bl	8008df8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007234:	4820      	ldr	r0, [pc, #128]	; (80072b8 <cppInit+0x108>)
 8007236:	f7fa ffbd 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800723a:	4820      	ldr	r0, [pc, #128]	; (80072bc <cppInit+0x10c>)
 800723c:	f7fd fa80 	bl	8004740 <_ZN5Motor4initEv>
	encoder.init();
 8007240:	481f      	ldr	r0, [pc, #124]	; (80072c0 <cppInit+0x110>)
 8007242:	f7f9 ffb3 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8007246:	481f      	ldr	r0, [pc, #124]	; (80072c4 <cppInit+0x114>)
 8007248:	f7fa fc16 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 800724c:	481e      	ldr	r0, [pc, #120]	; (80072c8 <cppInit+0x118>)
 800724e:	f7fc fa21 	bl	8003694 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007252:	4819      	ldr	r0, [pc, #100]	; (80072b8 <cppInit+0x108>)
 8007254:	f7fb f8ee 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800725c:	f001 fdcc 	bl	8008df8 <HAL_Delay>

	led.fullColor('M');
 8007260:	214d      	movs	r1, #77	; 0x4d
 8007262:	4814      	ldr	r0, [pc, #80]	; (80072b4 <cppInit+0x104>)
 8007264:	f7fa fe4a 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 8007268:	4816      	ldr	r0, [pc, #88]	; (80072c4 <cppInit+0x114>)
 800726a:	f7fa fccf 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 800726e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80072cc <cppInit+0x11c>
 8007272:	eddf 0a17 	vldr	s1, [pc, #92]	; 80072d0 <cppInit+0x120>
 8007276:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80072d4 <cppInit+0x124>
 800727a:	4817      	ldr	r0, [pc, #92]	; (80072d8 <cppInit+0x128>)
 800727c:	f7fe f9cc 	bl	8005618 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007280:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80072dc <cppInit+0x12c>
 8007284:	eddf 0a16 	vldr	s1, [pc, #88]	; 80072e0 <cppInit+0x130>
 8007288:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80072e4 <cppInit+0x134>
 800728c:	4812      	ldr	r0, [pc, #72]	; (80072d8 <cppInit+0x128>)
 800728e:	f7fe f9dc 	bl	800564a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8007292:	4815      	ldr	r0, [pc, #84]	; (80072e8 <cppInit+0x138>)
 8007294:	f7fd fc8c 	bl	8004bb0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007298:	4814      	ldr	r0, [pc, #80]	; (80072ec <cppInit+0x13c>)
 800729a:	f7fd fd23 	bl	8004ce4 <_ZN13PathFollowing4initEv>

}
 800729e:	bf00      	nop
 80072a0:	bd98      	pop	{r3, r4, r7, pc}
 80072a2:	bf00      	nop
 80072a4:	200005d0 	.word	0x200005d0
 80072a8:	08019094 	.word	0x08019094
 80072ac:	0801909c 	.word	0x0801909c
 80072b0:	200005f0 	.word	0x200005f0
 80072b4:	200005cc 	.word	0x200005cc
 80072b8:	200002c0 	.word	0x200002c0
 80072bc:	200005c8 	.word	0x200005c8
 80072c0:	20017d00 	.word	0x20017d00
 80072c4:	200005dc 	.word	0x200005dc
 80072c8:	20017da0 	.word	0x20017da0
 80072cc:	3cceca68 	.word	0x3cceca68
 80072d0:	4180f06f 	.word	0x4180f06f
 80072d4:	3fea2d0e 	.word	0x3fea2d0e
 80072d8:	20017d20 	.word	0x20017d20
 80072dc:	3ab7dacd 	.word	0x3ab7dacd
 80072e0:	3f5e3fbc 	.word	0x3f5e3fbc
 80072e4:	3d8eefa2 	.word	0x3d8eefa2
 80072e8:	20017d60 	.word	0x20017d60
 80072ec:	20024d10 	.word	0x20024d10

080072f0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80072f4:	4819      	ldr	r0, [pc, #100]	; (800735c <cppFlip1ms+0x6c>)
 80072f6:	f7fa ffbb 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80072fa:	4819      	ldr	r0, [pc, #100]	; (8007360 <cppFlip1ms+0x70>)
 80072fc:	f7fa fbe4 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007300:	4818      	ldr	r0, [pc, #96]	; (8007364 <cppFlip1ms+0x74>)
 8007302:	f7f9 ff75 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007306:	4818      	ldr	r0, [pc, #96]	; (8007368 <cppFlip1ms+0x78>)
 8007308:	f7fc fb96 	bl	8003a38 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800730c:	4817      	ldr	r0, [pc, #92]	; (800736c <cppFlip1ms+0x7c>)
 800730e:	f7fe f9b5 	bl	800567c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007312:	4817      	ldr	r0, [pc, #92]	; (8007370 <cppFlip1ms+0x80>)
 8007314:	f7fd fc30 	bl	8004b78 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007318:	4816      	ldr	r0, [pc, #88]	; (8007374 <cppFlip1ms+0x84>)
 800731a:	f7fd fded 	bl	8004ef8 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800731e:	4816      	ldr	r0, [pc, #88]	; (8007378 <cppFlip1ms+0x88>)
 8007320:	f7fd fa20 	bl	8004764 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <cppFlip1ms+0x8c>)
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	4b13      	ldr	r3, [pc, #76]	; (800737c <cppFlip1ms+0x8c>)
 800732e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007330:	4b12      	ldr	r3, [pc, #72]	; (800737c <cppFlip1ms+0x8c>)
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d90c      	bls.n	8007352 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007338:	4809      	ldr	r0, [pc, #36]	; (8007360 <cppFlip1ms+0x70>)
 800733a:	f7fa fc1d 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 800733e:	eef0 7a40 	vmov.f32	s15, s0
 8007342:	eeb0 0a67 	vmov.f32	s0, s15
 8007346:	480e      	ldr	r0, [pc, #56]	; (8007380 <cppFlip1ms+0x90>)
 8007348:	f7fd ff38 	bl	80051bc <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <cppFlip1ms+0x8c>)
 800734e:	2200      	movs	r2, #0
 8007350:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007352:	4804      	ldr	r0, [pc, #16]	; (8007364 <cppFlip1ms+0x74>)
 8007354:	f7fa f836 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007358:	bf00      	nop
 800735a:	bd80      	pop	{r7, pc}
 800735c:	200002c0 	.word	0x200002c0
 8007360:	200005dc 	.word	0x200005dc
 8007364:	20017d00 	.word	0x20017d00
 8007368:	20017da0 	.word	0x20017da0
 800736c:	20017d20 	.word	0x20017d20
 8007370:	20017d60 	.word	0x20017d60
 8007374:	200005b8 	.word	0x200005b8
 8007378:	200005c8 	.word	0x200005c8
 800737c:	2003c438 	.word	0x2003c438
 8007380:	20024b00 	.word	0x20024b00

08007384 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007388:	4802      	ldr	r0, [pc, #8]	; (8007394 <cppFlip100ns+0x10>)
 800738a:	f7fa ff23 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800738e:	bf00      	nop
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200002c0 	.word	0x200002c0

08007398 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800739c:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <cppFlip10ms+0x28>)
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <cppFlip10ms+0x28>)
 80073a6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <cppFlip10ms+0x28>)
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	2b06      	cmp	r3, #6
 80073ae:	d905      	bls.n	80073bc <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80073b0:	4804      	ldr	r0, [pc, #16]	; (80073c4 <cppFlip10ms+0x2c>)
 80073b2:	f7fd ff3f 	bl	8005234 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80073b6:	4b02      	ldr	r3, [pc, #8]	; (80073c0 <cppFlip10ms+0x28>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80073bc:	bf00      	nop
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	2003c43a 	.word	0x2003c43a
 80073c4:	20024b00 	.word	0x20024b00

080073c8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80073c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80073ce:	4baf      	ldr	r3, [pc, #700]	; (800768c <cppLoop+0x2c4>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f3bf 8f5b 	dmb	ish
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bf0c      	ite	eq
 80073e0:	2301      	moveq	r3, #1
 80073e2:	2300      	movne	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d015      	beq.n	8007416 <cppLoop+0x4e>
 80073ea:	48a8      	ldr	r0, [pc, #672]	; (800768c <cppLoop+0x2c4>)
 80073ec:	f00c f9e9 	bl	80137c2 <__cxa_guard_acquire>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bf14      	ite	ne
 80073f6:	2301      	movne	r3, #1
 80073f8:	2300      	moveq	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <cppLoop+0x4e>
 8007400:	48a3      	ldr	r0, [pc, #652]	; (8007690 <cppLoop+0x2c8>)
 8007402:	f7fc fa02 	bl	800380a <_ZN9LineTrace5getKpEv>
 8007406:	eef0 7a40 	vmov.f32	s15, s0
 800740a:	4ba2      	ldr	r3, [pc, #648]	; (8007694 <cppLoop+0x2cc>)
 800740c:	edc3 7a00 	vstr	s15, [r3]
 8007410:	489e      	ldr	r0, [pc, #632]	; (800768c <cppLoop+0x2c4>)
 8007412:	f00c f9e2 	bl	80137da <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007416:	4ba0      	ldr	r3, [pc, #640]	; (8007698 <cppLoop+0x2d0>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f3bf 8f5b 	dmb	ish
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	bf0c      	ite	eq
 8007428:	2301      	moveq	r3, #1
 800742a:	2300      	movne	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d015      	beq.n	800745e <cppLoop+0x96>
 8007432:	4899      	ldr	r0, [pc, #612]	; (8007698 <cppLoop+0x2d0>)
 8007434:	f00c f9c5 	bl	80137c2 <__cxa_guard_acquire>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <cppLoop+0x96>
 8007448:	4891      	ldr	r0, [pc, #580]	; (8007690 <cppLoop+0x2c8>)
 800744a:	f7fc f9ed 	bl	8003828 <_ZN9LineTrace5getKiEv>
 800744e:	eef0 7a40 	vmov.f32	s15, s0
 8007452:	4b92      	ldr	r3, [pc, #584]	; (800769c <cppLoop+0x2d4>)
 8007454:	edc3 7a00 	vstr	s15, [r3]
 8007458:	488f      	ldr	r0, [pc, #572]	; (8007698 <cppLoop+0x2d0>)
 800745a:	f00c f9be 	bl	80137da <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800745e:	4b90      	ldr	r3, [pc, #576]	; (80076a0 <cppLoop+0x2d8>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f3bf 8f5b 	dmb	ish
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	bf0c      	ite	eq
 8007470:	2301      	moveq	r3, #1
 8007472:	2300      	movne	r3, #0
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d015      	beq.n	80074a6 <cppLoop+0xde>
 800747a:	4889      	ldr	r0, [pc, #548]	; (80076a0 <cppLoop+0x2d8>)
 800747c:	f00c f9a1 	bl	80137c2 <__cxa_guard_acquire>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <cppLoop+0xde>
 8007490:	487f      	ldr	r0, [pc, #508]	; (8007690 <cppLoop+0x2c8>)
 8007492:	f7fc f9d8 	bl	8003846 <_ZN9LineTrace5getKdEv>
 8007496:	eef0 7a40 	vmov.f32	s15, s0
 800749a:	4b82      	ldr	r3, [pc, #520]	; (80076a4 <cppLoop+0x2dc>)
 800749c:	edc3 7a00 	vstr	s15, [r3]
 80074a0:	487f      	ldr	r0, [pc, #508]	; (80076a0 <cppLoop+0x2d8>)
 80074a2:	f00c f99a 	bl	80137da <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80074a6:	4b80      	ldr	r3, [pc, #512]	; (80076a8 <cppLoop+0x2e0>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	f3bf 8f5b 	dmb	ish
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	bf0c      	ite	eq
 80074b8:	2301      	moveq	r3, #1
 80074ba:	2300      	movne	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d015      	beq.n	80074ee <cppLoop+0x126>
 80074c2:	4879      	ldr	r0, [pc, #484]	; (80076a8 <cppLoop+0x2e0>)
 80074c4:	f00c f97d 	bl	80137c2 <__cxa_guard_acquire>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bf14      	ite	ne
 80074ce:	2301      	movne	r3, #1
 80074d0:	2300      	moveq	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <cppLoop+0x126>
 80074d8:	486d      	ldr	r0, [pc, #436]	; (8007690 <cppLoop+0x2c8>)
 80074da:	f7fc fa20 	bl	800391e <_ZN9LineTrace17getTargetVelocityEv>
 80074de:	eef0 7a40 	vmov.f32	s15, s0
 80074e2:	4b72      	ldr	r3, [pc, #456]	; (80076ac <cppLoop+0x2e4>)
 80074e4:	edc3 7a00 	vstr	s15, [r3]
 80074e8:	486f      	ldr	r0, [pc, #444]	; (80076a8 <cppLoop+0x2e0>)
 80074ea:	f00c f976 	bl	80137da <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80074ee:	4b70      	ldr	r3, [pc, #448]	; (80076b0 <cppLoop+0x2e8>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f3bf 8f5b 	dmb	ish
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d015      	beq.n	8007536 <cppLoop+0x16e>
 800750a:	4869      	ldr	r0, [pc, #420]	; (80076b0 <cppLoop+0x2e8>)
 800750c:	f00c f959 	bl	80137c2 <__cxa_guard_acquire>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf14      	ite	ne
 8007516:	2301      	movne	r3, #1
 8007518:	2300      	moveq	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <cppLoop+0x16e>
 8007520:	485b      	ldr	r0, [pc, #364]	; (8007690 <cppLoop+0x2c8>)
 8007522:	f7fc fa0b 	bl	800393c <_ZN9LineTrace14getMaxVelocityEv>
 8007526:	eef0 7a40 	vmov.f32	s15, s0
 800752a:	4b62      	ldr	r3, [pc, #392]	; (80076b4 <cppLoop+0x2ec>)
 800752c:	edc3 7a00 	vstr	s15, [r3]
 8007530:	485f      	ldr	r0, [pc, #380]	; (80076b0 <cppLoop+0x2e8>)
 8007532:	f00c f952 	bl	80137da <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007536:	4b60      	ldr	r3, [pc, #384]	; (80076b8 <cppLoop+0x2f0>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f3bf 8f5b 	dmb	ish
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	bf0c      	ite	eq
 8007548:	2301      	moveq	r3, #1
 800754a:	2300      	movne	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d015      	beq.n	800757e <cppLoop+0x1b6>
 8007552:	4859      	ldr	r0, [pc, #356]	; (80076b8 <cppLoop+0x2f0>)
 8007554:	f00c f935 	bl	80137c2 <__cxa_guard_acquire>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <cppLoop+0x1b6>
 8007568:	4849      	ldr	r0, [pc, #292]	; (8007690 <cppLoop+0x2c8>)
 800756a:	f7fc f9f6 	bl	800395a <_ZN9LineTrace15getMaxVelocity2Ev>
 800756e:	eef0 7a40 	vmov.f32	s15, s0
 8007572:	4b52      	ldr	r3, [pc, #328]	; (80076bc <cppLoop+0x2f4>)
 8007574:	edc3 7a00 	vstr	s15, [r3]
 8007578:	484f      	ldr	r0, [pc, #316]	; (80076b8 <cppLoop+0x2f0>)
 800757a:	f00c f92e 	bl	80137da <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 800757e:	4b50      	ldr	r3, [pc, #320]	; (80076c0 <cppLoop+0x2f8>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	f3bf 8f5b 	dmb	ish
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d015      	beq.n	80075c6 <cppLoop+0x1fe>
 800759a:	4849      	ldr	r0, [pc, #292]	; (80076c0 <cppLoop+0x2f8>)
 800759c:	f00c f911 	bl	80137c2 <__cxa_guard_acquire>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf14      	ite	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	2300      	moveq	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <cppLoop+0x1fe>
 80075b0:	4837      	ldr	r0, [pc, #220]	; (8007690 <cppLoop+0x2c8>)
 80075b2:	f7fc f9e2 	bl	800397a <_ZN9LineTrace14getMinVelocityEv>
 80075b6:	eef0 7a40 	vmov.f32	s15, s0
 80075ba:	4b42      	ldr	r3, [pc, #264]	; (80076c4 <cppLoop+0x2fc>)
 80075bc:	edc3 7a00 	vstr	s15, [r3]
 80075c0:	483f      	ldr	r0, [pc, #252]	; (80076c0 <cppLoop+0x2f8>)
 80075c2:	f00c f90a 	bl	80137da <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 80075c6:	4b40      	ldr	r3, [pc, #256]	; (80076c8 <cppLoop+0x300>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f3bf 8f5b 	dmb	ish
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d015      	beq.n	800760e <cppLoop+0x246>
 80075e2:	4839      	ldr	r0, [pc, #228]	; (80076c8 <cppLoop+0x300>)
 80075e4:	f00c f8ed 	bl	80137c2 <__cxa_guard_acquire>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bf14      	ite	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	2300      	moveq	r3, #0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <cppLoop+0x246>
 80075f8:	4825      	ldr	r0, [pc, #148]	; (8007690 <cppLoop+0x2c8>)
 80075fa:	f7fc f9ce 	bl	800399a <_ZN9LineTrace15getMinVelocity2Ev>
 80075fe:	eef0 7a40 	vmov.f32	s15, s0
 8007602:	4b32      	ldr	r3, [pc, #200]	; (80076cc <cppLoop+0x304>)
 8007604:	edc3 7a00 	vstr	s15, [r3]
 8007608:	482f      	ldr	r0, [pc, #188]	; (80076c8 <cppLoop+0x300>)
 800760a:	f00c f8e6 	bl	80137da <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 800760e:	4b30      	ldr	r3, [pc, #192]	; (80076d0 <cppLoop+0x308>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	f3bf 8f5b 	dmb	ish
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	bf0c      	ite	eq
 8007620:	2301      	moveq	r3, #1
 8007622:	2300      	movne	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d015      	beq.n	8007656 <cppLoop+0x28e>
 800762a:	4829      	ldr	r0, [pc, #164]	; (80076d0 <cppLoop+0x308>)
 800762c:	f00c f8c9 	bl	80137c2 <__cxa_guard_acquire>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <cppLoop+0x28e>
 8007640:	4813      	ldr	r0, [pc, #76]	; (8007690 <cppLoop+0x2c8>)
 8007642:	f7fc f9d4 	bl	80039ee <_ZN9LineTrace9getMaxAccEv>
 8007646:	eef0 7a40 	vmov.f32	s15, s0
 800764a:	4b22      	ldr	r3, [pc, #136]	; (80076d4 <cppLoop+0x30c>)
 800764c:	edc3 7a00 	vstr	s15, [r3]
 8007650:	481f      	ldr	r0, [pc, #124]	; (80076d0 <cppLoop+0x308>)
 8007652:	f00c f8c2 	bl	80137da <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007656:	4b20      	ldr	r3, [pc, #128]	; (80076d8 <cppLoop+0x310>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f3bf 8f5b 	dmb	ish
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d03f      	beq.n	80076f2 <cppLoop+0x32a>
 8007672:	4819      	ldr	r0, [pc, #100]	; (80076d8 <cppLoop+0x310>)
 8007674:	f00c f8a5 	bl	80137c2 <__cxa_guard_acquire>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	bf14      	ite	ne
 800767e:	2301      	movne	r3, #1
 8007680:	2300      	moveq	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d034      	beq.n	80076f2 <cppLoop+0x32a>
 8007688:	e028      	b.n	80076dc <cppLoop+0x314>
 800768a:	bf00      	nop
 800768c:	2003c448 	.word	0x2003c448
 8007690:	20017da0 	.word	0x20017da0
 8007694:	2003c444 	.word	0x2003c444
 8007698:	2003c450 	.word	0x2003c450
 800769c:	2003c44c 	.word	0x2003c44c
 80076a0:	2003c458 	.word	0x2003c458
 80076a4:	2003c454 	.word	0x2003c454
 80076a8:	2003c460 	.word	0x2003c460
 80076ac:	2003c45c 	.word	0x2003c45c
 80076b0:	2003c468 	.word	0x2003c468
 80076b4:	2003c464 	.word	0x2003c464
 80076b8:	2003c470 	.word	0x2003c470
 80076bc:	2003c46c 	.word	0x2003c46c
 80076c0:	2003c478 	.word	0x2003c478
 80076c4:	2003c474 	.word	0x2003c474
 80076c8:	2003c480 	.word	0x2003c480
 80076cc:	2003c47c 	.word	0x2003c47c
 80076d0:	2003c488 	.word	0x2003c488
 80076d4:	2003c484 	.word	0x2003c484
 80076d8:	2003c490 	.word	0x2003c490
 80076dc:	48c0      	ldr	r0, [pc, #768]	; (80079e0 <cppLoop+0x618>)
 80076de:	f7fc f998 	bl	8003a12 <_ZN9LineTrace9getMaxDecEv>
 80076e2:	eef0 7a40 	vmov.f32	s15, s0
 80076e6:	4bbf      	ldr	r3, [pc, #764]	; (80079e4 <cppLoop+0x61c>)
 80076e8:	edc3 7a00 	vstr	s15, [r3]
 80076ec:	48be      	ldr	r0, [pc, #760]	; (80079e8 <cppLoop+0x620>)
 80076ee:	f00c f874 	bl	80137da <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80076f2:	48be      	ldr	r0, [pc, #760]	; (80079ec <cppLoop+0x624>)
 80076f4:	f7fd fb9a 	bl	8004e2c <_ZN12RotarySwitch8getValueEv>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b0f      	cmp	r3, #15
 80076fc:	f201 823f 	bhi.w	8008b7e <cppLoop+0x17b6>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <cppLoop+0x340>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	08007749 	.word	0x08007749
 800770c:	08007b3f 	.word	0x08007b3f
 8007710:	08007bd3 	.word	0x08007bd3
 8007714:	08007d6d 	.word	0x08007d6d
 8007718:	08007e39 	.word	0x08007e39
 800771c:	080080b9 	.word	0x080080b9
 8007720:	08008185 	.word	0x08008185
 8007724:	08008417 	.word	0x08008417
 8007728:	0800869d 	.word	0x0800869d
 800772c:	080086c7 	.word	0x080086c7
 8007730:	08008783 	.word	0x08008783
 8007734:	080087f3 	.word	0x080087f3
 8007738:	0800888f 	.word	0x0800888f
 800773c:	08008929 	.word	0x08008929
 8007740:	08008a31 	.word	0x08008a31
 8007744:	08008ad9 	.word	0x08008ad9
	case 0:
		led.fullColor('W');
 8007748:	2157      	movs	r1, #87	; 0x57
 800774a:	48a9      	ldr	r0, [pc, #676]	; (80079f0 <cppLoop+0x628>)
 800774c:	f7fa fbd6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007750:	f7f9 fca6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007754:	2100      	movs	r1, #0
 8007756:	2000      	movs	r0, #0
 8007758:	f7f9 fcb2 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 800775c:	48a0      	ldr	r0, [pc, #640]	; (80079e0 <cppLoop+0x618>)
 800775e:	f7fc f854 	bl	800380a <_ZN9LineTrace5getKpEv>
 8007762:	eeb0 7a40 	vmov.f32	s14, s0
 8007766:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80079f4 <cppLoop+0x62c>
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	ee17 0a90 	vmov	r0, s15
 8007772:	f7f8 ff01 	bl	8000578 <__aeabi_f2d>
 8007776:	4603      	mov	r3, r0
 8007778:	460c      	mov	r4, r1
 800777a:	461a      	mov	r2, r3
 800777c:	4623      	mov	r3, r4
 800777e:	489e      	ldr	r0, [pc, #632]	; (80079f8 <cppLoop+0x630>)
 8007780:	f7f9 fcc8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007784:	2101      	movs	r1, #1
 8007786:	2000      	movs	r0, #0
 8007788:	f7f9 fc9a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 800778c:	4894      	ldr	r0, [pc, #592]	; (80079e0 <cppLoop+0x618>)
 800778e:	f7fc f84b 	bl	8003828 <_ZN9LineTrace5getKiEv>
 8007792:	eeb0 7a40 	vmov.f32	s14, s0
 8007796:	eddf 7a99 	vldr	s15, [pc, #612]	; 80079fc <cppLoop+0x634>
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	ee17 0a90 	vmov	r0, s15
 80077a2:	f7f8 fee9 	bl	8000578 <__aeabi_f2d>
 80077a6:	4605      	mov	r5, r0
 80077a8:	460e      	mov	r6, r1
 80077aa:	488d      	ldr	r0, [pc, #564]	; (80079e0 <cppLoop+0x618>)
 80077ac:	f7fc f84b 	bl	8003846 <_ZN9LineTrace5getKdEv>
 80077b0:	eeb0 7a40 	vmov.f32	s14, s0
 80077b4:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007a00 <cppLoop+0x638>
 80077b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077bc:	ee17 0a90 	vmov	r0, s15
 80077c0:	f7f8 feda 	bl	8000578 <__aeabi_f2d>
 80077c4:	4603      	mov	r3, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	e9cd 3400 	strd	r3, r4, [sp]
 80077cc:	462a      	mov	r2, r5
 80077ce:	4633      	mov	r3, r6
 80077d0:	488c      	ldr	r0, [pc, #560]	; (8007a04 <cppLoop+0x63c>)
 80077d2:	f7f9 fc9f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80077d6:	488c      	ldr	r0, [pc, #560]	; (8007a08 <cppLoop+0x640>)
 80077d8:	f7fa fb2c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b08      	cmp	r3, #8
 80077e0:	bf0c      	ite	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	2300      	movne	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d022      	beq.n	8007832 <cppLoop+0x46a>
			led.LR(-1, 1);
 80077ec:	2201      	movs	r2, #1
 80077ee:	f04f 31ff 	mov.w	r1, #4294967295
 80077f2:	487f      	ldr	r0, [pc, #508]	; (80079f0 <cppLoop+0x628>)
 80077f4:	f7fa fc3e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80077f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80077fc:	f001 fafc 	bl	8008df8 <HAL_Delay>

			selector++;
 8007800:	4b82      	ldr	r3, [pc, #520]	; (8007a0c <cppLoop+0x644>)
 8007802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007806:	b29b      	uxth	r3, r3
 8007808:	3301      	adds	r3, #1
 800780a:	b29b      	uxth	r3, r3
 800780c:	b21a      	sxth	r2, r3
 800780e:	4b7f      	ldr	r3, [pc, #508]	; (8007a0c <cppLoop+0x644>)
 8007810:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007812:	4b7e      	ldr	r3, [pc, #504]	; (8007a0c <cppLoop+0x644>)
 8007814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007818:	2b02      	cmp	r3, #2
 800781a:	dd02      	ble.n	8007822 <cppLoop+0x45a>
 800781c:	4b7b      	ldr	r3, [pc, #492]	; (8007a0c <cppLoop+0x644>)
 800781e:	2200      	movs	r2, #0
 8007820:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007822:	2200      	movs	r2, #0
 8007824:	f04f 31ff 	mov.w	r1, #4294967295
 8007828:	4871      	ldr	r0, [pc, #452]	; (80079f0 <cppLoop+0x628>)
 800782a:	f7fa fc23 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800782e:	f001 b9a8 	b.w	8008b82 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_R){
 8007832:	4875      	ldr	r0, [pc, #468]	; (8007a08 <cppLoop+0x640>)
 8007834:	f7fa fafe 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007838:	4603      	mov	r3, r0
 800783a:	2b10      	cmp	r3, #16
 800783c:	bf0c      	ite	eq
 800783e:	2301      	moveq	r3, #1
 8007840:	2300      	movne	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d059      	beq.n	80078fc <cppLoop+0x534>
			led.LR(-1, 1);
 8007848:	2201      	movs	r2, #1
 800784a:	f04f 31ff 	mov.w	r1, #4294967295
 800784e:	4868      	ldr	r0, [pc, #416]	; (80079f0 <cppLoop+0x628>)
 8007850:	f7fa fc10 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007854:	2064      	movs	r0, #100	; 0x64
 8007856:	f001 facf 	bl	8008df8 <HAL_Delay>
			if(selector == 0){
 800785a:	4b6c      	ldr	r3, [pc, #432]	; (8007a0c <cppLoop+0x644>)
 800785c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d113      	bne.n	800788c <cppLoop+0x4c4>
				adj_kp = adj_kp + 0.00001;
 8007864:	4b6a      	ldr	r3, [pc, #424]	; (8007a10 <cppLoop+0x648>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f7f8 fe85 	bl	8000578 <__aeabi_f2d>
 800786e:	a356      	add	r3, pc, #344	; (adr r3, 80079c8 <cppLoop+0x600>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fd22 	bl	80002bc <__adddf3>
 8007878:	4603      	mov	r3, r0
 800787a:	460c      	mov	r4, r1
 800787c:	4618      	mov	r0, r3
 800787e:	4621      	mov	r1, r4
 8007880:	f7f9 f9ca 	bl	8000c18 <__aeabi_d2f>
 8007884:	4602      	mov	r2, r0
 8007886:	4b62      	ldr	r3, [pc, #392]	; (8007a10 <cppLoop+0x648>)
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e02b      	b.n	80078e4 <cppLoop+0x51c>
			else if(selector == 1){
 800788c:	4b5f      	ldr	r3, [pc, #380]	; (8007a0c <cppLoop+0x644>)
 800788e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d113      	bne.n	80078be <cppLoop+0x4f6>
				adj_ki = adj_ki + 0.0001;
 8007896:	4b5f      	ldr	r3, [pc, #380]	; (8007a14 <cppLoop+0x64c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f7f8 fe6c 	bl	8000578 <__aeabi_f2d>
 80078a0:	a34b      	add	r3, pc, #300	; (adr r3, 80079d0 <cppLoop+0x608>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fd09 	bl	80002bc <__adddf3>
 80078aa:	4603      	mov	r3, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	4618      	mov	r0, r3
 80078b0:	4621      	mov	r1, r4
 80078b2:	f7f9 f9b1 	bl	8000c18 <__aeabi_d2f>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b56      	ldr	r3, [pc, #344]	; (8007a14 <cppLoop+0x64c>)
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e012      	b.n	80078e4 <cppLoop+0x51c>
				adj_kd = adj_kd + 0.000001;
 80078be:	4b56      	ldr	r3, [pc, #344]	; (8007a18 <cppLoop+0x650>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f8 fe58 	bl	8000578 <__aeabi_f2d>
 80078c8:	a343      	add	r3, pc, #268	; (adr r3, 80079d8 <cppLoop+0x610>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f8 fcf5 	bl	80002bc <__adddf3>
 80078d2:	4603      	mov	r3, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	4618      	mov	r0, r3
 80078d8:	4621      	mov	r1, r4
 80078da:	f7f9 f99d 	bl	8000c18 <__aeabi_d2f>
 80078de:	4602      	mov	r2, r0
 80078e0:	4b4d      	ldr	r3, [pc, #308]	; (8007a18 <cppLoop+0x650>)
 80078e2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80078e4:	2152      	movs	r1, #82	; 0x52
 80078e6:	4842      	ldr	r0, [pc, #264]	; (80079f0 <cppLoop+0x628>)
 80078e8:	f7fa fb08 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80078ec:	2200      	movs	r2, #0
 80078ee:	f04f 31ff 	mov.w	r1, #4294967295
 80078f2:	483f      	ldr	r0, [pc, #252]	; (80079f0 <cppLoop+0x628>)
 80078f4:	f7fa fbbe 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80078f8:	f001 b943 	b.w	8008b82 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_L){
 80078fc:	4842      	ldr	r0, [pc, #264]	; (8007a08 <cppLoop+0x640>)
 80078fe:	f7fa fa99 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007902:	4603      	mov	r3, r0
 8007904:	2b01      	cmp	r3, #1
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8084 	beq.w	8007a1c <cppLoop+0x654>
			led.LR(-1, 1);
 8007914:	2201      	movs	r2, #1
 8007916:	f04f 31ff 	mov.w	r1, #4294967295
 800791a:	4835      	ldr	r0, [pc, #212]	; (80079f0 <cppLoop+0x628>)
 800791c:	f7fa fbaa 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007920:	2064      	movs	r0, #100	; 0x64
 8007922:	f001 fa69 	bl	8008df8 <HAL_Delay>
			if(selector == 0){
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <cppLoop+0x644>)
 8007928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d113      	bne.n	8007958 <cppLoop+0x590>
				adj_kp = adj_kp - 0.00001;
 8007930:	4b37      	ldr	r3, [pc, #220]	; (8007a10 <cppLoop+0x648>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7f8 fe1f 	bl	8000578 <__aeabi_f2d>
 800793a:	a323      	add	r3, pc, #140	; (adr r3, 80079c8 <cppLoop+0x600>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f7f8 fcba 	bl	80002b8 <__aeabi_dsub>
 8007944:	4603      	mov	r3, r0
 8007946:	460c      	mov	r4, r1
 8007948:	4618      	mov	r0, r3
 800794a:	4621      	mov	r1, r4
 800794c:	f7f9 f964 	bl	8000c18 <__aeabi_d2f>
 8007950:	4602      	mov	r2, r0
 8007952:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <cppLoop+0x648>)
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e02b      	b.n	80079b0 <cppLoop+0x5e8>
			else if(selector == 1){
 8007958:	4b2c      	ldr	r3, [pc, #176]	; (8007a0c <cppLoop+0x644>)
 800795a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d113      	bne.n	800798a <cppLoop+0x5c2>
				adj_ki = adj_ki - 0.0001;
 8007962:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <cppLoop+0x64c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7f8 fe06 	bl	8000578 <__aeabi_f2d>
 800796c:	a318      	add	r3, pc, #96	; (adr r3, 80079d0 <cppLoop+0x608>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fca1 	bl	80002b8 <__aeabi_dsub>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	4618      	mov	r0, r3
 800797c:	4621      	mov	r1, r4
 800797e:	f7f9 f94b 	bl	8000c18 <__aeabi_d2f>
 8007982:	4602      	mov	r2, r0
 8007984:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <cppLoop+0x64c>)
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e012      	b.n	80079b0 <cppLoop+0x5e8>
				adj_kd = adj_kd - 0.000001;
 800798a:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <cppLoop+0x650>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7f8 fdf2 	bl	8000578 <__aeabi_f2d>
 8007994:	a310      	add	r3, pc, #64	; (adr r3, 80079d8 <cppLoop+0x610>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fc8d 	bl	80002b8 <__aeabi_dsub>
 800799e:	4603      	mov	r3, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	4618      	mov	r0, r3
 80079a4:	4621      	mov	r1, r4
 80079a6:	f7f9 f937 	bl	8000c18 <__aeabi_d2f>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <cppLoop+0x650>)
 80079ae:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80079b0:	2152      	movs	r1, #82	; 0x52
 80079b2:	480f      	ldr	r0, [pc, #60]	; (80079f0 <cppLoop+0x628>)
 80079b4:	f7fa faa2 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80079b8:	2200      	movs	r2, #0
 80079ba:	f04f 31ff 	mov.w	r1, #4294967295
 80079be:	480c      	ldr	r0, [pc, #48]	; (80079f0 <cppLoop+0x628>)
 80079c0:	f7fa fb58 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80079c4:	f001 b8dd 	b.w	8008b82 <cppLoop+0x17ba>
 80079c8:	88e368f1 	.word	0x88e368f1
 80079cc:	3ee4f8b5 	.word	0x3ee4f8b5
 80079d0:	eb1c432d 	.word	0xeb1c432d
 80079d4:	3f1a36e2 	.word	0x3f1a36e2
 80079d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80079dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80079e0:	20017da0 	.word	0x20017da0
 80079e4:	2003c48c 	.word	0x2003c48c
 80079e8:	2003c490 	.word	0x2003c490
 80079ec:	200005c4 	.word	0x200005c4
 80079f0:	200005cc 	.word	0x200005cc
 80079f4:	447a0000 	.word	0x447a0000
 80079f8:	080190a0 	.word	0x080190a0
 80079fc:	42c80000 	.word	0x42c80000
 8007a00:	461c4000 	.word	0x461c4000
 8007a04:	080190ac 	.word	0x080190ac
 8007a08:	200005c0 	.word	0x200005c0
 8007a0c:	2003c43c 	.word	0x2003c43c
 8007a10:	2003c444 	.word	0x2003c444
 8007a14:	2003c44c 	.word	0x2003c44c
 8007a18:	2003c454 	.word	0x2003c454
		else if(joy_stick.getValue() == JOY_D){
 8007a1c:	48c4      	ldr	r0, [pc, #784]	; (8007d30 <cppLoop+0x968>)
 8007a1e:	f7fa fa09 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	bf0c      	ite	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2300      	movne	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03d      	beq.n	8007aae <cppLoop+0x6e6>
			led.LR(-1, 1);
 8007a32:	2201      	movs	r2, #1
 8007a34:	f04f 31ff 	mov.w	r1, #4294967295
 8007a38:	48be      	ldr	r0, [pc, #760]	; (8007d34 <cppLoop+0x96c>)
 8007a3a:	f7fa fb1b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007a3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a42:	f001 f9d9 	bl	8008df8 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	49ba      	ldr	r1, [pc, #744]	; (8007d38 <cppLoop+0x970>)
 8007a4e:	48bb      	ldr	r0, [pc, #748]	; (8007d3c <cppLoop+0x974>)
 8007a50:	f7f9 fe3e 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	2201      	movs	r2, #1
 8007a5a:	49b9      	ldr	r1, [pc, #740]	; (8007d40 <cppLoop+0x978>)
 8007a5c:	48b7      	ldr	r0, [pc, #732]	; (8007d3c <cppLoop+0x974>)
 8007a5e:	f7f9 fe37 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	2201      	movs	r2, #1
 8007a66:	49b7      	ldr	r1, [pc, #732]	; (8007d44 <cppLoop+0x97c>)
 8007a68:	48b4      	ldr	r0, [pc, #720]	; (8007d3c <cppLoop+0x974>)
 8007a6a:	f7f9 fe31 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8007a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a72:	ed97 7a02 	vldr	s14, [r7, #8]
 8007a76:	edd7 6a01 	vldr	s13, [r7, #4]
 8007a7a:	eeb0 1a66 	vmov.f32	s2, s13
 8007a7e:	eef0 0a47 	vmov.f32	s1, s14
 8007a82:	eeb0 0a67 	vmov.f32	s0, s15
 8007a86:	48b0      	ldr	r0, [pc, #704]	; (8007d48 <cppLoop+0x980>)
 8007a88:	f7fb fea6 	bl	80037d8 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4aaf      	ldr	r2, [pc, #700]	; (8007d4c <cppLoop+0x984>)
 8007a90:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4aae      	ldr	r2, [pc, #696]	; (8007d50 <cppLoop+0x988>)
 8007a96:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4aae      	ldr	r2, [pc, #696]	; (8007d54 <cppLoop+0x98c>)
 8007a9c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa4:	48a3      	ldr	r0, [pc, #652]	; (8007d34 <cppLoop+0x96c>)
 8007aa6:	f7fa fae5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007aaa:	f001 b86a 	b.w	8008b82 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_C){
 8007aae:	48a0      	ldr	r0, [pc, #640]	; (8007d30 <cppLoop+0x968>)
 8007ab0:	f7fa f9c0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	bf0c      	ite	eq
 8007aba:	2301      	moveq	r3, #1
 8007abc:	2300      	movne	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f001 805e 	beq.w	8008b82 <cppLoop+0x17ba>
			led.LR(-1, 1);
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8007acc:	4899      	ldr	r0, [pc, #612]	; (8007d34 <cppLoop+0x96c>)
 8007ace:	f7fa fad1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ad2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ad6:	f001 f98f 	bl	8008df8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4b9b      	ldr	r3, [pc, #620]	; (8007d4c <cppLoop+0x984>)
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4995      	ldr	r1, [pc, #596]	; (8007d38 <cppLoop+0x970>)
 8007ae4:	4895      	ldr	r0, [pc, #596]	; (8007d3c <cppLoop+0x974>)
 8007ae6:	f7f9 fd8d 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007aea:	2300      	movs	r3, #0
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4b98      	ldr	r3, [pc, #608]	; (8007d50 <cppLoop+0x988>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	4993      	ldr	r1, [pc, #588]	; (8007d40 <cppLoop+0x978>)
 8007af4:	4891      	ldr	r0, [pc, #580]	; (8007d3c <cppLoop+0x974>)
 8007af6:	f7f9 fd85 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007afa:	2300      	movs	r3, #0
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4b95      	ldr	r3, [pc, #596]	; (8007d54 <cppLoop+0x98c>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	4990      	ldr	r1, [pc, #576]	; (8007d44 <cppLoop+0x97c>)
 8007b04:	488d      	ldr	r0, [pc, #564]	; (8007d3c <cppLoop+0x974>)
 8007b06:	f7f9 fd7d 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007b0a:	4b90      	ldr	r3, [pc, #576]	; (8007d4c <cppLoop+0x984>)
 8007b0c:	edd3 7a00 	vldr	s15, [r3]
 8007b10:	4b8f      	ldr	r3, [pc, #572]	; (8007d50 <cppLoop+0x988>)
 8007b12:	ed93 7a00 	vldr	s14, [r3]
 8007b16:	4b8f      	ldr	r3, [pc, #572]	; (8007d54 <cppLoop+0x98c>)
 8007b18:	edd3 6a00 	vldr	s13, [r3]
 8007b1c:	eeb0 1a66 	vmov.f32	s2, s13
 8007b20:	eef0 0a47 	vmov.f32	s1, s14
 8007b24:	eeb0 0a67 	vmov.f32	s0, s15
 8007b28:	4887      	ldr	r0, [pc, #540]	; (8007d48 <cppLoop+0x980>)
 8007b2a:	f7fb fe55 	bl	80037d8 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f04f 31ff 	mov.w	r1, #4294967295
 8007b34:	487f      	ldr	r0, [pc, #508]	; (8007d34 <cppLoop+0x96c>)
 8007b36:	f7fa fa9d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007b3a:	f001 b822 	b.w	8008b82 <cppLoop+0x17ba>

	case 1:
		led.fullColor('C');
 8007b3e:	2143      	movs	r1, #67	; 0x43
 8007b40:	487c      	ldr	r0, [pc, #496]	; (8007d34 <cppLoop+0x96c>)
 8007b42:	f7fa f9db 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b46:	f7f9 faab 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f7f9 fab7 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007b52:	4881      	ldr	r0, [pc, #516]	; (8007d58 <cppLoop+0x990>)
 8007b54:	f7f9 fade 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b58:	2101      	movs	r1, #1
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f7f9 fab0 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007b60:	4b7e      	ldr	r3, [pc, #504]	; (8007d5c <cppLoop+0x994>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7f8 fd07 	bl	8000578 <__aeabi_f2d>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4623      	mov	r3, r4
 8007b72:	487b      	ldr	r0, [pc, #492]	; (8007d60 <cppLoop+0x998>)
 8007b74:	f7f9 face 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007b78:	486d      	ldr	r0, [pc, #436]	; (8007d30 <cppLoop+0x968>)
 8007b7a:	f7fa f95b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	bf0c      	ite	eq
 8007b84:	2301      	moveq	r3, #1
 8007b86:	2300      	movne	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 87fb 	beq.w	8008b86 <cppLoop+0x17be>
			HAL_Delay(500);
 8007b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b94:	f001 f930 	bl	8008df8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007b98:	4b70      	ldr	r3, [pc, #448]	; (8007d5c <cppLoop+0x994>)
 8007b9a:	edd3 7a00 	vldr	s15, [r3]
 8007b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007ba2:	4869      	ldr	r0, [pc, #420]	; (8007d48 <cppLoop+0x980>)
 8007ba4:	f7fb fe6d 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	2101      	movs	r1, #1
 8007bae:	4861      	ldr	r0, [pc, #388]	; (8007d34 <cppLoop+0x96c>)
 8007bb0:	f7fa fa60 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4864      	ldr	r0, [pc, #400]	; (8007d48 <cppLoop+0x980>)
 8007bb8:	f7fc f9d8 	bl	8003f6c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007bbc:	4862      	ldr	r0, [pc, #392]	; (8007d48 <cppLoop+0x980>)
 8007bbe:	f7fc f8d7 	bl	8003d70 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	485a      	ldr	r0, [pc, #360]	; (8007d34 <cppLoop+0x96c>)
 8007bca:	f7fa fa53 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007bce:	f000 bfda 	b.w	8008b86 <cppLoop+0x17be>

	case 2:
		led.fullColor('B');
 8007bd2:	2142      	movs	r1, #66	; 0x42
 8007bd4:	4857      	ldr	r0, [pc, #348]	; (8007d34 <cppLoop+0x96c>)
 8007bd6:	f7fa f991 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007bda:	f7f9 fa61 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007bde:	2100      	movs	r1, #0
 8007be0:	2000      	movs	r0, #0
 8007be2:	f7f9 fa6d 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007be6:	485c      	ldr	r0, [pc, #368]	; (8007d58 <cppLoop+0x990>)
 8007be8:	f7f9 fa94 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007bec:	2101      	movs	r1, #1
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7f9 fa66 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007bf4:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <cppLoop+0x994>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7f8 fcbd 	bl	8000578 <__aeabi_f2d>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	461a      	mov	r2, r3
 8007c04:	4623      	mov	r3, r4
 8007c06:	4857      	ldr	r0, [pc, #348]	; (8007d64 <cppLoop+0x99c>)
 8007c08:	f7f9 fa84 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007c0c:	4848      	ldr	r0, [pc, #288]	; (8007d30 <cppLoop+0x968>)
 8007c0e:	f7fa f911 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b10      	cmp	r3, #16
 8007c16:	bf0c      	ite	eq
 8007c18:	2301      	moveq	r3, #1
 8007c1a:	2300      	movne	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d023      	beq.n	8007c6a <cppLoop+0x8a2>
			led.LR(-1, 1);
 8007c22:	2201      	movs	r2, #1
 8007c24:	f04f 31ff 	mov.w	r1, #4294967295
 8007c28:	4842      	ldr	r0, [pc, #264]	; (8007d34 <cppLoop+0x96c>)
 8007c2a:	f7fa fa23 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c2e:	2064      	movs	r0, #100	; 0x64
 8007c30:	f001 f8e2 	bl	8008df8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007c34:	4b49      	ldr	r3, [pc, #292]	; (8007d5c <cppLoop+0x994>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7f8 fc9d 	bl	8000578 <__aeabi_f2d>
 8007c3e:	a33a      	add	r3, pc, #232	; (adr r3, 8007d28 <cppLoop+0x960>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f7f8 fb3a 	bl	80002bc <__adddf3>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	4621      	mov	r1, r4
 8007c50:	f7f8 ffe2 	bl	8000c18 <__aeabi_d2f>
 8007c54:	4602      	mov	r2, r0
 8007c56:	4b41      	ldr	r3, [pc, #260]	; (8007d5c <cppLoop+0x994>)
 8007c58:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c60:	4834      	ldr	r0, [pc, #208]	; (8007d34 <cppLoop+0x96c>)
 8007c62:	f7fa fa07 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007c66:	f000 bf90 	b.w	8008b8a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_L){
 8007c6a:	4831      	ldr	r0, [pc, #196]	; (8007d30 <cppLoop+0x968>)
 8007c6c:	f7fa f8e2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d023      	beq.n	8007cc8 <cppLoop+0x900>
			led.LR(-1, 1);
 8007c80:	2201      	movs	r2, #1
 8007c82:	f04f 31ff 	mov.w	r1, #4294967295
 8007c86:	482b      	ldr	r0, [pc, #172]	; (8007d34 <cppLoop+0x96c>)
 8007c88:	f7fa f9f4 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c8c:	2064      	movs	r0, #100	; 0x64
 8007c8e:	f001 f8b3 	bl	8008df8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007c92:	4b32      	ldr	r3, [pc, #200]	; (8007d5c <cppLoop+0x994>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7f8 fc6e 	bl	8000578 <__aeabi_f2d>
 8007c9c:	a322      	add	r3, pc, #136	; (adr r3, 8007d28 <cppLoop+0x960>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fb09 	bl	80002b8 <__aeabi_dsub>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4618      	mov	r0, r3
 8007cac:	4621      	mov	r1, r4
 8007cae:	f7f8 ffb3 	bl	8000c18 <__aeabi_d2f>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	4b29      	ldr	r3, [pc, #164]	; (8007d5c <cppLoop+0x994>)
 8007cb6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f04f 31ff 	mov.w	r1, #4294967295
 8007cbe:	481d      	ldr	r0, [pc, #116]	; (8007d34 <cppLoop+0x96c>)
 8007cc0:	f7fa f9d8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007cc4:	f000 bf61 	b.w	8008b8a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_C){
 8007cc8:	4819      	ldr	r0, [pc, #100]	; (8007d30 <cppLoop+0x968>)
 8007cca:	f7fa f8b3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8755 	beq.w	8008b8a <cppLoop+0x17c2>
			led.LR(-1, 1);
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ce6:	4813      	ldr	r0, [pc, #76]	; (8007d34 <cppLoop+0x96c>)
 8007ce8:	f7fa f9c4 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007cec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007cf0:	f001 f882 	bl	8008df8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4b18      	ldr	r3, [pc, #96]	; (8007d5c <cppLoop+0x994>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	491a      	ldr	r1, [pc, #104]	; (8007d68 <cppLoop+0x9a0>)
 8007cfe:	480f      	ldr	r0, [pc, #60]	; (8007d3c <cppLoop+0x974>)
 8007d00:	f7f9 fc80 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007d04:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <cppLoop+0x994>)
 8007d06:	edd3 7a00 	vldr	s15, [r3]
 8007d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d0e:	480e      	ldr	r0, [pc, #56]	; (8007d48 <cppLoop+0x980>)
 8007d10:	f7fb fdb7 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007d14:	2200      	movs	r2, #0
 8007d16:	f04f 31ff 	mov.w	r1, #4294967295
 8007d1a:	4806      	ldr	r0, [pc, #24]	; (8007d34 <cppLoop+0x96c>)
 8007d1c:	f7fa f9aa 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007d20:	f000 bf33 	b.w	8008b8a <cppLoop+0x17c2>
 8007d24:	f3af 8000 	nop.w
 8007d28:	9999999a 	.word	0x9999999a
 8007d2c:	3fb99999 	.word	0x3fb99999
 8007d30:	200005c0 	.word	0x200005c0
 8007d34:	200005cc 	.word	0x200005cc
 8007d38:	080190bc 	.word	0x080190bc
 8007d3c:	080190c4 	.word	0x080190c4
 8007d40:	080190cc 	.word	0x080190cc
 8007d44:	080190d4 	.word	0x080190d4
 8007d48:	20017da0 	.word	0x20017da0
 8007d4c:	2003c444 	.word	0x2003c444
 8007d50:	2003c44c 	.word	0x2003c44c
 8007d54:	2003c454 	.word	0x2003c454
 8007d58:	080190dc 	.word	0x080190dc
 8007d5c:	2003c45c 	.word	0x2003c45c
 8007d60:	080190e8 	.word	0x080190e8
 8007d64:	080190f4 	.word	0x080190f4
 8007d68:	08019100 	.word	0x08019100

	case 3:
		led.fullColor('Y');
 8007d6c:	2159      	movs	r1, #89	; 0x59
 8007d6e:	48aa      	ldr	r0, [pc, #680]	; (8008018 <cppLoop+0xc50>)
 8007d70:	f7fa f8c4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d74:	f7f9 f994 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d78:	2100      	movs	r1, #0
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7f9 f9a0 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007d80:	4ba6      	ldr	r3, [pc, #664]	; (800801c <cppLoop+0xc54>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f8 fbf7 	bl	8000578 <__aeabi_f2d>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4623      	mov	r3, r4
 8007d92:	48a3      	ldr	r0, [pc, #652]	; (8008020 <cppLoop+0xc58>)
 8007d94:	f7f9 f9be 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d98:	2101      	movs	r1, #1
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	f7f9 f990 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007da0:	4ba0      	ldr	r3, [pc, #640]	; (8008024 <cppLoop+0xc5c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7f8 fbe7 	bl	8000578 <__aeabi_f2d>
 8007daa:	4603      	mov	r3, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	461a      	mov	r2, r3
 8007db0:	4623      	mov	r3, r4
 8007db2:	489d      	ldr	r0, [pc, #628]	; (8008028 <cppLoop+0xc60>)
 8007db4:	f7f9 f9ae 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007db8:	489c      	ldr	r0, [pc, #624]	; (800802c <cppLoop+0xc64>)
 8007dba:	f7fa f83b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 86df 	beq.w	8008b8e <cppLoop+0x17c6>
			HAL_Delay(500);
 8007dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dd4:	f001 f810 	bl	8008df8 <HAL_Delay>

			led.LR(1, -1);
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	2101      	movs	r1, #1
 8007dde:	488e      	ldr	r0, [pc, #568]	; (8008018 <cppLoop+0xc50>)
 8007de0:	f7fa f948 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007de4:	2101      	movs	r1, #1
 8007de6:	4892      	ldr	r0, [pc, #584]	; (8008030 <cppLoop+0xc68>)
 8007de8:	f7fc f8c0 	bl	8003f6c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8007dec:	4b8d      	ldr	r3, [pc, #564]	; (8008024 <cppLoop+0xc5c>)
 8007dee:	edd3 7a00 	vldr	s15, [r3]
 8007df2:	eeb0 0a67 	vmov.f32	s0, s15
 8007df6:	488e      	ldr	r0, [pc, #568]	; (8008030 <cppLoop+0xc68>)
 8007df8:	f7fb fd43 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007dfc:	4b87      	ldr	r3, [pc, #540]	; (800801c <cppLoop+0xc54>)
 8007dfe:	edd3 7a00 	vldr	s15, [r3]
 8007e02:	eeb0 0a67 	vmov.f32	s0, s15
 8007e06:	488a      	ldr	r0, [pc, #552]	; (8008030 <cppLoop+0xc68>)
 8007e08:	f7fb fd4a 	bl	80038a0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007e0c:	4b85      	ldr	r3, [pc, #532]	; (8008024 <cppLoop+0xc5c>)
 8007e0e:	edd3 7a00 	vldr	s15, [r3]
 8007e12:	eeb0 0a67 	vmov.f32	s0, s15
 8007e16:	4886      	ldr	r0, [pc, #536]	; (8008030 <cppLoop+0xc68>)
 8007e18:	f7fb fd61 	bl	80038de <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8007e1c:	4884      	ldr	r0, [pc, #528]	; (8008030 <cppLoop+0xc68>)
 8007e1e:	f7fb f877 	bl	8002f10 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007e22:	4883      	ldr	r0, [pc, #524]	; (8008030 <cppLoop+0xc68>)
 8007e24:	f7fb ffa4 	bl	8003d70 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	487a      	ldr	r0, [pc, #488]	; (8008018 <cppLoop+0xc50>)
 8007e30:	f7fa f920 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007e34:	f000 beab 	b.w	8008b8e <cppLoop+0x17c6>

	case 4:
		led.fullColor('G');
 8007e38:	2147      	movs	r1, #71	; 0x47
 8007e3a:	4877      	ldr	r0, [pc, #476]	; (8008018 <cppLoop+0xc50>)
 8007e3c:	f7fa f85e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e40:	f7f9 f92e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e44:	2100      	movs	r1, #0
 8007e46:	2000      	movs	r0, #0
 8007e48:	f7f9 f93a 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8007e4c:	4878      	ldr	r0, [pc, #480]	; (8008030 <cppLoop+0xc68>)
 8007e4e:	f7fb fd75 	bl	800393c <_ZN9LineTrace14getMaxVelocityEv>
 8007e52:	ee10 3a10 	vmov	r3, s0
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7f8 fb8e 	bl	8000578 <__aeabi_f2d>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	461a      	mov	r2, r3
 8007e62:	4623      	mov	r3, r4
 8007e64:	486e      	ldr	r0, [pc, #440]	; (8008020 <cppLoop+0xc58>)
 8007e66:	f7f9 f955 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f7f9 f927 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8007e72:	486f      	ldr	r0, [pc, #444]	; (8008030 <cppLoop+0xc68>)
 8007e74:	f7fb fd81 	bl	800397a <_ZN9LineTrace14getMinVelocityEv>
 8007e78:	ee10 3a10 	vmov	r3, s0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f8 fb7b 	bl	8000578 <__aeabi_f2d>
 8007e82:	4603      	mov	r3, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	461a      	mov	r2, r3
 8007e88:	4623      	mov	r3, r4
 8007e8a:	486a      	ldr	r0, [pc, #424]	; (8008034 <cppLoop+0xc6c>)
 8007e8c:	f7f9 f942 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007e90:	4866      	ldr	r0, [pc, #408]	; (800802c <cppLoop+0xc64>)
 8007e92:	f7f9 ffcf 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	bf0c      	ite	eq
 8007e9c:	2301      	moveq	r3, #1
 8007e9e:	2300      	movne	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d022      	beq.n	8007eec <cppLoop+0xb24>
			led.LR(-1, 1);
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8007eac:	485a      	ldr	r0, [pc, #360]	; (8008018 <cppLoop+0xc50>)
 8007eae:	f7fa f8e1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007eb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007eb6:	f000 ff9f 	bl	8008df8 <HAL_Delay>

			selector_vel++;
 8007eba:	4b5f      	ldr	r3, [pc, #380]	; (8008038 <cppLoop+0xc70>)
 8007ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	b21a      	sxth	r2, r3
 8007ec8:	4b5b      	ldr	r3, [pc, #364]	; (8008038 <cppLoop+0xc70>)
 8007eca:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	; (8008038 <cppLoop+0xc70>)
 8007ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	dd02      	ble.n	8007edc <cppLoop+0xb14>
 8007ed6:	4b58      	ldr	r3, [pc, #352]	; (8008038 <cppLoop+0xc70>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007edc:	2200      	movs	r2, #0
 8007ede:	f04f 31ff 	mov.w	r1, #4294967295
 8007ee2:	484d      	ldr	r0, [pc, #308]	; (8008018 <cppLoop+0xc50>)
 8007ee4:	f7fa f8c6 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8007ee8:	f000 be53 	b.w	8008b92 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_R){
 8007eec:	484f      	ldr	r0, [pc, #316]	; (800802c <cppLoop+0xc64>)
 8007eee:	f7f9 ffa1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d03c      	beq.n	8007f7c <cppLoop+0xbb4>
			led.LR(-1, 1);
 8007f02:	2201      	movs	r2, #1
 8007f04:	f04f 31ff 	mov.w	r1, #4294967295
 8007f08:	4843      	ldr	r0, [pc, #268]	; (8008018 <cppLoop+0xc50>)
 8007f0a:	f7fa f8b3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f0e:	2064      	movs	r0, #100	; 0x64
 8007f10:	f000 ff72 	bl	8008df8 <HAL_Delay>
			if(selector_vel == 0)
 8007f14:	4b48      	ldr	r3, [pc, #288]	; (8008038 <cppLoop+0xc70>)
 8007f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d113      	bne.n	8007f46 <cppLoop+0xb7e>
				adj_max_velocity = adj_max_velocity + 0.1;
 8007f1e:	4b3f      	ldr	r3, [pc, #252]	; (800801c <cppLoop+0xc54>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7f8 fb28 	bl	8000578 <__aeabi_f2d>
 8007f28:	a339      	add	r3, pc, #228	; (adr r3, 8008010 <cppLoop+0xc48>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 f9c5 	bl	80002bc <__adddf3>
 8007f32:	4603      	mov	r3, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	4618      	mov	r0, r3
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f7f8 fe6d 	bl	8000c18 <__aeabi_d2f>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	4b36      	ldr	r3, [pc, #216]	; (800801c <cppLoop+0xc54>)
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e012      	b.n	8007f6c <cppLoop+0xba4>
				adj_min_velocity = adj_min_velocity + 0.1;
 8007f46:	4b37      	ldr	r3, [pc, #220]	; (8008024 <cppLoop+0xc5c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7f8 fb14 	bl	8000578 <__aeabi_f2d>
 8007f50:	a32f      	add	r3, pc, #188	; (adr r3, 8008010 <cppLoop+0xc48>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 f9b1 	bl	80002bc <__adddf3>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	4618      	mov	r0, r3
 8007f60:	4621      	mov	r1, r4
 8007f62:	f7f8 fe59 	bl	8000c18 <__aeabi_d2f>
 8007f66:	4602      	mov	r2, r0
 8007f68:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <cppLoop+0xc5c>)
 8007f6a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f72:	4829      	ldr	r0, [pc, #164]	; (8008018 <cppLoop+0xc50>)
 8007f74:	f7fa f87e 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007f78:	f000 be0b 	b.w	8008b92 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_L){
 8007f7c:	482b      	ldr	r0, [pc, #172]	; (800802c <cppLoop+0xc64>)
 8007f7e:	f7f9 ff59 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d054      	beq.n	800803c <cppLoop+0xc74>
			led.LR(-1, 1);
 8007f92:	2201      	movs	r2, #1
 8007f94:	f04f 31ff 	mov.w	r1, #4294967295
 8007f98:	481f      	ldr	r0, [pc, #124]	; (8008018 <cppLoop+0xc50>)
 8007f9a:	f7fa f86b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f9e:	2064      	movs	r0, #100	; 0x64
 8007fa0:	f000 ff2a 	bl	8008df8 <HAL_Delay>
			if(selector_vel == 0)
 8007fa4:	4b24      	ldr	r3, [pc, #144]	; (8008038 <cppLoop+0xc70>)
 8007fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d113      	bne.n	8007fd6 <cppLoop+0xc0e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8007fae:	4b1b      	ldr	r3, [pc, #108]	; (800801c <cppLoop+0xc54>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f8 fae0 	bl	8000578 <__aeabi_f2d>
 8007fb8:	a315      	add	r3, pc, #84	; (adr r3, 8008010 <cppLoop+0xc48>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 f97b 	bl	80002b8 <__aeabi_dsub>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	4621      	mov	r1, r4
 8007fca:	f7f8 fe25 	bl	8000c18 <__aeabi_d2f>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b12      	ldr	r3, [pc, #72]	; (800801c <cppLoop+0xc54>)
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e012      	b.n	8007ffc <cppLoop+0xc34>
				adj_min_velocity = adj_min_velocity - 0.1;
 8007fd6:	4b13      	ldr	r3, [pc, #76]	; (8008024 <cppLoop+0xc5c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7f8 facc 	bl	8000578 <__aeabi_f2d>
 8007fe0:	a30b      	add	r3, pc, #44	; (adr r3, 8008010 <cppLoop+0xc48>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 f967 	bl	80002b8 <__aeabi_dsub>
 8007fea:	4603      	mov	r3, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	4618      	mov	r0, r3
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	f7f8 fe11 	bl	8000c18 <__aeabi_d2f>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <cppLoop+0xc5c>)
 8007ffa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8008002:	4805      	ldr	r0, [pc, #20]	; (8008018 <cppLoop+0xc50>)
 8008004:	f7fa f836 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008008:	f000 bdc3 	b.w	8008b92 <cppLoop+0x17ca>
 800800c:	f3af 8000 	nop.w
 8008010:	9999999a 	.word	0x9999999a
 8008014:	3fb99999 	.word	0x3fb99999
 8008018:	200005cc 	.word	0x200005cc
 800801c:	2003c464 	.word	0x2003c464
 8008020:	0801910c 	.word	0x0801910c
 8008024:	2003c474 	.word	0x2003c474
 8008028:	080190e8 	.word	0x080190e8
 800802c:	200005c0 	.word	0x200005c0
 8008030:	20017da0 	.word	0x20017da0
 8008034:	080190f4 	.word	0x080190f4
 8008038:	2003c440 	.word	0x2003c440
		else if(joy_stick.getValue() == JOY_C){
 800803c:	48bc      	ldr	r0, [pc, #752]	; (8008330 <cppLoop+0xf68>)
 800803e:	f7f9 fef9 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008042:	4603      	mov	r3, r0
 8008044:	2b02      	cmp	r3, #2
 8008046:	bf0c      	ite	eq
 8008048:	2301      	moveq	r3, #1
 800804a:	2300      	movne	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 859f 	beq.w	8008b92 <cppLoop+0x17ca>
			led.LR(-1, 1);
 8008054:	2201      	movs	r2, #1
 8008056:	f04f 31ff 	mov.w	r1, #4294967295
 800805a:	48b6      	ldr	r0, [pc, #728]	; (8008334 <cppLoop+0xf6c>)
 800805c:	f7fa f80a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008060:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008064:	f000 fec8 	bl	8008df8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008068:	2300      	movs	r3, #0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	4bb2      	ldr	r3, [pc, #712]	; (8008338 <cppLoop+0xf70>)
 800806e:	2201      	movs	r2, #1
 8008070:	49b2      	ldr	r1, [pc, #712]	; (800833c <cppLoop+0xf74>)
 8008072:	48b3      	ldr	r0, [pc, #716]	; (8008340 <cppLoop+0xf78>)
 8008074:	f7f9 fac6 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008078:	2300      	movs	r3, #0
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	4bb1      	ldr	r3, [pc, #708]	; (8008344 <cppLoop+0xf7c>)
 800807e:	2201      	movs	r2, #1
 8008080:	49b1      	ldr	r1, [pc, #708]	; (8008348 <cppLoop+0xf80>)
 8008082:	48af      	ldr	r0, [pc, #700]	; (8008340 <cppLoop+0xf78>)
 8008084:	f7f9 fabe 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008088:	4bab      	ldr	r3, [pc, #684]	; (8008338 <cppLoop+0xf70>)
 800808a:	edd3 7a00 	vldr	s15, [r3]
 800808e:	eeb0 0a67 	vmov.f32	s0, s15
 8008092:	48ae      	ldr	r0, [pc, #696]	; (800834c <cppLoop+0xf84>)
 8008094:	f7fb fc04 	bl	80038a0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008098:	4baa      	ldr	r3, [pc, #680]	; (8008344 <cppLoop+0xf7c>)
 800809a:	edd3 7a00 	vldr	s15, [r3]
 800809e:	eeb0 0a67 	vmov.f32	s0, s15
 80080a2:	48aa      	ldr	r0, [pc, #680]	; (800834c <cppLoop+0xf84>)
 80080a4:	f7fb fc1b 	bl	80038de <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80080a8:	2200      	movs	r2, #0
 80080aa:	f04f 31ff 	mov.w	r1, #4294967295
 80080ae:	48a1      	ldr	r0, [pc, #644]	; (8008334 <cppLoop+0xf6c>)
 80080b0:	f7f9 ffe0 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80080b4:	f000 bd6d 	b.w	8008b92 <cppLoop+0x17ca>

	case 5:
		led.fullColor('M');
 80080b8:	214d      	movs	r1, #77	; 0x4d
 80080ba:	489e      	ldr	r0, [pc, #632]	; (8008334 <cppLoop+0xf6c>)
 80080bc:	f7f9 ff1e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80080c0:	f7f8 ffee 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080c4:	2100      	movs	r1, #0
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7f8 fffa 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80080cc:	4ba0      	ldr	r3, [pc, #640]	; (8008350 <cppLoop+0xf88>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 fa51 	bl	8000578 <__aeabi_f2d>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4623      	mov	r3, r4
 80080de:	489d      	ldr	r0, [pc, #628]	; (8008354 <cppLoop+0xf8c>)
 80080e0:	f7f9 f818 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080e4:	2101      	movs	r1, #1
 80080e6:	2000      	movs	r0, #0
 80080e8:	f7f8 ffea 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80080ec:	4b9a      	ldr	r3, [pc, #616]	; (8008358 <cppLoop+0xf90>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7f8 fa41 	bl	8000578 <__aeabi_f2d>
 80080f6:	4603      	mov	r3, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	461a      	mov	r2, r3
 80080fc:	4623      	mov	r3, r4
 80080fe:	4897      	ldr	r0, [pc, #604]	; (800835c <cppLoop+0xf94>)
 8008100:	f7f9 f808 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008104:	488a      	ldr	r0, [pc, #552]	; (8008330 <cppLoop+0xf68>)
 8008106:	f7f9 fe95 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800810a:	4603      	mov	r3, r0
 800810c:	2b02      	cmp	r3, #2
 800810e:	bf0c      	ite	eq
 8008110:	2301      	moveq	r3, #1
 8008112:	2300      	movne	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 853d 	beq.w	8008b96 <cppLoop+0x17ce>
			HAL_Delay(500);
 800811c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008120:	f000 fe6a 	bl	8008df8 <HAL_Delay>

			led.LR(1, -1);
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	2101      	movs	r1, #1
 800812a:	4882      	ldr	r0, [pc, #520]	; (8008334 <cppLoop+0xf6c>)
 800812c:	f7f9 ffa2 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008130:	2102      	movs	r1, #2
 8008132:	4886      	ldr	r0, [pc, #536]	; (800834c <cppLoop+0xf84>)
 8008134:	f7fb ff1a 	bl	8003f6c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008138:	4b87      	ldr	r3, [pc, #540]	; (8008358 <cppLoop+0xf90>)
 800813a:	edd3 7a00 	vldr	s15, [r3]
 800813e:	eeb0 0a67 	vmov.f32	s0, s15
 8008142:	4882      	ldr	r0, [pc, #520]	; (800834c <cppLoop+0xf84>)
 8008144:	f7fb fb9d 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008148:	4b81      	ldr	r3, [pc, #516]	; (8008350 <cppLoop+0xf88>)
 800814a:	edd3 7a00 	vldr	s15, [r3]
 800814e:	eeb0 0a67 	vmov.f32	s0, s15
 8008152:	487e      	ldr	r0, [pc, #504]	; (800834c <cppLoop+0xf84>)
 8008154:	f7fb fbb3 	bl	80038be <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008158:	4b7f      	ldr	r3, [pc, #508]	; (8008358 <cppLoop+0xf90>)
 800815a:	edd3 7a00 	vldr	s15, [r3]
 800815e:	eeb0 0a67 	vmov.f32	s0, s15
 8008162:	487a      	ldr	r0, [pc, #488]	; (800834c <cppLoop+0xf84>)
 8008164:	f7fb fbcb 	bl	80038fe <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008168:	4878      	ldr	r0, [pc, #480]	; (800834c <cppLoop+0xf84>)
 800816a:	f7fa fed1 	bl	8002f10 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800816e:	4877      	ldr	r0, [pc, #476]	; (800834c <cppLoop+0xf84>)
 8008170:	f7fb fdfe 	bl	8003d70 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	2100      	movs	r1, #0
 800817a:	486e      	ldr	r0, [pc, #440]	; (8008334 <cppLoop+0xf6c>)
 800817c:	f7f9 ff7a 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008180:	f000 bd09 	b.w	8008b96 <cppLoop+0x17ce>

	case 6:
		led.fullColor('R');
 8008184:	2152      	movs	r1, #82	; 0x52
 8008186:	486b      	ldr	r0, [pc, #428]	; (8008334 <cppLoop+0xf6c>)
 8008188:	f7f9 feb8 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800818c:	f7f8 ff88 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008190:	2100      	movs	r1, #0
 8008192:	2000      	movs	r0, #0
 8008194:	f7f8 ff94 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008198:	486c      	ldr	r0, [pc, #432]	; (800834c <cppLoop+0xf84>)
 800819a:	f7fb fbde 	bl	800395a <_ZN9LineTrace15getMaxVelocity2Ev>
 800819e:	ee10 3a10 	vmov	r3, s0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f8 f9e8 	bl	8000578 <__aeabi_f2d>
 80081a8:	4603      	mov	r3, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	461a      	mov	r2, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	4868      	ldr	r0, [pc, #416]	; (8008354 <cppLoop+0xf8c>)
 80081b2:	f7f8 ffaf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081b6:	2101      	movs	r1, #1
 80081b8:	2000      	movs	r0, #0
 80081ba:	f7f8 ff81 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80081be:	4863      	ldr	r0, [pc, #396]	; (800834c <cppLoop+0xf84>)
 80081c0:	f7fb fbeb 	bl	800399a <_ZN9LineTrace15getMinVelocity2Ev>
 80081c4:	ee10 3a10 	vmov	r3, s0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7f8 f9d5 	bl	8000578 <__aeabi_f2d>
 80081ce:	4603      	mov	r3, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	461a      	mov	r2, r3
 80081d4:	4623      	mov	r3, r4
 80081d6:	4862      	ldr	r0, [pc, #392]	; (8008360 <cppLoop+0xf98>)
 80081d8:	f7f8 ff9c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80081dc:	4854      	ldr	r0, [pc, #336]	; (8008330 <cppLoop+0xf68>)
 80081de:	f7f9 fe29 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d022      	beq.n	8008238 <cppLoop+0xe70>
			led.LR(-1, 1);
 80081f2:	2201      	movs	r2, #1
 80081f4:	f04f 31ff 	mov.w	r1, #4294967295
 80081f8:	484e      	ldr	r0, [pc, #312]	; (8008334 <cppLoop+0xf6c>)
 80081fa:	f7f9 ff3b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008202:	f000 fdf9 	bl	8008df8 <HAL_Delay>

			selector_vel2++;
 8008206:	4b57      	ldr	r3, [pc, #348]	; (8008364 <cppLoop+0xf9c>)
 8008208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800820c:	b29b      	uxth	r3, r3
 800820e:	3301      	adds	r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	b21a      	sxth	r2, r3
 8008214:	4b53      	ldr	r3, [pc, #332]	; (8008364 <cppLoop+0xf9c>)
 8008216:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008218:	4b52      	ldr	r3, [pc, #328]	; (8008364 <cppLoop+0xf9c>)
 800821a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800821e:	2b01      	cmp	r3, #1
 8008220:	dd02      	ble.n	8008228 <cppLoop+0xe60>
 8008222:	4b50      	ldr	r3, [pc, #320]	; (8008364 <cppLoop+0xf9c>)
 8008224:	2200      	movs	r2, #0
 8008226:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008228:	2200      	movs	r2, #0
 800822a:	f04f 31ff 	mov.w	r1, #4294967295
 800822e:	4841      	ldr	r0, [pc, #260]	; (8008334 <cppLoop+0xf6c>)
 8008230:	f7f9 ff20 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008234:	f000 bcb1 	b.w	8008b9a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_R){
 8008238:	483d      	ldr	r0, [pc, #244]	; (8008330 <cppLoop+0xf68>)
 800823a:	f7f9 fdfb 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800823e:	4603      	mov	r3, r0
 8008240:	2b10      	cmp	r3, #16
 8008242:	bf0c      	ite	eq
 8008244:	2301      	moveq	r3, #1
 8008246:	2300      	movne	r3, #0
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d03c      	beq.n	80082c8 <cppLoop+0xf00>
			led.LR(-1, 1);
 800824e:	2201      	movs	r2, #1
 8008250:	f04f 31ff 	mov.w	r1, #4294967295
 8008254:	4837      	ldr	r0, [pc, #220]	; (8008334 <cppLoop+0xf6c>)
 8008256:	f7f9 ff0d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800825a:	2064      	movs	r0, #100	; 0x64
 800825c:	f000 fdcc 	bl	8008df8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008260:	4b40      	ldr	r3, [pc, #256]	; (8008364 <cppLoop+0xf9c>)
 8008262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d113      	bne.n	8008292 <cppLoop+0xeca>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800826a:	4b39      	ldr	r3, [pc, #228]	; (8008350 <cppLoop+0xf88>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7f8 f982 	bl	8000578 <__aeabi_f2d>
 8008274:	a32c      	add	r3, pc, #176	; (adr r3, 8008328 <cppLoop+0xf60>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 f81f 	bl	80002bc <__adddf3>
 800827e:	4603      	mov	r3, r0
 8008280:	460c      	mov	r4, r1
 8008282:	4618      	mov	r0, r3
 8008284:	4621      	mov	r1, r4
 8008286:	f7f8 fcc7 	bl	8000c18 <__aeabi_d2f>
 800828a:	4602      	mov	r2, r0
 800828c:	4b30      	ldr	r3, [pc, #192]	; (8008350 <cppLoop+0xf88>)
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e012      	b.n	80082b8 <cppLoop+0xef0>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008292:	4b31      	ldr	r3, [pc, #196]	; (8008358 <cppLoop+0xf90>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f7f8 f96e 	bl	8000578 <__aeabi_f2d>
 800829c:	a322      	add	r3, pc, #136	; (adr r3, 8008328 <cppLoop+0xf60>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f7f8 f80b 	bl	80002bc <__adddf3>
 80082a6:	4603      	mov	r3, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	4618      	mov	r0, r3
 80082ac:	4621      	mov	r1, r4
 80082ae:	f7f8 fcb3 	bl	8000c18 <__aeabi_d2f>
 80082b2:	4602      	mov	r2, r0
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <cppLoop+0xf90>)
 80082b6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80082b8:	2200      	movs	r2, #0
 80082ba:	f04f 31ff 	mov.w	r1, #4294967295
 80082be:	481d      	ldr	r0, [pc, #116]	; (8008334 <cppLoop+0xf6c>)
 80082c0:	f7f9 fed8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80082c4:	f000 bc69 	b.w	8008b9a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_L){
 80082c8:	4819      	ldr	r0, [pc, #100]	; (8008330 <cppLoop+0xf68>)
 80082ca:	f7f9 fdb3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	bf0c      	ite	eq
 80082d4:	2301      	moveq	r3, #1
 80082d6:	2300      	movne	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d05e      	beq.n	800839c <cppLoop+0xfd4>
			led.LR(-1, 1);
 80082de:	2201      	movs	r2, #1
 80082e0:	f04f 31ff 	mov.w	r1, #4294967295
 80082e4:	4813      	ldr	r0, [pc, #76]	; (8008334 <cppLoop+0xf6c>)
 80082e6:	f7f9 fec5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082ea:	2064      	movs	r0, #100	; 0x64
 80082ec:	f000 fd84 	bl	8008df8 <HAL_Delay>
			if(selector_vel2 == 0)
 80082f0:	4b1c      	ldr	r3, [pc, #112]	; (8008364 <cppLoop+0xf9c>)
 80082f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d136      	bne.n	8008368 <cppLoop+0xfa0>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <cppLoop+0xf88>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7f8 f93a 	bl	8000578 <__aeabi_f2d>
 8008304:	a308      	add	r3, pc, #32	; (adr r3, 8008328 <cppLoop+0xf60>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffd5 	bl	80002b8 <__aeabi_dsub>
 800830e:	4603      	mov	r3, r0
 8008310:	460c      	mov	r4, r1
 8008312:	4618      	mov	r0, r3
 8008314:	4621      	mov	r1, r4
 8008316:	f7f8 fc7f 	bl	8000c18 <__aeabi_d2f>
 800831a:	4602      	mov	r2, r0
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <cppLoop+0xf88>)
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e035      	b.n	800838e <cppLoop+0xfc6>
 8008322:	bf00      	nop
 8008324:	f3af 8000 	nop.w
 8008328:	9999999a 	.word	0x9999999a
 800832c:	3fb99999 	.word	0x3fb99999
 8008330:	200005c0 	.word	0x200005c0
 8008334:	200005cc 	.word	0x200005cc
 8008338:	2003c464 	.word	0x2003c464
 800833c:	08019118 	.word	0x08019118
 8008340:	080190c4 	.word	0x080190c4
 8008344:	2003c474 	.word	0x2003c474
 8008348:	08019124 	.word	0x08019124
 800834c:	20017da0 	.word	0x20017da0
 8008350:	2003c46c 	.word	0x2003c46c
 8008354:	08019130 	.word	0x08019130
 8008358:	2003c47c 	.word	0x2003c47c
 800835c:	080190e8 	.word	0x080190e8
 8008360:	080190f4 	.word	0x080190f4
 8008364:	2003c442 	.word	0x2003c442
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008368:	4bbd      	ldr	r3, [pc, #756]	; (8008660 <cppLoop+0x1298>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f7f8 f903 	bl	8000578 <__aeabi_f2d>
 8008372:	a3b9      	add	r3, pc, #740	; (adr r3, 8008658 <cppLoop+0x1290>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f7 ff9e 	bl	80002b8 <__aeabi_dsub>
 800837c:	4603      	mov	r3, r0
 800837e:	460c      	mov	r4, r1
 8008380:	4618      	mov	r0, r3
 8008382:	4621      	mov	r1, r4
 8008384:	f7f8 fc48 	bl	8000c18 <__aeabi_d2f>
 8008388:	4602      	mov	r2, r0
 800838a:	4bb5      	ldr	r3, [pc, #724]	; (8008660 <cppLoop+0x1298>)
 800838c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800838e:	2200      	movs	r2, #0
 8008390:	f04f 31ff 	mov.w	r1, #4294967295
 8008394:	48b3      	ldr	r0, [pc, #716]	; (8008664 <cppLoop+0x129c>)
 8008396:	f7f9 fe6d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800839a:	e3fe      	b.n	8008b9a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_C){
 800839c:	48b2      	ldr	r0, [pc, #712]	; (8008668 <cppLoop+0x12a0>)
 800839e:	f7f9 fd49 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 83f3 	beq.w	8008b9a <cppLoop+0x17d2>
			led.LR(-1, 1);
 80083b4:	2201      	movs	r2, #1
 80083b6:	f04f 31ff 	mov.w	r1, #4294967295
 80083ba:	48aa      	ldr	r0, [pc, #680]	; (8008664 <cppLoop+0x129c>)
 80083bc:	f7f9 fe5a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083c4:	f000 fd18 	bl	8008df8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80083c8:	2300      	movs	r3, #0
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	4ba7      	ldr	r3, [pc, #668]	; (800866c <cppLoop+0x12a4>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	49a7      	ldr	r1, [pc, #668]	; (8008670 <cppLoop+0x12a8>)
 80083d2:	48a8      	ldr	r0, [pc, #672]	; (8008674 <cppLoop+0x12ac>)
 80083d4:	f7f9 f916 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80083d8:	2300      	movs	r3, #0
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	4ba0      	ldr	r3, [pc, #640]	; (8008660 <cppLoop+0x1298>)
 80083de:	2201      	movs	r2, #1
 80083e0:	49a5      	ldr	r1, [pc, #660]	; (8008678 <cppLoop+0x12b0>)
 80083e2:	48a4      	ldr	r0, [pc, #656]	; (8008674 <cppLoop+0x12ac>)
 80083e4:	f7f9 f90e 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80083e8:	4ba0      	ldr	r3, [pc, #640]	; (800866c <cppLoop+0x12a4>)
 80083ea:	edd3 7a00 	vldr	s15, [r3]
 80083ee:	eeb0 0a67 	vmov.f32	s0, s15
 80083f2:	48a2      	ldr	r0, [pc, #648]	; (800867c <cppLoop+0x12b4>)
 80083f4:	f7fb fa63 	bl	80038be <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80083f8:	4b99      	ldr	r3, [pc, #612]	; (8008660 <cppLoop+0x1298>)
 80083fa:	edd3 7a00 	vldr	s15, [r3]
 80083fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008402:	489e      	ldr	r0, [pc, #632]	; (800867c <cppLoop+0x12b4>)
 8008404:	f7fb fa7b 	bl	80038fe <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008408:	2200      	movs	r2, #0
 800840a:	f04f 31ff 	mov.w	r1, #4294967295
 800840e:	4895      	ldr	r0, [pc, #596]	; (8008664 <cppLoop+0x129c>)
 8008410:	f7f9 fe30 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008414:	e3c1      	b.n	8008b9a <cppLoop+0x17d2>

	case 7:
		led.fullColor('W');
 8008416:	2157      	movs	r1, #87	; 0x57
 8008418:	4892      	ldr	r0, [pc, #584]	; (8008664 <cppLoop+0x129c>)
 800841a:	f7f9 fd6f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800841e:	f7f8 fe3f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008422:	2100      	movs	r1, #0
 8008424:	2000      	movs	r0, #0
 8008426:	f7f8 fe4b 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800842a:	4894      	ldr	r0, [pc, #592]	; (800867c <cppLoop+0x12b4>)
 800842c:	f7fb fadf 	bl	80039ee <_ZN9LineTrace9getMaxAccEv>
 8008430:	ee10 3a10 	vmov	r3, s0
 8008434:	4618      	mov	r0, r3
 8008436:	f7f8 f89f 	bl	8000578 <__aeabi_f2d>
 800843a:	4603      	mov	r3, r0
 800843c:	460c      	mov	r4, r1
 800843e:	461a      	mov	r2, r3
 8008440:	4623      	mov	r3, r4
 8008442:	488f      	ldr	r0, [pc, #572]	; (8008680 <cppLoop+0x12b8>)
 8008444:	f7f8 fe66 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008448:	2101      	movs	r1, #1
 800844a:	2000      	movs	r0, #0
 800844c:	f7f8 fe38 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008450:	488a      	ldr	r0, [pc, #552]	; (800867c <cppLoop+0x12b4>)
 8008452:	f7fb fade 	bl	8003a12 <_ZN9LineTrace9getMaxDecEv>
 8008456:	ee10 3a10 	vmov	r3, s0
 800845a:	4618      	mov	r0, r3
 800845c:	f7f8 f88c 	bl	8000578 <__aeabi_f2d>
 8008460:	4603      	mov	r3, r0
 8008462:	460c      	mov	r4, r1
 8008464:	461a      	mov	r2, r3
 8008466:	4623      	mov	r3, r4
 8008468:	4886      	ldr	r0, [pc, #536]	; (8008684 <cppLoop+0x12bc>)
 800846a:	f7f8 fe53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800846e:	487e      	ldr	r0, [pc, #504]	; (8008668 <cppLoop+0x12a0>)
 8008470:	f7f9 fce0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008474:	4603      	mov	r3, r0
 8008476:	2b08      	cmp	r3, #8
 8008478:	bf0c      	ite	eq
 800847a:	2301      	moveq	r3, #1
 800847c:	2300      	movne	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d021      	beq.n	80084c8 <cppLoop+0x1100>
			led.LR(-1, 1);
 8008484:	2201      	movs	r2, #1
 8008486:	f04f 31ff 	mov.w	r1, #4294967295
 800848a:	4876      	ldr	r0, [pc, #472]	; (8008664 <cppLoop+0x129c>)
 800848c:	f7f9 fdf2 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008490:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008494:	f000 fcb0 	bl	8008df8 <HAL_Delay>

			selector_acc++;
 8008498:	4b7b      	ldr	r3, [pc, #492]	; (8008688 <cppLoop+0x12c0>)
 800849a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	3301      	adds	r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	b21a      	sxth	r2, r3
 80084a6:	4b78      	ldr	r3, [pc, #480]	; (8008688 <cppLoop+0x12c0>)
 80084a8:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80084aa:	4b77      	ldr	r3, [pc, #476]	; (8008688 <cppLoop+0x12c0>)
 80084ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	dd02      	ble.n	80084ba <cppLoop+0x10f2>
 80084b4:	4b74      	ldr	r3, [pc, #464]	; (8008688 <cppLoop+0x12c0>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80084ba:	2200      	movs	r2, #0
 80084bc:	f04f 31ff 	mov.w	r1, #4294967295
 80084c0:	4868      	ldr	r0, [pc, #416]	; (8008664 <cppLoop+0x129c>)
 80084c2:	f7f9 fdd7 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80084c6:	e36a      	b.n	8008b9e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_R){
 80084c8:	4867      	ldr	r0, [pc, #412]	; (8008668 <cppLoop+0x12a0>)
 80084ca:	f7f9 fcb3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d03b      	beq.n	8008556 <cppLoop+0x118e>
			led.LR(-1, 1);
 80084de:	2201      	movs	r2, #1
 80084e0:	f04f 31ff 	mov.w	r1, #4294967295
 80084e4:	485f      	ldr	r0, [pc, #380]	; (8008664 <cppLoop+0x129c>)
 80084e6:	f7f9 fdc5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084ea:	2064      	movs	r0, #100	; 0x64
 80084ec:	f000 fc84 	bl	8008df8 <HAL_Delay>
			if(selector_acc == 0){
 80084f0:	4b65      	ldr	r3, [pc, #404]	; (8008688 <cppLoop+0x12c0>)
 80084f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d113      	bne.n	8008522 <cppLoop+0x115a>
				adj_acc = adj_acc + 0.1;
 80084fa:	4b64      	ldr	r3, [pc, #400]	; (800868c <cppLoop+0x12c4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7f8 f83a 	bl	8000578 <__aeabi_f2d>
 8008504:	a354      	add	r3, pc, #336	; (adr r3, 8008658 <cppLoop+0x1290>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f7f7 fed7 	bl	80002bc <__adddf3>
 800850e:	4603      	mov	r3, r0
 8008510:	460c      	mov	r4, r1
 8008512:	4618      	mov	r0, r3
 8008514:	4621      	mov	r1, r4
 8008516:	f7f8 fb7f 	bl	8000c18 <__aeabi_d2f>
 800851a:	4602      	mov	r2, r0
 800851c:	4b5b      	ldr	r3, [pc, #364]	; (800868c <cppLoop+0x12c4>)
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	e012      	b.n	8008548 <cppLoop+0x1180>
				adj_dec = adj_dec + 0.1;
 8008522:	4b5b      	ldr	r3, [pc, #364]	; (8008690 <cppLoop+0x12c8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 f826 	bl	8000578 <__aeabi_f2d>
 800852c:	a34a      	add	r3, pc, #296	; (adr r3, 8008658 <cppLoop+0x1290>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f7 fec3 	bl	80002bc <__adddf3>
 8008536:	4603      	mov	r3, r0
 8008538:	460c      	mov	r4, r1
 800853a:	4618      	mov	r0, r3
 800853c:	4621      	mov	r1, r4
 800853e:	f7f8 fb6b 	bl	8000c18 <__aeabi_d2f>
 8008542:	4602      	mov	r2, r0
 8008544:	4b52      	ldr	r3, [pc, #328]	; (8008690 <cppLoop+0x12c8>)
 8008546:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008548:	2200      	movs	r2, #0
 800854a:	f04f 31ff 	mov.w	r1, #4294967295
 800854e:	4845      	ldr	r0, [pc, #276]	; (8008664 <cppLoop+0x129c>)
 8008550:	f7f9 fd90 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008554:	e323      	b.n	8008b9e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_L){
 8008556:	4844      	ldr	r0, [pc, #272]	; (8008668 <cppLoop+0x12a0>)
 8008558:	f7f9 fc6c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800855c:	4603      	mov	r3, r0
 800855e:	2b01      	cmp	r3, #1
 8008560:	bf0c      	ite	eq
 8008562:	2301      	moveq	r3, #1
 8008564:	2300      	movne	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d03b      	beq.n	80085e4 <cppLoop+0x121c>
			led.LR(-1, 1);
 800856c:	2201      	movs	r2, #1
 800856e:	f04f 31ff 	mov.w	r1, #4294967295
 8008572:	483c      	ldr	r0, [pc, #240]	; (8008664 <cppLoop+0x129c>)
 8008574:	f7f9 fd7e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008578:	2064      	movs	r0, #100	; 0x64
 800857a:	f000 fc3d 	bl	8008df8 <HAL_Delay>
			if(selector_acc == 0){
 800857e:	4b42      	ldr	r3, [pc, #264]	; (8008688 <cppLoop+0x12c0>)
 8008580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d113      	bne.n	80085b0 <cppLoop+0x11e8>
				adj_acc = adj_acc - 0.1;
 8008588:	4b40      	ldr	r3, [pc, #256]	; (800868c <cppLoop+0x12c4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f7f7 fff3 	bl	8000578 <__aeabi_f2d>
 8008592:	a331      	add	r3, pc, #196	; (adr r3, 8008658 <cppLoop+0x1290>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f7 fe8e 	bl	80002b8 <__aeabi_dsub>
 800859c:	4603      	mov	r3, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	4618      	mov	r0, r3
 80085a2:	4621      	mov	r1, r4
 80085a4:	f7f8 fb38 	bl	8000c18 <__aeabi_d2f>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b38      	ldr	r3, [pc, #224]	; (800868c <cppLoop+0x12c4>)
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e012      	b.n	80085d6 <cppLoop+0x120e>
				adj_dec = adj_dec - 0.1;
 80085b0:	4b37      	ldr	r3, [pc, #220]	; (8008690 <cppLoop+0x12c8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 ffdf 	bl	8000578 <__aeabi_f2d>
 80085ba:	a327      	add	r3, pc, #156	; (adr r3, 8008658 <cppLoop+0x1290>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 fe7a 	bl	80002b8 <__aeabi_dsub>
 80085c4:	4603      	mov	r3, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4618      	mov	r0, r3
 80085ca:	4621      	mov	r1, r4
 80085cc:	f7f8 fb24 	bl	8000c18 <__aeabi_d2f>
 80085d0:	4602      	mov	r2, r0
 80085d2:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <cppLoop+0x12c8>)
 80085d4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	f04f 31ff 	mov.w	r1, #4294967295
 80085dc:	4821      	ldr	r0, [pc, #132]	; (8008664 <cppLoop+0x129c>)
 80085de:	f7f9 fd49 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80085e2:	e2dc      	b.n	8008b9e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_C){
 80085e4:	4820      	ldr	r0, [pc, #128]	; (8008668 <cppLoop+0x12a0>)
 80085e6:	f7f9 fc25 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	bf0c      	ite	eq
 80085f0:	2301      	moveq	r3, #1
 80085f2:	2300      	movne	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 82d1 	beq.w	8008b9e <cppLoop+0x17d6>
			led.LR(-1, 1);
 80085fc:	2201      	movs	r2, #1
 80085fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008602:	4818      	ldr	r0, [pc, #96]	; (8008664 <cppLoop+0x129c>)
 8008604:	f7f9 fd36 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008608:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800860c:	f000 fbf4 	bl	8008df8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4b1d      	ldr	r3, [pc, #116]	; (800868c <cppLoop+0x12c4>)
 8008616:	2201      	movs	r2, #1
 8008618:	491e      	ldr	r1, [pc, #120]	; (8008694 <cppLoop+0x12cc>)
 800861a:	4816      	ldr	r0, [pc, #88]	; (8008674 <cppLoop+0x12ac>)
 800861c:	f7f8 fff2 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008620:	2300      	movs	r3, #0
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <cppLoop+0x12c8>)
 8008626:	2201      	movs	r2, #1
 8008628:	491b      	ldr	r1, [pc, #108]	; (8008698 <cppLoop+0x12d0>)
 800862a:	4812      	ldr	r0, [pc, #72]	; (8008674 <cppLoop+0x12ac>)
 800862c:	f7f8 ffea 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008630:	4b16      	ldr	r3, [pc, #88]	; (800868c <cppLoop+0x12c4>)
 8008632:	edd3 7a00 	vldr	s15, [r3]
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <cppLoop+0x12c8>)
 8008638:	ed93 7a00 	vldr	s14, [r3]
 800863c:	eef0 0a47 	vmov.f32	s1, s14
 8008640:	eeb0 0a67 	vmov.f32	s0, s15
 8008644:	480d      	ldr	r0, [pc, #52]	; (800867c <cppLoop+0x12b4>)
 8008646:	f7fb f9b8 	bl	80039ba <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800864a:	2200      	movs	r2, #0
 800864c:	f04f 31ff 	mov.w	r1, #4294967295
 8008650:	4804      	ldr	r0, [pc, #16]	; (8008664 <cppLoop+0x129c>)
 8008652:	f7f9 fd0f 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008656:	e2a2      	b.n	8008b9e <cppLoop+0x17d6>
 8008658:	9999999a 	.word	0x9999999a
 800865c:	3fb99999 	.word	0x3fb99999
 8008660:	2003c47c 	.word	0x2003c47c
 8008664:	200005cc 	.word	0x200005cc
 8008668:	200005c0 	.word	0x200005c0
 800866c:	2003c46c 	.word	0x2003c46c
 8008670:	0801913c 	.word	0x0801913c
 8008674:	080190c4 	.word	0x080190c4
 8008678:	08019148 	.word	0x08019148
 800867c:	20017da0 	.word	0x20017da0
 8008680:	08019154 	.word	0x08019154
 8008684:	08019160 	.word	0x08019160
 8008688:	2003c43e 	.word	0x2003c43e
 800868c:	2003c484 	.word	0x2003c484
 8008690:	2003c48c 	.word	0x2003c48c
 8008694:	0801916c 	.word	0x0801916c
 8008698:	08019174 	.word	0x08019174

	case 8:
		led.fullColor('~');
 800869c:	217e      	movs	r1, #126	; 0x7e
 800869e:	48ca      	ldr	r0, [pc, #808]	; (80089c8 <cppLoop+0x1600>)
 80086a0:	f7f9 fc2c 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80086a4:	f7f8 fcfc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086a8:	2100      	movs	r1, #0
 80086aa:	2000      	movs	r0, #0
 80086ac:	f7f8 fd08 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 80086b0:	48c6      	ldr	r0, [pc, #792]	; (80089cc <cppLoop+0x1604>)
 80086b2:	f7f8 fd2f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086b6:	2101      	movs	r1, #1
 80086b8:	2000      	movs	r0, #0
 80086ba:	f7f8 fd01 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80086be:	48c4      	ldr	r0, [pc, #784]	; (80089d0 <cppLoop+0x1608>)
 80086c0:	f7f8 fd28 	bl	8001114 <lcd_printf>

		break;
 80086c4:	e27a      	b.n	8008bbc <cppLoop+0x17f4>

	case 9:
		led.fullColor('~');
 80086c6:	217e      	movs	r1, #126	; 0x7e
 80086c8:	48bf      	ldr	r0, [pc, #764]	; (80089c8 <cppLoop+0x1600>)
 80086ca:	f7f9 fc17 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80086ce:	f7f8 fce7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086d2:	2100      	movs	r1, #0
 80086d4:	2000      	movs	r0, #0
 80086d6:	f7f8 fcf3 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80086da:	48be      	ldr	r0, [pc, #760]	; (80089d4 <cppLoop+0x160c>)
 80086dc:	f7f8 fd1a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086e0:	2101      	movs	r1, #1
 80086e2:	2000      	movs	r0, #0
 80086e4:	f7f8 fcec 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80086e8:	48bb      	ldr	r0, [pc, #748]	; (80089d8 <cppLoop+0x1610>)
 80086ea:	f7f8 fd13 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80086ee:	48bb      	ldr	r0, [pc, #748]	; (80089dc <cppLoop+0x1614>)
 80086f0:	f7f9 fba0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	bf0c      	ite	eq
 80086fa:	2301      	moveq	r3, #1
 80086fc:	2300      	movne	r3, #0
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 824e 	beq.w	8008ba2 <cppLoop+0x17da>
			led.LR(-1, 1);
 8008706:	2201      	movs	r2, #1
 8008708:	f04f 31ff 	mov.w	r1, #4294967295
 800870c:	48ae      	ldr	r0, [pc, #696]	; (80089c8 <cppLoop+0x1600>)
 800870e:	f7f9 fcb1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008716:	f000 fb6f 	bl	8008df8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800871a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80089e0 <cppLoop+0x1618>
 800871e:	48b1      	ldr	r0, [pc, #708]	; (80089e4 <cppLoop+0x161c>)
 8008720:	f7fb f8a0 	bl	8003864 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008724:	48af      	ldr	r0, [pc, #700]	; (80089e4 <cppLoop+0x161c>)
 8008726:	f7fb fa95 	bl	8003c54 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800872a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800872e:	f000 fb63 	bl	8008df8 <HAL_Delay>

			led.fullColor('R');
 8008732:	2152      	movs	r1, #82	; 0x52
 8008734:	48a4      	ldr	r0, [pc, #656]	; (80089c8 <cppLoop+0x1600>)
 8008736:	f7f9 fbe1 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800873a:	48ab      	ldr	r0, [pc, #684]	; (80089e8 <cppLoop+0x1620>)
 800873c:	f7f8 feb4 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008740:	f242 7010 	movw	r0, #10000	; 0x2710
 8008744:	f000 fb58 	bl	8008df8 <HAL_Delay>

			line_trace.stop();
 8008748:	48a6      	ldr	r0, [pc, #664]	; (80089e4 <cppLoop+0x161c>)
 800874a:	f7fb faa9 	bl	8003ca0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800874e:	49a7      	ldr	r1, [pc, #668]	; (80089ec <cppLoop+0x1624>)
 8008750:	48a7      	ldr	r0, [pc, #668]	; (80089f0 <cppLoop+0x1628>)
 8008752:	f7f8 fee2 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 8008756:	48a4      	ldr	r0, [pc, #656]	; (80089e8 <cppLoop+0x1620>)
 8008758:	f7f8 fe6a 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 800875c:	eef0 7a40 	vmov.f32	s15, s0
 8008760:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8008764:	463b      	mov	r3, r7
 8008766:	2201      	movs	r2, #1
 8008768:	4619      	mov	r1, r3
 800876a:	2001      	movs	r0, #1
 800876c:	f7f8 fef8 	bl	8001560 <sd_write_float>
			user_fclose();
 8008770:	f7f8 fee6 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8008774:	2200      	movs	r2, #0
 8008776:	f04f 31ff 	mov.w	r1, #4294967295
 800877a:	4893      	ldr	r0, [pc, #588]	; (80089c8 <cppLoop+0x1600>)
 800877c:	f7f9 fc7a 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008780:	e20f      	b.n	8008ba2 <cppLoop+0x17da>

	case 10:
		led.fullColor('~');
 8008782:	217e      	movs	r1, #126	; 0x7e
 8008784:	4890      	ldr	r0, [pc, #576]	; (80089c8 <cppLoop+0x1600>)
 8008786:	f7f9 fbb9 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800878a:	f7f8 fc89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800878e:	2100      	movs	r1, #0
 8008790:	2000      	movs	r0, #0
 8008792:	f7f8 fc95 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008796:	4897      	ldr	r0, [pc, #604]	; (80089f4 <cppLoop+0x162c>)
 8008798:	f7f8 fcbc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800879c:	2101      	movs	r1, #1
 800879e:	2000      	movs	r0, #0
 80087a0:	f7f8 fc8e 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80087a4:	4894      	ldr	r0, [pc, #592]	; (80089f8 <cppLoop+0x1630>)
 80087a6:	f7f8 fcb5 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80087aa:	488c      	ldr	r0, [pc, #560]	; (80089dc <cppLoop+0x1614>)
 80087ac:	f7f9 fb42 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	bf0c      	ite	eq
 80087b6:	2301      	moveq	r3, #1
 80087b8:	2300      	movne	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 81f2 	beq.w	8008ba6 <cppLoop+0x17de>
			HAL_Delay(500);
 80087c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087c6:	f000 fb17 	bl	8008df8 <HAL_Delay>
			led.LR(-1, 1);
 80087ca:	2201      	movs	r2, #1
 80087cc:	f04f 31ff 	mov.w	r1, #4294967295
 80087d0:	487d      	ldr	r0, [pc, #500]	; (80089c8 <cppLoop+0x1600>)
 80087d2:	f7f9 fc4f 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 80087d6:	2101      	movs	r1, #1
 80087d8:	4882      	ldr	r0, [pc, #520]	; (80089e4 <cppLoop+0x161c>)
 80087da:	f7fb fbc7 	bl	8003f6c <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 80087de:	4881      	ldr	r0, [pc, #516]	; (80089e4 <cppLoop+0x161c>)
 80087e0:	f7fa fc2c 	bl	800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80087e4:	2200      	movs	r2, #0
 80087e6:	f04f 31ff 	mov.w	r1, #4294967295
 80087ea:	4877      	ldr	r0, [pc, #476]	; (80089c8 <cppLoop+0x1600>)
 80087ec:	f7f9 fc42 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80087f0:	e1d9      	b.n	8008ba6 <cppLoop+0x17de>

	case 11:
		led.fullColor('~');
 80087f2:	217e      	movs	r1, #126	; 0x7e
 80087f4:	4874      	ldr	r0, [pc, #464]	; (80089c8 <cppLoop+0x1600>)
 80087f6:	f7f9 fb81 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80087fa:	f7f8 fc51 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80087fe:	2100      	movs	r1, #0
 8008800:	2000      	movs	r0, #0
 8008802:	f7f8 fc5d 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8008806:	487d      	ldr	r0, [pc, #500]	; (80089fc <cppLoop+0x1634>)
 8008808:	f7f8 fc84 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800880c:	2101      	movs	r1, #1
 800880e:	2000      	movs	r0, #0
 8008810:	f7f8 fc56 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008814:	487a      	ldr	r0, [pc, #488]	; (8008a00 <cppLoop+0x1638>)
 8008816:	f7f8 fc7d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800881a:	4870      	ldr	r0, [pc, #448]	; (80089dc <cppLoop+0x1614>)
 800881c:	f7f9 fb0a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008820:	4603      	mov	r3, r0
 8008822:	2b02      	cmp	r3, #2
 8008824:	bf0c      	ite	eq
 8008826:	2301      	moveq	r3, #1
 8008828:	2300      	movne	r3, #0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 81bc 	beq.w	8008baa <cppLoop+0x17e2>
			HAL_Delay(1500);
 8008832:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008836:	f000 fadf 	bl	8008df8 <HAL_Delay>
			led.LR(-1, 1);
 800883a:	2201      	movs	r2, #1
 800883c:	f04f 31ff 	mov.w	r1, #4294967295
 8008840:	4861      	ldr	r0, [pc, #388]	; (80089c8 <cppLoop+0x1600>)
 8008842:	f7f9 fc17 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008846:	486f      	ldr	r0, [pc, #444]	; (8008a04 <cppLoop+0x163c>)
 8008848:	f7fb ff47 	bl	80046da <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800884c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80089b0 <cppLoop+0x15e8>
 8008850:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80089b8 <cppLoop+0x15f0>
 8008854:	486c      	ldr	r0, [pc, #432]	; (8008a08 <cppLoop+0x1640>)
 8008856:	f7fb ffd5 	bl	8004804 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800885a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800885e:	f000 facb 	bl	8008df8 <HAL_Delay>

			logger.stop();
 8008862:	4868      	ldr	r0, [pc, #416]	; (8008a04 <cppLoop+0x163c>)
 8008864:	f7fb ff4a 	bl	80046fc <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8008868:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80089c0 <cppLoop+0x15f8>
 800886c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80089c0 <cppLoop+0x15f8>
 8008870:	4865      	ldr	r0, [pc, #404]	; (8008a08 <cppLoop+0x1640>)
 8008872:	f7fb ffc7 	bl	8004804 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8008876:	4a65      	ldr	r2, [pc, #404]	; (8008a0c <cppLoop+0x1644>)
 8008878:	4965      	ldr	r1, [pc, #404]	; (8008a10 <cppLoop+0x1648>)
 800887a:	4862      	ldr	r0, [pc, #392]	; (8008a04 <cppLoop+0x163c>)
 800887c:	f7fb fe3d 	bl	80044fa <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008880:	2200      	movs	r2, #0
 8008882:	f04f 31ff 	mov.w	r1, #4294967295
 8008886:	4850      	ldr	r0, [pc, #320]	; (80089c8 <cppLoop+0x1600>)
 8008888:	f7f9 fbf4 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800888c:	e18d      	b.n	8008baa <cppLoop+0x17e2>

	case 12:
		led.fullColor('~');
 800888e:	217e      	movs	r1, #126	; 0x7e
 8008890:	484d      	ldr	r0, [pc, #308]	; (80089c8 <cppLoop+0x1600>)
 8008892:	f7f9 fb33 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008896:	f7f8 fc03 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800889a:	2100      	movs	r1, #0
 800889c:	2000      	movs	r0, #0
 800889e:	f7f8 fc0f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80088a2:	485c      	ldr	r0, [pc, #368]	; (8008a14 <cppLoop+0x164c>)
 80088a4:	f7f8 fc36 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088a8:	2101      	movs	r1, #1
 80088aa:	2000      	movs	r0, #0
 80088ac:	f7f8 fc08 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80088b0:	4859      	ldr	r0, [pc, #356]	; (8008a18 <cppLoop+0x1650>)
 80088b2:	f7f8 fc2f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80088b6:	4849      	ldr	r0, [pc, #292]	; (80089dc <cppLoop+0x1614>)
 80088b8:	f7f9 fabc 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b02      	cmp	r3, #2
 80088c0:	bf0c      	ite	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	2300      	movne	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8170 	beq.w	8008bae <cppLoop+0x17e6>
			HAL_Delay(1500);
 80088ce:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80088d2:	f000 fa91 	bl	8008df8 <HAL_Delay>
			led.LR(-1, 1);
 80088d6:	2201      	movs	r2, #1
 80088d8:	f04f 31ff 	mov.w	r1, #4294967295
 80088dc:	483a      	ldr	r0, [pc, #232]	; (80089c8 <cppLoop+0x1600>)
 80088de:	f7f9 fbc9 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80088e2:	4848      	ldr	r0, [pc, #288]	; (8008a04 <cppLoop+0x163c>)
 80088e4:	f7fb fef9 	bl	80046da <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80088e8:	484c      	ldr	r0, [pc, #304]	; (8008a1c <cppLoop+0x1654>)
 80088ea:	f7fc feda 	bl	80056a2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80088ee:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80089e0 <cppLoop+0x1618>
 80088f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80088f6:	4849      	ldr	r0, [pc, #292]	; (8008a1c <cppLoop+0x1654>)
 80088f8:	f7fc fe66 	bl	80055c8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80088fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008900:	f000 fa7a 	bl	8008df8 <HAL_Delay>

			logger.stop();
 8008904:	483f      	ldr	r0, [pc, #252]	; (8008a04 <cppLoop+0x163c>)
 8008906:	f7fb fef9 	bl	80046fc <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800890a:	4844      	ldr	r0, [pc, #272]	; (8008a1c <cppLoop+0x1654>)
 800890c:	f7fc fedc 	bl	80056c8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008910:	4a43      	ldr	r2, [pc, #268]	; (8008a20 <cppLoop+0x1658>)
 8008912:	493f      	ldr	r1, [pc, #252]	; (8008a10 <cppLoop+0x1648>)
 8008914:	483b      	ldr	r0, [pc, #236]	; (8008a04 <cppLoop+0x163c>)
 8008916:	f7fb fdf0 	bl	80044fa <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800891a:	2200      	movs	r2, #0
 800891c:	f04f 31ff 	mov.w	r1, #4294967295
 8008920:	4829      	ldr	r0, [pc, #164]	; (80089c8 <cppLoop+0x1600>)
 8008922:	f7f9 fba7 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008926:	e142      	b.n	8008bae <cppLoop+0x17e6>

	case 13:
		led.fullColor('~');
 8008928:	217e      	movs	r1, #126	; 0x7e
 800892a:	4827      	ldr	r0, [pc, #156]	; (80089c8 <cppLoop+0x1600>)
 800892c:	f7f9 fae6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008930:	f7f8 fbb6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008934:	2100      	movs	r1, #0
 8008936:	2000      	movs	r0, #0
 8008938:	f7f8 fbc2 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800893c:	4839      	ldr	r0, [pc, #228]	; (8008a24 <cppLoop+0x165c>)
 800893e:	f7f8 fbe9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008942:	2101      	movs	r1, #1
 8008944:	2000      	movs	r0, #0
 8008946:	f7f8 fbbb 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800894a:	482d      	ldr	r0, [pc, #180]	; (8008a00 <cppLoop+0x1638>)
 800894c:	f7f8 fbe2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008950:	4822      	ldr	r0, [pc, #136]	; (80089dc <cppLoop+0x1614>)
 8008952:	f7f9 fa6f 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008956:	4603      	mov	r3, r0
 8008958:	2b02      	cmp	r3, #2
 800895a:	bf0c      	ite	eq
 800895c:	2301      	moveq	r3, #1
 800895e:	2300      	movne	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8125 	beq.w	8008bb2 <cppLoop+0x17ea>
			led.LR(-1, 1);
 8008968:	2201      	movs	r2, #1
 800896a:	f04f 31ff 	mov.w	r1, #4294967295
 800896e:	4816      	ldr	r0, [pc, #88]	; (80089c8 <cppLoop+0x1600>)
 8008970:	f7f9 fb80 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8008974:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008978:	f000 fa3e 	bl	8008df8 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800897c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008a28 <cppLoop+0x1660>
 8008980:	482a      	ldr	r0, [pc, #168]	; (8008a2c <cppLoop+0x1664>)
 8008982:	f7fc fcad 	bl	80052e0 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8008986:	4829      	ldr	r0, [pc, #164]	; (8008a2c <cppLoop+0x1664>)
 8008988:	f7fc fcba 	bl	8005300 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800898c:	f244 405c 	movw	r0, #17500	; 0x445c
 8008990:	f000 fa32 	bl	8008df8 <HAL_Delay>
			sys_ident.stop();
 8008994:	4825      	ldr	r0, [pc, #148]	; (8008a2c <cppLoop+0x1664>)
 8008996:	f7fc fcc7 	bl	8005328 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800899a:	4824      	ldr	r0, [pc, #144]	; (8008a2c <cppLoop+0x1664>)
 800899c:	f7fc fc2e 	bl	80051fc <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80089a0:	2200      	movs	r2, #0
 80089a2:	f04f 31ff 	mov.w	r1, #4294967295
 80089a6:	4808      	ldr	r0, [pc, #32]	; (80089c8 <cppLoop+0x1600>)
 80089a8:	f7f9 fb64 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80089ac:	e101      	b.n	8008bb2 <cppLoop+0x17ea>
 80089ae:	bf00      	nop
 80089b0:	33333333 	.word	0x33333333
 80089b4:	bfd33333 	.word	0xbfd33333
 80089b8:	33333333 	.word	0x33333333
 80089bc:	3fd33333 	.word	0x3fd33333
	...
 80089c8:	200005cc 	.word	0x200005cc
 80089cc:	0801917c 	.word	0x0801917c
 80089d0:	08019188 	.word	0x08019188
 80089d4:	08019194 	.word	0x08019194
 80089d8:	0801919c 	.word	0x0801919c
 80089dc:	200005c0 	.word	0x200005c0
 80089e0:	00000000 	.word	0x00000000
 80089e4:	20017da0 	.word	0x20017da0
 80089e8:	20017d00 	.word	0x20017d00
 80089ec:	080191a8 	.word	0x080191a8
 80089f0:	080191b0 	.word	0x080191b0
 80089f4:	080191bc 	.word	0x080191bc
 80089f8:	080191c8 	.word	0x080191c8
 80089fc:	080191d4 	.word	0x080191d4
 8008a00:	080191dc 	.word	0x080191dc
 8008a04:	200005f0 	.word	0x200005f0
 8008a08:	200005c8 	.word	0x200005c8
 8008a0c:	080191e4 	.word	0x080191e4
 8008a10:	080191f0 	.word	0x080191f0
 8008a14:	080191fc 	.word	0x080191fc
 8008a18:	08019200 	.word	0x08019200
 8008a1c:	20017d20 	.word	0x20017d20
 8008a20:	0801920c 	.word	0x0801920c
 8008a24:	08019218 	.word	0x08019218
 8008a28:	3e99999a 	.word	0x3e99999a
 8008a2c:	20024b00 	.word	0x20024b00

	case 14:
		led.fullColor('W');
 8008a30:	2157      	movs	r1, #87	; 0x57
 8008a32:	4866      	ldr	r0, [pc, #408]	; (8008bcc <cppLoop+0x1804>)
 8008a34:	f7f9 fa62 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a38:	f7f8 fb32 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	2000      	movs	r0, #0
 8008a40:	f7f8 fb3e 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008a44:	4862      	ldr	r0, [pc, #392]	; (8008bd0 <cppLoop+0x1808>)
 8008a46:	f7f8 fb65 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f8 fb37 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008a52:	4b60      	ldr	r3, [pc, #384]	; (8008bd4 <cppLoop+0x180c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f7 fd8e 	bl	8000578 <__aeabi_f2d>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	461a      	mov	r2, r3
 8008a62:	4623      	mov	r3, r4
 8008a64:	485c      	ldr	r0, [pc, #368]	; (8008bd8 <cppLoop+0x1810>)
 8008a66:	f7f8 fb55 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a6a:	485c      	ldr	r0, [pc, #368]	; (8008bdc <cppLoop+0x1814>)
 8008a6c:	f7f9 f9e2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	bf0c      	ite	eq
 8008a76:	2301      	moveq	r3, #1
 8008a78:	2300      	movne	r3, #0
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 809a 	beq.w	8008bb6 <cppLoop+0x17ee>
			HAL_Delay(500);
 8008a82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a86:	f000 f9b7 	bl	8008df8 <HAL_Delay>

			led.LR(1, -1);
 8008a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8e:	2101      	movs	r1, #1
 8008a90:	484e      	ldr	r0, [pc, #312]	; (8008bcc <cppLoop+0x1804>)
 8008a92:	f7f9 faef 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008a96:	2102      	movs	r1, #2
 8008a98:	4851      	ldr	r0, [pc, #324]	; (8008be0 <cppLoop+0x1818>)
 8008a9a:	f7fb fa67 	bl	8003f6c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008a9e:	4b4d      	ldr	r3, [pc, #308]	; (8008bd4 <cppLoop+0x180c>)
 8008aa0:	edd3 7a00 	vldr	s15, [r3]
 8008aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8008aa8:	484d      	ldr	r0, [pc, #308]	; (8008be0 <cppLoop+0x1818>)
 8008aaa:	f7fa feea 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008aae:	4b49      	ldr	r3, [pc, #292]	; (8008bd4 <cppLoop+0x180c>)
 8008ab0:	edd3 7a00 	vldr	s15, [r3]
 8008ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab8:	4849      	ldr	r0, [pc, #292]	; (8008be0 <cppLoop+0x1818>)
 8008aba:	f7fa fef1 	bl	80038a0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008abe:	4848      	ldr	r0, [pc, #288]	; (8008be0 <cppLoop+0x1818>)
 8008ac0:	f7fa fabc 	bl	800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008ac4:	4846      	ldr	r0, [pc, #280]	; (8008be0 <cppLoop+0x1818>)
 8008ac6:	f7fb f953 	bl	8003d70 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	2100      	movs	r1, #0
 8008ad0:	483e      	ldr	r0, [pc, #248]	; (8008bcc <cppLoop+0x1804>)
 8008ad2:	f7f9 facf 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008ad6:	e06e      	b.n	8008bb6 <cppLoop+0x17ee>

	case 15:
		led.fullColor('W');
 8008ad8:	2157      	movs	r1, #87	; 0x57
 8008ada:	483c      	ldr	r0, [pc, #240]	; (8008bcc <cppLoop+0x1804>)
 8008adc:	f7f9 fa0e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ae0:	f7f8 fade 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f7f8 faea 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008aec:	483d      	ldr	r0, [pc, #244]	; (8008be4 <cppLoop+0x181c>)
 8008aee:	f7f8 fb11 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008af2:	2101      	movs	r1, #1
 8008af4:	2000      	movs	r0, #0
 8008af6:	f7f8 fae3 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008afa:	4b3b      	ldr	r3, [pc, #236]	; (8008be8 <cppLoop+0x1820>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f7 fd3a 	bl	8000578 <__aeabi_f2d>
 8008b04:	4603      	mov	r3, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4623      	mov	r3, r4
 8008b0c:	4832      	ldr	r0, [pc, #200]	; (8008bd8 <cppLoop+0x1810>)
 8008b0e:	f7f8 fb01 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008b12:	4832      	ldr	r0, [pc, #200]	; (8008bdc <cppLoop+0x1814>)
 8008b14:	f7f9 f98e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	bf0c      	ite	eq
 8008b1e:	2301      	moveq	r3, #1
 8008b20:	2300      	movne	r3, #0
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d048      	beq.n	8008bba <cppLoop+0x17f2>
			HAL_Delay(500);
 8008b28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b2c:	f000 f964 	bl	8008df8 <HAL_Delay>

			led.LR(1, -1);
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	2101      	movs	r1, #1
 8008b36:	4825      	ldr	r0, [pc, #148]	; (8008bcc <cppLoop+0x1804>)
 8008b38:	f7f9 fa9c 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4828      	ldr	r0, [pc, #160]	; (8008be0 <cppLoop+0x1818>)
 8008b40:	f7fb fa14 	bl	8003f6c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008b44:	4b28      	ldr	r3, [pc, #160]	; (8008be8 <cppLoop+0x1820>)
 8008b46:	edd3 7a00 	vldr	s15, [r3]
 8008b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b4e:	4824      	ldr	r0, [pc, #144]	; (8008be0 <cppLoop+0x1818>)
 8008b50:	f7fa fe97 	bl	8003882 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008b54:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <cppLoop+0x1820>)
 8008b56:	edd3 7a00 	vldr	s15, [r3]
 8008b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b5e:	4820      	ldr	r0, [pc, #128]	; (8008be0 <cppLoop+0x1818>)
 8008b60:	f7fa fe9e 	bl	80038a0 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008b64:	481e      	ldr	r0, [pc, #120]	; (8008be0 <cppLoop+0x1818>)
 8008b66:	f7fa fa69 	bl	800303c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008b6a:	481d      	ldr	r0, [pc, #116]	; (8008be0 <cppLoop+0x1818>)
 8008b6c:	f7fb f900 	bl	8003d70 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008b70:	f04f 32ff 	mov.w	r2, #4294967295
 8008b74:	2100      	movs	r1, #0
 8008b76:	4815      	ldr	r0, [pc, #84]	; (8008bcc <cppLoop+0x1804>)
 8008b78:	f7f9 fa7c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008b7c:	e01d      	b.n	8008bba <cppLoop+0x17f2>

	default:
		break;
 8008b7e:	bf00      	nop
 8008b80:	e01c      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b82:	bf00      	nop
 8008b84:	e01a      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b86:	bf00      	nop
 8008b88:	e018      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b8a:	bf00      	nop
 8008b8c:	e016      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b8e:	bf00      	nop
 8008b90:	e014      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b92:	bf00      	nop
 8008b94:	e012      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b96:	bf00      	nop
 8008b98:	e010      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b9a:	bf00      	nop
 8008b9c:	e00e      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008b9e:	bf00      	nop
 8008ba0:	e00c      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008ba2:	bf00      	nop
 8008ba4:	e00a      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008ba6:	bf00      	nop
 8008ba8:	e008      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008baa:	bf00      	nop
 8008bac:	e006      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008bae:	bf00      	nop
 8008bb0:	e004      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008bb2:	bf00      	nop
 8008bb4:	e002      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008bb6:	bf00      	nop
 8008bb8:	e000      	b.n	8008bbc <cppLoop+0x17f4>
		break;
 8008bba:	bf00      	nop

	}

	HAL_Delay(30);
 8008bbc:	201e      	movs	r0, #30
 8008bbe:	f000 f91b 	bl	8008df8 <HAL_Delay>

}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200005cc 	.word	0x200005cc
 8008bd0:	08019220 	.word	0x08019220
 8008bd4:	2003c46c 	.word	0x2003c46c
 8008bd8:	080190e8 	.word	0x080190e8
 8008bdc:	200005c0 	.word	0x200005c0
 8008be0:	20017da0 	.word	0x20017da0
 8008be4:	0801922c 	.word	0x0801922c
 8008be8:	2003c464 	.word	0x2003c464

08008bec <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af06      	add	r7, sp, #24
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d13d      	bne.n	8008c78 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d138      	bne.n	8008c78 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008c06:	481e      	ldr	r0, [pc, #120]	; (8008c80 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008c08:	f7f9 fa6c 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008c0c:	481d      	ldr	r0, [pc, #116]	; (8008c84 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008c0e:	f7fc f95b 	bl	8004ec8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8008c12:	481d      	ldr	r0, [pc, #116]	; (8008c88 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008c14:	f7f9 f902 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008c18:	481c      	ldr	r0, [pc, #112]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c1a:	f7fb fd80 	bl	800471e <_ZN5MotorC1Ev>
IMU imu;
 8008c1e:	481c      	ldr	r0, [pc, #112]	; (8008c90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c20:	f7f8 ff08 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008c24:	481b      	ldr	r0, [pc, #108]	; (8008c94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c26:	f7fb fad5 	bl	80041d4 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008c2a:	481b      	ldr	r0, [pc, #108]	; (8008c98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c2c:	f7f8 fa92 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8008c30:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c32:	4a19      	ldr	r2, [pc, #100]	; (8008c98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c34:	4915      	ldr	r1, [pc, #84]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c36:	4819      	ldr	r0, [pc, #100]	; (8008c9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c38:	f7fc fb9a 	bl	8005370 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c3e:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c40:	4915      	ldr	r1, [pc, #84]	; (8008c98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c42:	4817      	ldr	r0, [pc, #92]	; (8008ca0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008c44:	f7fb fe50 	bl	80048e8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008c48:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008c5e:	4a08      	ldr	r2, [pc, #32]	; (8008c80 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008c60:	490a      	ldr	r1, [pc, #40]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c62:	4810      	ldr	r0, [pc, #64]	; (8008ca4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008c64:	f7f9 fd6c 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008c68:	4a08      	ldr	r2, [pc, #32]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008c6a:	490a      	ldr	r1, [pc, #40]	; (8008c94 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008c6c:	480e      	ldr	r0, [pc, #56]	; (8008ca8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008c6e:	f7fc fa7b 	bl	8005168 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008c72:	480e      	ldr	r0, [pc, #56]	; (8008cac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008c74:	f7fb ffba 	bl	8004bec <_ZN13PathFollowingC1Ev>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200002c0 	.word	0x200002c0
 8008c84:	200005b8 	.word	0x200005b8
 8008c88:	200005c0 	.word	0x200005c0
 8008c8c:	200005c8 	.word	0x200005c8
 8008c90:	200005dc 	.word	0x200005dc
 8008c94:	200005f0 	.word	0x200005f0
 8008c98:	20017d00 	.word	0x20017d00
 8008c9c:	20017d20 	.word	0x20017d20
 8008ca0:	20017d60 	.word	0x20017d60
 8008ca4:	20017da0 	.word	0x20017da0
 8008ca8:	20024b00 	.word	0x20024b00
 8008cac:	20024d10 	.word	0x20024d10

08008cb0 <_GLOBAL__sub_I_line_sensor>:
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f7ff ff97 	bl	8008bec <_Z41__static_initialization_and_destruction_0ii>
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008cc6:	e003      	b.n	8008cd0 <LoopCopyDataInit>

08008cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008cce:	3104      	adds	r1, #4

08008cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008cd0:	480b      	ldr	r0, [pc, #44]	; (8008d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008cd8:	d3f6      	bcc.n	8008cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8008cda:	4a0b      	ldr	r2, [pc, #44]	; (8008d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008cdc:	e002      	b.n	8008ce4 <LoopFillZerobss>

08008cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008ce0:	f842 3b04 	str.w	r3, [r2], #4

08008ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008ce4:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008ce8:	d3f9      	bcc.n	8008cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008cea:	f7fe fa4b 	bl	8007184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008cee:	f00b fdd3 	bl	8014898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cf2:	f7fc fd85 	bl	8005800 <main>
  bx  lr    
 8008cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008cf8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008cfc:	08019828 	.word	0x08019828
  ldr  r0, =_sdata
 8008d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d04:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008d08:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008d0c:	20040e70 	.word	0x20040e70

08008d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d10:	e7fe      	b.n	8008d10 <ADC_IRQHandler>
	...

08008d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d18:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <HAL_Init+0x40>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <HAL_Init+0x40>)
 8008d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <HAL_Init+0x40>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <HAL_Init+0x40>)
 8008d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d30:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <HAL_Init+0x40>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a07      	ldr	r2, [pc, #28]	; (8008d54 <HAL_Init+0x40>)
 8008d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d3c:	2003      	movs	r0, #3
 8008d3e:	f000 fd51 	bl	80097e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d42:	2000      	movs	r0, #0
 8008d44:	f000 f808 	bl	8008d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d48:	f7fd fc6c 	bl	8006624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	40023c00 	.word	0x40023c00

08008d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d60:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_InitTick+0x54>)
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <HAL_InitTick+0x58>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fd69 	bl	800984e <HAL_SYSTICK_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e00e      	b.n	8008da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b0f      	cmp	r3, #15
 8008d8a:	d80a      	bhi.n	8008da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	f04f 30ff 	mov.w	r0, #4294967295
 8008d94:	f000 fd31 	bl	80097fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d98:	4a06      	ldr	r2, [pc, #24]	; (8008db4 <HAL_InitTick+0x5c>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e000      	b.n	8008da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20000000 	.word	0x20000000
 8008db0:	20000008 	.word	0x20000008
 8008db4:	20000004 	.word	0x20000004

08008db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <HAL_IncTick+0x20>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_IncTick+0x24>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	4a04      	ldr	r2, [pc, #16]	; (8008ddc <HAL_IncTick+0x24>)
 8008dca:	6013      	str	r3, [r2, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000008 	.word	0x20000008
 8008ddc:	2003edf8 	.word	0x2003edf8

08008de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  return uwTick;
 8008de4:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <HAL_GetTick+0x14>)
 8008de6:	681b      	ldr	r3, [r3, #0]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	2003edf8 	.word	0x2003edf8

08008df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e00:	f7ff ffee 	bl	8008de0 <HAL_GetTick>
 8008e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e10:	d005      	beq.n	8008e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e12:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <HAL_Delay+0x40>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e1e:	bf00      	nop
 8008e20:	f7ff ffde 	bl	8008de0 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d8f7      	bhi.n	8008e20 <HAL_Delay+0x28>
  {
  }
}
 8008e30:	bf00      	nop
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000008 	.word	0x20000008

08008e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e033      	b.n	8008eba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fd fc0a 	bl	8006674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f003 0310 	and.w	r3, r3, #16
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d118      	bne.n	8008eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e82:	f023 0302 	bic.w	r3, r3, #2
 8008e86:	f043 0202 	orr.w	r2, r3, #2
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa5a 	bl	8009348 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0201 	orr.w	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8008eaa:	e001      	b.n	8008eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <HAL_ADC_Start_DMA+0x1e>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	e0cc      	b.n	800907c <HAL_ADC_Start_DMA+0x1b8>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d018      	beq.n	8008f2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0201 	orr.w	r2, r2, #1
 8008f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f08:	4b5e      	ldr	r3, [pc, #376]	; (8009084 <HAL_ADC_Start_DMA+0x1c0>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a5e      	ldr	r2, [pc, #376]	; (8009088 <HAL_ADC_Start_DMA+0x1c4>)
 8008f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f12:	0c9a      	lsrs	r2, r3, #18
 8008f14:	4613      	mov	r3, r2
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	4413      	add	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f1c:	e002      	b.n	8008f24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1f9      	bne.n	8008f1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 80a0 	bne.w	800907a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f42:	f023 0301 	bic.w	r3, r3, #1
 8008f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f78:	d106      	bne.n	8008f88 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	f023 0206 	bic.w	r2, r3, #6
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	645a      	str	r2, [r3, #68]	; 0x44
 8008f86:	e002      	b.n	8008f8e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f96:	4b3d      	ldr	r3, [pc, #244]	; (800908c <HAL_ADC_Start_DMA+0x1c8>)
 8008f98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	4a3c      	ldr	r2, [pc, #240]	; (8009090 <HAL_ADC_Start_DMA+0x1cc>)
 8008fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	4a3b      	ldr	r2, [pc, #236]	; (8009094 <HAL_ADC_Start_DMA+0x1d0>)
 8008fa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	4a3a      	ldr	r2, [pc, #232]	; (8009098 <HAL_ADC_Start_DMA+0x1d4>)
 8008fb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008fba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	334c      	adds	r3, #76	; 0x4c
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f000 fcea 	bl	80099c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 031f 	and.w	r3, r3, #31
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d12a      	bne.n	8009052 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a26      	ldr	r2, [pc, #152]	; (800909c <HAL_ADC_Start_DMA+0x1d8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d015      	beq.n	8009032 <HAL_ADC_Start_DMA+0x16e>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a25      	ldr	r2, [pc, #148]	; (80090a0 <HAL_ADC_Start_DMA+0x1dc>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d105      	bne.n	800901c <HAL_ADC_Start_DMA+0x158>
 8009010:	4b1e      	ldr	r3, [pc, #120]	; (800908c <HAL_ADC_Start_DMA+0x1c8>)
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f003 031f 	and.w	r3, r3, #31
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a20      	ldr	r2, [pc, #128]	; (80090a4 <HAL_ADC_Start_DMA+0x1e0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d129      	bne.n	800907a <HAL_ADC_Start_DMA+0x1b6>
 8009026:	4b19      	ldr	r3, [pc, #100]	; (800908c <HAL_ADC_Start_DMA+0x1c8>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	2b0f      	cmp	r3, #15
 8009030:	d823      	bhi.n	800907a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d11c      	bne.n	800907a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800904e:	609a      	str	r2, [r3, #8]
 8009050:	e013      	b.n	800907a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a11      	ldr	r2, [pc, #68]	; (800909c <HAL_ADC_Start_DMA+0x1d8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d10e      	bne.n	800907a <HAL_ADC_Start_DMA+0x1b6>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d107      	bne.n	800907a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009078:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	20000000 	.word	0x20000000
 8009088:	431bde83 	.word	0x431bde83
 800908c:	40012300 	.word	0x40012300
 8009090:	08009541 	.word	0x08009541
 8009094:	080095fb 	.word	0x080095fb
 8009098:	08009617 	.word	0x08009617
 800909c:	40012000 	.word	0x40012000
 80090a0:	40012100 	.word	0x40012100
 80090a4:	40012200 	.word	0x40012200

080090a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_ADC_ConfigChannel+0x1c>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e113      	b.n	8009328 <HAL_ADC_ConfigChannel+0x244>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b09      	cmp	r3, #9
 800910e:	d925      	bls.n	800915c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68d9      	ldr	r1, [r3, #12]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	3b1e      	subs	r3, #30
 8009126:	2207      	movs	r2, #7
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	43da      	mvns	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	400a      	ands	r2, r1
 8009134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68d9      	ldr	r1, [r3, #12]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	4618      	mov	r0, r3
 8009148:	4603      	mov	r3, r0
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	4403      	add	r3, r0
 800914e:	3b1e      	subs	r3, #30
 8009150:	409a      	lsls	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	e022      	b.n	80091a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6919      	ldr	r1, [r3, #16]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b29b      	uxth	r3, r3
 8009168:	461a      	mov	r2, r3
 800916a:	4613      	mov	r3, r2
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4413      	add	r3, r2
 8009170:	2207      	movs	r2, #7
 8009172:	fa02 f303 	lsl.w	r3, r2, r3
 8009176:	43da      	mvns	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	400a      	ands	r2, r1
 800917e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6919      	ldr	r1, [r3, #16]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	4618      	mov	r0, r3
 8009192:	4603      	mov	r3, r0
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	4403      	add	r3, r0
 8009198:	409a      	lsls	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b06      	cmp	r3, #6
 80091a8:	d824      	bhi.n	80091f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	3b05      	subs	r3, #5
 80091bc:	221f      	movs	r2, #31
 80091be:	fa02 f303 	lsl.w	r3, r2, r3
 80091c2:	43da      	mvns	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	400a      	ands	r2, r1
 80091ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	4618      	mov	r0, r3
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	3b05      	subs	r3, #5
 80091e6:	fa00 f203 	lsl.w	r2, r0, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	635a      	str	r2, [r3, #52]	; 0x34
 80091f2:	e04c      	b.n	800928e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b0c      	cmp	r3, #12
 80091fa:	d824      	bhi.n	8009246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	3b23      	subs	r3, #35	; 0x23
 800920e:	221f      	movs	r2, #31
 8009210:	fa02 f303 	lsl.w	r3, r2, r3
 8009214:	43da      	mvns	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	400a      	ands	r2, r1
 800921c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	b29b      	uxth	r3, r3
 800922a:	4618      	mov	r0, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	3b23      	subs	r3, #35	; 0x23
 8009238:	fa00 f203 	lsl.w	r2, r0, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
 8009244:	e023      	b.n	800928e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	3b41      	subs	r3, #65	; 0x41
 8009258:	221f      	movs	r2, #31
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	43da      	mvns	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	400a      	ands	r2, r1
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	4618      	mov	r0, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	3b41      	subs	r3, #65	; 0x41
 8009282:	fa00 f203 	lsl.w	r2, r0, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800928e:	4b29      	ldr	r3, [pc, #164]	; (8009334 <HAL_ADC_ConfigChannel+0x250>)
 8009290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a28      	ldr	r2, [pc, #160]	; (8009338 <HAL_ADC_ConfigChannel+0x254>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d10f      	bne.n	80092bc <HAL_ADC_ConfigChannel+0x1d8>
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b12      	cmp	r3, #18
 80092a2:	d10b      	bne.n	80092bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1d      	ldr	r2, [pc, #116]	; (8009338 <HAL_ADC_ConfigChannel+0x254>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d12b      	bne.n	800931e <HAL_ADC_ConfigChannel+0x23a>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1c      	ldr	r2, [pc, #112]	; (800933c <HAL_ADC_ConfigChannel+0x258>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <HAL_ADC_ConfigChannel+0x1f4>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b11      	cmp	r3, #17
 80092d6:	d122      	bne.n	800931e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a11      	ldr	r2, [pc, #68]	; (800933c <HAL_ADC_ConfigChannel+0x258>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d111      	bne.n	800931e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <HAL_ADC_ConfigChannel+0x25c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a11      	ldr	r2, [pc, #68]	; (8009344 <HAL_ADC_ConfigChannel+0x260>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	0c9a      	lsrs	r2, r3, #18
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009310:	e002      	b.n	8009318 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	3b01      	subs	r3, #1
 8009316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1f9      	bne.n	8009312 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	40012300 	.word	0x40012300
 8009338:	40012000 	.word	0x40012000
 800933c:	10000012 	.word	0x10000012
 8009340:	20000000 	.word	0x20000000
 8009344:	431bde83 	.word	0x431bde83

08009348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009350:	4b79      	ldr	r3, [pc, #484]	; (8009538 <ADC_Init+0x1f0>)
 8009352:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	431a      	orrs	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800937c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6859      	ldr	r1, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	021a      	lsls	r2, r3, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80093a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6859      	ldr	r1, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6899      	ldr	r1, [r3, #8]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68da      	ldr	r2, [r3, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	4a58      	ldr	r2, [pc, #352]	; (800953c <ADC_Init+0x1f4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d022      	beq.n	8009426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6899      	ldr	r1, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6899      	ldr	r1, [r3, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	609a      	str	r2, [r3, #8]
 8009424:	e00f      	b.n	8009446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689a      	ldr	r2, [r3, #8]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0202 	bic.w	r2, r2, #2
 8009454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6899      	ldr	r1, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7e1b      	ldrb	r3, [r3, #24]
 8009460:	005a      	lsls	r2, r3, #1
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01b      	beq.n	80094ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	3b01      	subs	r3, #1
 80094a0:	035a      	lsls	r2, r3, #13
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
 80094aa:	e007      	b.n	80094bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	051a      	lsls	r2, r3, #20
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6899      	ldr	r1, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094fe:	025a      	lsls	r2, r3, #9
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6899      	ldr	r1, [r3, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	029a      	lsls	r2, r3, #10
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	609a      	str	r2, [r3, #8]
}
 800952c:	bf00      	nop
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	40012300 	.word	0x40012300
 800953c:	0f000001 	.word	0x0f000001

08009540 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009556:	2b00      	cmp	r3, #0
 8009558:	d13c      	bne.n	80095d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d12b      	bne.n	80095cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009578:	2b00      	cmp	r3, #0
 800957a:	d127      	bne.n	80095cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009586:	2b00      	cmp	r3, #0
 8009588:	d006      	beq.n	8009598 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009594:	2b00      	cmp	r3, #0
 8009596:	d119      	bne.n	80095cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0220 	bic.w	r2, r2, #32
 80095a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d105      	bne.n	80095cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	f043 0201 	orr.w	r2, r3, #1
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff fd6b 	bl	80090a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095d2:	e00e      	b.n	80095f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff fd75 	bl	80090d0 <HAL_ADC_ErrorCallback>
}
 80095e6:	e004      	b.n	80095f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fd57 	bl	80090bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962e:	f043 0204 	orr.w	r2, r3, #4
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff fd4a 	bl	80090d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <__NVIC_SetPriorityGrouping+0x44>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009660:	4013      	ands	r3, r2
 8009662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800966c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009676:	4a04      	ldr	r2, [pc, #16]	; (8009688 <__NVIC_SetPriorityGrouping+0x44>)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	60d3      	str	r3, [r2, #12]
}
 800967c:	bf00      	nop
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	e000ed00 	.word	0xe000ed00

0800968c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <__NVIC_GetPriorityGrouping+0x18>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	0a1b      	lsrs	r3, r3, #8
 8009696:	f003 0307 	and.w	r3, r3, #7
}
 800969a:	4618      	mov	r0, r3
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	e000ed00 	.word	0xe000ed00

080096a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	db0b      	blt.n	80096d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	f003 021f 	and.w	r2, r3, #31
 80096c0:	4907      	ldr	r1, [pc, #28]	; (80096e0 <__NVIC_EnableIRQ+0x38>)
 80096c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c6:	095b      	lsrs	r3, r3, #5
 80096c8:	2001      	movs	r0, #1
 80096ca:	fa00 f202 	lsl.w	r2, r0, r2
 80096ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	e000e100 	.word	0xe000e100

080096e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	6039      	str	r1, [r7, #0]
 80096ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	db0a      	blt.n	800970e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	490c      	ldr	r1, [pc, #48]	; (8009730 <__NVIC_SetPriority+0x4c>)
 80096fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009702:	0112      	lsls	r2, r2, #4
 8009704:	b2d2      	uxtb	r2, r2
 8009706:	440b      	add	r3, r1
 8009708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800970c:	e00a      	b.n	8009724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	b2da      	uxtb	r2, r3
 8009712:	4908      	ldr	r1, [pc, #32]	; (8009734 <__NVIC_SetPriority+0x50>)
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	3b04      	subs	r3, #4
 800971c:	0112      	lsls	r2, r2, #4
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	440b      	add	r3, r1
 8009722:	761a      	strb	r2, [r3, #24]
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	e000e100 	.word	0xe000e100
 8009734:	e000ed00 	.word	0xe000ed00

08009738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009738:	b480      	push	{r7}
 800973a:	b089      	sub	sp, #36	; 0x24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	f1c3 0307 	rsb	r3, r3, #7
 8009752:	2b04      	cmp	r3, #4
 8009754:	bf28      	it	cs
 8009756:	2304      	movcs	r3, #4
 8009758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	3304      	adds	r3, #4
 800975e:	2b06      	cmp	r3, #6
 8009760:	d902      	bls.n	8009768 <NVIC_EncodePriority+0x30>
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	3b03      	subs	r3, #3
 8009766:	e000      	b.n	800976a <NVIC_EncodePriority+0x32>
 8009768:	2300      	movs	r3, #0
 800976a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	fa02 f303 	lsl.w	r3, r2, r3
 8009776:	43da      	mvns	r2, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	401a      	ands	r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009780:	f04f 31ff 	mov.w	r1, #4294967295
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	fa01 f303 	lsl.w	r3, r1, r3
 800978a:	43d9      	mvns	r1, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009790:	4313      	orrs	r3, r2
         );
}
 8009792:	4618      	mov	r0, r3
 8009794:	3724      	adds	r7, #36	; 0x24
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
	...

080097a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097b0:	d301      	bcc.n	80097b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80097b2:	2301      	movs	r3, #1
 80097b4:	e00f      	b.n	80097d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80097b6:	4a0a      	ldr	r2, [pc, #40]	; (80097e0 <SysTick_Config+0x40>)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80097be:	210f      	movs	r1, #15
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	f7ff ff8e 	bl	80096e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <SysTick_Config+0x40>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <SysTick_Config+0x40>)
 80097d0:	2207      	movs	r2, #7
 80097d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	e000e010 	.word	0xe000e010

080097e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ff29 	bl	8009644 <__NVIC_SetPriorityGrouping>
}
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	4603      	mov	r3, r0
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800980c:	f7ff ff3e 	bl	800968c <__NVIC_GetPriorityGrouping>
 8009810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	6978      	ldr	r0, [r7, #20]
 8009818:	f7ff ff8e 	bl	8009738 <NVIC_EncodePriority>
 800981c:	4602      	mov	r2, r0
 800981e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff ff5d 	bl	80096e4 <__NVIC_SetPriority>
}
 800982a:	bf00      	nop
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	4603      	mov	r3, r0
 800983a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800983c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff ff31 	bl	80096a8 <__NVIC_EnableIRQ>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ffa2 	bl	80097a0 <SysTick_Config>
 800985c:	4603      	mov	r3, r0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009874:	f7ff fab4 	bl	8008de0 <HAL_GetTick>
 8009878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d101      	bne.n	8009884 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e099      	b.n	80099b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0201 	bic.w	r2, r2, #1
 80098a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098a4:	e00f      	b.n	80098c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80098a6:	f7ff fa9b 	bl	8008de0 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d908      	bls.n	80098c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2203      	movs	r2, #3
 80098be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e078      	b.n	80099b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e8      	bne.n	80098a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	4b38      	ldr	r3, [pc, #224]	; (80099c0 <HAL_DMA_Init+0x158>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80098f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800990a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b04      	cmp	r3, #4
 800991e:	d107      	bne.n	8009930 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	4313      	orrs	r3, r2
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f023 0307 	bic.w	r3, r3, #7
 8009946:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b04      	cmp	r3, #4
 8009958:	d117      	bne.n	800998a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	4313      	orrs	r3, r2
 8009962:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00e      	beq.n	800998a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa9d 	bl	8009eac <DMA_CheckFifoParam>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d008      	beq.n	800998a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2240      	movs	r2, #64	; 0x40
 800997c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009986:	2301      	movs	r3, #1
 8009988:	e016      	b.n	80099b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa54 	bl	8009e40 <DMA_CalcBaseAndBitshift>
 8009998:	4603      	mov	r3, r0
 800999a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a0:	223f      	movs	r2, #63	; 0x3f
 80099a2:	409a      	lsls	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	f010803f 	.word	0xf010803f

080099c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_DMA_Start_IT+0x26>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e040      	b.n	8009a6c <HAL_DMA_Start_IT+0xa8>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d12f      	bne.n	8009a5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	68b9      	ldr	r1, [r7, #8]
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f9e6 	bl	8009de4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a1c:	223f      	movs	r2, #63	; 0x3f
 8009a1e:	409a      	lsls	r2, r3
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0216 	orr.w	r2, r2, #22
 8009a32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d007      	beq.n	8009a4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0208 	orr.w	r2, r2, #8
 8009a4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e005      	b.n	8009a6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009a66:	2302      	movs	r3, #2
 8009a68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d004      	beq.n	8009a92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2280      	movs	r2, #128	; 0x80
 8009a8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e00c      	b.n	8009aac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2205      	movs	r2, #5
 8009a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0201 	bic.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009ac4:	4b92      	ldr	r3, [pc, #584]	; (8009d10 <HAL_DMA_IRQHandler+0x258>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a92      	ldr	r2, [pc, #584]	; (8009d14 <HAL_DMA_IRQHandler+0x25c>)
 8009aca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ace:	0a9b      	lsrs	r3, r3, #10
 8009ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	409a      	lsls	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d01a      	beq.n	8009b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d013      	beq.n	8009b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 0204 	bic.w	r2, r2, #4
 8009b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b10:	2208      	movs	r2, #8
 8009b12:	409a      	lsls	r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1c:	f043 0201 	orr.w	r2, r3, #1
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b28:	2201      	movs	r2, #1
 8009b2a:	409a      	lsls	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4013      	ands	r3, r2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d012      	beq.n	8009b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b46:	2201      	movs	r2, #1
 8009b48:	409a      	lsls	r2, r3
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b52:	f043 0202 	orr.w	r2, r3, #2
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b5e:	2204      	movs	r2, #4
 8009b60:	409a      	lsls	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4013      	ands	r3, r2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d012      	beq.n	8009b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	409a      	lsls	r2, r3
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b88:	f043 0204 	orr.w	r2, r3, #4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b94:	2210      	movs	r2, #16
 8009b96:	409a      	lsls	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d043      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0308 	and.w	r3, r3, #8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d03c      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb2:	2210      	movs	r2, #16
 8009bb4:	409a      	lsls	r2, r3
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d018      	beq.n	8009bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d108      	bne.n	8009be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d024      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
 8009be6:	e01f      	b.n	8009c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01b      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
 8009bf8:	e016      	b.n	8009c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d107      	bne.n	8009c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0208 	bic.w	r2, r2, #8
 8009c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	409a      	lsls	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4013      	ands	r3, r2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 808e 	beq.w	8009d56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 8086 	beq.w	8009d56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c4e:	2220      	movs	r2, #32
 8009c50:	409a      	lsls	r2, r3
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	d136      	bne.n	8009cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0216 	bic.w	r2, r2, #22
 8009c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695a      	ldr	r2, [r3, #20]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d103      	bne.n	8009c92 <HAL_DMA_IRQHandler+0x1da>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0208 	bic.w	r2, r2, #8
 8009ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca6:	223f      	movs	r2, #63	; 0x3f
 8009ca8:	409a      	lsls	r2, r3
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d07d      	beq.n	8009dc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	4798      	blx	r3
        }
        return;
 8009cce:	e078      	b.n	8009dc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01c      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d108      	bne.n	8009cfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d030      	beq.n	8009d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
 8009cfc:	e02b      	b.n	8009d56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d027      	beq.n	8009d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
 8009d0e:	e022      	b.n	8009d56 <HAL_DMA_IRQHandler+0x29e>
 8009d10:	20000000 	.word	0x20000000
 8009d14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10f      	bne.n	8009d46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 0210 	bic.w	r2, r2, #16
 8009d34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d032      	beq.n	8009dc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d022      	beq.n	8009db0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2205      	movs	r2, #5
 8009d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60bb      	str	r3, [r7, #8]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d307      	bcc.n	8009d9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0301 	and.w	r3, r3, #1
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f2      	bne.n	8009d82 <HAL_DMA_IRQHandler+0x2ca>
 8009d9c:	e000      	b.n	8009da0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009d9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d005      	beq.n	8009dc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	4798      	blx	r3
 8009dc0:	e000      	b.n	8009dc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009dc2:	bf00      	nop
    }
  }
}
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop

08009dcc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	2b40      	cmp	r3, #64	; 0x40
 8009e10:	d108      	bne.n	8009e24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009e22:	e007      	b.n	8009e34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	60da      	str	r2, [r3, #12]
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	3b10      	subs	r3, #16
 8009e50:	4a14      	ldr	r2, [pc, #80]	; (8009ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8009e52:	fba2 2303 	umull	r2, r3, r2, r3
 8009e56:	091b      	lsrs	r3, r3, #4
 8009e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009e5a:	4a13      	ldr	r2, [pc, #76]	; (8009ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d909      	bls.n	8009e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009e76:	f023 0303 	bic.w	r3, r3, #3
 8009e7a:	1d1a      	adds	r2, r3, #4
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8009e80:	e007      	b.n	8009e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009e8a:	f023 0303 	bic.w	r3, r3, #3
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	aaaaaaab 	.word	0xaaaaaaab
 8009ea8:	0801926c 	.word	0x0801926c

08009eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d11f      	bne.n	8009f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d855      	bhi.n	8009f78 <DMA_CheckFifoParam+0xcc>
 8009ecc:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <DMA_CheckFifoParam+0x28>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009ef7 	.word	0x08009ef7
 8009edc:	08009ee5 	.word	0x08009ee5
 8009ee0:	08009f79 	.word	0x08009f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d045      	beq.n	8009f7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ef4:	e042      	b.n	8009f7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009efe:	d13f      	bne.n	8009f80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f04:	e03c      	b.n	8009f80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0e:	d121      	bne.n	8009f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d836      	bhi.n	8009f84 <DMA_CheckFifoParam+0xd8>
 8009f16:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <DMA_CheckFifoParam+0x70>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f2d 	.word	0x08009f2d
 8009f20:	08009f33 	.word	0x08009f33
 8009f24:	08009f2d 	.word	0x08009f2d
 8009f28:	08009f45 	.word	0x08009f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f30:	e02f      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d024      	beq.n	8009f88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f42:	e021      	b.n	8009f88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009f4c:	d11e      	bne.n	8009f8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009f52:	e01b      	b.n	8009f8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d902      	bls.n	8009f60 <DMA_CheckFifoParam+0xb4>
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d003      	beq.n	8009f66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009f5e:	e018      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
      break;
 8009f64:	e015      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	73fb      	strb	r3, [r7, #15]
      break;
 8009f76:	e00b      	b.n	8009f90 <DMA_CheckFifoParam+0xe4>
      break;
 8009f78:	bf00      	nop
 8009f7a:	e00a      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      break;
 8009f7c:	bf00      	nop
 8009f7e:	e008      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      break;
 8009f80:	bf00      	nop
 8009f82:	e006      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      break;
 8009f84:	bf00      	nop
 8009f86:	e004      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      break;
 8009f88:	bf00      	nop
 8009f8a:	e002      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      break;   
 8009f8c:	bf00      	nop
 8009f8e:	e000      	b.n	8009f92 <DMA_CheckFifoParam+0xe6>
      break;
 8009f90:	bf00      	nop
    }
  } 
  
  return status; 
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b089      	sub	sp, #36	; 0x24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	e177      	b.n	800a2ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	f040 8166 	bne.w	800a2a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d00b      	beq.n	8009ffa <HAL_GPIO_Init+0x5a>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d007      	beq.n	8009ffa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009fee:	2b11      	cmp	r3, #17
 8009ff0:	d003      	beq.n	8009ffa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b12      	cmp	r3, #18
 8009ff8:	d130      	bne.n	800a05c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	2203      	movs	r2, #3
 800a006:	fa02 f303 	lsl.w	r3, r2, r3
 800a00a:	43db      	mvns	r3, r3
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	4013      	ands	r3, r2
 800a010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	4313      	orrs	r3, r2
 800a022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a030:	2201      	movs	r2, #1
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	43db      	mvns	r3, r3
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	4013      	ands	r3, r2
 800a03e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	091b      	lsrs	r3, r3, #4
 800a046:	f003 0201 	and.w	r2, r3, #1
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	fa02 f303 	lsl.w	r3, r2, r3
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	4313      	orrs	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	2203      	movs	r2, #3
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
 800a06c:	43db      	mvns	r3, r3
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	4013      	ands	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	fa02 f303 	lsl.w	r3, r2, r3
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	4313      	orrs	r3, r2
 800a084:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d003      	beq.n	800a09c <HAL_GPIO_Init+0xfc>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2b12      	cmp	r3, #18
 800a09a:	d123      	bne.n	800a0e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	08da      	lsrs	r2, r3, #3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3208      	adds	r2, #8
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	f003 0307 	and.w	r3, r3, #7
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	220f      	movs	r2, #15
 800a0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	08da      	lsrs	r2, r3, #3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	3208      	adds	r2, #8
 800a0de:	69b9      	ldr	r1, [r7, #24]
 800a0e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	69ba      	ldr	r2, [r7, #24]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f003 0203 	and.w	r2, r3, #3
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	fa02 f303 	lsl.w	r3, r2, r3
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	4313      	orrs	r3, r2
 800a110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 80c0 	beq.w	800a2a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a126:	2300      	movs	r3, #0
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	4b65      	ldr	r3, [pc, #404]	; (800a2c0 <HAL_GPIO_Init+0x320>)
 800a12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12e:	4a64      	ldr	r2, [pc, #400]	; (800a2c0 <HAL_GPIO_Init+0x320>)
 800a130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a134:	6453      	str	r3, [r2, #68]	; 0x44
 800a136:	4b62      	ldr	r3, [pc, #392]	; (800a2c0 <HAL_GPIO_Init+0x320>)
 800a138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a142:	4a60      	ldr	r2, [pc, #384]	; (800a2c4 <HAL_GPIO_Init+0x324>)
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	089b      	lsrs	r3, r3, #2
 800a148:	3302      	adds	r3, #2
 800a14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a14e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	220f      	movs	r2, #15
 800a15a:	fa02 f303 	lsl.w	r3, r2, r3
 800a15e:	43db      	mvns	r3, r3
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	4013      	ands	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a57      	ldr	r2, [pc, #348]	; (800a2c8 <HAL_GPIO_Init+0x328>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d037      	beq.n	800a1de <HAL_GPIO_Init+0x23e>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a56      	ldr	r2, [pc, #344]	; (800a2cc <HAL_GPIO_Init+0x32c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d031      	beq.n	800a1da <HAL_GPIO_Init+0x23a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a55      	ldr	r2, [pc, #340]	; (800a2d0 <HAL_GPIO_Init+0x330>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d02b      	beq.n	800a1d6 <HAL_GPIO_Init+0x236>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a54      	ldr	r2, [pc, #336]	; (800a2d4 <HAL_GPIO_Init+0x334>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d025      	beq.n	800a1d2 <HAL_GPIO_Init+0x232>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a53      	ldr	r2, [pc, #332]	; (800a2d8 <HAL_GPIO_Init+0x338>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d01f      	beq.n	800a1ce <HAL_GPIO_Init+0x22e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a52      	ldr	r2, [pc, #328]	; (800a2dc <HAL_GPIO_Init+0x33c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d019      	beq.n	800a1ca <HAL_GPIO_Init+0x22a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a51      	ldr	r2, [pc, #324]	; (800a2e0 <HAL_GPIO_Init+0x340>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d013      	beq.n	800a1c6 <HAL_GPIO_Init+0x226>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a50      	ldr	r2, [pc, #320]	; (800a2e4 <HAL_GPIO_Init+0x344>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00d      	beq.n	800a1c2 <HAL_GPIO_Init+0x222>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a4f      	ldr	r2, [pc, #316]	; (800a2e8 <HAL_GPIO_Init+0x348>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d007      	beq.n	800a1be <HAL_GPIO_Init+0x21e>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a4e      	ldr	r2, [pc, #312]	; (800a2ec <HAL_GPIO_Init+0x34c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d101      	bne.n	800a1ba <HAL_GPIO_Init+0x21a>
 800a1b6:	2309      	movs	r3, #9
 800a1b8:	e012      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1ba:	230a      	movs	r3, #10
 800a1bc:	e010      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1be:	2308      	movs	r3, #8
 800a1c0:	e00e      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1c2:	2307      	movs	r3, #7
 800a1c4:	e00c      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1c6:	2306      	movs	r3, #6
 800a1c8:	e00a      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1ca:	2305      	movs	r3, #5
 800a1cc:	e008      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	e006      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e004      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e002      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <HAL_GPIO_Init+0x240>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	69fa      	ldr	r2, [r7, #28]
 800a1e2:	f002 0203 	and.w	r2, r2, #3
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	4093      	lsls	r3, r2
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1f0:	4934      	ldr	r1, [pc, #208]	; (800a2c4 <HAL_GPIO_Init+0x324>)
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	089b      	lsrs	r3, r3, #2
 800a1f6:	3302      	adds	r3, #2
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a1fe:	4b3c      	ldr	r3, [pc, #240]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	43db      	mvns	r3, r3
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	4013      	ands	r3, r2
 800a20c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a21a:	69ba      	ldr	r2, [r7, #24]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	4313      	orrs	r3, r2
 800a220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a222:	4a33      	ldr	r2, [pc, #204]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a228:	4b31      	ldr	r3, [pc, #196]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	43db      	mvns	r3, r3
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	4013      	ands	r3, r2
 800a236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a24c:	4a28      	ldr	r2, [pc, #160]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	43db      	mvns	r3, r3
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	4013      	ands	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a276:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a27c:	4b1c      	ldr	r3, [pc, #112]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	43db      	mvns	r3, r3
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	4013      	ands	r3, r2
 800a28a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a2a0:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <HAL_GPIO_Init+0x350>)
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	2b0f      	cmp	r3, #15
 800a2b0:	f67f ae84 	bls.w	8009fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	3724      	adds	r7, #36	; 0x24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	40023800 	.word	0x40023800
 800a2c4:	40013800 	.word	0x40013800
 800a2c8:	40020000 	.word	0x40020000
 800a2cc:	40020400 	.word	0x40020400
 800a2d0:	40020800 	.word	0x40020800
 800a2d4:	40020c00 	.word	0x40020c00
 800a2d8:	40021000 	.word	0x40021000
 800a2dc:	40021400 	.word	0x40021400
 800a2e0:	40021800 	.word	0x40021800
 800a2e4:	40021c00 	.word	0x40021c00
 800a2e8:	40022000 	.word	0x40022000
 800a2ec:	40022400 	.word	0x40022400
 800a2f0:	40013c00 	.word	0x40013c00

0800a2f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	887b      	ldrh	r3, [r7, #2]
 800a306:	4013      	ands	r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a30c:	2301      	movs	r3, #1
 800a30e:	73fb      	strb	r3, [r7, #15]
 800a310:	e001      	b.n	800a316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	807b      	strh	r3, [r7, #2]
 800a330:	4613      	mov	r3, r2
 800a332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a334:	787b      	ldrb	r3, [r7, #1]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a33a:	887a      	ldrh	r2, [r7, #2]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a340:	e003      	b.n	800a34a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a342:	887b      	ldrh	r3, [r7, #2]
 800a344:	041a      	lsls	r2, r3, #16
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	619a      	str	r2, [r3, #24]
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
	...

0800a358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e11f      	b.n	800a5aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7fc fa2a 	bl	80067d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2224      	movs	r2, #36	; 0x24
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0201 	bic.w	r2, r2, #1
 800a39a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a3bc:	f001 f96e 	bl	800b69c <HAL_RCC_GetPCLK1Freq>
 800a3c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	4a7b      	ldr	r2, [pc, #492]	; (800a5b4 <HAL_I2C_Init+0x25c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d807      	bhi.n	800a3dc <HAL_I2C_Init+0x84>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4a7a      	ldr	r2, [pc, #488]	; (800a5b8 <HAL_I2C_Init+0x260>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bf94      	ite	ls
 800a3d4:	2301      	movls	r3, #1
 800a3d6:	2300      	movhi	r3, #0
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	e006      	b.n	800a3ea <HAL_I2C_Init+0x92>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4a77      	ldr	r2, [pc, #476]	; (800a5bc <HAL_I2C_Init+0x264>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bf94      	ite	ls
 800a3e4:	2301      	movls	r3, #1
 800a3e6:	2300      	movhi	r3, #0
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e0db      	b.n	800a5aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4a72      	ldr	r2, [pc, #456]	; (800a5c0 <HAL_I2C_Init+0x268>)
 800a3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3fa:	0c9b      	lsrs	r3, r3, #18
 800a3fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4a64      	ldr	r2, [pc, #400]	; (800a5b4 <HAL_I2C_Init+0x25c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d802      	bhi.n	800a42c <HAL_I2C_Init+0xd4>
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	3301      	adds	r3, #1
 800a42a:	e009      	b.n	800a440 <HAL_I2C_Init+0xe8>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a432:	fb02 f303 	mul.w	r3, r2, r3
 800a436:	4a63      	ldr	r2, [pc, #396]	; (800a5c4 <HAL_I2C_Init+0x26c>)
 800a438:	fba2 2303 	umull	r2, r3, r2, r3
 800a43c:	099b      	lsrs	r3, r3, #6
 800a43e:	3301      	adds	r3, #1
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	6812      	ldr	r2, [r2, #0]
 800a444:	430b      	orrs	r3, r1
 800a446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a452:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	4956      	ldr	r1, [pc, #344]	; (800a5b4 <HAL_I2C_Init+0x25c>)
 800a45c:	428b      	cmp	r3, r1
 800a45e:	d80d      	bhi.n	800a47c <HAL_I2C_Init+0x124>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	1e59      	subs	r1, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a46e:	3301      	adds	r3, #1
 800a470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a474:	2b04      	cmp	r3, #4
 800a476:	bf38      	it	cc
 800a478:	2304      	movcc	r3, #4
 800a47a:	e04f      	b.n	800a51c <HAL_I2C_Init+0x1c4>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d111      	bne.n	800a4a8 <HAL_I2C_Init+0x150>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1e58      	subs	r0, r3, #1
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6859      	ldr	r1, [r3, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	440b      	add	r3, r1
 800a492:	fbb0 f3f3 	udiv	r3, r0, r3
 800a496:	3301      	adds	r3, #1
 800a498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bf0c      	ite	eq
 800a4a0:	2301      	moveq	r3, #1
 800a4a2:	2300      	movne	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	e012      	b.n	800a4ce <HAL_I2C_Init+0x176>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	1e58      	subs	r0, r3, #1
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6859      	ldr	r1, [r3, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	0099      	lsls	r1, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bf0c      	ite	eq
 800a4c8:	2301      	moveq	r3, #1
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <HAL_I2C_Init+0x17e>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e022      	b.n	800a51c <HAL_I2C_Init+0x1c4>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10e      	bne.n	800a4fc <HAL_I2C_Init+0x1a4>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1e58      	subs	r0, r3, #1
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6859      	ldr	r1, [r3, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	440b      	add	r3, r1
 800a4ec:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4fa:	e00f      	b.n	800a51c <HAL_I2C_Init+0x1c4>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	1e58      	subs	r0, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6859      	ldr	r1, [r3, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	0099      	lsls	r1, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a512:	3301      	adds	r3, #1
 800a514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	6809      	ldr	r1, [r1, #0]
 800a520:	4313      	orrs	r3, r2
 800a522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	69da      	ldr	r2, [r3, #28]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	431a      	orrs	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a54a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6911      	ldr	r1, [r2, #16]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	68d2      	ldr	r2, [r2, #12]
 800a556:	4311      	orrs	r1, r2
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	430b      	orrs	r3, r1
 800a55e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695a      	ldr	r2, [r3, #20]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	431a      	orrs	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f042 0201 	orr.w	r2, r2, #1
 800a58a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2220      	movs	r2, #32
 800a596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	000186a0 	.word	0x000186a0
 800a5b8:	001e847f 	.word	0x001e847f
 800a5bc:	003d08ff 	.word	0x003d08ff
 800a5c0:	431bde83 	.word	0x431bde83
 800a5c4:	10624dd3 	.word	0x10624dd3

0800a5c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	817b      	strh	r3, [r7, #10]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5dc:	f7fe fc00 	bl	8008de0 <HAL_GetTick>
 800a5e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	f040 80e0 	bne.w	800a7b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2319      	movs	r3, #25
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	4970      	ldr	r1, [pc, #448]	; (800a7bc <HAL_I2C_Master_Transmit+0x1f4>)
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 fc58 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a606:	2302      	movs	r3, #2
 800a608:	e0d3      	b.n	800a7b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a610:	2b01      	cmp	r3, #1
 800a612:	d101      	bne.n	800a618 <HAL_I2C_Master_Transmit+0x50>
 800a614:	2302      	movs	r3, #2
 800a616:	e0cc      	b.n	800a7b2 <HAL_I2C_Master_Transmit+0x1ea>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d007      	beq.n	800a63e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f042 0201 	orr.w	r2, r2, #1
 800a63c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a64c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2221      	movs	r2, #33	; 0x21
 800a652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2210      	movs	r2, #16
 800a65a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	893a      	ldrh	r2, [r7, #8]
 800a66e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4a50      	ldr	r2, [pc, #320]	; (800a7c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a67e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a680:	8979      	ldrh	r1, [r7, #10]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	6a3a      	ldr	r2, [r7, #32]
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 fac2 	bl	800ac10 <I2C_MasterRequestWrite>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e08d      	b.n	800a7b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a696:	2300      	movs	r3, #0
 800a698:	613b      	str	r3, [r7, #16]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a6ac:	e066      	b.n	800a77c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	6a39      	ldr	r1, [r7, #32]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 fcd2 	bl	800b05c <I2C_WaitOnTXEFlagUntilTimeout>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00d      	beq.n	800a6da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d107      	bne.n	800a6d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e06b      	b.n	800a7b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	781a      	ldrb	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	1c5a      	adds	r2, r3, #1
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a702:	3b01      	subs	r3, #1
 800a704:	b29a      	uxth	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b04      	cmp	r3, #4
 800a716:	d11b      	bne.n	800a750 <HAL_I2C_Master_Transmit+0x188>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d017      	beq.n	800a750 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	6a39      	ldr	r1, [r7, #32]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 fcc2 	bl	800b0de <I2C_WaitOnBTFFlagUntilTimeout>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00d      	beq.n	800a77c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a764:	2b04      	cmp	r3, #4
 800a766:	d107      	bne.n	800a778 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a776:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e01a      	b.n	800a7b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a780:	2b00      	cmp	r3, #0
 800a782:	d194      	bne.n	800a6ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2220      	movs	r2, #32
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e000      	b.n	800a7b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a7b0:	2302      	movs	r3, #2
  }
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	00100002 	.word	0x00100002
 800a7c0:	ffff0000 	.word	0xffff0000

0800a7c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08c      	sub	sp, #48	; 0x30
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	607a      	str	r2, [r7, #4]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	817b      	strh	r3, [r7, #10]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a7d8:	f7fe fb02 	bl	8008de0 <HAL_GetTick>
 800a7dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	f040 820b 	bne.w	800ac02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	2319      	movs	r3, #25
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	497c      	ldr	r1, [pc, #496]	; (800a9e8 <HAL_I2C_Master_Receive+0x224>)
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fb5a 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a802:	2302      	movs	r3, #2
 800a804:	e1fe      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d101      	bne.n	800a814 <HAL_I2C_Master_Receive+0x50>
 800a810:	2302      	movs	r3, #2
 800a812:	e1f7      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b01      	cmp	r3, #1
 800a828:	d007      	beq.n	800a83a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f042 0201 	orr.w	r2, r2, #1
 800a838:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a848:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2222      	movs	r2, #34	; 0x22
 800a84e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2210      	movs	r2, #16
 800a856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	893a      	ldrh	r2, [r7, #8]
 800a86a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a870:	b29a      	uxth	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	4a5c      	ldr	r2, [pc, #368]	; (800a9ec <HAL_I2C_Master_Receive+0x228>)
 800a87a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a87c:	8979      	ldrh	r1, [r7, #10]
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 fa46 	bl	800ad14 <I2C_MasterRequestRead>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e1b8      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d113      	bne.n	800a8c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a89a:	2300      	movs	r3, #0
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	623b      	str	r3, [r7, #32]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	623b      	str	r3, [r7, #32]
 800a8ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	e18c      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d11b      	bne.n	800a902 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	61fb      	str	r3, [r7, #28]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	61fb      	str	r3, [r7, #28]
 800a8ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e16c      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a906:	2b02      	cmp	r3, #2
 800a908:	d11b      	bne.n	800a942 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a918:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a92a:	2300      	movs	r3, #0
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	61bb      	str	r3, [r7, #24]
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	e14c      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a952:	2300      	movs	r3, #0
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	617b      	str	r3, [r7, #20]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a968:	e138      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a96e:	2b03      	cmp	r3, #3
 800a970:	f200 80f1 	bhi.w	800ab56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d123      	bne.n	800a9c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a97e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 fbed 	bl	800b160 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e139      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691a      	ldr	r2, [r3, #16]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	b2d2      	uxtb	r2, r2
 800a99c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9c2:	e10b      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d14e      	bne.n	800aa6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <HAL_I2C_Master_Receive+0x22c>)
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 fa6a 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d008      	beq.n	800a9f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e10e      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
 800a9e6:	bf00      	nop
 800a9e8:	00100002 	.word	0x00100002
 800a9ec:	ffff0000 	.word	0xffff0000
 800a9f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	691a      	ldr	r2, [r3, #16]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa20:	3b01      	subs	r3, #1
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	691a      	ldr	r2, [r3, #16]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	b2d2      	uxtb	r2, r2
 800aa42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	3b01      	subs	r3, #1
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa68:	e0b8      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	2200      	movs	r2, #0
 800aa72:	4966      	ldr	r1, [pc, #408]	; (800ac0c <HAL_I2C_Master_Receive+0x448>)
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f000 fa1b 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e0bf      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	3b01      	subs	r3, #1
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2200      	movs	r2, #0
 800aace:	494f      	ldr	r1, [pc, #316]	; (800ac0c <HAL_I2C_Master_Receive+0x448>)
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 f9ed 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e091      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafa:	b2d2      	uxtb	r2, r2
 800aafc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	b2d2      	uxtb	r2, r2
 800ab2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab54:	e042      	b.n	800abdc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 fb00 	bl	800b160 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e04c      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3b01      	subs	r3, #1
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	f003 0304 	and.w	r3, r3, #4
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d118      	bne.n	800abdc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	691a      	ldr	r2, [r3, #16]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc6:	3b01      	subs	r3, #1
 800abc8:	b29a      	uxth	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f47f aec2 	bne.w	800a96a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2220      	movs	r2, #32
 800abea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	e000      	b.n	800ac04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ac02:	2302      	movs	r3, #2
  }
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3728      	adds	r7, #40	; 0x28
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	00010004 	.word	0x00010004

0800ac10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	607a      	str	r2, [r7, #4]
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d006      	beq.n	800ac3a <I2C_MasterRequestWrite+0x2a>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d003      	beq.n	800ac3a <I2C_MasterRequestWrite+0x2a>
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac38:	d108      	bne.n	800ac4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e00b      	b.n	800ac64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	2b12      	cmp	r3, #18
 800ac52:	d107      	bne.n	800ac64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f91d 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00d      	beq.n	800ac98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac8a:	d103      	bne.n	800ac94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e035      	b.n	800ad04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aca0:	d108      	bne.n	800acb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aca2:	897b      	ldrh	r3, [r7, #10]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800acb0:	611a      	str	r2, [r3, #16]
 800acb2:	e01b      	b.n	800acec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800acb4:	897b      	ldrh	r3, [r7, #10]
 800acb6:	11db      	asrs	r3, r3, #7
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 0306 	and.w	r3, r3, #6
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f063 030f 	orn	r3, r3, #15
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	490e      	ldr	r1, [pc, #56]	; (800ad0c <I2C_MasterRequestWrite+0xfc>)
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f000 f943 	bl	800af5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e010      	b.n	800ad04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ace2:	897b      	ldrh	r3, [r7, #10]
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4907      	ldr	r1, [pc, #28]	; (800ad10 <I2C_MasterRequestWrite+0x100>)
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 f933 	bl	800af5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e000      	b.n	800ad04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	00010008 	.word	0x00010008
 800ad10:	00010002 	.word	0x00010002

0800ad14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	460b      	mov	r3, r1
 800ad22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b08      	cmp	r3, #8
 800ad3e:	d006      	beq.n	800ad4e <I2C_MasterRequestRead+0x3a>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d003      	beq.n	800ad4e <I2C_MasterRequestRead+0x3a>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad4c:	d108      	bne.n	800ad60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	e00b      	b.n	800ad78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	2b11      	cmp	r3, #17
 800ad66:	d107      	bne.n	800ad78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 f893 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00d      	beq.n	800adac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9e:	d103      	bne.n	800ada8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e079      	b.n	800aea0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adb4:	d108      	bne.n	800adc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800adb6:	897b      	ldrh	r3, [r7, #10]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f043 0301 	orr.w	r3, r3, #1
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	611a      	str	r2, [r3, #16]
 800adc6:	e05f      	b.n	800ae88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800adc8:	897b      	ldrh	r3, [r7, #10]
 800adca:	11db      	asrs	r3, r3, #7
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f003 0306 	and.w	r3, r3, #6
 800add2:	b2db      	uxtb	r3, r3
 800add4:	f063 030f 	orn	r3, r3, #15
 800add8:	b2da      	uxtb	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	4930      	ldr	r1, [pc, #192]	; (800aea8 <I2C_MasterRequestRead+0x194>)
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 f8b9 	bl	800af5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e054      	b.n	800aea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800adf6:	897b      	ldrh	r3, [r7, #10]
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	4929      	ldr	r1, [pc, #164]	; (800aeac <I2C_MasterRequestRead+0x198>)
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f8a9 	bl	800af5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e044      	b.n	800aea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae16:	2300      	movs	r3, #0
 800ae18:	613b      	str	r3, [r7, #16]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	613b      	str	r3, [r7, #16]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	613b      	str	r3, [r7, #16]
 800ae2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f831 	bl	800aeb0 <I2C_WaitOnFlagUntilTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00d      	beq.n	800ae70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae62:	d103      	bne.n	800ae6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e017      	b.n	800aea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ae70:	897b      	ldrh	r3, [r7, #10]
 800ae72:	11db      	asrs	r3, r3, #7
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f003 0306 	and.w	r3, r3, #6
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f063 030e 	orn	r3, r3, #14
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	4907      	ldr	r1, [pc, #28]	; (800aeac <I2C_MasterRequestRead+0x198>)
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f865 	bl	800af5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	00010008 	.word	0x00010008
 800aeac:	00010002 	.word	0x00010002

0800aeb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aec0:	e025      	b.n	800af0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec8:	d021      	beq.n	800af0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeca:	f7fd ff89 	bl	8008de0 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d302      	bcc.n	800aee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d116      	bne.n	800af0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	f043 0220 	orr.w	r2, r3, #32
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e023      	b.n	800af56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	0c1b      	lsrs	r3, r3, #16
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b01      	cmp	r3, #1
 800af16:	d10d      	bne.n	800af34 <I2C_WaitOnFlagUntilTimeout+0x84>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	43da      	mvns	r2, r3
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	4013      	ands	r3, r2
 800af24:	b29b      	uxth	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	bf0c      	ite	eq
 800af2a:	2301      	moveq	r3, #1
 800af2c:	2300      	movne	r3, #0
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	461a      	mov	r2, r3
 800af32:	e00c      	b.n	800af4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	43da      	mvns	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4013      	ands	r3, r2
 800af40:	b29b      	uxth	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	bf0c      	ite	eq
 800af46:	2301      	moveq	r3, #1
 800af48:	2300      	movne	r3, #0
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	461a      	mov	r2, r3
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	429a      	cmp	r2, r3
 800af52:	d0b6      	beq.n	800aec2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
 800af6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af6c:	e051      	b.n	800b012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af7c:	d123      	bne.n	800afc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb2:	f043 0204 	orr.w	r2, r3, #4
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e046      	b.n	800b054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afcc:	d021      	beq.n	800b012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afce:	f7fd ff07 	bl	8008de0 <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d302      	bcc.n	800afe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d116      	bne.n	800b012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2220      	movs	r2, #32
 800afee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f043 0220 	orr.w	r2, r3, #32
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	e020      	b.n	800b054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	0c1b      	lsrs	r3, r3, #16
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d10c      	bne.n	800b036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	43da      	mvns	r2, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	4013      	ands	r3, r2
 800b028:	b29b      	uxth	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	bf14      	ite	ne
 800b02e:	2301      	movne	r3, #1
 800b030:	2300      	moveq	r3, #0
 800b032:	b2db      	uxtb	r3, r3
 800b034:	e00b      	b.n	800b04e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	43da      	mvns	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	4013      	ands	r3, r2
 800b042:	b29b      	uxth	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d18d      	bne.n	800af6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b068:	e02d      	b.n	800b0c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 f8ce 	bl	800b20c <I2C_IsAcknowledgeFailed>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e02d      	b.n	800b0d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b080:	d021      	beq.n	800b0c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b082:	f7fd fead 	bl	8008de0 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d302      	bcc.n	800b098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d116      	bne.n	800b0c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	f043 0220 	orr.w	r2, r3, #32
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e007      	b.n	800b0d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d0:	2b80      	cmp	r3, #128	; 0x80
 800b0d2:	d1ca      	bne.n	800b06a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0ea:	e02d      	b.n	800b148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f88d 	bl	800b20c <I2C_IsAcknowledgeFailed>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e02d      	b.n	800b158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b102:	d021      	beq.n	800b148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b104:	f7fd fe6c 	bl	8008de0 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	429a      	cmp	r2, r3
 800b112:	d302      	bcc.n	800b11a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d116      	bne.n	800b148 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2220      	movs	r2, #32
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b134:	f043 0220 	orr.w	r2, r3, #32
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e007      	b.n	800b158 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b04      	cmp	r3, #4
 800b154:	d1ca      	bne.n	800b0ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b16c:	e042      	b.n	800b1f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b10      	cmp	r3, #16
 800b17a:	d119      	bne.n	800b1b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f06f 0210 	mvn.w	r2, #16
 800b184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e029      	b.n	800b204 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b0:	f7fd fe16 	bl	8008de0 <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d302      	bcc.n	800b1c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d116      	bne.n	800b1f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	f043 0220 	orr.w	r2, r3, #32
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e007      	b.n	800b204 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fe:	2b40      	cmp	r3, #64	; 0x40
 800b200:	d1b5      	bne.n	800b16e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b21e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b222:	d11b      	bne.n	800b25c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b22c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2220      	movs	r2, #32
 800b238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	f043 0204 	orr.w	r2, r3, #4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e000      	b.n	800b25e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
	...

0800b26c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b276:	2300      	movs	r3, #0
 800b278:	603b      	str	r3, [r7, #0]
 800b27a:	4b20      	ldr	r3, [pc, #128]	; (800b2fc <HAL_PWREx_EnableOverDrive+0x90>)
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	4a1f      	ldr	r2, [pc, #124]	; (800b2fc <HAL_PWREx_EnableOverDrive+0x90>)
 800b280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b284:	6413      	str	r3, [r2, #64]	; 0x40
 800b286:	4b1d      	ldr	r3, [pc, #116]	; (800b2fc <HAL_PWREx_EnableOverDrive+0x90>)
 800b288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b292:	4b1b      	ldr	r3, [pc, #108]	; (800b300 <HAL_PWREx_EnableOverDrive+0x94>)
 800b294:	2201      	movs	r2, #1
 800b296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b298:	f7fd fda2 	bl	8008de0 <HAL_GetTick>
 800b29c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b29e:	e009      	b.n	800b2b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2a0:	f7fd fd9e 	bl	8008de0 <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2ae:	d901      	bls.n	800b2b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e01f      	b.n	800b2f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b2b4:	4b13      	ldr	r3, [pc, #76]	; (800b304 <HAL_PWREx_EnableOverDrive+0x98>)
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c0:	d1ee      	bne.n	800b2a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b2c2:	4b11      	ldr	r3, [pc, #68]	; (800b308 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2c8:	f7fd fd8a 	bl	8008de0 <HAL_GetTick>
 800b2cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2ce:	e009      	b.n	800b2e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b2d0:	f7fd fd86 	bl	8008de0 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2de:	d901      	bls.n	800b2e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e007      	b.n	800b2f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b2e4:	4b07      	ldr	r3, [pc, #28]	; (800b304 <HAL_PWREx_EnableOverDrive+0x98>)
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2f0:	d1ee      	bne.n	800b2d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	40023800 	.word	0x40023800
 800b300:	420e0040 	.word	0x420e0040
 800b304:	40007000 	.word	0x40007000
 800b308:	420e0044 	.word	0x420e0044

0800b30c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e0cc      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b320:	4b68      	ldr	r3, [pc, #416]	; (800b4c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 030f 	and.w	r3, r3, #15
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d90c      	bls.n	800b348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b32e:	4b65      	ldr	r3, [pc, #404]	; (800b4c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	b2d2      	uxtb	r2, r2
 800b334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b336:	4b63      	ldr	r3, [pc, #396]	; (800b4c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d001      	beq.n	800b348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e0b8      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d020      	beq.n	800b396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b360:	4b59      	ldr	r3, [pc, #356]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	4a58      	ldr	r2, [pc, #352]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b36a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 0308 	and.w	r3, r3, #8
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b378:	4b53      	ldr	r3, [pc, #332]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	4a52      	ldr	r2, [pc, #328]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b37e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b384:	4b50      	ldr	r3, [pc, #320]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	494d      	ldr	r1, [pc, #308]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b392:	4313      	orrs	r3, r2
 800b394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d044      	beq.n	800b42c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d107      	bne.n	800b3ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3aa:	4b47      	ldr	r3, [pc, #284]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d119      	bne.n	800b3ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e07f      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d003      	beq.n	800b3ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d107      	bne.n	800b3da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3ca:	4b3f      	ldr	r3, [pc, #252]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e06f      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3da:	4b3b      	ldr	r3, [pc, #236]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0302 	and.w	r3, r3, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d101      	bne.n	800b3ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e067      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b3ea:	4b37      	ldr	r3, [pc, #220]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f023 0203 	bic.w	r2, r3, #3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	4934      	ldr	r1, [pc, #208]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b3fc:	f7fd fcf0 	bl	8008de0 <HAL_GetTick>
 800b400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b402:	e00a      	b.n	800b41a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b404:	f7fd fcec 	bl	8008de0 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b412:	4293      	cmp	r3, r2
 800b414:	d901      	bls.n	800b41a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e04f      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b41a:	4b2b      	ldr	r3, [pc, #172]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f003 020c 	and.w	r2, r3, #12
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	429a      	cmp	r2, r3
 800b42a:	d1eb      	bne.n	800b404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b42c:	4b25      	ldr	r3, [pc, #148]	; (800b4c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 030f 	and.w	r3, r3, #15
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d20c      	bcs.n	800b454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b43a:	4b22      	ldr	r3, [pc, #136]	; (800b4c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b442:	4b20      	ldr	r3, [pc, #128]	; (800b4c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d001      	beq.n	800b454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	e032      	b.n	800b4ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d008      	beq.n	800b472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b460:	4b19      	ldr	r3, [pc, #100]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	4916      	ldr	r1, [pc, #88]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0308 	and.w	r3, r3, #8
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d009      	beq.n	800b492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b47e:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	490e      	ldr	r1, [pc, #56]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b492:	f000 f821 	bl	800b4d8 <HAL_RCC_GetSysClockFreq>
 800b496:	4601      	mov	r1, r0
 800b498:	4b0b      	ldr	r3, [pc, #44]	; (800b4c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	091b      	lsrs	r3, r3, #4
 800b49e:	f003 030f 	and.w	r3, r3, #15
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <HAL_RCC_ClockConfig+0x1c0>)
 800b4a4:	5cd3      	ldrb	r3, [r2, r3]
 800b4a6:	fa21 f303 	lsr.w	r3, r1, r3
 800b4aa:	4a09      	ldr	r2, [pc, #36]	; (800b4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800b4ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4ae:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fd fc50 	bl	8008d58 <HAL_InitTick>

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	40023c00 	.word	0x40023c00
 800b4c8:	40023800 	.word	0x40023800
 800b4cc:	08019254 	.word	0x08019254
 800b4d0:	20000000 	.word	0x20000000
 800b4d4:	20000004 	.word	0x20000004

0800b4d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	607b      	str	r3, [r7, #4]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b4ee:	4b63      	ldr	r3, [pc, #396]	; (800b67c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f003 030c 	and.w	r3, r3, #12
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d007      	beq.n	800b50a <HAL_RCC_GetSysClockFreq+0x32>
 800b4fa:	2b08      	cmp	r3, #8
 800b4fc:	d008      	beq.n	800b510 <HAL_RCC_GetSysClockFreq+0x38>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 80b4 	bne.w	800b66c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b504:	4b5e      	ldr	r3, [pc, #376]	; (800b680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b506:	60bb      	str	r3, [r7, #8]
       break;
 800b508:	e0b3      	b.n	800b672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b50a:	4b5d      	ldr	r3, [pc, #372]	; (800b680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b50c:	60bb      	str	r3, [r7, #8]
      break;
 800b50e:	e0b0      	b.n	800b672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b510:	4b5a      	ldr	r3, [pc, #360]	; (800b67c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b518:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b51a:	4b58      	ldr	r3, [pc, #352]	; (800b67c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d04a      	beq.n	800b5bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b526:	4b55      	ldr	r3, [pc, #340]	; (800b67c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	099b      	lsrs	r3, r3, #6
 800b52c:	f04f 0400 	mov.w	r4, #0
 800b530:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b534:	f04f 0200 	mov.w	r2, #0
 800b538:	ea03 0501 	and.w	r5, r3, r1
 800b53c:	ea04 0602 	and.w	r6, r4, r2
 800b540:	4629      	mov	r1, r5
 800b542:	4632      	mov	r2, r6
 800b544:	f04f 0300 	mov.w	r3, #0
 800b548:	f04f 0400 	mov.w	r4, #0
 800b54c:	0154      	lsls	r4, r2, #5
 800b54e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b552:	014b      	lsls	r3, r1, #5
 800b554:	4619      	mov	r1, r3
 800b556:	4622      	mov	r2, r4
 800b558:	1b49      	subs	r1, r1, r5
 800b55a:	eb62 0206 	sbc.w	r2, r2, r6
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	f04f 0400 	mov.w	r4, #0
 800b566:	0194      	lsls	r4, r2, #6
 800b568:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b56c:	018b      	lsls	r3, r1, #6
 800b56e:	1a5b      	subs	r3, r3, r1
 800b570:	eb64 0402 	sbc.w	r4, r4, r2
 800b574:	f04f 0100 	mov.w	r1, #0
 800b578:	f04f 0200 	mov.w	r2, #0
 800b57c:	00e2      	lsls	r2, r4, #3
 800b57e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b582:	00d9      	lsls	r1, r3, #3
 800b584:	460b      	mov	r3, r1
 800b586:	4614      	mov	r4, r2
 800b588:	195b      	adds	r3, r3, r5
 800b58a:	eb44 0406 	adc.w	r4, r4, r6
 800b58e:	f04f 0100 	mov.w	r1, #0
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	02a2      	lsls	r2, r4, #10
 800b598:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b59c:	0299      	lsls	r1, r3, #10
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f04f 0400 	mov.w	r4, #0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	f7f5 fb82 	bl	8000cb8 <__aeabi_uldivmod>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	e049      	b.n	800b650 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5bc:	4b2f      	ldr	r3, [pc, #188]	; (800b67c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	099b      	lsrs	r3, r3, #6
 800b5c2:	f04f 0400 	mov.w	r4, #0
 800b5c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5ca:	f04f 0200 	mov.w	r2, #0
 800b5ce:	ea03 0501 	and.w	r5, r3, r1
 800b5d2:	ea04 0602 	and.w	r6, r4, r2
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4632      	mov	r2, r6
 800b5da:	f04f 0300 	mov.w	r3, #0
 800b5de:	f04f 0400 	mov.w	r4, #0
 800b5e2:	0154      	lsls	r4, r2, #5
 800b5e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5e8:	014b      	lsls	r3, r1, #5
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	1b49      	subs	r1, r1, r5
 800b5f0:	eb62 0206 	sbc.w	r2, r2, r6
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	f04f 0400 	mov.w	r4, #0
 800b5fc:	0194      	lsls	r4, r2, #6
 800b5fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b602:	018b      	lsls	r3, r1, #6
 800b604:	1a5b      	subs	r3, r3, r1
 800b606:	eb64 0402 	sbc.w	r4, r4, r2
 800b60a:	f04f 0100 	mov.w	r1, #0
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	00e2      	lsls	r2, r4, #3
 800b614:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b618:	00d9      	lsls	r1, r3, #3
 800b61a:	460b      	mov	r3, r1
 800b61c:	4614      	mov	r4, r2
 800b61e:	195b      	adds	r3, r3, r5
 800b620:	eb44 0406 	adc.w	r4, r4, r6
 800b624:	f04f 0100 	mov.w	r1, #0
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	02a2      	lsls	r2, r4, #10
 800b62e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b632:	0299      	lsls	r1, r3, #10
 800b634:	460b      	mov	r3, r1
 800b636:	4614      	mov	r4, r2
 800b638:	4618      	mov	r0, r3
 800b63a:	4621      	mov	r1, r4
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f04f 0400 	mov.w	r4, #0
 800b642:	461a      	mov	r2, r3
 800b644:	4623      	mov	r3, r4
 800b646:	f7f5 fb37 	bl	8000cb8 <__aeabi_uldivmod>
 800b64a:	4603      	mov	r3, r0
 800b64c:	460c      	mov	r4, r1
 800b64e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b650:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	0c1b      	lsrs	r3, r3, #16
 800b656:	f003 0303 	and.w	r3, r3, #3
 800b65a:	3301      	adds	r3, #1
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	fbb2 f3f3 	udiv	r3, r2, r3
 800b668:	60bb      	str	r3, [r7, #8]
      break;
 800b66a:	e002      	b.n	800b672 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b66c:	4b04      	ldr	r3, [pc, #16]	; (800b680 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b66e:	60bb      	str	r3, [r7, #8]
      break;
 800b670:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b672:	68bb      	ldr	r3, [r7, #8]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b67c:	40023800 	.word	0x40023800
 800b680:	00f42400 	.word	0x00f42400

0800b684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b688:	4b03      	ldr	r3, [pc, #12]	; (800b698 <HAL_RCC_GetHCLKFreq+0x14>)
 800b68a:	681b      	ldr	r3, [r3, #0]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	20000000 	.word	0x20000000

0800b69c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b6a0:	f7ff fff0 	bl	800b684 <HAL_RCC_GetHCLKFreq>
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	0a9b      	lsrs	r3, r3, #10
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	4a03      	ldr	r2, [pc, #12]	; (800b6c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6b2:	5cd3      	ldrb	r3, [r2, r3]
 800b6b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40023800 	.word	0x40023800
 800b6c0:	08019264 	.word	0x08019264

0800b6c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b6c8:	f7ff ffdc 	bl	800b684 <HAL_RCC_GetHCLKFreq>
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	0b5b      	lsrs	r3, r3, #13
 800b6d4:	f003 0307 	and.w	r3, r3, #7
 800b6d8:	4a03      	ldr	r2, [pc, #12]	; (800b6e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6da:	5cd3      	ldrb	r3, [r2, r3]
 800b6dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	40023800 	.word	0x40023800
 800b6e8:	08019264 	.word	0x08019264

0800b6ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00a      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b714:	4b66      	ldr	r3, [pc, #408]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b71a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b722:	4963      	ldr	r1, [pc, #396]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b724:	4313      	orrs	r3, r2
 800b726:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b736:	4b5e      	ldr	r3, [pc, #376]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b73c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b744:	495a      	ldr	r1, [pc, #360]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b746:	4313      	orrs	r3, r2
 800b748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10b      	bne.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b760:	2b00      	cmp	r3, #0
 800b762:	d105      	bne.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d075      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b770:	4b50      	ldr	r3, [pc, #320]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b776:	f7fd fb33 	bl	8008de0 <HAL_GetTick>
 800b77a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b77c:	e008      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b77e:	f7fd fb2f 	bl	8008de0 <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d901      	bls.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e1dc      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b790:	4b47      	ldr	r3, [pc, #284]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f0      	bne.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d009      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	019a      	lsls	r2, r3, #6
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	071b      	lsls	r3, r3, #28
 800b7b4:	493e      	ldr	r1, [pc, #248]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01f      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b7c8:	4b39      	ldr	r3, [pc, #228]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ce:	0f1b      	lsrs	r3, r3, #28
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	019a      	lsls	r2, r3, #6
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	061b      	lsls	r3, r3, #24
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	071b      	lsls	r3, r3, #28
 800b7e8:	4931      	ldr	r1, [pc, #196]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b7f0:	4b2f      	ldr	r3, [pc, #188]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7f6:	f023 021f 	bic.w	r2, r3, #31
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	492b      	ldr	r1, [pc, #172]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b802:	4313      	orrs	r3, r2
 800b804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00d      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	019a      	lsls	r2, r3, #6
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	061b      	lsls	r3, r3, #24
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	071b      	lsls	r3, r3, #28
 800b828:	4921      	ldr	r1, [pc, #132]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b82a:	4313      	orrs	r3, r2
 800b82c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b830:	4b20      	ldr	r3, [pc, #128]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b832:	2201      	movs	r2, #1
 800b834:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b836:	f7fd fad3 	bl	8008de0 <HAL_GetTick>
 800b83a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b83c:	e008      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b83e:	f7fd facf 	bl	8008de0 <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d901      	bls.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e17c      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b850:	4b17      	ldr	r3, [pc, #92]	; (800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0f0      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0304 	and.w	r3, r3, #4
 800b864:	2b00      	cmp	r3, #0
 800b866:	d112      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10c      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80ce 	beq.w	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b88a:	f040 80c8 	bne.w	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b88e:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b894:	f7fd faa4 	bl	8008de0 <HAL_GetTick>
 800b898:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b89a:	e00f      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b89c:	f7fd faa0 	bl	8008de0 <HAL_GetTick>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d908      	bls.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e14d      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b8ae:	bf00      	nop
 800b8b0:	40023800 	.word	0x40023800
 800b8b4:	42470068 	.word	0x42470068
 800b8b8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b8bc:	4ba5      	ldr	r3, [pc, #660]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8c8:	d0e8      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 0304 	and.w	r3, r3, #4
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d02e      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b8d6:	4b9f      	ldr	r3, [pc, #636]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8dc:	0c1b      	lsrs	r3, r3, #16
 800b8de:	f003 0303 	and.w	r3, r3, #3
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b8e8:	4b9a      	ldr	r3, [pc, #616]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ee:	0f1b      	lsrs	r3, r3, #28
 800b8f0:	f003 0307 	and.w	r3, r3, #7
 800b8f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	019a      	lsls	r2, r3, #6
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	085b      	lsrs	r3, r3, #1
 800b900:	3b01      	subs	r3, #1
 800b902:	041b      	lsls	r3, r3, #16
 800b904:	431a      	orrs	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	061b      	lsls	r3, r3, #24
 800b90c:	431a      	orrs	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	071b      	lsls	r3, r3, #28
 800b912:	4990      	ldr	r1, [pc, #576]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b914:	4313      	orrs	r3, r2
 800b916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b91a:	4b8e      	ldr	r3, [pc, #568]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b91c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b920:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	3b01      	subs	r3, #1
 800b92a:	021b      	lsls	r3, r3, #8
 800b92c:	4989      	ldr	r1, [pc, #548]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d02c      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b940:	4b84      	ldr	r3, [pc, #528]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	3301      	adds	r3, #1
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b952:	4b80      	ldr	r3, [pc, #512]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b958:	0e1b      	lsrs	r3, r3, #24
 800b95a:	f003 030f 	and.w	r3, r3, #15
 800b95e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	019a      	lsls	r2, r3, #6
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	085b      	lsrs	r3, r3, #1
 800b96a:	3b01      	subs	r3, #1
 800b96c:	041b      	lsls	r3, r3, #16
 800b96e:	431a      	orrs	r2, r3
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	061b      	lsls	r3, r3, #24
 800b974:	431a      	orrs	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	071b      	lsls	r3, r3, #28
 800b97c:	4975      	ldr	r1, [pc, #468]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b984:	4b73      	ldr	r3, [pc, #460]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b98a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b992:	4970      	ldr	r1, [pc, #448]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b994:	4313      	orrs	r3, r2
 800b996:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d024      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b9aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9ae:	d11f      	bne.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b9b0:	4b68      	ldr	r3, [pc, #416]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9b6:	0e1b      	lsrs	r3, r3, #24
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b9be:	4b65      	ldr	r3, [pc, #404]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c4:	0f1b      	lsrs	r3, r3, #28
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	019a      	lsls	r2, r3, #6
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	085b      	lsrs	r3, r3, #1
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	041b      	lsls	r3, r3, #16
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	061b      	lsls	r3, r3, #24
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	071b      	lsls	r3, r3, #28
 800b9e8:	495a      	ldr	r1, [pc, #360]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b9f0:	4b59      	ldr	r3, [pc, #356]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9f6:	f7fd f9f3 	bl	8008de0 <HAL_GetTick>
 800b9fa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b9fc:	e008      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b9fe:	f7fd f9ef 	bl	8008de0 <HAL_GetTick>
 800ba02:	4602      	mov	r2, r0
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d901      	bls.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e09c      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba10:	4b50      	ldr	r3, [pc, #320]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba1c:	d1ef      	bne.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0320 	and.w	r3, r3, #32
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8083 	beq.w	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60bb      	str	r3, [r7, #8]
 800ba30:	4b48      	ldr	r3, [pc, #288]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	4a47      	ldr	r2, [pc, #284]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba3a:	6413      	str	r3, [r2, #64]	; 0x40
 800ba3c:	4b45      	ldr	r3, [pc, #276]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ba48:	4b44      	ldr	r3, [pc, #272]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a43      	ldr	r2, [pc, #268]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba52:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba54:	f7fd f9c4 	bl	8008de0 <HAL_GetTick>
 800ba58:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba5a:	e008      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ba5c:	f7fd f9c0 	bl	8008de0 <HAL_GetTick>
 800ba60:	4602      	mov	r2, r0
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d901      	bls.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	e06d      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba6e:	4b3b      	ldr	r3, [pc, #236]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0f0      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ba7a:	4b36      	ldr	r3, [pc, #216]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba82:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d02f      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d028      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba98:	4b2e      	ldr	r3, [pc, #184]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baa0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800baa2:	4b2f      	ldr	r3, [pc, #188]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800baa8:	4b2d      	ldr	r3, [pc, #180]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800baaa:	2200      	movs	r2, #0
 800baac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800baae:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bab4:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b01      	cmp	r3, #1
 800babe:	d114      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bac0:	f7fd f98e 	bl	8008de0 <HAL_GetTick>
 800bac4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bac6:	e00a      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bac8:	f7fd f98a 	bl	8008de0 <HAL_GetTick>
 800bacc:	4602      	mov	r2, r0
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d901      	bls.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e035      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bade:	4b1d      	ldr	r3, [pc, #116]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae2:	f003 0302 	and.w	r3, r3, #2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0ee      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800baf6:	d10d      	bne.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800baf8:	4b16      	ldr	r3, [pc, #88]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb0c:	4911      	ldr	r1, [pc, #68]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	608b      	str	r3, [r1, #8]
 800bb12:	e005      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800bb14:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	4a0e      	ldr	r2, [pc, #56]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bb1e:	6093      	str	r3, [r2, #8]
 800bb20:	4b0c      	ldr	r3, [pc, #48]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb2c:	4909      	ldr	r1, [pc, #36]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0310 	and.w	r3, r3, #16
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d004      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bb44:	4b07      	ldr	r3, [pc, #28]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800bb46:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3720      	adds	r7, #32
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	40023800 	.word	0x40023800
 800bb58:	42470070 	.word	0x42470070
 800bb5c:	40007000 	.word	0x40007000
 800bb60:	42470e40 	.word	0x42470e40
 800bb64:	424711e0 	.word	0x424711e0

0800bb68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb70:	2300      	movs	r3, #0
 800bb72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d075      	beq.n	800bc6c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bb80:	4ba2      	ldr	r3, [pc, #648]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	f003 030c 	and.w	r3, r3, #12
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d00c      	beq.n	800bba6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb8c:	4b9f      	ldr	r3, [pc, #636]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800bb94:	2b08      	cmp	r3, #8
 800bb96:	d112      	bne.n	800bbbe <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bb98:	4b9c      	ldr	r3, [pc, #624]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bba4:	d10b      	bne.n	800bbbe <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bba6:	4b99      	ldr	r3, [pc, #612]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d05b      	beq.n	800bc6a <HAL_RCC_OscConfig+0x102>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d157      	bne.n	800bc6a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e20b      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbc6:	d106      	bne.n	800bbd6 <HAL_RCC_OscConfig+0x6e>
 800bbc8:	4b90      	ldr	r3, [pc, #576]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a8f      	ldr	r2, [pc, #572]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	e01d      	b.n	800bc12 <HAL_RCC_OscConfig+0xaa>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bbde:	d10c      	bne.n	800bbfa <HAL_RCC_OscConfig+0x92>
 800bbe0:	4b8a      	ldr	r3, [pc, #552]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a89      	ldr	r2, [pc, #548]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	4b87      	ldr	r3, [pc, #540]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a86      	ldr	r2, [pc, #536]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	e00b      	b.n	800bc12 <HAL_RCC_OscConfig+0xaa>
 800bbfa:	4b84      	ldr	r3, [pc, #528]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a83      	ldr	r2, [pc, #524]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	4b81      	ldr	r3, [pc, #516]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a80      	ldr	r2, [pc, #512]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d013      	beq.n	800bc42 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc1a:	f7fd f8e1 	bl	8008de0 <HAL_GetTick>
 800bc1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc20:	e008      	b.n	800bc34 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc22:	f7fd f8dd 	bl	8008de0 <HAL_GetTick>
 800bc26:	4602      	mov	r2, r0
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	2b64      	cmp	r3, #100	; 0x64
 800bc2e:	d901      	bls.n	800bc34 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e1d0      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc34:	4b75      	ldr	r3, [pc, #468]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0f0      	beq.n	800bc22 <HAL_RCC_OscConfig+0xba>
 800bc40:	e014      	b.n	800bc6c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc42:	f7fd f8cd 	bl	8008de0 <HAL_GetTick>
 800bc46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc48:	e008      	b.n	800bc5c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc4a:	f7fd f8c9 	bl	8008de0 <HAL_GetTick>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	2b64      	cmp	r3, #100	; 0x64
 800bc56:	d901      	bls.n	800bc5c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e1bc      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc5c:	4b6b      	ldr	r3, [pc, #428]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1f0      	bne.n	800bc4a <HAL_RCC_OscConfig+0xe2>
 800bc68:	e000      	b.n	800bc6c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0302 	and.w	r3, r3, #2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d063      	beq.n	800bd40 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bc78:	4b64      	ldr	r3, [pc, #400]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f003 030c 	and.w	r3, r3, #12
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00b      	beq.n	800bc9c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc84:	4b61      	ldr	r3, [pc, #388]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bc8c:	2b08      	cmp	r3, #8
 800bc8e:	d11c      	bne.n	800bcca <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc90:	4b5e      	ldr	r3, [pc, #376]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d116      	bne.n	800bcca <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc9c:	4b5b      	ldr	r3, [pc, #364]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0302 	and.w	r3, r3, #2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d005      	beq.n	800bcb4 <HAL_RCC_OscConfig+0x14c>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d001      	beq.n	800bcb4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e190      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcb4:	4b55      	ldr	r3, [pc, #340]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	4952      	ldr	r1, [pc, #328]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcc8:	e03a      	b.n	800bd40 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d020      	beq.n	800bd14 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bcd2:	4b4f      	ldr	r3, [pc, #316]	; (800be10 <HAL_RCC_OscConfig+0x2a8>)
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcd8:	f7fd f882 	bl	8008de0 <HAL_GetTick>
 800bcdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcde:	e008      	b.n	800bcf2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bce0:	f7fd f87e 	bl	8008de0 <HAL_GetTick>
 800bce4:	4602      	mov	r2, r0
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d901      	bls.n	800bcf2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e171      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcf2:	4b46      	ldr	r3, [pc, #280]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 0302 	and.w	r3, r3, #2
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d0f0      	beq.n	800bce0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcfe:	4b43      	ldr	r3, [pc, #268]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	493f      	ldr	r1, [pc, #252]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	600b      	str	r3, [r1, #0]
 800bd12:	e015      	b.n	800bd40 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd14:	4b3e      	ldr	r3, [pc, #248]	; (800be10 <HAL_RCC_OscConfig+0x2a8>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd1a:	f7fd f861 	bl	8008de0 <HAL_GetTick>
 800bd1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd20:	e008      	b.n	800bd34 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd22:	f7fd f85d 	bl	8008de0 <HAL_GetTick>
 800bd26:	4602      	mov	r2, r0
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d901      	bls.n	800bd34 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e150      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd34:	4b35      	ldr	r3, [pc, #212]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0302 	and.w	r3, r3, #2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1f0      	bne.n	800bd22 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f003 0308 	and.w	r3, r3, #8
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d030      	beq.n	800bdae <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d016      	beq.n	800bd82 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd54:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <HAL_RCC_OscConfig+0x2ac>)
 800bd56:	2201      	movs	r2, #1
 800bd58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd5a:	f7fd f841 	bl	8008de0 <HAL_GetTick>
 800bd5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd60:	e008      	b.n	800bd74 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd62:	f7fd f83d 	bl	8008de0 <HAL_GetTick>
 800bd66:	4602      	mov	r2, r0
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d901      	bls.n	800bd74 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e130      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd74:	4b25      	ldr	r3, [pc, #148]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bd76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0f0      	beq.n	800bd62 <HAL_RCC_OscConfig+0x1fa>
 800bd80:	e015      	b.n	800bdae <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd82:	4b24      	ldr	r3, [pc, #144]	; (800be14 <HAL_RCC_OscConfig+0x2ac>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd88:	f7fd f82a 	bl	8008de0 <HAL_GetTick>
 800bd8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd8e:	e008      	b.n	800bda2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd90:	f7fd f826 	bl	8008de0 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d901      	bls.n	800bda2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	e119      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bda2:	4b1a      	ldr	r3, [pc, #104]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda6:	f003 0302 	and.w	r3, r3, #2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1f0      	bne.n	800bd90 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 809f 	beq.w	800befa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdc0:	4b12      	ldr	r3, [pc, #72]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10f      	bne.n	800bdec <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdcc:	2300      	movs	r3, #0
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	4b0e      	ldr	r3, [pc, #56]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd4:	4a0d      	ldr	r2, [pc, #52]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bdd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdda:	6413      	str	r3, [r2, #64]	; 0x40
 800bddc:	4b0b      	ldr	r3, [pc, #44]	; (800be0c <HAL_RCC_OscConfig+0x2a4>)
 800bdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bde8:	2301      	movs	r3, #1
 800bdea:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <HAL_RCC_OscConfig+0x2b0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d120      	bne.n	800be3a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bdf8:	4b07      	ldr	r3, [pc, #28]	; (800be18 <HAL_RCC_OscConfig+0x2b0>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a06      	ldr	r2, [pc, #24]	; (800be18 <HAL_RCC_OscConfig+0x2b0>)
 800bdfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be04:	f7fc ffec 	bl	8008de0 <HAL_GetTick>
 800be08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be0a:	e010      	b.n	800be2e <HAL_RCC_OscConfig+0x2c6>
 800be0c:	40023800 	.word	0x40023800
 800be10:	42470000 	.word	0x42470000
 800be14:	42470e80 	.word	0x42470e80
 800be18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be1c:	f7fc ffe0 	bl	8008de0 <HAL_GetTick>
 800be20:	4602      	mov	r2, r0
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d901      	bls.n	800be2e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e0d3      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be2e:	4b6c      	ldr	r3, [pc, #432]	; (800bfe0 <HAL_RCC_OscConfig+0x478>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0f0      	beq.n	800be1c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d106      	bne.n	800be50 <HAL_RCC_OscConfig+0x2e8>
 800be42:	4b68      	ldr	r3, [pc, #416]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	4a67      	ldr	r2, [pc, #412]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be48:	f043 0301 	orr.w	r3, r3, #1
 800be4c:	6713      	str	r3, [r2, #112]	; 0x70
 800be4e:	e01c      	b.n	800be8a <HAL_RCC_OscConfig+0x322>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	2b05      	cmp	r3, #5
 800be56:	d10c      	bne.n	800be72 <HAL_RCC_OscConfig+0x30a>
 800be58:	4b62      	ldr	r3, [pc, #392]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5c:	4a61      	ldr	r2, [pc, #388]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be5e:	f043 0304 	orr.w	r3, r3, #4
 800be62:	6713      	str	r3, [r2, #112]	; 0x70
 800be64:	4b5f      	ldr	r3, [pc, #380]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be68:	4a5e      	ldr	r2, [pc, #376]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	6713      	str	r3, [r2, #112]	; 0x70
 800be70:	e00b      	b.n	800be8a <HAL_RCC_OscConfig+0x322>
 800be72:	4b5c      	ldr	r3, [pc, #368]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be76:	4a5b      	ldr	r2, [pc, #364]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be78:	f023 0301 	bic.w	r3, r3, #1
 800be7c:	6713      	str	r3, [r2, #112]	; 0x70
 800be7e:	4b59      	ldr	r3, [pc, #356]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be82:	4a58      	ldr	r2, [pc, #352]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800be84:	f023 0304 	bic.w	r3, r3, #4
 800be88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d015      	beq.n	800bebe <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be92:	f7fc ffa5 	bl	8008de0 <HAL_GetTick>
 800be96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be98:	e00a      	b.n	800beb0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be9a:	f7fc ffa1 	bl	8008de0 <HAL_GetTick>
 800be9e:	4602      	mov	r2, r0
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d901      	bls.n	800beb0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e092      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800beb0:	4b4c      	ldr	r3, [pc, #304]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800beb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d0ee      	beq.n	800be9a <HAL_RCC_OscConfig+0x332>
 800bebc:	e014      	b.n	800bee8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bebe:	f7fc ff8f 	bl	8008de0 <HAL_GetTick>
 800bec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bec4:	e00a      	b.n	800bedc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bec6:	f7fc ff8b 	bl	8008de0 <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d901      	bls.n	800bedc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800bed8:	2303      	movs	r3, #3
 800beda:	e07c      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bedc:	4b41      	ldr	r3, [pc, #260]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1ee      	bne.n	800bec6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d105      	bne.n	800befa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800beee:	4b3d      	ldr	r3, [pc, #244]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	4a3c      	ldr	r2, [pc, #240]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d068      	beq.n	800bfd4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bf02:	4b38      	ldr	r3, [pc, #224]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	f003 030c 	and.w	r3, r3, #12
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d060      	beq.n	800bfd0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d145      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf16:	4b34      	ldr	r3, [pc, #208]	; (800bfe8 <HAL_RCC_OscConfig+0x480>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf1c:	f7fc ff60 	bl	8008de0 <HAL_GetTick>
 800bf20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf22:	e008      	b.n	800bf36 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf24:	f7fc ff5c 	bl	8008de0 <HAL_GetTick>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d901      	bls.n	800bf36 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e04f      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf36:	4b2b      	ldr	r3, [pc, #172]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1f0      	bne.n	800bf24 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	69da      	ldr	r2, [r3, #28]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	019b      	lsls	r3, r3, #6
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf58:	085b      	lsrs	r3, r3, #1
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf64:	061b      	lsls	r3, r3, #24
 800bf66:	431a      	orrs	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	071b      	lsls	r3, r3, #28
 800bf6e:	491d      	ldr	r1, [pc, #116]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf74:	4b1c      	ldr	r3, [pc, #112]	; (800bfe8 <HAL_RCC_OscConfig+0x480>)
 800bf76:	2201      	movs	r2, #1
 800bf78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf7a:	f7fc ff31 	bl	8008de0 <HAL_GetTick>
 800bf7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf80:	e008      	b.n	800bf94 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf82:	f7fc ff2d 	bl	8008de0 <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d901      	bls.n	800bf94 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e020      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf94:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0f0      	beq.n	800bf82 <HAL_RCC_OscConfig+0x41a>
 800bfa0:	e018      	b.n	800bfd4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <HAL_RCC_OscConfig+0x480>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa8:	f7fc ff1a 	bl	8008de0 <HAL_GetTick>
 800bfac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfae:	e008      	b.n	800bfc2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfb0:	f7fc ff16 	bl	8008de0 <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d901      	bls.n	800bfc2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e009      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfc2:	4b08      	ldr	r3, [pc, #32]	; (800bfe4 <HAL_RCC_OscConfig+0x47c>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f0      	bne.n	800bfb0 <HAL_RCC_OscConfig+0x448>
 800bfce:	e001      	b.n	800bfd4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e000      	b.n	800bfd6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	40007000 	.word	0x40007000
 800bfe4:	40023800 	.word	0x40023800
 800bfe8:	42470060 	.word	0x42470060

0800bfec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e022      	b.n	800c044 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d105      	bne.n	800c016 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7fa fc5d 	bl	80068d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2203      	movs	r2, #3
 800c01a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f814 	bl	800c04c <HAL_SD_InitCard>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e00a      	b.n	800c044 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c04c:	b5b0      	push	{r4, r5, r7, lr}
 800c04e:	b08e      	sub	sp, #56	; 0x38
 800c050:	af04      	add	r7, sp, #16
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c054:	2300      	movs	r3, #0
 800c056:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c060:	2300      	movs	r3, #0
 800c062:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c064:	2300      	movs	r3, #0
 800c066:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c068:	2376      	movs	r3, #118	; 0x76
 800c06a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681d      	ldr	r5, [r3, #0]
 800c070:	466c      	mov	r4, sp
 800c072:	f107 0314 	add.w	r3, r7, #20
 800c076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c084:	4628      	mov	r0, r5
 800c086:	f003 fa87 	bl	800f598 <SDIO_Init>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	e031      	b.n	800c100 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c09c:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <HAL_SD_InitCard+0xbc>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f003 fabf 	bl	800f62a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c0ac:	4b16      	ldr	r3, [pc, #88]	; (800c108 <HAL_SD_InitCard+0xbc>)
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 ffc6 	bl	800d044 <SD_PowerON>
 800c0b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00b      	beq.n	800c0d8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	431a      	orrs	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e013      	b.n	800c100 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fee5 	bl	800cea8 <SD_InitCard>
 800c0de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e000      	b.n	800c100 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3728      	adds	r7, #40	; 0x28
 800c104:	46bd      	mov	sp, r7
 800c106:	bdb0      	pop	{r4, r5, r7, pc}
 800c108:	422580a0 	.word	0x422580a0

0800c10c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08c      	sub	sp, #48	; 0x30
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
 800c118:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d107      	bne.n	800c134 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e0c7      	b.n	800c2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	f040 80c0 	bne.w	800c2c2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	441a      	add	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c152:	429a      	cmp	r2, r3
 800c154:	d907      	bls.n	800c166 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e0ae      	b.n	800c2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2203      	movs	r2, #3
 800c16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c184:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	4a50      	ldr	r2, [pc, #320]	; (800c2cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c18c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c192:	4a4f      	ldr	r2, [pc, #316]	; (800c2d0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c194:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19a:	2200      	movs	r2, #0
 800c19c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3380      	adds	r3, #128	; 0x80
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	025b      	lsls	r3, r3, #9
 800c1b0:	089b      	lsrs	r3, r3, #2
 800c1b2:	f7fd fc07 	bl	80099c4 <HAL_DMA_Start_IT>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d017      	beq.n	800c1ec <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c1ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a40      	ldr	r2, [pc, #256]	; (800c2d4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c1d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e06b      	b.n	800c2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c1ec:	4b3a      	ldr	r3, [pc, #232]	; (800c2d8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d002      	beq.n	800c200 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	025b      	lsls	r3, r3, #9
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c208:	4618      	mov	r0, r3
 800c20a:	f003 faa1 	bl	800f750 <SDMMC_CmdBlockLength>
 800c20e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00f      	beq.n	800c236 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a2e      	ldr	r2, [pc, #184]	; (800c2d4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c21c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	431a      	orrs	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e046      	b.n	800c2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c236:	f04f 33ff 	mov.w	r3, #4294967295
 800c23a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	025b      	lsls	r3, r3, #9
 800c240:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c242:	2390      	movs	r3, #144	; 0x90
 800c244:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c246:	2302      	movs	r3, #2
 800c248:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c24e:	2301      	movs	r3, #1
 800c250:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f107 0210 	add.w	r2, r7, #16
 800c25a:	4611      	mov	r1, r2
 800c25c:	4618      	mov	r0, r3
 800c25e:	f003 fa4b 	bl	800f6f8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b01      	cmp	r3, #1
 800c266:	d90a      	bls.n	800c27e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2282      	movs	r2, #130	; 0x82
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c274:	4618      	mov	r0, r3
 800c276:	f003 faaf 	bl	800f7d8 <SDMMC_CmdReadMultiBlock>
 800c27a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c27c:	e009      	b.n	800c292 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2281      	movs	r2, #129	; 0x81
 800c282:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c28a:	4618      	mov	r0, r3
 800c28c:	f003 fa82 	bl	800f794 <SDMMC_CmdReadSingleBlock>
 800c290:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d012      	beq.n	800c2be <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a0d      	ldr	r2, [pc, #52]	; (800c2d4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c29e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	431a      	orrs	r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e002      	b.n	800c2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e000      	b.n	800c2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c2c2:	2302      	movs	r3, #2
  }
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3730      	adds	r7, #48	; 0x30
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	0800ccb7 	.word	0x0800ccb7
 800c2d0:	0800cd29 	.word	0x0800cd29
 800c2d4:	004005ff 	.word	0x004005ff
 800c2d8:	4225858c 	.word	0x4225858c

0800c2dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08c      	sub	sp, #48	; 0x30
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d107      	bne.n	800c304 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e0ca      	b.n	800c49a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f040 80c3 	bne.w	800c498 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	441a      	add	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c322:	429a      	cmp	r2, r3
 800c324:	d907      	bls.n	800c336 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e0b1      	b.n	800c49a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2203      	movs	r2, #3
 800c33a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2200      	movs	r2, #0
 800c344:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f042 021a 	orr.w	r2, r2, #26
 800c354:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35a:	4a52      	ldr	r2, [pc, #328]	; (800c4a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c35c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c362:	4a51      	ldr	r2, [pc, #324]	; (800c4a8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800c364:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36a:	2200      	movs	r2, #0
 800c36c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	2b01      	cmp	r3, #1
 800c374:	d002      	beq.n	800c37c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	025b      	lsls	r3, r3, #9
 800c37a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c384:	4618      	mov	r0, r3
 800c386:	f003 f9e3 	bl	800f750 <SDMMC_CmdBlockLength>
 800c38a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00f      	beq.n	800c3b2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a45      	ldr	r2, [pc, #276]	; (800c4ac <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e073      	b.n	800c49a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d90a      	bls.n	800c3ce <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	22a0      	movs	r2, #160	; 0xa0
 800c3bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f003 fa4b 	bl	800f860 <SDMMC_CmdWriteMultiBlock>
 800c3ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3cc:	e009      	b.n	800c3e2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2290      	movs	r2, #144	; 0x90
 800c3d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f003 fa1e 	bl	800f81c <SDMMC_CmdWriteSingleBlock>
 800c3e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d012      	beq.n	800c40e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a2f      	ldr	r2, [pc, #188]	; (800c4ac <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c3ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f6:	431a      	orrs	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e045      	b.n	800c49a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c40e:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c410:	2201      	movs	r2, #1
 800c412:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3380      	adds	r3, #128	; 0x80
 800c420:	461a      	mov	r2, r3
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	025b      	lsls	r3, r3, #9
 800c426:	089b      	lsrs	r3, r3, #2
 800c428:	f7fd facc 	bl	80099c4 <HAL_DMA_Start_IT>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01a      	beq.n	800c468 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 021a 	bic.w	r2, r2, #26
 800c440:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a19      	ldr	r2, [pc, #100]	; (800c4ac <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c448:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e018      	b.n	800c49a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c468:	f04f 33ff 	mov.w	r3, #4294967295
 800c46c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	025b      	lsls	r3, r3, #9
 800c472:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c474:	2390      	movs	r3, #144	; 0x90
 800c476:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c478:	2300      	movs	r3, #0
 800c47a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c480:	2301      	movs	r3, #1
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f107 0210 	add.w	r2, r7, #16
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f003 f932 	bl	800f6f8 <SDIO_ConfigData>

      return HAL_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	e000      	b.n	800c49a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800c498:	2302      	movs	r3, #2
  }
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3730      	adds	r7, #48	; 0x30
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800cc8d 	.word	0x0800cc8d
 800c4a8:	0800cd29 	.word	0x0800cd29
 800c4ac:	004005ff 	.word	0x004005ff
 800c4b0:	4225858c 	.word	0x4225858c

0800c4b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d008      	beq.n	800c4e2 <HAL_SD_IRQHandler+0x2e>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 ffc8 	bl	800d470 <SD_Read_IT>
 800c4e0:	e155      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 808f 	beq.w	800c610 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	6812      	ldr	r2, [r2, #0]
 800c506:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c50a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c50e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0201 	bic.w	r2, r2, #1
 800c51e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f003 0308 	and.w	r3, r3, #8
 800c526:	2b00      	cmp	r3, #0
 800c528:	d039      	beq.n	800c59e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d104      	bne.n	800c53e <HAL_SD_IRQHandler+0x8a>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f003 0320 	and.w	r3, r3, #32
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d011      	beq.n	800c562 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4618      	mov	r0, r3
 800c544:	f003 f9ae 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800c548:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d008      	beq.n	800c562 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f91f 	bl	800c7a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f240 523a 	movw	r2, #1338	; 0x53a
 800c56a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	d104      	bne.n	800c58e <HAL_SD_IRQHandler+0xda>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f003 0302 	and.w	r3, r3, #2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f003 fe04 	bl	801019c <HAL_SD_RxCpltCallback>
 800c594:	e0fb      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f003 fdf6 	bl	8010188 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c59c:	e0f7      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80f2 	beq.w	800c78e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d011      	beq.n	800c5d8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f003 f973 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800c5be:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	431a      	orrs	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f8e4 	bl	800c7a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f040 80d5 	bne.w	800c78e <HAL_SD_IRQHandler+0x2da>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f040 80cf 	bne.w	800c78e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0208 	bic.w	r2, r2, #8
 800c5fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f003 fdbd 	bl	8010188 <HAL_SD_TxCpltCallback>
}
 800c60e:	e0be      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d008      	beq.n	800c630 <HAL_SD_IRQHandler+0x17c>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f003 0308 	and.w	r3, r3, #8
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 ff72 	bl	800d512 <SD_Write_IT>
 800c62e:	e0ae      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c636:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 80a7 	beq.w	800c78e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d005      	beq.n	800c65a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c652:	f043 0202 	orr.w	r2, r3, #2
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b00      	cmp	r3, #0
 800c666:	d005      	beq.n	800c674 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66c:	f043 0208 	orr.w	r2, r3, #8
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67a:	f003 0320 	and.w	r3, r3, #32
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	f043 0220 	orr.w	r2, r3, #32
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c694:	f003 0310 	and.w	r3, r3, #16
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	f043 0210 	orr.w	r2, r3, #16
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f240 523a 	movw	r2, #1338	; 0x53a
 800c6b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c6c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f003 f8ec 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f003 0308 	and.w	r3, r3, #8
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00a      	beq.n	800c6f8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f855 	bl	800c7a0 <HAL_SD_ErrorCallback>
}
 800c6f6:	e04a      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d045      	beq.n	800c78e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d104      	bne.n	800c716 <HAL_SD_IRQHandler+0x262>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f003 0320 	and.w	r3, r3, #32
 800c712:	2b00      	cmp	r3, #0
 800c714:	d011      	beq.n	800c73a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c71a:	4a1f      	ldr	r2, [pc, #124]	; (800c798 <HAL_SD_IRQHandler+0x2e4>)
 800c71c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c722:	4618      	mov	r0, r3
 800c724:	f7fd f9a6 	bl	8009a74 <HAL_DMA_Abort_IT>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d02f      	beq.n	800c78e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c732:	4618      	mov	r0, r3
 800c734:	f000 fb4a 	bl	800cdcc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c738:	e029      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <HAL_SD_IRQHandler+0x29a>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d011      	beq.n	800c772 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c752:	4a12      	ldr	r2, [pc, #72]	; (800c79c <HAL_SD_IRQHandler+0x2e8>)
 800c754:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fd f98a 	bl	8009a74 <HAL_DMA_Abort_IT>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d013      	beq.n	800c78e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 fb65 	bl	800ce3a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c770:	e00d      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f003 fcf4 	bl	8010174 <HAL_SD_AbortCallback>
}
 800c78c:	e7ff      	b.n	800c78e <HAL_SD_IRQHandler+0x2da>
 800c78e:	bf00      	nop
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	0800cdcd 	.word	0x0800cdcd
 800c79c:	0800ce3b 	.word	0x0800ce3b

0800c7a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7c2:	0f9b      	lsrs	r3, r3, #30
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7ce:	0e9b      	lsrs	r3, r3, #26
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	f003 030f 	and.w	r3, r3, #15
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7e0:	0e1b      	lsrs	r3, r3, #24
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0303 	and.w	r3, r3, #3
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7f2:	0c1b      	lsrs	r3, r3, #16
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	b2da      	uxtb	r2, r3
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c814:	0d1b      	lsrs	r3, r3, #20
 800c816:	b29a      	uxth	r2, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c820:	0c1b      	lsrs	r3, r3, #16
 800c822:	b2db      	uxtb	r3, r3
 800c824:	f003 030f 	and.w	r3, r3, #15
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c832:	0bdb      	lsrs	r3, r3, #15
 800c834:	b2db      	uxtb	r3, r3
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c844:	0b9b      	lsrs	r3, r3, #14
 800c846:	b2db      	uxtb	r3, r3
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c856:	0b5b      	lsrs	r3, r3, #13
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c868:	0b1b      	lsrs	r3, r3, #12
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	b2da      	uxtb	r2, r3
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2200      	movs	r2, #0
 800c87a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c880:	2b00      	cmp	r3, #0
 800c882:	d163      	bne.n	800c94c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c888:	009a      	lsls	r2, r3, #2
 800c88a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c88e:	4013      	ands	r3, r2
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c894:	0f92      	lsrs	r2, r2, #30
 800c896:	431a      	orrs	r2, r3
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a0:	0edb      	lsrs	r3, r3, #27
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b2:	0e1b      	lsrs	r3, r3, #24
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c4:	0d5b      	lsrs	r3, r3, #21
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f003 0307 	and.w	r3, r3, #7
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d6:	0c9b      	lsrs	r3, r3, #18
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	f003 0307 	and.w	r3, r3, #7
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e8:	0bdb      	lsrs	r3, r3, #15
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	f003 0307 	and.w	r3, r3, #7
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	7e1b      	ldrb	r3, [r3, #24]
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	3302      	adds	r3, #2
 800c90c:	2201      	movs	r2, #1
 800c90e:	fa02 f303 	lsl.w	r3, r2, r3
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c916:	fb02 f203 	mul.w	r2, r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	7a1b      	ldrb	r3, [r3, #8]
 800c922:	b2db      	uxtb	r3, r3
 800c924:	f003 030f 	and.w	r3, r3, #15
 800c928:	2201      	movs	r2, #1
 800c92a:	409a      	lsls	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c938:	0a52      	lsrs	r2, r2, #9
 800c93a:	fb02 f203 	mul.w	r2, r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c948:	661a      	str	r2, [r3, #96]	; 0x60
 800c94a:	e031      	b.n	800c9b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c950:	2b01      	cmp	r3, #1
 800c952:	d11d      	bne.n	800c990 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c958:	041b      	lsls	r3, r3, #16
 800c95a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c962:	0c1b      	lsrs	r3, r3, #16
 800c964:	431a      	orrs	r2, r3
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	3301      	adds	r3, #1
 800c970:	029a      	lsls	r2, r3, #10
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c984:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	661a      	str	r2, [r3, #96]	; 0x60
 800c98e:	e00f      	b.n	800c9b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a58      	ldr	r2, [pc, #352]	; (800caf8 <HAL_SD_GetCardCSD+0x344>)
 800c996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e09d      	b.n	800caec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9b4:	0b9b      	lsrs	r3, r3, #14
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c6:	09db      	lsrs	r3, r3, #7
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e8:	0fdb      	lsrs	r3, r3, #31
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f4:	0f5b      	lsrs	r3, r3, #29
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	f003 0303 	and.w	r3, r3, #3
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca06:	0e9b      	lsrs	r3, r3, #26
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca18:	0d9b      	lsrs	r3, r3, #22
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	f003 030f 	and.w	r3, r3, #15
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2a:	0d5b      	lsrs	r3, r3, #21
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	f003 0301 	and.w	r3, r3, #1
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca46:	0c1b      	lsrs	r3, r3, #16
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	f003 0301 	and.w	r3, r3, #1
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca5a:	0bdb      	lsrs	r3, r3, #15
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6e:	0b9b      	lsrs	r3, r3, #14
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0301 	and.w	r3, r3, #1
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca82:	0b5b      	lsrs	r3, r3, #13
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca96:	0b1b      	lsrs	r3, r3, #12
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caaa:	0a9b      	lsrs	r3, r3, #10
 800caac:	b2db      	uxtb	r3, r3
 800caae:	f003 0303 	and.w	r3, r3, #3
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabe:	0a1b      	lsrs	r3, r3, #8
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f003 0303 	and.w	r3, r3, #3
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad2:	085b      	lsrs	r3, r3, #1
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	004005ff 	.word	0x004005ff

0800cafc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb54:	b5b0      	push	{r4, r5, r7, lr}
 800cb56:	b08e      	sub	sp, #56	; 0x38
 800cb58:	af04      	add	r7, sp, #16
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2203      	movs	r2, #3
 800cb62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6a:	2b03      	cmp	r3, #3
 800cb6c:	d02e      	beq.n	800cbcc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb74:	d106      	bne.n	800cb84 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	639a      	str	r2, [r3, #56]	; 0x38
 800cb82:	e029      	b.n	800cbd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb8a:	d10a      	bne.n	800cba2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fb0f 	bl	800d1b0 <SD_WideBus_Enable>
 800cb92:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	639a      	str	r2, [r3, #56]	; 0x38
 800cba0:	e01a      	b.n	800cbd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10a      	bne.n	800cbbe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fb4c 	bl	800d246 <SD_WideBus_Disable>
 800cbae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	639a      	str	r2, [r3, #56]	; 0x38
 800cbbc:	e00c      	b.n	800cbd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	639a      	str	r2, [r3, #56]	; 0x38
 800cbca:	e005      	b.n	800cbd8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a18      	ldr	r2, [pc, #96]	; (800cc48 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800cbe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e024      	b.n	800cc3e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681d      	ldr	r5, [r3, #0]
 800cc1a:	466c      	mov	r4, sp
 800cc1c:	f107 0318 	add.w	r3, r7, #24
 800cc20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc28:	f107 030c 	add.w	r3, r7, #12
 800cc2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f002 fcb2 	bl	800f598 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3728      	adds	r7, #40	; 0x28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bdb0      	pop	{r4, r5, r7, pc}
 800cc46:	bf00      	nop
 800cc48:	004005ff 	.word	0x004005ff

0800cc4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cc58:	f107 030c 	add.w	r3, r7, #12
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 fa7e 	bl	800d160 <SD_SendStatus>
 800cc64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d005      	beq.n	800cc78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	431a      	orrs	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	0a5b      	lsrs	r3, r3, #9
 800cc7c:	f003 030f 	and.w	r3, r3, #15
 800cc80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc82:	693b      	ldr	r3, [r7, #16]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3718      	adds	r7, #24
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cca8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ccaa:	bf00      	nop
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc8:	2b82      	cmp	r3, #130	; 0x82
 800ccca:	d111      	bne.n	800ccf0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f002 fde7 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800ccd6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d008      	beq.n	800ccf0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	431a      	orrs	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f7ff fd58 	bl	800c7a0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f022 0208 	bic.w	r2, r2, #8
 800ccfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd08:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f003 fa3f 	bl	801019c <HAL_SD_RxCpltCallback>
#endif
}
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
	...

0800cd28 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7fd f848 	bl	8009dcc <HAL_DMA_GetError>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d03e      	beq.n	800cdc0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd48:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd50:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d002      	beq.n	800cd5e <SD_DMAError+0x36>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d12d      	bne.n	800cdba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a19      	ldr	r2, [pc, #100]	; (800cdc8 <SD_DMAError+0xa0>)
 800cd64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cd74:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cd82:	6978      	ldr	r0, [r7, #20]
 800cd84:	f7ff ff62 	bl	800cc4c <HAL_SD_GetCardState>
 800cd88:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b06      	cmp	r3, #6
 800cd8e:	d002      	beq.n	800cd96 <SD_DMAError+0x6e>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	d10a      	bne.n	800cdac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f002 fd82 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800cda0:	4602      	mov	r2, r0
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda6:	431a      	orrs	r2, r3
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f7ff fcf0 	bl	800c7a0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800cdc0:	bf00      	nop
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	004005ff 	.word	0x004005ff

0800cdcc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f240 523a 	movw	r2, #1338	; 0x53a
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7ff ff31 	bl	800cc4c <HAL_SD_GetCardState>
 800cdea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2b06      	cmp	r3, #6
 800cdfe:	d002      	beq.n	800ce06 <SD_DMATxAbort+0x3a>
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2b05      	cmp	r3, #5
 800ce04:	d10a      	bne.n	800ce1c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f002 fd4a 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800ce10:	4602      	mov	r2, r0
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce16:	431a      	orrs	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d103      	bne.n	800ce2c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f003 f9a5 	bl	8010174 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ce2a:	e002      	b.n	800ce32 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f7ff fcb7 	bl	800c7a0 <HAL_SD_ErrorCallback>
}
 800ce32:	bf00      	nop
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b084      	sub	sp, #16
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce46:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce50:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f7ff fefa 	bl	800cc4c <HAL_SD_GetCardState>
 800ce58:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b06      	cmp	r3, #6
 800ce6c:	d002      	beq.n	800ce74 <SD_DMARxAbort+0x3a>
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	2b05      	cmp	r3, #5
 800ce72:	d10a      	bne.n	800ce8a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f002 fd13 	bl	800f8a4 <SDMMC_CmdStopTransfer>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce84:	431a      	orrs	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d103      	bne.n	800ce9a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f003 f96e 	bl	8010174 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ce98:	e002      	b.n	800cea0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7ff fc80 	bl	800c7a0 <HAL_SD_ErrorCallback>
}
 800cea0:	bf00      	nop
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cea8:	b5b0      	push	{r4, r5, r7, lr}
 800ceaa:	b094      	sub	sp, #80	; 0x50
 800ceac:	af04      	add	r7, sp, #16
 800ceae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f002 fbc5 	bl	800f648 <SDIO_GetPowerState>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cec4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cec8:	e0b7      	b.n	800d03a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d02f      	beq.n	800cf32 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f002 fdee 	bl	800fab8 <SDMMC_CmdSendCID>
 800cedc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <SD_InitCard+0x40>
    {
      return errorstate;
 800cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cee6:	e0a8      	b.n	800d03a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2100      	movs	r1, #0
 800ceee:	4618      	mov	r0, r3
 800cef0:	f002 fbef 	bl	800f6d2 <SDIO_GetResponse>
 800cef4:	4602      	mov	r2, r0
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2104      	movs	r1, #4
 800cf00:	4618      	mov	r0, r3
 800cf02:	f002 fbe6 	bl	800f6d2 <SDIO_GetResponse>
 800cf06:	4602      	mov	r2, r0
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2108      	movs	r1, #8
 800cf12:	4618      	mov	r0, r3
 800cf14:	f002 fbdd 	bl	800f6d2 <SDIO_GetResponse>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	210c      	movs	r1, #12
 800cf24:	4618      	mov	r0, r3
 800cf26:	f002 fbd4 	bl	800f6d2 <SDIO_GetResponse>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	d00d      	beq.n	800cf56 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f107 020e 	add.w	r2, r7, #14
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f002 fdf4 	bl	800fb32 <SDMMC_CmdSetRelAdd>
 800cf4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <SD_InitCard+0xae>
    {
      return errorstate;
 800cf52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf54:	e071      	b.n	800d03a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	d036      	beq.n	800cfcc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cf5e:	89fb      	ldrh	r3, [r7, #14]
 800cf60:	461a      	mov	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf6e:	041b      	lsls	r3, r3, #16
 800cf70:	4619      	mov	r1, r3
 800cf72:	4610      	mov	r0, r2
 800cf74:	f002 fdbe 	bl	800faf4 <SDMMC_CmdSendCSD>
 800cf78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cf80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf82:	e05a      	b.n	800d03a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2100      	movs	r1, #0
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f002 fba1 	bl	800f6d2 <SDIO_GetResponse>
 800cf90:	4602      	mov	r2, r0
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f002 fb98 	bl	800f6d2 <SDIO_GetResponse>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2108      	movs	r1, #8
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f002 fb8f 	bl	800f6d2 <SDIO_GetResponse>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	210c      	movs	r1, #12
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f002 fb86 	bl	800f6d2 <SDIO_GetResponse>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2104      	movs	r1, #4
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f002 fb7d 	bl	800f6d2 <SDIO_GetResponse>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	0d1a      	lsrs	r2, r3, #20
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cfe0:	f107 0310 	add.w	r3, r7, #16
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff fbe4 	bl	800c7b4 <HAL_SD_GetCardCSD>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cff2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cff6:	e020      	b.n	800d03a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6819      	ldr	r1, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d000:	041b      	lsls	r3, r3, #16
 800d002:	f04f 0400 	mov.w	r4, #0
 800d006:	461a      	mov	r2, r3
 800d008:	4623      	mov	r3, r4
 800d00a:	4608      	mov	r0, r1
 800d00c:	f002 fc6c 	bl	800f8e8 <SDMMC_CmdSelDesel>
 800d010:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <SD_InitCard+0x174>
  {
    return errorstate;
 800d018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01a:	e00e      	b.n	800d03a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681d      	ldr	r5, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	466c      	mov	r4, sp
 800d024:	f103 0210 	add.w	r2, r3, #16
 800d028:	ca07      	ldmia	r2, {r0, r1, r2}
 800d02a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d02e:	3304      	adds	r3, #4
 800d030:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d032:	4628      	mov	r0, r5
 800d034:	f002 fab0 	bl	800f598 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3740      	adds	r7, #64	; 0x40
 800d03e:	46bd      	mov	sp, r7
 800d040:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d044 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
 800d054:	2300      	movs	r3, #0
 800d056:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f002 fc66 	bl	800f92e <SDMMC_CmdGoIdleState>
 800d062:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	e072      	b.n	800d154 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4618      	mov	r0, r3
 800d074:	f002 fc79 	bl	800f96a <SDMMC_CmdOperCond>
 800d078:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00d      	beq.n	800d09c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f002 fc4f 	bl	800f92e <SDMMC_CmdGoIdleState>
 800d090:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d004      	beq.n	800d0a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	e05b      	b.n	800d154 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d137      	bne.n	800d11a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f002 fc79 	bl	800f9a8 <SDMMC_CmdAppCommand>
 800d0b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d02d      	beq.n	800d11a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0c2:	e047      	b.n	800d154 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f002 fc6c 	bl	800f9a8 <SDMMC_CmdAppCommand>
 800d0d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <SD_PowerON+0x98>
    {
      return errorstate;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	e03b      	b.n	800d154 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	491e      	ldr	r1, [pc, #120]	; (800d15c <SD_PowerON+0x118>)
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f002 fc82 	bl	800f9ec <SDMMC_CmdAppOperCommand>
 800d0e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0f4:	e02e      	b.n	800d154 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f002 fae8 	bl	800f6d2 <SDIO_GetResponse>
 800d102:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	0fdb      	lsrs	r3, r3, #31
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d101      	bne.n	800d110 <SD_PowerON+0xcc>
 800d10c:	2301      	movs	r3, #1
 800d10e:	e000      	b.n	800d112 <SD_PowerON+0xce>
 800d110:	2300      	movs	r3, #0
 800d112:	613b      	str	r3, [r7, #16]

    count++;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	3301      	adds	r3, #1
 800d118:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d120:	4293      	cmp	r3, r2
 800d122:	d802      	bhi.n	800d12a <SD_PowerON+0xe6>
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0cc      	beq.n	800d0c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d130:	4293      	cmp	r3, r2
 800d132:	d902      	bls.n	800d13a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d138:	e00c      	b.n	800d154 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d003      	beq.n	800d14c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	645a      	str	r2, [r3, #68]	; 0x44
 800d14a:	e002      	b.n	800d152 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	c1100000 	.word	0xc1100000

0800d160 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d102      	bne.n	800d176 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d174:	e018      	b.n	800d1a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d17e:	041b      	lsls	r3, r3, #16
 800d180:	4619      	mov	r1, r3
 800d182:	4610      	mov	r0, r2
 800d184:	f002 fcf6 	bl	800fb74 <SDMMC_CmdSendStatus>
 800d188:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	e009      	b.n	800d1a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2100      	movs	r1, #0
 800d19a:	4618      	mov	r0, r3
 800d19c:	f002 fa99 	bl	800f6d2 <SDIO_GetResponse>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f002 fa83 	bl	800f6d2 <SDIO_GetResponse>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1d6:	d102      	bne.n	800d1de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d1d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1dc:	e02f      	b.n	800d23e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d1de:	f107 030c 	add.w	r3, r7, #12
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f879 	bl	800d2dc <SD_FindSCR>
 800d1ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	e023      	b.n	800d23e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d01c      	beq.n	800d23a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d208:	041b      	lsls	r3, r3, #16
 800d20a:	4619      	mov	r1, r3
 800d20c:	4610      	mov	r0, r2
 800d20e:	f002 fbcb 	bl	800f9a8 <SDMMC_CmdAppCommand>
 800d212:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	e00f      	b.n	800d23e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2102      	movs	r1, #2
 800d224:	4618      	mov	r0, r3
 800d226:	f002 fc04 	bl	800fa32 <SDMMC_CmdBusWidth>
 800d22a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	e003      	b.n	800d23e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d236:	2300      	movs	r3, #0
 800d238:	e001      	b.n	800d23e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d23a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b086      	sub	sp, #24
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d24e:	2300      	movs	r3, #0
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	2300      	movs	r3, #0
 800d254:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2100      	movs	r1, #0
 800d25c:	4618      	mov	r0, r3
 800d25e:	f002 fa38 	bl	800f6d2 <SDIO_GetResponse>
 800d262:	4603      	mov	r3, r0
 800d264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d26c:	d102      	bne.n	800d274 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d26e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d272:	e02f      	b.n	800d2d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d274:	f107 030c 	add.w	r3, r7, #12
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f82e 	bl	800d2dc <SD_FindSCR>
 800d280:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d001      	beq.n	800d28c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	e023      	b.n	800d2d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d01c      	beq.n	800d2d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d29e:	041b      	lsls	r3, r3, #16
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	4610      	mov	r0, r2
 800d2a4:	f002 fb80 	bl	800f9a8 <SDMMC_CmdAppCommand>
 800d2a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	e00f      	b.n	800d2d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f002 fbb9 	bl	800fa32 <SDMMC_CmdBusWidth>
 800d2c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d001      	beq.n	800d2cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	e003      	b.n	800d2d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	e001      	b.n	800d2d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3718      	adds	r7, #24
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d2dc:	b590      	push	{r4, r7, lr}
 800d2de:	b08f      	sub	sp, #60	; 0x3c
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d2e6:	f7fb fd7b 	bl	8008de0 <HAL_GetTick>
 800d2ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60bb      	str	r3, [r7, #8]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2108      	movs	r1, #8
 800d302:	4618      	mov	r0, r3
 800d304:	f002 fa24 	bl	800f750 <SDMMC_CmdBlockLength>
 800d308:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	e0a9      	b.n	800d468 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d31c:	041b      	lsls	r3, r3, #16
 800d31e:	4619      	mov	r1, r3
 800d320:	4610      	mov	r0, r2
 800d322:	f002 fb41 	bl	800f9a8 <SDMMC_CmdAppCommand>
 800d326:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d001      	beq.n	800d332 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d330:	e09a      	b.n	800d468 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d332:	f04f 33ff 	mov.w	r3, #4294967295
 800d336:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d338:	2308      	movs	r3, #8
 800d33a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d33c:	2330      	movs	r3, #48	; 0x30
 800d33e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d340:	2302      	movs	r3, #2
 800d342:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d344:	2300      	movs	r3, #0
 800d346:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d348:	2301      	movs	r3, #1
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f107 0210 	add.w	r2, r7, #16
 800d354:	4611      	mov	r1, r2
 800d356:	4618      	mov	r0, r3
 800d358:	f002 f9ce 	bl	800f6f8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4618      	mov	r0, r3
 800d362:	f002 fb88 	bl	800fa76 <SDMMC_CmdSendSCR>
 800d366:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d022      	beq.n	800d3b4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	e07a      	b.n	800d468 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00e      	beq.n	800d39e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	f107 0208 	add.w	r2, r7, #8
 800d38c:	18d4      	adds	r4, r2, r3
 800d38e:	4608      	mov	r0, r1
 800d390:	f002 f92d 	bl	800f5ee <SDIO_ReadFIFO>
 800d394:	4603      	mov	r3, r0
 800d396:	6023      	str	r3, [r4, #0]
      index++;
 800d398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39a:	3301      	adds	r3, #1
 800d39c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d39e:	f7fb fd1f 	bl	8008de0 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ac:	d102      	bne.n	800d3b4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d3ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3b2:	e059      	b.n	800d468 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3ba:	f240 432a 	movw	r3, #1066	; 0x42a
 800d3be:	4013      	ands	r3, r2
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0d6      	beq.n	800d372 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ca:	f003 0308 	and.w	r3, r3, #8
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d005      	beq.n	800d3de <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2208      	movs	r2, #8
 800d3d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d3da:	2308      	movs	r3, #8
 800d3dc:	e044      	b.n	800d468 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d005      	beq.n	800d3f8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	e037      	b.n	800d468 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fe:	f003 0320 	and.w	r3, r3, #32
 800d402:	2b00      	cmp	r3, #0
 800d404:	d005      	beq.n	800d412 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2220      	movs	r2, #32
 800d40c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d40e:	2320      	movs	r3, #32
 800d410:	e02a      	b.n	800d468 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f240 523a 	movw	r2, #1338	; 0x53a
 800d41a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	061a      	lsls	r2, r3, #24
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	021b      	lsls	r3, r3, #8
 800d424:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d428:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	0a1b      	lsrs	r3, r3, #8
 800d42e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d432:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	0e1b      	lsrs	r3, r3, #24
 800d438:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	601a      	str	r2, [r3, #0]
    scr++;
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	3304      	adds	r3, #4
 800d442:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	061a      	lsls	r2, r3, #24
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d450:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	0a1b      	lsrs	r3, r3, #8
 800d456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d45a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	0e1b      	lsrs	r3, r3, #24
 800d460:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	373c      	adds	r7, #60	; 0x3c
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd90      	pop	{r4, r7, pc}

0800d470 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d482:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d03f      	beq.n	800d50a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d48a:	2300      	movs	r3, #0
 800d48c:	617b      	str	r3, [r7, #20]
 800d48e:	e033      	b.n	800d4f8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4618      	mov	r0, r3
 800d496:	f002 f8aa 	bl	800f5ee <SDIO_ReadFIFO>
 800d49a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	0a1b      	lsrs	r3, r3, #8
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	0c1b      	lsrs	r3, r3, #16
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	0e1b      	lsrs	r3, r3, #24
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	617b      	str	r3, [r7, #20]
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	2b07      	cmp	r3, #7
 800d4fc:	d9c8      	bls.n	800d490 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d50a:	bf00      	nop
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d524:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d043      	beq.n	800d5b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d52c:	2300      	movs	r3, #0
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	e037      	b.n	800d5a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	3301      	adds	r3, #1
 800d53c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	3b01      	subs	r3, #1
 800d542:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	021a      	lsls	r2, r3, #8
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3301      	adds	r3, #1
 800d554:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	3b01      	subs	r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	041a      	lsls	r2, r3, #16
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	4313      	orrs	r3, r2
 800d566:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3301      	adds	r3, #1
 800d56c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	3b01      	subs	r3, #1
 800d572:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	061a      	lsls	r2, r3, #24
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3301      	adds	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	3b01      	subs	r3, #1
 800d58a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f107 0208 	add.w	r2, r7, #8
 800d594:	4611      	mov	r1, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f002 f836 	bl	800f608 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	617b      	str	r3, [r7, #20]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b07      	cmp	r3, #7
 800d5a6:	d9c4      	bls.n	800d532 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d101      	bne.n	800d5ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e056      	b.n	800d67c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f9 fa63 	bl	8006ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d604:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	431a      	orrs	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	431a      	orrs	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	431a      	orrs	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	695b      	ldr	r3, [r3, #20]
 800d620:	431a      	orrs	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	699b      	ldr	r3, [r3, #24]
 800d626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d62a:	431a      	orrs	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	69db      	ldr	r3, [r3, #28]
 800d630:	431a      	orrs	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a1b      	ldr	r3, [r3, #32]
 800d636:	ea42 0103 	orr.w	r1, r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	430a      	orrs	r2, r1
 800d644:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	699b      	ldr	r3, [r3, #24]
 800d64a:	0c1b      	lsrs	r3, r3, #16
 800d64c:	f003 0104 	and.w	r1, r3, #4
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	430a      	orrs	r2, r1
 800d65a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	69da      	ldr	r2, [r3, #28]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d66a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2201      	movs	r2, #1
 800d676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b088      	sub	sp, #32
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	603b      	str	r3, [r7, #0]
 800d690:	4613      	mov	r3, r2
 800d692:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d101      	bne.n	800d6a6 <HAL_SPI_Transmit+0x22>
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	e11e      	b.n	800d8e4 <HAL_SPI_Transmit+0x260>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6ae:	f7fb fb97 	bl	8008de0 <HAL_GetTick>
 800d6b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d6b4:	88fb      	ldrh	r3, [r7, #6]
 800d6b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d002      	beq.n	800d6ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6c8:	e103      	b.n	800d8d2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <HAL_SPI_Transmit+0x52>
 800d6d0:	88fb      	ldrh	r3, [r7, #6]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d102      	bne.n	800d6dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d6da:	e0fa      	b.n	800d8d2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2203      	movs	r2, #3
 800d6e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	88fa      	ldrh	r2, [r7, #6]
 800d6f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	88fa      	ldrh	r2, [r7, #6]
 800d6fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d722:	d107      	bne.n	800d734 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d732:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d73e:	2b40      	cmp	r3, #64	; 0x40
 800d740:	d007      	beq.n	800d752 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d75a:	d14b      	bne.n	800d7f4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <HAL_SPI_Transmit+0xe6>
 800d764:	8afb      	ldrh	r3, [r7, #22]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d13e      	bne.n	800d7e8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76e:	881a      	ldrh	r2, [r3, #0]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77a:	1c9a      	adds	r2, r3, #2
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d78e:	e02b      	b.n	800d7e8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f003 0302 	and.w	r3, r3, #2
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d112      	bne.n	800d7c4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a2:	881a      	ldrh	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ae:	1c9a      	adds	r2, r3, #2
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	86da      	strh	r2, [r3, #54]	; 0x36
 800d7c2:	e011      	b.n	800d7e8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7c4:	f7fb fb0c 	bl	8008de0 <HAL_GetTick>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d803      	bhi.n	800d7dc <HAL_SPI_Transmit+0x158>
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7da:	d102      	bne.n	800d7e2 <HAL_SPI_Transmit+0x15e>
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d102      	bne.n	800d7e8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d7e6:	e074      	b.n	800d8d2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1ce      	bne.n	800d790 <HAL_SPI_Transmit+0x10c>
 800d7f2:	e04c      	b.n	800d88e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <HAL_SPI_Transmit+0x17e>
 800d7fc:	8afb      	ldrh	r3, [r7, #22]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d140      	bne.n	800d884 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	330c      	adds	r3, #12
 800d80c:	7812      	ldrb	r2, [r2, #0]
 800d80e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d81e:	b29b      	uxth	r3, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	b29a      	uxth	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d828:	e02c      	b.n	800d884 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	f003 0302 	and.w	r3, r3, #2
 800d834:	2b02      	cmp	r3, #2
 800d836:	d113      	bne.n	800d860 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	330c      	adds	r3, #12
 800d842:	7812      	ldrb	r2, [r2, #0]
 800d844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d84a:	1c5a      	adds	r2, r3, #1
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d854:	b29b      	uxth	r3, r3
 800d856:	3b01      	subs	r3, #1
 800d858:	b29a      	uxth	r2, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	86da      	strh	r2, [r3, #54]	; 0x36
 800d85e:	e011      	b.n	800d884 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d860:	f7fb fabe 	bl	8008de0 <HAL_GetTick>
 800d864:	4602      	mov	r2, r0
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d803      	bhi.n	800d878 <HAL_SPI_Transmit+0x1f4>
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d876:	d102      	bne.n	800d87e <HAL_SPI_Transmit+0x1fa>
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d102      	bne.n	800d884 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d87e:	2303      	movs	r3, #3
 800d880:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d882:	e026      	b.n	800d8d2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d888:	b29b      	uxth	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1cd      	bne.n	800d82a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d88e:	69ba      	ldr	r2, [r7, #24]
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f000 fba4 	bl	800dfe0 <SPI_EndRxTxTransaction>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d002      	beq.n	800d8a4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2220      	movs	r2, #32
 800d8a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	613b      	str	r3, [r7, #16]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	613b      	str	r3, [r7, #16]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d002      	beq.n	800d8d0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	77fb      	strb	r3, [r7, #31]
 800d8ce:	e000      	b.n	800d8d2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d8d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d8e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3720      	adds	r7, #32
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af02      	add	r7, sp, #8
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	603b      	str	r3, [r7, #0]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d908:	d112      	bne.n	800d930 <HAL_SPI_Receive+0x44>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10e      	bne.n	800d930 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2204      	movs	r2, #4
 800d916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d91a:	88fa      	ldrh	r2, [r7, #6]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	4613      	mov	r3, r2
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	68b9      	ldr	r1, [r7, #8]
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 f8e9 	bl	800dafe <HAL_SPI_TransmitReceive>
 800d92c:	4603      	mov	r3, r0
 800d92e:	e0e2      	b.n	800daf6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d936:	2b01      	cmp	r3, #1
 800d938:	d101      	bne.n	800d93e <HAL_SPI_Receive+0x52>
 800d93a:	2302      	movs	r3, #2
 800d93c:	e0db      	b.n	800daf6 <HAL_SPI_Receive+0x20a>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2201      	movs	r2, #1
 800d942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d946:	f7fb fa4b 	bl	8008de0 <HAL_GetTick>
 800d94a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d952:	b2db      	uxtb	r3, r3
 800d954:	2b01      	cmp	r3, #1
 800d956:	d002      	beq.n	800d95e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d958:	2302      	movs	r3, #2
 800d95a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d95c:	e0c2      	b.n	800dae4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <HAL_SPI_Receive+0x7e>
 800d964:	88fb      	ldrh	r3, [r7, #6]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d102      	bne.n	800d970 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d96e:	e0b9      	b.n	800dae4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2204      	movs	r2, #4
 800d974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	88fa      	ldrh	r2, [r7, #6]
 800d988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	88fa      	ldrh	r2, [r7, #6]
 800d98e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9b6:	d107      	bne.n	800d9c8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d9c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d2:	2b40      	cmp	r3, #64	; 0x40
 800d9d4:	d007      	beq.n	800d9e6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d162      	bne.n	800dab4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d9ee:	e02e      	b.n	800da4e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d115      	bne.n	800da2a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f103 020c 	add.w	r2, r3, #12
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0a:	7812      	ldrb	r2, [r2, #0]
 800da0c:	b2d2      	uxtb	r2, r2
 800da0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da14:	1c5a      	adds	r2, r3, #1
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da1e:	b29b      	uxth	r3, r3
 800da20:	3b01      	subs	r3, #1
 800da22:	b29a      	uxth	r2, r3
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da28:	e011      	b.n	800da4e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da2a:	f7fb f9d9 	bl	8008de0 <HAL_GetTick>
 800da2e:	4602      	mov	r2, r0
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d803      	bhi.n	800da42 <HAL_SPI_Receive+0x156>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da40:	d102      	bne.n	800da48 <HAL_SPI_Receive+0x15c>
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800da48:	2303      	movs	r3, #3
 800da4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800da4c:	e04a      	b.n	800dae4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da52:	b29b      	uxth	r3, r3
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1cb      	bne.n	800d9f0 <HAL_SPI_Receive+0x104>
 800da58:	e031      	b.n	800dabe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b01      	cmp	r3, #1
 800da66:	d113      	bne.n	800da90 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68da      	ldr	r2, [r3, #12]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da72:	b292      	uxth	r2, r2
 800da74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7a:	1c9a      	adds	r2, r3, #2
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da84:	b29b      	uxth	r3, r3
 800da86:	3b01      	subs	r3, #1
 800da88:	b29a      	uxth	r2, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da8e:	e011      	b.n	800dab4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da90:	f7fb f9a6 	bl	8008de0 <HAL_GetTick>
 800da94:	4602      	mov	r2, r0
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	683a      	ldr	r2, [r7, #0]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d803      	bhi.n	800daa8 <HAL_SPI_Receive+0x1bc>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa6:	d102      	bne.n	800daae <HAL_SPI_Receive+0x1c2>
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d102      	bne.n	800dab4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800daae:	2303      	movs	r3, #3
 800dab0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dab2:	e017      	b.n	800dae4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dab8:	b29b      	uxth	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1cd      	bne.n	800da5a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dabe:	693a      	ldr	r2, [r7, #16]
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f000 fa27 	bl	800df16 <SPI_EndRxTransaction>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d002      	beq.n	800dad4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2220      	movs	r2, #32
 800dad2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	75fb      	strb	r3, [r7, #23]
 800dae0:	e000      	b.n	800dae4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800dae2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b08c      	sub	sp, #48	; 0x30
 800db02:	af00      	add	r7, sp, #0
 800db04:	60f8      	str	r0, [r7, #12]
 800db06:	60b9      	str	r1, [r7, #8]
 800db08:	607a      	str	r2, [r7, #4]
 800db0a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db0c:	2301      	movs	r3, #1
 800db0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d101      	bne.n	800db24 <HAL_SPI_TransmitReceive+0x26>
 800db20:	2302      	movs	r3, #2
 800db22:	e18a      	b.n	800de3a <HAL_SPI_TransmitReceive+0x33c>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db2c:	f7fb f958 	bl	8008de0 <HAL_GetTick>
 800db30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800db42:	887b      	ldrh	r3, [r7, #2]
 800db44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d00f      	beq.n	800db6e <HAL_SPI_TransmitReceive+0x70>
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db54:	d107      	bne.n	800db66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d103      	bne.n	800db66 <HAL_SPI_TransmitReceive+0x68>
 800db5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db62:	2b04      	cmp	r3, #4
 800db64:	d003      	beq.n	800db6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800db66:	2302      	movs	r3, #2
 800db68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db6c:	e15b      	b.n	800de26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <HAL_SPI_TransmitReceive+0x82>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d002      	beq.n	800db80 <HAL_SPI_TransmitReceive+0x82>
 800db7a:	887b      	ldrh	r3, [r7, #2]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800db86:	e14e      	b.n	800de26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b04      	cmp	r3, #4
 800db92:	d003      	beq.n	800db9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2205      	movs	r2, #5
 800db98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2200      	movs	r2, #0
 800dba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	887a      	ldrh	r2, [r7, #2]
 800dbac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	887a      	ldrh	r2, [r7, #2]
 800dbb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	887a      	ldrh	r2, [r7, #2]
 800dbbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	887a      	ldrh	r2, [r7, #2]
 800dbc4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbdc:	2b40      	cmp	r3, #64	; 0x40
 800dbde:	d007      	beq.n	800dbf0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbf8:	d178      	bne.n	800dcec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <HAL_SPI_TransmitReceive+0x10a>
 800dc02:	8b7b      	ldrh	r3, [r7, #26]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d166      	bne.n	800dcd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0c:	881a      	ldrh	r2, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc18:	1c9a      	adds	r2, r3, #2
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	3b01      	subs	r3, #1
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc2c:	e053      	b.n	800dcd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	f003 0302 	and.w	r3, r3, #2
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d11b      	bne.n	800dc74 <HAL_SPI_TransmitReceive+0x176>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d016      	beq.n	800dc74 <HAL_SPI_TransmitReceive+0x176>
 800dc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d113      	bne.n	800dc74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc50:	881a      	ldrh	r2, [r3, #0]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc5c:	1c9a      	adds	r2, r3, #2
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc70:	2300      	movs	r3, #0
 800dc72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	f003 0301 	and.w	r3, r3, #1
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d119      	bne.n	800dcb6 <HAL_SPI_TransmitReceive+0x1b8>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d014      	beq.n	800dcb6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68da      	ldr	r2, [r3, #12]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc96:	b292      	uxth	r2, r2
 800dc98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	1c9a      	adds	r2, r3, #2
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dcb6:	f7fb f893 	bl	8008de0 <HAL_GetTick>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d807      	bhi.n	800dcd6 <HAL_SPI_TransmitReceive+0x1d8>
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dccc:	d003      	beq.n	800dcd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dcd4:	e0a7      	b.n	800de26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1a6      	bne.n	800dc2e <HAL_SPI_TransmitReceive+0x130>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1a1      	bne.n	800dc2e <HAL_SPI_TransmitReceive+0x130>
 800dcea:	e07c      	b.n	800dde6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d002      	beq.n	800dcfa <HAL_SPI_TransmitReceive+0x1fc>
 800dcf4:	8b7b      	ldrh	r3, [r7, #26]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d16b      	bne.n	800ddd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	330c      	adds	r3, #12
 800dd04:	7812      	ldrb	r2, [r2, #0]
 800dd06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd20:	e057      	b.n	800ddd2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	689b      	ldr	r3, [r3, #8]
 800dd28:	f003 0302 	and.w	r3, r3, #2
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d11c      	bne.n	800dd6a <HAL_SPI_TransmitReceive+0x26c>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d017      	beq.n	800dd6a <HAL_SPI_TransmitReceive+0x26c>
 800dd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d114      	bne.n	800dd6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	330c      	adds	r3, #12
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d119      	bne.n	800ddac <HAL_SPI_TransmitReceive+0x2ae>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d014      	beq.n	800ddac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd8c:	b2d2      	uxtb	r2, r2
 800dd8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	3b01      	subs	r3, #1
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ddac:	f7fb f818 	bl	8008de0 <HAL_GetTick>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d803      	bhi.n	800ddc4 <HAL_SPI_TransmitReceive+0x2c6>
 800ddbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc2:	d102      	bne.n	800ddca <HAL_SPI_TransmitReceive+0x2cc>
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d103      	bne.n	800ddd2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ddd0:	e029      	b.n	800de26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1a2      	bne.n	800dd22 <HAL_SPI_TransmitReceive+0x224>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d19d      	bne.n	800dd22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dde8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 f8f8 	bl	800dfe0 <SPI_EndRxTxTransaction>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d006      	beq.n	800de04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2220      	movs	r2, #32
 800de00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800de02:	e010      	b.n	800de26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10b      	bne.n	800de24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de0c:	2300      	movs	r3, #0
 800de0e:	617b      	str	r3, [r7, #20]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	617b      	str	r3, [r7, #20]
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	e000      	b.n	800de26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800de24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800de36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3730      	adds	r7, #48	; 0x30
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b084      	sub	sp, #16
 800de46:	af00      	add	r7, sp, #0
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	603b      	str	r3, [r7, #0]
 800de4e:	4613      	mov	r3, r2
 800de50:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de52:	e04c      	b.n	800deee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5a:	d048      	beq.n	800deee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800de5c:	f7fa ffc0 	bl	8008de0 <HAL_GetTick>
 800de60:	4602      	mov	r2, r0
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	683a      	ldr	r2, [r7, #0]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d902      	bls.n	800de72 <SPI_WaitFlagStateUntilTimeout+0x30>
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d13d      	bne.n	800deee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	685a      	ldr	r2, [r3, #4]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de8a:	d111      	bne.n	800deb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de94:	d004      	beq.n	800dea0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de9e:	d107      	bne.n	800deb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800deb8:	d10f      	bne.n	800deda <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ded8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2201      	movs	r2, #1
 800dede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e00f      	b.n	800df0e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	689a      	ldr	r2, [r3, #8]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	4013      	ands	r3, r2
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	429a      	cmp	r2, r3
 800defc:	bf0c      	ite	eq
 800defe:	2301      	moveq	r3, #1
 800df00:	2300      	movne	r3, #0
 800df02:	b2db      	uxtb	r3, r3
 800df04:	461a      	mov	r2, r3
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d1a3      	bne.n	800de54 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b086      	sub	sp, #24
 800df1a:	af02      	add	r7, sp, #8
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df2a:	d111      	bne.n	800df50 <SPI_EndRxTransaction+0x3a>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df34:	d004      	beq.n	800df40 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df3e:	d107      	bne.n	800df50 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df4e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df58:	d12a      	bne.n	800dfb0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df62:	d012      	beq.n	800df8a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2200      	movs	r2, #0
 800df6c:	2180      	movs	r1, #128	; 0x80
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f7ff ff67 	bl	800de42 <SPI_WaitFlagStateUntilTimeout>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d02d      	beq.n	800dfd6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df7e:	f043 0220 	orr.w	r2, r3, #32
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800df86:	2303      	movs	r3, #3
 800df88:	e026      	b.n	800dfd8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	2200      	movs	r2, #0
 800df92:	2101      	movs	r1, #1
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f7ff ff54 	bl	800de42 <SPI_WaitFlagStateUntilTimeout>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d01a      	beq.n	800dfd6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa4:	f043 0220 	orr.w	r2, r3, #32
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dfac:	2303      	movs	r3, #3
 800dfae:	e013      	b.n	800dfd8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	2101      	movs	r1, #1
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f7ff ff41 	bl	800de42 <SPI_WaitFlagStateUntilTimeout>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d007      	beq.n	800dfd6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfca:	f043 0220 	orr.w	r2, r3, #32
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dfd2:	2303      	movs	r3, #3
 800dfd4:	e000      	b.n	800dfd8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af02      	add	r7, sp, #8
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dfec:	4b1b      	ldr	r3, [pc, #108]	; (800e05c <SPI_EndRxTxTransaction+0x7c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a1b      	ldr	r2, [pc, #108]	; (800e060 <SPI_EndRxTxTransaction+0x80>)
 800dff2:	fba2 2303 	umull	r2, r3, r2, r3
 800dff6:	0d5b      	lsrs	r3, r3, #21
 800dff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dffc:	fb02 f303 	mul.w	r3, r2, r3
 800e000:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e00a:	d112      	bne.n	800e032 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2200      	movs	r2, #0
 800e014:	2180      	movs	r1, #128	; 0x80
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7ff ff13 	bl	800de42 <SPI_WaitFlagStateUntilTimeout>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d016      	beq.n	800e050 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e026:	f043 0220 	orr.w	r2, r3, #32
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e02e:	2303      	movs	r3, #3
 800e030:	e00f      	b.n	800e052 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00a      	beq.n	800e04e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e048:	2b80      	cmp	r3, #128	; 0x80
 800e04a:	d0f2      	beq.n	800e032 <SPI_EndRxTxTransaction+0x52>
 800e04c:	e000      	b.n	800e050 <SPI_EndRxTxTransaction+0x70>
        break;
 800e04e:	bf00      	nop
  }

  return HAL_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3718      	adds	r7, #24
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20000000 	.word	0x20000000
 800e060:	165e9f81 	.word	0x165e9f81

0800e064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d101      	bne.n	800e076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e01d      	b.n	800e0b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7f8 fdce 	bl	8006c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2202      	movs	r2, #2
 800e094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f000 fb56 	bl	800e754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b085      	sub	sp, #20
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	68da      	ldr	r2, [r3, #12]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f042 0201 	orr.w	r2, r2, #1
 800e0d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	f003 0307 	and.w	r3, r3, #7
 800e0dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2b06      	cmp	r3, #6
 800e0e2:	d007      	beq.n	800e0f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f042 0201 	orr.w	r2, r2, #1
 800e0f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d101      	bne.n	800e114 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e01d      	b.n	800e150 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d106      	bne.n	800e12e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7f8 fd0b 	bl	8006b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2202      	movs	r2, #2
 800e132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	3304      	adds	r3, #4
 800e13e:	4619      	mov	r1, r3
 800e140:	4610      	mov	r0, r2
 800e142:	f000 fb07 	bl	800e754 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2201      	movs	r2, #1
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f000 fd42 	bl	800ebf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a15      	ldr	r2, [pc, #84]	; (800e1cc <HAL_TIM_PWM_Start+0x74>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d004      	beq.n	800e184 <HAL_TIM_PWM_Start+0x2c>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a14      	ldr	r2, [pc, #80]	; (800e1d0 <HAL_TIM_PWM_Start+0x78>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d101      	bne.n	800e188 <HAL_TIM_PWM_Start+0x30>
 800e184:	2301      	movs	r3, #1
 800e186:	e000      	b.n	800e18a <HAL_TIM_PWM_Start+0x32>
 800e188:	2300      	movs	r3, #0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e19c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	f003 0307 	and.w	r3, r3, #7
 800e1a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2b06      	cmp	r3, #6
 800e1ae:	d007      	beq.n	800e1c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0201 	orr.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	40010000 	.word	0x40010000
 800e1d0:	40010400 	.word	0x40010400

0800e1d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d101      	bne.n	800e1e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e083      	b.n	800e2f0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d106      	bne.n	800e202 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7f8 fda5 	bl	8006d4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2202      	movs	r2, #2
 800e206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	6812      	ldr	r2, [r2, #0]
 800e214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e218:	f023 0307 	bic.w	r3, r3, #7
 800e21c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	3304      	adds	r3, #4
 800e226:	4619      	mov	r1, r3
 800e228:	4610      	mov	r0, r2
 800e22a:	f000 fa93 	bl	800e754 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6a1b      	ldr	r3, [r3, #32]
 800e244:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	4313      	orrs	r3, r2
 800e24e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e256:	f023 0303 	bic.w	r3, r3, #3
 800e25a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	689a      	ldr	r2, [r3, #8]
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	4313      	orrs	r3, r2
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e274:	f023 030c 	bic.w	r3, r3, #12
 800e278:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	68da      	ldr	r2, [r3, #12]
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	69db      	ldr	r3, [r3, #28]
 800e28e:	021b      	lsls	r3, r3, #8
 800e290:	4313      	orrs	r3, r2
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	4313      	orrs	r3, r2
 800e296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	011a      	lsls	r2, r3, #4
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	6a1b      	ldr	r3, [r3, #32]
 800e2a2:	031b      	lsls	r3, r3, #12
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	693a      	ldr	r2, [r7, #16]
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e2b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e2ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	011b      	lsls	r3, r3, #4
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	697a      	ldr	r2, [r7, #20]
 800e2d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3718      	adds	r7, #24
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d002      	beq.n	800e30e <HAL_TIM_Encoder_Start+0x16>
 800e308:	2b04      	cmp	r3, #4
 800e30a:	d008      	beq.n	800e31e <HAL_TIM_Encoder_Start+0x26>
 800e30c:	e00f      	b.n	800e32e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2201      	movs	r2, #1
 800e314:	2100      	movs	r1, #0
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fc6c 	bl	800ebf4 <TIM_CCxChannelCmd>
      break;
 800e31c:	e016      	b.n	800e34c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2201      	movs	r2, #1
 800e324:	2104      	movs	r1, #4
 800e326:	4618      	mov	r0, r3
 800e328:	f000 fc64 	bl	800ebf4 <TIM_CCxChannelCmd>
      break;
 800e32c:	e00e      	b.n	800e34c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2201      	movs	r2, #1
 800e334:	2100      	movs	r1, #0
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fc5c 	bl	800ebf4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2201      	movs	r2, #1
 800e342:	2104      	movs	r1, #4
 800e344:	4618      	mov	r0, r3
 800e346:	f000 fc55 	bl	800ebf4 <TIM_CCxChannelCmd>
      break;
 800e34a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f042 0201 	orr.w	r2, r2, #1
 800e35a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b082      	sub	sp, #8
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	f003 0302 	and.w	r3, r3, #2
 800e378:	2b02      	cmp	r3, #2
 800e37a:	d122      	bne.n	800e3c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	2b02      	cmp	r3, #2
 800e388:	d11b      	bne.n	800e3c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f06f 0202 	mvn.w	r2, #2
 800e392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	f003 0303 	and.w	r3, r3, #3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d003      	beq.n	800e3b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f9b5 	bl	800e718 <HAL_TIM_IC_CaptureCallback>
 800e3ae:	e005      	b.n	800e3bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f9a7 	bl	800e704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 f9b8 	bl	800e72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	2b04      	cmp	r3, #4
 800e3ce:	d122      	bne.n	800e416 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f003 0304 	and.w	r3, r3, #4
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d11b      	bne.n	800e416 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f06f 0204 	mvn.w	r2, #4
 800e3e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f98b 	bl	800e718 <HAL_TIM_IC_CaptureCallback>
 800e402:	e005      	b.n	800e410 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f97d 	bl	800e704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f98e 	bl	800e72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	691b      	ldr	r3, [r3, #16]
 800e41c:	f003 0308 	and.w	r3, r3, #8
 800e420:	2b08      	cmp	r3, #8
 800e422:	d122      	bne.n	800e46a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b08      	cmp	r3, #8
 800e430:	d11b      	bne.n	800e46a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f06f 0208 	mvn.w	r2, #8
 800e43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2204      	movs	r2, #4
 800e440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	69db      	ldr	r3, [r3, #28]
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d003      	beq.n	800e458 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f961 	bl	800e718 <HAL_TIM_IC_CaptureCallback>
 800e456:	e005      	b.n	800e464 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f953 	bl	800e704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f964 	bl	800e72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	691b      	ldr	r3, [r3, #16]
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b10      	cmp	r3, #16
 800e476:	d122      	bne.n	800e4be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	f003 0310 	and.w	r3, r3, #16
 800e482:	2b10      	cmp	r3, #16
 800e484:	d11b      	bne.n	800e4be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f06f 0210 	mvn.w	r2, #16
 800e48e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2208      	movs	r2, #8
 800e494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d003      	beq.n	800e4ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f937 	bl	800e718 <HAL_TIM_IC_CaptureCallback>
 800e4aa:	e005      	b.n	800e4b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f929 	bl	800e704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f93a 	bl	800e72c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	f003 0301 	and.w	r3, r3, #1
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d10e      	bne.n	800e4ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d107      	bne.n	800e4ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f06f 0201 	mvn.w	r2, #1
 800e4e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7f7 f91b 	bl	8005720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f4:	2b80      	cmp	r3, #128	; 0x80
 800e4f6:	d10e      	bne.n	800e516 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e502:	2b80      	cmp	r3, #128	; 0x80
 800e504:	d107      	bne.n	800e516 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fc6d 	bl	800edf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e520:	2b40      	cmp	r3, #64	; 0x40
 800e522:	d10e      	bne.n	800e542 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52e:	2b40      	cmp	r3, #64	; 0x40
 800e530:	d107      	bne.n	800e542 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e53a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f8ff 	bl	800e740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	f003 0320 	and.w	r3, r3, #32
 800e54c:	2b20      	cmp	r3, #32
 800e54e:	d10e      	bne.n	800e56e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	f003 0320 	and.w	r3, r3, #32
 800e55a:	2b20      	cmp	r3, #32
 800e55c:	d107      	bne.n	800e56e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f06f 0220 	mvn.w	r2, #32
 800e566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 fc37 	bl	800eddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e56e:	bf00      	nop
 800e570:	3708      	adds	r7, #8
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
	...

0800e578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	60b9      	str	r1, [r7, #8]
 800e582:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d101      	bne.n	800e592 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e58e:	2302      	movs	r3, #2
 800e590:	e0b4      	b.n	800e6fc <HAL_TIM_PWM_ConfigChannel+0x184>
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2202      	movs	r2, #2
 800e59e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b0c      	cmp	r3, #12
 800e5a6:	f200 809f 	bhi.w	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e5aa:	a201      	add	r2, pc, #4	; (adr r2, 800e5b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b0:	0800e5e5 	.word	0x0800e5e5
 800e5b4:	0800e6e9 	.word	0x0800e6e9
 800e5b8:	0800e6e9 	.word	0x0800e6e9
 800e5bc:	0800e6e9 	.word	0x0800e6e9
 800e5c0:	0800e625 	.word	0x0800e625
 800e5c4:	0800e6e9 	.word	0x0800e6e9
 800e5c8:	0800e6e9 	.word	0x0800e6e9
 800e5cc:	0800e6e9 	.word	0x0800e6e9
 800e5d0:	0800e667 	.word	0x0800e667
 800e5d4:	0800e6e9 	.word	0x0800e6e9
 800e5d8:	0800e6e9 	.word	0x0800e6e9
 800e5dc:	0800e6e9 	.word	0x0800e6e9
 800e5e0:	0800e6a7 	.word	0x0800e6a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	68b9      	ldr	r1, [r7, #8]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 f952 	bl	800e894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	699a      	ldr	r2, [r3, #24]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f042 0208 	orr.w	r2, r2, #8
 800e5fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	699a      	ldr	r2, [r3, #24]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f022 0204 	bic.w	r2, r2, #4
 800e60e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6999      	ldr	r1, [r3, #24]
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	691a      	ldr	r2, [r3, #16]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	430a      	orrs	r2, r1
 800e620:	619a      	str	r2, [r3, #24]
      break;
 800e622:	e062      	b.n	800e6ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68b9      	ldr	r1, [r7, #8]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f000 f9a2 	bl	800e974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	699a      	ldr	r2, [r3, #24]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e63e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	699a      	ldr	r2, [r3, #24]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e64e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6999      	ldr	r1, [r3, #24]
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	021a      	lsls	r2, r3, #8
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	430a      	orrs	r2, r1
 800e662:	619a      	str	r2, [r3, #24]
      break;
 800e664:	e041      	b.n	800e6ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 f9f7 	bl	800ea60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	69da      	ldr	r2, [r3, #28]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f042 0208 	orr.w	r2, r2, #8
 800e680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69da      	ldr	r2, [r3, #28]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f022 0204 	bic.w	r2, r2, #4
 800e690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	69d9      	ldr	r1, [r3, #28]
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	691a      	ldr	r2, [r3, #16]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	430a      	orrs	r2, r1
 800e6a2:	61da      	str	r2, [r3, #28]
      break;
 800e6a4:	e021      	b.n	800e6ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68b9      	ldr	r1, [r7, #8]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fa4b 	bl	800eb48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	69da      	ldr	r2, [r3, #28]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	69da      	ldr	r2, [r3, #28]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	69d9      	ldr	r1, [r3, #28]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	021a      	lsls	r2, r3, #8
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	61da      	str	r2, [r3, #28]
      break;
 800e6e6:	e000      	b.n	800e6ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e6e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a40      	ldr	r2, [pc, #256]	; (800e868 <TIM_Base_SetConfig+0x114>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d013      	beq.n	800e794 <TIM_Base_SetConfig+0x40>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e772:	d00f      	beq.n	800e794 <TIM_Base_SetConfig+0x40>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a3d      	ldr	r2, [pc, #244]	; (800e86c <TIM_Base_SetConfig+0x118>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d00b      	beq.n	800e794 <TIM_Base_SetConfig+0x40>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a3c      	ldr	r2, [pc, #240]	; (800e870 <TIM_Base_SetConfig+0x11c>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d007      	beq.n	800e794 <TIM_Base_SetConfig+0x40>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a3b      	ldr	r2, [pc, #236]	; (800e874 <TIM_Base_SetConfig+0x120>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d003      	beq.n	800e794 <TIM_Base_SetConfig+0x40>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a3a      	ldr	r2, [pc, #232]	; (800e878 <TIM_Base_SetConfig+0x124>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d108      	bne.n	800e7a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e79a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a2f      	ldr	r2, [pc, #188]	; (800e868 <TIM_Base_SetConfig+0x114>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d02b      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7b4:	d027      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a2c      	ldr	r2, [pc, #176]	; (800e86c <TIM_Base_SetConfig+0x118>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d023      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a2b      	ldr	r2, [pc, #172]	; (800e870 <TIM_Base_SetConfig+0x11c>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d01f      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a2a      	ldr	r2, [pc, #168]	; (800e874 <TIM_Base_SetConfig+0x120>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d01b      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a29      	ldr	r2, [pc, #164]	; (800e878 <TIM_Base_SetConfig+0x124>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d017      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a28      	ldr	r2, [pc, #160]	; (800e87c <TIM_Base_SetConfig+0x128>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d013      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a27      	ldr	r2, [pc, #156]	; (800e880 <TIM_Base_SetConfig+0x12c>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d00f      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4a26      	ldr	r2, [pc, #152]	; (800e884 <TIM_Base_SetConfig+0x130>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d00b      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a25      	ldr	r2, [pc, #148]	; (800e888 <TIM_Base_SetConfig+0x134>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d007      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a24      	ldr	r2, [pc, #144]	; (800e88c <TIM_Base_SetConfig+0x138>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d003      	beq.n	800e806 <TIM_Base_SetConfig+0xb2>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4a23      	ldr	r2, [pc, #140]	; (800e890 <TIM_Base_SetConfig+0x13c>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d108      	bne.n	800e818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e80c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4313      	orrs	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	695b      	ldr	r3, [r3, #20]
 800e822:	4313      	orrs	r3, r2
 800e824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	689a      	ldr	r2, [r3, #8]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a0a      	ldr	r2, [pc, #40]	; (800e868 <TIM_Base_SetConfig+0x114>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d003      	beq.n	800e84c <TIM_Base_SetConfig+0xf8>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a0c      	ldr	r2, [pc, #48]	; (800e878 <TIM_Base_SetConfig+0x124>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d103      	bne.n	800e854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	691a      	ldr	r2, [r3, #16]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	615a      	str	r2, [r3, #20]
}
 800e85a:	bf00      	nop
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	40010000 	.word	0x40010000
 800e86c:	40000400 	.word	0x40000400
 800e870:	40000800 	.word	0x40000800
 800e874:	40000c00 	.word	0x40000c00
 800e878:	40010400 	.word	0x40010400
 800e87c:	40014000 	.word	0x40014000
 800e880:	40014400 	.word	0x40014400
 800e884:	40014800 	.word	0x40014800
 800e888:	40001800 	.word	0x40001800
 800e88c:	40001c00 	.word	0x40001c00
 800e890:	40002000 	.word	0x40002000

0800e894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e894:	b480      	push	{r7}
 800e896:	b087      	sub	sp, #28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a1b      	ldr	r3, [r3, #32]
 800e8a2:	f023 0201 	bic.w	r2, r3, #1
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a1b      	ldr	r3, [r3, #32]
 800e8ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	699b      	ldr	r3, [r3, #24]
 800e8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f023 0303 	bic.w	r3, r3, #3
 800e8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f023 0302 	bic.w	r3, r3, #2
 800e8dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	697a      	ldr	r2, [r7, #20]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a20      	ldr	r2, [pc, #128]	; (800e96c <TIM_OC1_SetConfig+0xd8>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d003      	beq.n	800e8f8 <TIM_OC1_SetConfig+0x64>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a1f      	ldr	r2, [pc, #124]	; (800e970 <TIM_OC1_SetConfig+0xdc>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d10c      	bne.n	800e912 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	f023 0308 	bic.w	r3, r3, #8
 800e8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	4313      	orrs	r3, r2
 800e908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f023 0304 	bic.w	r3, r3, #4
 800e910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a15      	ldr	r2, [pc, #84]	; (800e96c <TIM_OC1_SetConfig+0xd8>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d003      	beq.n	800e922 <TIM_OC1_SetConfig+0x8e>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a14      	ldr	r2, [pc, #80]	; (800e970 <TIM_OC1_SetConfig+0xdc>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d111      	bne.n	800e946 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	4313      	orrs	r3, r2
 800e93a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	693a      	ldr	r2, [r7, #16]
 800e942:	4313      	orrs	r3, r2
 800e944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	697a      	ldr	r2, [r7, #20]
 800e95e:	621a      	str	r2, [r3, #32]
}
 800e960:	bf00      	nop
 800e962:	371c      	adds	r7, #28
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	40010000 	.word	0x40010000
 800e970:	40010400 	.word	0x40010400

0800e974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e974:	b480      	push	{r7}
 800e976:	b087      	sub	sp, #28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6a1b      	ldr	r3, [r3, #32]
 800e982:	f023 0210 	bic.w	r2, r3, #16
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	699b      	ldr	r3, [r3, #24]
 800e99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	021b      	lsls	r3, r3, #8
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f023 0320 	bic.w	r3, r3, #32
 800e9be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	011b      	lsls	r3, r3, #4
 800e9c6:	697a      	ldr	r2, [r7, #20]
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a22      	ldr	r2, [pc, #136]	; (800ea58 <TIM_OC2_SetConfig+0xe4>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d003      	beq.n	800e9dc <TIM_OC2_SetConfig+0x68>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4a21      	ldr	r2, [pc, #132]	; (800ea5c <TIM_OC2_SetConfig+0xe8>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d10d      	bne.n	800e9f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	011b      	lsls	r3, r3, #4
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4a17      	ldr	r2, [pc, #92]	; (800ea58 <TIM_OC2_SetConfig+0xe4>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d003      	beq.n	800ea08 <TIM_OC2_SetConfig+0x94>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a16      	ldr	r2, [pc, #88]	; (800ea5c <TIM_OC2_SetConfig+0xe8>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d113      	bne.n	800ea30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	695b      	ldr	r3, [r3, #20]
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	693a      	ldr	r2, [r7, #16]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	693a      	ldr	r2, [r7, #16]
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	693a      	ldr	r2, [r7, #16]
 800ea34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	685a      	ldr	r2, [r3, #4]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	697a      	ldr	r2, [r7, #20]
 800ea48:	621a      	str	r2, [r3, #32]
}
 800ea4a:	bf00      	nop
 800ea4c:	371c      	adds	r7, #28
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	40010000 	.word	0x40010000
 800ea5c:	40010400 	.word	0x40010400

0800ea60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b087      	sub	sp, #28
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a1b      	ldr	r3, [r3, #32]
 800ea6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a1b      	ldr	r3, [r3, #32]
 800ea7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	69db      	ldr	r3, [r3, #28]
 800ea86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f023 0303 	bic.w	r3, r3, #3
 800ea96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eaa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	021b      	lsls	r3, r3, #8
 800eab0:	697a      	ldr	r2, [r7, #20]
 800eab2:	4313      	orrs	r3, r2
 800eab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a21      	ldr	r2, [pc, #132]	; (800eb40 <TIM_OC3_SetConfig+0xe0>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d003      	beq.n	800eac6 <TIM_OC3_SetConfig+0x66>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a20      	ldr	r2, [pc, #128]	; (800eb44 <TIM_OC3_SetConfig+0xe4>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d10d      	bne.n	800eae2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eacc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	021b      	lsls	r3, r3, #8
 800ead4:	697a      	ldr	r2, [r7, #20]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4a16      	ldr	r2, [pc, #88]	; (800eb40 <TIM_OC3_SetConfig+0xe0>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d003      	beq.n	800eaf2 <TIM_OC3_SetConfig+0x92>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4a15      	ldr	r2, [pc, #84]	; (800eb44 <TIM_OC3_SetConfig+0xe4>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d113      	bne.n	800eb1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	011b      	lsls	r3, r3, #4
 800eb08:	693a      	ldr	r2, [r7, #16]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	011b      	lsls	r3, r3, #4
 800eb14:	693a      	ldr	r2, [r7, #16]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	693a      	ldr	r2, [r7, #16]
 800eb1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	697a      	ldr	r2, [r7, #20]
 800eb32:	621a      	str	r2, [r3, #32]
}
 800eb34:	bf00      	nop
 800eb36:	371c      	adds	r7, #28
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	40010000 	.word	0x40010000
 800eb44:	40010400 	.word	0x40010400

0800eb48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b087      	sub	sp, #28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a1b      	ldr	r3, [r3, #32]
 800eb56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a1b      	ldr	r3, [r3, #32]
 800eb62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	021b      	lsls	r3, r3, #8
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	031b      	lsls	r3, r3, #12
 800eb9a:	693a      	ldr	r2, [r7, #16]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a12      	ldr	r2, [pc, #72]	; (800ebec <TIM_OC4_SetConfig+0xa4>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d003      	beq.n	800ebb0 <TIM_OC4_SetConfig+0x68>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a11      	ldr	r2, [pc, #68]	; (800ebf0 <TIM_OC4_SetConfig+0xa8>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d109      	bne.n	800ebc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	019b      	lsls	r3, r3, #6
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	621a      	str	r2, [r3, #32]
}
 800ebde:	bf00      	nop
 800ebe0:	371c      	adds	r7, #28
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	40010400 	.word	0x40010400

0800ebf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f003 031f 	and.w	r3, r3, #31
 800ec06:	2201      	movs	r2, #1
 800ec08:	fa02 f303 	lsl.w	r3, r2, r3
 800ec0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6a1a      	ldr	r2, [r3, #32]
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	43db      	mvns	r3, r3
 800ec16:	401a      	ands	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6a1a      	ldr	r2, [r3, #32]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	f003 031f 	and.w	r3, r3, #31
 800ec26:	6879      	ldr	r1, [r7, #4]
 800ec28:	fa01 f303 	lsl.w	r3, r1, r3
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	621a      	str	r2, [r3, #32]
}
 800ec32:	bf00      	nop
 800ec34:	371c      	adds	r7, #28
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
	...

0800ec40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d101      	bne.n	800ec58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec54:	2302      	movs	r3, #2
 800ec56:	e05a      	b.n	800ed0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2202      	movs	r2, #2
 800ec64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a21      	ldr	r2, [pc, #132]	; (800ed1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d022      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eca4:	d01d      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a1d      	ldr	r2, [pc, #116]	; (800ed20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d018      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a1b      	ldr	r2, [pc, #108]	; (800ed24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d013      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a1a      	ldr	r2, [pc, #104]	; (800ed28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d00e      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a18      	ldr	r2, [pc, #96]	; (800ed2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d009      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a17      	ldr	r2, [pc, #92]	; (800ed30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d004      	beq.n	800ece2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a15      	ldr	r2, [pc, #84]	; (800ed34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d10c      	bne.n	800ecfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ece8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	40010000 	.word	0x40010000
 800ed20:	40000400 	.word	0x40000400
 800ed24:	40000800 	.word	0x40000800
 800ed28:	40000c00 	.word	0x40000c00
 800ed2c:	40010400 	.word	0x40010400
 800ed30:	40014000 	.word	0x40014000
 800ed34:	40001800 	.word	0x40001800

0800ed38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed42:	2300      	movs	r3, #0
 800ed44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d101      	bne.n	800ed54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed50:	2302      	movs	r3, #2
 800ed52:	e03d      	b.n	800edd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2201      	movs	r2, #1
 800ed58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	4313      	orrs	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	69db      	ldr	r3, [r3, #28]
 800edba:	4313      	orrs	r3, r2
 800edbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3714      	adds	r7, #20
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ede4:	bf00      	nop
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800edf8:	bf00      	nop
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d101      	bne.n	800ee16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e03f      	b.n	800ee96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d106      	bne.n	800ee30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7f8 f8b8 	bl	8006fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2224      	movs	r2, #36	; 0x24
 800ee34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68da      	ldr	r2, [r3, #12]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f829 	bl	800eea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	691a      	ldr	r2, [r3, #16]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	695a      	ldr	r2, [r3, #20]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68da      	ldr	r2, [r3, #12]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2220      	movs	r2, #32
 800ee88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2220      	movs	r2, #32
 800ee90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
	...

0800eea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea4:	b085      	sub	sp, #20
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68da      	ldr	r2, [r3, #12]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	430a      	orrs	r2, r1
 800eebe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	689a      	ldr	r2, [r3, #8]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	431a      	orrs	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	695b      	ldr	r3, [r3, #20]
 800eece:	431a      	orrs	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	4313      	orrs	r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800eee2:	f023 030c 	bic.w	r3, r3, #12
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	6812      	ldr	r2, [r2, #0]
 800eeea:	68f9      	ldr	r1, [r7, #12]
 800eeec:	430b      	orrs	r3, r1
 800eeee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	695b      	ldr	r3, [r3, #20]
 800eef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	699a      	ldr	r2, [r3, #24]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	430a      	orrs	r2, r1
 800ef04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	69db      	ldr	r3, [r3, #28]
 800ef0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef0e:	f040 818b 	bne.w	800f228 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4ac1      	ldr	r2, [pc, #772]	; (800f21c <UART_SetConfig+0x37c>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d005      	beq.n	800ef28 <UART_SetConfig+0x88>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4abf      	ldr	r2, [pc, #764]	; (800f220 <UART_SetConfig+0x380>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	f040 80bd 	bne.w	800f0a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ef28:	f7fc fbcc 	bl	800b6c4 <HAL_RCC_GetPCLK2Freq>
 800ef2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	461d      	mov	r5, r3
 800ef32:	f04f 0600 	mov.w	r6, #0
 800ef36:	46a8      	mov	r8, r5
 800ef38:	46b1      	mov	r9, r6
 800ef3a:	eb18 0308 	adds.w	r3, r8, r8
 800ef3e:	eb49 0409 	adc.w	r4, r9, r9
 800ef42:	4698      	mov	r8, r3
 800ef44:	46a1      	mov	r9, r4
 800ef46:	eb18 0805 	adds.w	r8, r8, r5
 800ef4a:	eb49 0906 	adc.w	r9, r9, r6
 800ef4e:	f04f 0100 	mov.w	r1, #0
 800ef52:	f04f 0200 	mov.w	r2, #0
 800ef56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ef5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ef5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ef62:	4688      	mov	r8, r1
 800ef64:	4691      	mov	r9, r2
 800ef66:	eb18 0005 	adds.w	r0, r8, r5
 800ef6a:	eb49 0106 	adc.w	r1, r9, r6
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	461d      	mov	r5, r3
 800ef74:	f04f 0600 	mov.w	r6, #0
 800ef78:	196b      	adds	r3, r5, r5
 800ef7a:	eb46 0406 	adc.w	r4, r6, r6
 800ef7e:	461a      	mov	r2, r3
 800ef80:	4623      	mov	r3, r4
 800ef82:	f7f1 fe99 	bl	8000cb8 <__aeabi_uldivmod>
 800ef86:	4603      	mov	r3, r0
 800ef88:	460c      	mov	r4, r1
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4ba5      	ldr	r3, [pc, #660]	; (800f224 <UART_SetConfig+0x384>)
 800ef8e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef92:	095b      	lsrs	r3, r3, #5
 800ef94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	461d      	mov	r5, r3
 800ef9c:	f04f 0600 	mov.w	r6, #0
 800efa0:	46a9      	mov	r9, r5
 800efa2:	46b2      	mov	sl, r6
 800efa4:	eb19 0309 	adds.w	r3, r9, r9
 800efa8:	eb4a 040a 	adc.w	r4, sl, sl
 800efac:	4699      	mov	r9, r3
 800efae:	46a2      	mov	sl, r4
 800efb0:	eb19 0905 	adds.w	r9, r9, r5
 800efb4:	eb4a 0a06 	adc.w	sl, sl, r6
 800efb8:	f04f 0100 	mov.w	r1, #0
 800efbc:	f04f 0200 	mov.w	r2, #0
 800efc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800efc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800efc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800efcc:	4689      	mov	r9, r1
 800efce:	4692      	mov	sl, r2
 800efd0:	eb19 0005 	adds.w	r0, r9, r5
 800efd4:	eb4a 0106 	adc.w	r1, sl, r6
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	461d      	mov	r5, r3
 800efde:	f04f 0600 	mov.w	r6, #0
 800efe2:	196b      	adds	r3, r5, r5
 800efe4:	eb46 0406 	adc.w	r4, r6, r6
 800efe8:	461a      	mov	r2, r3
 800efea:	4623      	mov	r3, r4
 800efec:	f7f1 fe64 	bl	8000cb8 <__aeabi_uldivmod>
 800eff0:	4603      	mov	r3, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	461a      	mov	r2, r3
 800eff6:	4b8b      	ldr	r3, [pc, #556]	; (800f224 <UART_SetConfig+0x384>)
 800eff8:	fba3 1302 	umull	r1, r3, r3, r2
 800effc:	095b      	lsrs	r3, r3, #5
 800effe:	2164      	movs	r1, #100	; 0x64
 800f000:	fb01 f303 	mul.w	r3, r1, r3
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	3332      	adds	r3, #50	; 0x32
 800f00a:	4a86      	ldr	r2, [pc, #536]	; (800f224 <UART_SetConfig+0x384>)
 800f00c:	fba2 2303 	umull	r2, r3, r2, r3
 800f010:	095b      	lsrs	r3, r3, #5
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f018:	4498      	add	r8, r3
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	461d      	mov	r5, r3
 800f01e:	f04f 0600 	mov.w	r6, #0
 800f022:	46a9      	mov	r9, r5
 800f024:	46b2      	mov	sl, r6
 800f026:	eb19 0309 	adds.w	r3, r9, r9
 800f02a:	eb4a 040a 	adc.w	r4, sl, sl
 800f02e:	4699      	mov	r9, r3
 800f030:	46a2      	mov	sl, r4
 800f032:	eb19 0905 	adds.w	r9, r9, r5
 800f036:	eb4a 0a06 	adc.w	sl, sl, r6
 800f03a:	f04f 0100 	mov.w	r1, #0
 800f03e:	f04f 0200 	mov.w	r2, #0
 800f042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f04a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f04e:	4689      	mov	r9, r1
 800f050:	4692      	mov	sl, r2
 800f052:	eb19 0005 	adds.w	r0, r9, r5
 800f056:	eb4a 0106 	adc.w	r1, sl, r6
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	461d      	mov	r5, r3
 800f060:	f04f 0600 	mov.w	r6, #0
 800f064:	196b      	adds	r3, r5, r5
 800f066:	eb46 0406 	adc.w	r4, r6, r6
 800f06a:	461a      	mov	r2, r3
 800f06c:	4623      	mov	r3, r4
 800f06e:	f7f1 fe23 	bl	8000cb8 <__aeabi_uldivmod>
 800f072:	4603      	mov	r3, r0
 800f074:	460c      	mov	r4, r1
 800f076:	461a      	mov	r2, r3
 800f078:	4b6a      	ldr	r3, [pc, #424]	; (800f224 <UART_SetConfig+0x384>)
 800f07a:	fba3 1302 	umull	r1, r3, r3, r2
 800f07e:	095b      	lsrs	r3, r3, #5
 800f080:	2164      	movs	r1, #100	; 0x64
 800f082:	fb01 f303 	mul.w	r3, r1, r3
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	00db      	lsls	r3, r3, #3
 800f08a:	3332      	adds	r3, #50	; 0x32
 800f08c:	4a65      	ldr	r2, [pc, #404]	; (800f224 <UART_SetConfig+0x384>)
 800f08e:	fba2 2303 	umull	r2, r3, r2, r3
 800f092:	095b      	lsrs	r3, r3, #5
 800f094:	f003 0207 	and.w	r2, r3, #7
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4442      	add	r2, r8
 800f09e:	609a      	str	r2, [r3, #8]
 800f0a0:	e26f      	b.n	800f582 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f0a2:	f7fc fafb 	bl	800b69c <HAL_RCC_GetPCLK1Freq>
 800f0a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	461d      	mov	r5, r3
 800f0ac:	f04f 0600 	mov.w	r6, #0
 800f0b0:	46a8      	mov	r8, r5
 800f0b2:	46b1      	mov	r9, r6
 800f0b4:	eb18 0308 	adds.w	r3, r8, r8
 800f0b8:	eb49 0409 	adc.w	r4, r9, r9
 800f0bc:	4698      	mov	r8, r3
 800f0be:	46a1      	mov	r9, r4
 800f0c0:	eb18 0805 	adds.w	r8, r8, r5
 800f0c4:	eb49 0906 	adc.w	r9, r9, r6
 800f0c8:	f04f 0100 	mov.w	r1, #0
 800f0cc:	f04f 0200 	mov.w	r2, #0
 800f0d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f0d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f0d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f0dc:	4688      	mov	r8, r1
 800f0de:	4691      	mov	r9, r2
 800f0e0:	eb18 0005 	adds.w	r0, r8, r5
 800f0e4:	eb49 0106 	adc.w	r1, r9, r6
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	461d      	mov	r5, r3
 800f0ee:	f04f 0600 	mov.w	r6, #0
 800f0f2:	196b      	adds	r3, r5, r5
 800f0f4:	eb46 0406 	adc.w	r4, r6, r6
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4623      	mov	r3, r4
 800f0fc:	f7f1 fddc 	bl	8000cb8 <__aeabi_uldivmod>
 800f100:	4603      	mov	r3, r0
 800f102:	460c      	mov	r4, r1
 800f104:	461a      	mov	r2, r3
 800f106:	4b47      	ldr	r3, [pc, #284]	; (800f224 <UART_SetConfig+0x384>)
 800f108:	fba3 2302 	umull	r2, r3, r3, r2
 800f10c:	095b      	lsrs	r3, r3, #5
 800f10e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	461d      	mov	r5, r3
 800f116:	f04f 0600 	mov.w	r6, #0
 800f11a:	46a9      	mov	r9, r5
 800f11c:	46b2      	mov	sl, r6
 800f11e:	eb19 0309 	adds.w	r3, r9, r9
 800f122:	eb4a 040a 	adc.w	r4, sl, sl
 800f126:	4699      	mov	r9, r3
 800f128:	46a2      	mov	sl, r4
 800f12a:	eb19 0905 	adds.w	r9, r9, r5
 800f12e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f132:	f04f 0100 	mov.w	r1, #0
 800f136:	f04f 0200 	mov.w	r2, #0
 800f13a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f13e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f146:	4689      	mov	r9, r1
 800f148:	4692      	mov	sl, r2
 800f14a:	eb19 0005 	adds.w	r0, r9, r5
 800f14e:	eb4a 0106 	adc.w	r1, sl, r6
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	461d      	mov	r5, r3
 800f158:	f04f 0600 	mov.w	r6, #0
 800f15c:	196b      	adds	r3, r5, r5
 800f15e:	eb46 0406 	adc.w	r4, r6, r6
 800f162:	461a      	mov	r2, r3
 800f164:	4623      	mov	r3, r4
 800f166:	f7f1 fda7 	bl	8000cb8 <__aeabi_uldivmod>
 800f16a:	4603      	mov	r3, r0
 800f16c:	460c      	mov	r4, r1
 800f16e:	461a      	mov	r2, r3
 800f170:	4b2c      	ldr	r3, [pc, #176]	; (800f224 <UART_SetConfig+0x384>)
 800f172:	fba3 1302 	umull	r1, r3, r3, r2
 800f176:	095b      	lsrs	r3, r3, #5
 800f178:	2164      	movs	r1, #100	; 0x64
 800f17a:	fb01 f303 	mul.w	r3, r1, r3
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	00db      	lsls	r3, r3, #3
 800f182:	3332      	adds	r3, #50	; 0x32
 800f184:	4a27      	ldr	r2, [pc, #156]	; (800f224 <UART_SetConfig+0x384>)
 800f186:	fba2 2303 	umull	r2, r3, r2, r3
 800f18a:	095b      	lsrs	r3, r3, #5
 800f18c:	005b      	lsls	r3, r3, #1
 800f18e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f192:	4498      	add	r8, r3
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	461d      	mov	r5, r3
 800f198:	f04f 0600 	mov.w	r6, #0
 800f19c:	46a9      	mov	r9, r5
 800f19e:	46b2      	mov	sl, r6
 800f1a0:	eb19 0309 	adds.w	r3, r9, r9
 800f1a4:	eb4a 040a 	adc.w	r4, sl, sl
 800f1a8:	4699      	mov	r9, r3
 800f1aa:	46a2      	mov	sl, r4
 800f1ac:	eb19 0905 	adds.w	r9, r9, r5
 800f1b0:	eb4a 0a06 	adc.w	sl, sl, r6
 800f1b4:	f04f 0100 	mov.w	r1, #0
 800f1b8:	f04f 0200 	mov.w	r2, #0
 800f1bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1c8:	4689      	mov	r9, r1
 800f1ca:	4692      	mov	sl, r2
 800f1cc:	eb19 0005 	adds.w	r0, r9, r5
 800f1d0:	eb4a 0106 	adc.w	r1, sl, r6
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	461d      	mov	r5, r3
 800f1da:	f04f 0600 	mov.w	r6, #0
 800f1de:	196b      	adds	r3, r5, r5
 800f1e0:	eb46 0406 	adc.w	r4, r6, r6
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	4623      	mov	r3, r4
 800f1e8:	f7f1 fd66 	bl	8000cb8 <__aeabi_uldivmod>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	460c      	mov	r4, r1
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4b0c      	ldr	r3, [pc, #48]	; (800f224 <UART_SetConfig+0x384>)
 800f1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800f1f8:	095b      	lsrs	r3, r3, #5
 800f1fa:	2164      	movs	r1, #100	; 0x64
 800f1fc:	fb01 f303 	mul.w	r3, r1, r3
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	3332      	adds	r3, #50	; 0x32
 800f206:	4a07      	ldr	r2, [pc, #28]	; (800f224 <UART_SetConfig+0x384>)
 800f208:	fba2 2303 	umull	r2, r3, r2, r3
 800f20c:	095b      	lsrs	r3, r3, #5
 800f20e:	f003 0207 	and.w	r2, r3, #7
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4442      	add	r2, r8
 800f218:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f21a:	e1b2      	b.n	800f582 <UART_SetConfig+0x6e2>
 800f21c:	40011000 	.word	0x40011000
 800f220:	40011400 	.word	0x40011400
 800f224:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4ad7      	ldr	r2, [pc, #860]	; (800f58c <UART_SetConfig+0x6ec>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d005      	beq.n	800f23e <UART_SetConfig+0x39e>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4ad6      	ldr	r2, [pc, #856]	; (800f590 <UART_SetConfig+0x6f0>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	f040 80d1 	bne.w	800f3e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f23e:	f7fc fa41 	bl	800b6c4 <HAL_RCC_GetPCLK2Freq>
 800f242:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	469a      	mov	sl, r3
 800f248:	f04f 0b00 	mov.w	fp, #0
 800f24c:	46d0      	mov	r8, sl
 800f24e:	46d9      	mov	r9, fp
 800f250:	eb18 0308 	adds.w	r3, r8, r8
 800f254:	eb49 0409 	adc.w	r4, r9, r9
 800f258:	4698      	mov	r8, r3
 800f25a:	46a1      	mov	r9, r4
 800f25c:	eb18 080a 	adds.w	r8, r8, sl
 800f260:	eb49 090b 	adc.w	r9, r9, fp
 800f264:	f04f 0100 	mov.w	r1, #0
 800f268:	f04f 0200 	mov.w	r2, #0
 800f26c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f270:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f274:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f278:	4688      	mov	r8, r1
 800f27a:	4691      	mov	r9, r2
 800f27c:	eb1a 0508 	adds.w	r5, sl, r8
 800f280:	eb4b 0609 	adc.w	r6, fp, r9
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	4619      	mov	r1, r3
 800f28a:	f04f 0200 	mov.w	r2, #0
 800f28e:	f04f 0300 	mov.w	r3, #0
 800f292:	f04f 0400 	mov.w	r4, #0
 800f296:	0094      	lsls	r4, r2, #2
 800f298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f29c:	008b      	lsls	r3, r1, #2
 800f29e:	461a      	mov	r2, r3
 800f2a0:	4623      	mov	r3, r4
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	4631      	mov	r1, r6
 800f2a6:	f7f1 fd07 	bl	8000cb8 <__aeabi_uldivmod>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	460c      	mov	r4, r1
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	4bb8      	ldr	r3, [pc, #736]	; (800f594 <UART_SetConfig+0x6f4>)
 800f2b2:	fba3 2302 	umull	r2, r3, r3, r2
 800f2b6:	095b      	lsrs	r3, r3, #5
 800f2b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	469b      	mov	fp, r3
 800f2c0:	f04f 0c00 	mov.w	ip, #0
 800f2c4:	46d9      	mov	r9, fp
 800f2c6:	46e2      	mov	sl, ip
 800f2c8:	eb19 0309 	adds.w	r3, r9, r9
 800f2cc:	eb4a 040a 	adc.w	r4, sl, sl
 800f2d0:	4699      	mov	r9, r3
 800f2d2:	46a2      	mov	sl, r4
 800f2d4:	eb19 090b 	adds.w	r9, r9, fp
 800f2d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f2dc:	f04f 0100 	mov.w	r1, #0
 800f2e0:	f04f 0200 	mov.w	r2, #0
 800f2e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f2e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f2ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f2f0:	4689      	mov	r9, r1
 800f2f2:	4692      	mov	sl, r2
 800f2f4:	eb1b 0509 	adds.w	r5, fp, r9
 800f2f8:	eb4c 060a 	adc.w	r6, ip, sl
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	4619      	mov	r1, r3
 800f302:	f04f 0200 	mov.w	r2, #0
 800f306:	f04f 0300 	mov.w	r3, #0
 800f30a:	f04f 0400 	mov.w	r4, #0
 800f30e:	0094      	lsls	r4, r2, #2
 800f310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f314:	008b      	lsls	r3, r1, #2
 800f316:	461a      	mov	r2, r3
 800f318:	4623      	mov	r3, r4
 800f31a:	4628      	mov	r0, r5
 800f31c:	4631      	mov	r1, r6
 800f31e:	f7f1 fccb 	bl	8000cb8 <__aeabi_uldivmod>
 800f322:	4603      	mov	r3, r0
 800f324:	460c      	mov	r4, r1
 800f326:	461a      	mov	r2, r3
 800f328:	4b9a      	ldr	r3, [pc, #616]	; (800f594 <UART_SetConfig+0x6f4>)
 800f32a:	fba3 1302 	umull	r1, r3, r3, r2
 800f32e:	095b      	lsrs	r3, r3, #5
 800f330:	2164      	movs	r1, #100	; 0x64
 800f332:	fb01 f303 	mul.w	r3, r1, r3
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	011b      	lsls	r3, r3, #4
 800f33a:	3332      	adds	r3, #50	; 0x32
 800f33c:	4a95      	ldr	r2, [pc, #596]	; (800f594 <UART_SetConfig+0x6f4>)
 800f33e:	fba2 2303 	umull	r2, r3, r2, r3
 800f342:	095b      	lsrs	r3, r3, #5
 800f344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f348:	4498      	add	r8, r3
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	469b      	mov	fp, r3
 800f34e:	f04f 0c00 	mov.w	ip, #0
 800f352:	46d9      	mov	r9, fp
 800f354:	46e2      	mov	sl, ip
 800f356:	eb19 0309 	adds.w	r3, r9, r9
 800f35a:	eb4a 040a 	adc.w	r4, sl, sl
 800f35e:	4699      	mov	r9, r3
 800f360:	46a2      	mov	sl, r4
 800f362:	eb19 090b 	adds.w	r9, r9, fp
 800f366:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f36a:	f04f 0100 	mov.w	r1, #0
 800f36e:	f04f 0200 	mov.w	r2, #0
 800f372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f37a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f37e:	4689      	mov	r9, r1
 800f380:	4692      	mov	sl, r2
 800f382:	eb1b 0509 	adds.w	r5, fp, r9
 800f386:	eb4c 060a 	adc.w	r6, ip, sl
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	4619      	mov	r1, r3
 800f390:	f04f 0200 	mov.w	r2, #0
 800f394:	f04f 0300 	mov.w	r3, #0
 800f398:	f04f 0400 	mov.w	r4, #0
 800f39c:	0094      	lsls	r4, r2, #2
 800f39e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3a2:	008b      	lsls	r3, r1, #2
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	4623      	mov	r3, r4
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	f7f1 fc84 	bl	8000cb8 <__aeabi_uldivmod>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	4b77      	ldr	r3, [pc, #476]	; (800f594 <UART_SetConfig+0x6f4>)
 800f3b8:	fba3 1302 	umull	r1, r3, r3, r2
 800f3bc:	095b      	lsrs	r3, r3, #5
 800f3be:	2164      	movs	r1, #100	; 0x64
 800f3c0:	fb01 f303 	mul.w	r3, r1, r3
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	011b      	lsls	r3, r3, #4
 800f3c8:	3332      	adds	r3, #50	; 0x32
 800f3ca:	4a72      	ldr	r2, [pc, #456]	; (800f594 <UART_SetConfig+0x6f4>)
 800f3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f3d0:	095b      	lsrs	r3, r3, #5
 800f3d2:	f003 020f 	and.w	r2, r3, #15
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4442      	add	r2, r8
 800f3dc:	609a      	str	r2, [r3, #8]
 800f3de:	e0d0      	b.n	800f582 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f3e0:	f7fc f95c 	bl	800b69c <HAL_RCC_GetPCLK1Freq>
 800f3e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	469a      	mov	sl, r3
 800f3ea:	f04f 0b00 	mov.w	fp, #0
 800f3ee:	46d0      	mov	r8, sl
 800f3f0:	46d9      	mov	r9, fp
 800f3f2:	eb18 0308 	adds.w	r3, r8, r8
 800f3f6:	eb49 0409 	adc.w	r4, r9, r9
 800f3fa:	4698      	mov	r8, r3
 800f3fc:	46a1      	mov	r9, r4
 800f3fe:	eb18 080a 	adds.w	r8, r8, sl
 800f402:	eb49 090b 	adc.w	r9, r9, fp
 800f406:	f04f 0100 	mov.w	r1, #0
 800f40a:	f04f 0200 	mov.w	r2, #0
 800f40e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f412:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f416:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f41a:	4688      	mov	r8, r1
 800f41c:	4691      	mov	r9, r2
 800f41e:	eb1a 0508 	adds.w	r5, sl, r8
 800f422:	eb4b 0609 	adc.w	r6, fp, r9
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	4619      	mov	r1, r3
 800f42c:	f04f 0200 	mov.w	r2, #0
 800f430:	f04f 0300 	mov.w	r3, #0
 800f434:	f04f 0400 	mov.w	r4, #0
 800f438:	0094      	lsls	r4, r2, #2
 800f43a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f43e:	008b      	lsls	r3, r1, #2
 800f440:	461a      	mov	r2, r3
 800f442:	4623      	mov	r3, r4
 800f444:	4628      	mov	r0, r5
 800f446:	4631      	mov	r1, r6
 800f448:	f7f1 fc36 	bl	8000cb8 <__aeabi_uldivmod>
 800f44c:	4603      	mov	r3, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	461a      	mov	r2, r3
 800f452:	4b50      	ldr	r3, [pc, #320]	; (800f594 <UART_SetConfig+0x6f4>)
 800f454:	fba3 2302 	umull	r2, r3, r3, r2
 800f458:	095b      	lsrs	r3, r3, #5
 800f45a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	469b      	mov	fp, r3
 800f462:	f04f 0c00 	mov.w	ip, #0
 800f466:	46d9      	mov	r9, fp
 800f468:	46e2      	mov	sl, ip
 800f46a:	eb19 0309 	adds.w	r3, r9, r9
 800f46e:	eb4a 040a 	adc.w	r4, sl, sl
 800f472:	4699      	mov	r9, r3
 800f474:	46a2      	mov	sl, r4
 800f476:	eb19 090b 	adds.w	r9, r9, fp
 800f47a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f47e:	f04f 0100 	mov.w	r1, #0
 800f482:	f04f 0200 	mov.w	r2, #0
 800f486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f48a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f48e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f492:	4689      	mov	r9, r1
 800f494:	4692      	mov	sl, r2
 800f496:	eb1b 0509 	adds.w	r5, fp, r9
 800f49a:	eb4c 060a 	adc.w	r6, ip, sl
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	f04f 0200 	mov.w	r2, #0
 800f4a8:	f04f 0300 	mov.w	r3, #0
 800f4ac:	f04f 0400 	mov.w	r4, #0
 800f4b0:	0094      	lsls	r4, r2, #2
 800f4b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f4b6:	008b      	lsls	r3, r1, #2
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4623      	mov	r3, r4
 800f4bc:	4628      	mov	r0, r5
 800f4be:	4631      	mov	r1, r6
 800f4c0:	f7f1 fbfa 	bl	8000cb8 <__aeabi_uldivmod>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	4b32      	ldr	r3, [pc, #200]	; (800f594 <UART_SetConfig+0x6f4>)
 800f4cc:	fba3 1302 	umull	r1, r3, r3, r2
 800f4d0:	095b      	lsrs	r3, r3, #5
 800f4d2:	2164      	movs	r1, #100	; 0x64
 800f4d4:	fb01 f303 	mul.w	r3, r1, r3
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	011b      	lsls	r3, r3, #4
 800f4dc:	3332      	adds	r3, #50	; 0x32
 800f4de:	4a2d      	ldr	r2, [pc, #180]	; (800f594 <UART_SetConfig+0x6f4>)
 800f4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e4:	095b      	lsrs	r3, r3, #5
 800f4e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4ea:	4498      	add	r8, r3
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	469b      	mov	fp, r3
 800f4f0:	f04f 0c00 	mov.w	ip, #0
 800f4f4:	46d9      	mov	r9, fp
 800f4f6:	46e2      	mov	sl, ip
 800f4f8:	eb19 0309 	adds.w	r3, r9, r9
 800f4fc:	eb4a 040a 	adc.w	r4, sl, sl
 800f500:	4699      	mov	r9, r3
 800f502:	46a2      	mov	sl, r4
 800f504:	eb19 090b 	adds.w	r9, r9, fp
 800f508:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f50c:	f04f 0100 	mov.w	r1, #0
 800f510:	f04f 0200 	mov.w	r2, #0
 800f514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f51c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f520:	4689      	mov	r9, r1
 800f522:	4692      	mov	sl, r2
 800f524:	eb1b 0509 	adds.w	r5, fp, r9
 800f528:	eb4c 060a 	adc.w	r6, ip, sl
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	4619      	mov	r1, r3
 800f532:	f04f 0200 	mov.w	r2, #0
 800f536:	f04f 0300 	mov.w	r3, #0
 800f53a:	f04f 0400 	mov.w	r4, #0
 800f53e:	0094      	lsls	r4, r2, #2
 800f540:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f544:	008b      	lsls	r3, r1, #2
 800f546:	461a      	mov	r2, r3
 800f548:	4623      	mov	r3, r4
 800f54a:	4628      	mov	r0, r5
 800f54c:	4631      	mov	r1, r6
 800f54e:	f7f1 fbb3 	bl	8000cb8 <__aeabi_uldivmod>
 800f552:	4603      	mov	r3, r0
 800f554:	460c      	mov	r4, r1
 800f556:	461a      	mov	r2, r3
 800f558:	4b0e      	ldr	r3, [pc, #56]	; (800f594 <UART_SetConfig+0x6f4>)
 800f55a:	fba3 1302 	umull	r1, r3, r3, r2
 800f55e:	095b      	lsrs	r3, r3, #5
 800f560:	2164      	movs	r1, #100	; 0x64
 800f562:	fb01 f303 	mul.w	r3, r1, r3
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	011b      	lsls	r3, r3, #4
 800f56a:	3332      	adds	r3, #50	; 0x32
 800f56c:	4a09      	ldr	r2, [pc, #36]	; (800f594 <UART_SetConfig+0x6f4>)
 800f56e:	fba2 2303 	umull	r2, r3, r2, r3
 800f572:	095b      	lsrs	r3, r3, #5
 800f574:	f003 020f 	and.w	r2, r3, #15
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4442      	add	r2, r8
 800f57e:	609a      	str	r2, [r3, #8]
}
 800f580:	e7ff      	b.n	800f582 <UART_SetConfig+0x6e2>
 800f582:	bf00      	nop
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58c:	40011000 	.word	0x40011000
 800f590:	40011400 	.word	0x40011400
 800f594:	51eb851f 	.word	0x51eb851f

0800f598 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f598:	b084      	sub	sp, #16
 800f59a:	b480      	push	{r7}
 800f59c:	b085      	sub	sp, #20
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	f107 001c 	add.w	r0, r7, #28
 800f5a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f5ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f5b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f5b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f5b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f5ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f5be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f5c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f5d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	431a      	orrs	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	b004      	add	sp, #16
 800f5ec:	4770      	bx	lr

0800f5ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	b083      	sub	sp, #12
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2203      	movs	r2, #3
 800f636:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f638:	2002      	movs	r0, #2
 800f63a:	f7f9 fbdd 	bl	8008df8 <HAL_Delay>
  
  return HAL_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f003 0303 	and.w	r3, r3, #3
}
 800f658:	4618      	mov	r0, r3
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f682:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f688:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f68e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	4313      	orrs	r3, r2
 800f694:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f69e:	f023 030f 	bic.w	r3, r3, #15
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	431a      	orrs	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3714      	adds	r7, #20
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	b2db      	uxtb	r3, r3
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b085      	sub	sp, #20
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
 800f6da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3314      	adds	r3, #20
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
}  
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3714      	adds	r7, #20
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f702:	2300      	movs	r3, #0
 800f704:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f71e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f724:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f72a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	4313      	orrs	r3, r2
 800f730:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f736:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	431a      	orrs	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f742:	2300      	movs	r3, #0

}
 800f744:	4618      	mov	r0, r3
 800f746:	3714      	adds	r7, #20
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f75e:	2310      	movs	r3, #16
 800f760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f762:	2340      	movs	r3, #64	; 0x40
 800f764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f766:	2300      	movs	r3, #0
 800f768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f76a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f76e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f770:	f107 0308 	add.w	r3, r7, #8
 800f774:	4619      	mov	r1, r3
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7ff ff74 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f780:	2110      	movs	r1, #16
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fa40 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f78a:	69fb      	ldr	r3, [r7, #28]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f7a2:	2311      	movs	r3, #17
 800f7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7a6:	2340      	movs	r3, #64	; 0x40
 800f7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7b4:	f107 0308 	add.w	r3, r7, #8
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7ff ff52 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f7c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7c4:	2111      	movs	r1, #17
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fa1e 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f7cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3720      	adds	r7, #32
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f7e6:	2312      	movs	r3, #18
 800f7e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7ea:	2340      	movs	r3, #64	; 0x40
 800f7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7f8:	f107 0308 	add.w	r3, r7, #8
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f7ff ff30 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f804:	f241 3288 	movw	r2, #5000	; 0x1388
 800f808:	2112      	movs	r1, #18
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 f9fc 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f812:	69fb      	ldr	r3, [r7, #28]
}
 800f814:	4618      	mov	r0, r3
 800f816:	3720      	adds	r7, #32
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b088      	sub	sp, #32
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f82a:	2318      	movs	r3, #24
 800f82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f82e:	2340      	movs	r3, #64	; 0x40
 800f830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f832:	2300      	movs	r3, #0
 800f834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f83a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f83c:	f107 0308 	add.w	r3, r7, #8
 800f840:	4619      	mov	r1, r3
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7ff ff0e 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f848:	f241 3288 	movw	r2, #5000	; 0x1388
 800f84c:	2118      	movs	r1, #24
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f9da 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f856:	69fb      	ldr	r3, [r7, #28]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3720      	adds	r7, #32
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f86e:	2319      	movs	r3, #25
 800f870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f872:	2340      	movs	r3, #64	; 0x40
 800f874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f87a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f87e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f880:	f107 0308 	add.w	r3, r7, #8
 800f884:	4619      	mov	r1, r3
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff feec 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f890:	2119      	movs	r1, #25
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 f9b8 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f89a:	69fb      	ldr	r3, [r7, #28]
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3720      	adds	r7, #32
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b088      	sub	sp, #32
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f8b0:	230c      	movs	r3, #12
 800f8b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8b4:	2340      	movs	r3, #64	; 0x40
 800f8b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8c2:	f107 0308 	add.w	r3, r7, #8
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff fecb 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f8ce:	4a05      	ldr	r2, [pc, #20]	; (800f8e4 <SDMMC_CmdStopTransfer+0x40>)
 800f8d0:	210c      	movs	r1, #12
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 f998 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8da:	69fb      	ldr	r3, [r7, #28]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3720      	adds	r7, #32
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	05f5e100 	.word	0x05f5e100

0800f8e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b08a      	sub	sp, #40	; 0x28
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f8f8:	2307      	movs	r3, #7
 800f8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8fc:	2340      	movs	r3, #64	; 0x40
 800f8fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f900:	2300      	movs	r3, #0
 800f902:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f908:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f90a:	f107 0310 	add.w	r3, r7, #16
 800f90e:	4619      	mov	r1, r3
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f7ff fea7 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f916:	f241 3288 	movw	r2, #5000	; 0x1388
 800f91a:	2107      	movs	r1, #7
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f000 f973 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f922:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f926:	4618      	mov	r0, r3
 800f928:	3728      	adds	r7, #40	; 0x28
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b088      	sub	sp, #32
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f936:	2300      	movs	r3, #0
 800f938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f93a:	2300      	movs	r3, #0
 800f93c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f93e:	2300      	movs	r3, #0
 800f940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f942:	2300      	movs	r3, #0
 800f944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f94a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f94c:	f107 0308 	add.w	r3, r7, #8
 800f950:	4619      	mov	r1, r3
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7ff fe86 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f92d 	bl	800fbb8 <SDMMC_GetCmdError>
 800f95e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f960:	69fb      	ldr	r3, [r7, #28]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3720      	adds	r7, #32
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}

0800f96a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b088      	sub	sp, #32
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f972:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f976:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f978:	2308      	movs	r3, #8
 800f97a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f97c:	2340      	movs	r3, #64	; 0x40
 800f97e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f980:	2300      	movs	r3, #0
 800f982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f988:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f98a:	f107 0308 	add.w	r3, r7, #8
 800f98e:	4619      	mov	r1, r3
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7ff fe67 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 fb16 	bl	800ffc8 <SDMMC_GetCmdResp7>
 800f99c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f99e:	69fb      	ldr	r3, [r7, #28]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f9b6:	2337      	movs	r3, #55	; 0x37
 800f9b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9ba:	2340      	movs	r3, #64	; 0x40
 800f9bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9c8:	f107 0308 	add.w	r3, r7, #8
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff fe48 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9d8:	2137      	movs	r1, #55	; 0x37
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f914 	bl	800fc08 <SDMMC_GetCmdResp1>
 800f9e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9e2:	69fb      	ldr	r3, [r7, #28]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3720      	adds	r7, #32
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fa02:	2329      	movs	r3, #41	; 0x29
 800fa04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa06:	2340      	movs	r3, #64	; 0x40
 800fa08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa14:	f107 0308 	add.w	r3, r7, #8
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff fe22 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fa23 	bl	800fe6c <SDMMC_GetCmdResp3>
 800fa26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa28:	69fb      	ldr	r3, [r7, #28]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3720      	adds	r7, #32
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b088      	sub	sp, #32
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
 800fa3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fa40:	2306      	movs	r3, #6
 800fa42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa44:	2340      	movs	r3, #64	; 0x40
 800fa46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa52:	f107 0308 	add.w	r3, r7, #8
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff fe03 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800fa5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa62:	2106      	movs	r1, #6
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f8cf 	bl	800fc08 <SDMMC_GetCmdResp1>
 800fa6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3720      	adds	r7, #32
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b088      	sub	sp, #32
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fa82:	2333      	movs	r3, #51	; 0x33
 800fa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa86:	2340      	movs	r3, #64	; 0x40
 800fa88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa94:	f107 0308 	add.w	r3, r7, #8
 800fa98:	4619      	mov	r1, r3
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7ff fde2 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800faa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800faa4:	2133      	movs	r1, #51	; 0x33
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 f8ae 	bl	800fc08 <SDMMC_GetCmdResp1>
 800faac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faae:	69fb      	ldr	r3, [r7, #28]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3720      	adds	r7, #32
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b088      	sub	sp, #32
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fac0:	2300      	movs	r3, #0
 800fac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fac4:	2302      	movs	r3, #2
 800fac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fac8:	23c0      	movs	r3, #192	; 0xc0
 800faca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800facc:	2300      	movs	r3, #0
 800face:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fad6:	f107 0308 	add.w	r3, r7, #8
 800fada:	4619      	mov	r1, r3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff fdc1 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f97c 	bl	800fde0 <SDMMC_GetCmdResp2>
 800fae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800faea:	69fb      	ldr	r3, [r7, #28]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3720      	adds	r7, #32
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fb02:	2309      	movs	r3, #9
 800fb04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800fb06:	23c0      	movs	r3, #192	; 0xc0
 800fb08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb14:	f107 0308 	add.w	r3, r7, #8
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff fda2 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 f95d 	bl	800fde0 <SDMMC_GetCmdResp2>
 800fb26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb28:	69fb      	ldr	r3, [r7, #28]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3720      	adds	r7, #32
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b088      	sub	sp, #32
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fb40:	2303      	movs	r3, #3
 800fb42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb44:	2340      	movs	r3, #64	; 0x40
 800fb46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb52:	f107 0308 	add.w	r3, r7, #8
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff fd83 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fb5e:	683a      	ldr	r2, [r7, #0]
 800fb60:	2103      	movs	r1, #3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f9bc 	bl	800fee0 <SDMMC_GetCmdResp6>
 800fb68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb6a:	69fb      	ldr	r3, [r7, #28]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3720      	adds	r7, #32
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b088      	sub	sp, #32
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fb82:	230d      	movs	r3, #13
 800fb84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fb86:	2340      	movs	r3, #64	; 0x40
 800fb88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fb8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fb94:	f107 0308 	add.w	r3, r7, #8
 800fb98:	4619      	mov	r1, r3
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff fd62 	bl	800f664 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fba0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fba4:	210d      	movs	r1, #13
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 f82e 	bl	800fc08 <SDMMC_GetCmdResp1>
 800fbac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbae:	69fb      	ldr	r3, [r7, #28]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3720      	adds	r7, #32
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fbb8:	b490      	push	{r4, r7}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fbc0:	4b0f      	ldr	r3, [pc, #60]	; (800fc00 <SDMMC_GetCmdError+0x48>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a0f      	ldr	r2, [pc, #60]	; (800fc04 <SDMMC_GetCmdError+0x4c>)
 800fbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbca:	0a5b      	lsrs	r3, r3, #9
 800fbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fbd4:	4623      	mov	r3, r4
 800fbd6:	1e5c      	subs	r4, r3, #1
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d102      	bne.n	800fbe2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbe0:	e009      	b.n	800fbf6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d0f2      	beq.n	800fbd4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	22c5      	movs	r2, #197	; 0xc5
 800fbf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bc90      	pop	{r4, r7}
 800fbfe:	4770      	bx	lr
 800fc00:	20000000 	.word	0x20000000
 800fc04:	10624dd3 	.word	0x10624dd3

0800fc08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fc08:	b590      	push	{r4, r7, lr}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	460b      	mov	r3, r1
 800fc12:	607a      	str	r2, [r7, #4]
 800fc14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fc16:	4b6f      	ldr	r3, [pc, #444]	; (800fdd4 <SDMMC_GetCmdResp1+0x1cc>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a6f      	ldr	r2, [pc, #444]	; (800fdd8 <SDMMC_GetCmdResp1+0x1d0>)
 800fc1c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc20:	0a5b      	lsrs	r3, r3, #9
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fc28:	4623      	mov	r3, r4
 800fc2a:	1e5c      	subs	r4, r3, #1
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d102      	bne.n	800fc36 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc34:	e0c9      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc3a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d0f0      	beq.n	800fc28 <SDMMC_GetCmdResp1+0x20>
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1eb      	bne.n	800fc28 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc54:	f003 0304 	and.w	r3, r3, #4
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d004      	beq.n	800fc66 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2204      	movs	r2, #4
 800fc60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc62:	2304      	movs	r3, #4
 800fc64:	e0b1      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc6a:	f003 0301 	and.w	r3, r3, #1
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d004      	beq.n	800fc7c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2201      	movs	r2, #1
 800fc76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e0a6      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	22c5      	movs	r2, #197	; 0xc5
 800fc80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fc82:	68f8      	ldr	r0, [r7, #12]
 800fc84:	f7ff fd18 	bl	800f6b8 <SDIO_GetCommandResponse>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	7afb      	ldrb	r3, [r7, #11]
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d001      	beq.n	800fc96 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc92:	2301      	movs	r3, #1
 800fc94:	e099      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fc96:	2100      	movs	r1, #0
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f7ff fd1a 	bl	800f6d2 <SDIO_GetResponse>
 800fc9e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	4b4e      	ldr	r3, [pc, #312]	; (800fddc <SDMMC_GetCmdResp1+0x1d4>)
 800fca4:	4013      	ands	r3, r2
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d101      	bne.n	800fcae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e08d      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	da02      	bge.n	800fcba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fcb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fcb8:	e087      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fcc4:	2340      	movs	r3, #64	; 0x40
 800fcc6:	e080      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fcd2:	2380      	movs	r3, #128	; 0x80
 800fcd4:	e079      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fce4:	e071      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d002      	beq.n	800fcf6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fcf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcf4:	e069      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d002      	beq.n	800fd06 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fd00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd04:	e061      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fd10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd14:	e059      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fd20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd24:	e051      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fd30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd34:	e049      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd44:	e041      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800fd50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd54:	e039      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fd60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fd64:	e031      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fd70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fd74:	e029      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fd80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd84:	e021      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fd90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fd94:	e019      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fda0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fda4:	e011      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fdb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fdb4:	e009      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	f003 0308 	and.w	r3, r3, #8
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fdc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fdc4:	e001      	b.n	800fdca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fdc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	371c      	adds	r7, #28
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd90      	pop	{r4, r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20000000 	.word	0x20000000
 800fdd8:	10624dd3 	.word	0x10624dd3
 800fddc:	fdffe008 	.word	0xfdffe008

0800fde0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fde0:	b490      	push	{r4, r7}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fde8:	4b1e      	ldr	r3, [pc, #120]	; (800fe64 <SDMMC_GetCmdResp2+0x84>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a1e      	ldr	r2, [pc, #120]	; (800fe68 <SDMMC_GetCmdResp2+0x88>)
 800fdee:	fba2 2303 	umull	r2, r3, r2, r3
 800fdf2:	0a5b      	lsrs	r3, r3, #9
 800fdf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdf8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fdfc:	4623      	mov	r3, r4
 800fdfe:	1e5c      	subs	r4, r3, #1
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d102      	bne.n	800fe0a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe08:	e026      	b.n	800fe58 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe0e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0f0      	beq.n	800fdfc <SDMMC_GetCmdResp2+0x1c>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d1eb      	bne.n	800fdfc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe28:	f003 0304 	and.w	r3, r3, #4
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d004      	beq.n	800fe3a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2204      	movs	r2, #4
 800fe34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe36:	2304      	movs	r3, #4
 800fe38:	e00e      	b.n	800fe58 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d004      	beq.n	800fe50 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e003      	b.n	800fe58 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	22c5      	movs	r2, #197	; 0xc5
 800fe54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bc90      	pop	{r4, r7}
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	20000000 	.word	0x20000000
 800fe68:	10624dd3 	.word	0x10624dd3

0800fe6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fe6c:	b490      	push	{r4, r7}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe74:	4b18      	ldr	r3, [pc, #96]	; (800fed8 <SDMMC_GetCmdResp3+0x6c>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a18      	ldr	r2, [pc, #96]	; (800fedc <SDMMC_GetCmdResp3+0x70>)
 800fe7a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe7e:	0a5b      	lsrs	r3, r3, #9
 800fe80:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fe88:	4623      	mov	r3, r4
 800fe8a:	1e5c      	subs	r4, r3, #1
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d102      	bne.n	800fe96 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe94:	e01b      	b.n	800fece <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d0f0      	beq.n	800fe88 <SDMMC_GetCmdResp3+0x1c>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1eb      	bne.n	800fe88 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feb4:	f003 0304 	and.w	r3, r3, #4
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d004      	beq.n	800fec6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2204      	movs	r2, #4
 800fec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fec2:	2304      	movs	r3, #4
 800fec4:	e003      	b.n	800fece <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	22c5      	movs	r2, #197	; 0xc5
 800feca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bc90      	pop	{r4, r7}
 800fed6:	4770      	bx	lr
 800fed8:	20000000 	.word	0x20000000
 800fedc:	10624dd3 	.word	0x10624dd3

0800fee0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fee0:	b590      	push	{r4, r7, lr}
 800fee2:	b087      	sub	sp, #28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	460b      	mov	r3, r1
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800feee:	4b34      	ldr	r3, [pc, #208]	; (800ffc0 <SDMMC_GetCmdResp6+0xe0>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4a34      	ldr	r2, [pc, #208]	; (800ffc4 <SDMMC_GetCmdResp6+0xe4>)
 800fef4:	fba2 2303 	umull	r2, r3, r2, r3
 800fef8:	0a5b      	lsrs	r3, r3, #9
 800fefa:	f241 3288 	movw	r2, #5000	; 0x1388
 800fefe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ff02:	4623      	mov	r3, r4
 800ff04:	1e5c      	subs	r4, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d102      	bne.n	800ff10 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff0e:	e052      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff14:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d0f0      	beq.n	800ff02 <SDMMC_GetCmdResp6+0x22>
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1eb      	bne.n	800ff02 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff2e:	f003 0304 	and.w	r3, r3, #4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d004      	beq.n	800ff40 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2204      	movs	r2, #4
 800ff3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff3c:	2304      	movs	r3, #4
 800ff3e:	e03a      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff44:	f003 0301 	and.w	r3, r3, #1
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d004      	beq.n	800ff56 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff52:	2301      	movs	r3, #1
 800ff54:	e02f      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7ff fbae 	bl	800f6b8 <SDIO_GetCommandResponse>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	7afb      	ldrb	r3, [r7, #11]
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d001      	beq.n	800ff6a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff66:	2301      	movs	r3, #1
 800ff68:	e025      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	22c5      	movs	r2, #197	; 0xc5
 800ff6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ff70:	2100      	movs	r1, #0
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f7ff fbad 	bl	800f6d2 <SDIO_GetResponse>
 800ff78:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	0c1b      	lsrs	r3, r3, #16
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	e011      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d002      	beq.n	800ffa2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ff9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ffa0:	e009      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d002      	beq.n	800ffb2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ffac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ffb0:	e001      	b.n	800ffb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ffb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	371c      	adds	r7, #28
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd90      	pop	{r4, r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20000000 	.word	0x20000000
 800ffc4:	10624dd3 	.word	0x10624dd3

0800ffc8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ffc8:	b490      	push	{r4, r7}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffd0:	4b21      	ldr	r3, [pc, #132]	; (8010058 <SDMMC_GetCmdResp7+0x90>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4a21      	ldr	r2, [pc, #132]	; (801005c <SDMMC_GetCmdResp7+0x94>)
 800ffd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffda:	0a5b      	lsrs	r3, r3, #9
 800ffdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffe0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ffe4:	4623      	mov	r3, r4
 800ffe6:	1e5c      	subs	r4, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d102      	bne.n	800fff2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fff0:	e02c      	b.n	801004c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fff6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d0f0      	beq.n	800ffe4 <SDMMC_GetCmdResp7+0x1c>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1eb      	bne.n	800ffe4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010010:	f003 0304 	and.w	r3, r3, #4
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2204      	movs	r2, #4
 801001c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801001e:	2304      	movs	r3, #4
 8010020:	e014      	b.n	801004c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010026:	f003 0301 	and.w	r3, r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	d004      	beq.n	8010038 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2201      	movs	r2, #1
 8010032:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010034:	2301      	movs	r3, #1
 8010036:	e009      	b.n	801004c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801003c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010040:	2b00      	cmp	r3, #0
 8010042:	d002      	beq.n	801004a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2240      	movs	r2, #64	; 0x40
 8010048:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801004a:	2300      	movs	r3, #0
  
}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bc90      	pop	{r4, r7}
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	20000000 	.word	0x20000000
 801005c:	10624dd3 	.word	0x10624dd3

08010060 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010064:	4904      	ldr	r1, [pc, #16]	; (8010078 <MX_FATFS_Init+0x18>)
 8010066:	4805      	ldr	r0, [pc, #20]	; (801007c <MX_FATFS_Init+0x1c>)
 8010068:	f003 fb9c 	bl	80137a4 <FATFS_LinkDriver>
 801006c:	4603      	mov	r3, r0
 801006e:	461a      	mov	r2, r3
 8010070:	4b03      	ldr	r3, [pc, #12]	; (8010080 <MX_FATFS_Init+0x20>)
 8010072:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010074:	bf00      	nop
 8010076:	bd80      	pop	{r7, pc}
 8010078:	2003ee00 	.word	0x2003ee00
 801007c:	08019274 	.word	0x08019274
 8010080:	2003edfc 	.word	0x2003edfc

08010084 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801008a:	2300      	movs	r3, #0
 801008c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801008e:	f000 f896 	bl	80101be <BSP_SD_IsDetected>
 8010092:	4603      	mov	r3, r0
 8010094:	2b01      	cmp	r3, #1
 8010096:	d001      	beq.n	801009c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	e012      	b.n	80100c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801009c:	480b      	ldr	r0, [pc, #44]	; (80100cc <BSP_SD_Init+0x48>)
 801009e:	f7fb ffa5 	bl	800bfec <HAL_SD_Init>
 80100a2:	4603      	mov	r3, r0
 80100a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80100a6:	79fb      	ldrb	r3, [r7, #7]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d109      	bne.n	80100c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80100ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80100b0:	4806      	ldr	r0, [pc, #24]	; (80100cc <BSP_SD_Init+0x48>)
 80100b2:	f7fc fd4f 	bl	800cb54 <HAL_SD_ConfigWideBusOperation>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80100bc:	2301      	movs	r3, #1
 80100be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80100c0:	79fb      	ldrb	r3, [r7, #7]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	2003ebfc 	.word	0x2003ebfc

080100d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80100dc:	2300      	movs	r3, #0
 80100de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	68f9      	ldr	r1, [r7, #12]
 80100e6:	4806      	ldr	r0, [pc, #24]	; (8010100 <BSP_SD_ReadBlocks_DMA+0x30>)
 80100e8:	f7fc f810 	bl	800c10c <HAL_SD_ReadBlocks_DMA>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80100f2:	2301      	movs	r3, #1
 80100f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3718      	adds	r7, #24
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	2003ebfc 	.word	0x2003ebfc

08010104 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b086      	sub	sp, #24
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	68f9      	ldr	r1, [r7, #12]
 801011a:	4806      	ldr	r0, [pc, #24]	; (8010134 <BSP_SD_WriteBlocks_DMA+0x30>)
 801011c:	f7fc f8de 	bl	800c2dc <HAL_SD_WriteBlocks_DMA>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010126:	2301      	movs	r3, #1
 8010128:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801012a:	7dfb      	ldrb	r3, [r7, #23]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3718      	adds	r7, #24
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	2003ebfc 	.word	0x2003ebfc

08010138 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801013c:	4805      	ldr	r0, [pc, #20]	; (8010154 <BSP_SD_GetCardState+0x1c>)
 801013e:	f7fc fd85 	bl	800cc4c <HAL_SD_GetCardState>
 8010142:	4603      	mov	r3, r0
 8010144:	2b04      	cmp	r3, #4
 8010146:	bf14      	ite	ne
 8010148:	2301      	movne	r3, #1
 801014a:	2300      	moveq	r3, #0
 801014c:	b2db      	uxtb	r3, r3
}
 801014e:	4618      	mov	r0, r3
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	2003ebfc 	.word	0x2003ebfc

08010158 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010160:	6879      	ldr	r1, [r7, #4]
 8010162:	4803      	ldr	r0, [pc, #12]	; (8010170 <BSP_SD_GetCardInfo+0x18>)
 8010164:	f7fc fcca 	bl	800cafc <HAL_SD_GetCardInfo>
}
 8010168:	bf00      	nop
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	2003ebfc 	.word	0x2003ebfc

08010174 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801017c:	f000 f818 	bl	80101b0 <BSP_SD_AbortCallback>
}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010190:	f000 f9a8 	bl	80104e4 <BSP_SD_WriteCpltCallback>
}
 8010194:	bf00      	nop
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80101a4:	f000 f9aa 	bl	80104fc <BSP_SD_ReadCpltCallback>
}
 80101a8:	bf00      	nop
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80101b0:	b480      	push	{r7}
 80101b2:	af00      	add	r7, sp, #0

}
 80101b4:	bf00      	nop
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b082      	sub	sp, #8
 80101c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80101c4:	2301      	movs	r3, #1
 80101c6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80101c8:	f000 f80c 	bl	80101e4 <BSP_PlatformIsDetected>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d101      	bne.n	80101d6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80101d2:	2300      	movs	r3, #0
 80101d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	b2db      	uxtb	r3, r3
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
	...

080101e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80101ea:	2301      	movs	r3, #1
 80101ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80101ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80101f2:	4806      	ldr	r0, [pc, #24]	; (801020c <BSP_PlatformIsDetected+0x28>)
 80101f4:	f7fa f87e 	bl	800a2f4 <HAL_GPIO_ReadPin>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80101fe:	2300      	movs	r3, #0
 8010200:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010202:	79fb      	ldrb	r3, [r7, #7]
}
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	40020000 	.word	0x40020000

08010210 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010218:	f7f8 fde2 	bl	8008de0 <HAL_GetTick>
 801021c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801021e:	e006      	b.n	801022e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010220:	f7ff ff8a 	bl	8010138 <BSP_SD_GetCardState>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801022a:	2300      	movs	r3, #0
 801022c:	e009      	b.n	8010242 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801022e:	f7f8 fdd7 	bl	8008de0 <HAL_GetTick>
 8010232:	4602      	mov	r2, r0
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	429a      	cmp	r2, r3
 801023c:	d8f0      	bhi.n	8010220 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801023e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
	...

0801024c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010256:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <SD_CheckStatus+0x38>)
 8010258:	2201      	movs	r2, #1
 801025a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801025c:	f7ff ff6c 	bl	8010138 <BSP_SD_GetCardState>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d107      	bne.n	8010276 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010266:	4b07      	ldr	r3, [pc, #28]	; (8010284 <SD_CheckStatus+0x38>)
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	b2db      	uxtb	r3, r3
 801026c:	f023 0301 	bic.w	r3, r3, #1
 8010270:	b2da      	uxtb	r2, r3
 8010272:	4b04      	ldr	r3, [pc, #16]	; (8010284 <SD_CheckStatus+0x38>)
 8010274:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010276:	4b03      	ldr	r3, [pc, #12]	; (8010284 <SD_CheckStatus+0x38>)
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	b2db      	uxtb	r3, r3
}
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	20000009 	.word	0x20000009

08010288 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010292:	f7ff fef7 	bl	8010084 <BSP_SD_Init>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d107      	bne.n	80102ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff ffd4 	bl	801024c <SD_CheckStatus>
 80102a4:	4603      	mov	r3, r0
 80102a6:	461a      	mov	r2, r3
 80102a8:	4b04      	ldr	r3, [pc, #16]	; (80102bc <SD_initialize+0x34>)
 80102aa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80102ac:	4b03      	ldr	r3, [pc, #12]	; (80102bc <SD_initialize+0x34>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	b2db      	uxtb	r3, r3
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	20000009 	.word	0x20000009

080102c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff ffbd 	bl	801024c <SD_CheckStatus>
 80102d2:	4603      	mov	r3, r0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b086      	sub	sp, #24
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60b9      	str	r1, [r7, #8]
 80102e4:	607a      	str	r2, [r7, #4]
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	4603      	mov	r3, r0
 80102ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80102ec:	2301      	movs	r3, #1
 80102ee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80102f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80102f4:	f7ff ff8c 	bl	8010210 <SD_CheckStatusWithTimeout>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	da01      	bge.n	8010302 <SD_read+0x26>
  {
    return res;
 80102fe:	7dfb      	ldrb	r3, [r7, #23]
 8010300:	e03b      	b.n	801037a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010302:	683a      	ldr	r2, [r7, #0]
 8010304:	6879      	ldr	r1, [r7, #4]
 8010306:	68b8      	ldr	r0, [r7, #8]
 8010308:	f7ff fee2 	bl	80100d0 <BSP_SD_ReadBlocks_DMA>
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d132      	bne.n	8010378 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010312:	4b1c      	ldr	r3, [pc, #112]	; (8010384 <SD_read+0xa8>)
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010318:	f7f8 fd62 	bl	8008de0 <HAL_GetTick>
 801031c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801031e:	bf00      	nop
 8010320:	4b18      	ldr	r3, [pc, #96]	; (8010384 <SD_read+0xa8>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d108      	bne.n	801033a <SD_read+0x5e>
 8010328:	f7f8 fd5a 	bl	8008de0 <HAL_GetTick>
 801032c:	4602      	mov	r2, r0
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	f247 522f 	movw	r2, #29999	; 0x752f
 8010336:	4293      	cmp	r3, r2
 8010338:	d9f2      	bls.n	8010320 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801033a:	4b12      	ldr	r3, [pc, #72]	; (8010384 <SD_read+0xa8>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d102      	bne.n	8010348 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010342:	2301      	movs	r3, #1
 8010344:	75fb      	strb	r3, [r7, #23]
 8010346:	e017      	b.n	8010378 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010348:	4b0e      	ldr	r3, [pc, #56]	; (8010384 <SD_read+0xa8>)
 801034a:	2200      	movs	r2, #0
 801034c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801034e:	f7f8 fd47 	bl	8008de0 <HAL_GetTick>
 8010352:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010354:	e007      	b.n	8010366 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010356:	f7ff feef 	bl	8010138 <BSP_SD_GetCardState>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d102      	bne.n	8010366 <SD_read+0x8a>
          {
            res = RES_OK;
 8010360:	2300      	movs	r3, #0
 8010362:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010364:	e008      	b.n	8010378 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010366:	f7f8 fd3b 	bl	8008de0 <HAL_GetTick>
 801036a:	4602      	mov	r2, r0
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	f247 522f 	movw	r2, #29999	; 0x752f
 8010374:	4293      	cmp	r3, r2
 8010376:	d9ee      	bls.n	8010356 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010378:	7dfb      	ldrb	r3, [r7, #23]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	2003c498 	.word	0x2003c498

08010388 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	60b9      	str	r1, [r7, #8]
 8010390:	607a      	str	r2, [r7, #4]
 8010392:	603b      	str	r3, [r7, #0]
 8010394:	4603      	mov	r3, r0
 8010396:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010398:	2301      	movs	r3, #1
 801039a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801039c:	4b24      	ldr	r3, [pc, #144]	; (8010430 <SD_write+0xa8>)
 801039e:	2200      	movs	r2, #0
 80103a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80103a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80103a6:	f7ff ff33 	bl	8010210 <SD_CheckStatusWithTimeout>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	da01      	bge.n	80103b4 <SD_write+0x2c>
  {
    return res;
 80103b0:	7dfb      	ldrb	r3, [r7, #23]
 80103b2:	e038      	b.n	8010426 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	6879      	ldr	r1, [r7, #4]
 80103b8:	68b8      	ldr	r0, [r7, #8]
 80103ba:	f7ff fea3 	bl	8010104 <BSP_SD_WriteBlocks_DMA>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d12f      	bne.n	8010424 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80103c4:	f7f8 fd0c 	bl	8008de0 <HAL_GetTick>
 80103c8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80103ca:	bf00      	nop
 80103cc:	4b18      	ldr	r3, [pc, #96]	; (8010430 <SD_write+0xa8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d108      	bne.n	80103e6 <SD_write+0x5e>
 80103d4:	f7f8 fd04 	bl	8008de0 <HAL_GetTick>
 80103d8:	4602      	mov	r2, r0
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	f247 522f 	movw	r2, #29999	; 0x752f
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d9f2      	bls.n	80103cc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80103e6:	4b12      	ldr	r3, [pc, #72]	; (8010430 <SD_write+0xa8>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d102      	bne.n	80103f4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80103ee:	2301      	movs	r3, #1
 80103f0:	75fb      	strb	r3, [r7, #23]
 80103f2:	e017      	b.n	8010424 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80103f4:	4b0e      	ldr	r3, [pc, #56]	; (8010430 <SD_write+0xa8>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80103fa:	f7f8 fcf1 	bl	8008de0 <HAL_GetTick>
 80103fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010400:	e007      	b.n	8010412 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010402:	f7ff fe99 	bl	8010138 <BSP_SD_GetCardState>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d102      	bne.n	8010412 <SD_write+0x8a>
          {
            res = RES_OK;
 801040c:	2300      	movs	r3, #0
 801040e:	75fb      	strb	r3, [r7, #23]
            break;
 8010410:	e008      	b.n	8010424 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010412:	f7f8 fce5 	bl	8008de0 <HAL_GetTick>
 8010416:	4602      	mov	r2, r0
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010420:	4293      	cmp	r3, r2
 8010422:	d9ee      	bls.n	8010402 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010424:	7dfb      	ldrb	r3, [r7, #23]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3718      	adds	r7, #24
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	2003c494 	.word	0x2003c494

08010434 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b08c      	sub	sp, #48	; 0x30
 8010438:	af00      	add	r7, sp, #0
 801043a:	4603      	mov	r3, r0
 801043c:	603a      	str	r2, [r7, #0]
 801043e:	71fb      	strb	r3, [r7, #7]
 8010440:	460b      	mov	r3, r1
 8010442:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010444:	2301      	movs	r3, #1
 8010446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801044a:	4b25      	ldr	r3, [pc, #148]	; (80104e0 <SD_ioctl+0xac>)
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	b2db      	uxtb	r3, r3
 8010450:	f003 0301 	and.w	r3, r3, #1
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <SD_ioctl+0x28>
 8010458:	2303      	movs	r3, #3
 801045a:	e03c      	b.n	80104d6 <SD_ioctl+0xa2>

  switch (cmd)
 801045c:	79bb      	ldrb	r3, [r7, #6]
 801045e:	2b03      	cmp	r3, #3
 8010460:	d834      	bhi.n	80104cc <SD_ioctl+0x98>
 8010462:	a201      	add	r2, pc, #4	; (adr r2, 8010468 <SD_ioctl+0x34>)
 8010464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010468:	08010479 	.word	0x08010479
 801046c:	08010481 	.word	0x08010481
 8010470:	08010499 	.word	0x08010499
 8010474:	080104b3 	.word	0x080104b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801047e:	e028      	b.n	80104d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010480:	f107 030c 	add.w	r3, r7, #12
 8010484:	4618      	mov	r0, r3
 8010486:	f7ff fe67 	bl	8010158 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801048a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010490:	2300      	movs	r3, #0
 8010492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010496:	e01c      	b.n	80104d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010498:	f107 030c 	add.w	r3, r7, #12
 801049c:	4618      	mov	r0, r3
 801049e:	f7ff fe5b 	bl	8010158 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80104a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80104aa:	2300      	movs	r3, #0
 80104ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80104b0:	e00f      	b.n	80104d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80104b2:	f107 030c 	add.w	r3, r7, #12
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7ff fe4e 	bl	8010158 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80104bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104be:	0a5a      	lsrs	r2, r3, #9
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80104c4:	2300      	movs	r3, #0
 80104c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80104ca:	e002      	b.n	80104d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80104cc:	2304      	movs	r3, #4
 80104ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80104d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3730      	adds	r7, #48	; 0x30
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	20000009 	.word	0x20000009

080104e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80104e4:	b480      	push	{r7}
 80104e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80104e8:	4b03      	ldr	r3, [pc, #12]	; (80104f8 <BSP_SD_WriteCpltCallback+0x14>)
 80104ea:	2201      	movs	r2, #1
 80104ec:	601a      	str	r2, [r3, #0]
}
 80104ee:	bf00      	nop
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	2003c494 	.word	0x2003c494

080104fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80104fc:	b480      	push	{r7}
 80104fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010500:	4b03      	ldr	r3, [pc, #12]	; (8010510 <BSP_SD_ReadCpltCallback+0x14>)
 8010502:	2201      	movs	r2, #1
 8010504:	601a      	str	r2, [r3, #0]
}
 8010506:	bf00      	nop
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr
 8010510:	2003c498 	.word	0x2003c498

08010514 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	4603      	mov	r3, r0
 801051c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	4a08      	ldr	r2, [pc, #32]	; (8010544 <disk_status+0x30>)
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	4413      	add	r3, r2
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	79fa      	ldrb	r2, [r7, #7]
 801052c:	4905      	ldr	r1, [pc, #20]	; (8010544 <disk_status+0x30>)
 801052e:	440a      	add	r2, r1
 8010530:	7a12      	ldrb	r2, [r2, #8]
 8010532:	4610      	mov	r0, r2
 8010534:	4798      	blx	r3
 8010536:	4603      	mov	r3, r0
 8010538:	73fb      	strb	r3, [r7, #15]
  return stat;
 801053a:	7bfb      	ldrb	r3, [r7, #15]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3710      	adds	r7, #16
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	2003c4c4 	.word	0x2003c4c4

08010548 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010552:	2300      	movs	r3, #0
 8010554:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010556:	79fb      	ldrb	r3, [r7, #7]
 8010558:	4a0d      	ldr	r2, [pc, #52]	; (8010590 <disk_initialize+0x48>)
 801055a:	5cd3      	ldrb	r3, [r2, r3]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d111      	bne.n	8010584 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010560:	79fb      	ldrb	r3, [r7, #7]
 8010562:	4a0b      	ldr	r2, [pc, #44]	; (8010590 <disk_initialize+0x48>)
 8010564:	2101      	movs	r1, #1
 8010566:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010568:	79fb      	ldrb	r3, [r7, #7]
 801056a:	4a09      	ldr	r2, [pc, #36]	; (8010590 <disk_initialize+0x48>)
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	4413      	add	r3, r2
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	79fa      	ldrb	r2, [r7, #7]
 8010576:	4906      	ldr	r1, [pc, #24]	; (8010590 <disk_initialize+0x48>)
 8010578:	440a      	add	r2, r1
 801057a:	7a12      	ldrb	r2, [r2, #8]
 801057c:	4610      	mov	r0, r2
 801057e:	4798      	blx	r3
 8010580:	4603      	mov	r3, r0
 8010582:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010584:	7bfb      	ldrb	r3, [r7, #15]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	2003c4c4 	.word	0x2003c4c4

08010594 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010594:	b590      	push	{r4, r7, lr}
 8010596:	b087      	sub	sp, #28
 8010598:	af00      	add	r7, sp, #0
 801059a:	60b9      	str	r1, [r7, #8]
 801059c:	607a      	str	r2, [r7, #4]
 801059e:	603b      	str	r3, [r7, #0]
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	4a0a      	ldr	r2, [pc, #40]	; (80105d0 <disk_read+0x3c>)
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	4413      	add	r3, r2
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	689c      	ldr	r4, [r3, #8]
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	4a07      	ldr	r2, [pc, #28]	; (80105d0 <disk_read+0x3c>)
 80105b4:	4413      	add	r3, r2
 80105b6:	7a18      	ldrb	r0, [r3, #8]
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	687a      	ldr	r2, [r7, #4]
 80105bc:	68b9      	ldr	r1, [r7, #8]
 80105be:	47a0      	blx	r4
 80105c0:	4603      	mov	r3, r0
 80105c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80105c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd90      	pop	{r4, r7, pc}
 80105ce:	bf00      	nop
 80105d0:	2003c4c4 	.word	0x2003c4c4

080105d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80105d4:	b590      	push	{r4, r7, lr}
 80105d6:	b087      	sub	sp, #28
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	607a      	str	r2, [r7, #4]
 80105de:	603b      	str	r3, [r7, #0]
 80105e0:	4603      	mov	r3, r0
 80105e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
 80105e6:	4a0a      	ldr	r2, [pc, #40]	; (8010610 <disk_write+0x3c>)
 80105e8:	009b      	lsls	r3, r3, #2
 80105ea:	4413      	add	r3, r2
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	68dc      	ldr	r4, [r3, #12]
 80105f0:	7bfb      	ldrb	r3, [r7, #15]
 80105f2:	4a07      	ldr	r2, [pc, #28]	; (8010610 <disk_write+0x3c>)
 80105f4:	4413      	add	r3, r2
 80105f6:	7a18      	ldrb	r0, [r3, #8]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	68b9      	ldr	r1, [r7, #8]
 80105fe:	47a0      	blx	r4
 8010600:	4603      	mov	r3, r0
 8010602:	75fb      	strb	r3, [r7, #23]
  return res;
 8010604:	7dfb      	ldrb	r3, [r7, #23]
}
 8010606:	4618      	mov	r0, r3
 8010608:	371c      	adds	r7, #28
 801060a:	46bd      	mov	sp, r7
 801060c:	bd90      	pop	{r4, r7, pc}
 801060e:	bf00      	nop
 8010610:	2003c4c4 	.word	0x2003c4c4

08010614 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	4603      	mov	r3, r0
 801061c:	603a      	str	r2, [r7, #0]
 801061e:	71fb      	strb	r3, [r7, #7]
 8010620:	460b      	mov	r3, r1
 8010622:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010624:	79fb      	ldrb	r3, [r7, #7]
 8010626:	4a09      	ldr	r2, [pc, #36]	; (801064c <disk_ioctl+0x38>)
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4413      	add	r3, r2
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	79fa      	ldrb	r2, [r7, #7]
 8010632:	4906      	ldr	r1, [pc, #24]	; (801064c <disk_ioctl+0x38>)
 8010634:	440a      	add	r2, r1
 8010636:	7a10      	ldrb	r0, [r2, #8]
 8010638:	79b9      	ldrb	r1, [r7, #6]
 801063a:	683a      	ldr	r2, [r7, #0]
 801063c:	4798      	blx	r3
 801063e:	4603      	mov	r3, r0
 8010640:	73fb      	strb	r3, [r7, #15]
  return res;
 8010642:	7bfb      	ldrb	r3, [r7, #15]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3710      	adds	r7, #16
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	2003c4c4 	.word	0x2003c4c4

08010650 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	3301      	adds	r3, #1
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010660:	89fb      	ldrh	r3, [r7, #14]
 8010662:	021b      	lsls	r3, r3, #8
 8010664:	b21a      	sxth	r2, r3
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	b21b      	sxth	r3, r3
 801066c:	4313      	orrs	r3, r2
 801066e:	b21b      	sxth	r3, r3
 8010670:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010672:	89fb      	ldrh	r3, [r7, #14]
}
 8010674:	4618      	mov	r0, r3
 8010676:	3714      	adds	r7, #20
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010680:	b480      	push	{r7}
 8010682:	b085      	sub	sp, #20
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3303      	adds	r3, #3
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	021b      	lsls	r3, r3, #8
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	3202      	adds	r2, #2
 8010698:	7812      	ldrb	r2, [r2, #0]
 801069a:	4313      	orrs	r3, r2
 801069c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	021b      	lsls	r3, r3, #8
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	3201      	adds	r2, #1
 80106a6:	7812      	ldrb	r2, [r2, #0]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	021b      	lsls	r3, r3, #8
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	7812      	ldrb	r2, [r2, #0]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80106b8:	68fb      	ldr	r3, [r7, #12]
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3714      	adds	r7, #20
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80106c6:	b480      	push	{r7}
 80106c8:	b083      	sub	sp, #12
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	460b      	mov	r3, r1
 80106d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	607a      	str	r2, [r7, #4]
 80106d8:	887a      	ldrh	r2, [r7, #2]
 80106da:	b2d2      	uxtb	r2, r2
 80106dc:	701a      	strb	r2, [r3, #0]
 80106de:	887b      	ldrh	r3, [r7, #2]
 80106e0:	0a1b      	lsrs	r3, r3, #8
 80106e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	607a      	str	r2, [r7, #4]
 80106ea:	887a      	ldrh	r2, [r7, #2]
 80106ec:	b2d2      	uxtb	r2, r2
 80106ee:	701a      	strb	r2, [r3, #0]
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	1c5a      	adds	r2, r3, #1
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	683a      	ldr	r2, [r7, #0]
 801070e:	b2d2      	uxtb	r2, r2
 8010710:	701a      	strb	r2, [r3, #0]
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	0a1b      	lsrs	r3, r3, #8
 8010716:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	607a      	str	r2, [r7, #4]
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	b2d2      	uxtb	r2, r2
 8010722:	701a      	strb	r2, [r3, #0]
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	0a1b      	lsrs	r3, r3, #8
 8010728:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	1c5a      	adds	r2, r3, #1
 801072e:	607a      	str	r2, [r7, #4]
 8010730:	683a      	ldr	r2, [r7, #0]
 8010732:	b2d2      	uxtb	r2, r2
 8010734:	701a      	strb	r2, [r3, #0]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	0a1b      	lsrs	r3, r3, #8
 801073a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	1c5a      	adds	r2, r3, #1
 8010740:	607a      	str	r2, [r7, #4]
 8010742:	683a      	ldr	r2, [r7, #0]
 8010744:	b2d2      	uxtb	r2, r2
 8010746:	701a      	strb	r2, [r3, #0]
}
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010754:	b480      	push	{r7}
 8010756:	b087      	sub	sp, #28
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00d      	beq.n	801078a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	1c53      	adds	r3, r2, #1
 8010772:	613b      	str	r3, [r7, #16]
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	1c59      	adds	r1, r3, #1
 8010778:	6179      	str	r1, [r7, #20]
 801077a:	7812      	ldrb	r2, [r2, #0]
 801077c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	3b01      	subs	r3, #1
 8010782:	607b      	str	r3, [r7, #4]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1f1      	bne.n	801076e <mem_cpy+0x1a>
	}
}
 801078a:	bf00      	nop
 801078c:	371c      	adds	r7, #28
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr

08010796 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010796:	b480      	push	{r7}
 8010798:	b087      	sub	sp, #28
 801079a:	af00      	add	r7, sp, #0
 801079c:	60f8      	str	r0, [r7, #12]
 801079e:	60b9      	str	r1, [r7, #8]
 80107a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	1c5a      	adds	r2, r3, #1
 80107aa:	617a      	str	r2, [r7, #20]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	b2d2      	uxtb	r2, r2
 80107b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	3b01      	subs	r3, #1
 80107b6:	607b      	str	r3, [r7, #4]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1f3      	bne.n	80107a6 <mem_set+0x10>
}
 80107be:	bf00      	nop
 80107c0:	371c      	adds	r7, #28
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr

080107ca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80107ca:	b480      	push	{r7}
 80107cc:	b089      	sub	sp, #36	; 0x24
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	60f8      	str	r0, [r7, #12]
 80107d2:	60b9      	str	r1, [r7, #8]
 80107d4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	61fb      	str	r3, [r7, #28]
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	1c5a      	adds	r2, r3, #1
 80107e6:	61fa      	str	r2, [r7, #28]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	4619      	mov	r1, r3
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	61ba      	str	r2, [r7, #24]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	1acb      	subs	r3, r1, r3
 80107f6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	3b01      	subs	r3, #1
 80107fc:	607b      	str	r3, [r7, #4]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d002      	beq.n	801080a <mem_cmp+0x40>
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d0eb      	beq.n	80107e2 <mem_cmp+0x18>

	return r;
 801080a:	697b      	ldr	r3, [r7, #20]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3724      	adds	r7, #36	; 0x24
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010822:	e002      	b.n	801082a <chk_chr+0x12>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3301      	adds	r3, #1
 8010828:	607b      	str	r3, [r7, #4]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d005      	beq.n	801083e <chk_chr+0x26>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	461a      	mov	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	4293      	cmp	r3, r2
 801083c:	d1f2      	bne.n	8010824 <chk_chr+0xc>
	return *str;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	781b      	ldrb	r3, [r3, #0]
}
 8010842:	4618      	mov	r0, r3
 8010844:	370c      	adds	r7, #12
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr
	...

08010850 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010850:	b480      	push	{r7}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801085a:	2300      	movs	r3, #0
 801085c:	60bb      	str	r3, [r7, #8]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	60fb      	str	r3, [r7, #12]
 8010862:	e029      	b.n	80108b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010864:	4a27      	ldr	r2, [pc, #156]	; (8010904 <chk_lock+0xb4>)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	011b      	lsls	r3, r3, #4
 801086a:	4413      	add	r3, r2
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d01d      	beq.n	80108ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010872:	4a24      	ldr	r2, [pc, #144]	; (8010904 <chk_lock+0xb4>)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	011b      	lsls	r3, r3, #4
 8010878:	4413      	add	r3, r2
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	429a      	cmp	r2, r3
 8010882:	d116      	bne.n	80108b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010884:	4a1f      	ldr	r2, [pc, #124]	; (8010904 <chk_lock+0xb4>)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	011b      	lsls	r3, r3, #4
 801088a:	4413      	add	r3, r2
 801088c:	3304      	adds	r3, #4
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010894:	429a      	cmp	r2, r3
 8010896:	d10c      	bne.n	80108b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010898:	4a1a      	ldr	r2, [pc, #104]	; (8010904 <chk_lock+0xb4>)
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	011b      	lsls	r3, r3, #4
 801089e:	4413      	add	r3, r2
 80108a0:	3308      	adds	r3, #8
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d102      	bne.n	80108b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80108ac:	e007      	b.n	80108be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80108ae:	2301      	movs	r3, #1
 80108b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3301      	adds	r3, #1
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d9d2      	bls.n	8010864 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d109      	bne.n	80108d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d102      	bne.n	80108d0 <chk_lock+0x80>
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	d101      	bne.n	80108d4 <chk_lock+0x84>
 80108d0:	2300      	movs	r3, #0
 80108d2:	e010      	b.n	80108f6 <chk_lock+0xa6>
 80108d4:	2312      	movs	r3, #18
 80108d6:	e00e      	b.n	80108f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d108      	bne.n	80108f0 <chk_lock+0xa0>
 80108de:	4a09      	ldr	r2, [pc, #36]	; (8010904 <chk_lock+0xb4>)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	011b      	lsls	r3, r3, #4
 80108e4:	4413      	add	r3, r2
 80108e6:	330c      	adds	r3, #12
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ee:	d101      	bne.n	80108f4 <chk_lock+0xa4>
 80108f0:	2310      	movs	r3, #16
 80108f2:	e000      	b.n	80108f6 <chk_lock+0xa6>
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3714      	adds	r7, #20
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	2003c4a4 	.word	0x2003c4a4

08010908 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801090e:	2300      	movs	r3, #0
 8010910:	607b      	str	r3, [r7, #4]
 8010912:	e002      	b.n	801091a <enq_lock+0x12>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3301      	adds	r3, #1
 8010918:	607b      	str	r3, [r7, #4]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d806      	bhi.n	801092e <enq_lock+0x26>
 8010920:	4a09      	ldr	r2, [pc, #36]	; (8010948 <enq_lock+0x40>)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	011b      	lsls	r3, r3, #4
 8010926:	4413      	add	r3, r2
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1f2      	bne.n	8010914 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2b02      	cmp	r3, #2
 8010932:	bf14      	ite	ne
 8010934:	2301      	movne	r3, #1
 8010936:	2300      	moveq	r3, #0
 8010938:	b2db      	uxtb	r3, r3
}
 801093a:	4618      	mov	r0, r3
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	2003c4a4 	.word	0x2003c4a4

0801094c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010956:	2300      	movs	r3, #0
 8010958:	60fb      	str	r3, [r7, #12]
 801095a:	e01f      	b.n	801099c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801095c:	4a41      	ldr	r2, [pc, #260]	; (8010a64 <inc_lock+0x118>)
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	011b      	lsls	r3, r3, #4
 8010962:	4413      	add	r3, r2
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	429a      	cmp	r2, r3
 801096c:	d113      	bne.n	8010996 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801096e:	4a3d      	ldr	r2, [pc, #244]	; (8010a64 <inc_lock+0x118>)
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	011b      	lsls	r3, r3, #4
 8010974:	4413      	add	r3, r2
 8010976:	3304      	adds	r3, #4
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801097e:	429a      	cmp	r2, r3
 8010980:	d109      	bne.n	8010996 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010982:	4a38      	ldr	r2, [pc, #224]	; (8010a64 <inc_lock+0x118>)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	011b      	lsls	r3, r3, #4
 8010988:	4413      	add	r3, r2
 801098a:	3308      	adds	r3, #8
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010992:	429a      	cmp	r2, r3
 8010994:	d006      	beq.n	80109a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	3301      	adds	r3, #1
 801099a:	60fb      	str	r3, [r7, #12]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d9dc      	bls.n	801095c <inc_lock+0x10>
 80109a2:	e000      	b.n	80109a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80109a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d132      	bne.n	8010a12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80109ac:	2300      	movs	r3, #0
 80109ae:	60fb      	str	r3, [r7, #12]
 80109b0:	e002      	b.n	80109b8 <inc_lock+0x6c>
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	3301      	adds	r3, #1
 80109b6:	60fb      	str	r3, [r7, #12]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b01      	cmp	r3, #1
 80109bc:	d806      	bhi.n	80109cc <inc_lock+0x80>
 80109be:	4a29      	ldr	r2, [pc, #164]	; (8010a64 <inc_lock+0x118>)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	011b      	lsls	r3, r3, #4
 80109c4:	4413      	add	r3, r2
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1f2      	bne.n	80109b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d101      	bne.n	80109d6 <inc_lock+0x8a>
 80109d2:	2300      	movs	r3, #0
 80109d4:	e040      	b.n	8010a58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	4922      	ldr	r1, [pc, #136]	; (8010a64 <inc_lock+0x118>)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	011b      	lsls	r3, r3, #4
 80109e0:	440b      	add	r3, r1
 80109e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	689a      	ldr	r2, [r3, #8]
 80109e8:	491e      	ldr	r1, [pc, #120]	; (8010a64 <inc_lock+0x118>)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	011b      	lsls	r3, r3, #4
 80109ee:	440b      	add	r3, r1
 80109f0:	3304      	adds	r3, #4
 80109f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	695a      	ldr	r2, [r3, #20]
 80109f8:	491a      	ldr	r1, [pc, #104]	; (8010a64 <inc_lock+0x118>)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	011b      	lsls	r3, r3, #4
 80109fe:	440b      	add	r3, r1
 8010a00:	3308      	adds	r3, #8
 8010a02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010a04:	4a17      	ldr	r2, [pc, #92]	; (8010a64 <inc_lock+0x118>)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	011b      	lsls	r3, r3, #4
 8010a0a:	4413      	add	r3, r2
 8010a0c:	330c      	adds	r3, #12
 8010a0e:	2200      	movs	r2, #0
 8010a10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d009      	beq.n	8010a2c <inc_lock+0xe0>
 8010a18:	4a12      	ldr	r2, [pc, #72]	; (8010a64 <inc_lock+0x118>)
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	011b      	lsls	r3, r3, #4
 8010a1e:	4413      	add	r3, r2
 8010a20:	330c      	adds	r3, #12
 8010a22:	881b      	ldrh	r3, [r3, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d001      	beq.n	8010a2c <inc_lock+0xe0>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	e015      	b.n	8010a58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d108      	bne.n	8010a44 <inc_lock+0xf8>
 8010a32:	4a0c      	ldr	r2, [pc, #48]	; (8010a64 <inc_lock+0x118>)
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	011b      	lsls	r3, r3, #4
 8010a38:	4413      	add	r3, r2
 8010a3a:	330c      	adds	r3, #12
 8010a3c:	881b      	ldrh	r3, [r3, #0]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	e001      	b.n	8010a48 <inc_lock+0xfc>
 8010a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a48:	4906      	ldr	r1, [pc, #24]	; (8010a64 <inc_lock+0x118>)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	440b      	add	r3, r1
 8010a50:	330c      	adds	r3, #12
 8010a52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	3301      	adds	r3, #1
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	2003c4a4 	.word	0x2003c4a4

08010a68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	3b01      	subs	r3, #1
 8010a74:	607b      	str	r3, [r7, #4]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d825      	bhi.n	8010ac8 <dec_lock+0x60>
		n = Files[i].ctr;
 8010a7c:	4a17      	ldr	r2, [pc, #92]	; (8010adc <dec_lock+0x74>)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	011b      	lsls	r3, r3, #4
 8010a82:	4413      	add	r3, r2
 8010a84:	330c      	adds	r3, #12
 8010a86:	881b      	ldrh	r3, [r3, #0]
 8010a88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010a8a:	89fb      	ldrh	r3, [r7, #14]
 8010a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a90:	d101      	bne.n	8010a96 <dec_lock+0x2e>
 8010a92:	2300      	movs	r3, #0
 8010a94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010a96:	89fb      	ldrh	r3, [r7, #14]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <dec_lock+0x3a>
 8010a9c:	89fb      	ldrh	r3, [r7, #14]
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010aa2:	4a0e      	ldr	r2, [pc, #56]	; (8010adc <dec_lock+0x74>)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	011b      	lsls	r3, r3, #4
 8010aa8:	4413      	add	r3, r2
 8010aaa:	330c      	adds	r3, #12
 8010aac:	89fa      	ldrh	r2, [r7, #14]
 8010aae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010ab0:	89fb      	ldrh	r3, [r7, #14]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d105      	bne.n	8010ac2 <dec_lock+0x5a>
 8010ab6:	4a09      	ldr	r2, [pc, #36]	; (8010adc <dec_lock+0x74>)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	011b      	lsls	r3, r3, #4
 8010abc:	4413      	add	r3, r2
 8010abe:	2200      	movs	r2, #0
 8010ac0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	737b      	strb	r3, [r7, #13]
 8010ac6:	e001      	b.n	8010acc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010ac8:	2302      	movs	r3, #2
 8010aca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010acc:	7b7b      	ldrb	r3, [r7, #13]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	2003c4a4 	.word	0x2003c4a4

08010ae0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b085      	sub	sp, #20
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	e010      	b.n	8010b10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010aee:	4a0d      	ldr	r2, [pc, #52]	; (8010b24 <clear_lock+0x44>)
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	011b      	lsls	r3, r3, #4
 8010af4:	4413      	add	r3, r2
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d105      	bne.n	8010b0a <clear_lock+0x2a>
 8010afe:	4a09      	ldr	r2, [pc, #36]	; (8010b24 <clear_lock+0x44>)
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	011b      	lsls	r3, r3, #4
 8010b04:	4413      	add	r3, r2
 8010b06:	2200      	movs	r2, #0
 8010b08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d9eb      	bls.n	8010aee <clear_lock+0xe>
	}
}
 8010b16:	bf00      	nop
 8010b18:	3714      	adds	r7, #20
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	2003c4a4 	.word	0x2003c4a4

08010b28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	78db      	ldrb	r3, [r3, #3]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d034      	beq.n	8010ba6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	7858      	ldrb	r0, [r3, #1]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	697a      	ldr	r2, [r7, #20]
 8010b50:	f7ff fd40 	bl	80105d4 <disk_write>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d002      	beq.n	8010b60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	73fb      	strb	r3, [r7, #15]
 8010b5e:	e022      	b.n	8010ba6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b6a:	697a      	ldr	r2, [r7, #20]
 8010b6c:	1ad2      	subs	r2, r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6a1b      	ldr	r3, [r3, #32]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d217      	bcs.n	8010ba6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	789b      	ldrb	r3, [r3, #2]
 8010b7a:	613b      	str	r3, [r7, #16]
 8010b7c:	e010      	b.n	8010ba0 <sync_window+0x78>
					wsect += fs->fsize;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	697a      	ldr	r2, [r7, #20]
 8010b84:	4413      	add	r3, r2
 8010b86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	7858      	ldrb	r0, [r3, #1]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b92:	2301      	movs	r3, #1
 8010b94:	697a      	ldr	r2, [r7, #20]
 8010b96:	f7ff fd1d 	bl	80105d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	613b      	str	r3, [r7, #16]
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d8eb      	bhi.n	8010b7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc2:	683a      	ldr	r2, [r7, #0]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d01b      	beq.n	8010c00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7ff ffad 	bl	8010b28 <sync_window>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010bd2:	7bfb      	ldrb	r3, [r7, #15]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d113      	bne.n	8010c00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	7858      	ldrb	r0, [r3, #1]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010be2:	2301      	movs	r3, #1
 8010be4:	683a      	ldr	r2, [r7, #0]
 8010be6:	f7ff fcd5 	bl	8010594 <disk_read>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d004      	beq.n	8010bfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	683a      	ldr	r2, [r7, #0]
 8010bfe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7ff ff87 	bl	8010b28 <sync_window>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010c1e:	7bfb      	ldrb	r3, [r7, #15]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d159      	bne.n	8010cd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b03      	cmp	r3, #3
 8010c2a:	d149      	bne.n	8010cc0 <sync_fs+0xb4>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	791b      	ldrb	r3, [r3, #4]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d145      	bne.n	8010cc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	899b      	ldrh	r3, [r3, #12]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	2100      	movs	r1, #0
 8010c42:	f7ff fda8 	bl	8010796 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	3338      	adds	r3, #56	; 0x38
 8010c4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7ff fd37 	bl	80106c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3338      	adds	r3, #56	; 0x38
 8010c5c:	4921      	ldr	r1, [pc, #132]	; (8010ce4 <sync_fs+0xd8>)
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7ff fd4c 	bl	80106fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	3338      	adds	r3, #56	; 0x38
 8010c68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010c6c:	491e      	ldr	r1, [pc, #120]	; (8010ce8 <sync_fs+0xdc>)
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7ff fd44 	bl	80106fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	3338      	adds	r3, #56	; 0x38
 8010c78:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	695b      	ldr	r3, [r3, #20]
 8010c80:	4619      	mov	r1, r3
 8010c82:	4610      	mov	r0, r2
 8010c84:	f7ff fd3a 	bl	80106fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	3338      	adds	r3, #56	; 0x38
 8010c8c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	691b      	ldr	r3, [r3, #16]
 8010c94:	4619      	mov	r1, r3
 8010c96:	4610      	mov	r0, r2
 8010c98:	f7ff fd30 	bl	80106fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7858      	ldrb	r0, [r3, #1]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	f7ff fc8d 	bl	80105d4 <disk_write>
			fs->fsi_flag = 0;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	785b      	ldrb	r3, [r3, #1]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7ff fca3 	bl	8010614 <disk_ioctl>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <sync_fs+0xcc>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	41615252 	.word	0x41615252
 8010ce8:	61417272 	.word	0x61417272

08010cec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	3b02      	subs	r3, #2
 8010cfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	69db      	ldr	r3, [r3, #28]
 8010d00:	3b02      	subs	r3, #2
 8010d02:	683a      	ldr	r2, [r7, #0]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d301      	bcc.n	8010d0c <clust2sect+0x20>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e008      	b.n	8010d1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	895b      	ldrh	r3, [r3, #10]
 8010d10:	461a      	mov	r2, r3
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	fb03 f202 	mul.w	r2, r3, r2
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d1c:	4413      	add	r3, r2
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	370c      	adds	r7, #12
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr

08010d2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	b086      	sub	sp, #24
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
 8010d32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d904      	bls.n	8010d4a <get_fat+0x20>
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	69db      	ldr	r3, [r3, #28]
 8010d44:	683a      	ldr	r2, [r7, #0]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d302      	bcc.n	8010d50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	617b      	str	r3, [r7, #20]
 8010d4e:	e0b7      	b.n	8010ec0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010d50:	f04f 33ff 	mov.w	r3, #4294967295
 8010d54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	2b02      	cmp	r3, #2
 8010d5c:	d05a      	beq.n	8010e14 <get_fat+0xea>
 8010d5e:	2b03      	cmp	r3, #3
 8010d60:	d07d      	beq.n	8010e5e <get_fat+0x134>
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	f040 80a2 	bne.w	8010eac <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	60fb      	str	r3, [r7, #12]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	085b      	lsrs	r3, r3, #1
 8010d70:	68fa      	ldr	r2, [r7, #12]
 8010d72:	4413      	add	r3, r2
 8010d74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	899b      	ldrh	r3, [r3, #12]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d86:	4413      	add	r3, r2
 8010d88:	4619      	mov	r1, r3
 8010d8a:	6938      	ldr	r0, [r7, #16]
 8010d8c:	f7ff ff10 	bl	8010bb0 <move_window>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f040 808d 	bne.w	8010eb2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	1c5a      	adds	r2, r3, #1
 8010d9c:	60fa      	str	r2, [r7, #12]
 8010d9e:	693a      	ldr	r2, [r7, #16]
 8010da0:	8992      	ldrh	r2, [r2, #12]
 8010da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010da6:	fb02 f201 	mul.w	r2, r2, r1
 8010daa:	1a9b      	subs	r3, r3, r2
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	4413      	add	r3, r2
 8010db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010db4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	899b      	ldrh	r3, [r3, #12]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010dc6:	4413      	add	r3, r2
 8010dc8:	4619      	mov	r1, r3
 8010dca:	6938      	ldr	r0, [r7, #16]
 8010dcc:	f7ff fef0 	bl	8010bb0 <move_window>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d16f      	bne.n	8010eb6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	899b      	ldrh	r3, [r3, #12]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8010de2:	fb02 f201 	mul.w	r2, r2, r1
 8010de6:	1a9b      	subs	r3, r3, r2
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	4413      	add	r3, r2
 8010dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010df0:	021b      	lsls	r3, r3, #8
 8010df2:	461a      	mov	r2, r3
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	4313      	orrs	r3, r2
 8010df8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	f003 0301 	and.w	r3, r3, #1
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <get_fat+0xe0>
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	091b      	lsrs	r3, r3, #4
 8010e08:	e002      	b.n	8010e10 <get_fat+0xe6>
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e10:	617b      	str	r3, [r7, #20]
			break;
 8010e12:	e055      	b.n	8010ec0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	899b      	ldrh	r3, [r3, #12]
 8010e1c:	085b      	lsrs	r3, r3, #1
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	4619      	mov	r1, r3
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e28:	4413      	add	r3, r2
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6938      	ldr	r0, [r7, #16]
 8010e2e:	f7ff febf 	bl	8010bb0 <move_window>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d140      	bne.n	8010eba <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	693a      	ldr	r2, [r7, #16]
 8010e44:	8992      	ldrh	r2, [r2, #12]
 8010e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e4a:	fb02 f200 	mul.w	r2, r2, r0
 8010e4e:	1a9b      	subs	r3, r3, r2
 8010e50:	440b      	add	r3, r1
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7ff fbfc 	bl	8010650 <ld_word>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	617b      	str	r3, [r7, #20]
			break;
 8010e5c:	e030      	b.n	8010ec0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	899b      	ldrh	r3, [r3, #12]
 8010e66:	089b      	lsrs	r3, r3, #2
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e72:	4413      	add	r3, r2
 8010e74:	4619      	mov	r1, r3
 8010e76:	6938      	ldr	r0, [r7, #16]
 8010e78:	f7ff fe9a 	bl	8010bb0 <move_window>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d11d      	bne.n	8010ebe <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	8992      	ldrh	r2, [r2, #12]
 8010e90:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e94:	fb02 f200 	mul.w	r2, r2, r0
 8010e98:	1a9b      	subs	r3, r3, r2
 8010e9a:	440b      	add	r3, r1
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff fbef 	bl	8010680 <ld_dword>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010ea8:	617b      	str	r3, [r7, #20]
			break;
 8010eaa:	e009      	b.n	8010ec0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010eac:	2301      	movs	r3, #1
 8010eae:	617b      	str	r3, [r7, #20]
 8010eb0:	e006      	b.n	8010ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010eb2:	bf00      	nop
 8010eb4:	e004      	b.n	8010ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010eb6:	bf00      	nop
 8010eb8:	e002      	b.n	8010ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010eba:	bf00      	nop
 8010ebc:	e000      	b.n	8010ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ebe:	bf00      	nop
		}
	}

	return val;
 8010ec0:	697b      	ldr	r3, [r7, #20]
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3718      	adds	r7, #24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010eca:	b590      	push	{r4, r7, lr}
 8010ecc:	b089      	sub	sp, #36	; 0x24
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	60f8      	str	r0, [r7, #12]
 8010ed2:	60b9      	str	r1, [r7, #8]
 8010ed4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	f240 8106 	bls.w	80110ee <put_fat+0x224>
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	69db      	ldr	r3, [r3, #28]
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	f080 8100 	bcs.w	80110ee <put_fat+0x224>
		switch (fs->fs_type) {
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	2b02      	cmp	r3, #2
 8010ef4:	f000 8088 	beq.w	8011008 <put_fat+0x13e>
 8010ef8:	2b03      	cmp	r3, #3
 8010efa:	f000 80b0 	beq.w	801105e <put_fat+0x194>
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	f040 80f5 	bne.w	80110ee <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	61bb      	str	r3, [r7, #24]
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	085b      	lsrs	r3, r3, #1
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	4413      	add	r3, r2
 8010f10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	899b      	ldrh	r3, [r3, #12]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	69bb      	ldr	r3, [r7, #24]
 8010f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f22:	4413      	add	r3, r2
 8010f24:	4619      	mov	r1, r3
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f7ff fe42 	bl	8010bb0 <move_window>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f30:	7ffb      	ldrb	r3, [r7, #31]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f040 80d4 	bne.w	80110e0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	1c5a      	adds	r2, r3, #1
 8010f42:	61ba      	str	r2, [r7, #24]
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	8992      	ldrh	r2, [r2, #12]
 8010f48:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f4c:	fb02 f200 	mul.w	r2, r2, r0
 8010f50:	1a9b      	subs	r3, r3, r2
 8010f52:	440b      	add	r3, r1
 8010f54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00d      	beq.n	8010f7c <put_fat+0xb2>
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	b25b      	sxtb	r3, r3
 8010f66:	f003 030f 	and.w	r3, r3, #15
 8010f6a:	b25a      	sxtb	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	011b      	lsls	r3, r3, #4
 8010f72:	b25b      	sxtb	r3, r3
 8010f74:	4313      	orrs	r3, r2
 8010f76:	b25b      	sxtb	r3, r3
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	e001      	b.n	8010f80 <put_fat+0xb6>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	697a      	ldr	r2, [r7, #20]
 8010f82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2201      	movs	r2, #1
 8010f88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	899b      	ldrh	r3, [r3, #12]
 8010f92:	4619      	mov	r1, r3
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f7ff fe06 	bl	8010bb0 <move_window>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010fa8:	7ffb      	ldrb	r3, [r7, #31]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f040 809a 	bne.w	80110e4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	899b      	ldrh	r3, [r3, #12]
 8010fba:	461a      	mov	r2, r3
 8010fbc:	69bb      	ldr	r3, [r7, #24]
 8010fbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fc2:	fb02 f200 	mul.w	r2, r2, r0
 8010fc6:	1a9b      	subs	r3, r3, r2
 8010fc8:	440b      	add	r3, r1
 8010fca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	f003 0301 	and.w	r3, r3, #1
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d003      	beq.n	8010fde <put_fat+0x114>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	091b      	lsrs	r3, r3, #4
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	e00e      	b.n	8010ffc <put_fat+0x132>
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	b25b      	sxtb	r3, r3
 8010fe4:	f023 030f 	bic.w	r3, r3, #15
 8010fe8:	b25a      	sxtb	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	0a1b      	lsrs	r3, r3, #8
 8010fee:	b25b      	sxtb	r3, r3
 8010ff0:	f003 030f 	and.w	r3, r3, #15
 8010ff4:	b25b      	sxtb	r3, r3
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	b25b      	sxtb	r3, r3
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	697a      	ldr	r2, [r7, #20]
 8010ffe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2201      	movs	r2, #1
 8011004:	70da      	strb	r2, [r3, #3]
			break;
 8011006:	e072      	b.n	80110ee <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	899b      	ldrh	r3, [r3, #12]
 8011010:	085b      	lsrs	r3, r3, #1
 8011012:	b29b      	uxth	r3, r3
 8011014:	4619      	mov	r1, r3
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	fbb3 f3f1 	udiv	r3, r3, r1
 801101c:	4413      	add	r3, r2
 801101e:	4619      	mov	r1, r3
 8011020:	68f8      	ldr	r0, [r7, #12]
 8011022:	f7ff fdc5 	bl	8010bb0 <move_window>
 8011026:	4603      	mov	r3, r0
 8011028:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801102a:	7ffb      	ldrb	r3, [r7, #31]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d15b      	bne.n	80110e8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	005b      	lsls	r3, r3, #1
 801103a:	68fa      	ldr	r2, [r7, #12]
 801103c:	8992      	ldrh	r2, [r2, #12]
 801103e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011042:	fb02 f200 	mul.w	r2, r2, r0
 8011046:	1a9b      	subs	r3, r3, r2
 8011048:	440b      	add	r3, r1
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	b292      	uxth	r2, r2
 801104e:	4611      	mov	r1, r2
 8011050:	4618      	mov	r0, r3
 8011052:	f7ff fb38 	bl	80106c6 <st_word>
			fs->wflag = 1;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2201      	movs	r2, #1
 801105a:	70da      	strb	r2, [r3, #3]
			break;
 801105c:	e047      	b.n	80110ee <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	899b      	ldrh	r3, [r3, #12]
 8011066:	089b      	lsrs	r3, r3, #2
 8011068:	b29b      	uxth	r3, r3
 801106a:	4619      	mov	r1, r3
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011072:	4413      	add	r3, r2
 8011074:	4619      	mov	r1, r3
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f7ff fd9a 	bl	8010bb0 <move_window>
 801107c:	4603      	mov	r3, r0
 801107e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011080:	7ffb      	ldrb	r3, [r7, #31]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d132      	bne.n	80110ec <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	009b      	lsls	r3, r3, #2
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	8992      	ldrh	r2, [r2, #12]
 801109a:	fbb3 f0f2 	udiv	r0, r3, r2
 801109e:	fb02 f200 	mul.w	r2, r2, r0
 80110a2:	1a9b      	subs	r3, r3, r2
 80110a4:	440b      	add	r3, r1
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff faea 	bl	8010680 <ld_dword>
 80110ac:	4603      	mov	r3, r0
 80110ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80110b2:	4323      	orrs	r3, r4
 80110b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	009b      	lsls	r3, r3, #2
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	8992      	ldrh	r2, [r2, #12]
 80110c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80110c8:	fb02 f200 	mul.w	r2, r2, r0
 80110cc:	1a9b      	subs	r3, r3, r2
 80110ce:	440b      	add	r3, r1
 80110d0:	6879      	ldr	r1, [r7, #4]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ff fb12 	bl	80106fc <st_dword>
			fs->wflag = 1;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2201      	movs	r2, #1
 80110dc:	70da      	strb	r2, [r3, #3]
			break;
 80110de:	e006      	b.n	80110ee <put_fat+0x224>
			if (res != FR_OK) break;
 80110e0:	bf00      	nop
 80110e2:	e004      	b.n	80110ee <put_fat+0x224>
			if (res != FR_OK) break;
 80110e4:	bf00      	nop
 80110e6:	e002      	b.n	80110ee <put_fat+0x224>
			if (res != FR_OK) break;
 80110e8:	bf00      	nop
 80110ea:	e000      	b.n	80110ee <put_fat+0x224>
			if (res != FR_OK) break;
 80110ec:	bf00      	nop
		}
	}
	return res;
 80110ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3724      	adds	r7, #36	; 0x24
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd90      	pop	{r4, r7, pc}

080110f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011104:	2300      	movs	r3, #0
 8011106:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	2b01      	cmp	r3, #1
 8011112:	d904      	bls.n	801111e <remove_chain+0x26>
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	69db      	ldr	r3, [r3, #28]
 8011118:	68ba      	ldr	r2, [r7, #8]
 801111a:	429a      	cmp	r2, r3
 801111c:	d301      	bcc.n	8011122 <remove_chain+0x2a>
 801111e:	2302      	movs	r3, #2
 8011120:	e04b      	b.n	80111ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00c      	beq.n	8011142 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011128:	f04f 32ff 	mov.w	r2, #4294967295
 801112c:	6879      	ldr	r1, [r7, #4]
 801112e:	69b8      	ldr	r0, [r7, #24]
 8011130:	f7ff fecb 	bl	8010eca <put_fat>
 8011134:	4603      	mov	r3, r0
 8011136:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011138:	7ffb      	ldrb	r3, [r7, #31]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <remove_chain+0x4a>
 801113e:	7ffb      	ldrb	r3, [r7, #31]
 8011140:	e03b      	b.n	80111ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011142:	68b9      	ldr	r1, [r7, #8]
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f7ff fdf0 	bl	8010d2a <get_fat>
 801114a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d031      	beq.n	80111b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	2b01      	cmp	r3, #1
 8011156:	d101      	bne.n	801115c <remove_chain+0x64>
 8011158:	2302      	movs	r3, #2
 801115a:	e02e      	b.n	80111ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011162:	d101      	bne.n	8011168 <remove_chain+0x70>
 8011164:	2301      	movs	r3, #1
 8011166:	e028      	b.n	80111ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011168:	2200      	movs	r2, #0
 801116a:	68b9      	ldr	r1, [r7, #8]
 801116c:	69b8      	ldr	r0, [r7, #24]
 801116e:	f7ff feac 	bl	8010eca <put_fat>
 8011172:	4603      	mov	r3, r0
 8011174:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011176:	7ffb      	ldrb	r3, [r7, #31]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <remove_chain+0x88>
 801117c:	7ffb      	ldrb	r3, [r7, #31]
 801117e:	e01c      	b.n	80111ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	695a      	ldr	r2, [r3, #20]
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	69db      	ldr	r3, [r3, #28]
 8011188:	3b02      	subs	r3, #2
 801118a:	429a      	cmp	r2, r3
 801118c:	d20b      	bcs.n	80111a6 <remove_chain+0xae>
			fs->free_clst++;
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	695b      	ldr	r3, [r3, #20]
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	69bb      	ldr	r3, [r7, #24]
 8011196:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	791b      	ldrb	r3, [r3, #4]
 801119c:	f043 0301 	orr.w	r3, r3, #1
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80111aa:	69bb      	ldr	r3, [r7, #24]
 80111ac:	69db      	ldr	r3, [r3, #28]
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d3c6      	bcc.n	8011142 <remove_chain+0x4a>
 80111b4:	e000      	b.n	80111b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80111b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80111b8:	2300      	movs	r3, #0
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3720      	adds	r7, #32
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b088      	sub	sp, #32
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
 80111ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d10d      	bne.n	80111f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	691b      	ldr	r3, [r3, #16]
 80111dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d004      	beq.n	80111ee <create_chain+0x2c>
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	69db      	ldr	r3, [r3, #28]
 80111e8:	69ba      	ldr	r2, [r7, #24]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d31b      	bcc.n	8011226 <create_chain+0x64>
 80111ee:	2301      	movs	r3, #1
 80111f0:	61bb      	str	r3, [r7, #24]
 80111f2:	e018      	b.n	8011226 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f7ff fd97 	bl	8010d2a <get_fat>
 80111fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b01      	cmp	r3, #1
 8011202:	d801      	bhi.n	8011208 <create_chain+0x46>
 8011204:	2301      	movs	r3, #1
 8011206:	e070      	b.n	80112ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801120e:	d101      	bne.n	8011214 <create_chain+0x52>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	e06a      	b.n	80112ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	69db      	ldr	r3, [r3, #28]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	429a      	cmp	r2, r3
 801121c:	d201      	bcs.n	8011222 <create_chain+0x60>
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	e063      	b.n	80112ea <create_chain+0x128>
		scl = clst;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	3301      	adds	r3, #1
 801122e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	69fa      	ldr	r2, [r7, #28]
 8011236:	429a      	cmp	r2, r3
 8011238:	d307      	bcc.n	801124a <create_chain+0x88>
				ncl = 2;
 801123a:	2302      	movs	r3, #2
 801123c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801123e:	69fa      	ldr	r2, [r7, #28]
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	429a      	cmp	r2, r3
 8011244:	d901      	bls.n	801124a <create_chain+0x88>
 8011246:	2300      	movs	r3, #0
 8011248:	e04f      	b.n	80112ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801124a:	69f9      	ldr	r1, [r7, #28]
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7ff fd6c 	bl	8010d2a <get_fat>
 8011252:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00e      	beq.n	8011278 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d003      	beq.n	8011268 <create_chain+0xa6>
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011266:	d101      	bne.n	801126c <create_chain+0xaa>
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	e03e      	b.n	80112ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801126c:	69fa      	ldr	r2, [r7, #28]
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	429a      	cmp	r2, r3
 8011272:	d1da      	bne.n	801122a <create_chain+0x68>
 8011274:	2300      	movs	r3, #0
 8011276:	e038      	b.n	80112ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011278:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801127a:	f04f 32ff 	mov.w	r2, #4294967295
 801127e:	69f9      	ldr	r1, [r7, #28]
 8011280:	6938      	ldr	r0, [r7, #16]
 8011282:	f7ff fe22 	bl	8010eca <put_fat>
 8011286:	4603      	mov	r3, r0
 8011288:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801128a:	7dfb      	ldrb	r3, [r7, #23]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d109      	bne.n	80112a4 <create_chain+0xe2>
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d006      	beq.n	80112a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011296:	69fa      	ldr	r2, [r7, #28]
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6938      	ldr	r0, [r7, #16]
 801129c:	f7ff fe15 	bl	8010eca <put_fat>
 80112a0:	4603      	mov	r3, r0
 80112a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80112a4:	7dfb      	ldrb	r3, [r7, #23]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d116      	bne.n	80112d8 <create_chain+0x116>
		fs->last_clst = ncl;
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	69fa      	ldr	r2, [r7, #28]
 80112ae:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	695a      	ldr	r2, [r3, #20]
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	69db      	ldr	r3, [r3, #28]
 80112b8:	3b02      	subs	r3, #2
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d804      	bhi.n	80112c8 <create_chain+0x106>
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	695b      	ldr	r3, [r3, #20]
 80112c2:	1e5a      	subs	r2, r3, #1
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	791b      	ldrb	r3, [r3, #4]
 80112cc:	f043 0301 	orr.w	r3, r3, #1
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	711a      	strb	r2, [r3, #4]
 80112d6:	e007      	b.n	80112e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80112d8:	7dfb      	ldrb	r3, [r7, #23]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d102      	bne.n	80112e4 <create_chain+0x122>
 80112de:	f04f 33ff 	mov.w	r3, #4294967295
 80112e2:	e000      	b.n	80112e6 <create_chain+0x124>
 80112e4:	2301      	movs	r3, #1
 80112e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80112e8:	69fb      	ldr	r3, [r7, #28]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3720      	adds	r7, #32
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b087      	sub	sp, #28
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011306:	3304      	adds	r3, #4
 8011308:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	899b      	ldrh	r3, [r3, #12]
 801130e:	461a      	mov	r2, r3
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	fbb3 f3f2 	udiv	r3, r3, r2
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	8952      	ldrh	r2, [r2, #10]
 801131a:	fbb3 f3f2 	udiv	r3, r3, r2
 801131e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	1d1a      	adds	r2, r3, #4
 8011324:	613a      	str	r2, [r7, #16]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <clmt_clust+0x42>
 8011330:	2300      	movs	r3, #0
 8011332:	e010      	b.n	8011356 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011334:	697a      	ldr	r2, [r7, #20]
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	429a      	cmp	r2, r3
 801133a:	d307      	bcc.n	801134c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801133c:	697a      	ldr	r2, [r7, #20]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	617b      	str	r3, [r7, #20]
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	3304      	adds	r3, #4
 8011348:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801134a:	e7e9      	b.n	8011320 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801134c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	4413      	add	r3, r2
}
 8011356:	4618      	mov	r0, r3
 8011358:	371c      	adds	r7, #28
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr

08011362 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b086      	sub	sp, #24
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
 801136a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011378:	d204      	bcs.n	8011384 <dir_sdi+0x22>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	f003 031f 	and.w	r3, r3, #31
 8011380:	2b00      	cmp	r3, #0
 8011382:	d001      	beq.n	8011388 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011384:	2302      	movs	r3, #2
 8011386:	e071      	b.n	801146c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <dir_sdi+0x46>
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	d902      	bls.n	80113a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10c      	bne.n	80113c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	095b      	lsrs	r3, r3, #5
 80113b2:	693a      	ldr	r2, [r7, #16]
 80113b4:	8912      	ldrh	r2, [r2, #8]
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d301      	bcc.n	80113be <dir_sdi+0x5c>
 80113ba:	2302      	movs	r3, #2
 80113bc:	e056      	b.n	801146c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	61da      	str	r2, [r3, #28]
 80113c6:	e02d      	b.n	8011424 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	895b      	ldrh	r3, [r3, #10]
 80113cc:	461a      	mov	r2, r3
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	fb03 f302 	mul.w	r3, r3, r2
 80113d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80113d8:	e019      	b.n	801140e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6979      	ldr	r1, [r7, #20]
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff fca3 	bl	8010d2a <get_fat>
 80113e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ec:	d101      	bne.n	80113f2 <dir_sdi+0x90>
 80113ee:	2301      	movs	r3, #1
 80113f0:	e03c      	b.n	801146c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d904      	bls.n	8011402 <dir_sdi+0xa0>
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	69db      	ldr	r3, [r3, #28]
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d301      	bcc.n	8011406 <dir_sdi+0xa4>
 8011402:	2302      	movs	r3, #2
 8011404:	e032      	b.n	801146c <dir_sdi+0x10a>
			ofs -= csz;
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	1ad3      	subs	r3, r2, r3
 801140c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801140e:	683a      	ldr	r2, [r7, #0]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	429a      	cmp	r2, r3
 8011414:	d2e1      	bcs.n	80113da <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011416:	6979      	ldr	r1, [r7, #20]
 8011418:	6938      	ldr	r0, [r7, #16]
 801141a:	f7ff fc67 	bl	8010cec <clust2sect>
 801141e:	4602      	mov	r2, r0
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	697a      	ldr	r2, [r7, #20]
 8011428:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	69db      	ldr	r3, [r3, #28]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <dir_sdi+0xd4>
 8011432:	2302      	movs	r3, #2
 8011434:	e01a      	b.n	801146c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	69da      	ldr	r2, [r3, #28]
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	899b      	ldrh	r3, [r3, #12]
 801143e:	4619      	mov	r1, r3
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	fbb3 f3f1 	udiv	r3, r3, r1
 8011446:	441a      	add	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	899b      	ldrh	r3, [r3, #12]
 8011456:	461a      	mov	r2, r3
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	fbb3 f0f2 	udiv	r0, r3, r2
 801145e:	fb02 f200 	mul.w	r2, r2, r0
 8011462:	1a9b      	subs	r3, r3, r2
 8011464:	18ca      	adds	r2, r1, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801146a:	2300      	movs	r3, #0
}
 801146c:	4618      	mov	r0, r3
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	695b      	ldr	r3, [r3, #20]
 8011488:	3320      	adds	r3, #32
 801148a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	69db      	ldr	r3, [r3, #28]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d003      	beq.n	801149c <dir_next+0x28>
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801149a:	d301      	bcc.n	80114a0 <dir_next+0x2c>
 801149c:	2304      	movs	r3, #4
 801149e:	e0bb      	b.n	8011618 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	899b      	ldrh	r3, [r3, #12]
 80114a4:	461a      	mov	r2, r3
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80114ac:	fb02 f201 	mul.w	r2, r2, r1
 80114b0:	1a9b      	subs	r3, r3, r2
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	f040 809d 	bne.w	80115f2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	69db      	ldr	r3, [r3, #28]
 80114bc:	1c5a      	adds	r2, r3, #1
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	699b      	ldr	r3, [r3, #24]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d10b      	bne.n	80114e2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	095b      	lsrs	r3, r3, #5
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	8912      	ldrh	r2, [r2, #8]
 80114d2:	4293      	cmp	r3, r2
 80114d4:	f0c0 808d 	bcc.w	80115f2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	61da      	str	r2, [r3, #28]
 80114de:	2304      	movs	r3, #4
 80114e0:	e09a      	b.n	8011618 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	899b      	ldrh	r3, [r3, #12]
 80114e6:	461a      	mov	r2, r3
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80114ee:	68fa      	ldr	r2, [r7, #12]
 80114f0:	8952      	ldrh	r2, [r2, #10]
 80114f2:	3a01      	subs	r2, #1
 80114f4:	4013      	ands	r3, r2
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d17b      	bne.n	80115f2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	699b      	ldr	r3, [r3, #24]
 8011500:	4619      	mov	r1, r3
 8011502:	4610      	mov	r0, r2
 8011504:	f7ff fc11 	bl	8010d2a <get_fat>
 8011508:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2b01      	cmp	r3, #1
 801150e:	d801      	bhi.n	8011514 <dir_next+0xa0>
 8011510:	2302      	movs	r3, #2
 8011512:	e081      	b.n	8011618 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801151a:	d101      	bne.n	8011520 <dir_next+0xac>
 801151c:	2301      	movs	r3, #1
 801151e:	e07b      	b.n	8011618 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	69db      	ldr	r3, [r3, #28]
 8011524:	697a      	ldr	r2, [r7, #20]
 8011526:	429a      	cmp	r2, r3
 8011528:	d359      	bcc.n	80115de <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d104      	bne.n	801153a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	61da      	str	r2, [r3, #28]
 8011536:	2304      	movs	r3, #4
 8011538:	e06e      	b.n	8011618 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	699b      	ldr	r3, [r3, #24]
 8011540:	4619      	mov	r1, r3
 8011542:	4610      	mov	r0, r2
 8011544:	f7ff fe3d 	bl	80111c2 <create_chain>
 8011548:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d101      	bne.n	8011554 <dir_next+0xe0>
 8011550:	2307      	movs	r3, #7
 8011552:	e061      	b.n	8011618 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	2b01      	cmp	r3, #1
 8011558:	d101      	bne.n	801155e <dir_next+0xea>
 801155a:	2302      	movs	r3, #2
 801155c:	e05c      	b.n	8011618 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011564:	d101      	bne.n	801156a <dir_next+0xf6>
 8011566:	2301      	movs	r3, #1
 8011568:	e056      	b.n	8011618 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7ff fadc 	bl	8010b28 <sync_window>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d001      	beq.n	801157a <dir_next+0x106>
 8011576:	2301      	movs	r3, #1
 8011578:	e04e      	b.n	8011618 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	899b      	ldrh	r3, [r3, #12]
 8011584:	461a      	mov	r2, r3
 8011586:	2100      	movs	r1, #0
 8011588:	f7ff f905 	bl	8010796 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801158c:	2300      	movs	r3, #0
 801158e:	613b      	str	r3, [r7, #16]
 8011590:	6979      	ldr	r1, [r7, #20]
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f7ff fbaa 	bl	8010cec <clust2sect>
 8011598:	4602      	mov	r2, r0
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	635a      	str	r2, [r3, #52]	; 0x34
 801159e:	e012      	b.n	80115c6 <dir_next+0x152>
						fs->wflag = 1;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2201      	movs	r2, #1
 80115a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80115a6:	68f8      	ldr	r0, [r7, #12]
 80115a8:	f7ff fabe 	bl	8010b28 <sync_window>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d001      	beq.n	80115b6 <dir_next+0x142>
 80115b2:	2301      	movs	r3, #1
 80115b4:	e030      	b.n	8011618 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	3301      	adds	r3, #1
 80115ba:	613b      	str	r3, [r7, #16]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c0:	1c5a      	adds	r2, r3, #1
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	635a      	str	r2, [r3, #52]	; 0x34
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	895b      	ldrh	r3, [r3, #10]
 80115ca:	461a      	mov	r2, r3
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d3e6      	bcc.n	80115a0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	1ad2      	subs	r2, r2, r3
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	697a      	ldr	r2, [r7, #20]
 80115e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80115e4:	6979      	ldr	r1, [r7, #20]
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f7ff fb80 	bl	8010cec <clust2sect>
 80115ec:	4602      	mov	r2, r0
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	68ba      	ldr	r2, [r7, #8]
 80115f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	899b      	ldrh	r3, [r3, #12]
 8011602:	461a      	mov	r2, r3
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	fbb3 f0f2 	udiv	r0, r3, r2
 801160a:	fb02 f200 	mul.w	r2, r2, r0
 801160e:	1a9b      	subs	r3, r3, r2
 8011610:	18ca      	adds	r2, r1, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b086      	sub	sp, #24
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011630:	2100      	movs	r1, #0
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7ff fe95 	bl	8011362 <dir_sdi>
 8011638:	4603      	mov	r3, r0
 801163a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801163c:	7dfb      	ldrb	r3, [r7, #23]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d12b      	bne.n	801169a <dir_alloc+0x7a>
		n = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	69db      	ldr	r3, [r3, #28]
 801164a:	4619      	mov	r1, r3
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7ff faaf 	bl	8010bb0 <move_window>
 8011652:	4603      	mov	r3, r0
 8011654:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011656:	7dfb      	ldrb	r3, [r7, #23]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d11d      	bne.n	8011698 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6a1b      	ldr	r3, [r3, #32]
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	2be5      	cmp	r3, #229	; 0xe5
 8011664:	d004      	beq.n	8011670 <dir_alloc+0x50>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d107      	bne.n	8011680 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	3301      	adds	r3, #1
 8011674:	613b      	str	r3, [r7, #16]
 8011676:	693a      	ldr	r2, [r7, #16]
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	429a      	cmp	r2, r3
 801167c:	d102      	bne.n	8011684 <dir_alloc+0x64>
 801167e:	e00c      	b.n	801169a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011680:	2300      	movs	r3, #0
 8011682:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011684:	2101      	movs	r1, #1
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f7ff fef4 	bl	8011474 <dir_next>
 801168c:	4603      	mov	r3, r0
 801168e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011690:	7dfb      	ldrb	r3, [r7, #23]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d0d7      	beq.n	8011646 <dir_alloc+0x26>
 8011696:	e000      	b.n	801169a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011698:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801169a:	7dfb      	ldrb	r3, [r7, #23]
 801169c:	2b04      	cmp	r3, #4
 801169e:	d101      	bne.n	80116a4 <dir_alloc+0x84>
 80116a0:	2307      	movs	r3, #7
 80116a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80116a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3718      	adds	r7, #24
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b084      	sub	sp, #16
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	331a      	adds	r3, #26
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe ffc7 	bl	8010650 <ld_word>
 80116c2:	4603      	mov	r3, r0
 80116c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b03      	cmp	r3, #3
 80116cc:	d109      	bne.n	80116e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	3314      	adds	r3, #20
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fe ffbc 	bl	8010650 <ld_word>
 80116d8:	4603      	mov	r3, r0
 80116da:	041b      	lsls	r3, r3, #16
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	4313      	orrs	r3, r2
 80116e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80116e2:	68fb      	ldr	r3, [r7, #12]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3710      	adds	r7, #16
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	60b9      	str	r1, [r7, #8]
 80116f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	331a      	adds	r3, #26
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	b292      	uxth	r2, r2
 8011700:	4611      	mov	r1, r2
 8011702:	4618      	mov	r0, r3
 8011704:	f7fe ffdf 	bl	80106c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2b03      	cmp	r3, #3
 801170e:	d109      	bne.n	8011724 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	f103 0214 	add.w	r2, r3, #20
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	0c1b      	lsrs	r3, r3, #16
 801171a:	b29b      	uxth	r3, r3
 801171c:	4619      	mov	r1, r3
 801171e:	4610      	mov	r0, r2
 8011720:	f7fe ffd1 	bl	80106c6 <st_word>
	}
}
 8011724:	bf00      	nop
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b086      	sub	sp, #24
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011736:	2304      	movs	r3, #4
 8011738:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011740:	e03c      	b.n	80117bc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	69db      	ldr	r3, [r3, #28]
 8011746:	4619      	mov	r1, r3
 8011748:	6938      	ldr	r0, [r7, #16]
 801174a:	f7ff fa31 	bl	8010bb0 <move_window>
 801174e:	4603      	mov	r3, r0
 8011750:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011752:	7dfb      	ldrb	r3, [r7, #23]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d136      	bne.n	80117c6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6a1b      	ldr	r3, [r3, #32]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011760:	7bfb      	ldrb	r3, [r7, #15]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d102      	bne.n	801176c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011766:	2304      	movs	r3, #4
 8011768:	75fb      	strb	r3, [r7, #23]
 801176a:	e031      	b.n	80117d0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	330b      	adds	r3, #11
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011778:	73bb      	strb	r3, [r7, #14]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	7bba      	ldrb	r2, [r7, #14]
 801177e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011780:	7bfb      	ldrb	r3, [r7, #15]
 8011782:	2be5      	cmp	r3, #229	; 0xe5
 8011784:	d011      	beq.n	80117aa <dir_read+0x7e>
 8011786:	7bfb      	ldrb	r3, [r7, #15]
 8011788:	2b2e      	cmp	r3, #46	; 0x2e
 801178a:	d00e      	beq.n	80117aa <dir_read+0x7e>
 801178c:	7bbb      	ldrb	r3, [r7, #14]
 801178e:	2b0f      	cmp	r3, #15
 8011790:	d00b      	beq.n	80117aa <dir_read+0x7e>
 8011792:	7bbb      	ldrb	r3, [r7, #14]
 8011794:	f023 0320 	bic.w	r3, r3, #32
 8011798:	2b08      	cmp	r3, #8
 801179a:	bf0c      	ite	eq
 801179c:	2301      	moveq	r3, #1
 801179e:	2300      	movne	r3, #0
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	461a      	mov	r2, r3
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d00f      	beq.n	80117ca <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80117aa:	2100      	movs	r1, #0
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff fe61 	bl	8011474 <dir_next>
 80117b2:	4603      	mov	r3, r0
 80117b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117b6:	7dfb      	ldrb	r3, [r7, #23]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d108      	bne.n	80117ce <dir_read+0xa2>
	while (dp->sect) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	69db      	ldr	r3, [r3, #28]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1be      	bne.n	8011742 <dir_read+0x16>
 80117c4:	e004      	b.n	80117d0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80117c6:	bf00      	nop
 80117c8:	e002      	b.n	80117d0 <dir_read+0xa4>
				break;
 80117ca:	bf00      	nop
 80117cc:	e000      	b.n	80117d0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80117ce:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80117d0:	7dfb      	ldrb	r3, [r7, #23]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <dir_read+0xb0>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	61da      	str	r2, [r3, #28]
	return res;
 80117dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3718      	adds	r7, #24
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b086      	sub	sp, #24
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80117f4:	2100      	movs	r1, #0
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7ff fdb3 	bl	8011362 <dir_sdi>
 80117fc:	4603      	mov	r3, r0
 80117fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011800:	7dfb      	ldrb	r3, [r7, #23]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d001      	beq.n	801180a <dir_find+0x24>
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	e03e      	b.n	8011888 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	69db      	ldr	r3, [r3, #28]
 801180e:	4619      	mov	r1, r3
 8011810:	6938      	ldr	r0, [r7, #16]
 8011812:	f7ff f9cd 	bl	8010bb0 <move_window>
 8011816:	4603      	mov	r3, r0
 8011818:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801181a:	7dfb      	ldrb	r3, [r7, #23]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d12f      	bne.n	8011880 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6a1b      	ldr	r3, [r3, #32]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011828:	7bfb      	ldrb	r3, [r7, #15]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d102      	bne.n	8011834 <dir_find+0x4e>
 801182e:	2304      	movs	r3, #4
 8011830:	75fb      	strb	r3, [r7, #23]
 8011832:	e028      	b.n	8011886 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6a1b      	ldr	r3, [r3, #32]
 8011838:	330b      	adds	r3, #11
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011840:	b2da      	uxtb	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6a1b      	ldr	r3, [r3, #32]
 801184a:	330b      	adds	r3, #11
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	f003 0308 	and.w	r3, r3, #8
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10a      	bne.n	801186c <dir_find+0x86>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6a18      	ldr	r0, [r3, #32]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	3324      	adds	r3, #36	; 0x24
 801185e:	220b      	movs	r2, #11
 8011860:	4619      	mov	r1, r3
 8011862:	f7fe ffb2 	bl	80107ca <mem_cmp>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00b      	beq.n	8011884 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801186c:	2100      	movs	r1, #0
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7ff fe00 	bl	8011474 <dir_next>
 8011874:	4603      	mov	r3, r0
 8011876:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011878:	7dfb      	ldrb	r3, [r7, #23]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d0c5      	beq.n	801180a <dir_find+0x24>
 801187e:	e002      	b.n	8011886 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011880:	bf00      	nop
 8011882:	e000      	b.n	8011886 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011884:	bf00      	nop

	return res;
 8011886:	7dfb      	ldrb	r3, [r7, #23]
}
 8011888:	4618      	mov	r0, r3
 801188a:	3718      	adds	r7, #24
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801189e:	2101      	movs	r1, #1
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff febd 	bl	8011620 <dir_alloc>
 80118a6:	4603      	mov	r3, r0
 80118a8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d11c      	bne.n	80118ea <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	69db      	ldr	r3, [r3, #28]
 80118b4:	4619      	mov	r1, r3
 80118b6:	68b8      	ldr	r0, [r7, #8]
 80118b8:	f7ff f97a 	bl	8010bb0 <move_window>
 80118bc:	4603      	mov	r3, r0
 80118be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d111      	bne.n	80118ea <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a1b      	ldr	r3, [r3, #32]
 80118ca:	2220      	movs	r2, #32
 80118cc:	2100      	movs	r1, #0
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fe ff61 	bl	8010796 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a18      	ldr	r0, [r3, #32]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	3324      	adds	r3, #36	; 0x24
 80118dc:	220b      	movs	r2, #11
 80118de:	4619      	mov	r1, r3
 80118e0:	f7fe ff38 	bl	8010754 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	2201      	movs	r2, #1
 80118e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80118ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	69db      	ldr	r3, [r3, #28]
 8011906:	4619      	mov	r1, r3
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f7ff f951 	bl	8010bb0 <move_window>
 801190e:	4603      	mov	r3, r0
 8011910:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8011912:	7afb      	ldrb	r3, [r7, #11]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d106      	bne.n	8011926 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a1b      	ldr	r3, [r3, #32]
 801191c:	22e5      	movs	r2, #229	; 0xe5
 801191e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2201      	movs	r2, #1
 8011924:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011926:	7afb      	ldrb	r3, [r7, #11]
}
 8011928:	4618      	mov	r0, r3
 801192a:	3710      	adds	r7, #16
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b088      	sub	sp, #32
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3324      	adds	r3, #36	; 0x24
 8011944:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011946:	220b      	movs	r2, #11
 8011948:	2120      	movs	r1, #32
 801194a:	68b8      	ldr	r0, [r7, #8]
 801194c:	f7fe ff23 	bl	8010796 <mem_set>
	si = i = 0; ni = 8;
 8011950:	2300      	movs	r3, #0
 8011952:	613b      	str	r3, [r7, #16]
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	617b      	str	r3, [r7, #20]
 8011958:	2308      	movs	r3, #8
 801195a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	4413      	add	r3, r2
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	2b2e      	cmp	r3, #46	; 0x2e
 8011966:	d12f      	bne.n	80119c8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	617a      	str	r2, [r7, #20]
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	4413      	add	r3, r2
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8011976:	7ffb      	ldrb	r3, [r7, #31]
 8011978:	2b2e      	cmp	r3, #46	; 0x2e
 801197a:	d10a      	bne.n	8011992 <create_name+0x62>
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	2b02      	cmp	r3, #2
 8011980:	d807      	bhi.n	8011992 <create_name+0x62>
			sfn[i++] = c;
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	1c5a      	adds	r2, r3, #1
 8011986:	613a      	str	r2, [r7, #16]
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	4413      	add	r3, r2
 801198c:	7ffa      	ldrb	r2, [r7, #31]
 801198e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011990:	e7ea      	b.n	8011968 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011992:	7ffb      	ldrb	r3, [r7, #31]
 8011994:	2b2f      	cmp	r3, #47	; 0x2f
 8011996:	d007      	beq.n	80119a8 <create_name+0x78>
 8011998:	7ffb      	ldrb	r3, [r7, #31]
 801199a:	2b5c      	cmp	r3, #92	; 0x5c
 801199c:	d004      	beq.n	80119a8 <create_name+0x78>
 801199e:	7ffb      	ldrb	r3, [r7, #31]
 80119a0:	2b20      	cmp	r3, #32
 80119a2:	d901      	bls.n	80119a8 <create_name+0x78>
 80119a4:	2306      	movs	r3, #6
 80119a6:	e084      	b.n	8011ab2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80119a8:	68fa      	ldr	r2, [r7, #12]
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	441a      	add	r2, r3
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80119b2:	7ffb      	ldrb	r3, [r7, #31]
 80119b4:	2b20      	cmp	r3, #32
 80119b6:	d801      	bhi.n	80119bc <create_name+0x8c>
 80119b8:	2224      	movs	r2, #36	; 0x24
 80119ba:	e000      	b.n	80119be <create_name+0x8e>
 80119bc:	2220      	movs	r2, #32
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	330b      	adds	r3, #11
 80119c2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80119c4:	2300      	movs	r3, #0
 80119c6:	e074      	b.n	8011ab2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	1c5a      	adds	r2, r3, #1
 80119cc:	617a      	str	r2, [r7, #20]
 80119ce:	68fa      	ldr	r2, [r7, #12]
 80119d0:	4413      	add	r3, r2
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80119d6:	7ffb      	ldrb	r3, [r7, #31]
 80119d8:	2b20      	cmp	r3, #32
 80119da:	d94e      	bls.n	8011a7a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80119dc:	7ffb      	ldrb	r3, [r7, #31]
 80119de:	2b2f      	cmp	r3, #47	; 0x2f
 80119e0:	d006      	beq.n	80119f0 <create_name+0xc0>
 80119e2:	7ffb      	ldrb	r3, [r7, #31]
 80119e4:	2b5c      	cmp	r3, #92	; 0x5c
 80119e6:	d110      	bne.n	8011a0a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80119e8:	e002      	b.n	80119f0 <create_name+0xc0>
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	3301      	adds	r3, #1
 80119ee:	617b      	str	r3, [r7, #20]
 80119f0:	68fa      	ldr	r2, [r7, #12]
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	4413      	add	r3, r2
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	2b2f      	cmp	r3, #47	; 0x2f
 80119fa:	d0f6      	beq.n	80119ea <create_name+0xba>
 80119fc:	68fa      	ldr	r2, [r7, #12]
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	4413      	add	r3, r2
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	2b5c      	cmp	r3, #92	; 0x5c
 8011a06:	d0f0      	beq.n	80119ea <create_name+0xba>
			break;
 8011a08:	e038      	b.n	8011a7c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011a0a:	7ffb      	ldrb	r3, [r7, #31]
 8011a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a0e:	d003      	beq.n	8011a18 <create_name+0xe8>
 8011a10:	693a      	ldr	r2, [r7, #16]
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d30c      	bcc.n	8011a32 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	2b0b      	cmp	r3, #11
 8011a1c:	d002      	beq.n	8011a24 <create_name+0xf4>
 8011a1e:	7ffb      	ldrb	r3, [r7, #31]
 8011a20:	2b2e      	cmp	r3, #46	; 0x2e
 8011a22:	d001      	beq.n	8011a28 <create_name+0xf8>
 8011a24:	2306      	movs	r3, #6
 8011a26:	e044      	b.n	8011ab2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8011a28:	2308      	movs	r3, #8
 8011a2a:	613b      	str	r3, [r7, #16]
 8011a2c:	230b      	movs	r3, #11
 8011a2e:	61bb      	str	r3, [r7, #24]
			continue;
 8011a30:	e022      	b.n	8011a78 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	da04      	bge.n	8011a44 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011a3a:	7ffb      	ldrb	r3, [r7, #31]
 8011a3c:	3b80      	subs	r3, #128	; 0x80
 8011a3e:	4a1f      	ldr	r2, [pc, #124]	; (8011abc <create_name+0x18c>)
 8011a40:	5cd3      	ldrb	r3, [r2, r3]
 8011a42:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011a44:	7ffb      	ldrb	r3, [r7, #31]
 8011a46:	4619      	mov	r1, r3
 8011a48:	481d      	ldr	r0, [pc, #116]	; (8011ac0 <create_name+0x190>)
 8011a4a:	f7fe fee5 	bl	8010818 <chk_chr>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d001      	beq.n	8011a58 <create_name+0x128>
 8011a54:	2306      	movs	r3, #6
 8011a56:	e02c      	b.n	8011ab2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011a58:	7ffb      	ldrb	r3, [r7, #31]
 8011a5a:	2b60      	cmp	r3, #96	; 0x60
 8011a5c:	d905      	bls.n	8011a6a <create_name+0x13a>
 8011a5e:	7ffb      	ldrb	r3, [r7, #31]
 8011a60:	2b7a      	cmp	r3, #122	; 0x7a
 8011a62:	d802      	bhi.n	8011a6a <create_name+0x13a>
 8011a64:	7ffb      	ldrb	r3, [r7, #31]
 8011a66:	3b20      	subs	r3, #32
 8011a68:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	1c5a      	adds	r2, r3, #1
 8011a6e:	613a      	str	r2, [r7, #16]
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	4413      	add	r3, r2
 8011a74:	7ffa      	ldrb	r2, [r7, #31]
 8011a76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011a78:	e7a6      	b.n	80119c8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011a7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	441a      	add	r2, r3
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d101      	bne.n	8011a90 <create_name+0x160>
 8011a8c:	2306      	movs	r3, #6
 8011a8e:	e010      	b.n	8011ab2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	2be5      	cmp	r3, #229	; 0xe5
 8011a96:	d102      	bne.n	8011a9e <create_name+0x16e>
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2205      	movs	r2, #5
 8011a9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011a9e:	7ffb      	ldrb	r3, [r7, #31]
 8011aa0:	2b20      	cmp	r3, #32
 8011aa2:	d801      	bhi.n	8011aa8 <create_name+0x178>
 8011aa4:	2204      	movs	r2, #4
 8011aa6:	e000      	b.n	8011aaa <create_name+0x17a>
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	330b      	adds	r3, #11
 8011aae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011ab0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3720      	adds	r7, #32
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	08019288 	.word	0x08019288
 8011ac0:	08019238 	.word	0x08019238

08011ac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b086      	sub	sp, #24
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	2b2f      	cmp	r3, #47	; 0x2f
 8011ade:	d00b      	beq.n	8011af8 <follow_path+0x34>
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	2b5c      	cmp	r3, #92	; 0x5c
 8011ae6:	d007      	beq.n	8011af8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	699a      	ldr	r2, [r3, #24]
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	609a      	str	r2, [r3, #8]
 8011af0:	e00d      	b.n	8011b0e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	3301      	adds	r3, #1
 8011af6:	603b      	str	r3, [r7, #0]
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	2b2f      	cmp	r3, #47	; 0x2f
 8011afe:	d0f8      	beq.n	8011af2 <follow_path+0x2e>
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	2b5c      	cmp	r3, #92	; 0x5c
 8011b06:	d0f4      	beq.n	8011af2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	2b1f      	cmp	r3, #31
 8011b14:	d80a      	bhi.n	8011b2c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2280      	movs	r2, #128	; 0x80
 8011b1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011b1e:	2100      	movs	r1, #0
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ff fc1e 	bl	8011362 <dir_sdi>
 8011b26:	4603      	mov	r3, r0
 8011b28:	75fb      	strb	r3, [r7, #23]
 8011b2a:	e05b      	b.n	8011be4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011b2c:	463b      	mov	r3, r7
 8011b2e:	4619      	mov	r1, r3
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ff fefd 	bl	8011930 <create_name>
 8011b36:	4603      	mov	r3, r0
 8011b38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011b3a:	7dfb      	ldrb	r3, [r7, #23]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d14c      	bne.n	8011bda <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff fe50 	bl	80117e6 <dir_find>
 8011b46:	4603      	mov	r3, r0
 8011b48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011b50:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011b52:	7dfb      	ldrb	r3, [r7, #23]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d01b      	beq.n	8011b90 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011b58:	7dfb      	ldrb	r3, [r7, #23]
 8011b5a:	2b04      	cmp	r3, #4
 8011b5c:	d13f      	bne.n	8011bde <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011b5e:	7afb      	ldrb	r3, [r7, #11]
 8011b60:	f003 0320 	and.w	r3, r3, #32
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00b      	beq.n	8011b80 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011b68:	7afb      	ldrb	r3, [r7, #11]
 8011b6a:	f003 0304 	and.w	r3, r3, #4
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d031      	beq.n	8011bd6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2280      	movs	r2, #128	; 0x80
 8011b76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011b7e:	e02e      	b.n	8011bde <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011b80:	7afb      	ldrb	r3, [r7, #11]
 8011b82:	f003 0304 	and.w	r3, r3, #4
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d129      	bne.n	8011bde <follow_path+0x11a>
 8011b8a:	2305      	movs	r3, #5
 8011b8c:	75fb      	strb	r3, [r7, #23]
				break;
 8011b8e:	e026      	b.n	8011bde <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011b90:	7afb      	ldrb	r3, [r7, #11]
 8011b92:	f003 0304 	and.w	r3, r3, #4
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d123      	bne.n	8011be2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	799b      	ldrb	r3, [r3, #6]
 8011b9e:	f003 0310 	and.w	r3, r3, #16
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d102      	bne.n	8011bac <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011ba6:	2305      	movs	r3, #5
 8011ba8:	75fb      	strb	r3, [r7, #23]
 8011baa:	e01b      	b.n	8011be4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	695b      	ldr	r3, [r3, #20]
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	8992      	ldrh	r2, [r2, #12]
 8011bba:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bbe:	fb02 f200 	mul.w	r2, r2, r0
 8011bc2:	1a9b      	subs	r3, r3, r2
 8011bc4:	440b      	add	r3, r1
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f7ff fd70 	bl	80116ae <ld_clust>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	609a      	str	r2, [r3, #8]
 8011bd4:	e7aa      	b.n	8011b2c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011bd6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011bd8:	e7a8      	b.n	8011b2c <follow_path+0x68>
			if (res != FR_OK) break;
 8011bda:	bf00      	nop
 8011bdc:	e002      	b.n	8011be4 <follow_path+0x120>
				break;
 8011bde:	bf00      	nop
 8011be0:	e000      	b.n	8011be4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011be2:	bf00      	nop
			}
		}
	}

	return res;
 8011be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3718      	adds	r7, #24
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}

08011bee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011bee:	b480      	push	{r7}
 8011bf0:	b087      	sub	sp, #28
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bfa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d031      	beq.n	8011c68 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	617b      	str	r3, [r7, #20]
 8011c0a:	e002      	b.n	8011c12 <get_ldnumber+0x24>
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	617b      	str	r3, [r7, #20]
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	2b20      	cmp	r3, #32
 8011c18:	d903      	bls.n	8011c22 <get_ldnumber+0x34>
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b3a      	cmp	r3, #58	; 0x3a
 8011c20:	d1f4      	bne.n	8011c0c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b3a      	cmp	r3, #58	; 0x3a
 8011c28:	d11c      	bne.n	8011c64 <get_ldnumber+0x76>
			tp = *path;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	1c5a      	adds	r2, r3, #1
 8011c34:	60fa      	str	r2, [r7, #12]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	3b30      	subs	r3, #48	; 0x30
 8011c3a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	2b09      	cmp	r3, #9
 8011c40:	d80e      	bhi.n	8011c60 <get_ldnumber+0x72>
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d10a      	bne.n	8011c60 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d107      	bne.n	8011c60 <get_ldnumber+0x72>
					vol = (int)i;
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	3301      	adds	r3, #1
 8011c58:	617b      	str	r3, [r7, #20]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	697a      	ldr	r2, [r7, #20]
 8011c5e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	e002      	b.n	8011c6a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011c64:	2300      	movs	r3, #0
 8011c66:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011c68:	693b      	ldr	r3, [r7, #16]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	371c      	adds	r7, #28
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr
	...

08011c78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2200      	movs	r2, #0
 8011c86:	70da      	strb	r2, [r3, #3]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c8e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f7fe ff8c 	bl	8010bb0 <move_window>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d001      	beq.n	8011ca2 <check_fs+0x2a>
 8011c9e:	2304      	movs	r3, #4
 8011ca0:	e038      	b.n	8011d14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	3338      	adds	r3, #56	; 0x38
 8011ca6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fe fcd0 	bl	8010650 <ld_word>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d001      	beq.n	8011cc0 <check_fs+0x48>
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	e029      	b.n	8011d14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011cc6:	2be9      	cmp	r3, #233	; 0xe9
 8011cc8:	d009      	beq.n	8011cde <check_fs+0x66>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011cd0:	2beb      	cmp	r3, #235	; 0xeb
 8011cd2:	d11e      	bne.n	8011d12 <check_fs+0x9a>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011cda:	2b90      	cmp	r3, #144	; 0x90
 8011cdc:	d119      	bne.n	8011d12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	3338      	adds	r3, #56	; 0x38
 8011ce2:	3336      	adds	r3, #54	; 0x36
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fe fccb 	bl	8010680 <ld_dword>
 8011cea:	4603      	mov	r3, r0
 8011cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011cf0:	4a0a      	ldr	r2, [pc, #40]	; (8011d1c <check_fs+0xa4>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d101      	bne.n	8011cfa <check_fs+0x82>
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	e00c      	b.n	8011d14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	3338      	adds	r3, #56	; 0x38
 8011cfe:	3352      	adds	r3, #82	; 0x52
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7fe fcbd 	bl	8010680 <ld_dword>
 8011d06:	4602      	mov	r2, r0
 8011d08:	4b05      	ldr	r3, [pc, #20]	; (8011d20 <check_fs+0xa8>)
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d101      	bne.n	8011d12 <check_fs+0x9a>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	e000      	b.n	8011d14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011d12:	2302      	movs	r3, #2
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	00544146 	.word	0x00544146
 8011d20:	33544146 	.word	0x33544146

08011d24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b096      	sub	sp, #88	; 0x58
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	4613      	mov	r3, r2
 8011d30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	2200      	movs	r2, #0
 8011d36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f7ff ff58 	bl	8011bee <get_ldnumber>
 8011d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	da01      	bge.n	8011d4a <find_volume+0x26>
 8011d46:	230b      	movs	r3, #11
 8011d48:	e268      	b.n	801221c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011d4a:	4ab0      	ldr	r2, [pc, #704]	; (801200c <find_volume+0x2e8>)
 8011d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d101      	bne.n	8011d5e <find_volume+0x3a>
 8011d5a:	230c      	movs	r3, #12
 8011d5c:	e25e      	b.n	801221c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011d64:	79fb      	ldrb	r3, [r7, #7]
 8011d66:	f023 0301 	bic.w	r3, r3, #1
 8011d6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d01a      	beq.n	8011daa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d76:	785b      	ldrb	r3, [r3, #1]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7fe fbcb 	bl	8010514 <disk_status>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011d84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d88:	f003 0301 	and.w	r3, r3, #1
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d10c      	bne.n	8011daa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011d90:	79fb      	ldrb	r3, [r7, #7]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d007      	beq.n	8011da6 <find_volume+0x82>
 8011d96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d9a:	f003 0304 	and.w	r3, r3, #4
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d001      	beq.n	8011da6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011da2:	230a      	movs	r3, #10
 8011da4:	e23a      	b.n	801221c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011da6:	2300      	movs	r3, #0
 8011da8:	e238      	b.n	801221c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dac:	2200      	movs	r2, #0
 8011dae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dba:	785b      	ldrb	r3, [r3, #1]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7fe fbc3 	bl	8010548 <disk_initialize>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011dc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011dd4:	2303      	movs	r3, #3
 8011dd6:	e221      	b.n	801221c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011dd8:	79fb      	ldrb	r3, [r7, #7]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d007      	beq.n	8011dee <find_volume+0xca>
 8011dde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011de2:	f003 0304 	and.w	r3, r3, #4
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d001      	beq.n	8011dee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011dea:	230a      	movs	r3, #10
 8011dec:	e216      	b.n	801221c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df0:	7858      	ldrb	r0, [r3, #1]
 8011df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df4:	330c      	adds	r3, #12
 8011df6:	461a      	mov	r2, r3
 8011df8:	2102      	movs	r1, #2
 8011dfa:	f7fe fc0b 	bl	8010614 <disk_ioctl>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d001      	beq.n	8011e08 <find_volume+0xe4>
 8011e04:	2301      	movs	r3, #1
 8011e06:	e209      	b.n	801221c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0a:	899b      	ldrh	r3, [r3, #12]
 8011e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e10:	d80d      	bhi.n	8011e2e <find_volume+0x10a>
 8011e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e14:	899b      	ldrh	r3, [r3, #12]
 8011e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e1a:	d308      	bcc.n	8011e2e <find_volume+0x10a>
 8011e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1e:	899b      	ldrh	r3, [r3, #12]
 8011e20:	461a      	mov	r2, r3
 8011e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	3b01      	subs	r3, #1
 8011e28:	4013      	ands	r3, r2
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <find_volume+0x10e>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e1f4      	b.n	801221c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011e36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e3a:	f7ff ff1d 	bl	8011c78 <check_fs>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d14b      	bne.n	8011ee4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8011e50:	e01f      	b.n	8011e92 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e54:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e5a:	011b      	lsls	r3, r3, #4
 8011e5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011e60:	4413      	add	r3, r2
 8011e62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e66:	3304      	adds	r3, #4
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d006      	beq.n	8011e7c <find_volume+0x158>
 8011e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e70:	3308      	adds	r3, #8
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fe fc04 	bl	8010680 <ld_dword>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	e000      	b.n	8011e7e <find_volume+0x15a>
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011e86:	440b      	add	r3, r1
 8011e88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e8e:	3301      	adds	r3, #1
 8011e90:	643b      	str	r3, [r7, #64]	; 0x40
 8011e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	d9dc      	bls.n	8011e52 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011e98:	2300      	movs	r3, #0
 8011e9a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d002      	beq.n	8011ea8 <find_volume+0x184>
 8011ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ea4:	3b01      	subs	r3, #1
 8011ea6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011eb0:	4413      	add	r3, r2
 8011eb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011eb6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <find_volume+0x1a6>
 8011ebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ec2:	f7ff fed9 	bl	8011c78 <check_fs>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	e000      	b.n	8011ecc <find_volume+0x1a8>
 8011eca:	2303      	movs	r3, #3
 8011ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d905      	bls.n	8011ee4 <find_volume+0x1c0>
 8011ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eda:	3301      	adds	r3, #1
 8011edc:	643b      	str	r3, [r7, #64]	; 0x40
 8011ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ee0:	2b03      	cmp	r3, #3
 8011ee2:	d9e1      	bls.n	8011ea8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ee8:	2b04      	cmp	r3, #4
 8011eea:	d101      	bne.n	8011ef0 <find_volume+0x1cc>
 8011eec:	2301      	movs	r3, #1
 8011eee:	e195      	b.n	801221c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d901      	bls.n	8011efc <find_volume+0x1d8>
 8011ef8:	230d      	movs	r3, #13
 8011efa:	e18f      	b.n	801221c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efe:	3338      	adds	r3, #56	; 0x38
 8011f00:	330b      	adds	r3, #11
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fba4 	bl	8010650 <ld_word>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0e:	899b      	ldrh	r3, [r3, #12]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d001      	beq.n	8011f18 <find_volume+0x1f4>
 8011f14:	230d      	movs	r3, #13
 8011f16:	e181      	b.n	801221c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1a:	3338      	adds	r3, #56	; 0x38
 8011f1c:	3316      	adds	r3, #22
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe fb96 	bl	8010650 <ld_word>
 8011f24:	4603      	mov	r3, r0
 8011f26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d106      	bne.n	8011f3c <find_volume+0x218>
 8011f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f30:	3338      	adds	r3, #56	; 0x38
 8011f32:	3324      	adds	r3, #36	; 0x24
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fba3 	bl	8010680 <ld_dword>
 8011f3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f40:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f44:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4e:	789b      	ldrb	r3, [r3, #2]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d005      	beq.n	8011f60 <find_volume+0x23c>
 8011f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f56:	789b      	ldrb	r3, [r3, #2]
 8011f58:	2b02      	cmp	r3, #2
 8011f5a:	d001      	beq.n	8011f60 <find_volume+0x23c>
 8011f5c:	230d      	movs	r3, #13
 8011f5e:	e15d      	b.n	801221c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	789b      	ldrb	r3, [r3, #2]
 8011f64:	461a      	mov	r2, r3
 8011f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f68:	fb02 f303 	mul.w	r3, r2, r3
 8011f6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7c:	895b      	ldrh	r3, [r3, #10]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d008      	beq.n	8011f94 <find_volume+0x270>
 8011f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f84:	895b      	ldrh	r3, [r3, #10]
 8011f86:	461a      	mov	r2, r3
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	895b      	ldrh	r3, [r3, #10]
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	4013      	ands	r3, r2
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d001      	beq.n	8011f98 <find_volume+0x274>
 8011f94:	230d      	movs	r3, #13
 8011f96:	e141      	b.n	801221c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9a:	3338      	adds	r3, #56	; 0x38
 8011f9c:	3311      	adds	r3, #17
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7fe fb56 	bl	8010650 <ld_word>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011faa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fae:	891b      	ldrh	r3, [r3, #8]
 8011fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fb2:	8992      	ldrh	r2, [r2, #12]
 8011fb4:	0952      	lsrs	r2, r2, #5
 8011fb6:	b292      	uxth	r2, r2
 8011fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fbc:	fb02 f201 	mul.w	r2, r2, r1
 8011fc0:	1a9b      	subs	r3, r3, r2
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d001      	beq.n	8011fcc <find_volume+0x2a8>
 8011fc8:	230d      	movs	r3, #13
 8011fca:	e127      	b.n	801221c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fce:	3338      	adds	r3, #56	; 0x38
 8011fd0:	3313      	adds	r3, #19
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe fb3c 	bl	8010650 <ld_word>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <find_volume+0x2cc>
 8011fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe4:	3338      	adds	r3, #56	; 0x38
 8011fe6:	3320      	adds	r3, #32
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fe fb49 	bl	8010680 <ld_dword>
 8011fee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff2:	3338      	adds	r3, #56	; 0x38
 8011ff4:	330e      	adds	r3, #14
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fe fb2a 	bl	8010650 <ld_word>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012000:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012002:	2b00      	cmp	r3, #0
 8012004:	d104      	bne.n	8012010 <find_volume+0x2ec>
 8012006:	230d      	movs	r3, #13
 8012008:	e108      	b.n	801221c <find_volume+0x4f8>
 801200a:	bf00      	nop
 801200c:	2003c49c 	.word	0x2003c49c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012010:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012014:	4413      	add	r3, r2
 8012016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012018:	8911      	ldrh	r1, [r2, #8]
 801201a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801201c:	8992      	ldrh	r2, [r2, #12]
 801201e:	0952      	lsrs	r2, r2, #5
 8012020:	b292      	uxth	r2, r2
 8012022:	fbb1 f2f2 	udiv	r2, r1, r2
 8012026:	b292      	uxth	r2, r2
 8012028:	4413      	add	r3, r2
 801202a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801202c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012030:	429a      	cmp	r2, r3
 8012032:	d201      	bcs.n	8012038 <find_volume+0x314>
 8012034:	230d      	movs	r3, #13
 8012036:	e0f1      	b.n	801221c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012040:	8952      	ldrh	r2, [r2, #10]
 8012042:	fbb3 f3f2 	udiv	r3, r3, r2
 8012046:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <find_volume+0x32e>
 801204e:	230d      	movs	r3, #13
 8012050:	e0e4      	b.n	801221c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012052:	2303      	movs	r3, #3
 8012054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801205e:	4293      	cmp	r3, r2
 8012060:	d802      	bhi.n	8012068 <find_volume+0x344>
 8012062:	2302      	movs	r3, #2
 8012064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801206e:	4293      	cmp	r3, r2
 8012070:	d802      	bhi.n	8012078 <find_volume+0x354>
 8012072:	2301      	movs	r3, #1
 8012074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207a:	1c9a      	adds	r2, r3, #2
 801207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012084:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012086:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801208a:	441a      	add	r2, r3
 801208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012094:	441a      	add	r2, r3
 8012096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012098:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801209a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801209e:	2b03      	cmp	r3, #3
 80120a0:	d11e      	bne.n	80120e0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80120a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a4:	3338      	adds	r3, #56	; 0x38
 80120a6:	332a      	adds	r3, #42	; 0x2a
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fe fad1 	bl	8010650 <ld_word>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d001      	beq.n	80120b8 <find_volume+0x394>
 80120b4:	230d      	movs	r3, #13
 80120b6:	e0b1      	b.n	801221c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ba:	891b      	ldrh	r3, [r3, #8]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <find_volume+0x3a0>
 80120c0:	230d      	movs	r3, #13
 80120c2:	e0ab      	b.n	801221c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	3338      	adds	r3, #56	; 0x38
 80120c8:	332c      	adds	r3, #44	; 0x2c
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fe fad8 	bl	8010680 <ld_dword>
 80120d0:	4602      	mov	r2, r0
 80120d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80120d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d8:	69db      	ldr	r3, [r3, #28]
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	647b      	str	r3, [r7, #68]	; 0x44
 80120de:	e01f      	b.n	8012120 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80120e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e2:	891b      	ldrh	r3, [r3, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d101      	bne.n	80120ec <find_volume+0x3c8>
 80120e8:	230d      	movs	r3, #13
 80120ea:	e097      	b.n	801221c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80120ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120f2:	441a      	add	r2, r3
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80120f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120fc:	2b02      	cmp	r3, #2
 80120fe:	d103      	bne.n	8012108 <find_volume+0x3e4>
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	69db      	ldr	r3, [r3, #28]
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	e00a      	b.n	801211e <find_volume+0x3fa>
 8012108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210a:	69da      	ldr	r2, [r3, #28]
 801210c:	4613      	mov	r3, r2
 801210e:	005b      	lsls	r3, r3, #1
 8012110:	4413      	add	r3, r2
 8012112:	085a      	lsrs	r2, r3, #1
 8012114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012116:	69db      	ldr	r3, [r3, #28]
 8012118:	f003 0301 	and.w	r3, r3, #1
 801211c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801211e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012122:	6a1a      	ldr	r2, [r3, #32]
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	899b      	ldrh	r3, [r3, #12]
 8012128:	4619      	mov	r1, r3
 801212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801212c:	440b      	add	r3, r1
 801212e:	3b01      	subs	r3, #1
 8012130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012132:	8989      	ldrh	r1, [r1, #12]
 8012134:	fbb3 f3f1 	udiv	r3, r3, r1
 8012138:	429a      	cmp	r2, r3
 801213a:	d201      	bcs.n	8012140 <find_volume+0x41c>
 801213c:	230d      	movs	r3, #13
 801213e:	e06d      	b.n	801221c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012142:	f04f 32ff 	mov.w	r2, #4294967295
 8012146:	615a      	str	r2, [r3, #20]
 8012148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214a:	695a      	ldr	r2, [r3, #20]
 801214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801214e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012152:	2280      	movs	r2, #128	; 0x80
 8012154:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801215a:	2b03      	cmp	r3, #3
 801215c:	d149      	bne.n	80121f2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012160:	3338      	adds	r3, #56	; 0x38
 8012162:	3330      	adds	r3, #48	; 0x30
 8012164:	4618      	mov	r0, r3
 8012166:	f7fe fa73 	bl	8010650 <ld_word>
 801216a:	4603      	mov	r3, r0
 801216c:	2b01      	cmp	r3, #1
 801216e:	d140      	bne.n	80121f2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012172:	3301      	adds	r3, #1
 8012174:	4619      	mov	r1, r3
 8012176:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012178:	f7fe fd1a 	bl	8010bb0 <move_window>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d137      	bne.n	80121f2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012184:	2200      	movs	r2, #0
 8012186:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218a:	3338      	adds	r3, #56	; 0x38
 801218c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012190:	4618      	mov	r0, r3
 8012192:	f7fe fa5d 	bl	8010650 <ld_word>
 8012196:	4603      	mov	r3, r0
 8012198:	461a      	mov	r2, r3
 801219a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801219e:	429a      	cmp	r2, r3
 80121a0:	d127      	bne.n	80121f2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80121a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a4:	3338      	adds	r3, #56	; 0x38
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fa6a 	bl	8010680 <ld_dword>
 80121ac:	4602      	mov	r2, r0
 80121ae:	4b1d      	ldr	r3, [pc, #116]	; (8012224 <find_volume+0x500>)
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d11e      	bne.n	80121f2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80121b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b6:	3338      	adds	r3, #56	; 0x38
 80121b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fe fa5f 	bl	8010680 <ld_dword>
 80121c2:	4602      	mov	r2, r0
 80121c4:	4b18      	ldr	r3, [pc, #96]	; (8012228 <find_volume+0x504>)
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d113      	bne.n	80121f2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80121ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121cc:	3338      	adds	r3, #56	; 0x38
 80121ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fe fa54 	bl	8010680 <ld_dword>
 80121d8:	4602      	mov	r2, r0
 80121da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121dc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80121de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e0:	3338      	adds	r3, #56	; 0x38
 80121e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7fe fa4a 	bl	8010680 <ld_dword>
 80121ec:	4602      	mov	r2, r0
 80121ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80121f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80121f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80121fa:	4b0c      	ldr	r3, [pc, #48]	; (801222c <find_volume+0x508>)
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	3301      	adds	r3, #1
 8012200:	b29a      	uxth	r2, r3
 8012202:	4b0a      	ldr	r3, [pc, #40]	; (801222c <find_volume+0x508>)
 8012204:	801a      	strh	r2, [r3, #0]
 8012206:	4b09      	ldr	r3, [pc, #36]	; (801222c <find_volume+0x508>)
 8012208:	881a      	ldrh	r2, [r3, #0]
 801220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012210:	2200      	movs	r2, #0
 8012212:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012216:	f7fe fc63 	bl	8010ae0 <clear_lock>
#endif
	return FR_OK;
 801221a:	2300      	movs	r3, #0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3758      	adds	r7, #88	; 0x58
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	41615252 	.word	0x41615252
 8012228:	61417272 	.word	0x61417272
 801222c:	2003c4a0 	.word	0x2003c4a0

08012230 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801223a:	2309      	movs	r3, #9
 801223c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d01c      	beq.n	801227e <validate+0x4e>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d018      	beq.n	801227e <validate+0x4e>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d013      	beq.n	801227e <validate+0x4e>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	889a      	ldrh	r2, [r3, #4]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	88db      	ldrh	r3, [r3, #6]
 8012260:	429a      	cmp	r2, r3
 8012262:	d10c      	bne.n	801227e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	785b      	ldrb	r3, [r3, #1]
 801226a:	4618      	mov	r0, r3
 801226c:	f7fe f952 	bl	8010514 <disk_status>
 8012270:	4603      	mov	r3, r0
 8012272:	f003 0301 	and.w	r3, r3, #1
 8012276:	2b00      	cmp	r3, #0
 8012278:	d101      	bne.n	801227e <validate+0x4e>
			res = FR_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801227e:	7bfb      	ldrb	r3, [r7, #15]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d102      	bne.n	801228a <validate+0x5a>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	e000      	b.n	801228c <validate+0x5c>
 801228a:	2300      	movs	r3, #0
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	6013      	str	r3, [r2, #0]
	return res;
 8012290:	7bfb      	ldrb	r3, [r7, #15]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
	...

0801229c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b088      	sub	sp, #32
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	4613      	mov	r3, r2
 80122a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80122ae:	f107 0310 	add.w	r3, r7, #16
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7ff fc9b 	bl	8011bee <get_ldnumber>
 80122b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	da01      	bge.n	80122c4 <f_mount+0x28>
 80122c0:	230b      	movs	r3, #11
 80122c2:	e02b      	b.n	801231c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80122c4:	4a17      	ldr	r2, [pc, #92]	; (8012324 <f_mount+0x88>)
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d005      	beq.n	80122e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80122d4:	69b8      	ldr	r0, [r7, #24]
 80122d6:	f7fe fc03 	bl	8010ae0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	2200      	movs	r2, #0
 80122de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d002      	beq.n	80122ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2200      	movs	r2, #0
 80122ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80122ec:	68fa      	ldr	r2, [r7, #12]
 80122ee:	490d      	ldr	r1, [pc, #52]	; (8012324 <f_mount+0x88>)
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d002      	beq.n	8012302 <f_mount+0x66>
 80122fc:	79fb      	ldrb	r3, [r7, #7]
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d001      	beq.n	8012306 <f_mount+0x6a>
 8012302:	2300      	movs	r3, #0
 8012304:	e00a      	b.n	801231c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012306:	f107 010c 	add.w	r1, r7, #12
 801230a:	f107 0308 	add.w	r3, r7, #8
 801230e:	2200      	movs	r2, #0
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff fd07 	bl	8011d24 <find_volume>
 8012316:	4603      	mov	r3, r0
 8012318:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801231a:	7dfb      	ldrb	r3, [r7, #23]
}
 801231c:	4618      	mov	r0, r3
 801231e:	3720      	adds	r7, #32
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	2003c49c 	.word	0x2003c49c

08012328 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b098      	sub	sp, #96	; 0x60
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	4613      	mov	r3, r2
 8012334:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <f_open+0x18>
 801233c:	2309      	movs	r3, #9
 801233e:	e1ba      	b.n	80126b6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012340:	79fb      	ldrb	r3, [r7, #7]
 8012342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012346:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012348:	79fa      	ldrb	r2, [r7, #7]
 801234a:	f107 0110 	add.w	r1, r7, #16
 801234e:	f107 0308 	add.w	r3, r7, #8
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff fce6 	bl	8011d24 <find_volume>
 8012358:	4603      	mov	r3, r0
 801235a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801235e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012362:	2b00      	cmp	r3, #0
 8012364:	f040 819e 	bne.w	80126a4 <f_open+0x37c>
		dj.obj.fs = fs;
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801236c:	68ba      	ldr	r2, [r7, #8]
 801236e:	f107 0314 	add.w	r3, r7, #20
 8012372:	4611      	mov	r1, r2
 8012374:	4618      	mov	r0, r3
 8012376:	f7ff fba5 	bl	8011ac4 <follow_path>
 801237a:	4603      	mov	r3, r0
 801237c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012384:	2b00      	cmp	r3, #0
 8012386:	d11a      	bne.n	80123be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012388:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801238c:	b25b      	sxtb	r3, r3
 801238e:	2b00      	cmp	r3, #0
 8012390:	da03      	bge.n	801239a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012392:	2306      	movs	r3, #6
 8012394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012398:	e011      	b.n	80123be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801239a:	79fb      	ldrb	r3, [r7, #7]
 801239c:	f023 0301 	bic.w	r3, r3, #1
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	bf14      	ite	ne
 80123a4:	2301      	movne	r3, #1
 80123a6:	2300      	moveq	r3, #0
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	461a      	mov	r2, r3
 80123ac:	f107 0314 	add.w	r3, r7, #20
 80123b0:	4611      	mov	r1, r2
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fe fa4c 	bl	8010850 <chk_lock>
 80123b8:	4603      	mov	r3, r0
 80123ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80123be:	79fb      	ldrb	r3, [r7, #7]
 80123c0:	f003 031c 	and.w	r3, r3, #28
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d07e      	beq.n	80124c6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80123c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d017      	beq.n	8012400 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80123d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123d4:	2b04      	cmp	r3, #4
 80123d6:	d10e      	bne.n	80123f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80123d8:	f7fe fa96 	bl	8010908 <enq_lock>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d006      	beq.n	80123f0 <f_open+0xc8>
 80123e2:	f107 0314 	add.w	r3, r7, #20
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7ff fa52 	bl	8011890 <dir_register>
 80123ec:	4603      	mov	r3, r0
 80123ee:	e000      	b.n	80123f2 <f_open+0xca>
 80123f0:	2312      	movs	r3, #18
 80123f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80123f6:	79fb      	ldrb	r3, [r7, #7]
 80123f8:	f043 0308 	orr.w	r3, r3, #8
 80123fc:	71fb      	strb	r3, [r7, #7]
 80123fe:	e010      	b.n	8012422 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012400:	7ebb      	ldrb	r3, [r7, #26]
 8012402:	f003 0311 	and.w	r3, r3, #17
 8012406:	2b00      	cmp	r3, #0
 8012408:	d003      	beq.n	8012412 <f_open+0xea>
					res = FR_DENIED;
 801240a:	2307      	movs	r3, #7
 801240c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012410:	e007      	b.n	8012422 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012412:	79fb      	ldrb	r3, [r7, #7]
 8012414:	f003 0304 	and.w	r3, r3, #4
 8012418:	2b00      	cmp	r3, #0
 801241a:	d002      	beq.n	8012422 <f_open+0xfa>
 801241c:	2308      	movs	r3, #8
 801241e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012426:	2b00      	cmp	r3, #0
 8012428:	d167      	bne.n	80124fa <f_open+0x1d2>
 801242a:	79fb      	ldrb	r3, [r7, #7]
 801242c:	f003 0308 	and.w	r3, r3, #8
 8012430:	2b00      	cmp	r3, #0
 8012432:	d062      	beq.n	80124fa <f_open+0x1d2>
				dw = GET_FATTIME();
 8012434:	4ba2      	ldr	r3, [pc, #648]	; (80126c0 <f_open+0x398>)
 8012436:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801243a:	330e      	adds	r3, #14
 801243c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801243e:	4618      	mov	r0, r3
 8012440:	f7fe f95c 	bl	80106fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012446:	3316      	adds	r3, #22
 8012448:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801244a:	4618      	mov	r0, r3
 801244c:	f7fe f956 	bl	80106fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012452:	330b      	adds	r3, #11
 8012454:	2220      	movs	r2, #32
 8012456:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801245c:	4611      	mov	r1, r2
 801245e:	4618      	mov	r0, r3
 8012460:	f7ff f925 	bl	80116ae <ld_clust>
 8012464:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801246a:	2200      	movs	r2, #0
 801246c:	4618      	mov	r0, r3
 801246e:	f7ff f93d 	bl	80116ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012474:	331c      	adds	r3, #28
 8012476:	2100      	movs	r1, #0
 8012478:	4618      	mov	r0, r3
 801247a:	f7fe f93f 	bl	80106fc <st_dword>
					fs->wflag = 1;
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	2201      	movs	r2, #1
 8012482:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012486:	2b00      	cmp	r3, #0
 8012488:	d037      	beq.n	80124fa <f_open+0x1d2>
						dw = fs->winsect;
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012490:	f107 0314 	add.w	r3, r7, #20
 8012494:	2200      	movs	r2, #0
 8012496:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012498:	4618      	mov	r0, r3
 801249a:	f7fe fe2d 	bl	80110f8 <remove_chain>
 801249e:	4603      	mov	r3, r0
 80124a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80124a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d126      	bne.n	80124fa <f_open+0x1d2>
							res = move_window(fs, dw);
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fe fb7d 	bl	8010bb0 <move_window>
 80124b6:	4603      	mov	r3, r0
 80124b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80124c0:	3a01      	subs	r2, #1
 80124c2:	611a      	str	r2, [r3, #16]
 80124c4:	e019      	b.n	80124fa <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80124c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d115      	bne.n	80124fa <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80124ce:	7ebb      	ldrb	r3, [r7, #26]
 80124d0:	f003 0310 	and.w	r3, r3, #16
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d003      	beq.n	80124e0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80124d8:	2304      	movs	r3, #4
 80124da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80124de:	e00c      	b.n	80124fa <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80124e0:	79fb      	ldrb	r3, [r7, #7]
 80124e2:	f003 0302 	and.w	r3, r3, #2
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d007      	beq.n	80124fa <f_open+0x1d2>
 80124ea:	7ebb      	ldrb	r3, [r7, #26]
 80124ec:	f003 0301 	and.w	r3, r3, #1
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d002      	beq.n	80124fa <f_open+0x1d2>
						res = FR_DENIED;
 80124f4:	2307      	movs	r3, #7
 80124f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80124fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d128      	bne.n	8012554 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012502:	79fb      	ldrb	r3, [r7, #7]
 8012504:	f003 0308 	and.w	r3, r3, #8
 8012508:	2b00      	cmp	r3, #0
 801250a:	d003      	beq.n	8012514 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801250c:	79fb      	ldrb	r3, [r7, #7]
 801250e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012512:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801251c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012522:	79fb      	ldrb	r3, [r7, #7]
 8012524:	f023 0301 	bic.w	r3, r3, #1
 8012528:	2b00      	cmp	r3, #0
 801252a:	bf14      	ite	ne
 801252c:	2301      	movne	r3, #1
 801252e:	2300      	moveq	r3, #0
 8012530:	b2db      	uxtb	r3, r3
 8012532:	461a      	mov	r2, r3
 8012534:	f107 0314 	add.w	r3, r7, #20
 8012538:	4611      	mov	r1, r2
 801253a:	4618      	mov	r0, r3
 801253c:	f7fe fa06 	bl	801094c <inc_lock>
 8012540:	4602      	mov	r2, r0
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	691b      	ldr	r3, [r3, #16]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d102      	bne.n	8012554 <f_open+0x22c>
 801254e:	2302      	movs	r3, #2
 8012550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012558:	2b00      	cmp	r3, #0
 801255a:	f040 80a3 	bne.w	80126a4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012562:	4611      	mov	r1, r2
 8012564:	4618      	mov	r0, r3
 8012566:	f7ff f8a2 	bl	80116ae <ld_clust>
 801256a:	4602      	mov	r2, r0
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012572:	331c      	adds	r3, #28
 8012574:	4618      	mov	r0, r3
 8012576:	f7fe f883 	bl	8010680 <ld_dword>
 801257a:	4602      	mov	r2, r0
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2200      	movs	r2, #0
 8012584:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012586:	693a      	ldr	r2, [r7, #16]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	88da      	ldrh	r2, [r3, #6]
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	79fa      	ldrb	r2, [r7, #7]
 8012598:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2200      	movs	r2, #0
 80125a4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2200      	movs	r2, #0
 80125aa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	3330      	adds	r3, #48	; 0x30
 80125b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80125b4:	2100      	movs	r1, #0
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fe f8ed 	bl	8010796 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	f003 0320 	and.w	r3, r3, #32
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d06e      	beq.n	80126a4 <f_open+0x37c>
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	68db      	ldr	r3, [r3, #12]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d06a      	beq.n	80126a4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	68da      	ldr	r2, [r3, #12]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	895b      	ldrh	r3, [r3, #10]
 80125da:	461a      	mov	r2, r3
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	899b      	ldrh	r3, [r3, #12]
 80125e0:	fb03 f302 	mul.w	r3, r3, r2
 80125e4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	689b      	ldr	r3, [r3, #8]
 80125ea:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	657b      	str	r3, [r7, #84]	; 0x54
 80125f2:	e016      	b.n	8012622 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fe fb96 	bl	8010d2a <get_fat>
 80125fe:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012602:	2b01      	cmp	r3, #1
 8012604:	d802      	bhi.n	801260c <f_open+0x2e4>
 8012606:	2302      	movs	r3, #2
 8012608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801260c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012612:	d102      	bne.n	801261a <f_open+0x2f2>
 8012614:	2301      	movs	r3, #1
 8012616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801261a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	657b      	str	r3, [r7, #84]	; 0x54
 8012622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012626:	2b00      	cmp	r3, #0
 8012628:	d103      	bne.n	8012632 <f_open+0x30a>
 801262a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801262c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801262e:	429a      	cmp	r2, r3
 8012630:	d8e0      	bhi.n	80125f4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012636:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801263c:	2b00      	cmp	r3, #0
 801263e:	d131      	bne.n	80126a4 <f_open+0x37c>
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	899b      	ldrh	r3, [r3, #12]
 8012644:	461a      	mov	r2, r3
 8012646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012648:	fbb3 f1f2 	udiv	r1, r3, r2
 801264c:	fb02 f201 	mul.w	r2, r2, r1
 8012650:	1a9b      	subs	r3, r3, r2
 8012652:	2b00      	cmp	r3, #0
 8012654:	d026      	beq.n	80126a4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801265a:	4618      	mov	r0, r3
 801265c:	f7fe fb46 	bl	8010cec <clust2sect>
 8012660:	6478      	str	r0, [r7, #68]	; 0x44
 8012662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012664:	2b00      	cmp	r3, #0
 8012666:	d103      	bne.n	8012670 <f_open+0x348>
						res = FR_INT_ERR;
 8012668:	2302      	movs	r3, #2
 801266a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801266e:	e019      	b.n	80126a4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	899b      	ldrh	r3, [r3, #12]
 8012674:	461a      	mov	r2, r3
 8012676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012678:	fbb3 f2f2 	udiv	r2, r3, r2
 801267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801267e:	441a      	add	r2, r3
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	7858      	ldrb	r0, [r3, #1]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	6a1a      	ldr	r2, [r3, #32]
 8012692:	2301      	movs	r3, #1
 8012694:	f7fd ff7e 	bl	8010594 <disk_read>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d002      	beq.n	80126a4 <f_open+0x37c>
 801269e:	2301      	movs	r3, #1
 80126a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80126a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d002      	beq.n	80126b2 <f_open+0x38a>
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80126b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3760      	adds	r7, #96	; 0x60
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	274a0000 	.word	0x274a0000

080126c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b08e      	sub	sp, #56	; 0x38
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2200      	movs	r2, #0
 80126da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f107 0214 	add.w	r2, r7, #20
 80126e2:	4611      	mov	r1, r2
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7ff fda3 	bl	8012230 <validate>
 80126ea:	4603      	mov	r3, r0
 80126ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80126f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d107      	bne.n	8012708 <f_read+0x44>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	7d5b      	ldrb	r3, [r3, #21]
 80126fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <f_read+0x4a>
 8012708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801270c:	e135      	b.n	801297a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	7d1b      	ldrb	r3, [r3, #20]
 8012712:	f003 0301 	and.w	r3, r3, #1
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <f_read+0x5a>
 801271a:	2307      	movs	r3, #7
 801271c:	e12d      	b.n	801297a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	68da      	ldr	r2, [r3, #12]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	699b      	ldr	r3, [r3, #24]
 8012726:	1ad3      	subs	r3, r2, r3
 8012728:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	6a3b      	ldr	r3, [r7, #32]
 801272e:	429a      	cmp	r2, r3
 8012730:	f240 811e 	bls.w	8012970 <f_read+0x2ac>
 8012734:	6a3b      	ldr	r3, [r7, #32]
 8012736:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012738:	e11a      	b.n	8012970 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	699b      	ldr	r3, [r3, #24]
 801273e:	697a      	ldr	r2, [r7, #20]
 8012740:	8992      	ldrh	r2, [r2, #12]
 8012742:	fbb3 f1f2 	udiv	r1, r3, r2
 8012746:	fb02 f201 	mul.w	r2, r2, r1
 801274a:	1a9b      	subs	r3, r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	f040 80d5 	bne.w	80128fc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	699b      	ldr	r3, [r3, #24]
 8012756:	697a      	ldr	r2, [r7, #20]
 8012758:	8992      	ldrh	r2, [r2, #12]
 801275a:	fbb3 f3f2 	udiv	r3, r3, r2
 801275e:	697a      	ldr	r2, [r7, #20]
 8012760:	8952      	ldrh	r2, [r2, #10]
 8012762:	3a01      	subs	r2, #1
 8012764:	4013      	ands	r3, r2
 8012766:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d12f      	bne.n	80127ce <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	699b      	ldr	r3, [r3, #24]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d103      	bne.n	801277e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	633b      	str	r3, [r7, #48]	; 0x30
 801277c:	e013      	b.n	80127a6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012782:	2b00      	cmp	r3, #0
 8012784:	d007      	beq.n	8012796 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	699b      	ldr	r3, [r3, #24]
 801278a:	4619      	mov	r1, r3
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f7fe fdb0 	bl	80112f2 <clmt_clust>
 8012792:	6338      	str	r0, [r7, #48]	; 0x30
 8012794:	e007      	b.n	80127a6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012796:	68fa      	ldr	r2, [r7, #12]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	69db      	ldr	r3, [r3, #28]
 801279c:	4619      	mov	r1, r3
 801279e:	4610      	mov	r0, r2
 80127a0:	f7fe fac3 	bl	8010d2a <get_fat>
 80127a4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80127a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d804      	bhi.n	80127b6 <f_read+0xf2>
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2202      	movs	r2, #2
 80127b0:	755a      	strb	r2, [r3, #21]
 80127b2:	2302      	movs	r3, #2
 80127b4:	e0e1      	b.n	801297a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80127b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127bc:	d104      	bne.n	80127c8 <f_read+0x104>
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2201      	movs	r2, #1
 80127c2:	755a      	strb	r2, [r3, #21]
 80127c4:	2301      	movs	r3, #1
 80127c6:	e0d8      	b.n	801297a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127cc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80127ce:	697a      	ldr	r2, [r7, #20]
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	69db      	ldr	r3, [r3, #28]
 80127d4:	4619      	mov	r1, r3
 80127d6:	4610      	mov	r0, r2
 80127d8:	f7fe fa88 	bl	8010cec <clust2sect>
 80127dc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d104      	bne.n	80127ee <f_read+0x12a>
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2202      	movs	r2, #2
 80127e8:	755a      	strb	r2, [r3, #21]
 80127ea:	2302      	movs	r3, #2
 80127ec:	e0c5      	b.n	801297a <f_read+0x2b6>
			sect += csect;
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	4413      	add	r3, r2
 80127f4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	899b      	ldrh	r3, [r3, #12]
 80127fa:	461a      	mov	r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8012802:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012806:	2b00      	cmp	r3, #0
 8012808:	d041      	beq.n	801288e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801280a:	69fa      	ldr	r2, [r7, #28]
 801280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280e:	4413      	add	r3, r2
 8012810:	697a      	ldr	r2, [r7, #20]
 8012812:	8952      	ldrh	r2, [r2, #10]
 8012814:	4293      	cmp	r3, r2
 8012816:	d905      	bls.n	8012824 <f_read+0x160>
					cc = fs->csize - csect;
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	895b      	ldrh	r3, [r3, #10]
 801281c:	461a      	mov	r2, r3
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	1ad3      	subs	r3, r2, r3
 8012822:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	7858      	ldrb	r0, [r3, #1]
 8012828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282a:	69ba      	ldr	r2, [r7, #24]
 801282c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801282e:	f7fd feb1 	bl	8010594 <disk_read>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d004      	beq.n	8012842 <f_read+0x17e>
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	2201      	movs	r2, #1
 801283c:	755a      	strb	r2, [r3, #21]
 801283e:	2301      	movs	r3, #1
 8012840:	e09b      	b.n	801297a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	7d1b      	ldrb	r3, [r3, #20]
 8012846:	b25b      	sxtb	r3, r3
 8012848:	2b00      	cmp	r3, #0
 801284a:	da18      	bge.n	801287e <f_read+0x1ba>
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	6a1a      	ldr	r2, [r3, #32]
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	1ad3      	subs	r3, r2, r3
 8012854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012856:	429a      	cmp	r2, r3
 8012858:	d911      	bls.n	801287e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6a1a      	ldr	r2, [r3, #32]
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	1ad3      	subs	r3, r2, r3
 8012862:	697a      	ldr	r2, [r7, #20]
 8012864:	8992      	ldrh	r2, [r2, #12]
 8012866:	fb02 f303 	mul.w	r3, r2, r3
 801286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801286c:	18d0      	adds	r0, r2, r3
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	899b      	ldrh	r3, [r3, #12]
 8012878:	461a      	mov	r2, r3
 801287a:	f7fd ff6b 	bl	8010754 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	899b      	ldrh	r3, [r3, #12]
 8012882:	461a      	mov	r2, r3
 8012884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012886:	fb02 f303 	mul.w	r3, r2, r3
 801288a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801288c:	e05c      	b.n	8012948 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6a1b      	ldr	r3, [r3, #32]
 8012892:	69ba      	ldr	r2, [r7, #24]
 8012894:	429a      	cmp	r2, r3
 8012896:	d02e      	beq.n	80128f6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	7d1b      	ldrb	r3, [r3, #20]
 801289c:	b25b      	sxtb	r3, r3
 801289e:	2b00      	cmp	r3, #0
 80128a0:	da18      	bge.n	80128d4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	7858      	ldrb	r0, [r3, #1]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6a1a      	ldr	r2, [r3, #32]
 80128b0:	2301      	movs	r3, #1
 80128b2:	f7fd fe8f 	bl	80105d4 <disk_write>
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d004      	beq.n	80128c6 <f_read+0x202>
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2201      	movs	r2, #1
 80128c0:	755a      	strb	r2, [r3, #21]
 80128c2:	2301      	movs	r3, #1
 80128c4:	e059      	b.n	801297a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	7d1b      	ldrb	r3, [r3, #20]
 80128ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ce:	b2da      	uxtb	r2, r3
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	7858      	ldrb	r0, [r3, #1]
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128de:	2301      	movs	r3, #1
 80128e0:	69ba      	ldr	r2, [r7, #24]
 80128e2:	f7fd fe57 	bl	8010594 <disk_read>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d004      	beq.n	80128f6 <f_read+0x232>
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2201      	movs	r2, #1
 80128f0:	755a      	strb	r2, [r3, #21]
 80128f2:	2301      	movs	r3, #1
 80128f4:	e041      	b.n	801297a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	69ba      	ldr	r2, [r7, #24]
 80128fa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	899b      	ldrh	r3, [r3, #12]
 8012900:	4618      	mov	r0, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	699b      	ldr	r3, [r3, #24]
 8012906:	697a      	ldr	r2, [r7, #20]
 8012908:	8992      	ldrh	r2, [r2, #12]
 801290a:	fbb3 f1f2 	udiv	r1, r3, r2
 801290e:	fb02 f201 	mul.w	r2, r2, r1
 8012912:	1a9b      	subs	r3, r3, r2
 8012914:	1ac3      	subs	r3, r0, r3
 8012916:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	429a      	cmp	r2, r3
 801291e:	d901      	bls.n	8012924 <f_read+0x260>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	699b      	ldr	r3, [r3, #24]
 801292e:	697a      	ldr	r2, [r7, #20]
 8012930:	8992      	ldrh	r2, [r2, #12]
 8012932:	fbb3 f0f2 	udiv	r0, r3, r2
 8012936:	fb02 f200 	mul.w	r2, r2, r0
 801293a:	1a9b      	subs	r3, r3, r2
 801293c:	440b      	add	r3, r1
 801293e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012940:	4619      	mov	r1, r3
 8012942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012944:	f7fd ff06 	bl	8010754 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	4413      	add	r3, r2
 801294e:	627b      	str	r3, [r7, #36]	; 0x24
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	699a      	ldr	r2, [r3, #24]
 8012954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012956:	441a      	add	r2, r3
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	619a      	str	r2, [r3, #24]
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012962:	441a      	add	r2, r3
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	601a      	str	r2, [r3, #0]
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	f47f aee1 	bne.w	801273a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	3738      	adds	r7, #56	; 0x38
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}

08012982 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012982:	b580      	push	{r7, lr}
 8012984:	b08c      	sub	sp, #48	; 0x30
 8012986:	af00      	add	r7, sp, #0
 8012988:	60f8      	str	r0, [r7, #12]
 801298a:	60b9      	str	r1, [r7, #8]
 801298c:	607a      	str	r2, [r7, #4]
 801298e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2200      	movs	r2, #0
 8012998:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f107 0210 	add.w	r2, r7, #16
 80129a0:	4611      	mov	r1, r2
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7ff fc44 	bl	8012230 <validate>
 80129a8:	4603      	mov	r3, r0
 80129aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80129ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d107      	bne.n	80129c6 <f_write+0x44>
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	7d5b      	ldrb	r3, [r3, #21]
 80129ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80129be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d002      	beq.n	80129cc <f_write+0x4a>
 80129c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129ca:	e16a      	b.n	8012ca2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	7d1b      	ldrb	r3, [r3, #20]
 80129d0:	f003 0302 	and.w	r3, r3, #2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <f_write+0x5a>
 80129d8:	2307      	movs	r3, #7
 80129da:	e162      	b.n	8012ca2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	699a      	ldr	r2, [r3, #24]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	441a      	add	r2, r3
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	699b      	ldr	r3, [r3, #24]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	f080 814c 	bcs.w	8012c86 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	699b      	ldr	r3, [r3, #24]
 80129f2:	43db      	mvns	r3, r3
 80129f4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80129f6:	e146      	b.n	8012c86 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	699b      	ldr	r3, [r3, #24]
 80129fc:	693a      	ldr	r2, [r7, #16]
 80129fe:	8992      	ldrh	r2, [r2, #12]
 8012a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a04:	fb02 f201 	mul.w	r2, r2, r1
 8012a08:	1a9b      	subs	r3, r3, r2
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f040 80f1 	bne.w	8012bf2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	699b      	ldr	r3, [r3, #24]
 8012a14:	693a      	ldr	r2, [r7, #16]
 8012a16:	8992      	ldrh	r2, [r2, #12]
 8012a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a1c:	693a      	ldr	r2, [r7, #16]
 8012a1e:	8952      	ldrh	r2, [r2, #10]
 8012a20:	3a01      	subs	r2, #1
 8012a22:	4013      	ands	r3, r2
 8012a24:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d143      	bne.n	8012ab4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	699b      	ldr	r3, [r3, #24]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d10c      	bne.n	8012a4e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d11a      	bne.n	8012a76 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2100      	movs	r1, #0
 8012a44:	4618      	mov	r0, r3
 8012a46:	f7fe fbbc 	bl	80111c2 <create_chain>
 8012a4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8012a4c:	e013      	b.n	8012a76 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d007      	beq.n	8012a66 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	699b      	ldr	r3, [r3, #24]
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	68f8      	ldr	r0, [r7, #12]
 8012a5e:	f7fe fc48 	bl	80112f2 <clmt_clust>
 8012a62:	62b8      	str	r0, [r7, #40]	; 0x28
 8012a64:	e007      	b.n	8012a76 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012a66:	68fa      	ldr	r2, [r7, #12]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	69db      	ldr	r3, [r3, #28]
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	4610      	mov	r0, r2
 8012a70:	f7fe fba7 	bl	80111c2 <create_chain>
 8012a74:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 8109 	beq.w	8012c90 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d104      	bne.n	8012a8e <f_write+0x10c>
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	2202      	movs	r2, #2
 8012a88:	755a      	strb	r2, [r3, #21]
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	e109      	b.n	8012ca2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a94:	d104      	bne.n	8012aa0 <f_write+0x11e>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2201      	movs	r2, #1
 8012a9a:	755a      	strb	r2, [r3, #21]
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	e100      	b.n	8012ca2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012aa4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	689b      	ldr	r3, [r3, #8]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d102      	bne.n	8012ab4 <f_write+0x132>
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ab2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	7d1b      	ldrb	r3, [r3, #20]
 8012ab8:	b25b      	sxtb	r3, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	da18      	bge.n	8012af0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	7858      	ldrb	r0, [r3, #1]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	6a1a      	ldr	r2, [r3, #32]
 8012acc:	2301      	movs	r3, #1
 8012ace:	f7fd fd81 	bl	80105d4 <disk_write>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d004      	beq.n	8012ae2 <f_write+0x160>
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	2201      	movs	r2, #1
 8012adc:	755a      	strb	r2, [r3, #21]
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e0df      	b.n	8012ca2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	7d1b      	ldrb	r3, [r3, #20]
 8012ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012aea:	b2da      	uxtb	r2, r3
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012af0:	693a      	ldr	r2, [r7, #16]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	69db      	ldr	r3, [r3, #28]
 8012af6:	4619      	mov	r1, r3
 8012af8:	4610      	mov	r0, r2
 8012afa:	f7fe f8f7 	bl	8010cec <clust2sect>
 8012afe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d104      	bne.n	8012b10 <f_write+0x18e>
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2202      	movs	r2, #2
 8012b0a:	755a      	strb	r2, [r3, #21]
 8012b0c:	2302      	movs	r3, #2
 8012b0e:	e0c8      	b.n	8012ca2 <f_write+0x320>
			sect += csect;
 8012b10:	697a      	ldr	r2, [r7, #20]
 8012b12:	69bb      	ldr	r3, [r7, #24]
 8012b14:	4413      	add	r3, r2
 8012b16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	899b      	ldrh	r3, [r3, #12]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b24:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012b26:	6a3b      	ldr	r3, [r7, #32]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d043      	beq.n	8012bb4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012b2c:	69ba      	ldr	r2, [r7, #24]
 8012b2e:	6a3b      	ldr	r3, [r7, #32]
 8012b30:	4413      	add	r3, r2
 8012b32:	693a      	ldr	r2, [r7, #16]
 8012b34:	8952      	ldrh	r2, [r2, #10]
 8012b36:	4293      	cmp	r3, r2
 8012b38:	d905      	bls.n	8012b46 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	895b      	ldrh	r3, [r3, #10]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	1ad3      	subs	r3, r2, r3
 8012b44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	7858      	ldrb	r0, [r3, #1]
 8012b4a:	6a3b      	ldr	r3, [r7, #32]
 8012b4c:	697a      	ldr	r2, [r7, #20]
 8012b4e:	69f9      	ldr	r1, [r7, #28]
 8012b50:	f7fd fd40 	bl	80105d4 <disk_write>
 8012b54:	4603      	mov	r3, r0
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d004      	beq.n	8012b64 <f_write+0x1e2>
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	755a      	strb	r2, [r3, #21]
 8012b60:	2301      	movs	r3, #1
 8012b62:	e09e      	b.n	8012ca2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	6a1a      	ldr	r2, [r3, #32]
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	6a3a      	ldr	r2, [r7, #32]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d918      	bls.n	8012ba4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	6a1a      	ldr	r2, [r3, #32]
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	1ad3      	subs	r3, r2, r3
 8012b80:	693a      	ldr	r2, [r7, #16]
 8012b82:	8992      	ldrh	r2, [r2, #12]
 8012b84:	fb02 f303 	mul.w	r3, r2, r3
 8012b88:	69fa      	ldr	r2, [r7, #28]
 8012b8a:	18d1      	adds	r1, r2, r3
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	899b      	ldrh	r3, [r3, #12]
 8012b90:	461a      	mov	r2, r3
 8012b92:	f7fd fddf 	bl	8010754 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	7d1b      	ldrb	r3, [r3, #20]
 8012b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b9e:	b2da      	uxtb	r2, r3
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	899b      	ldrh	r3, [r3, #12]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	6a3b      	ldr	r3, [r7, #32]
 8012bac:	fb02 f303 	mul.w	r3, r2, r3
 8012bb0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012bb2:	e04b      	b.n	8012c4c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	6a1b      	ldr	r3, [r3, #32]
 8012bb8:	697a      	ldr	r2, [r7, #20]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d016      	beq.n	8012bec <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	699a      	ldr	r2, [r3, #24]
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d210      	bcs.n	8012bec <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	7858      	ldrb	r0, [r3, #1]
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	f7fd fcdc 	bl	8010594 <disk_read>
 8012bdc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d004      	beq.n	8012bec <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	2201      	movs	r2, #1
 8012be6:	755a      	strb	r2, [r3, #21]
 8012be8:	2301      	movs	r3, #1
 8012bea:	e05a      	b.n	8012ca2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	697a      	ldr	r2, [r7, #20]
 8012bf0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	899b      	ldrh	r3, [r3, #12]
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	699b      	ldr	r3, [r3, #24]
 8012bfc:	693a      	ldr	r2, [r7, #16]
 8012bfe:	8992      	ldrh	r2, [r2, #12]
 8012c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c04:	fb02 f201 	mul.w	r2, r2, r1
 8012c08:	1a9b      	subs	r3, r3, r2
 8012c0a:	1ac3      	subs	r3, r0, r3
 8012c0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d901      	bls.n	8012c1a <f_write+0x298>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	699b      	ldr	r3, [r3, #24]
 8012c24:	693a      	ldr	r2, [r7, #16]
 8012c26:	8992      	ldrh	r2, [r2, #12]
 8012c28:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c2c:	fb02 f200 	mul.w	r2, r2, r0
 8012c30:	1a9b      	subs	r3, r3, r2
 8012c32:	440b      	add	r3, r1
 8012c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c36:	69f9      	ldr	r1, [r7, #28]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fd fd8b 	bl	8010754 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	7d1b      	ldrb	r3, [r3, #20]
 8012c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012c46:	b2da      	uxtb	r2, r3
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012c4c:	69fa      	ldr	r2, [r7, #28]
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	4413      	add	r3, r2
 8012c52:	61fb      	str	r3, [r7, #28]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	699a      	ldr	r2, [r3, #24]
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	441a      	add	r2, r3
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	619a      	str	r2, [r3, #24]
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	68da      	ldr	r2, [r3, #12]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	699b      	ldr	r3, [r3, #24]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	bf38      	it	cc
 8012c6c:	461a      	movcc	r2, r3
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	60da      	str	r2, [r3, #12]
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c78:	441a      	add	r2, r3
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	1ad3      	subs	r3, r2, r3
 8012c84:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f47f aeb5 	bne.w	80129f8 <f_write+0x76>
 8012c8e:	e000      	b.n	8012c92 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012c90:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	7d1b      	ldrb	r3, [r3, #20]
 8012c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c9a:	b2da      	uxtb	r2, r3
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012ca0:	2300      	movs	r3, #0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3730      	adds	r7, #48	; 0x30
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
	...

08012cac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b086      	sub	sp, #24
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f107 0208 	add.w	r2, r7, #8
 8012cba:	4611      	mov	r1, r2
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff fab7 	bl	8012230 <validate>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012cc6:	7dfb      	ldrb	r3, [r7, #23]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d167      	bne.n	8012d9c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	7d1b      	ldrb	r3, [r3, #20]
 8012cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d061      	beq.n	8012d9c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	7d1b      	ldrb	r3, [r3, #20]
 8012cdc:	b25b      	sxtb	r3, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	da15      	bge.n	8012d0e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	7858      	ldrb	r0, [r3, #1]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6a1a      	ldr	r2, [r3, #32]
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	f7fd fc6f 	bl	80105d4 <disk_write>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d001      	beq.n	8012d00 <f_sync+0x54>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e04e      	b.n	8012d9e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	7d1b      	ldrb	r3, [r3, #20]
 8012d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d08:	b2da      	uxtb	r2, r3
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012d0e:	4b26      	ldr	r3, [pc, #152]	; (8012da8 <f_sync+0xfc>)
 8012d10:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012d12:	68ba      	ldr	r2, [r7, #8]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d18:	4619      	mov	r1, r3
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	f7fd ff48 	bl	8010bb0 <move_window>
 8012d20:	4603      	mov	r3, r0
 8012d22:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012d24:	7dfb      	ldrb	r3, [r7, #23]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d138      	bne.n	8012d9c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d2e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	330b      	adds	r3, #11
 8012d34:	781a      	ldrb	r2, [r3, #0]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	330b      	adds	r3, #11
 8012d3a:	f042 0220 	orr.w	r2, r2, #32
 8012d3e:	b2d2      	uxtb	r2, r2
 8012d40:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6818      	ldr	r0, [r3, #0]
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	68f9      	ldr	r1, [r7, #12]
 8012d4e:	f7fe fccd 	bl	80116ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f103 021c 	add.w	r2, r3, #28
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	4610      	mov	r0, r2
 8012d60:	f7fd fccc 	bl	80106fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	3316      	adds	r3, #22
 8012d68:	6939      	ldr	r1, [r7, #16]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fd fcc6 	bl	80106fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	3312      	adds	r3, #18
 8012d74:	2100      	movs	r1, #0
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7fd fca5 	bl	80106c6 <st_word>
					fs->wflag = 1;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	2201      	movs	r2, #1
 8012d80:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fd ff41 	bl	8010c0c <sync_fs>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7d1b      	ldrb	r3, [r3, #20]
 8012d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d96:	b2da      	uxtb	r2, r3
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	274a0000 	.word	0x274a0000

08012dac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ff79 	bl	8012cac <f_sync>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012dbe:	7bfb      	ldrb	r3, [r7, #15]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d118      	bne.n	8012df6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f107 0208 	add.w	r2, r7, #8
 8012dca:	4611      	mov	r1, r2
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff fa2f 	bl	8012230 <validate>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012dd6:	7bfb      	ldrb	r3, [r7, #15]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d10c      	bne.n	8012df6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	691b      	ldr	r3, [r3, #16]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fd fe41 	bl	8010a68 <dec_lock>
 8012de6:	4603      	mov	r3, r0
 8012de8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012dea:	7bfb      	ldrb	r3, [r7, #15]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d102      	bne.n	8012df6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3710      	adds	r7, #16
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012e00:	b590      	push	{r4, r7, lr}
 8012e02:	b091      	sub	sp, #68	; 0x44
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012e08:	f107 0108 	add.w	r1, r7, #8
 8012e0c:	1d3b      	adds	r3, r7, #4
 8012e0e:	2200      	movs	r2, #0
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe ff87 	bl	8011d24 <find_volume>
 8012e16:	4603      	mov	r3, r0
 8012e18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012e1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d131      	bne.n	8012e88 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	f107 030c 	add.w	r3, r7, #12
 8012e2e:	4611      	mov	r1, r2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe fe47 	bl	8011ac4 <follow_path>
 8012e36:	4603      	mov	r3, r0
 8012e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012e3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d11a      	bne.n	8012e7a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012e44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012e48:	b25b      	sxtb	r3, r3
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	da03      	bge.n	8012e56 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	697a      	ldr	r2, [r7, #20]
 8012e52:	619a      	str	r2, [r3, #24]
 8012e54:	e011      	b.n	8012e7a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012e56:	7cbb      	ldrb	r3, [r7, #18]
 8012e58:	f003 0310 	and.w	r3, r3, #16
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d009      	beq.n	8012e74 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e64:	68bc      	ldr	r4, [r7, #8]
 8012e66:	4611      	mov	r1, r2
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7fe fc20 	bl	80116ae <ld_clust>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	61a3      	str	r3, [r4, #24]
 8012e72:	e002      	b.n	8012e7a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012e74:	2305      	movs	r3, #5
 8012e76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012e7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e7e:	2b04      	cmp	r3, #4
 8012e80:	d102      	bne.n	8012e88 <f_chdir+0x88>
 8012e82:	2305      	movs	r3, #5
 8012e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3744      	adds	r7, #68	; 0x44
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd90      	pop	{r4, r7, pc}

08012e94 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b090      	sub	sp, #64	; 0x40
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f107 0208 	add.w	r2, r7, #8
 8012ea4:	4611      	mov	r1, r2
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff f9c2 	bl	8012230 <validate>
 8012eac:	4603      	mov	r3, r0
 8012eae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012eb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d103      	bne.n	8012ec2 <f_lseek+0x2e>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	7d5b      	ldrb	r3, [r3, #21]
 8012ebe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012ec2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d002      	beq.n	8012ed0 <f_lseek+0x3c>
 8012eca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ece:	e201      	b.n	80132d4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	f000 80d9 	beq.w	801308c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee0:	d15a      	bne.n	8012f98 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eea:	1d1a      	adds	r2, r3, #4
 8012eec:	627a      	str	r2, [r7, #36]	; 0x24
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	617b      	str	r3, [r7, #20]
 8012ef2:	2302      	movs	r3, #2
 8012ef4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	689b      	ldr	r3, [r3, #8]
 8012efa:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d03a      	beq.n	8012f78 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f04:	613b      	str	r3, [r7, #16]
 8012f06:	2300      	movs	r3, #0
 8012f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0c:	3302      	adds	r3, #2
 8012f0e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f12:	60fb      	str	r3, [r7, #12]
 8012f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f16:	3301      	adds	r3, #1
 8012f18:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fd ff03 	bl	8010d2a <get_fat>
 8012f24:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	d804      	bhi.n	8012f36 <f_lseek+0xa2>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2202      	movs	r2, #2
 8012f30:	755a      	strb	r2, [r3, #21]
 8012f32:	2302      	movs	r3, #2
 8012f34:	e1ce      	b.n	80132d4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f3c:	d104      	bne.n	8012f48 <f_lseek+0xb4>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2201      	movs	r2, #1
 8012f42:	755a      	strb	r2, [r3, #21]
 8012f44:	2301      	movs	r3, #1
 8012f46:	e1c5      	b.n	80132d4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d0de      	beq.n	8012f10 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d809      	bhi.n	8012f6e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5c:	1d1a      	adds	r2, r3, #4
 8012f5e:	627a      	str	r2, [r7, #36]	; 0x24
 8012f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f62:	601a      	str	r2, [r3, #0]
 8012f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f66:	1d1a      	adds	r2, r3, #4
 8012f68:	627a      	str	r2, [r7, #36]	; 0x24
 8012f6a:	693a      	ldr	r2, [r7, #16]
 8012f6c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	69db      	ldr	r3, [r3, #28]
 8012f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d3c4      	bcc.n	8012f02 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f7e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d803      	bhi.n	8012f90 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	601a      	str	r2, [r3, #0]
 8012f8e:	e19f      	b.n	80132d0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012f90:	2311      	movs	r3, #17
 8012f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012f96:	e19b      	b.n	80132d0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	683a      	ldr	r2, [r7, #0]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d902      	bls.n	8012fa8 <f_lseek+0x114>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	683a      	ldr	r2, [r7, #0]
 8012fac:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	f000 818d 	beq.w	80132d0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	4619      	mov	r1, r3
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7fe f998 	bl	80112f2 <clmt_clust>
 8012fc2:	4602      	mov	r2, r0
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012fc8:	68ba      	ldr	r2, [r7, #8]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	69db      	ldr	r3, [r3, #28]
 8012fce:	4619      	mov	r1, r3
 8012fd0:	4610      	mov	r0, r2
 8012fd2:	f7fd fe8b 	bl	8010cec <clust2sect>
 8012fd6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d104      	bne.n	8012fe8 <f_lseek+0x154>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2202      	movs	r2, #2
 8012fe2:	755a      	strb	r2, [r3, #21]
 8012fe4:	2302      	movs	r3, #2
 8012fe6:	e175      	b.n	80132d4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	3b01      	subs	r3, #1
 8012fec:	68ba      	ldr	r2, [r7, #8]
 8012fee:	8992      	ldrh	r2, [r2, #12]
 8012ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	8952      	ldrh	r2, [r2, #10]
 8012ff8:	3a01      	subs	r2, #1
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	69ba      	ldr	r2, [r7, #24]
 8012ffe:	4413      	add	r3, r2
 8013000:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	699b      	ldr	r3, [r3, #24]
 8013006:	68ba      	ldr	r2, [r7, #8]
 8013008:	8992      	ldrh	r2, [r2, #12]
 801300a:	fbb3 f1f2 	udiv	r1, r3, r2
 801300e:	fb02 f201 	mul.w	r2, r2, r1
 8013012:	1a9b      	subs	r3, r3, r2
 8013014:	2b00      	cmp	r3, #0
 8013016:	f000 815b 	beq.w	80132d0 <f_lseek+0x43c>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a1b      	ldr	r3, [r3, #32]
 801301e:	69ba      	ldr	r2, [r7, #24]
 8013020:	429a      	cmp	r2, r3
 8013022:	f000 8155 	beq.w	80132d0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	7d1b      	ldrb	r3, [r3, #20]
 801302a:	b25b      	sxtb	r3, r3
 801302c:	2b00      	cmp	r3, #0
 801302e:	da18      	bge.n	8013062 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	7858      	ldrb	r0, [r3, #1]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6a1a      	ldr	r2, [r3, #32]
 801303e:	2301      	movs	r3, #1
 8013040:	f7fd fac8 	bl	80105d4 <disk_write>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d004      	beq.n	8013054 <f_lseek+0x1c0>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2201      	movs	r2, #1
 801304e:	755a      	strb	r2, [r3, #21]
 8013050:	2301      	movs	r3, #1
 8013052:	e13f      	b.n	80132d4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	7d1b      	ldrb	r3, [r3, #20]
 8013058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801305c:	b2da      	uxtb	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	7858      	ldrb	r0, [r3, #1]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801306c:	2301      	movs	r3, #1
 801306e:	69ba      	ldr	r2, [r7, #24]
 8013070:	f7fd fa90 	bl	8010594 <disk_read>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d004      	beq.n	8013084 <f_lseek+0x1f0>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	755a      	strb	r2, [r3, #21]
 8013080:	2301      	movs	r3, #1
 8013082:	e127      	b.n	80132d4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	69ba      	ldr	r2, [r7, #24]
 8013088:	621a      	str	r2, [r3, #32]
 801308a:	e121      	b.n	80132d0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	683a      	ldr	r2, [r7, #0]
 8013092:	429a      	cmp	r2, r3
 8013094:	d908      	bls.n	80130a8 <f_lseek+0x214>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	7d1b      	ldrb	r3, [r3, #20]
 801309a:	f003 0302 	and.w	r3, r3, #2
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d102      	bne.n	80130a8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	699b      	ldr	r3, [r3, #24]
 80130ac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	637b      	str	r3, [r7, #52]	; 0x34
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130b6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	f000 80b5 	beq.w	801322a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	895b      	ldrh	r3, [r3, #10]
 80130c4:	461a      	mov	r2, r3
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	899b      	ldrh	r3, [r3, #12]
 80130ca:	fb03 f302 	mul.w	r3, r3, r2
 80130ce:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80130d0:	6a3b      	ldr	r3, [r7, #32]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d01b      	beq.n	801310e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	1e5a      	subs	r2, r3, #1
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80130e0:	6a3b      	ldr	r3, [r7, #32]
 80130e2:	1e59      	subs	r1, r3, #1
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d30f      	bcc.n	801310e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80130ee:	6a3b      	ldr	r3, [r7, #32]
 80130f0:	1e5a      	subs	r2, r3, #1
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	425b      	negs	r3, r3
 80130f6:	401a      	ands	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	699b      	ldr	r3, [r3, #24]
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	1ad3      	subs	r3, r2, r3
 8013104:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	69db      	ldr	r3, [r3, #28]
 801310a:	63bb      	str	r3, [r7, #56]	; 0x38
 801310c:	e022      	b.n	8013154 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013116:	2b00      	cmp	r3, #0
 8013118:	d119      	bne.n	801314e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2100      	movs	r1, #0
 801311e:	4618      	mov	r0, r3
 8013120:	f7fe f84f 	bl	80111c2 <create_chain>
 8013124:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013128:	2b01      	cmp	r3, #1
 801312a:	d104      	bne.n	8013136 <f_lseek+0x2a2>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2202      	movs	r2, #2
 8013130:	755a      	strb	r2, [r3, #21]
 8013132:	2302      	movs	r3, #2
 8013134:	e0ce      	b.n	80132d4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313c:	d104      	bne.n	8013148 <f_lseek+0x2b4>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2201      	movs	r2, #1
 8013142:	755a      	strb	r2, [r3, #21]
 8013144:	2301      	movs	r3, #1
 8013146:	e0c5      	b.n	80132d4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801314c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013152:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013156:	2b00      	cmp	r3, #0
 8013158:	d067      	beq.n	801322a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801315a:	e03a      	b.n	80131d2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801315c:	683a      	ldr	r2, [r7, #0]
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	1ad3      	subs	r3, r2, r3
 8013162:	603b      	str	r3, [r7, #0]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	699a      	ldr	r2, [r3, #24]
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	441a      	add	r2, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	7d1b      	ldrb	r3, [r3, #20]
 8013174:	f003 0302 	and.w	r3, r3, #2
 8013178:	2b00      	cmp	r3, #0
 801317a:	d00b      	beq.n	8013194 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013180:	4618      	mov	r0, r3
 8013182:	f7fe f81e 	bl	80111c2 <create_chain>
 8013186:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	2b00      	cmp	r3, #0
 801318c:	d108      	bne.n	80131a0 <f_lseek+0x30c>
							ofs = 0; break;
 801318e:	2300      	movs	r3, #0
 8013190:	603b      	str	r3, [r7, #0]
 8013192:	e022      	b.n	80131da <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013198:	4618      	mov	r0, r3
 801319a:	f7fd fdc6 	bl	8010d2a <get_fat>
 801319e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a6:	d104      	bne.n	80131b2 <f_lseek+0x31e>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2201      	movs	r2, #1
 80131ac:	755a      	strb	r2, [r3, #21]
 80131ae:	2301      	movs	r3, #1
 80131b0:	e090      	b.n	80132d4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80131b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d904      	bls.n	80131c2 <f_lseek+0x32e>
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	69db      	ldr	r3, [r3, #28]
 80131bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131be:	429a      	cmp	r2, r3
 80131c0:	d304      	bcc.n	80131cc <f_lseek+0x338>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2202      	movs	r2, #2
 80131c6:	755a      	strb	r2, [r3, #21]
 80131c8:	2302      	movs	r3, #2
 80131ca:	e083      	b.n	80132d4 <f_lseek+0x440>
					fp->clust = clst;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131d0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80131d2:	683a      	ldr	r2, [r7, #0]
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d8c0      	bhi.n	801315c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	699a      	ldr	r2, [r3, #24]
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	441a      	add	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	899b      	ldrh	r3, [r3, #12]
 80131ea:	461a      	mov	r2, r3
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80131f2:	fb02 f201 	mul.w	r2, r2, r1
 80131f6:	1a9b      	subs	r3, r3, r2
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d016      	beq.n	801322a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013200:	4618      	mov	r0, r3
 8013202:	f7fd fd73 	bl	8010cec <clust2sect>
 8013206:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801320a:	2b00      	cmp	r3, #0
 801320c:	d104      	bne.n	8013218 <f_lseek+0x384>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2202      	movs	r2, #2
 8013212:	755a      	strb	r2, [r3, #21]
 8013214:	2302      	movs	r3, #2
 8013216:	e05d      	b.n	80132d4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	899b      	ldrh	r3, [r3, #12]
 801321c:	461a      	mov	r2, r3
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	fbb3 f3f2 	udiv	r3, r3, r2
 8013224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013226:	4413      	add	r3, r2
 8013228:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	699a      	ldr	r2, [r3, #24]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	68db      	ldr	r3, [r3, #12]
 8013232:	429a      	cmp	r2, r3
 8013234:	d90a      	bls.n	801324c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	699a      	ldr	r2, [r3, #24]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	7d1b      	ldrb	r3, [r3, #20]
 8013242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013246:	b2da      	uxtb	r2, r3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	699b      	ldr	r3, [r3, #24]
 8013250:	68ba      	ldr	r2, [r7, #8]
 8013252:	8992      	ldrh	r2, [r2, #12]
 8013254:	fbb3 f1f2 	udiv	r1, r3, r2
 8013258:	fb02 f201 	mul.w	r2, r2, r1
 801325c:	1a9b      	subs	r3, r3, r2
 801325e:	2b00      	cmp	r3, #0
 8013260:	d036      	beq.n	80132d0 <f_lseek+0x43c>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6a1b      	ldr	r3, [r3, #32]
 8013266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013268:	429a      	cmp	r2, r3
 801326a:	d031      	beq.n	80132d0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	7d1b      	ldrb	r3, [r3, #20]
 8013270:	b25b      	sxtb	r3, r3
 8013272:	2b00      	cmp	r3, #0
 8013274:	da18      	bge.n	80132a8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	7858      	ldrb	r0, [r3, #1]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6a1a      	ldr	r2, [r3, #32]
 8013284:	2301      	movs	r3, #1
 8013286:	f7fd f9a5 	bl	80105d4 <disk_write>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d004      	beq.n	801329a <f_lseek+0x406>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2201      	movs	r2, #1
 8013294:	755a      	strb	r2, [r3, #21]
 8013296:	2301      	movs	r3, #1
 8013298:	e01c      	b.n	80132d4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	7d1b      	ldrb	r3, [r3, #20]
 801329e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	7858      	ldrb	r0, [r3, #1]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132b2:	2301      	movs	r3, #1
 80132b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132b6:	f7fd f96d 	bl	8010594 <disk_read>
 80132ba:	4603      	mov	r3, r0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d004      	beq.n	80132ca <f_lseek+0x436>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2201      	movs	r2, #1
 80132c4:	755a      	strb	r2, [r3, #21]
 80132c6:	2301      	movs	r3, #1
 80132c8:	e004      	b.n	80132d4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132ce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80132d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3740      	adds	r7, #64	; 0x40
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b09e      	sub	sp, #120	; 0x78
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80132e4:	2300      	movs	r3, #0
 80132e6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80132e8:	f107 010c 	add.w	r1, r7, #12
 80132ec:	1d3b      	adds	r3, r7, #4
 80132ee:	2202      	movs	r2, #2
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fe fd17 	bl	8011d24 <find_volume>
 80132f6:	4603      	mov	r3, r0
 80132f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013300:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013304:	2b00      	cmp	r3, #0
 8013306:	f040 80a4 	bne.w	8013452 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013310:	4611      	mov	r1, r2
 8013312:	4618      	mov	r0, r3
 8013314:	f7fe fbd6 	bl	8011ac4 <follow_path>
 8013318:	4603      	mov	r3, r0
 801331a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801331e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013322:	2b00      	cmp	r3, #0
 8013324:	d108      	bne.n	8013338 <f_unlink+0x5c>
 8013326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801332a:	f003 0320 	and.w	r3, r3, #32
 801332e:	2b00      	cmp	r3, #0
 8013330:	d002      	beq.n	8013338 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013332:	2306      	movs	r3, #6
 8013334:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013338:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801333c:	2b00      	cmp	r3, #0
 801333e:	d108      	bne.n	8013352 <f_unlink+0x76>
 8013340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013344:	2102      	movs	r1, #2
 8013346:	4618      	mov	r0, r3
 8013348:	f7fd fa82 	bl	8010850 <chk_lock>
 801334c:	4603      	mov	r3, r0
 801334e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013352:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013356:	2b00      	cmp	r3, #0
 8013358:	d17b      	bne.n	8013452 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801335a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801335e:	b25b      	sxtb	r3, r3
 8013360:	2b00      	cmp	r3, #0
 8013362:	da03      	bge.n	801336c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013364:	2306      	movs	r3, #6
 8013366:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801336a:	e008      	b.n	801337e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801336c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013370:	f003 0301 	and.w	r3, r3, #1
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013378:	2307      	movs	r3, #7
 801337a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801337e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013382:	2b00      	cmp	r3, #0
 8013384:	d13d      	bne.n	8013402 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801338a:	4611      	mov	r1, r2
 801338c:	4618      	mov	r0, r3
 801338e:	f7fe f98e 	bl	80116ae <ld_clust>
 8013392:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013394:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013398:	f003 0310 	and.w	r3, r3, #16
 801339c:	2b00      	cmp	r3, #0
 801339e:	d030      	beq.n	8013402 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	699b      	ldr	r3, [r3, #24]
 80133a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d103      	bne.n	80133b2 <f_unlink+0xd6>
						res = FR_DENIED;
 80133aa:	2307      	movs	r3, #7
 80133ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80133b0:	e027      	b.n	8013402 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80133b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133b8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80133ba:	f107 0310 	add.w	r3, r7, #16
 80133be:	2100      	movs	r1, #0
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fd ffce 	bl	8011362 <dir_sdi>
 80133c6:	4603      	mov	r3, r0
 80133c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80133cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d116      	bne.n	8013402 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80133d4:	f107 0310 	add.w	r3, r7, #16
 80133d8:	2100      	movs	r1, #0
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fe f9a6 	bl	801172c <dir_read>
 80133e0:	4603      	mov	r3, r0
 80133e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80133e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d102      	bne.n	80133f4 <f_unlink+0x118>
 80133ee:	2307      	movs	r3, #7
 80133f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80133f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80133f8:	2b04      	cmp	r3, #4
 80133fa:	d102      	bne.n	8013402 <f_unlink+0x126>
 80133fc:	2300      	movs	r3, #0
 80133fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013402:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013406:	2b00      	cmp	r3, #0
 8013408:	d123      	bne.n	8013452 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801340a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801340e:	4618      	mov	r0, r3
 8013410:	f7fe fa70 	bl	80118f4 <dir_remove>
 8013414:	4603      	mov	r3, r0
 8013416:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801341a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801341e:	2b00      	cmp	r3, #0
 8013420:	d10c      	bne.n	801343c <f_unlink+0x160>
 8013422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013424:	2b00      	cmp	r3, #0
 8013426:	d009      	beq.n	801343c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801342c:	2200      	movs	r2, #0
 801342e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013430:	4618      	mov	r0, r3
 8013432:	f7fd fe61 	bl	80110f8 <remove_chain>
 8013436:	4603      	mov	r3, r0
 8013438:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801343c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013440:	2b00      	cmp	r3, #0
 8013442:	d106      	bne.n	8013452 <f_unlink+0x176>
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	4618      	mov	r0, r3
 8013448:	f7fd fbe0 	bl	8010c0c <sync_fs>
 801344c:	4603      	mov	r3, r0
 801344e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013452:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013456:	4618      	mov	r0, r3
 8013458:	3778      	adds	r7, #120	; 0x78
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
	...

08013460 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b096      	sub	sp, #88	; 0x58
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013468:	f107 0108 	add.w	r1, r7, #8
 801346c:	1d3b      	adds	r3, r7, #4
 801346e:	2202      	movs	r2, #2
 8013470:	4618      	mov	r0, r3
 8013472:	f7fe fc57 	bl	8011d24 <find_volume>
 8013476:	4603      	mov	r3, r0
 8013478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013484:	2b00      	cmp	r3, #0
 8013486:	f040 80fe 	bne.w	8013686 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	f107 030c 	add.w	r3, r7, #12
 8013490:	4611      	mov	r1, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7fe fb16 	bl	8011ac4 <follow_path>
 8013498:	4603      	mov	r3, r0
 801349a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801349e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d102      	bne.n	80134ac <f_mkdir+0x4c>
 80134a6:	2308      	movs	r3, #8
 80134a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80134ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134b0:	2b04      	cmp	r3, #4
 80134b2:	d108      	bne.n	80134c6 <f_mkdir+0x66>
 80134b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80134b8:	f003 0320 	and.w	r3, r3, #32
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d002      	beq.n	80134c6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80134c0:	2306      	movs	r3, #6
 80134c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80134c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134ca:	2b04      	cmp	r3, #4
 80134cc:	f040 80db 	bne.w	8013686 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80134d0:	f107 030c 	add.w	r3, r7, #12
 80134d4:	2100      	movs	r1, #0
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fd fe73 	bl	80111c2 <create_chain>
 80134dc:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	895b      	ldrh	r3, [r3, #10]
 80134e2:	461a      	mov	r2, r3
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	899b      	ldrh	r3, [r3, #12]
 80134e8:	fb03 f302 	mul.w	r3, r3, r2
 80134ec:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80134f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d102      	bne.n	8013500 <f_mkdir+0xa0>
 80134fa:	2307      	movs	r3, #7
 80134fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013502:	2b01      	cmp	r3, #1
 8013504:	d102      	bne.n	801350c <f_mkdir+0xac>
 8013506:	2302      	movs	r3, #2
 8013508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013512:	d102      	bne.n	801351a <f_mkdir+0xba>
 8013514:	2301      	movs	r3, #1
 8013516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801351a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801351e:	2b00      	cmp	r3, #0
 8013520:	d106      	bne.n	8013530 <f_mkdir+0xd0>
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	4618      	mov	r0, r3
 8013526:	f7fd faff 	bl	8010b28 <sync_window>
 801352a:	4603      	mov	r3, r0
 801352c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013530:	4b58      	ldr	r3, [pc, #352]	; (8013694 <f_mkdir+0x234>)
 8013532:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013538:	2b00      	cmp	r3, #0
 801353a:	d16c      	bne.n	8013616 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd fbd3 	bl	8010cec <clust2sect>
 8013546:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	3338      	adds	r3, #56	; 0x38
 801354c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	899b      	ldrh	r3, [r3, #12]
 8013552:	461a      	mov	r2, r3
 8013554:	2100      	movs	r1, #0
 8013556:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013558:	f7fd f91d 	bl	8010796 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801355c:	220b      	movs	r2, #11
 801355e:	2120      	movs	r1, #32
 8013560:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013562:	f7fd f918 	bl	8010796 <mem_set>
					dir[DIR_Name] = '.';
 8013566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013568:	222e      	movs	r2, #46	; 0x2e
 801356a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801356c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801356e:	330b      	adds	r3, #11
 8013570:	2210      	movs	r2, #16
 8013572:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013576:	3316      	adds	r3, #22
 8013578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801357a:	4618      	mov	r0, r3
 801357c:	f7fd f8be 	bl	80106fc <st_dword>
					st_clust(fs, dir, dcl);
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013584:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013586:	4618      	mov	r0, r3
 8013588:	f7fe f8b0 	bl	80116ec <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801358e:	3320      	adds	r3, #32
 8013590:	2220      	movs	r2, #32
 8013592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013594:	4618      	mov	r0, r3
 8013596:	f7fd f8dd 	bl	8010754 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801359c:	3321      	adds	r3, #33	; 0x21
 801359e:	222e      	movs	r2, #46	; 0x2e
 80135a0:	701a      	strb	r2, [r3, #0]
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	2b03      	cmp	r3, #3
 80135ac:	d106      	bne.n	80135bc <f_mkdir+0x15c>
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d101      	bne.n	80135bc <f_mkdir+0x15c>
 80135b8:	2300      	movs	r3, #0
 80135ba:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80135bc:	68b8      	ldr	r0, [r7, #8]
 80135be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135c0:	3320      	adds	r3, #32
 80135c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135c4:	4619      	mov	r1, r3
 80135c6:	f7fe f891 	bl	80116ec <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	895b      	ldrh	r3, [r3, #10]
 80135ce:	653b      	str	r3, [r7, #80]	; 0x50
 80135d0:	e01c      	b.n	801360c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80135d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135d4:	1c5a      	adds	r2, r3, #1
 80135d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2201      	movs	r2, #1
 80135e0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fd fa9f 	bl	8010b28 <sync_window>
 80135ea:	4603      	mov	r3, r0
 80135ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80135f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d10d      	bne.n	8013614 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	899b      	ldrh	r3, [r3, #12]
 80135fc:	461a      	mov	r2, r3
 80135fe:	2100      	movs	r1, #0
 8013600:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013602:	f7fd f8c8 	bl	8010796 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013608:	3b01      	subs	r3, #1
 801360a:	653b      	str	r3, [r7, #80]	; 0x50
 801360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1df      	bne.n	80135d2 <f_mkdir+0x172>
 8013612:	e000      	b.n	8013616 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013614:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801361a:	2b00      	cmp	r3, #0
 801361c:	d107      	bne.n	801362e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801361e:	f107 030c 	add.w	r3, r7, #12
 8013622:	4618      	mov	r0, r3
 8013624:	f7fe f934 	bl	8011890 <dir_register>
 8013628:	4603      	mov	r3, r0
 801362a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801362e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013632:	2b00      	cmp	r3, #0
 8013634:	d120      	bne.n	8013678 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013638:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801363c:	3316      	adds	r3, #22
 801363e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013640:	4618      	mov	r0, r3
 8013642:	f7fd f85b 	bl	80106fc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801364a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801364c:	4618      	mov	r0, r3
 801364e:	f7fe f84d 	bl	80116ec <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013654:	330b      	adds	r3, #11
 8013656:	2210      	movs	r2, #16
 8013658:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	2201      	movs	r2, #1
 801365e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013664:	2b00      	cmp	r3, #0
 8013666:	d10e      	bne.n	8013686 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	4618      	mov	r0, r3
 801366c:	f7fd face 	bl	8010c0c <sync_fs>
 8013670:	4603      	mov	r3, r0
 8013672:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013676:	e006      	b.n	8013686 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013678:	f107 030c 	add.w	r3, r7, #12
 801367c:	2200      	movs	r2, #0
 801367e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013680:	4618      	mov	r0, r3
 8013682:	f7fd fd39 	bl	80110f8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801368a:	4618      	mov	r0, r3
 801368c:	3758      	adds	r7, #88	; 0x58
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	274a0000 	.word	0x274a0000

08013698 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b088      	sub	sp, #32
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80136ac:	e017      	b.n	80136de <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80136ae:	f107 0310 	add.w	r3, r7, #16
 80136b2:	f107 0114 	add.w	r1, r7, #20
 80136b6:	2201      	movs	r2, #1
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7ff f803 	bl	80126c4 <f_read>
		if (rc != 1) break;
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d112      	bne.n	80136ea <f_gets+0x52>
		c = s[0];
 80136c4:	7d3b      	ldrb	r3, [r7, #20]
 80136c6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	1c5a      	adds	r2, r3, #1
 80136cc:	61ba      	str	r2, [r7, #24]
 80136ce:	7dfa      	ldrb	r2, [r7, #23]
 80136d0:	701a      	strb	r2, [r3, #0]
		n++;
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	3301      	adds	r3, #1
 80136d6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80136d8:	7dfb      	ldrb	r3, [r7, #23]
 80136da:	2b0a      	cmp	r3, #10
 80136dc:	d007      	beq.n	80136ee <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	3b01      	subs	r3, #1
 80136e2:	69fa      	ldr	r2, [r7, #28]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	dbe2      	blt.n	80136ae <f_gets+0x16>
 80136e8:	e002      	b.n	80136f0 <f_gets+0x58>
		if (rc != 1) break;
 80136ea:	bf00      	nop
 80136ec:	e000      	b.n	80136f0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80136ee:	bf00      	nop
	}
	*p = 0;
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	2200      	movs	r2, #0
 80136f4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d001      	beq.n	8013700 <f_gets+0x68>
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	e000      	b.n	8013702 <f_gets+0x6a>
 8013700:	2300      	movs	r3, #0
}
 8013702:	4618      	mov	r0, r3
 8013704:	3720      	adds	r7, #32
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
	...

0801370c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801370c:	b480      	push	{r7}
 801370e:	b087      	sub	sp, #28
 8013710:	af00      	add	r7, sp, #0
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	60b9      	str	r1, [r7, #8]
 8013716:	4613      	mov	r3, r2
 8013718:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801371a:	2301      	movs	r3, #1
 801371c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013722:	4b1f      	ldr	r3, [pc, #124]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 8013724:	7a5b      	ldrb	r3, [r3, #9]
 8013726:	b2db      	uxtb	r3, r3
 8013728:	2b00      	cmp	r3, #0
 801372a:	d131      	bne.n	8013790 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801372c:	4b1c      	ldr	r3, [pc, #112]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 801372e:	7a5b      	ldrb	r3, [r3, #9]
 8013730:	b2db      	uxtb	r3, r3
 8013732:	461a      	mov	r2, r3
 8013734:	4b1a      	ldr	r3, [pc, #104]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 8013736:	2100      	movs	r1, #0
 8013738:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801373a:	4b19      	ldr	r3, [pc, #100]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 801373c:	7a5b      	ldrb	r3, [r3, #9]
 801373e:	b2db      	uxtb	r3, r3
 8013740:	4a17      	ldr	r2, [pc, #92]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	4413      	add	r3, r2
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801374a:	4b15      	ldr	r3, [pc, #84]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 801374c:	7a5b      	ldrb	r3, [r3, #9]
 801374e:	b2db      	uxtb	r3, r3
 8013750:	461a      	mov	r2, r3
 8013752:	4b13      	ldr	r3, [pc, #76]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 8013754:	4413      	add	r3, r2
 8013756:	79fa      	ldrb	r2, [r7, #7]
 8013758:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801375a:	4b11      	ldr	r3, [pc, #68]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 801375c:	7a5b      	ldrb	r3, [r3, #9]
 801375e:	b2db      	uxtb	r3, r3
 8013760:	1c5a      	adds	r2, r3, #1
 8013762:	b2d1      	uxtb	r1, r2
 8013764:	4a0e      	ldr	r2, [pc, #56]	; (80137a0 <FATFS_LinkDriverEx+0x94>)
 8013766:	7251      	strb	r1, [r2, #9]
 8013768:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801376a:	7dbb      	ldrb	r3, [r7, #22]
 801376c:	3330      	adds	r3, #48	; 0x30
 801376e:	b2da      	uxtb	r2, r3
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	3301      	adds	r3, #1
 8013778:	223a      	movs	r2, #58	; 0x3a
 801377a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	3302      	adds	r3, #2
 8013780:	222f      	movs	r2, #47	; 0x2f
 8013782:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	3303      	adds	r3, #3
 8013788:	2200      	movs	r2, #0
 801378a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801378c:	2300      	movs	r3, #0
 801378e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013790:	7dfb      	ldrb	r3, [r7, #23]
}
 8013792:	4618      	mov	r0, r3
 8013794:	371c      	adds	r7, #28
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	2003c4c4 	.word	0x2003c4c4

080137a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80137ae:	2200      	movs	r2, #0
 80137b0:	6839      	ldr	r1, [r7, #0]
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f7ff ffaa 	bl	801370c <FATFS_LinkDriverEx>
 80137b8:	4603      	mov	r3, r0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3708      	adds	r7, #8
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <__cxa_guard_acquire>:
 80137c2:	6803      	ldr	r3, [r0, #0]
 80137c4:	07db      	lsls	r3, r3, #31
 80137c6:	d406      	bmi.n	80137d6 <__cxa_guard_acquire+0x14>
 80137c8:	7843      	ldrb	r3, [r0, #1]
 80137ca:	b103      	cbz	r3, 80137ce <__cxa_guard_acquire+0xc>
 80137cc:	deff      	udf	#255	; 0xff
 80137ce:	2301      	movs	r3, #1
 80137d0:	7043      	strb	r3, [r0, #1]
 80137d2:	4618      	mov	r0, r3
 80137d4:	4770      	bx	lr
 80137d6:	2000      	movs	r0, #0
 80137d8:	4770      	bx	lr

080137da <__cxa_guard_release>:
 80137da:	2301      	movs	r3, #1
 80137dc:	6003      	str	r3, [r0, #0]
 80137de:	4770      	bx	lr

080137e0 <cos>:
 80137e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137e2:	ec51 0b10 	vmov	r0, r1, d0
 80137e6:	4a1e      	ldr	r2, [pc, #120]	; (8013860 <cos+0x80>)
 80137e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80137ec:	4293      	cmp	r3, r2
 80137ee:	dc06      	bgt.n	80137fe <cos+0x1e>
 80137f0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013858 <cos+0x78>
 80137f4:	f000 fa74 	bl	8013ce0 <__kernel_cos>
 80137f8:	ec51 0b10 	vmov	r0, r1, d0
 80137fc:	e007      	b.n	801380e <cos+0x2e>
 80137fe:	4a19      	ldr	r2, [pc, #100]	; (8013864 <cos+0x84>)
 8013800:	4293      	cmp	r3, r2
 8013802:	dd09      	ble.n	8013818 <cos+0x38>
 8013804:	ee10 2a10 	vmov	r2, s0
 8013808:	460b      	mov	r3, r1
 801380a:	f7ec fd55 	bl	80002b8 <__aeabi_dsub>
 801380e:	ec41 0b10 	vmov	d0, r0, r1
 8013812:	b005      	add	sp, #20
 8013814:	f85d fb04 	ldr.w	pc, [sp], #4
 8013818:	4668      	mov	r0, sp
 801381a:	f000 f86d 	bl	80138f8 <__ieee754_rem_pio2>
 801381e:	f000 0003 	and.w	r0, r0, #3
 8013822:	2801      	cmp	r0, #1
 8013824:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013828:	ed9d 0b00 	vldr	d0, [sp]
 801382c:	d007      	beq.n	801383e <cos+0x5e>
 801382e:	2802      	cmp	r0, #2
 8013830:	d00e      	beq.n	8013850 <cos+0x70>
 8013832:	2800      	cmp	r0, #0
 8013834:	d0de      	beq.n	80137f4 <cos+0x14>
 8013836:	2001      	movs	r0, #1
 8013838:	f000 fe5a 	bl	80144f0 <__kernel_sin>
 801383c:	e7dc      	b.n	80137f8 <cos+0x18>
 801383e:	f000 fe57 	bl	80144f0 <__kernel_sin>
 8013842:	ec53 2b10 	vmov	r2, r3, d0
 8013846:	ee10 0a10 	vmov	r0, s0
 801384a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801384e:	e7de      	b.n	801380e <cos+0x2e>
 8013850:	f000 fa46 	bl	8013ce0 <__kernel_cos>
 8013854:	e7f5      	b.n	8013842 <cos+0x62>
 8013856:	bf00      	nop
	...
 8013860:	3fe921fb 	.word	0x3fe921fb
 8013864:	7fefffff 	.word	0x7fefffff

08013868 <sin>:
 8013868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801386a:	ec51 0b10 	vmov	r0, r1, d0
 801386e:	4a20      	ldr	r2, [pc, #128]	; (80138f0 <sin+0x88>)
 8013870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013874:	4293      	cmp	r3, r2
 8013876:	dc07      	bgt.n	8013888 <sin+0x20>
 8013878:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80138e8 <sin+0x80>
 801387c:	2000      	movs	r0, #0
 801387e:	f000 fe37 	bl	80144f0 <__kernel_sin>
 8013882:	ec51 0b10 	vmov	r0, r1, d0
 8013886:	e007      	b.n	8013898 <sin+0x30>
 8013888:	4a1a      	ldr	r2, [pc, #104]	; (80138f4 <sin+0x8c>)
 801388a:	4293      	cmp	r3, r2
 801388c:	dd09      	ble.n	80138a2 <sin+0x3a>
 801388e:	ee10 2a10 	vmov	r2, s0
 8013892:	460b      	mov	r3, r1
 8013894:	f7ec fd10 	bl	80002b8 <__aeabi_dsub>
 8013898:	ec41 0b10 	vmov	d0, r0, r1
 801389c:	b005      	add	sp, #20
 801389e:	f85d fb04 	ldr.w	pc, [sp], #4
 80138a2:	4668      	mov	r0, sp
 80138a4:	f000 f828 	bl	80138f8 <__ieee754_rem_pio2>
 80138a8:	f000 0003 	and.w	r0, r0, #3
 80138ac:	2801      	cmp	r0, #1
 80138ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80138b2:	ed9d 0b00 	vldr	d0, [sp]
 80138b6:	d004      	beq.n	80138c2 <sin+0x5a>
 80138b8:	2802      	cmp	r0, #2
 80138ba:	d005      	beq.n	80138c8 <sin+0x60>
 80138bc:	b970      	cbnz	r0, 80138dc <sin+0x74>
 80138be:	2001      	movs	r0, #1
 80138c0:	e7dd      	b.n	801387e <sin+0x16>
 80138c2:	f000 fa0d 	bl	8013ce0 <__kernel_cos>
 80138c6:	e7dc      	b.n	8013882 <sin+0x1a>
 80138c8:	2001      	movs	r0, #1
 80138ca:	f000 fe11 	bl	80144f0 <__kernel_sin>
 80138ce:	ec53 2b10 	vmov	r2, r3, d0
 80138d2:	ee10 0a10 	vmov	r0, s0
 80138d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80138da:	e7dd      	b.n	8013898 <sin+0x30>
 80138dc:	f000 fa00 	bl	8013ce0 <__kernel_cos>
 80138e0:	e7f5      	b.n	80138ce <sin+0x66>
 80138e2:	bf00      	nop
 80138e4:	f3af 8000 	nop.w
	...
 80138f0:	3fe921fb 	.word	0x3fe921fb
 80138f4:	7fefffff 	.word	0x7fefffff

080138f8 <__ieee754_rem_pio2>:
 80138f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fc:	ec57 6b10 	vmov	r6, r7, d0
 8013900:	4bc3      	ldr	r3, [pc, #780]	; (8013c10 <__ieee754_rem_pio2+0x318>)
 8013902:	b08d      	sub	sp, #52	; 0x34
 8013904:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013908:	4598      	cmp	r8, r3
 801390a:	4604      	mov	r4, r0
 801390c:	9704      	str	r7, [sp, #16]
 801390e:	dc07      	bgt.n	8013920 <__ieee754_rem_pio2+0x28>
 8013910:	2200      	movs	r2, #0
 8013912:	2300      	movs	r3, #0
 8013914:	ed84 0b00 	vstr	d0, [r4]
 8013918:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801391c:	2500      	movs	r5, #0
 801391e:	e027      	b.n	8013970 <__ieee754_rem_pio2+0x78>
 8013920:	4bbc      	ldr	r3, [pc, #752]	; (8013c14 <__ieee754_rem_pio2+0x31c>)
 8013922:	4598      	cmp	r8, r3
 8013924:	dc75      	bgt.n	8013a12 <__ieee754_rem_pio2+0x11a>
 8013926:	9b04      	ldr	r3, [sp, #16]
 8013928:	4dbb      	ldr	r5, [pc, #748]	; (8013c18 <__ieee754_rem_pio2+0x320>)
 801392a:	2b00      	cmp	r3, #0
 801392c:	ee10 0a10 	vmov	r0, s0
 8013930:	a3a9      	add	r3, pc, #676	; (adr r3, 8013bd8 <__ieee754_rem_pio2+0x2e0>)
 8013932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013936:	4639      	mov	r1, r7
 8013938:	dd36      	ble.n	80139a8 <__ieee754_rem_pio2+0xb0>
 801393a:	f7ec fcbd 	bl	80002b8 <__aeabi_dsub>
 801393e:	45a8      	cmp	r8, r5
 8013940:	4606      	mov	r6, r0
 8013942:	460f      	mov	r7, r1
 8013944:	d018      	beq.n	8013978 <__ieee754_rem_pio2+0x80>
 8013946:	a3a6      	add	r3, pc, #664	; (adr r3, 8013be0 <__ieee754_rem_pio2+0x2e8>)
 8013948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394c:	f7ec fcb4 	bl	80002b8 <__aeabi_dsub>
 8013950:	4602      	mov	r2, r0
 8013952:	460b      	mov	r3, r1
 8013954:	e9c4 2300 	strd	r2, r3, [r4]
 8013958:	4630      	mov	r0, r6
 801395a:	4639      	mov	r1, r7
 801395c:	f7ec fcac 	bl	80002b8 <__aeabi_dsub>
 8013960:	a39f      	add	r3, pc, #636	; (adr r3, 8013be0 <__ieee754_rem_pio2+0x2e8>)
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	f7ec fca7 	bl	80002b8 <__aeabi_dsub>
 801396a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801396e:	2501      	movs	r5, #1
 8013970:	4628      	mov	r0, r5
 8013972:	b00d      	add	sp, #52	; 0x34
 8013974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013978:	a39b      	add	r3, pc, #620	; (adr r3, 8013be8 <__ieee754_rem_pio2+0x2f0>)
 801397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397e:	f7ec fc9b 	bl	80002b8 <__aeabi_dsub>
 8013982:	a39b      	add	r3, pc, #620	; (adr r3, 8013bf0 <__ieee754_rem_pio2+0x2f8>)
 8013984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013988:	4606      	mov	r6, r0
 801398a:	460f      	mov	r7, r1
 801398c:	f7ec fc94 	bl	80002b8 <__aeabi_dsub>
 8013990:	4602      	mov	r2, r0
 8013992:	460b      	mov	r3, r1
 8013994:	e9c4 2300 	strd	r2, r3, [r4]
 8013998:	4630      	mov	r0, r6
 801399a:	4639      	mov	r1, r7
 801399c:	f7ec fc8c 	bl	80002b8 <__aeabi_dsub>
 80139a0:	a393      	add	r3, pc, #588	; (adr r3, 8013bf0 <__ieee754_rem_pio2+0x2f8>)
 80139a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a6:	e7de      	b.n	8013966 <__ieee754_rem_pio2+0x6e>
 80139a8:	f7ec fc88 	bl	80002bc <__adddf3>
 80139ac:	45a8      	cmp	r8, r5
 80139ae:	4606      	mov	r6, r0
 80139b0:	460f      	mov	r7, r1
 80139b2:	d016      	beq.n	80139e2 <__ieee754_rem_pio2+0xea>
 80139b4:	a38a      	add	r3, pc, #552	; (adr r3, 8013be0 <__ieee754_rem_pio2+0x2e8>)
 80139b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ba:	f7ec fc7f 	bl	80002bc <__adddf3>
 80139be:	4602      	mov	r2, r0
 80139c0:	460b      	mov	r3, r1
 80139c2:	e9c4 2300 	strd	r2, r3, [r4]
 80139c6:	4630      	mov	r0, r6
 80139c8:	4639      	mov	r1, r7
 80139ca:	f7ec fc75 	bl	80002b8 <__aeabi_dsub>
 80139ce:	a384      	add	r3, pc, #528	; (adr r3, 8013be0 <__ieee754_rem_pio2+0x2e8>)
 80139d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d4:	f7ec fc72 	bl	80002bc <__adddf3>
 80139d8:	f04f 35ff 	mov.w	r5, #4294967295
 80139dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80139e0:	e7c6      	b.n	8013970 <__ieee754_rem_pio2+0x78>
 80139e2:	a381      	add	r3, pc, #516	; (adr r3, 8013be8 <__ieee754_rem_pio2+0x2f0>)
 80139e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e8:	f7ec fc68 	bl	80002bc <__adddf3>
 80139ec:	a380      	add	r3, pc, #512	; (adr r3, 8013bf0 <__ieee754_rem_pio2+0x2f8>)
 80139ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f2:	4606      	mov	r6, r0
 80139f4:	460f      	mov	r7, r1
 80139f6:	f7ec fc61 	bl	80002bc <__adddf3>
 80139fa:	4602      	mov	r2, r0
 80139fc:	460b      	mov	r3, r1
 80139fe:	e9c4 2300 	strd	r2, r3, [r4]
 8013a02:	4630      	mov	r0, r6
 8013a04:	4639      	mov	r1, r7
 8013a06:	f7ec fc57 	bl	80002b8 <__aeabi_dsub>
 8013a0a:	a379      	add	r3, pc, #484	; (adr r3, 8013bf0 <__ieee754_rem_pio2+0x2f8>)
 8013a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a10:	e7e0      	b.n	80139d4 <__ieee754_rem_pio2+0xdc>
 8013a12:	4b82      	ldr	r3, [pc, #520]	; (8013c1c <__ieee754_rem_pio2+0x324>)
 8013a14:	4598      	cmp	r8, r3
 8013a16:	f300 80d0 	bgt.w	8013bba <__ieee754_rem_pio2+0x2c2>
 8013a1a:	f000 fe23 	bl	8014664 <fabs>
 8013a1e:	ec57 6b10 	vmov	r6, r7, d0
 8013a22:	ee10 0a10 	vmov	r0, s0
 8013a26:	a374      	add	r3, pc, #464	; (adr r3, 8013bf8 <__ieee754_rem_pio2+0x300>)
 8013a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2c:	4639      	mov	r1, r7
 8013a2e:	f7ec fdfb 	bl	8000628 <__aeabi_dmul>
 8013a32:	2200      	movs	r2, #0
 8013a34:	4b7a      	ldr	r3, [pc, #488]	; (8013c20 <__ieee754_rem_pio2+0x328>)
 8013a36:	f7ec fc41 	bl	80002bc <__adddf3>
 8013a3a:	f7ed f8a5 	bl	8000b88 <__aeabi_d2iz>
 8013a3e:	4605      	mov	r5, r0
 8013a40:	f7ec fd88 	bl	8000554 <__aeabi_i2d>
 8013a44:	a364      	add	r3, pc, #400	; (adr r3, 8013bd8 <__ieee754_rem_pio2+0x2e0>)
 8013a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a4e:	f7ec fdeb 	bl	8000628 <__aeabi_dmul>
 8013a52:	4602      	mov	r2, r0
 8013a54:	460b      	mov	r3, r1
 8013a56:	4630      	mov	r0, r6
 8013a58:	4639      	mov	r1, r7
 8013a5a:	f7ec fc2d 	bl	80002b8 <__aeabi_dsub>
 8013a5e:	a360      	add	r3, pc, #384	; (adr r3, 8013be0 <__ieee754_rem_pio2+0x2e8>)
 8013a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a64:	4682      	mov	sl, r0
 8013a66:	468b      	mov	fp, r1
 8013a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a6c:	f7ec fddc 	bl	8000628 <__aeabi_dmul>
 8013a70:	2d1f      	cmp	r5, #31
 8013a72:	4606      	mov	r6, r0
 8013a74:	460f      	mov	r7, r1
 8013a76:	dc0c      	bgt.n	8013a92 <__ieee754_rem_pio2+0x19a>
 8013a78:	1e6a      	subs	r2, r5, #1
 8013a7a:	4b6a      	ldr	r3, [pc, #424]	; (8013c24 <__ieee754_rem_pio2+0x32c>)
 8013a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a80:	4543      	cmp	r3, r8
 8013a82:	d006      	beq.n	8013a92 <__ieee754_rem_pio2+0x19a>
 8013a84:	4632      	mov	r2, r6
 8013a86:	463b      	mov	r3, r7
 8013a88:	4650      	mov	r0, sl
 8013a8a:	4659      	mov	r1, fp
 8013a8c:	f7ec fc14 	bl	80002b8 <__aeabi_dsub>
 8013a90:	e00e      	b.n	8013ab0 <__ieee754_rem_pio2+0x1b8>
 8013a92:	4632      	mov	r2, r6
 8013a94:	463b      	mov	r3, r7
 8013a96:	4650      	mov	r0, sl
 8013a98:	4659      	mov	r1, fp
 8013a9a:	f7ec fc0d 	bl	80002b8 <__aeabi_dsub>
 8013a9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013aa2:	9305      	str	r3, [sp, #20]
 8013aa4:	9a05      	ldr	r2, [sp, #20]
 8013aa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013aaa:	1ad3      	subs	r3, r2, r3
 8013aac:	2b10      	cmp	r3, #16
 8013aae:	dc02      	bgt.n	8013ab6 <__ieee754_rem_pio2+0x1be>
 8013ab0:	e9c4 0100 	strd	r0, r1, [r4]
 8013ab4:	e039      	b.n	8013b2a <__ieee754_rem_pio2+0x232>
 8013ab6:	a34c      	add	r3, pc, #304	; (adr r3, 8013be8 <__ieee754_rem_pio2+0x2f0>)
 8013ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ac0:	f7ec fdb2 	bl	8000628 <__aeabi_dmul>
 8013ac4:	4606      	mov	r6, r0
 8013ac6:	460f      	mov	r7, r1
 8013ac8:	4602      	mov	r2, r0
 8013aca:	460b      	mov	r3, r1
 8013acc:	4650      	mov	r0, sl
 8013ace:	4659      	mov	r1, fp
 8013ad0:	f7ec fbf2 	bl	80002b8 <__aeabi_dsub>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	4680      	mov	r8, r0
 8013ada:	4689      	mov	r9, r1
 8013adc:	4650      	mov	r0, sl
 8013ade:	4659      	mov	r1, fp
 8013ae0:	f7ec fbea 	bl	80002b8 <__aeabi_dsub>
 8013ae4:	4632      	mov	r2, r6
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	f7ec fbe6 	bl	80002b8 <__aeabi_dsub>
 8013aec:	a340      	add	r3, pc, #256	; (adr r3, 8013bf0 <__ieee754_rem_pio2+0x2f8>)
 8013aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af2:	4606      	mov	r6, r0
 8013af4:	460f      	mov	r7, r1
 8013af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013afa:	f7ec fd95 	bl	8000628 <__aeabi_dmul>
 8013afe:	4632      	mov	r2, r6
 8013b00:	463b      	mov	r3, r7
 8013b02:	f7ec fbd9 	bl	80002b8 <__aeabi_dsub>
 8013b06:	4602      	mov	r2, r0
 8013b08:	460b      	mov	r3, r1
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	460f      	mov	r7, r1
 8013b0e:	4640      	mov	r0, r8
 8013b10:	4649      	mov	r1, r9
 8013b12:	f7ec fbd1 	bl	80002b8 <__aeabi_dsub>
 8013b16:	9a05      	ldr	r2, [sp, #20]
 8013b18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	2b31      	cmp	r3, #49	; 0x31
 8013b20:	dc20      	bgt.n	8013b64 <__ieee754_rem_pio2+0x26c>
 8013b22:	e9c4 0100 	strd	r0, r1, [r4]
 8013b26:	46c2      	mov	sl, r8
 8013b28:	46cb      	mov	fp, r9
 8013b2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013b2e:	4650      	mov	r0, sl
 8013b30:	4642      	mov	r2, r8
 8013b32:	464b      	mov	r3, r9
 8013b34:	4659      	mov	r1, fp
 8013b36:	f7ec fbbf 	bl	80002b8 <__aeabi_dsub>
 8013b3a:	463b      	mov	r3, r7
 8013b3c:	4632      	mov	r2, r6
 8013b3e:	f7ec fbbb 	bl	80002b8 <__aeabi_dsub>
 8013b42:	9b04      	ldr	r3, [sp, #16]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b4a:	f6bf af11 	bge.w	8013970 <__ieee754_rem_pio2+0x78>
 8013b4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013b52:	6063      	str	r3, [r4, #4]
 8013b54:	f8c4 8000 	str.w	r8, [r4]
 8013b58:	60a0      	str	r0, [r4, #8]
 8013b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b5e:	60e3      	str	r3, [r4, #12]
 8013b60:	426d      	negs	r5, r5
 8013b62:	e705      	b.n	8013970 <__ieee754_rem_pio2+0x78>
 8013b64:	a326      	add	r3, pc, #152	; (adr r3, 8013c00 <__ieee754_rem_pio2+0x308>)
 8013b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b6e:	f7ec fd5b 	bl	8000628 <__aeabi_dmul>
 8013b72:	4606      	mov	r6, r0
 8013b74:	460f      	mov	r7, r1
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	4640      	mov	r0, r8
 8013b7c:	4649      	mov	r1, r9
 8013b7e:	f7ec fb9b 	bl	80002b8 <__aeabi_dsub>
 8013b82:	4602      	mov	r2, r0
 8013b84:	460b      	mov	r3, r1
 8013b86:	4682      	mov	sl, r0
 8013b88:	468b      	mov	fp, r1
 8013b8a:	4640      	mov	r0, r8
 8013b8c:	4649      	mov	r1, r9
 8013b8e:	f7ec fb93 	bl	80002b8 <__aeabi_dsub>
 8013b92:	4632      	mov	r2, r6
 8013b94:	463b      	mov	r3, r7
 8013b96:	f7ec fb8f 	bl	80002b8 <__aeabi_dsub>
 8013b9a:	a31b      	add	r3, pc, #108	; (adr r3, 8013c08 <__ieee754_rem_pio2+0x310>)
 8013b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	460f      	mov	r7, r1
 8013ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ba8:	f7ec fd3e 	bl	8000628 <__aeabi_dmul>
 8013bac:	4632      	mov	r2, r6
 8013bae:	463b      	mov	r3, r7
 8013bb0:	f7ec fb82 	bl	80002b8 <__aeabi_dsub>
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	460f      	mov	r7, r1
 8013bb8:	e764      	b.n	8013a84 <__ieee754_rem_pio2+0x18c>
 8013bba:	4b1b      	ldr	r3, [pc, #108]	; (8013c28 <__ieee754_rem_pio2+0x330>)
 8013bbc:	4598      	cmp	r8, r3
 8013bbe:	dd35      	ble.n	8013c2c <__ieee754_rem_pio2+0x334>
 8013bc0:	ee10 2a10 	vmov	r2, s0
 8013bc4:	463b      	mov	r3, r7
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	4639      	mov	r1, r7
 8013bca:	f7ec fb75 	bl	80002b8 <__aeabi_dsub>
 8013bce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013bd2:	e9c4 0100 	strd	r0, r1, [r4]
 8013bd6:	e6a1      	b.n	801391c <__ieee754_rem_pio2+0x24>
 8013bd8:	54400000 	.word	0x54400000
 8013bdc:	3ff921fb 	.word	0x3ff921fb
 8013be0:	1a626331 	.word	0x1a626331
 8013be4:	3dd0b461 	.word	0x3dd0b461
 8013be8:	1a600000 	.word	0x1a600000
 8013bec:	3dd0b461 	.word	0x3dd0b461
 8013bf0:	2e037073 	.word	0x2e037073
 8013bf4:	3ba3198a 	.word	0x3ba3198a
 8013bf8:	6dc9c883 	.word	0x6dc9c883
 8013bfc:	3fe45f30 	.word	0x3fe45f30
 8013c00:	2e000000 	.word	0x2e000000
 8013c04:	3ba3198a 	.word	0x3ba3198a
 8013c08:	252049c1 	.word	0x252049c1
 8013c0c:	397b839a 	.word	0x397b839a
 8013c10:	3fe921fb 	.word	0x3fe921fb
 8013c14:	4002d97b 	.word	0x4002d97b
 8013c18:	3ff921fb 	.word	0x3ff921fb
 8013c1c:	413921fb 	.word	0x413921fb
 8013c20:	3fe00000 	.word	0x3fe00000
 8013c24:	08019308 	.word	0x08019308
 8013c28:	7fefffff 	.word	0x7fefffff
 8013c2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013c30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013c34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013c38:	4630      	mov	r0, r6
 8013c3a:	460f      	mov	r7, r1
 8013c3c:	f7ec ffa4 	bl	8000b88 <__aeabi_d2iz>
 8013c40:	f7ec fc88 	bl	8000554 <__aeabi_i2d>
 8013c44:	4602      	mov	r2, r0
 8013c46:	460b      	mov	r3, r1
 8013c48:	4630      	mov	r0, r6
 8013c4a:	4639      	mov	r1, r7
 8013c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013c50:	f7ec fb32 	bl	80002b8 <__aeabi_dsub>
 8013c54:	2200      	movs	r2, #0
 8013c56:	4b1f      	ldr	r3, [pc, #124]	; (8013cd4 <__ieee754_rem_pio2+0x3dc>)
 8013c58:	f7ec fce6 	bl	8000628 <__aeabi_dmul>
 8013c5c:	460f      	mov	r7, r1
 8013c5e:	4606      	mov	r6, r0
 8013c60:	f7ec ff92 	bl	8000b88 <__aeabi_d2iz>
 8013c64:	f7ec fc76 	bl	8000554 <__aeabi_i2d>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	4639      	mov	r1, r7
 8013c70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c74:	f7ec fb20 	bl	80002b8 <__aeabi_dsub>
 8013c78:	2200      	movs	r2, #0
 8013c7a:	4b16      	ldr	r3, [pc, #88]	; (8013cd4 <__ieee754_rem_pio2+0x3dc>)
 8013c7c:	f7ec fcd4 	bl	8000628 <__aeabi_dmul>
 8013c80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013c84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013c88:	f04f 0803 	mov.w	r8, #3
 8013c8c:	2600      	movs	r6, #0
 8013c8e:	2700      	movs	r7, #0
 8013c90:	4632      	mov	r2, r6
 8013c92:	463b      	mov	r3, r7
 8013c94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8013c9c:	f7ec ff2c 	bl	8000af8 <__aeabi_dcmpeq>
 8013ca0:	b9b0      	cbnz	r0, 8013cd0 <__ieee754_rem_pio2+0x3d8>
 8013ca2:	4b0d      	ldr	r3, [pc, #52]	; (8013cd8 <__ieee754_rem_pio2+0x3e0>)
 8013ca4:	9301      	str	r3, [sp, #4]
 8013ca6:	2302      	movs	r3, #2
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	462a      	mov	r2, r5
 8013cac:	4643      	mov	r3, r8
 8013cae:	4621      	mov	r1, r4
 8013cb0:	a806      	add	r0, sp, #24
 8013cb2:	f000 f8dd 	bl	8013e70 <__kernel_rem_pio2>
 8013cb6:	9b04      	ldr	r3, [sp, #16]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	4605      	mov	r5, r0
 8013cbc:	f6bf ae58 	bge.w	8013970 <__ieee754_rem_pio2+0x78>
 8013cc0:	6863      	ldr	r3, [r4, #4]
 8013cc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013cc6:	6063      	str	r3, [r4, #4]
 8013cc8:	68e3      	ldr	r3, [r4, #12]
 8013cca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013cce:	e746      	b.n	8013b5e <__ieee754_rem_pio2+0x266>
 8013cd0:	46d0      	mov	r8, sl
 8013cd2:	e7dd      	b.n	8013c90 <__ieee754_rem_pio2+0x398>
 8013cd4:	41700000 	.word	0x41700000
 8013cd8:	08019388 	.word	0x08019388
 8013cdc:	00000000 	.word	0x00000000

08013ce0 <__kernel_cos>:
 8013ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce4:	ec59 8b10 	vmov	r8, r9, d0
 8013ce8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013cec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013cf0:	ed2d 8b02 	vpush	{d8}
 8013cf4:	eeb0 8a41 	vmov.f32	s16, s2
 8013cf8:	eef0 8a61 	vmov.f32	s17, s3
 8013cfc:	da07      	bge.n	8013d0e <__kernel_cos+0x2e>
 8013cfe:	ee10 0a10 	vmov	r0, s0
 8013d02:	4649      	mov	r1, r9
 8013d04:	f7ec ff40 	bl	8000b88 <__aeabi_d2iz>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	f000 8089 	beq.w	8013e20 <__kernel_cos+0x140>
 8013d0e:	4642      	mov	r2, r8
 8013d10:	464b      	mov	r3, r9
 8013d12:	4640      	mov	r0, r8
 8013d14:	4649      	mov	r1, r9
 8013d16:	f7ec fc87 	bl	8000628 <__aeabi_dmul>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	4b4e      	ldr	r3, [pc, #312]	; (8013e58 <__kernel_cos+0x178>)
 8013d1e:	4604      	mov	r4, r0
 8013d20:	460d      	mov	r5, r1
 8013d22:	f7ec fc81 	bl	8000628 <__aeabi_dmul>
 8013d26:	a340      	add	r3, pc, #256	; (adr r3, 8013e28 <__kernel_cos+0x148>)
 8013d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2c:	4682      	mov	sl, r0
 8013d2e:	468b      	mov	fp, r1
 8013d30:	4620      	mov	r0, r4
 8013d32:	4629      	mov	r1, r5
 8013d34:	f7ec fc78 	bl	8000628 <__aeabi_dmul>
 8013d38:	a33d      	add	r3, pc, #244	; (adr r3, 8013e30 <__kernel_cos+0x150>)
 8013d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3e:	f7ec fabd 	bl	80002bc <__adddf3>
 8013d42:	4622      	mov	r2, r4
 8013d44:	462b      	mov	r3, r5
 8013d46:	f7ec fc6f 	bl	8000628 <__aeabi_dmul>
 8013d4a:	a33b      	add	r3, pc, #236	; (adr r3, 8013e38 <__kernel_cos+0x158>)
 8013d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d50:	f7ec fab2 	bl	80002b8 <__aeabi_dsub>
 8013d54:	4622      	mov	r2, r4
 8013d56:	462b      	mov	r3, r5
 8013d58:	f7ec fc66 	bl	8000628 <__aeabi_dmul>
 8013d5c:	a338      	add	r3, pc, #224	; (adr r3, 8013e40 <__kernel_cos+0x160>)
 8013d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d62:	f7ec faab 	bl	80002bc <__adddf3>
 8013d66:	4622      	mov	r2, r4
 8013d68:	462b      	mov	r3, r5
 8013d6a:	f7ec fc5d 	bl	8000628 <__aeabi_dmul>
 8013d6e:	a336      	add	r3, pc, #216	; (adr r3, 8013e48 <__kernel_cos+0x168>)
 8013d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d74:	f7ec faa0 	bl	80002b8 <__aeabi_dsub>
 8013d78:	4622      	mov	r2, r4
 8013d7a:	462b      	mov	r3, r5
 8013d7c:	f7ec fc54 	bl	8000628 <__aeabi_dmul>
 8013d80:	a333      	add	r3, pc, #204	; (adr r3, 8013e50 <__kernel_cos+0x170>)
 8013d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d86:	f7ec fa99 	bl	80002bc <__adddf3>
 8013d8a:	4622      	mov	r2, r4
 8013d8c:	462b      	mov	r3, r5
 8013d8e:	f7ec fc4b 	bl	8000628 <__aeabi_dmul>
 8013d92:	4622      	mov	r2, r4
 8013d94:	462b      	mov	r3, r5
 8013d96:	f7ec fc47 	bl	8000628 <__aeabi_dmul>
 8013d9a:	ec53 2b18 	vmov	r2, r3, d8
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	4640      	mov	r0, r8
 8013da4:	4649      	mov	r1, r9
 8013da6:	f7ec fc3f 	bl	8000628 <__aeabi_dmul>
 8013daa:	460b      	mov	r3, r1
 8013dac:	4602      	mov	r2, r0
 8013dae:	4629      	mov	r1, r5
 8013db0:	4620      	mov	r0, r4
 8013db2:	f7ec fa81 	bl	80002b8 <__aeabi_dsub>
 8013db6:	4b29      	ldr	r3, [pc, #164]	; (8013e5c <__kernel_cos+0x17c>)
 8013db8:	429e      	cmp	r6, r3
 8013dba:	4680      	mov	r8, r0
 8013dbc:	4689      	mov	r9, r1
 8013dbe:	dc11      	bgt.n	8013de4 <__kernel_cos+0x104>
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	4650      	mov	r0, sl
 8013dc6:	4659      	mov	r1, fp
 8013dc8:	f7ec fa76 	bl	80002b8 <__aeabi_dsub>
 8013dcc:	460b      	mov	r3, r1
 8013dce:	4924      	ldr	r1, [pc, #144]	; (8013e60 <__kernel_cos+0x180>)
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	f7ec fa70 	bl	80002b8 <__aeabi_dsub>
 8013dd8:	ecbd 8b02 	vpop	{d8}
 8013ddc:	ec41 0b10 	vmov	d0, r0, r1
 8013de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de4:	4b1f      	ldr	r3, [pc, #124]	; (8013e64 <__kernel_cos+0x184>)
 8013de6:	491e      	ldr	r1, [pc, #120]	; (8013e60 <__kernel_cos+0x180>)
 8013de8:	429e      	cmp	r6, r3
 8013dea:	bfcc      	ite	gt
 8013dec:	4d1e      	ldrgt	r5, [pc, #120]	; (8013e68 <__kernel_cos+0x188>)
 8013dee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013df2:	2400      	movs	r4, #0
 8013df4:	4622      	mov	r2, r4
 8013df6:	462b      	mov	r3, r5
 8013df8:	2000      	movs	r0, #0
 8013dfa:	f7ec fa5d 	bl	80002b8 <__aeabi_dsub>
 8013dfe:	4622      	mov	r2, r4
 8013e00:	4606      	mov	r6, r0
 8013e02:	460f      	mov	r7, r1
 8013e04:	462b      	mov	r3, r5
 8013e06:	4650      	mov	r0, sl
 8013e08:	4659      	mov	r1, fp
 8013e0a:	f7ec fa55 	bl	80002b8 <__aeabi_dsub>
 8013e0e:	4642      	mov	r2, r8
 8013e10:	464b      	mov	r3, r9
 8013e12:	f7ec fa51 	bl	80002b8 <__aeabi_dsub>
 8013e16:	4602      	mov	r2, r0
 8013e18:	460b      	mov	r3, r1
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	4639      	mov	r1, r7
 8013e1e:	e7d9      	b.n	8013dd4 <__kernel_cos+0xf4>
 8013e20:	2000      	movs	r0, #0
 8013e22:	490f      	ldr	r1, [pc, #60]	; (8013e60 <__kernel_cos+0x180>)
 8013e24:	e7d8      	b.n	8013dd8 <__kernel_cos+0xf8>
 8013e26:	bf00      	nop
 8013e28:	be8838d4 	.word	0xbe8838d4
 8013e2c:	bda8fae9 	.word	0xbda8fae9
 8013e30:	bdb4b1c4 	.word	0xbdb4b1c4
 8013e34:	3e21ee9e 	.word	0x3e21ee9e
 8013e38:	809c52ad 	.word	0x809c52ad
 8013e3c:	3e927e4f 	.word	0x3e927e4f
 8013e40:	19cb1590 	.word	0x19cb1590
 8013e44:	3efa01a0 	.word	0x3efa01a0
 8013e48:	16c15177 	.word	0x16c15177
 8013e4c:	3f56c16c 	.word	0x3f56c16c
 8013e50:	5555554c 	.word	0x5555554c
 8013e54:	3fa55555 	.word	0x3fa55555
 8013e58:	3fe00000 	.word	0x3fe00000
 8013e5c:	3fd33332 	.word	0x3fd33332
 8013e60:	3ff00000 	.word	0x3ff00000
 8013e64:	3fe90000 	.word	0x3fe90000
 8013e68:	3fd20000 	.word	0x3fd20000
 8013e6c:	00000000 	.word	0x00000000

08013e70 <__kernel_rem_pio2>:
 8013e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e74:	ed2d 8b02 	vpush	{d8}
 8013e78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013e7c:	1ed4      	subs	r4, r2, #3
 8013e7e:	9308      	str	r3, [sp, #32]
 8013e80:	9101      	str	r1, [sp, #4]
 8013e82:	4bc5      	ldr	r3, [pc, #788]	; (8014198 <__kernel_rem_pio2+0x328>)
 8013e84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013e86:	9009      	str	r0, [sp, #36]	; 0x24
 8013e88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e8c:	9304      	str	r3, [sp, #16]
 8013e8e:	9b08      	ldr	r3, [sp, #32]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	9307      	str	r3, [sp, #28]
 8013e94:	2318      	movs	r3, #24
 8013e96:	fb94 f4f3 	sdiv	r4, r4, r3
 8013e9a:	f06f 0317 	mvn.w	r3, #23
 8013e9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013ea2:	fb04 3303 	mla	r3, r4, r3, r3
 8013ea6:	eb03 0a02 	add.w	sl, r3, r2
 8013eaa:	9b04      	ldr	r3, [sp, #16]
 8013eac:	9a07      	ldr	r2, [sp, #28]
 8013eae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014188 <__kernel_rem_pio2+0x318>
 8013eb2:	eb03 0802 	add.w	r8, r3, r2
 8013eb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013eb8:	1aa7      	subs	r7, r4, r2
 8013eba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013ebe:	ae22      	add	r6, sp, #136	; 0x88
 8013ec0:	2500      	movs	r5, #0
 8013ec2:	4545      	cmp	r5, r8
 8013ec4:	dd13      	ble.n	8013eee <__kernel_rem_pio2+0x7e>
 8013ec6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014188 <__kernel_rem_pio2+0x318>
 8013eca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013ece:	2600      	movs	r6, #0
 8013ed0:	9b04      	ldr	r3, [sp, #16]
 8013ed2:	429e      	cmp	r6, r3
 8013ed4:	dc32      	bgt.n	8013f3c <__kernel_rem_pio2+0xcc>
 8013ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ed8:	9302      	str	r3, [sp, #8]
 8013eda:	9b08      	ldr	r3, [sp, #32]
 8013edc:	199d      	adds	r5, r3, r6
 8013ede:	ab22      	add	r3, sp, #136	; 0x88
 8013ee0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013ee4:	9306      	str	r3, [sp, #24]
 8013ee6:	ec59 8b18 	vmov	r8, r9, d8
 8013eea:	2700      	movs	r7, #0
 8013eec:	e01f      	b.n	8013f2e <__kernel_rem_pio2+0xbe>
 8013eee:	42ef      	cmn	r7, r5
 8013ef0:	d407      	bmi.n	8013f02 <__kernel_rem_pio2+0x92>
 8013ef2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013ef6:	f7ec fb2d 	bl	8000554 <__aeabi_i2d>
 8013efa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013efe:	3501      	adds	r5, #1
 8013f00:	e7df      	b.n	8013ec2 <__kernel_rem_pio2+0x52>
 8013f02:	ec51 0b18 	vmov	r0, r1, d8
 8013f06:	e7f8      	b.n	8013efa <__kernel_rem_pio2+0x8a>
 8013f08:	9906      	ldr	r1, [sp, #24]
 8013f0a:	9d02      	ldr	r5, [sp, #8]
 8013f0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013f10:	9106      	str	r1, [sp, #24]
 8013f12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013f16:	9502      	str	r5, [sp, #8]
 8013f18:	f7ec fb86 	bl	8000628 <__aeabi_dmul>
 8013f1c:	4602      	mov	r2, r0
 8013f1e:	460b      	mov	r3, r1
 8013f20:	4640      	mov	r0, r8
 8013f22:	4649      	mov	r1, r9
 8013f24:	f7ec f9ca 	bl	80002bc <__adddf3>
 8013f28:	3701      	adds	r7, #1
 8013f2a:	4680      	mov	r8, r0
 8013f2c:	4689      	mov	r9, r1
 8013f2e:	9b07      	ldr	r3, [sp, #28]
 8013f30:	429f      	cmp	r7, r3
 8013f32:	dde9      	ble.n	8013f08 <__kernel_rem_pio2+0x98>
 8013f34:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013f38:	3601      	adds	r6, #1
 8013f3a:	e7c9      	b.n	8013ed0 <__kernel_rem_pio2+0x60>
 8013f3c:	9b04      	ldr	r3, [sp, #16]
 8013f3e:	aa0e      	add	r2, sp, #56	; 0x38
 8013f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f44:	930c      	str	r3, [sp, #48]	; 0x30
 8013f46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013f48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013f4c:	9c04      	ldr	r4, [sp, #16]
 8013f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f50:	ab9a      	add	r3, sp, #616	; 0x268
 8013f52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013f56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013f5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013f62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013f66:	ab9a      	add	r3, sp, #616	; 0x268
 8013f68:	445b      	add	r3, fp
 8013f6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013f6e:	2500      	movs	r5, #0
 8013f70:	1b63      	subs	r3, r4, r5
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	dc78      	bgt.n	8014068 <__kernel_rem_pio2+0x1f8>
 8013f76:	4650      	mov	r0, sl
 8013f78:	ec49 8b10 	vmov	d0, r8, r9
 8013f7c:	f000 fc00 	bl	8014780 <scalbn>
 8013f80:	ec57 6b10 	vmov	r6, r7, d0
 8013f84:	2200      	movs	r2, #0
 8013f86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013f8a:	ee10 0a10 	vmov	r0, s0
 8013f8e:	4639      	mov	r1, r7
 8013f90:	f7ec fb4a 	bl	8000628 <__aeabi_dmul>
 8013f94:	ec41 0b10 	vmov	d0, r0, r1
 8013f98:	f000 fb6e 	bl	8014678 <floor>
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	ec51 0b10 	vmov	r0, r1, d0
 8013fa2:	4b7e      	ldr	r3, [pc, #504]	; (801419c <__kernel_rem_pio2+0x32c>)
 8013fa4:	f7ec fb40 	bl	8000628 <__aeabi_dmul>
 8013fa8:	4602      	mov	r2, r0
 8013faa:	460b      	mov	r3, r1
 8013fac:	4630      	mov	r0, r6
 8013fae:	4639      	mov	r1, r7
 8013fb0:	f7ec f982 	bl	80002b8 <__aeabi_dsub>
 8013fb4:	460f      	mov	r7, r1
 8013fb6:	4606      	mov	r6, r0
 8013fb8:	f7ec fde6 	bl	8000b88 <__aeabi_d2iz>
 8013fbc:	9006      	str	r0, [sp, #24]
 8013fbe:	f7ec fac9 	bl	8000554 <__aeabi_i2d>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	4639      	mov	r1, r7
 8013fca:	f7ec f975 	bl	80002b8 <__aeabi_dsub>
 8013fce:	f1ba 0f00 	cmp.w	sl, #0
 8013fd2:	4606      	mov	r6, r0
 8013fd4:	460f      	mov	r7, r1
 8013fd6:	dd6c      	ble.n	80140b2 <__kernel_rem_pio2+0x242>
 8013fd8:	1e62      	subs	r2, r4, #1
 8013fda:	ab0e      	add	r3, sp, #56	; 0x38
 8013fdc:	f1ca 0118 	rsb	r1, sl, #24
 8013fe0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013fe4:	9d06      	ldr	r5, [sp, #24]
 8013fe6:	fa40 f301 	asr.w	r3, r0, r1
 8013fea:	441d      	add	r5, r3
 8013fec:	408b      	lsls	r3, r1
 8013fee:	1ac0      	subs	r0, r0, r3
 8013ff0:	ab0e      	add	r3, sp, #56	; 0x38
 8013ff2:	9506      	str	r5, [sp, #24]
 8013ff4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013ff8:	f1ca 0317 	rsb	r3, sl, #23
 8013ffc:	fa40 f303 	asr.w	r3, r0, r3
 8014000:	9302      	str	r3, [sp, #8]
 8014002:	9b02      	ldr	r3, [sp, #8]
 8014004:	2b00      	cmp	r3, #0
 8014006:	dd62      	ble.n	80140ce <__kernel_rem_pio2+0x25e>
 8014008:	9b06      	ldr	r3, [sp, #24]
 801400a:	2200      	movs	r2, #0
 801400c:	3301      	adds	r3, #1
 801400e:	9306      	str	r3, [sp, #24]
 8014010:	4615      	mov	r5, r2
 8014012:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014016:	4294      	cmp	r4, r2
 8014018:	f300 8095 	bgt.w	8014146 <__kernel_rem_pio2+0x2d6>
 801401c:	f1ba 0f00 	cmp.w	sl, #0
 8014020:	dd07      	ble.n	8014032 <__kernel_rem_pio2+0x1c2>
 8014022:	f1ba 0f01 	cmp.w	sl, #1
 8014026:	f000 80a2 	beq.w	801416e <__kernel_rem_pio2+0x2fe>
 801402a:	f1ba 0f02 	cmp.w	sl, #2
 801402e:	f000 80c1 	beq.w	80141b4 <__kernel_rem_pio2+0x344>
 8014032:	9b02      	ldr	r3, [sp, #8]
 8014034:	2b02      	cmp	r3, #2
 8014036:	d14a      	bne.n	80140ce <__kernel_rem_pio2+0x25e>
 8014038:	4632      	mov	r2, r6
 801403a:	463b      	mov	r3, r7
 801403c:	2000      	movs	r0, #0
 801403e:	4958      	ldr	r1, [pc, #352]	; (80141a0 <__kernel_rem_pio2+0x330>)
 8014040:	f7ec f93a 	bl	80002b8 <__aeabi_dsub>
 8014044:	4606      	mov	r6, r0
 8014046:	460f      	mov	r7, r1
 8014048:	2d00      	cmp	r5, #0
 801404a:	d040      	beq.n	80140ce <__kernel_rem_pio2+0x25e>
 801404c:	4650      	mov	r0, sl
 801404e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014190 <__kernel_rem_pio2+0x320>
 8014052:	f000 fb95 	bl	8014780 <scalbn>
 8014056:	4630      	mov	r0, r6
 8014058:	4639      	mov	r1, r7
 801405a:	ec53 2b10 	vmov	r2, r3, d0
 801405e:	f7ec f92b 	bl	80002b8 <__aeabi_dsub>
 8014062:	4606      	mov	r6, r0
 8014064:	460f      	mov	r7, r1
 8014066:	e032      	b.n	80140ce <__kernel_rem_pio2+0x25e>
 8014068:	2200      	movs	r2, #0
 801406a:	4b4e      	ldr	r3, [pc, #312]	; (80141a4 <__kernel_rem_pio2+0x334>)
 801406c:	4640      	mov	r0, r8
 801406e:	4649      	mov	r1, r9
 8014070:	f7ec fada 	bl	8000628 <__aeabi_dmul>
 8014074:	f7ec fd88 	bl	8000b88 <__aeabi_d2iz>
 8014078:	f7ec fa6c 	bl	8000554 <__aeabi_i2d>
 801407c:	2200      	movs	r2, #0
 801407e:	4b4a      	ldr	r3, [pc, #296]	; (80141a8 <__kernel_rem_pio2+0x338>)
 8014080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014084:	f7ec fad0 	bl	8000628 <__aeabi_dmul>
 8014088:	4602      	mov	r2, r0
 801408a:	460b      	mov	r3, r1
 801408c:	4640      	mov	r0, r8
 801408e:	4649      	mov	r1, r9
 8014090:	f7ec f912 	bl	80002b8 <__aeabi_dsub>
 8014094:	f7ec fd78 	bl	8000b88 <__aeabi_d2iz>
 8014098:	ab0e      	add	r3, sp, #56	; 0x38
 801409a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801409e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80140a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140a6:	f7ec f909 	bl	80002bc <__adddf3>
 80140aa:	3501      	adds	r5, #1
 80140ac:	4680      	mov	r8, r0
 80140ae:	4689      	mov	r9, r1
 80140b0:	e75e      	b.n	8013f70 <__kernel_rem_pio2+0x100>
 80140b2:	d105      	bne.n	80140c0 <__kernel_rem_pio2+0x250>
 80140b4:	1e63      	subs	r3, r4, #1
 80140b6:	aa0e      	add	r2, sp, #56	; 0x38
 80140b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80140bc:	15c3      	asrs	r3, r0, #23
 80140be:	e79f      	b.n	8014000 <__kernel_rem_pio2+0x190>
 80140c0:	2200      	movs	r2, #0
 80140c2:	4b3a      	ldr	r3, [pc, #232]	; (80141ac <__kernel_rem_pio2+0x33c>)
 80140c4:	f7ec fd36 	bl	8000b34 <__aeabi_dcmpge>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d139      	bne.n	8014140 <__kernel_rem_pio2+0x2d0>
 80140cc:	9002      	str	r0, [sp, #8]
 80140ce:	2200      	movs	r2, #0
 80140d0:	2300      	movs	r3, #0
 80140d2:	4630      	mov	r0, r6
 80140d4:	4639      	mov	r1, r7
 80140d6:	f7ec fd0f 	bl	8000af8 <__aeabi_dcmpeq>
 80140da:	2800      	cmp	r0, #0
 80140dc:	f000 80c7 	beq.w	801426e <__kernel_rem_pio2+0x3fe>
 80140e0:	1e65      	subs	r5, r4, #1
 80140e2:	462b      	mov	r3, r5
 80140e4:	2200      	movs	r2, #0
 80140e6:	9904      	ldr	r1, [sp, #16]
 80140e8:	428b      	cmp	r3, r1
 80140ea:	da6a      	bge.n	80141c2 <__kernel_rem_pio2+0x352>
 80140ec:	2a00      	cmp	r2, #0
 80140ee:	f000 8088 	beq.w	8014202 <__kernel_rem_pio2+0x392>
 80140f2:	ab0e      	add	r3, sp, #56	; 0x38
 80140f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80140f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f000 80b4 	beq.w	801426a <__kernel_rem_pio2+0x3fa>
 8014102:	4650      	mov	r0, sl
 8014104:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014190 <__kernel_rem_pio2+0x320>
 8014108:	f000 fb3a 	bl	8014780 <scalbn>
 801410c:	00ec      	lsls	r4, r5, #3
 801410e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014110:	191e      	adds	r6, r3, r4
 8014112:	ec59 8b10 	vmov	r8, r9, d0
 8014116:	f106 0a08 	add.w	sl, r6, #8
 801411a:	462f      	mov	r7, r5
 801411c:	2f00      	cmp	r7, #0
 801411e:	f280 80df 	bge.w	80142e0 <__kernel_rem_pio2+0x470>
 8014122:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014188 <__kernel_rem_pio2+0x318>
 8014126:	f04f 0a00 	mov.w	sl, #0
 801412a:	eba5 030a 	sub.w	r3, r5, sl
 801412e:	2b00      	cmp	r3, #0
 8014130:	f2c0 810a 	blt.w	8014348 <__kernel_rem_pio2+0x4d8>
 8014134:	f8df b078 	ldr.w	fp, [pc, #120]	; 80141b0 <__kernel_rem_pio2+0x340>
 8014138:	ec59 8b18 	vmov	r8, r9, d8
 801413c:	2700      	movs	r7, #0
 801413e:	e0f5      	b.n	801432c <__kernel_rem_pio2+0x4bc>
 8014140:	2302      	movs	r3, #2
 8014142:	9302      	str	r3, [sp, #8]
 8014144:	e760      	b.n	8014008 <__kernel_rem_pio2+0x198>
 8014146:	ab0e      	add	r3, sp, #56	; 0x38
 8014148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801414c:	b94d      	cbnz	r5, 8014162 <__kernel_rem_pio2+0x2f2>
 801414e:	b12b      	cbz	r3, 801415c <__kernel_rem_pio2+0x2ec>
 8014150:	a80e      	add	r0, sp, #56	; 0x38
 8014152:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014156:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801415a:	2301      	movs	r3, #1
 801415c:	3201      	adds	r2, #1
 801415e:	461d      	mov	r5, r3
 8014160:	e759      	b.n	8014016 <__kernel_rem_pio2+0x1a6>
 8014162:	a80e      	add	r0, sp, #56	; 0x38
 8014164:	1acb      	subs	r3, r1, r3
 8014166:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801416a:	462b      	mov	r3, r5
 801416c:	e7f6      	b.n	801415c <__kernel_rem_pio2+0x2ec>
 801416e:	1e62      	subs	r2, r4, #1
 8014170:	ab0e      	add	r3, sp, #56	; 0x38
 8014172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014176:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801417a:	a90e      	add	r1, sp, #56	; 0x38
 801417c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014180:	e757      	b.n	8014032 <__kernel_rem_pio2+0x1c2>
 8014182:	bf00      	nop
 8014184:	f3af 8000 	nop.w
	...
 8014194:	3ff00000 	.word	0x3ff00000
 8014198:	080194d0 	.word	0x080194d0
 801419c:	40200000 	.word	0x40200000
 80141a0:	3ff00000 	.word	0x3ff00000
 80141a4:	3e700000 	.word	0x3e700000
 80141a8:	41700000 	.word	0x41700000
 80141ac:	3fe00000 	.word	0x3fe00000
 80141b0:	08019490 	.word	0x08019490
 80141b4:	1e62      	subs	r2, r4, #1
 80141b6:	ab0e      	add	r3, sp, #56	; 0x38
 80141b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80141c0:	e7db      	b.n	801417a <__kernel_rem_pio2+0x30a>
 80141c2:	a90e      	add	r1, sp, #56	; 0x38
 80141c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80141c8:	3b01      	subs	r3, #1
 80141ca:	430a      	orrs	r2, r1
 80141cc:	e78b      	b.n	80140e6 <__kernel_rem_pio2+0x276>
 80141ce:	3301      	adds	r3, #1
 80141d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80141d4:	2900      	cmp	r1, #0
 80141d6:	d0fa      	beq.n	80141ce <__kernel_rem_pio2+0x35e>
 80141d8:	9a08      	ldr	r2, [sp, #32]
 80141da:	4422      	add	r2, r4
 80141dc:	00d2      	lsls	r2, r2, #3
 80141de:	a922      	add	r1, sp, #136	; 0x88
 80141e0:	18e3      	adds	r3, r4, r3
 80141e2:	9206      	str	r2, [sp, #24]
 80141e4:	440a      	add	r2, r1
 80141e6:	9302      	str	r3, [sp, #8]
 80141e8:	f10b 0108 	add.w	r1, fp, #8
 80141ec:	f102 0308 	add.w	r3, r2, #8
 80141f0:	1c66      	adds	r6, r4, #1
 80141f2:	910a      	str	r1, [sp, #40]	; 0x28
 80141f4:	2500      	movs	r5, #0
 80141f6:	930d      	str	r3, [sp, #52]	; 0x34
 80141f8:	9b02      	ldr	r3, [sp, #8]
 80141fa:	42b3      	cmp	r3, r6
 80141fc:	da04      	bge.n	8014208 <__kernel_rem_pio2+0x398>
 80141fe:	461c      	mov	r4, r3
 8014200:	e6a6      	b.n	8013f50 <__kernel_rem_pio2+0xe0>
 8014202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014204:	2301      	movs	r3, #1
 8014206:	e7e3      	b.n	80141d0 <__kernel_rem_pio2+0x360>
 8014208:	9b06      	ldr	r3, [sp, #24]
 801420a:	18ef      	adds	r7, r5, r3
 801420c:	ab22      	add	r3, sp, #136	; 0x88
 801420e:	441f      	add	r7, r3
 8014210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014212:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014216:	f7ec f99d 	bl	8000554 <__aeabi_i2d>
 801421a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801421c:	461c      	mov	r4, r3
 801421e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014220:	e9c7 0100 	strd	r0, r1, [r7]
 8014224:	eb03 0b05 	add.w	fp, r3, r5
 8014228:	2700      	movs	r7, #0
 801422a:	f04f 0800 	mov.w	r8, #0
 801422e:	f04f 0900 	mov.w	r9, #0
 8014232:	9b07      	ldr	r3, [sp, #28]
 8014234:	429f      	cmp	r7, r3
 8014236:	dd08      	ble.n	801424a <__kernel_rem_pio2+0x3da>
 8014238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801423a:	aa72      	add	r2, sp, #456	; 0x1c8
 801423c:	18eb      	adds	r3, r5, r3
 801423e:	4413      	add	r3, r2
 8014240:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014244:	3601      	adds	r6, #1
 8014246:	3508      	adds	r5, #8
 8014248:	e7d6      	b.n	80141f8 <__kernel_rem_pio2+0x388>
 801424a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801424e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014252:	f7ec f9e9 	bl	8000628 <__aeabi_dmul>
 8014256:	4602      	mov	r2, r0
 8014258:	460b      	mov	r3, r1
 801425a:	4640      	mov	r0, r8
 801425c:	4649      	mov	r1, r9
 801425e:	f7ec f82d 	bl	80002bc <__adddf3>
 8014262:	3701      	adds	r7, #1
 8014264:	4680      	mov	r8, r0
 8014266:	4689      	mov	r9, r1
 8014268:	e7e3      	b.n	8014232 <__kernel_rem_pio2+0x3c2>
 801426a:	3d01      	subs	r5, #1
 801426c:	e741      	b.n	80140f2 <__kernel_rem_pio2+0x282>
 801426e:	f1ca 0000 	rsb	r0, sl, #0
 8014272:	ec47 6b10 	vmov	d0, r6, r7
 8014276:	f000 fa83 	bl	8014780 <scalbn>
 801427a:	ec57 6b10 	vmov	r6, r7, d0
 801427e:	2200      	movs	r2, #0
 8014280:	4b99      	ldr	r3, [pc, #612]	; (80144e8 <__kernel_rem_pio2+0x678>)
 8014282:	ee10 0a10 	vmov	r0, s0
 8014286:	4639      	mov	r1, r7
 8014288:	f7ec fc54 	bl	8000b34 <__aeabi_dcmpge>
 801428c:	b1f8      	cbz	r0, 80142ce <__kernel_rem_pio2+0x45e>
 801428e:	2200      	movs	r2, #0
 8014290:	4b96      	ldr	r3, [pc, #600]	; (80144ec <__kernel_rem_pio2+0x67c>)
 8014292:	4630      	mov	r0, r6
 8014294:	4639      	mov	r1, r7
 8014296:	f7ec f9c7 	bl	8000628 <__aeabi_dmul>
 801429a:	f7ec fc75 	bl	8000b88 <__aeabi_d2iz>
 801429e:	4680      	mov	r8, r0
 80142a0:	f7ec f958 	bl	8000554 <__aeabi_i2d>
 80142a4:	2200      	movs	r2, #0
 80142a6:	4b90      	ldr	r3, [pc, #576]	; (80144e8 <__kernel_rem_pio2+0x678>)
 80142a8:	f7ec f9be 	bl	8000628 <__aeabi_dmul>
 80142ac:	460b      	mov	r3, r1
 80142ae:	4602      	mov	r2, r0
 80142b0:	4639      	mov	r1, r7
 80142b2:	4630      	mov	r0, r6
 80142b4:	f7ec f800 	bl	80002b8 <__aeabi_dsub>
 80142b8:	f7ec fc66 	bl	8000b88 <__aeabi_d2iz>
 80142bc:	1c65      	adds	r5, r4, #1
 80142be:	ab0e      	add	r3, sp, #56	; 0x38
 80142c0:	f10a 0a18 	add.w	sl, sl, #24
 80142c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80142c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80142cc:	e719      	b.n	8014102 <__kernel_rem_pio2+0x292>
 80142ce:	4630      	mov	r0, r6
 80142d0:	4639      	mov	r1, r7
 80142d2:	f7ec fc59 	bl	8000b88 <__aeabi_d2iz>
 80142d6:	ab0e      	add	r3, sp, #56	; 0x38
 80142d8:	4625      	mov	r5, r4
 80142da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80142de:	e710      	b.n	8014102 <__kernel_rem_pio2+0x292>
 80142e0:	ab0e      	add	r3, sp, #56	; 0x38
 80142e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80142e6:	f7ec f935 	bl	8000554 <__aeabi_i2d>
 80142ea:	4642      	mov	r2, r8
 80142ec:	464b      	mov	r3, r9
 80142ee:	f7ec f99b 	bl	8000628 <__aeabi_dmul>
 80142f2:	2200      	movs	r2, #0
 80142f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80142f8:	4b7c      	ldr	r3, [pc, #496]	; (80144ec <__kernel_rem_pio2+0x67c>)
 80142fa:	4640      	mov	r0, r8
 80142fc:	4649      	mov	r1, r9
 80142fe:	f7ec f993 	bl	8000628 <__aeabi_dmul>
 8014302:	3f01      	subs	r7, #1
 8014304:	4680      	mov	r8, r0
 8014306:	4689      	mov	r9, r1
 8014308:	e708      	b.n	801411c <__kernel_rem_pio2+0x2ac>
 801430a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014312:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014316:	f7ec f987 	bl	8000628 <__aeabi_dmul>
 801431a:	4602      	mov	r2, r0
 801431c:	460b      	mov	r3, r1
 801431e:	4640      	mov	r0, r8
 8014320:	4649      	mov	r1, r9
 8014322:	f7eb ffcb 	bl	80002bc <__adddf3>
 8014326:	3701      	adds	r7, #1
 8014328:	4680      	mov	r8, r0
 801432a:	4689      	mov	r9, r1
 801432c:	9b04      	ldr	r3, [sp, #16]
 801432e:	429f      	cmp	r7, r3
 8014330:	dc01      	bgt.n	8014336 <__kernel_rem_pio2+0x4c6>
 8014332:	45ba      	cmp	sl, r7
 8014334:	dae9      	bge.n	801430a <__kernel_rem_pio2+0x49a>
 8014336:	ab4a      	add	r3, sp, #296	; 0x128
 8014338:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801433c:	e9c3 8900 	strd	r8, r9, [r3]
 8014340:	f10a 0a01 	add.w	sl, sl, #1
 8014344:	3e08      	subs	r6, #8
 8014346:	e6f0      	b.n	801412a <__kernel_rem_pio2+0x2ba>
 8014348:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801434a:	2b03      	cmp	r3, #3
 801434c:	d85b      	bhi.n	8014406 <__kernel_rem_pio2+0x596>
 801434e:	e8df f003 	tbb	[pc, r3]
 8014352:	264a      	.short	0x264a
 8014354:	0226      	.short	0x0226
 8014356:	ab9a      	add	r3, sp, #616	; 0x268
 8014358:	441c      	add	r4, r3
 801435a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801435e:	46a2      	mov	sl, r4
 8014360:	46ab      	mov	fp, r5
 8014362:	f1bb 0f00 	cmp.w	fp, #0
 8014366:	dc6c      	bgt.n	8014442 <__kernel_rem_pio2+0x5d2>
 8014368:	46a2      	mov	sl, r4
 801436a:	46ab      	mov	fp, r5
 801436c:	f1bb 0f01 	cmp.w	fp, #1
 8014370:	f300 8086 	bgt.w	8014480 <__kernel_rem_pio2+0x610>
 8014374:	2000      	movs	r0, #0
 8014376:	2100      	movs	r1, #0
 8014378:	2d01      	cmp	r5, #1
 801437a:	f300 80a0 	bgt.w	80144be <__kernel_rem_pio2+0x64e>
 801437e:	9b02      	ldr	r3, [sp, #8]
 8014380:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014384:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014388:	2b00      	cmp	r3, #0
 801438a:	f040 809e 	bne.w	80144ca <__kernel_rem_pio2+0x65a>
 801438e:	9b01      	ldr	r3, [sp, #4]
 8014390:	e9c3 7800 	strd	r7, r8, [r3]
 8014394:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014398:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801439c:	e033      	b.n	8014406 <__kernel_rem_pio2+0x596>
 801439e:	3408      	adds	r4, #8
 80143a0:	ab4a      	add	r3, sp, #296	; 0x128
 80143a2:	441c      	add	r4, r3
 80143a4:	462e      	mov	r6, r5
 80143a6:	2000      	movs	r0, #0
 80143a8:	2100      	movs	r1, #0
 80143aa:	2e00      	cmp	r6, #0
 80143ac:	da3a      	bge.n	8014424 <__kernel_rem_pio2+0x5b4>
 80143ae:	9b02      	ldr	r3, [sp, #8]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d03d      	beq.n	8014430 <__kernel_rem_pio2+0x5c0>
 80143b4:	4602      	mov	r2, r0
 80143b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143ba:	9c01      	ldr	r4, [sp, #4]
 80143bc:	e9c4 2300 	strd	r2, r3, [r4]
 80143c0:	4602      	mov	r2, r0
 80143c2:	460b      	mov	r3, r1
 80143c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80143c8:	f7eb ff76 	bl	80002b8 <__aeabi_dsub>
 80143cc:	ae4c      	add	r6, sp, #304	; 0x130
 80143ce:	2401      	movs	r4, #1
 80143d0:	42a5      	cmp	r5, r4
 80143d2:	da30      	bge.n	8014436 <__kernel_rem_pio2+0x5c6>
 80143d4:	9b02      	ldr	r3, [sp, #8]
 80143d6:	b113      	cbz	r3, 80143de <__kernel_rem_pio2+0x56e>
 80143d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143dc:	4619      	mov	r1, r3
 80143de:	9b01      	ldr	r3, [sp, #4]
 80143e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80143e4:	e00f      	b.n	8014406 <__kernel_rem_pio2+0x596>
 80143e6:	ab9a      	add	r3, sp, #616	; 0x268
 80143e8:	441c      	add	r4, r3
 80143ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80143ee:	2000      	movs	r0, #0
 80143f0:	2100      	movs	r1, #0
 80143f2:	2d00      	cmp	r5, #0
 80143f4:	da10      	bge.n	8014418 <__kernel_rem_pio2+0x5a8>
 80143f6:	9b02      	ldr	r3, [sp, #8]
 80143f8:	b113      	cbz	r3, 8014400 <__kernel_rem_pio2+0x590>
 80143fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143fe:	4619      	mov	r1, r3
 8014400:	9b01      	ldr	r3, [sp, #4]
 8014402:	e9c3 0100 	strd	r0, r1, [r3]
 8014406:	9b06      	ldr	r3, [sp, #24]
 8014408:	f003 0007 	and.w	r0, r3, #7
 801440c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014410:	ecbd 8b02 	vpop	{d8}
 8014414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014418:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801441c:	f7eb ff4e 	bl	80002bc <__adddf3>
 8014420:	3d01      	subs	r5, #1
 8014422:	e7e6      	b.n	80143f2 <__kernel_rem_pio2+0x582>
 8014424:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014428:	f7eb ff48 	bl	80002bc <__adddf3>
 801442c:	3e01      	subs	r6, #1
 801442e:	e7bc      	b.n	80143aa <__kernel_rem_pio2+0x53a>
 8014430:	4602      	mov	r2, r0
 8014432:	460b      	mov	r3, r1
 8014434:	e7c1      	b.n	80143ba <__kernel_rem_pio2+0x54a>
 8014436:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801443a:	f7eb ff3f 	bl	80002bc <__adddf3>
 801443e:	3401      	adds	r4, #1
 8014440:	e7c6      	b.n	80143d0 <__kernel_rem_pio2+0x560>
 8014442:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014446:	ed3a 7b02 	vldmdb	sl!, {d7}
 801444a:	4640      	mov	r0, r8
 801444c:	ec53 2b17 	vmov	r2, r3, d7
 8014450:	4649      	mov	r1, r9
 8014452:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014456:	f7eb ff31 	bl	80002bc <__adddf3>
 801445a:	4602      	mov	r2, r0
 801445c:	460b      	mov	r3, r1
 801445e:	4606      	mov	r6, r0
 8014460:	460f      	mov	r7, r1
 8014462:	4640      	mov	r0, r8
 8014464:	4649      	mov	r1, r9
 8014466:	f7eb ff27 	bl	80002b8 <__aeabi_dsub>
 801446a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801446e:	f7eb ff25 	bl	80002bc <__adddf3>
 8014472:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014476:	e9ca 0100 	strd	r0, r1, [sl]
 801447a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801447e:	e770      	b.n	8014362 <__kernel_rem_pio2+0x4f2>
 8014480:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014484:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014488:	4630      	mov	r0, r6
 801448a:	ec53 2b17 	vmov	r2, r3, d7
 801448e:	4639      	mov	r1, r7
 8014490:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014494:	f7eb ff12 	bl	80002bc <__adddf3>
 8014498:	4602      	mov	r2, r0
 801449a:	460b      	mov	r3, r1
 801449c:	4680      	mov	r8, r0
 801449e:	4689      	mov	r9, r1
 80144a0:	4630      	mov	r0, r6
 80144a2:	4639      	mov	r1, r7
 80144a4:	f7eb ff08 	bl	80002b8 <__aeabi_dsub>
 80144a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144ac:	f7eb ff06 	bl	80002bc <__adddf3>
 80144b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80144b4:	e9ca 0100 	strd	r0, r1, [sl]
 80144b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80144bc:	e756      	b.n	801436c <__kernel_rem_pio2+0x4fc>
 80144be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80144c2:	f7eb fefb 	bl	80002bc <__adddf3>
 80144c6:	3d01      	subs	r5, #1
 80144c8:	e756      	b.n	8014378 <__kernel_rem_pio2+0x508>
 80144ca:	9b01      	ldr	r3, [sp, #4]
 80144cc:	9a01      	ldr	r2, [sp, #4]
 80144ce:	601f      	str	r7, [r3, #0]
 80144d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80144d4:	605c      	str	r4, [r3, #4]
 80144d6:	609d      	str	r5, [r3, #8]
 80144d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80144dc:	60d3      	str	r3, [r2, #12]
 80144de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144e2:	6110      	str	r0, [r2, #16]
 80144e4:	6153      	str	r3, [r2, #20]
 80144e6:	e78e      	b.n	8014406 <__kernel_rem_pio2+0x596>
 80144e8:	41700000 	.word	0x41700000
 80144ec:	3e700000 	.word	0x3e700000

080144f0 <__kernel_sin>:
 80144f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f4:	ec55 4b10 	vmov	r4, r5, d0
 80144f8:	b085      	sub	sp, #20
 80144fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80144fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014502:	ed8d 1b00 	vstr	d1, [sp]
 8014506:	9002      	str	r0, [sp, #8]
 8014508:	da06      	bge.n	8014518 <__kernel_sin+0x28>
 801450a:	ee10 0a10 	vmov	r0, s0
 801450e:	4629      	mov	r1, r5
 8014510:	f7ec fb3a 	bl	8000b88 <__aeabi_d2iz>
 8014514:	2800      	cmp	r0, #0
 8014516:	d051      	beq.n	80145bc <__kernel_sin+0xcc>
 8014518:	4622      	mov	r2, r4
 801451a:	462b      	mov	r3, r5
 801451c:	4620      	mov	r0, r4
 801451e:	4629      	mov	r1, r5
 8014520:	f7ec f882 	bl	8000628 <__aeabi_dmul>
 8014524:	4682      	mov	sl, r0
 8014526:	468b      	mov	fp, r1
 8014528:	4602      	mov	r2, r0
 801452a:	460b      	mov	r3, r1
 801452c:	4620      	mov	r0, r4
 801452e:	4629      	mov	r1, r5
 8014530:	f7ec f87a 	bl	8000628 <__aeabi_dmul>
 8014534:	a341      	add	r3, pc, #260	; (adr r3, 801463c <__kernel_sin+0x14c>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	4680      	mov	r8, r0
 801453c:	4689      	mov	r9, r1
 801453e:	4650      	mov	r0, sl
 8014540:	4659      	mov	r1, fp
 8014542:	f7ec f871 	bl	8000628 <__aeabi_dmul>
 8014546:	a33f      	add	r3, pc, #252	; (adr r3, 8014644 <__kernel_sin+0x154>)
 8014548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454c:	f7eb feb4 	bl	80002b8 <__aeabi_dsub>
 8014550:	4652      	mov	r2, sl
 8014552:	465b      	mov	r3, fp
 8014554:	f7ec f868 	bl	8000628 <__aeabi_dmul>
 8014558:	a33c      	add	r3, pc, #240	; (adr r3, 801464c <__kernel_sin+0x15c>)
 801455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455e:	f7eb fead 	bl	80002bc <__adddf3>
 8014562:	4652      	mov	r2, sl
 8014564:	465b      	mov	r3, fp
 8014566:	f7ec f85f 	bl	8000628 <__aeabi_dmul>
 801456a:	a33a      	add	r3, pc, #232	; (adr r3, 8014654 <__kernel_sin+0x164>)
 801456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014570:	f7eb fea2 	bl	80002b8 <__aeabi_dsub>
 8014574:	4652      	mov	r2, sl
 8014576:	465b      	mov	r3, fp
 8014578:	f7ec f856 	bl	8000628 <__aeabi_dmul>
 801457c:	a337      	add	r3, pc, #220	; (adr r3, 801465c <__kernel_sin+0x16c>)
 801457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014582:	f7eb fe9b 	bl	80002bc <__adddf3>
 8014586:	9b02      	ldr	r3, [sp, #8]
 8014588:	4606      	mov	r6, r0
 801458a:	460f      	mov	r7, r1
 801458c:	b9db      	cbnz	r3, 80145c6 <__kernel_sin+0xd6>
 801458e:	4602      	mov	r2, r0
 8014590:	460b      	mov	r3, r1
 8014592:	4650      	mov	r0, sl
 8014594:	4659      	mov	r1, fp
 8014596:	f7ec f847 	bl	8000628 <__aeabi_dmul>
 801459a:	a325      	add	r3, pc, #148	; (adr r3, 8014630 <__kernel_sin+0x140>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	f7eb fe8a 	bl	80002b8 <__aeabi_dsub>
 80145a4:	4642      	mov	r2, r8
 80145a6:	464b      	mov	r3, r9
 80145a8:	f7ec f83e 	bl	8000628 <__aeabi_dmul>
 80145ac:	4602      	mov	r2, r0
 80145ae:	460b      	mov	r3, r1
 80145b0:	4620      	mov	r0, r4
 80145b2:	4629      	mov	r1, r5
 80145b4:	f7eb fe82 	bl	80002bc <__adddf3>
 80145b8:	4604      	mov	r4, r0
 80145ba:	460d      	mov	r5, r1
 80145bc:	ec45 4b10 	vmov	d0, r4, r5
 80145c0:	b005      	add	sp, #20
 80145c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c6:	2200      	movs	r2, #0
 80145c8:	4b1b      	ldr	r3, [pc, #108]	; (8014638 <__kernel_sin+0x148>)
 80145ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80145ce:	f7ec f82b 	bl	8000628 <__aeabi_dmul>
 80145d2:	4632      	mov	r2, r6
 80145d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145d8:	463b      	mov	r3, r7
 80145da:	4640      	mov	r0, r8
 80145dc:	4649      	mov	r1, r9
 80145de:	f7ec f823 	bl	8000628 <__aeabi_dmul>
 80145e2:	4602      	mov	r2, r0
 80145e4:	460b      	mov	r3, r1
 80145e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145ea:	f7eb fe65 	bl	80002b8 <__aeabi_dsub>
 80145ee:	4652      	mov	r2, sl
 80145f0:	465b      	mov	r3, fp
 80145f2:	f7ec f819 	bl	8000628 <__aeabi_dmul>
 80145f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145fa:	f7eb fe5d 	bl	80002b8 <__aeabi_dsub>
 80145fe:	a30c      	add	r3, pc, #48	; (adr r3, 8014630 <__kernel_sin+0x140>)
 8014600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014604:	4606      	mov	r6, r0
 8014606:	460f      	mov	r7, r1
 8014608:	4640      	mov	r0, r8
 801460a:	4649      	mov	r1, r9
 801460c:	f7ec f80c 	bl	8000628 <__aeabi_dmul>
 8014610:	4602      	mov	r2, r0
 8014612:	460b      	mov	r3, r1
 8014614:	4630      	mov	r0, r6
 8014616:	4639      	mov	r1, r7
 8014618:	f7eb fe50 	bl	80002bc <__adddf3>
 801461c:	4602      	mov	r2, r0
 801461e:	460b      	mov	r3, r1
 8014620:	4620      	mov	r0, r4
 8014622:	4629      	mov	r1, r5
 8014624:	f7eb fe48 	bl	80002b8 <__aeabi_dsub>
 8014628:	e7c6      	b.n	80145b8 <__kernel_sin+0xc8>
 801462a:	bf00      	nop
 801462c:	f3af 8000 	nop.w
 8014630:	55555549 	.word	0x55555549
 8014634:	3fc55555 	.word	0x3fc55555
 8014638:	3fe00000 	.word	0x3fe00000
 801463c:	5acfd57c 	.word	0x5acfd57c
 8014640:	3de5d93a 	.word	0x3de5d93a
 8014644:	8a2b9ceb 	.word	0x8a2b9ceb
 8014648:	3e5ae5e6 	.word	0x3e5ae5e6
 801464c:	57b1fe7d 	.word	0x57b1fe7d
 8014650:	3ec71de3 	.word	0x3ec71de3
 8014654:	19c161d5 	.word	0x19c161d5
 8014658:	3f2a01a0 	.word	0x3f2a01a0
 801465c:	1110f8a6 	.word	0x1110f8a6
 8014660:	3f811111 	.word	0x3f811111

08014664 <fabs>:
 8014664:	ec51 0b10 	vmov	r0, r1, d0
 8014668:	ee10 2a10 	vmov	r2, s0
 801466c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014670:	ec43 2b10 	vmov	d0, r2, r3
 8014674:	4770      	bx	lr
	...

08014678 <floor>:
 8014678:	ec51 0b10 	vmov	r0, r1, d0
 801467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014680:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014684:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014688:	2e13      	cmp	r6, #19
 801468a:	460c      	mov	r4, r1
 801468c:	ee10 5a10 	vmov	r5, s0
 8014690:	4680      	mov	r8, r0
 8014692:	dc34      	bgt.n	80146fe <floor+0x86>
 8014694:	2e00      	cmp	r6, #0
 8014696:	da16      	bge.n	80146c6 <floor+0x4e>
 8014698:	a335      	add	r3, pc, #212	; (adr r3, 8014770 <floor+0xf8>)
 801469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469e:	f7eb fe0d 	bl	80002bc <__adddf3>
 80146a2:	2200      	movs	r2, #0
 80146a4:	2300      	movs	r3, #0
 80146a6:	f7ec fa4f 	bl	8000b48 <__aeabi_dcmpgt>
 80146aa:	b148      	cbz	r0, 80146c0 <floor+0x48>
 80146ac:	2c00      	cmp	r4, #0
 80146ae:	da59      	bge.n	8014764 <floor+0xec>
 80146b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80146b4:	4a30      	ldr	r2, [pc, #192]	; (8014778 <floor+0x100>)
 80146b6:	432b      	orrs	r3, r5
 80146b8:	2500      	movs	r5, #0
 80146ba:	42ab      	cmp	r3, r5
 80146bc:	bf18      	it	ne
 80146be:	4614      	movne	r4, r2
 80146c0:	4621      	mov	r1, r4
 80146c2:	4628      	mov	r0, r5
 80146c4:	e025      	b.n	8014712 <floor+0x9a>
 80146c6:	4f2d      	ldr	r7, [pc, #180]	; (801477c <floor+0x104>)
 80146c8:	4137      	asrs	r7, r6
 80146ca:	ea01 0307 	and.w	r3, r1, r7
 80146ce:	4303      	orrs	r3, r0
 80146d0:	d01f      	beq.n	8014712 <floor+0x9a>
 80146d2:	a327      	add	r3, pc, #156	; (adr r3, 8014770 <floor+0xf8>)
 80146d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d8:	f7eb fdf0 	bl	80002bc <__adddf3>
 80146dc:	2200      	movs	r2, #0
 80146de:	2300      	movs	r3, #0
 80146e0:	f7ec fa32 	bl	8000b48 <__aeabi_dcmpgt>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d0eb      	beq.n	80146c0 <floor+0x48>
 80146e8:	2c00      	cmp	r4, #0
 80146ea:	bfbe      	ittt	lt
 80146ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80146f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80146f4:	19a4      	addlt	r4, r4, r6
 80146f6:	ea24 0407 	bic.w	r4, r4, r7
 80146fa:	2500      	movs	r5, #0
 80146fc:	e7e0      	b.n	80146c0 <floor+0x48>
 80146fe:	2e33      	cmp	r6, #51	; 0x33
 8014700:	dd0b      	ble.n	801471a <floor+0xa2>
 8014702:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014706:	d104      	bne.n	8014712 <floor+0x9a>
 8014708:	ee10 2a10 	vmov	r2, s0
 801470c:	460b      	mov	r3, r1
 801470e:	f7eb fdd5 	bl	80002bc <__adddf3>
 8014712:	ec41 0b10 	vmov	d0, r0, r1
 8014716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801471a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801471e:	f04f 33ff 	mov.w	r3, #4294967295
 8014722:	fa23 f707 	lsr.w	r7, r3, r7
 8014726:	4207      	tst	r7, r0
 8014728:	d0f3      	beq.n	8014712 <floor+0x9a>
 801472a:	a311      	add	r3, pc, #68	; (adr r3, 8014770 <floor+0xf8>)
 801472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014730:	f7eb fdc4 	bl	80002bc <__adddf3>
 8014734:	2200      	movs	r2, #0
 8014736:	2300      	movs	r3, #0
 8014738:	f7ec fa06 	bl	8000b48 <__aeabi_dcmpgt>
 801473c:	2800      	cmp	r0, #0
 801473e:	d0bf      	beq.n	80146c0 <floor+0x48>
 8014740:	2c00      	cmp	r4, #0
 8014742:	da02      	bge.n	801474a <floor+0xd2>
 8014744:	2e14      	cmp	r6, #20
 8014746:	d103      	bne.n	8014750 <floor+0xd8>
 8014748:	3401      	adds	r4, #1
 801474a:	ea25 0507 	bic.w	r5, r5, r7
 801474e:	e7b7      	b.n	80146c0 <floor+0x48>
 8014750:	2301      	movs	r3, #1
 8014752:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014756:	fa03 f606 	lsl.w	r6, r3, r6
 801475a:	4435      	add	r5, r6
 801475c:	4545      	cmp	r5, r8
 801475e:	bf38      	it	cc
 8014760:	18e4      	addcc	r4, r4, r3
 8014762:	e7f2      	b.n	801474a <floor+0xd2>
 8014764:	2500      	movs	r5, #0
 8014766:	462c      	mov	r4, r5
 8014768:	e7aa      	b.n	80146c0 <floor+0x48>
 801476a:	bf00      	nop
 801476c:	f3af 8000 	nop.w
 8014770:	8800759c 	.word	0x8800759c
 8014774:	7e37e43c 	.word	0x7e37e43c
 8014778:	bff00000 	.word	0xbff00000
 801477c:	000fffff 	.word	0x000fffff

08014780 <scalbn>:
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	ec55 4b10 	vmov	r4, r5, d0
 8014786:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801478a:	4606      	mov	r6, r0
 801478c:	462b      	mov	r3, r5
 801478e:	b9aa      	cbnz	r2, 80147bc <scalbn+0x3c>
 8014790:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014794:	4323      	orrs	r3, r4
 8014796:	d03b      	beq.n	8014810 <scalbn+0x90>
 8014798:	4b31      	ldr	r3, [pc, #196]	; (8014860 <scalbn+0xe0>)
 801479a:	4629      	mov	r1, r5
 801479c:	2200      	movs	r2, #0
 801479e:	ee10 0a10 	vmov	r0, s0
 80147a2:	f7eb ff41 	bl	8000628 <__aeabi_dmul>
 80147a6:	4b2f      	ldr	r3, [pc, #188]	; (8014864 <scalbn+0xe4>)
 80147a8:	429e      	cmp	r6, r3
 80147aa:	4604      	mov	r4, r0
 80147ac:	460d      	mov	r5, r1
 80147ae:	da12      	bge.n	80147d6 <scalbn+0x56>
 80147b0:	a327      	add	r3, pc, #156	; (adr r3, 8014850 <scalbn+0xd0>)
 80147b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b6:	f7eb ff37 	bl	8000628 <__aeabi_dmul>
 80147ba:	e009      	b.n	80147d0 <scalbn+0x50>
 80147bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80147c0:	428a      	cmp	r2, r1
 80147c2:	d10c      	bne.n	80147de <scalbn+0x5e>
 80147c4:	ee10 2a10 	vmov	r2, s0
 80147c8:	4620      	mov	r0, r4
 80147ca:	4629      	mov	r1, r5
 80147cc:	f7eb fd76 	bl	80002bc <__adddf3>
 80147d0:	4604      	mov	r4, r0
 80147d2:	460d      	mov	r5, r1
 80147d4:	e01c      	b.n	8014810 <scalbn+0x90>
 80147d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80147da:	460b      	mov	r3, r1
 80147dc:	3a36      	subs	r2, #54	; 0x36
 80147de:	4432      	add	r2, r6
 80147e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80147e4:	428a      	cmp	r2, r1
 80147e6:	dd0b      	ble.n	8014800 <scalbn+0x80>
 80147e8:	ec45 4b11 	vmov	d1, r4, r5
 80147ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014858 <scalbn+0xd8>
 80147f0:	f000 f83c 	bl	801486c <copysign>
 80147f4:	a318      	add	r3, pc, #96	; (adr r3, 8014858 <scalbn+0xd8>)
 80147f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fa:	ec51 0b10 	vmov	r0, r1, d0
 80147fe:	e7da      	b.n	80147b6 <scalbn+0x36>
 8014800:	2a00      	cmp	r2, #0
 8014802:	dd08      	ble.n	8014816 <scalbn+0x96>
 8014804:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014808:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801480c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014810:	ec45 4b10 	vmov	d0, r4, r5
 8014814:	bd70      	pop	{r4, r5, r6, pc}
 8014816:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801481a:	da0d      	bge.n	8014838 <scalbn+0xb8>
 801481c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014820:	429e      	cmp	r6, r3
 8014822:	ec45 4b11 	vmov	d1, r4, r5
 8014826:	dce1      	bgt.n	80147ec <scalbn+0x6c>
 8014828:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014850 <scalbn+0xd0>
 801482c:	f000 f81e 	bl	801486c <copysign>
 8014830:	a307      	add	r3, pc, #28	; (adr r3, 8014850 <scalbn+0xd0>)
 8014832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014836:	e7e0      	b.n	80147fa <scalbn+0x7a>
 8014838:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801483c:	3236      	adds	r2, #54	; 0x36
 801483e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014846:	4620      	mov	r0, r4
 8014848:	4629      	mov	r1, r5
 801484a:	2200      	movs	r2, #0
 801484c:	4b06      	ldr	r3, [pc, #24]	; (8014868 <scalbn+0xe8>)
 801484e:	e7b2      	b.n	80147b6 <scalbn+0x36>
 8014850:	c2f8f359 	.word	0xc2f8f359
 8014854:	01a56e1f 	.word	0x01a56e1f
 8014858:	8800759c 	.word	0x8800759c
 801485c:	7e37e43c 	.word	0x7e37e43c
 8014860:	43500000 	.word	0x43500000
 8014864:	ffff3cb0 	.word	0xffff3cb0
 8014868:	3c900000 	.word	0x3c900000

0801486c <copysign>:
 801486c:	ec51 0b10 	vmov	r0, r1, d0
 8014870:	ee11 0a90 	vmov	r0, s3
 8014874:	ee10 2a10 	vmov	r2, s0
 8014878:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801487c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014880:	ea41 0300 	orr.w	r3, r1, r0
 8014884:	ec43 2b10 	vmov	d0, r2, r3
 8014888:	4770      	bx	lr
	...

0801488c <__errno>:
 801488c:	4b01      	ldr	r3, [pc, #4]	; (8014894 <__errno+0x8>)
 801488e:	6818      	ldr	r0, [r3, #0]
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	2000000c 	.word	0x2000000c

08014898 <__libc_init_array>:
 8014898:	b570      	push	{r4, r5, r6, lr}
 801489a:	4e0d      	ldr	r6, [pc, #52]	; (80148d0 <__libc_init_array+0x38>)
 801489c:	4c0d      	ldr	r4, [pc, #52]	; (80148d4 <__libc_init_array+0x3c>)
 801489e:	1ba4      	subs	r4, r4, r6
 80148a0:	10a4      	asrs	r4, r4, #2
 80148a2:	2500      	movs	r5, #0
 80148a4:	42a5      	cmp	r5, r4
 80148a6:	d109      	bne.n	80148bc <__libc_init_array+0x24>
 80148a8:	4e0b      	ldr	r6, [pc, #44]	; (80148d8 <__libc_init_array+0x40>)
 80148aa:	4c0c      	ldr	r4, [pc, #48]	; (80148dc <__libc_init_array+0x44>)
 80148ac:	f004 f9e8 	bl	8018c80 <_init>
 80148b0:	1ba4      	subs	r4, r4, r6
 80148b2:	10a4      	asrs	r4, r4, #2
 80148b4:	2500      	movs	r5, #0
 80148b6:	42a5      	cmp	r5, r4
 80148b8:	d105      	bne.n	80148c6 <__libc_init_array+0x2e>
 80148ba:	bd70      	pop	{r4, r5, r6, pc}
 80148bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80148c0:	4798      	blx	r3
 80148c2:	3501      	adds	r5, #1
 80148c4:	e7ee      	b.n	80148a4 <__libc_init_array+0xc>
 80148c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80148ca:	4798      	blx	r3
 80148cc:	3501      	adds	r5, #1
 80148ce:	e7f2      	b.n	80148b6 <__libc_init_array+0x1e>
 80148d0:	0801981c 	.word	0x0801981c
 80148d4:	0801981c 	.word	0x0801981c
 80148d8:	0801981c 	.word	0x0801981c
 80148dc:	08019824 	.word	0x08019824

080148e0 <memcpy>:
 80148e0:	b510      	push	{r4, lr}
 80148e2:	1e43      	subs	r3, r0, #1
 80148e4:	440a      	add	r2, r1
 80148e6:	4291      	cmp	r1, r2
 80148e8:	d100      	bne.n	80148ec <memcpy+0xc>
 80148ea:	bd10      	pop	{r4, pc}
 80148ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148f4:	e7f7      	b.n	80148e6 <memcpy+0x6>

080148f6 <memset>:
 80148f6:	4402      	add	r2, r0
 80148f8:	4603      	mov	r3, r0
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d100      	bne.n	8014900 <memset+0xa>
 80148fe:	4770      	bx	lr
 8014900:	f803 1b01 	strb.w	r1, [r3], #1
 8014904:	e7f9      	b.n	80148fa <memset+0x4>

08014906 <__cvt>:
 8014906:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801490a:	ec55 4b10 	vmov	r4, r5, d0
 801490e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014914:	2d00      	cmp	r5, #0
 8014916:	460e      	mov	r6, r1
 8014918:	4691      	mov	r9, r2
 801491a:	4619      	mov	r1, r3
 801491c:	bfb8      	it	lt
 801491e:	4622      	movlt	r2, r4
 8014920:	462b      	mov	r3, r5
 8014922:	f027 0720 	bic.w	r7, r7, #32
 8014926:	bfbb      	ittet	lt
 8014928:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801492c:	461d      	movlt	r5, r3
 801492e:	2300      	movge	r3, #0
 8014930:	232d      	movlt	r3, #45	; 0x2d
 8014932:	bfb8      	it	lt
 8014934:	4614      	movlt	r4, r2
 8014936:	2f46      	cmp	r7, #70	; 0x46
 8014938:	700b      	strb	r3, [r1, #0]
 801493a:	d004      	beq.n	8014946 <__cvt+0x40>
 801493c:	2f45      	cmp	r7, #69	; 0x45
 801493e:	d100      	bne.n	8014942 <__cvt+0x3c>
 8014940:	3601      	adds	r6, #1
 8014942:	2102      	movs	r1, #2
 8014944:	e000      	b.n	8014948 <__cvt+0x42>
 8014946:	2103      	movs	r1, #3
 8014948:	ab03      	add	r3, sp, #12
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	ab02      	add	r3, sp, #8
 801494e:	9300      	str	r3, [sp, #0]
 8014950:	4632      	mov	r2, r6
 8014952:	4653      	mov	r3, sl
 8014954:	ec45 4b10 	vmov	d0, r4, r5
 8014958:	f001 fdfe 	bl	8016558 <_dtoa_r>
 801495c:	2f47      	cmp	r7, #71	; 0x47
 801495e:	4680      	mov	r8, r0
 8014960:	d102      	bne.n	8014968 <__cvt+0x62>
 8014962:	f019 0f01 	tst.w	r9, #1
 8014966:	d026      	beq.n	80149b6 <__cvt+0xb0>
 8014968:	2f46      	cmp	r7, #70	; 0x46
 801496a:	eb08 0906 	add.w	r9, r8, r6
 801496e:	d111      	bne.n	8014994 <__cvt+0x8e>
 8014970:	f898 3000 	ldrb.w	r3, [r8]
 8014974:	2b30      	cmp	r3, #48	; 0x30
 8014976:	d10a      	bne.n	801498e <__cvt+0x88>
 8014978:	2200      	movs	r2, #0
 801497a:	2300      	movs	r3, #0
 801497c:	4620      	mov	r0, r4
 801497e:	4629      	mov	r1, r5
 8014980:	f7ec f8ba 	bl	8000af8 <__aeabi_dcmpeq>
 8014984:	b918      	cbnz	r0, 801498e <__cvt+0x88>
 8014986:	f1c6 0601 	rsb	r6, r6, #1
 801498a:	f8ca 6000 	str.w	r6, [sl]
 801498e:	f8da 3000 	ldr.w	r3, [sl]
 8014992:	4499      	add	r9, r3
 8014994:	2200      	movs	r2, #0
 8014996:	2300      	movs	r3, #0
 8014998:	4620      	mov	r0, r4
 801499a:	4629      	mov	r1, r5
 801499c:	f7ec f8ac 	bl	8000af8 <__aeabi_dcmpeq>
 80149a0:	b938      	cbnz	r0, 80149b2 <__cvt+0xac>
 80149a2:	2230      	movs	r2, #48	; 0x30
 80149a4:	9b03      	ldr	r3, [sp, #12]
 80149a6:	454b      	cmp	r3, r9
 80149a8:	d205      	bcs.n	80149b6 <__cvt+0xb0>
 80149aa:	1c59      	adds	r1, r3, #1
 80149ac:	9103      	str	r1, [sp, #12]
 80149ae:	701a      	strb	r2, [r3, #0]
 80149b0:	e7f8      	b.n	80149a4 <__cvt+0x9e>
 80149b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80149b6:	9b03      	ldr	r3, [sp, #12]
 80149b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149ba:	eba3 0308 	sub.w	r3, r3, r8
 80149be:	4640      	mov	r0, r8
 80149c0:	6013      	str	r3, [r2, #0]
 80149c2:	b004      	add	sp, #16
 80149c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080149c8 <__exponent>:
 80149c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149ca:	2900      	cmp	r1, #0
 80149cc:	4604      	mov	r4, r0
 80149ce:	bfba      	itte	lt
 80149d0:	4249      	neglt	r1, r1
 80149d2:	232d      	movlt	r3, #45	; 0x2d
 80149d4:	232b      	movge	r3, #43	; 0x2b
 80149d6:	2909      	cmp	r1, #9
 80149d8:	f804 2b02 	strb.w	r2, [r4], #2
 80149dc:	7043      	strb	r3, [r0, #1]
 80149de:	dd20      	ble.n	8014a22 <__exponent+0x5a>
 80149e0:	f10d 0307 	add.w	r3, sp, #7
 80149e4:	461f      	mov	r7, r3
 80149e6:	260a      	movs	r6, #10
 80149e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80149ec:	fb06 1115 	mls	r1, r6, r5, r1
 80149f0:	3130      	adds	r1, #48	; 0x30
 80149f2:	2d09      	cmp	r5, #9
 80149f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80149f8:	f103 32ff 	add.w	r2, r3, #4294967295
 80149fc:	4629      	mov	r1, r5
 80149fe:	dc09      	bgt.n	8014a14 <__exponent+0x4c>
 8014a00:	3130      	adds	r1, #48	; 0x30
 8014a02:	3b02      	subs	r3, #2
 8014a04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a08:	42bb      	cmp	r3, r7
 8014a0a:	4622      	mov	r2, r4
 8014a0c:	d304      	bcc.n	8014a18 <__exponent+0x50>
 8014a0e:	1a10      	subs	r0, r2, r0
 8014a10:	b003      	add	sp, #12
 8014a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a14:	4613      	mov	r3, r2
 8014a16:	e7e7      	b.n	80149e8 <__exponent+0x20>
 8014a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a1c:	f804 2b01 	strb.w	r2, [r4], #1
 8014a20:	e7f2      	b.n	8014a08 <__exponent+0x40>
 8014a22:	2330      	movs	r3, #48	; 0x30
 8014a24:	4419      	add	r1, r3
 8014a26:	7083      	strb	r3, [r0, #2]
 8014a28:	1d02      	adds	r2, r0, #4
 8014a2a:	70c1      	strb	r1, [r0, #3]
 8014a2c:	e7ef      	b.n	8014a0e <__exponent+0x46>
	...

08014a30 <_printf_float>:
 8014a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a34:	b08d      	sub	sp, #52	; 0x34
 8014a36:	460c      	mov	r4, r1
 8014a38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014a3c:	4616      	mov	r6, r2
 8014a3e:	461f      	mov	r7, r3
 8014a40:	4605      	mov	r5, r0
 8014a42:	f002 fe7b 	bl	801773c <_localeconv_r>
 8014a46:	6803      	ldr	r3, [r0, #0]
 8014a48:	9304      	str	r3, [sp, #16]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7eb fbd8 	bl	8000200 <strlen>
 8014a50:	2300      	movs	r3, #0
 8014a52:	930a      	str	r3, [sp, #40]	; 0x28
 8014a54:	f8d8 3000 	ldr.w	r3, [r8]
 8014a58:	9005      	str	r0, [sp, #20]
 8014a5a:	3307      	adds	r3, #7
 8014a5c:	f023 0307 	bic.w	r3, r3, #7
 8014a60:	f103 0208 	add.w	r2, r3, #8
 8014a64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014a68:	f8d4 b000 	ldr.w	fp, [r4]
 8014a6c:	f8c8 2000 	str.w	r2, [r8]
 8014a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014a78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014a7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014a80:	9307      	str	r3, [sp, #28]
 8014a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8014a86:	f04f 32ff 	mov.w	r2, #4294967295
 8014a8a:	4ba7      	ldr	r3, [pc, #668]	; (8014d28 <_printf_float+0x2f8>)
 8014a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a90:	f7ec f864 	bl	8000b5c <__aeabi_dcmpun>
 8014a94:	bb70      	cbnz	r0, 8014af4 <_printf_float+0xc4>
 8014a96:	f04f 32ff 	mov.w	r2, #4294967295
 8014a9a:	4ba3      	ldr	r3, [pc, #652]	; (8014d28 <_printf_float+0x2f8>)
 8014a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014aa0:	f7ec f83e 	bl	8000b20 <__aeabi_dcmple>
 8014aa4:	bb30      	cbnz	r0, 8014af4 <_printf_float+0xc4>
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	4640      	mov	r0, r8
 8014aac:	4649      	mov	r1, r9
 8014aae:	f7ec f82d 	bl	8000b0c <__aeabi_dcmplt>
 8014ab2:	b110      	cbz	r0, 8014aba <_printf_float+0x8a>
 8014ab4:	232d      	movs	r3, #45	; 0x2d
 8014ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014aba:	4a9c      	ldr	r2, [pc, #624]	; (8014d2c <_printf_float+0x2fc>)
 8014abc:	4b9c      	ldr	r3, [pc, #624]	; (8014d30 <_printf_float+0x300>)
 8014abe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014ac2:	bf8c      	ite	hi
 8014ac4:	4690      	movhi	r8, r2
 8014ac6:	4698      	movls	r8, r3
 8014ac8:	2303      	movs	r3, #3
 8014aca:	f02b 0204 	bic.w	r2, fp, #4
 8014ace:	6123      	str	r3, [r4, #16]
 8014ad0:	6022      	str	r2, [r4, #0]
 8014ad2:	f04f 0900 	mov.w	r9, #0
 8014ad6:	9700      	str	r7, [sp, #0]
 8014ad8:	4633      	mov	r3, r6
 8014ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8014adc:	4621      	mov	r1, r4
 8014ade:	4628      	mov	r0, r5
 8014ae0:	f000 f9e6 	bl	8014eb0 <_printf_common>
 8014ae4:	3001      	adds	r0, #1
 8014ae6:	f040 808d 	bne.w	8014c04 <_printf_float+0x1d4>
 8014aea:	f04f 30ff 	mov.w	r0, #4294967295
 8014aee:	b00d      	add	sp, #52	; 0x34
 8014af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af4:	4642      	mov	r2, r8
 8014af6:	464b      	mov	r3, r9
 8014af8:	4640      	mov	r0, r8
 8014afa:	4649      	mov	r1, r9
 8014afc:	f7ec f82e 	bl	8000b5c <__aeabi_dcmpun>
 8014b00:	b110      	cbz	r0, 8014b08 <_printf_float+0xd8>
 8014b02:	4a8c      	ldr	r2, [pc, #560]	; (8014d34 <_printf_float+0x304>)
 8014b04:	4b8c      	ldr	r3, [pc, #560]	; (8014d38 <_printf_float+0x308>)
 8014b06:	e7da      	b.n	8014abe <_printf_float+0x8e>
 8014b08:	6861      	ldr	r1, [r4, #4]
 8014b0a:	1c4b      	adds	r3, r1, #1
 8014b0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014b10:	a80a      	add	r0, sp, #40	; 0x28
 8014b12:	d13e      	bne.n	8014b92 <_printf_float+0x162>
 8014b14:	2306      	movs	r3, #6
 8014b16:	6063      	str	r3, [r4, #4]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014b1e:	ab09      	add	r3, sp, #36	; 0x24
 8014b20:	9300      	str	r3, [sp, #0]
 8014b22:	ec49 8b10 	vmov	d0, r8, r9
 8014b26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b2a:	6022      	str	r2, [r4, #0]
 8014b2c:	f8cd a004 	str.w	sl, [sp, #4]
 8014b30:	6861      	ldr	r1, [r4, #4]
 8014b32:	4628      	mov	r0, r5
 8014b34:	f7ff fee7 	bl	8014906 <__cvt>
 8014b38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014b3c:	2b47      	cmp	r3, #71	; 0x47
 8014b3e:	4680      	mov	r8, r0
 8014b40:	d109      	bne.n	8014b56 <_printf_float+0x126>
 8014b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b44:	1cd8      	adds	r0, r3, #3
 8014b46:	db02      	blt.n	8014b4e <_printf_float+0x11e>
 8014b48:	6862      	ldr	r2, [r4, #4]
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	dd47      	ble.n	8014bde <_printf_float+0x1ae>
 8014b4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014b52:	fa5f fa8a 	uxtb.w	sl, sl
 8014b56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b5c:	d824      	bhi.n	8014ba8 <_printf_float+0x178>
 8014b5e:	3901      	subs	r1, #1
 8014b60:	4652      	mov	r2, sl
 8014b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014b66:	9109      	str	r1, [sp, #36]	; 0x24
 8014b68:	f7ff ff2e 	bl	80149c8 <__exponent>
 8014b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b6e:	1813      	adds	r3, r2, r0
 8014b70:	2a01      	cmp	r2, #1
 8014b72:	4681      	mov	r9, r0
 8014b74:	6123      	str	r3, [r4, #16]
 8014b76:	dc02      	bgt.n	8014b7e <_printf_float+0x14e>
 8014b78:	6822      	ldr	r2, [r4, #0]
 8014b7a:	07d1      	lsls	r1, r2, #31
 8014b7c:	d501      	bpl.n	8014b82 <_printf_float+0x152>
 8014b7e:	3301      	adds	r3, #1
 8014b80:	6123      	str	r3, [r4, #16]
 8014b82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d0a5      	beq.n	8014ad6 <_printf_float+0xa6>
 8014b8a:	232d      	movs	r3, #45	; 0x2d
 8014b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b90:	e7a1      	b.n	8014ad6 <_printf_float+0xa6>
 8014b92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014b96:	f000 8177 	beq.w	8014e88 <_printf_float+0x458>
 8014b9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b9e:	d1bb      	bne.n	8014b18 <_printf_float+0xe8>
 8014ba0:	2900      	cmp	r1, #0
 8014ba2:	d1b9      	bne.n	8014b18 <_printf_float+0xe8>
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	e7b6      	b.n	8014b16 <_printf_float+0xe6>
 8014ba8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014bac:	d119      	bne.n	8014be2 <_printf_float+0x1b2>
 8014bae:	2900      	cmp	r1, #0
 8014bb0:	6863      	ldr	r3, [r4, #4]
 8014bb2:	dd0c      	ble.n	8014bce <_printf_float+0x19e>
 8014bb4:	6121      	str	r1, [r4, #16]
 8014bb6:	b913      	cbnz	r3, 8014bbe <_printf_float+0x18e>
 8014bb8:	6822      	ldr	r2, [r4, #0]
 8014bba:	07d2      	lsls	r2, r2, #31
 8014bbc:	d502      	bpl.n	8014bc4 <_printf_float+0x194>
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	440b      	add	r3, r1
 8014bc2:	6123      	str	r3, [r4, #16]
 8014bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8014bc8:	f04f 0900 	mov.w	r9, #0
 8014bcc:	e7d9      	b.n	8014b82 <_printf_float+0x152>
 8014bce:	b913      	cbnz	r3, 8014bd6 <_printf_float+0x1a6>
 8014bd0:	6822      	ldr	r2, [r4, #0]
 8014bd2:	07d0      	lsls	r0, r2, #31
 8014bd4:	d501      	bpl.n	8014bda <_printf_float+0x1aa>
 8014bd6:	3302      	adds	r3, #2
 8014bd8:	e7f3      	b.n	8014bc2 <_printf_float+0x192>
 8014bda:	2301      	movs	r3, #1
 8014bdc:	e7f1      	b.n	8014bc2 <_printf_float+0x192>
 8014bde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014be2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014be6:	4293      	cmp	r3, r2
 8014be8:	db05      	blt.n	8014bf6 <_printf_float+0x1c6>
 8014bea:	6822      	ldr	r2, [r4, #0]
 8014bec:	6123      	str	r3, [r4, #16]
 8014bee:	07d1      	lsls	r1, r2, #31
 8014bf0:	d5e8      	bpl.n	8014bc4 <_printf_float+0x194>
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	e7e5      	b.n	8014bc2 <_printf_float+0x192>
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	bfd4      	ite	le
 8014bfa:	f1c3 0302 	rsble	r3, r3, #2
 8014bfe:	2301      	movgt	r3, #1
 8014c00:	4413      	add	r3, r2
 8014c02:	e7de      	b.n	8014bc2 <_printf_float+0x192>
 8014c04:	6823      	ldr	r3, [r4, #0]
 8014c06:	055a      	lsls	r2, r3, #21
 8014c08:	d407      	bmi.n	8014c1a <_printf_float+0x1ea>
 8014c0a:	6923      	ldr	r3, [r4, #16]
 8014c0c:	4642      	mov	r2, r8
 8014c0e:	4631      	mov	r1, r6
 8014c10:	4628      	mov	r0, r5
 8014c12:	47b8      	blx	r7
 8014c14:	3001      	adds	r0, #1
 8014c16:	d12b      	bne.n	8014c70 <_printf_float+0x240>
 8014c18:	e767      	b.n	8014aea <_printf_float+0xba>
 8014c1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c1e:	f240 80dc 	bls.w	8014dda <_printf_float+0x3aa>
 8014c22:	2200      	movs	r2, #0
 8014c24:	2300      	movs	r3, #0
 8014c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c2a:	f7eb ff65 	bl	8000af8 <__aeabi_dcmpeq>
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	d033      	beq.n	8014c9a <_printf_float+0x26a>
 8014c32:	2301      	movs	r3, #1
 8014c34:	4a41      	ldr	r2, [pc, #260]	; (8014d3c <_printf_float+0x30c>)
 8014c36:	4631      	mov	r1, r6
 8014c38:	4628      	mov	r0, r5
 8014c3a:	47b8      	blx	r7
 8014c3c:	3001      	adds	r0, #1
 8014c3e:	f43f af54 	beq.w	8014aea <_printf_float+0xba>
 8014c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c46:	429a      	cmp	r2, r3
 8014c48:	db02      	blt.n	8014c50 <_printf_float+0x220>
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	07d8      	lsls	r0, r3, #31
 8014c4e:	d50f      	bpl.n	8014c70 <_printf_float+0x240>
 8014c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c54:	4631      	mov	r1, r6
 8014c56:	4628      	mov	r0, r5
 8014c58:	47b8      	blx	r7
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	f43f af45 	beq.w	8014aea <_printf_float+0xba>
 8014c60:	f04f 0800 	mov.w	r8, #0
 8014c64:	f104 091a 	add.w	r9, r4, #26
 8014c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c6a:	3b01      	subs	r3, #1
 8014c6c:	4543      	cmp	r3, r8
 8014c6e:	dc09      	bgt.n	8014c84 <_printf_float+0x254>
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	079b      	lsls	r3, r3, #30
 8014c74:	f100 8103 	bmi.w	8014e7e <_printf_float+0x44e>
 8014c78:	68e0      	ldr	r0, [r4, #12]
 8014c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c7c:	4298      	cmp	r0, r3
 8014c7e:	bfb8      	it	lt
 8014c80:	4618      	movlt	r0, r3
 8014c82:	e734      	b.n	8014aee <_printf_float+0xbe>
 8014c84:	2301      	movs	r3, #1
 8014c86:	464a      	mov	r2, r9
 8014c88:	4631      	mov	r1, r6
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	47b8      	blx	r7
 8014c8e:	3001      	adds	r0, #1
 8014c90:	f43f af2b 	beq.w	8014aea <_printf_float+0xba>
 8014c94:	f108 0801 	add.w	r8, r8, #1
 8014c98:	e7e6      	b.n	8014c68 <_printf_float+0x238>
 8014c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	dc2b      	bgt.n	8014cf8 <_printf_float+0x2c8>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	4a26      	ldr	r2, [pc, #152]	; (8014d3c <_printf_float+0x30c>)
 8014ca4:	4631      	mov	r1, r6
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	47b8      	blx	r7
 8014caa:	3001      	adds	r0, #1
 8014cac:	f43f af1d 	beq.w	8014aea <_printf_float+0xba>
 8014cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cb2:	b923      	cbnz	r3, 8014cbe <_printf_float+0x28e>
 8014cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cb6:	b913      	cbnz	r3, 8014cbe <_printf_float+0x28e>
 8014cb8:	6823      	ldr	r3, [r4, #0]
 8014cba:	07d9      	lsls	r1, r3, #31
 8014cbc:	d5d8      	bpl.n	8014c70 <_printf_float+0x240>
 8014cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cc2:	4631      	mov	r1, r6
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	47b8      	blx	r7
 8014cc8:	3001      	adds	r0, #1
 8014cca:	f43f af0e 	beq.w	8014aea <_printf_float+0xba>
 8014cce:	f04f 0900 	mov.w	r9, #0
 8014cd2:	f104 0a1a 	add.w	sl, r4, #26
 8014cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd8:	425b      	negs	r3, r3
 8014cda:	454b      	cmp	r3, r9
 8014cdc:	dc01      	bgt.n	8014ce2 <_printf_float+0x2b2>
 8014cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ce0:	e794      	b.n	8014c0c <_printf_float+0x1dc>
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	4652      	mov	r2, sl
 8014ce6:	4631      	mov	r1, r6
 8014ce8:	4628      	mov	r0, r5
 8014cea:	47b8      	blx	r7
 8014cec:	3001      	adds	r0, #1
 8014cee:	f43f aefc 	beq.w	8014aea <_printf_float+0xba>
 8014cf2:	f109 0901 	add.w	r9, r9, #1
 8014cf6:	e7ee      	b.n	8014cd6 <_printf_float+0x2a6>
 8014cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	bfa8      	it	ge
 8014d00:	461a      	movge	r2, r3
 8014d02:	2a00      	cmp	r2, #0
 8014d04:	4691      	mov	r9, r2
 8014d06:	dd07      	ble.n	8014d18 <_printf_float+0x2e8>
 8014d08:	4613      	mov	r3, r2
 8014d0a:	4631      	mov	r1, r6
 8014d0c:	4642      	mov	r2, r8
 8014d0e:	4628      	mov	r0, r5
 8014d10:	47b8      	blx	r7
 8014d12:	3001      	adds	r0, #1
 8014d14:	f43f aee9 	beq.w	8014aea <_printf_float+0xba>
 8014d18:	f104 031a 	add.w	r3, r4, #26
 8014d1c:	f04f 0b00 	mov.w	fp, #0
 8014d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d24:	9306      	str	r3, [sp, #24]
 8014d26:	e015      	b.n	8014d54 <_printf_float+0x324>
 8014d28:	7fefffff 	.word	0x7fefffff
 8014d2c:	080194e4 	.word	0x080194e4
 8014d30:	080194e0 	.word	0x080194e0
 8014d34:	080194ec 	.word	0x080194ec
 8014d38:	080194e8 	.word	0x080194e8
 8014d3c:	0801970b 	.word	0x0801970b
 8014d40:	2301      	movs	r3, #1
 8014d42:	9a06      	ldr	r2, [sp, #24]
 8014d44:	4631      	mov	r1, r6
 8014d46:	4628      	mov	r0, r5
 8014d48:	47b8      	blx	r7
 8014d4a:	3001      	adds	r0, #1
 8014d4c:	f43f aecd 	beq.w	8014aea <_printf_float+0xba>
 8014d50:	f10b 0b01 	add.w	fp, fp, #1
 8014d54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014d58:	ebaa 0309 	sub.w	r3, sl, r9
 8014d5c:	455b      	cmp	r3, fp
 8014d5e:	dcef      	bgt.n	8014d40 <_printf_float+0x310>
 8014d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d64:	429a      	cmp	r2, r3
 8014d66:	44d0      	add	r8, sl
 8014d68:	db15      	blt.n	8014d96 <_printf_float+0x366>
 8014d6a:	6823      	ldr	r3, [r4, #0]
 8014d6c:	07da      	lsls	r2, r3, #31
 8014d6e:	d412      	bmi.n	8014d96 <_printf_float+0x366>
 8014d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d74:	eba3 020a 	sub.w	r2, r3, sl
 8014d78:	eba3 0a01 	sub.w	sl, r3, r1
 8014d7c:	4592      	cmp	sl, r2
 8014d7e:	bfa8      	it	ge
 8014d80:	4692      	movge	sl, r2
 8014d82:	f1ba 0f00 	cmp.w	sl, #0
 8014d86:	dc0e      	bgt.n	8014da6 <_printf_float+0x376>
 8014d88:	f04f 0800 	mov.w	r8, #0
 8014d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d90:	f104 091a 	add.w	r9, r4, #26
 8014d94:	e019      	b.n	8014dca <_printf_float+0x39a>
 8014d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d9a:	4631      	mov	r1, r6
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	47b8      	blx	r7
 8014da0:	3001      	adds	r0, #1
 8014da2:	d1e5      	bne.n	8014d70 <_printf_float+0x340>
 8014da4:	e6a1      	b.n	8014aea <_printf_float+0xba>
 8014da6:	4653      	mov	r3, sl
 8014da8:	4642      	mov	r2, r8
 8014daa:	4631      	mov	r1, r6
 8014dac:	4628      	mov	r0, r5
 8014dae:	47b8      	blx	r7
 8014db0:	3001      	adds	r0, #1
 8014db2:	d1e9      	bne.n	8014d88 <_printf_float+0x358>
 8014db4:	e699      	b.n	8014aea <_printf_float+0xba>
 8014db6:	2301      	movs	r3, #1
 8014db8:	464a      	mov	r2, r9
 8014dba:	4631      	mov	r1, r6
 8014dbc:	4628      	mov	r0, r5
 8014dbe:	47b8      	blx	r7
 8014dc0:	3001      	adds	r0, #1
 8014dc2:	f43f ae92 	beq.w	8014aea <_printf_float+0xba>
 8014dc6:	f108 0801 	add.w	r8, r8, #1
 8014dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014dce:	1a9b      	subs	r3, r3, r2
 8014dd0:	eba3 030a 	sub.w	r3, r3, sl
 8014dd4:	4543      	cmp	r3, r8
 8014dd6:	dcee      	bgt.n	8014db6 <_printf_float+0x386>
 8014dd8:	e74a      	b.n	8014c70 <_printf_float+0x240>
 8014dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ddc:	2a01      	cmp	r2, #1
 8014dde:	dc01      	bgt.n	8014de4 <_printf_float+0x3b4>
 8014de0:	07db      	lsls	r3, r3, #31
 8014de2:	d53a      	bpl.n	8014e5a <_printf_float+0x42a>
 8014de4:	2301      	movs	r3, #1
 8014de6:	4642      	mov	r2, r8
 8014de8:	4631      	mov	r1, r6
 8014dea:	4628      	mov	r0, r5
 8014dec:	47b8      	blx	r7
 8014dee:	3001      	adds	r0, #1
 8014df0:	f43f ae7b 	beq.w	8014aea <_printf_float+0xba>
 8014df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014df8:	4631      	mov	r1, r6
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	47b8      	blx	r7
 8014dfe:	3001      	adds	r0, #1
 8014e00:	f108 0801 	add.w	r8, r8, #1
 8014e04:	f43f ae71 	beq.w	8014aea <_printf_float+0xba>
 8014e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e14:	2300      	movs	r3, #0
 8014e16:	f7eb fe6f 	bl	8000af8 <__aeabi_dcmpeq>
 8014e1a:	b9c8      	cbnz	r0, 8014e50 <_printf_float+0x420>
 8014e1c:	4653      	mov	r3, sl
 8014e1e:	4642      	mov	r2, r8
 8014e20:	4631      	mov	r1, r6
 8014e22:	4628      	mov	r0, r5
 8014e24:	47b8      	blx	r7
 8014e26:	3001      	adds	r0, #1
 8014e28:	d10e      	bne.n	8014e48 <_printf_float+0x418>
 8014e2a:	e65e      	b.n	8014aea <_printf_float+0xba>
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	4652      	mov	r2, sl
 8014e30:	4631      	mov	r1, r6
 8014e32:	4628      	mov	r0, r5
 8014e34:	47b8      	blx	r7
 8014e36:	3001      	adds	r0, #1
 8014e38:	f43f ae57 	beq.w	8014aea <_printf_float+0xba>
 8014e3c:	f108 0801 	add.w	r8, r8, #1
 8014e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e42:	3b01      	subs	r3, #1
 8014e44:	4543      	cmp	r3, r8
 8014e46:	dcf1      	bgt.n	8014e2c <_printf_float+0x3fc>
 8014e48:	464b      	mov	r3, r9
 8014e4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014e4e:	e6de      	b.n	8014c0e <_printf_float+0x1de>
 8014e50:	f04f 0800 	mov.w	r8, #0
 8014e54:	f104 0a1a 	add.w	sl, r4, #26
 8014e58:	e7f2      	b.n	8014e40 <_printf_float+0x410>
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	e7df      	b.n	8014e1e <_printf_float+0x3ee>
 8014e5e:	2301      	movs	r3, #1
 8014e60:	464a      	mov	r2, r9
 8014e62:	4631      	mov	r1, r6
 8014e64:	4628      	mov	r0, r5
 8014e66:	47b8      	blx	r7
 8014e68:	3001      	adds	r0, #1
 8014e6a:	f43f ae3e 	beq.w	8014aea <_printf_float+0xba>
 8014e6e:	f108 0801 	add.w	r8, r8, #1
 8014e72:	68e3      	ldr	r3, [r4, #12]
 8014e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e76:	1a9b      	subs	r3, r3, r2
 8014e78:	4543      	cmp	r3, r8
 8014e7a:	dcf0      	bgt.n	8014e5e <_printf_float+0x42e>
 8014e7c:	e6fc      	b.n	8014c78 <_printf_float+0x248>
 8014e7e:	f04f 0800 	mov.w	r8, #0
 8014e82:	f104 0919 	add.w	r9, r4, #25
 8014e86:	e7f4      	b.n	8014e72 <_printf_float+0x442>
 8014e88:	2900      	cmp	r1, #0
 8014e8a:	f43f ae8b 	beq.w	8014ba4 <_printf_float+0x174>
 8014e8e:	2300      	movs	r3, #0
 8014e90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014e94:	ab09      	add	r3, sp, #36	; 0x24
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	ec49 8b10 	vmov	d0, r8, r9
 8014e9c:	6022      	str	r2, [r4, #0]
 8014e9e:	f8cd a004 	str.w	sl, [sp, #4]
 8014ea2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7ff fd2d 	bl	8014906 <__cvt>
 8014eac:	4680      	mov	r8, r0
 8014eae:	e648      	b.n	8014b42 <_printf_float+0x112>

08014eb0 <_printf_common>:
 8014eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eb4:	4691      	mov	r9, r2
 8014eb6:	461f      	mov	r7, r3
 8014eb8:	688a      	ldr	r2, [r1, #8]
 8014eba:	690b      	ldr	r3, [r1, #16]
 8014ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ec0:	4293      	cmp	r3, r2
 8014ec2:	bfb8      	it	lt
 8014ec4:	4613      	movlt	r3, r2
 8014ec6:	f8c9 3000 	str.w	r3, [r9]
 8014eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ece:	4606      	mov	r6, r0
 8014ed0:	460c      	mov	r4, r1
 8014ed2:	b112      	cbz	r2, 8014eda <_printf_common+0x2a>
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	f8c9 3000 	str.w	r3, [r9]
 8014eda:	6823      	ldr	r3, [r4, #0]
 8014edc:	0699      	lsls	r1, r3, #26
 8014ede:	bf42      	ittt	mi
 8014ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ee4:	3302      	addmi	r3, #2
 8014ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8014eea:	6825      	ldr	r5, [r4, #0]
 8014eec:	f015 0506 	ands.w	r5, r5, #6
 8014ef0:	d107      	bne.n	8014f02 <_printf_common+0x52>
 8014ef2:	f104 0a19 	add.w	sl, r4, #25
 8014ef6:	68e3      	ldr	r3, [r4, #12]
 8014ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8014efc:	1a9b      	subs	r3, r3, r2
 8014efe:	42ab      	cmp	r3, r5
 8014f00:	dc28      	bgt.n	8014f54 <_printf_common+0xa4>
 8014f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014f06:	6822      	ldr	r2, [r4, #0]
 8014f08:	3300      	adds	r3, #0
 8014f0a:	bf18      	it	ne
 8014f0c:	2301      	movne	r3, #1
 8014f0e:	0692      	lsls	r2, r2, #26
 8014f10:	d42d      	bmi.n	8014f6e <_printf_common+0xbe>
 8014f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f16:	4639      	mov	r1, r7
 8014f18:	4630      	mov	r0, r6
 8014f1a:	47c0      	blx	r8
 8014f1c:	3001      	adds	r0, #1
 8014f1e:	d020      	beq.n	8014f62 <_printf_common+0xb2>
 8014f20:	6823      	ldr	r3, [r4, #0]
 8014f22:	68e5      	ldr	r5, [r4, #12]
 8014f24:	f8d9 2000 	ldr.w	r2, [r9]
 8014f28:	f003 0306 	and.w	r3, r3, #6
 8014f2c:	2b04      	cmp	r3, #4
 8014f2e:	bf08      	it	eq
 8014f30:	1aad      	subeq	r5, r5, r2
 8014f32:	68a3      	ldr	r3, [r4, #8]
 8014f34:	6922      	ldr	r2, [r4, #16]
 8014f36:	bf0c      	ite	eq
 8014f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f3c:	2500      	movne	r5, #0
 8014f3e:	4293      	cmp	r3, r2
 8014f40:	bfc4      	itt	gt
 8014f42:	1a9b      	subgt	r3, r3, r2
 8014f44:	18ed      	addgt	r5, r5, r3
 8014f46:	f04f 0900 	mov.w	r9, #0
 8014f4a:	341a      	adds	r4, #26
 8014f4c:	454d      	cmp	r5, r9
 8014f4e:	d11a      	bne.n	8014f86 <_printf_common+0xd6>
 8014f50:	2000      	movs	r0, #0
 8014f52:	e008      	b.n	8014f66 <_printf_common+0xb6>
 8014f54:	2301      	movs	r3, #1
 8014f56:	4652      	mov	r2, sl
 8014f58:	4639      	mov	r1, r7
 8014f5a:	4630      	mov	r0, r6
 8014f5c:	47c0      	blx	r8
 8014f5e:	3001      	adds	r0, #1
 8014f60:	d103      	bne.n	8014f6a <_printf_common+0xba>
 8014f62:	f04f 30ff 	mov.w	r0, #4294967295
 8014f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f6a:	3501      	adds	r5, #1
 8014f6c:	e7c3      	b.n	8014ef6 <_printf_common+0x46>
 8014f6e:	18e1      	adds	r1, r4, r3
 8014f70:	1c5a      	adds	r2, r3, #1
 8014f72:	2030      	movs	r0, #48	; 0x30
 8014f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f78:	4422      	add	r2, r4
 8014f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f82:	3302      	adds	r3, #2
 8014f84:	e7c5      	b.n	8014f12 <_printf_common+0x62>
 8014f86:	2301      	movs	r3, #1
 8014f88:	4622      	mov	r2, r4
 8014f8a:	4639      	mov	r1, r7
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	47c0      	blx	r8
 8014f90:	3001      	adds	r0, #1
 8014f92:	d0e6      	beq.n	8014f62 <_printf_common+0xb2>
 8014f94:	f109 0901 	add.w	r9, r9, #1
 8014f98:	e7d8      	b.n	8014f4c <_printf_common+0x9c>
	...

08014f9c <_printf_i>:
 8014f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014fa4:	460c      	mov	r4, r1
 8014fa6:	7e09      	ldrb	r1, [r1, #24]
 8014fa8:	b085      	sub	sp, #20
 8014faa:	296e      	cmp	r1, #110	; 0x6e
 8014fac:	4617      	mov	r7, r2
 8014fae:	4606      	mov	r6, r0
 8014fb0:	4698      	mov	r8, r3
 8014fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fb4:	f000 80b3 	beq.w	801511e <_printf_i+0x182>
 8014fb8:	d822      	bhi.n	8015000 <_printf_i+0x64>
 8014fba:	2963      	cmp	r1, #99	; 0x63
 8014fbc:	d036      	beq.n	801502c <_printf_i+0x90>
 8014fbe:	d80a      	bhi.n	8014fd6 <_printf_i+0x3a>
 8014fc0:	2900      	cmp	r1, #0
 8014fc2:	f000 80b9 	beq.w	8015138 <_printf_i+0x19c>
 8014fc6:	2958      	cmp	r1, #88	; 0x58
 8014fc8:	f000 8083 	beq.w	80150d2 <_printf_i+0x136>
 8014fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014fd4:	e032      	b.n	801503c <_printf_i+0xa0>
 8014fd6:	2964      	cmp	r1, #100	; 0x64
 8014fd8:	d001      	beq.n	8014fde <_printf_i+0x42>
 8014fda:	2969      	cmp	r1, #105	; 0x69
 8014fdc:	d1f6      	bne.n	8014fcc <_printf_i+0x30>
 8014fde:	6820      	ldr	r0, [r4, #0]
 8014fe0:	6813      	ldr	r3, [r2, #0]
 8014fe2:	0605      	lsls	r5, r0, #24
 8014fe4:	f103 0104 	add.w	r1, r3, #4
 8014fe8:	d52a      	bpl.n	8015040 <_printf_i+0xa4>
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	6011      	str	r1, [r2, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	da03      	bge.n	8014ffa <_printf_i+0x5e>
 8014ff2:	222d      	movs	r2, #45	; 0x2d
 8014ff4:	425b      	negs	r3, r3
 8014ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014ffa:	486f      	ldr	r0, [pc, #444]	; (80151b8 <_printf_i+0x21c>)
 8014ffc:	220a      	movs	r2, #10
 8014ffe:	e039      	b.n	8015074 <_printf_i+0xd8>
 8015000:	2973      	cmp	r1, #115	; 0x73
 8015002:	f000 809d 	beq.w	8015140 <_printf_i+0x1a4>
 8015006:	d808      	bhi.n	801501a <_printf_i+0x7e>
 8015008:	296f      	cmp	r1, #111	; 0x6f
 801500a:	d020      	beq.n	801504e <_printf_i+0xb2>
 801500c:	2970      	cmp	r1, #112	; 0x70
 801500e:	d1dd      	bne.n	8014fcc <_printf_i+0x30>
 8015010:	6823      	ldr	r3, [r4, #0]
 8015012:	f043 0320 	orr.w	r3, r3, #32
 8015016:	6023      	str	r3, [r4, #0]
 8015018:	e003      	b.n	8015022 <_printf_i+0x86>
 801501a:	2975      	cmp	r1, #117	; 0x75
 801501c:	d017      	beq.n	801504e <_printf_i+0xb2>
 801501e:	2978      	cmp	r1, #120	; 0x78
 8015020:	d1d4      	bne.n	8014fcc <_printf_i+0x30>
 8015022:	2378      	movs	r3, #120	; 0x78
 8015024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015028:	4864      	ldr	r0, [pc, #400]	; (80151bc <_printf_i+0x220>)
 801502a:	e055      	b.n	80150d8 <_printf_i+0x13c>
 801502c:	6813      	ldr	r3, [r2, #0]
 801502e:	1d19      	adds	r1, r3, #4
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	6011      	str	r1, [r2, #0]
 8015034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801503c:	2301      	movs	r3, #1
 801503e:	e08c      	b.n	801515a <_printf_i+0x1be>
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	6011      	str	r1, [r2, #0]
 8015044:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015048:	bf18      	it	ne
 801504a:	b21b      	sxthne	r3, r3
 801504c:	e7cf      	b.n	8014fee <_printf_i+0x52>
 801504e:	6813      	ldr	r3, [r2, #0]
 8015050:	6825      	ldr	r5, [r4, #0]
 8015052:	1d18      	adds	r0, r3, #4
 8015054:	6010      	str	r0, [r2, #0]
 8015056:	0628      	lsls	r0, r5, #24
 8015058:	d501      	bpl.n	801505e <_printf_i+0xc2>
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	e002      	b.n	8015064 <_printf_i+0xc8>
 801505e:	0668      	lsls	r0, r5, #25
 8015060:	d5fb      	bpl.n	801505a <_printf_i+0xbe>
 8015062:	881b      	ldrh	r3, [r3, #0]
 8015064:	4854      	ldr	r0, [pc, #336]	; (80151b8 <_printf_i+0x21c>)
 8015066:	296f      	cmp	r1, #111	; 0x6f
 8015068:	bf14      	ite	ne
 801506a:	220a      	movne	r2, #10
 801506c:	2208      	moveq	r2, #8
 801506e:	2100      	movs	r1, #0
 8015070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015074:	6865      	ldr	r5, [r4, #4]
 8015076:	60a5      	str	r5, [r4, #8]
 8015078:	2d00      	cmp	r5, #0
 801507a:	f2c0 8095 	blt.w	80151a8 <_printf_i+0x20c>
 801507e:	6821      	ldr	r1, [r4, #0]
 8015080:	f021 0104 	bic.w	r1, r1, #4
 8015084:	6021      	str	r1, [r4, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d13d      	bne.n	8015106 <_printf_i+0x16a>
 801508a:	2d00      	cmp	r5, #0
 801508c:	f040 808e 	bne.w	80151ac <_printf_i+0x210>
 8015090:	4665      	mov	r5, ip
 8015092:	2a08      	cmp	r2, #8
 8015094:	d10b      	bne.n	80150ae <_printf_i+0x112>
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	07db      	lsls	r3, r3, #31
 801509a:	d508      	bpl.n	80150ae <_printf_i+0x112>
 801509c:	6923      	ldr	r3, [r4, #16]
 801509e:	6862      	ldr	r2, [r4, #4]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	bfde      	ittt	le
 80150a4:	2330      	movle	r3, #48	; 0x30
 80150a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80150ae:	ebac 0305 	sub.w	r3, ip, r5
 80150b2:	6123      	str	r3, [r4, #16]
 80150b4:	f8cd 8000 	str.w	r8, [sp]
 80150b8:	463b      	mov	r3, r7
 80150ba:	aa03      	add	r2, sp, #12
 80150bc:	4621      	mov	r1, r4
 80150be:	4630      	mov	r0, r6
 80150c0:	f7ff fef6 	bl	8014eb0 <_printf_common>
 80150c4:	3001      	adds	r0, #1
 80150c6:	d14d      	bne.n	8015164 <_printf_i+0x1c8>
 80150c8:	f04f 30ff 	mov.w	r0, #4294967295
 80150cc:	b005      	add	sp, #20
 80150ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150d2:	4839      	ldr	r0, [pc, #228]	; (80151b8 <_printf_i+0x21c>)
 80150d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80150d8:	6813      	ldr	r3, [r2, #0]
 80150da:	6821      	ldr	r1, [r4, #0]
 80150dc:	1d1d      	adds	r5, r3, #4
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	6015      	str	r5, [r2, #0]
 80150e2:	060a      	lsls	r2, r1, #24
 80150e4:	d50b      	bpl.n	80150fe <_printf_i+0x162>
 80150e6:	07ca      	lsls	r2, r1, #31
 80150e8:	bf44      	itt	mi
 80150ea:	f041 0120 	orrmi.w	r1, r1, #32
 80150ee:	6021      	strmi	r1, [r4, #0]
 80150f0:	b91b      	cbnz	r3, 80150fa <_printf_i+0x15e>
 80150f2:	6822      	ldr	r2, [r4, #0]
 80150f4:	f022 0220 	bic.w	r2, r2, #32
 80150f8:	6022      	str	r2, [r4, #0]
 80150fa:	2210      	movs	r2, #16
 80150fc:	e7b7      	b.n	801506e <_printf_i+0xd2>
 80150fe:	064d      	lsls	r5, r1, #25
 8015100:	bf48      	it	mi
 8015102:	b29b      	uxthmi	r3, r3
 8015104:	e7ef      	b.n	80150e6 <_printf_i+0x14a>
 8015106:	4665      	mov	r5, ip
 8015108:	fbb3 f1f2 	udiv	r1, r3, r2
 801510c:	fb02 3311 	mls	r3, r2, r1, r3
 8015110:	5cc3      	ldrb	r3, [r0, r3]
 8015112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015116:	460b      	mov	r3, r1
 8015118:	2900      	cmp	r1, #0
 801511a:	d1f5      	bne.n	8015108 <_printf_i+0x16c>
 801511c:	e7b9      	b.n	8015092 <_printf_i+0xf6>
 801511e:	6813      	ldr	r3, [r2, #0]
 8015120:	6825      	ldr	r5, [r4, #0]
 8015122:	6961      	ldr	r1, [r4, #20]
 8015124:	1d18      	adds	r0, r3, #4
 8015126:	6010      	str	r0, [r2, #0]
 8015128:	0628      	lsls	r0, r5, #24
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	d501      	bpl.n	8015132 <_printf_i+0x196>
 801512e:	6019      	str	r1, [r3, #0]
 8015130:	e002      	b.n	8015138 <_printf_i+0x19c>
 8015132:	066a      	lsls	r2, r5, #25
 8015134:	d5fb      	bpl.n	801512e <_printf_i+0x192>
 8015136:	8019      	strh	r1, [r3, #0]
 8015138:	2300      	movs	r3, #0
 801513a:	6123      	str	r3, [r4, #16]
 801513c:	4665      	mov	r5, ip
 801513e:	e7b9      	b.n	80150b4 <_printf_i+0x118>
 8015140:	6813      	ldr	r3, [r2, #0]
 8015142:	1d19      	adds	r1, r3, #4
 8015144:	6011      	str	r1, [r2, #0]
 8015146:	681d      	ldr	r5, [r3, #0]
 8015148:	6862      	ldr	r2, [r4, #4]
 801514a:	2100      	movs	r1, #0
 801514c:	4628      	mov	r0, r5
 801514e:	f7eb f85f 	bl	8000210 <memchr>
 8015152:	b108      	cbz	r0, 8015158 <_printf_i+0x1bc>
 8015154:	1b40      	subs	r0, r0, r5
 8015156:	6060      	str	r0, [r4, #4]
 8015158:	6863      	ldr	r3, [r4, #4]
 801515a:	6123      	str	r3, [r4, #16]
 801515c:	2300      	movs	r3, #0
 801515e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015162:	e7a7      	b.n	80150b4 <_printf_i+0x118>
 8015164:	6923      	ldr	r3, [r4, #16]
 8015166:	462a      	mov	r2, r5
 8015168:	4639      	mov	r1, r7
 801516a:	4630      	mov	r0, r6
 801516c:	47c0      	blx	r8
 801516e:	3001      	adds	r0, #1
 8015170:	d0aa      	beq.n	80150c8 <_printf_i+0x12c>
 8015172:	6823      	ldr	r3, [r4, #0]
 8015174:	079b      	lsls	r3, r3, #30
 8015176:	d413      	bmi.n	80151a0 <_printf_i+0x204>
 8015178:	68e0      	ldr	r0, [r4, #12]
 801517a:	9b03      	ldr	r3, [sp, #12]
 801517c:	4298      	cmp	r0, r3
 801517e:	bfb8      	it	lt
 8015180:	4618      	movlt	r0, r3
 8015182:	e7a3      	b.n	80150cc <_printf_i+0x130>
 8015184:	2301      	movs	r3, #1
 8015186:	464a      	mov	r2, r9
 8015188:	4639      	mov	r1, r7
 801518a:	4630      	mov	r0, r6
 801518c:	47c0      	blx	r8
 801518e:	3001      	adds	r0, #1
 8015190:	d09a      	beq.n	80150c8 <_printf_i+0x12c>
 8015192:	3501      	adds	r5, #1
 8015194:	68e3      	ldr	r3, [r4, #12]
 8015196:	9a03      	ldr	r2, [sp, #12]
 8015198:	1a9b      	subs	r3, r3, r2
 801519a:	42ab      	cmp	r3, r5
 801519c:	dcf2      	bgt.n	8015184 <_printf_i+0x1e8>
 801519e:	e7eb      	b.n	8015178 <_printf_i+0x1dc>
 80151a0:	2500      	movs	r5, #0
 80151a2:	f104 0919 	add.w	r9, r4, #25
 80151a6:	e7f5      	b.n	8015194 <_printf_i+0x1f8>
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d1ac      	bne.n	8015106 <_printf_i+0x16a>
 80151ac:	7803      	ldrb	r3, [r0, #0]
 80151ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80151b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151b6:	e76c      	b.n	8015092 <_printf_i+0xf6>
 80151b8:	080194f0 	.word	0x080194f0
 80151bc:	08019501 	.word	0x08019501

080151c0 <_scanf_float>:
 80151c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151c4:	469a      	mov	sl, r3
 80151c6:	688b      	ldr	r3, [r1, #8]
 80151c8:	4616      	mov	r6, r2
 80151ca:	1e5a      	subs	r2, r3, #1
 80151cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80151d0:	b087      	sub	sp, #28
 80151d2:	bf83      	ittte	hi
 80151d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80151d8:	189b      	addhi	r3, r3, r2
 80151da:	9301      	strhi	r3, [sp, #4]
 80151dc:	2300      	movls	r3, #0
 80151de:	bf86      	itte	hi
 80151e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80151e4:	608b      	strhi	r3, [r1, #8]
 80151e6:	9301      	strls	r3, [sp, #4]
 80151e8:	680b      	ldr	r3, [r1, #0]
 80151ea:	4688      	mov	r8, r1
 80151ec:	f04f 0b00 	mov.w	fp, #0
 80151f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80151f4:	f848 3b1c 	str.w	r3, [r8], #28
 80151f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80151fc:	4607      	mov	r7, r0
 80151fe:	460c      	mov	r4, r1
 8015200:	4645      	mov	r5, r8
 8015202:	465a      	mov	r2, fp
 8015204:	46d9      	mov	r9, fp
 8015206:	f8cd b008 	str.w	fp, [sp, #8]
 801520a:	68a1      	ldr	r1, [r4, #8]
 801520c:	b181      	cbz	r1, 8015230 <_scanf_float+0x70>
 801520e:	6833      	ldr	r3, [r6, #0]
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	2b49      	cmp	r3, #73	; 0x49
 8015214:	d071      	beq.n	80152fa <_scanf_float+0x13a>
 8015216:	d84d      	bhi.n	80152b4 <_scanf_float+0xf4>
 8015218:	2b39      	cmp	r3, #57	; 0x39
 801521a:	d840      	bhi.n	801529e <_scanf_float+0xde>
 801521c:	2b31      	cmp	r3, #49	; 0x31
 801521e:	f080 8088 	bcs.w	8015332 <_scanf_float+0x172>
 8015222:	2b2d      	cmp	r3, #45	; 0x2d
 8015224:	f000 8090 	beq.w	8015348 <_scanf_float+0x188>
 8015228:	d815      	bhi.n	8015256 <_scanf_float+0x96>
 801522a:	2b2b      	cmp	r3, #43	; 0x2b
 801522c:	f000 808c 	beq.w	8015348 <_scanf_float+0x188>
 8015230:	f1b9 0f00 	cmp.w	r9, #0
 8015234:	d003      	beq.n	801523e <_scanf_float+0x7e>
 8015236:	6823      	ldr	r3, [r4, #0]
 8015238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	3a01      	subs	r2, #1
 8015240:	2a01      	cmp	r2, #1
 8015242:	f200 80ea 	bhi.w	801541a <_scanf_float+0x25a>
 8015246:	4545      	cmp	r5, r8
 8015248:	f200 80dc 	bhi.w	8015404 <_scanf_float+0x244>
 801524c:	2601      	movs	r6, #1
 801524e:	4630      	mov	r0, r6
 8015250:	b007      	add	sp, #28
 8015252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015256:	2b2e      	cmp	r3, #46	; 0x2e
 8015258:	f000 809f 	beq.w	801539a <_scanf_float+0x1da>
 801525c:	2b30      	cmp	r3, #48	; 0x30
 801525e:	d1e7      	bne.n	8015230 <_scanf_float+0x70>
 8015260:	6820      	ldr	r0, [r4, #0]
 8015262:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015266:	d064      	beq.n	8015332 <_scanf_float+0x172>
 8015268:	9b01      	ldr	r3, [sp, #4]
 801526a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801526e:	6020      	str	r0, [r4, #0]
 8015270:	f109 0901 	add.w	r9, r9, #1
 8015274:	b11b      	cbz	r3, 801527e <_scanf_float+0xbe>
 8015276:	3b01      	subs	r3, #1
 8015278:	3101      	adds	r1, #1
 801527a:	9301      	str	r3, [sp, #4]
 801527c:	60a1      	str	r1, [r4, #8]
 801527e:	68a3      	ldr	r3, [r4, #8]
 8015280:	3b01      	subs	r3, #1
 8015282:	60a3      	str	r3, [r4, #8]
 8015284:	6923      	ldr	r3, [r4, #16]
 8015286:	3301      	adds	r3, #1
 8015288:	6123      	str	r3, [r4, #16]
 801528a:	6873      	ldr	r3, [r6, #4]
 801528c:	3b01      	subs	r3, #1
 801528e:	2b00      	cmp	r3, #0
 8015290:	6073      	str	r3, [r6, #4]
 8015292:	f340 80ac 	ble.w	80153ee <_scanf_float+0x22e>
 8015296:	6833      	ldr	r3, [r6, #0]
 8015298:	3301      	adds	r3, #1
 801529a:	6033      	str	r3, [r6, #0]
 801529c:	e7b5      	b.n	801520a <_scanf_float+0x4a>
 801529e:	2b45      	cmp	r3, #69	; 0x45
 80152a0:	f000 8085 	beq.w	80153ae <_scanf_float+0x1ee>
 80152a4:	2b46      	cmp	r3, #70	; 0x46
 80152a6:	d06a      	beq.n	801537e <_scanf_float+0x1be>
 80152a8:	2b41      	cmp	r3, #65	; 0x41
 80152aa:	d1c1      	bne.n	8015230 <_scanf_float+0x70>
 80152ac:	2a01      	cmp	r2, #1
 80152ae:	d1bf      	bne.n	8015230 <_scanf_float+0x70>
 80152b0:	2202      	movs	r2, #2
 80152b2:	e046      	b.n	8015342 <_scanf_float+0x182>
 80152b4:	2b65      	cmp	r3, #101	; 0x65
 80152b6:	d07a      	beq.n	80153ae <_scanf_float+0x1ee>
 80152b8:	d818      	bhi.n	80152ec <_scanf_float+0x12c>
 80152ba:	2b54      	cmp	r3, #84	; 0x54
 80152bc:	d066      	beq.n	801538c <_scanf_float+0x1cc>
 80152be:	d811      	bhi.n	80152e4 <_scanf_float+0x124>
 80152c0:	2b4e      	cmp	r3, #78	; 0x4e
 80152c2:	d1b5      	bne.n	8015230 <_scanf_float+0x70>
 80152c4:	2a00      	cmp	r2, #0
 80152c6:	d146      	bne.n	8015356 <_scanf_float+0x196>
 80152c8:	f1b9 0f00 	cmp.w	r9, #0
 80152cc:	d145      	bne.n	801535a <_scanf_float+0x19a>
 80152ce:	6821      	ldr	r1, [r4, #0]
 80152d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80152d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80152d8:	d13f      	bne.n	801535a <_scanf_float+0x19a>
 80152da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80152de:	6021      	str	r1, [r4, #0]
 80152e0:	2201      	movs	r2, #1
 80152e2:	e02e      	b.n	8015342 <_scanf_float+0x182>
 80152e4:	2b59      	cmp	r3, #89	; 0x59
 80152e6:	d01e      	beq.n	8015326 <_scanf_float+0x166>
 80152e8:	2b61      	cmp	r3, #97	; 0x61
 80152ea:	e7de      	b.n	80152aa <_scanf_float+0xea>
 80152ec:	2b6e      	cmp	r3, #110	; 0x6e
 80152ee:	d0e9      	beq.n	80152c4 <_scanf_float+0x104>
 80152f0:	d815      	bhi.n	801531e <_scanf_float+0x15e>
 80152f2:	2b66      	cmp	r3, #102	; 0x66
 80152f4:	d043      	beq.n	801537e <_scanf_float+0x1be>
 80152f6:	2b69      	cmp	r3, #105	; 0x69
 80152f8:	d19a      	bne.n	8015230 <_scanf_float+0x70>
 80152fa:	f1bb 0f00 	cmp.w	fp, #0
 80152fe:	d138      	bne.n	8015372 <_scanf_float+0x1b2>
 8015300:	f1b9 0f00 	cmp.w	r9, #0
 8015304:	d197      	bne.n	8015236 <_scanf_float+0x76>
 8015306:	6821      	ldr	r1, [r4, #0]
 8015308:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801530c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015310:	d195      	bne.n	801523e <_scanf_float+0x7e>
 8015312:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015316:	6021      	str	r1, [r4, #0]
 8015318:	f04f 0b01 	mov.w	fp, #1
 801531c:	e011      	b.n	8015342 <_scanf_float+0x182>
 801531e:	2b74      	cmp	r3, #116	; 0x74
 8015320:	d034      	beq.n	801538c <_scanf_float+0x1cc>
 8015322:	2b79      	cmp	r3, #121	; 0x79
 8015324:	d184      	bne.n	8015230 <_scanf_float+0x70>
 8015326:	f1bb 0f07 	cmp.w	fp, #7
 801532a:	d181      	bne.n	8015230 <_scanf_float+0x70>
 801532c:	f04f 0b08 	mov.w	fp, #8
 8015330:	e007      	b.n	8015342 <_scanf_float+0x182>
 8015332:	eb12 0f0b 	cmn.w	r2, fp
 8015336:	f47f af7b 	bne.w	8015230 <_scanf_float+0x70>
 801533a:	6821      	ldr	r1, [r4, #0]
 801533c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015340:	6021      	str	r1, [r4, #0]
 8015342:	702b      	strb	r3, [r5, #0]
 8015344:	3501      	adds	r5, #1
 8015346:	e79a      	b.n	801527e <_scanf_float+0xbe>
 8015348:	6821      	ldr	r1, [r4, #0]
 801534a:	0608      	lsls	r0, r1, #24
 801534c:	f57f af70 	bpl.w	8015230 <_scanf_float+0x70>
 8015350:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015354:	e7f4      	b.n	8015340 <_scanf_float+0x180>
 8015356:	2a02      	cmp	r2, #2
 8015358:	d047      	beq.n	80153ea <_scanf_float+0x22a>
 801535a:	f1bb 0f01 	cmp.w	fp, #1
 801535e:	d003      	beq.n	8015368 <_scanf_float+0x1a8>
 8015360:	f1bb 0f04 	cmp.w	fp, #4
 8015364:	f47f af64 	bne.w	8015230 <_scanf_float+0x70>
 8015368:	f10b 0b01 	add.w	fp, fp, #1
 801536c:	fa5f fb8b 	uxtb.w	fp, fp
 8015370:	e7e7      	b.n	8015342 <_scanf_float+0x182>
 8015372:	f1bb 0f03 	cmp.w	fp, #3
 8015376:	d0f7      	beq.n	8015368 <_scanf_float+0x1a8>
 8015378:	f1bb 0f05 	cmp.w	fp, #5
 801537c:	e7f2      	b.n	8015364 <_scanf_float+0x1a4>
 801537e:	f1bb 0f02 	cmp.w	fp, #2
 8015382:	f47f af55 	bne.w	8015230 <_scanf_float+0x70>
 8015386:	f04f 0b03 	mov.w	fp, #3
 801538a:	e7da      	b.n	8015342 <_scanf_float+0x182>
 801538c:	f1bb 0f06 	cmp.w	fp, #6
 8015390:	f47f af4e 	bne.w	8015230 <_scanf_float+0x70>
 8015394:	f04f 0b07 	mov.w	fp, #7
 8015398:	e7d3      	b.n	8015342 <_scanf_float+0x182>
 801539a:	6821      	ldr	r1, [r4, #0]
 801539c:	0588      	lsls	r0, r1, #22
 801539e:	f57f af47 	bpl.w	8015230 <_scanf_float+0x70>
 80153a2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80153a6:	6021      	str	r1, [r4, #0]
 80153a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80153ac:	e7c9      	b.n	8015342 <_scanf_float+0x182>
 80153ae:	6821      	ldr	r1, [r4, #0]
 80153b0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80153b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80153b8:	d006      	beq.n	80153c8 <_scanf_float+0x208>
 80153ba:	0548      	lsls	r0, r1, #21
 80153bc:	f57f af38 	bpl.w	8015230 <_scanf_float+0x70>
 80153c0:	f1b9 0f00 	cmp.w	r9, #0
 80153c4:	f43f af3b 	beq.w	801523e <_scanf_float+0x7e>
 80153c8:	0588      	lsls	r0, r1, #22
 80153ca:	bf58      	it	pl
 80153cc:	9802      	ldrpl	r0, [sp, #8]
 80153ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80153d2:	bf58      	it	pl
 80153d4:	eba9 0000 	subpl.w	r0, r9, r0
 80153d8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80153dc:	bf58      	it	pl
 80153de:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80153e2:	6021      	str	r1, [r4, #0]
 80153e4:	f04f 0900 	mov.w	r9, #0
 80153e8:	e7ab      	b.n	8015342 <_scanf_float+0x182>
 80153ea:	2203      	movs	r2, #3
 80153ec:	e7a9      	b.n	8015342 <_scanf_float+0x182>
 80153ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80153f2:	9205      	str	r2, [sp, #20]
 80153f4:	4631      	mov	r1, r6
 80153f6:	4638      	mov	r0, r7
 80153f8:	4798      	blx	r3
 80153fa:	9a05      	ldr	r2, [sp, #20]
 80153fc:	2800      	cmp	r0, #0
 80153fe:	f43f af04 	beq.w	801520a <_scanf_float+0x4a>
 8015402:	e715      	b.n	8015230 <_scanf_float+0x70>
 8015404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801540c:	4632      	mov	r2, r6
 801540e:	4638      	mov	r0, r7
 8015410:	4798      	blx	r3
 8015412:	6923      	ldr	r3, [r4, #16]
 8015414:	3b01      	subs	r3, #1
 8015416:	6123      	str	r3, [r4, #16]
 8015418:	e715      	b.n	8015246 <_scanf_float+0x86>
 801541a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801541e:	2b06      	cmp	r3, #6
 8015420:	d80a      	bhi.n	8015438 <_scanf_float+0x278>
 8015422:	f1bb 0f02 	cmp.w	fp, #2
 8015426:	d968      	bls.n	80154fa <_scanf_float+0x33a>
 8015428:	f1ab 0b03 	sub.w	fp, fp, #3
 801542c:	fa5f fb8b 	uxtb.w	fp, fp
 8015430:	eba5 0b0b 	sub.w	fp, r5, fp
 8015434:	455d      	cmp	r5, fp
 8015436:	d14b      	bne.n	80154d0 <_scanf_float+0x310>
 8015438:	6823      	ldr	r3, [r4, #0]
 801543a:	05da      	lsls	r2, r3, #23
 801543c:	d51f      	bpl.n	801547e <_scanf_float+0x2be>
 801543e:	055b      	lsls	r3, r3, #21
 8015440:	d468      	bmi.n	8015514 <_scanf_float+0x354>
 8015442:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015446:	6923      	ldr	r3, [r4, #16]
 8015448:	2965      	cmp	r1, #101	; 0x65
 801544a:	f103 33ff 	add.w	r3, r3, #4294967295
 801544e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015452:	6123      	str	r3, [r4, #16]
 8015454:	d00d      	beq.n	8015472 <_scanf_float+0x2b2>
 8015456:	2945      	cmp	r1, #69	; 0x45
 8015458:	d00b      	beq.n	8015472 <_scanf_float+0x2b2>
 801545a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801545e:	4632      	mov	r2, r6
 8015460:	4638      	mov	r0, r7
 8015462:	4798      	blx	r3
 8015464:	6923      	ldr	r3, [r4, #16]
 8015466:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801546a:	3b01      	subs	r3, #1
 801546c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015470:	6123      	str	r3, [r4, #16]
 8015472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015476:	4632      	mov	r2, r6
 8015478:	4638      	mov	r0, r7
 801547a:	4798      	blx	r3
 801547c:	465d      	mov	r5, fp
 801547e:	6826      	ldr	r6, [r4, #0]
 8015480:	f016 0610 	ands.w	r6, r6, #16
 8015484:	d17a      	bne.n	801557c <_scanf_float+0x3bc>
 8015486:	702e      	strb	r6, [r5, #0]
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801548e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015492:	d142      	bne.n	801551a <_scanf_float+0x35a>
 8015494:	9b02      	ldr	r3, [sp, #8]
 8015496:	eba9 0303 	sub.w	r3, r9, r3
 801549a:	425a      	negs	r2, r3
 801549c:	2b00      	cmp	r3, #0
 801549e:	d149      	bne.n	8015534 <_scanf_float+0x374>
 80154a0:	2200      	movs	r2, #0
 80154a2:	4641      	mov	r1, r8
 80154a4:	4638      	mov	r0, r7
 80154a6:	f000 ff0b 	bl	80162c0 <_strtod_r>
 80154aa:	6825      	ldr	r5, [r4, #0]
 80154ac:	f8da 3000 	ldr.w	r3, [sl]
 80154b0:	f015 0f02 	tst.w	r5, #2
 80154b4:	f103 0204 	add.w	r2, r3, #4
 80154b8:	ec59 8b10 	vmov	r8, r9, d0
 80154bc:	f8ca 2000 	str.w	r2, [sl]
 80154c0:	d043      	beq.n	801554a <_scanf_float+0x38a>
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	e9c3 8900 	strd	r8, r9, [r3]
 80154c8:	68e3      	ldr	r3, [r4, #12]
 80154ca:	3301      	adds	r3, #1
 80154cc:	60e3      	str	r3, [r4, #12]
 80154ce:	e6be      	b.n	801524e <_scanf_float+0x8e>
 80154d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80154d8:	4632      	mov	r2, r6
 80154da:	4638      	mov	r0, r7
 80154dc:	4798      	blx	r3
 80154de:	6923      	ldr	r3, [r4, #16]
 80154e0:	3b01      	subs	r3, #1
 80154e2:	6123      	str	r3, [r4, #16]
 80154e4:	e7a6      	b.n	8015434 <_scanf_float+0x274>
 80154e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80154ee:	4632      	mov	r2, r6
 80154f0:	4638      	mov	r0, r7
 80154f2:	4798      	blx	r3
 80154f4:	6923      	ldr	r3, [r4, #16]
 80154f6:	3b01      	subs	r3, #1
 80154f8:	6123      	str	r3, [r4, #16]
 80154fa:	4545      	cmp	r5, r8
 80154fc:	d8f3      	bhi.n	80154e6 <_scanf_float+0x326>
 80154fe:	e6a5      	b.n	801524c <_scanf_float+0x8c>
 8015500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015504:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015508:	4632      	mov	r2, r6
 801550a:	4638      	mov	r0, r7
 801550c:	4798      	blx	r3
 801550e:	6923      	ldr	r3, [r4, #16]
 8015510:	3b01      	subs	r3, #1
 8015512:	6123      	str	r3, [r4, #16]
 8015514:	4545      	cmp	r5, r8
 8015516:	d8f3      	bhi.n	8015500 <_scanf_float+0x340>
 8015518:	e698      	b.n	801524c <_scanf_float+0x8c>
 801551a:	9b03      	ldr	r3, [sp, #12]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d0bf      	beq.n	80154a0 <_scanf_float+0x2e0>
 8015520:	9904      	ldr	r1, [sp, #16]
 8015522:	230a      	movs	r3, #10
 8015524:	4632      	mov	r2, r6
 8015526:	3101      	adds	r1, #1
 8015528:	4638      	mov	r0, r7
 801552a:	f000 ff55 	bl	80163d8 <_strtol_r>
 801552e:	9b03      	ldr	r3, [sp, #12]
 8015530:	9d04      	ldr	r5, [sp, #16]
 8015532:	1ac2      	subs	r2, r0, r3
 8015534:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015538:	429d      	cmp	r5, r3
 801553a:	bf28      	it	cs
 801553c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015540:	490f      	ldr	r1, [pc, #60]	; (8015580 <_scanf_float+0x3c0>)
 8015542:	4628      	mov	r0, r5
 8015544:	f000 f858 	bl	80155f8 <siprintf>
 8015548:	e7aa      	b.n	80154a0 <_scanf_float+0x2e0>
 801554a:	f015 0504 	ands.w	r5, r5, #4
 801554e:	d1b8      	bne.n	80154c2 <_scanf_float+0x302>
 8015550:	681f      	ldr	r7, [r3, #0]
 8015552:	ee10 2a10 	vmov	r2, s0
 8015556:	464b      	mov	r3, r9
 8015558:	ee10 0a10 	vmov	r0, s0
 801555c:	4649      	mov	r1, r9
 801555e:	f7eb fafd 	bl	8000b5c <__aeabi_dcmpun>
 8015562:	b128      	cbz	r0, 8015570 <_scanf_float+0x3b0>
 8015564:	4628      	mov	r0, r5
 8015566:	f000 f80d 	bl	8015584 <nanf>
 801556a:	ed87 0a00 	vstr	s0, [r7]
 801556e:	e7ab      	b.n	80154c8 <_scanf_float+0x308>
 8015570:	4640      	mov	r0, r8
 8015572:	4649      	mov	r1, r9
 8015574:	f7eb fb50 	bl	8000c18 <__aeabi_d2f>
 8015578:	6038      	str	r0, [r7, #0]
 801557a:	e7a5      	b.n	80154c8 <_scanf_float+0x308>
 801557c:	2600      	movs	r6, #0
 801557e:	e666      	b.n	801524e <_scanf_float+0x8e>
 8015580:	08019512 	.word	0x08019512

08015584 <nanf>:
 8015584:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801558c <nanf+0x8>
 8015588:	4770      	bx	lr
 801558a:	bf00      	nop
 801558c:	7fc00000 	.word	0x7fc00000

08015590 <sniprintf>:
 8015590:	b40c      	push	{r2, r3}
 8015592:	b530      	push	{r4, r5, lr}
 8015594:	4b17      	ldr	r3, [pc, #92]	; (80155f4 <sniprintf+0x64>)
 8015596:	1e0c      	subs	r4, r1, #0
 8015598:	b09d      	sub	sp, #116	; 0x74
 801559a:	681d      	ldr	r5, [r3, #0]
 801559c:	da08      	bge.n	80155b0 <sniprintf+0x20>
 801559e:	238b      	movs	r3, #139	; 0x8b
 80155a0:	602b      	str	r3, [r5, #0]
 80155a2:	f04f 30ff 	mov.w	r0, #4294967295
 80155a6:	b01d      	add	sp, #116	; 0x74
 80155a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155ac:	b002      	add	sp, #8
 80155ae:	4770      	bx	lr
 80155b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80155b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80155b8:	bf14      	ite	ne
 80155ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80155be:	4623      	moveq	r3, r4
 80155c0:	9304      	str	r3, [sp, #16]
 80155c2:	9307      	str	r3, [sp, #28]
 80155c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155c8:	9002      	str	r0, [sp, #8]
 80155ca:	9006      	str	r0, [sp, #24]
 80155cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155d2:	ab21      	add	r3, sp, #132	; 0x84
 80155d4:	a902      	add	r1, sp, #8
 80155d6:	4628      	mov	r0, r5
 80155d8:	9301      	str	r3, [sp, #4]
 80155da:	f002 fde7 	bl	80181ac <_svfiprintf_r>
 80155de:	1c43      	adds	r3, r0, #1
 80155e0:	bfbc      	itt	lt
 80155e2:	238b      	movlt	r3, #139	; 0x8b
 80155e4:	602b      	strlt	r3, [r5, #0]
 80155e6:	2c00      	cmp	r4, #0
 80155e8:	d0dd      	beq.n	80155a6 <sniprintf+0x16>
 80155ea:	9b02      	ldr	r3, [sp, #8]
 80155ec:	2200      	movs	r2, #0
 80155ee:	701a      	strb	r2, [r3, #0]
 80155f0:	e7d9      	b.n	80155a6 <sniprintf+0x16>
 80155f2:	bf00      	nop
 80155f4:	2000000c 	.word	0x2000000c

080155f8 <siprintf>:
 80155f8:	b40e      	push	{r1, r2, r3}
 80155fa:	b500      	push	{lr}
 80155fc:	b09c      	sub	sp, #112	; 0x70
 80155fe:	ab1d      	add	r3, sp, #116	; 0x74
 8015600:	9002      	str	r0, [sp, #8]
 8015602:	9006      	str	r0, [sp, #24]
 8015604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015608:	4809      	ldr	r0, [pc, #36]	; (8015630 <siprintf+0x38>)
 801560a:	9107      	str	r1, [sp, #28]
 801560c:	9104      	str	r1, [sp, #16]
 801560e:	4909      	ldr	r1, [pc, #36]	; (8015634 <siprintf+0x3c>)
 8015610:	f853 2b04 	ldr.w	r2, [r3], #4
 8015614:	9105      	str	r1, [sp, #20]
 8015616:	6800      	ldr	r0, [r0, #0]
 8015618:	9301      	str	r3, [sp, #4]
 801561a:	a902      	add	r1, sp, #8
 801561c:	f002 fdc6 	bl	80181ac <_svfiprintf_r>
 8015620:	9b02      	ldr	r3, [sp, #8]
 8015622:	2200      	movs	r2, #0
 8015624:	701a      	strb	r2, [r3, #0]
 8015626:	b01c      	add	sp, #112	; 0x70
 8015628:	f85d eb04 	ldr.w	lr, [sp], #4
 801562c:	b003      	add	sp, #12
 801562e:	4770      	bx	lr
 8015630:	2000000c 	.word	0x2000000c
 8015634:	ffff0208 	.word	0xffff0208

08015638 <siscanf>:
 8015638:	b40e      	push	{r1, r2, r3}
 801563a:	b530      	push	{r4, r5, lr}
 801563c:	b09c      	sub	sp, #112	; 0x70
 801563e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015640:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015644:	f854 5b04 	ldr.w	r5, [r4], #4
 8015648:	f8ad 2014 	strh.w	r2, [sp, #20]
 801564c:	9002      	str	r0, [sp, #8]
 801564e:	9006      	str	r0, [sp, #24]
 8015650:	f7ea fdd6 	bl	8000200 <strlen>
 8015654:	4b0b      	ldr	r3, [pc, #44]	; (8015684 <siscanf+0x4c>)
 8015656:	9003      	str	r0, [sp, #12]
 8015658:	9007      	str	r0, [sp, #28]
 801565a:	930b      	str	r3, [sp, #44]	; 0x2c
 801565c:	480a      	ldr	r0, [pc, #40]	; (8015688 <siscanf+0x50>)
 801565e:	9401      	str	r4, [sp, #4]
 8015660:	2300      	movs	r3, #0
 8015662:	930f      	str	r3, [sp, #60]	; 0x3c
 8015664:	9314      	str	r3, [sp, #80]	; 0x50
 8015666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801566a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801566e:	462a      	mov	r2, r5
 8015670:	4623      	mov	r3, r4
 8015672:	a902      	add	r1, sp, #8
 8015674:	6800      	ldr	r0, [r0, #0]
 8015676:	f002 feeb 	bl	8018450 <__ssvfiscanf_r>
 801567a:	b01c      	add	sp, #112	; 0x70
 801567c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015680:	b003      	add	sp, #12
 8015682:	4770      	bx	lr
 8015684:	0801568d 	.word	0x0801568d
 8015688:	2000000c 	.word	0x2000000c

0801568c <__seofread>:
 801568c:	2000      	movs	r0, #0
 801568e:	4770      	bx	lr

08015690 <strcpy>:
 8015690:	4603      	mov	r3, r0
 8015692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015696:	f803 2b01 	strb.w	r2, [r3], #1
 801569a:	2a00      	cmp	r2, #0
 801569c:	d1f9      	bne.n	8015692 <strcpy+0x2>
 801569e:	4770      	bx	lr

080156a0 <sulp>:
 80156a0:	b570      	push	{r4, r5, r6, lr}
 80156a2:	4604      	mov	r4, r0
 80156a4:	460d      	mov	r5, r1
 80156a6:	ec45 4b10 	vmov	d0, r4, r5
 80156aa:	4616      	mov	r6, r2
 80156ac:	f002 fb3a 	bl	8017d24 <__ulp>
 80156b0:	ec51 0b10 	vmov	r0, r1, d0
 80156b4:	b17e      	cbz	r6, 80156d6 <sulp+0x36>
 80156b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80156ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80156be:	2b00      	cmp	r3, #0
 80156c0:	dd09      	ble.n	80156d6 <sulp+0x36>
 80156c2:	051b      	lsls	r3, r3, #20
 80156c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80156c8:	2400      	movs	r4, #0
 80156ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80156ce:	4622      	mov	r2, r4
 80156d0:	462b      	mov	r3, r5
 80156d2:	f7ea ffa9 	bl	8000628 <__aeabi_dmul>
 80156d6:	bd70      	pop	{r4, r5, r6, pc}

080156d8 <_strtod_l>:
 80156d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156dc:	461f      	mov	r7, r3
 80156de:	b0a1      	sub	sp, #132	; 0x84
 80156e0:	2300      	movs	r3, #0
 80156e2:	4681      	mov	r9, r0
 80156e4:	4638      	mov	r0, r7
 80156e6:	460e      	mov	r6, r1
 80156e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80156ea:	931c      	str	r3, [sp, #112]	; 0x70
 80156ec:	f002 f824 	bl	8017738 <__localeconv_l>
 80156f0:	4680      	mov	r8, r0
 80156f2:	6800      	ldr	r0, [r0, #0]
 80156f4:	f7ea fd84 	bl	8000200 <strlen>
 80156f8:	f04f 0a00 	mov.w	sl, #0
 80156fc:	4604      	mov	r4, r0
 80156fe:	f04f 0b00 	mov.w	fp, #0
 8015702:	961b      	str	r6, [sp, #108]	; 0x6c
 8015704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015706:	781a      	ldrb	r2, [r3, #0]
 8015708:	2a0d      	cmp	r2, #13
 801570a:	d832      	bhi.n	8015772 <_strtod_l+0x9a>
 801570c:	2a09      	cmp	r2, #9
 801570e:	d236      	bcs.n	801577e <_strtod_l+0xa6>
 8015710:	2a00      	cmp	r2, #0
 8015712:	d03e      	beq.n	8015792 <_strtod_l+0xba>
 8015714:	2300      	movs	r3, #0
 8015716:	930d      	str	r3, [sp, #52]	; 0x34
 8015718:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801571a:	782b      	ldrb	r3, [r5, #0]
 801571c:	2b30      	cmp	r3, #48	; 0x30
 801571e:	f040 80ac 	bne.w	801587a <_strtod_l+0x1a2>
 8015722:	786b      	ldrb	r3, [r5, #1]
 8015724:	2b58      	cmp	r3, #88	; 0x58
 8015726:	d001      	beq.n	801572c <_strtod_l+0x54>
 8015728:	2b78      	cmp	r3, #120	; 0x78
 801572a:	d167      	bne.n	80157fc <_strtod_l+0x124>
 801572c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801572e:	9301      	str	r3, [sp, #4]
 8015730:	ab1c      	add	r3, sp, #112	; 0x70
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	9702      	str	r7, [sp, #8]
 8015736:	ab1d      	add	r3, sp, #116	; 0x74
 8015738:	4a88      	ldr	r2, [pc, #544]	; (801595c <_strtod_l+0x284>)
 801573a:	a91b      	add	r1, sp, #108	; 0x6c
 801573c:	4648      	mov	r0, r9
 801573e:	f001 fd12 	bl	8017166 <__gethex>
 8015742:	f010 0407 	ands.w	r4, r0, #7
 8015746:	4606      	mov	r6, r0
 8015748:	d005      	beq.n	8015756 <_strtod_l+0x7e>
 801574a:	2c06      	cmp	r4, #6
 801574c:	d12b      	bne.n	80157a6 <_strtod_l+0xce>
 801574e:	3501      	adds	r5, #1
 8015750:	2300      	movs	r3, #0
 8015752:	951b      	str	r5, [sp, #108]	; 0x6c
 8015754:	930d      	str	r3, [sp, #52]	; 0x34
 8015756:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015758:	2b00      	cmp	r3, #0
 801575a:	f040 859a 	bne.w	8016292 <_strtod_l+0xbba>
 801575e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015760:	b1e3      	cbz	r3, 801579c <_strtod_l+0xc4>
 8015762:	4652      	mov	r2, sl
 8015764:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015768:	ec43 2b10 	vmov	d0, r2, r3
 801576c:	b021      	add	sp, #132	; 0x84
 801576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015772:	2a2b      	cmp	r2, #43	; 0x2b
 8015774:	d015      	beq.n	80157a2 <_strtod_l+0xca>
 8015776:	2a2d      	cmp	r2, #45	; 0x2d
 8015778:	d004      	beq.n	8015784 <_strtod_l+0xac>
 801577a:	2a20      	cmp	r2, #32
 801577c:	d1ca      	bne.n	8015714 <_strtod_l+0x3c>
 801577e:	3301      	adds	r3, #1
 8015780:	931b      	str	r3, [sp, #108]	; 0x6c
 8015782:	e7bf      	b.n	8015704 <_strtod_l+0x2c>
 8015784:	2201      	movs	r2, #1
 8015786:	920d      	str	r2, [sp, #52]	; 0x34
 8015788:	1c5a      	adds	r2, r3, #1
 801578a:	921b      	str	r2, [sp, #108]	; 0x6c
 801578c:	785b      	ldrb	r3, [r3, #1]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d1c2      	bne.n	8015718 <_strtod_l+0x40>
 8015792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015794:	961b      	str	r6, [sp, #108]	; 0x6c
 8015796:	2b00      	cmp	r3, #0
 8015798:	f040 8579 	bne.w	801628e <_strtod_l+0xbb6>
 801579c:	4652      	mov	r2, sl
 801579e:	465b      	mov	r3, fp
 80157a0:	e7e2      	b.n	8015768 <_strtod_l+0x90>
 80157a2:	2200      	movs	r2, #0
 80157a4:	e7ef      	b.n	8015786 <_strtod_l+0xae>
 80157a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80157a8:	b13a      	cbz	r2, 80157ba <_strtod_l+0xe2>
 80157aa:	2135      	movs	r1, #53	; 0x35
 80157ac:	a81e      	add	r0, sp, #120	; 0x78
 80157ae:	f002 fbb1 	bl	8017f14 <__copybits>
 80157b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80157b4:	4648      	mov	r0, r9
 80157b6:	f002 f81d 	bl	80177f4 <_Bfree>
 80157ba:	3c01      	subs	r4, #1
 80157bc:	2c04      	cmp	r4, #4
 80157be:	d806      	bhi.n	80157ce <_strtod_l+0xf6>
 80157c0:	e8df f004 	tbb	[pc, r4]
 80157c4:	1714030a 	.word	0x1714030a
 80157c8:	0a          	.byte	0x0a
 80157c9:	00          	.byte	0x00
 80157ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80157ce:	0730      	lsls	r0, r6, #28
 80157d0:	d5c1      	bpl.n	8015756 <_strtod_l+0x7e>
 80157d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80157d6:	e7be      	b.n	8015756 <_strtod_l+0x7e>
 80157d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80157dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80157de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80157e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80157e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80157ea:	e7f0      	b.n	80157ce <_strtod_l+0xf6>
 80157ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015960 <_strtod_l+0x288>
 80157f0:	e7ed      	b.n	80157ce <_strtod_l+0xf6>
 80157f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80157f6:	f04f 3aff 	mov.w	sl, #4294967295
 80157fa:	e7e8      	b.n	80157ce <_strtod_l+0xf6>
 80157fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157fe:	1c5a      	adds	r2, r3, #1
 8015800:	921b      	str	r2, [sp, #108]	; 0x6c
 8015802:	785b      	ldrb	r3, [r3, #1]
 8015804:	2b30      	cmp	r3, #48	; 0x30
 8015806:	d0f9      	beq.n	80157fc <_strtod_l+0x124>
 8015808:	2b00      	cmp	r3, #0
 801580a:	d0a4      	beq.n	8015756 <_strtod_l+0x7e>
 801580c:	2301      	movs	r3, #1
 801580e:	2500      	movs	r5, #0
 8015810:	9306      	str	r3, [sp, #24]
 8015812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015814:	9308      	str	r3, [sp, #32]
 8015816:	9507      	str	r5, [sp, #28]
 8015818:	9505      	str	r5, [sp, #20]
 801581a:	220a      	movs	r2, #10
 801581c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801581e:	7807      	ldrb	r7, [r0, #0]
 8015820:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015824:	b2d9      	uxtb	r1, r3
 8015826:	2909      	cmp	r1, #9
 8015828:	d929      	bls.n	801587e <_strtod_l+0x1a6>
 801582a:	4622      	mov	r2, r4
 801582c:	f8d8 1000 	ldr.w	r1, [r8]
 8015830:	f003 f8f8 	bl	8018a24 <strncmp>
 8015834:	2800      	cmp	r0, #0
 8015836:	d031      	beq.n	801589c <_strtod_l+0x1c4>
 8015838:	2000      	movs	r0, #0
 801583a:	9c05      	ldr	r4, [sp, #20]
 801583c:	9004      	str	r0, [sp, #16]
 801583e:	463b      	mov	r3, r7
 8015840:	4602      	mov	r2, r0
 8015842:	2b65      	cmp	r3, #101	; 0x65
 8015844:	d001      	beq.n	801584a <_strtod_l+0x172>
 8015846:	2b45      	cmp	r3, #69	; 0x45
 8015848:	d114      	bne.n	8015874 <_strtod_l+0x19c>
 801584a:	b924      	cbnz	r4, 8015856 <_strtod_l+0x17e>
 801584c:	b910      	cbnz	r0, 8015854 <_strtod_l+0x17c>
 801584e:	9b06      	ldr	r3, [sp, #24]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d09e      	beq.n	8015792 <_strtod_l+0xba>
 8015854:	2400      	movs	r4, #0
 8015856:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015858:	1c73      	adds	r3, r6, #1
 801585a:	931b      	str	r3, [sp, #108]	; 0x6c
 801585c:	7873      	ldrb	r3, [r6, #1]
 801585e:	2b2b      	cmp	r3, #43	; 0x2b
 8015860:	d078      	beq.n	8015954 <_strtod_l+0x27c>
 8015862:	2b2d      	cmp	r3, #45	; 0x2d
 8015864:	d070      	beq.n	8015948 <_strtod_l+0x270>
 8015866:	f04f 0c00 	mov.w	ip, #0
 801586a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801586e:	2f09      	cmp	r7, #9
 8015870:	d97c      	bls.n	801596c <_strtod_l+0x294>
 8015872:	961b      	str	r6, [sp, #108]	; 0x6c
 8015874:	f04f 0e00 	mov.w	lr, #0
 8015878:	e09a      	b.n	80159b0 <_strtod_l+0x2d8>
 801587a:	2300      	movs	r3, #0
 801587c:	e7c7      	b.n	801580e <_strtod_l+0x136>
 801587e:	9905      	ldr	r1, [sp, #20]
 8015880:	2908      	cmp	r1, #8
 8015882:	bfdd      	ittte	le
 8015884:	9907      	ldrle	r1, [sp, #28]
 8015886:	fb02 3301 	mlale	r3, r2, r1, r3
 801588a:	9307      	strle	r3, [sp, #28]
 801588c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015890:	9b05      	ldr	r3, [sp, #20]
 8015892:	3001      	adds	r0, #1
 8015894:	3301      	adds	r3, #1
 8015896:	9305      	str	r3, [sp, #20]
 8015898:	901b      	str	r0, [sp, #108]	; 0x6c
 801589a:	e7bf      	b.n	801581c <_strtod_l+0x144>
 801589c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801589e:	191a      	adds	r2, r3, r4
 80158a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80158a2:	9a05      	ldr	r2, [sp, #20]
 80158a4:	5d1b      	ldrb	r3, [r3, r4]
 80158a6:	2a00      	cmp	r2, #0
 80158a8:	d037      	beq.n	801591a <_strtod_l+0x242>
 80158aa:	9c05      	ldr	r4, [sp, #20]
 80158ac:	4602      	mov	r2, r0
 80158ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80158b2:	2909      	cmp	r1, #9
 80158b4:	d913      	bls.n	80158de <_strtod_l+0x206>
 80158b6:	2101      	movs	r1, #1
 80158b8:	9104      	str	r1, [sp, #16]
 80158ba:	e7c2      	b.n	8015842 <_strtod_l+0x16a>
 80158bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158be:	1c5a      	adds	r2, r3, #1
 80158c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80158c2:	785b      	ldrb	r3, [r3, #1]
 80158c4:	3001      	adds	r0, #1
 80158c6:	2b30      	cmp	r3, #48	; 0x30
 80158c8:	d0f8      	beq.n	80158bc <_strtod_l+0x1e4>
 80158ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80158ce:	2a08      	cmp	r2, #8
 80158d0:	f200 84e4 	bhi.w	801629c <_strtod_l+0xbc4>
 80158d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80158d6:	9208      	str	r2, [sp, #32]
 80158d8:	4602      	mov	r2, r0
 80158da:	2000      	movs	r0, #0
 80158dc:	4604      	mov	r4, r0
 80158de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80158e2:	f100 0101 	add.w	r1, r0, #1
 80158e6:	d012      	beq.n	801590e <_strtod_l+0x236>
 80158e8:	440a      	add	r2, r1
 80158ea:	eb00 0c04 	add.w	ip, r0, r4
 80158ee:	4621      	mov	r1, r4
 80158f0:	270a      	movs	r7, #10
 80158f2:	458c      	cmp	ip, r1
 80158f4:	d113      	bne.n	801591e <_strtod_l+0x246>
 80158f6:	1821      	adds	r1, r4, r0
 80158f8:	2908      	cmp	r1, #8
 80158fa:	f104 0401 	add.w	r4, r4, #1
 80158fe:	4404      	add	r4, r0
 8015900:	dc19      	bgt.n	8015936 <_strtod_l+0x25e>
 8015902:	9b07      	ldr	r3, [sp, #28]
 8015904:	210a      	movs	r1, #10
 8015906:	fb01 e303 	mla	r3, r1, r3, lr
 801590a:	9307      	str	r3, [sp, #28]
 801590c:	2100      	movs	r1, #0
 801590e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015910:	1c58      	adds	r0, r3, #1
 8015912:	901b      	str	r0, [sp, #108]	; 0x6c
 8015914:	785b      	ldrb	r3, [r3, #1]
 8015916:	4608      	mov	r0, r1
 8015918:	e7c9      	b.n	80158ae <_strtod_l+0x1d6>
 801591a:	9805      	ldr	r0, [sp, #20]
 801591c:	e7d3      	b.n	80158c6 <_strtod_l+0x1ee>
 801591e:	2908      	cmp	r1, #8
 8015920:	f101 0101 	add.w	r1, r1, #1
 8015924:	dc03      	bgt.n	801592e <_strtod_l+0x256>
 8015926:	9b07      	ldr	r3, [sp, #28]
 8015928:	437b      	muls	r3, r7
 801592a:	9307      	str	r3, [sp, #28]
 801592c:	e7e1      	b.n	80158f2 <_strtod_l+0x21a>
 801592e:	2910      	cmp	r1, #16
 8015930:	bfd8      	it	le
 8015932:	437d      	mulle	r5, r7
 8015934:	e7dd      	b.n	80158f2 <_strtod_l+0x21a>
 8015936:	2c10      	cmp	r4, #16
 8015938:	bfdc      	itt	le
 801593a:	210a      	movle	r1, #10
 801593c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015940:	e7e4      	b.n	801590c <_strtod_l+0x234>
 8015942:	2301      	movs	r3, #1
 8015944:	9304      	str	r3, [sp, #16]
 8015946:	e781      	b.n	801584c <_strtod_l+0x174>
 8015948:	f04f 0c01 	mov.w	ip, #1
 801594c:	1cb3      	adds	r3, r6, #2
 801594e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015950:	78b3      	ldrb	r3, [r6, #2]
 8015952:	e78a      	b.n	801586a <_strtod_l+0x192>
 8015954:	f04f 0c00 	mov.w	ip, #0
 8015958:	e7f8      	b.n	801594c <_strtod_l+0x274>
 801595a:	bf00      	nop
 801595c:	08019518 	.word	0x08019518
 8015960:	7ff00000 	.word	0x7ff00000
 8015964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015966:	1c5f      	adds	r7, r3, #1
 8015968:	971b      	str	r7, [sp, #108]	; 0x6c
 801596a:	785b      	ldrb	r3, [r3, #1]
 801596c:	2b30      	cmp	r3, #48	; 0x30
 801596e:	d0f9      	beq.n	8015964 <_strtod_l+0x28c>
 8015970:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015974:	2f08      	cmp	r7, #8
 8015976:	f63f af7d 	bhi.w	8015874 <_strtod_l+0x19c>
 801597a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801597e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015980:	930a      	str	r3, [sp, #40]	; 0x28
 8015982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015984:	1c5f      	adds	r7, r3, #1
 8015986:	971b      	str	r7, [sp, #108]	; 0x6c
 8015988:	785b      	ldrb	r3, [r3, #1]
 801598a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801598e:	f1b8 0f09 	cmp.w	r8, #9
 8015992:	d937      	bls.n	8015a04 <_strtod_l+0x32c>
 8015994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015996:	1a7f      	subs	r7, r7, r1
 8015998:	2f08      	cmp	r7, #8
 801599a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801599e:	dc37      	bgt.n	8015a10 <_strtod_l+0x338>
 80159a0:	45be      	cmp	lr, r7
 80159a2:	bfa8      	it	ge
 80159a4:	46be      	movge	lr, r7
 80159a6:	f1bc 0f00 	cmp.w	ip, #0
 80159aa:	d001      	beq.n	80159b0 <_strtod_l+0x2d8>
 80159ac:	f1ce 0e00 	rsb	lr, lr, #0
 80159b0:	2c00      	cmp	r4, #0
 80159b2:	d151      	bne.n	8015a58 <_strtod_l+0x380>
 80159b4:	2800      	cmp	r0, #0
 80159b6:	f47f aece 	bne.w	8015756 <_strtod_l+0x7e>
 80159ba:	9a06      	ldr	r2, [sp, #24]
 80159bc:	2a00      	cmp	r2, #0
 80159be:	f47f aeca 	bne.w	8015756 <_strtod_l+0x7e>
 80159c2:	9a04      	ldr	r2, [sp, #16]
 80159c4:	2a00      	cmp	r2, #0
 80159c6:	f47f aee4 	bne.w	8015792 <_strtod_l+0xba>
 80159ca:	2b4e      	cmp	r3, #78	; 0x4e
 80159cc:	d027      	beq.n	8015a1e <_strtod_l+0x346>
 80159ce:	dc21      	bgt.n	8015a14 <_strtod_l+0x33c>
 80159d0:	2b49      	cmp	r3, #73	; 0x49
 80159d2:	f47f aede 	bne.w	8015792 <_strtod_l+0xba>
 80159d6:	49a0      	ldr	r1, [pc, #640]	; (8015c58 <_strtod_l+0x580>)
 80159d8:	a81b      	add	r0, sp, #108	; 0x6c
 80159da:	f001 fdf7 	bl	80175cc <__match>
 80159de:	2800      	cmp	r0, #0
 80159e0:	f43f aed7 	beq.w	8015792 <_strtod_l+0xba>
 80159e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159e6:	499d      	ldr	r1, [pc, #628]	; (8015c5c <_strtod_l+0x584>)
 80159e8:	3b01      	subs	r3, #1
 80159ea:	a81b      	add	r0, sp, #108	; 0x6c
 80159ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80159ee:	f001 fded 	bl	80175cc <__match>
 80159f2:	b910      	cbnz	r0, 80159fa <_strtod_l+0x322>
 80159f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159f6:	3301      	adds	r3, #1
 80159f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80159fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015c70 <_strtod_l+0x598>
 80159fe:	f04f 0a00 	mov.w	sl, #0
 8015a02:	e6a8      	b.n	8015756 <_strtod_l+0x7e>
 8015a04:	210a      	movs	r1, #10
 8015a06:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015a0a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015a0e:	e7b8      	b.n	8015982 <_strtod_l+0x2aa>
 8015a10:	46be      	mov	lr, r7
 8015a12:	e7c8      	b.n	80159a6 <_strtod_l+0x2ce>
 8015a14:	2b69      	cmp	r3, #105	; 0x69
 8015a16:	d0de      	beq.n	80159d6 <_strtod_l+0x2fe>
 8015a18:	2b6e      	cmp	r3, #110	; 0x6e
 8015a1a:	f47f aeba 	bne.w	8015792 <_strtod_l+0xba>
 8015a1e:	4990      	ldr	r1, [pc, #576]	; (8015c60 <_strtod_l+0x588>)
 8015a20:	a81b      	add	r0, sp, #108	; 0x6c
 8015a22:	f001 fdd3 	bl	80175cc <__match>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	f43f aeb3 	beq.w	8015792 <_strtod_l+0xba>
 8015a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	2b28      	cmp	r3, #40	; 0x28
 8015a32:	d10e      	bne.n	8015a52 <_strtod_l+0x37a>
 8015a34:	aa1e      	add	r2, sp, #120	; 0x78
 8015a36:	498b      	ldr	r1, [pc, #556]	; (8015c64 <_strtod_l+0x58c>)
 8015a38:	a81b      	add	r0, sp, #108	; 0x6c
 8015a3a:	f001 fddb 	bl	80175f4 <__hexnan>
 8015a3e:	2805      	cmp	r0, #5
 8015a40:	d107      	bne.n	8015a52 <_strtod_l+0x37a>
 8015a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015a44:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015a48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015a4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015a50:	e681      	b.n	8015756 <_strtod_l+0x7e>
 8015a52:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015c78 <_strtod_l+0x5a0>
 8015a56:	e7d2      	b.n	80159fe <_strtod_l+0x326>
 8015a58:	ebae 0302 	sub.w	r3, lr, r2
 8015a5c:	9306      	str	r3, [sp, #24]
 8015a5e:	9b05      	ldr	r3, [sp, #20]
 8015a60:	9807      	ldr	r0, [sp, #28]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	bf08      	it	eq
 8015a66:	4623      	moveq	r3, r4
 8015a68:	2c10      	cmp	r4, #16
 8015a6a:	9305      	str	r3, [sp, #20]
 8015a6c:	46a0      	mov	r8, r4
 8015a6e:	bfa8      	it	ge
 8015a70:	f04f 0810 	movge.w	r8, #16
 8015a74:	f7ea fd5e 	bl	8000534 <__aeabi_ui2d>
 8015a78:	2c09      	cmp	r4, #9
 8015a7a:	4682      	mov	sl, r0
 8015a7c:	468b      	mov	fp, r1
 8015a7e:	dc13      	bgt.n	8015aa8 <_strtod_l+0x3d0>
 8015a80:	9b06      	ldr	r3, [sp, #24]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f43f ae67 	beq.w	8015756 <_strtod_l+0x7e>
 8015a88:	9b06      	ldr	r3, [sp, #24]
 8015a8a:	dd7a      	ble.n	8015b82 <_strtod_l+0x4aa>
 8015a8c:	2b16      	cmp	r3, #22
 8015a8e:	dc61      	bgt.n	8015b54 <_strtod_l+0x47c>
 8015a90:	4a75      	ldr	r2, [pc, #468]	; (8015c68 <_strtod_l+0x590>)
 8015a92:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015a96:	e9de 0100 	ldrd	r0, r1, [lr]
 8015a9a:	4652      	mov	r2, sl
 8015a9c:	465b      	mov	r3, fp
 8015a9e:	f7ea fdc3 	bl	8000628 <__aeabi_dmul>
 8015aa2:	4682      	mov	sl, r0
 8015aa4:	468b      	mov	fp, r1
 8015aa6:	e656      	b.n	8015756 <_strtod_l+0x7e>
 8015aa8:	4b6f      	ldr	r3, [pc, #444]	; (8015c68 <_strtod_l+0x590>)
 8015aaa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015aae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015ab2:	f7ea fdb9 	bl	8000628 <__aeabi_dmul>
 8015ab6:	4606      	mov	r6, r0
 8015ab8:	4628      	mov	r0, r5
 8015aba:	460f      	mov	r7, r1
 8015abc:	f7ea fd3a 	bl	8000534 <__aeabi_ui2d>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	460b      	mov	r3, r1
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	f7ea fbf8 	bl	80002bc <__adddf3>
 8015acc:	2c0f      	cmp	r4, #15
 8015ace:	4682      	mov	sl, r0
 8015ad0:	468b      	mov	fp, r1
 8015ad2:	ddd5      	ble.n	8015a80 <_strtod_l+0x3a8>
 8015ad4:	9b06      	ldr	r3, [sp, #24]
 8015ad6:	eba4 0808 	sub.w	r8, r4, r8
 8015ada:	4498      	add	r8, r3
 8015adc:	f1b8 0f00 	cmp.w	r8, #0
 8015ae0:	f340 8096 	ble.w	8015c10 <_strtod_l+0x538>
 8015ae4:	f018 030f 	ands.w	r3, r8, #15
 8015ae8:	d00a      	beq.n	8015b00 <_strtod_l+0x428>
 8015aea:	495f      	ldr	r1, [pc, #380]	; (8015c68 <_strtod_l+0x590>)
 8015aec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015af0:	4652      	mov	r2, sl
 8015af2:	465b      	mov	r3, fp
 8015af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015af8:	f7ea fd96 	bl	8000628 <__aeabi_dmul>
 8015afc:	4682      	mov	sl, r0
 8015afe:	468b      	mov	fp, r1
 8015b00:	f038 080f 	bics.w	r8, r8, #15
 8015b04:	d073      	beq.n	8015bee <_strtod_l+0x516>
 8015b06:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015b0a:	dd47      	ble.n	8015b9c <_strtod_l+0x4c4>
 8015b0c:	2400      	movs	r4, #0
 8015b0e:	46a0      	mov	r8, r4
 8015b10:	9407      	str	r4, [sp, #28]
 8015b12:	9405      	str	r4, [sp, #20]
 8015b14:	2322      	movs	r3, #34	; 0x22
 8015b16:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015c70 <_strtod_l+0x598>
 8015b1a:	f8c9 3000 	str.w	r3, [r9]
 8015b1e:	f04f 0a00 	mov.w	sl, #0
 8015b22:	9b07      	ldr	r3, [sp, #28]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f43f ae16 	beq.w	8015756 <_strtod_l+0x7e>
 8015b2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b2c:	4648      	mov	r0, r9
 8015b2e:	f001 fe61 	bl	80177f4 <_Bfree>
 8015b32:	9905      	ldr	r1, [sp, #20]
 8015b34:	4648      	mov	r0, r9
 8015b36:	f001 fe5d 	bl	80177f4 <_Bfree>
 8015b3a:	4641      	mov	r1, r8
 8015b3c:	4648      	mov	r0, r9
 8015b3e:	f001 fe59 	bl	80177f4 <_Bfree>
 8015b42:	9907      	ldr	r1, [sp, #28]
 8015b44:	4648      	mov	r0, r9
 8015b46:	f001 fe55 	bl	80177f4 <_Bfree>
 8015b4a:	4621      	mov	r1, r4
 8015b4c:	4648      	mov	r0, r9
 8015b4e:	f001 fe51 	bl	80177f4 <_Bfree>
 8015b52:	e600      	b.n	8015756 <_strtod_l+0x7e>
 8015b54:	9a06      	ldr	r2, [sp, #24]
 8015b56:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	dbba      	blt.n	8015ad4 <_strtod_l+0x3fc>
 8015b5e:	4d42      	ldr	r5, [pc, #264]	; (8015c68 <_strtod_l+0x590>)
 8015b60:	f1c4 040f 	rsb	r4, r4, #15
 8015b64:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015b68:	4652      	mov	r2, sl
 8015b6a:	465b      	mov	r3, fp
 8015b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b70:	f7ea fd5a 	bl	8000628 <__aeabi_dmul>
 8015b74:	9b06      	ldr	r3, [sp, #24]
 8015b76:	1b1c      	subs	r4, r3, r4
 8015b78:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015b7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015b80:	e78d      	b.n	8015a9e <_strtod_l+0x3c6>
 8015b82:	f113 0f16 	cmn.w	r3, #22
 8015b86:	dba5      	blt.n	8015ad4 <_strtod_l+0x3fc>
 8015b88:	4a37      	ldr	r2, [pc, #220]	; (8015c68 <_strtod_l+0x590>)
 8015b8a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015b8e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015b92:	4650      	mov	r0, sl
 8015b94:	4659      	mov	r1, fp
 8015b96:	f7ea fe71 	bl	800087c <__aeabi_ddiv>
 8015b9a:	e782      	b.n	8015aa2 <_strtod_l+0x3ca>
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	4e33      	ldr	r6, [pc, #204]	; (8015c6c <_strtod_l+0x594>)
 8015ba0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015ba4:	4650      	mov	r0, sl
 8015ba6:	4659      	mov	r1, fp
 8015ba8:	461d      	mov	r5, r3
 8015baa:	f1b8 0f01 	cmp.w	r8, #1
 8015bae:	dc21      	bgt.n	8015bf4 <_strtod_l+0x51c>
 8015bb0:	b10b      	cbz	r3, 8015bb6 <_strtod_l+0x4de>
 8015bb2:	4682      	mov	sl, r0
 8015bb4:	468b      	mov	fp, r1
 8015bb6:	4b2d      	ldr	r3, [pc, #180]	; (8015c6c <_strtod_l+0x594>)
 8015bb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015bbc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015bc0:	4652      	mov	r2, sl
 8015bc2:	465b      	mov	r3, fp
 8015bc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015bc8:	f7ea fd2e 	bl	8000628 <__aeabi_dmul>
 8015bcc:	4b28      	ldr	r3, [pc, #160]	; (8015c70 <_strtod_l+0x598>)
 8015bce:	460a      	mov	r2, r1
 8015bd0:	400b      	ands	r3, r1
 8015bd2:	4928      	ldr	r1, [pc, #160]	; (8015c74 <_strtod_l+0x59c>)
 8015bd4:	428b      	cmp	r3, r1
 8015bd6:	4682      	mov	sl, r0
 8015bd8:	d898      	bhi.n	8015b0c <_strtod_l+0x434>
 8015bda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015bde:	428b      	cmp	r3, r1
 8015be0:	bf86      	itte	hi
 8015be2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015c7c <_strtod_l+0x5a4>
 8015be6:	f04f 3aff 	movhi.w	sl, #4294967295
 8015bea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015bee:	2300      	movs	r3, #0
 8015bf0:	9304      	str	r3, [sp, #16]
 8015bf2:	e077      	b.n	8015ce4 <_strtod_l+0x60c>
 8015bf4:	f018 0f01 	tst.w	r8, #1
 8015bf8:	d006      	beq.n	8015c08 <_strtod_l+0x530>
 8015bfa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c02:	f7ea fd11 	bl	8000628 <__aeabi_dmul>
 8015c06:	2301      	movs	r3, #1
 8015c08:	3501      	adds	r5, #1
 8015c0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c0e:	e7cc      	b.n	8015baa <_strtod_l+0x4d2>
 8015c10:	d0ed      	beq.n	8015bee <_strtod_l+0x516>
 8015c12:	f1c8 0800 	rsb	r8, r8, #0
 8015c16:	f018 020f 	ands.w	r2, r8, #15
 8015c1a:	d00a      	beq.n	8015c32 <_strtod_l+0x55a>
 8015c1c:	4b12      	ldr	r3, [pc, #72]	; (8015c68 <_strtod_l+0x590>)
 8015c1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c22:	4650      	mov	r0, sl
 8015c24:	4659      	mov	r1, fp
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	f7ea fe27 	bl	800087c <__aeabi_ddiv>
 8015c2e:	4682      	mov	sl, r0
 8015c30:	468b      	mov	fp, r1
 8015c32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015c36:	d0da      	beq.n	8015bee <_strtod_l+0x516>
 8015c38:	f1b8 0f1f 	cmp.w	r8, #31
 8015c3c:	dd20      	ble.n	8015c80 <_strtod_l+0x5a8>
 8015c3e:	2400      	movs	r4, #0
 8015c40:	46a0      	mov	r8, r4
 8015c42:	9407      	str	r4, [sp, #28]
 8015c44:	9405      	str	r4, [sp, #20]
 8015c46:	2322      	movs	r3, #34	; 0x22
 8015c48:	f04f 0a00 	mov.w	sl, #0
 8015c4c:	f04f 0b00 	mov.w	fp, #0
 8015c50:	f8c9 3000 	str.w	r3, [r9]
 8015c54:	e765      	b.n	8015b22 <_strtod_l+0x44a>
 8015c56:	bf00      	nop
 8015c58:	080194e5 	.word	0x080194e5
 8015c5c:	0801956b 	.word	0x0801956b
 8015c60:	080194ed 	.word	0x080194ed
 8015c64:	0801952c 	.word	0x0801952c
 8015c68:	08019610 	.word	0x08019610
 8015c6c:	080195e8 	.word	0x080195e8
 8015c70:	7ff00000 	.word	0x7ff00000
 8015c74:	7ca00000 	.word	0x7ca00000
 8015c78:	fff80000 	.word	0xfff80000
 8015c7c:	7fefffff 	.word	0x7fefffff
 8015c80:	f018 0310 	ands.w	r3, r8, #16
 8015c84:	bf18      	it	ne
 8015c86:	236a      	movne	r3, #106	; 0x6a
 8015c88:	4da0      	ldr	r5, [pc, #640]	; (8015f0c <_strtod_l+0x834>)
 8015c8a:	9304      	str	r3, [sp, #16]
 8015c8c:	4650      	mov	r0, sl
 8015c8e:	4659      	mov	r1, fp
 8015c90:	2300      	movs	r3, #0
 8015c92:	f1b8 0f00 	cmp.w	r8, #0
 8015c96:	f300 810a 	bgt.w	8015eae <_strtod_l+0x7d6>
 8015c9a:	b10b      	cbz	r3, 8015ca0 <_strtod_l+0x5c8>
 8015c9c:	4682      	mov	sl, r0
 8015c9e:	468b      	mov	fp, r1
 8015ca0:	9b04      	ldr	r3, [sp, #16]
 8015ca2:	b1bb      	cbz	r3, 8015cd4 <_strtod_l+0x5fc>
 8015ca4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015ca8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	4659      	mov	r1, fp
 8015cb0:	dd10      	ble.n	8015cd4 <_strtod_l+0x5fc>
 8015cb2:	2b1f      	cmp	r3, #31
 8015cb4:	f340 8107 	ble.w	8015ec6 <_strtod_l+0x7ee>
 8015cb8:	2b34      	cmp	r3, #52	; 0x34
 8015cba:	bfde      	ittt	le
 8015cbc:	3b20      	suble	r3, #32
 8015cbe:	f04f 32ff 	movle.w	r2, #4294967295
 8015cc2:	fa02 f303 	lslle.w	r3, r2, r3
 8015cc6:	f04f 0a00 	mov.w	sl, #0
 8015cca:	bfcc      	ite	gt
 8015ccc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015cd0:	ea03 0b01 	andle.w	fp, r3, r1
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	4650      	mov	r0, sl
 8015cda:	4659      	mov	r1, fp
 8015cdc:	f7ea ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	d1ac      	bne.n	8015c3e <_strtod_l+0x566>
 8015ce4:	9b07      	ldr	r3, [sp, #28]
 8015ce6:	9300      	str	r3, [sp, #0]
 8015ce8:	9a05      	ldr	r2, [sp, #20]
 8015cea:	9908      	ldr	r1, [sp, #32]
 8015cec:	4623      	mov	r3, r4
 8015cee:	4648      	mov	r0, r9
 8015cf0:	f001 fdd2 	bl	8017898 <__s2b>
 8015cf4:	9007      	str	r0, [sp, #28]
 8015cf6:	2800      	cmp	r0, #0
 8015cf8:	f43f af08 	beq.w	8015b0c <_strtod_l+0x434>
 8015cfc:	9a06      	ldr	r2, [sp, #24]
 8015cfe:	9b06      	ldr	r3, [sp, #24]
 8015d00:	2a00      	cmp	r2, #0
 8015d02:	f1c3 0300 	rsb	r3, r3, #0
 8015d06:	bfa8      	it	ge
 8015d08:	2300      	movge	r3, #0
 8015d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8015d0c:	2400      	movs	r4, #0
 8015d0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015d12:	9316      	str	r3, [sp, #88]	; 0x58
 8015d14:	46a0      	mov	r8, r4
 8015d16:	9b07      	ldr	r3, [sp, #28]
 8015d18:	4648      	mov	r0, r9
 8015d1a:	6859      	ldr	r1, [r3, #4]
 8015d1c:	f001 fd36 	bl	801778c <_Balloc>
 8015d20:	9005      	str	r0, [sp, #20]
 8015d22:	2800      	cmp	r0, #0
 8015d24:	f43f aef6 	beq.w	8015b14 <_strtod_l+0x43c>
 8015d28:	9b07      	ldr	r3, [sp, #28]
 8015d2a:	691a      	ldr	r2, [r3, #16]
 8015d2c:	3202      	adds	r2, #2
 8015d2e:	f103 010c 	add.w	r1, r3, #12
 8015d32:	0092      	lsls	r2, r2, #2
 8015d34:	300c      	adds	r0, #12
 8015d36:	f7fe fdd3 	bl	80148e0 <memcpy>
 8015d3a:	aa1e      	add	r2, sp, #120	; 0x78
 8015d3c:	a91d      	add	r1, sp, #116	; 0x74
 8015d3e:	ec4b ab10 	vmov	d0, sl, fp
 8015d42:	4648      	mov	r0, r9
 8015d44:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015d48:	f002 f862 	bl	8017e10 <__d2b>
 8015d4c:	901c      	str	r0, [sp, #112]	; 0x70
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	f43f aee0 	beq.w	8015b14 <_strtod_l+0x43c>
 8015d54:	2101      	movs	r1, #1
 8015d56:	4648      	mov	r0, r9
 8015d58:	f001 fe2a 	bl	80179b0 <__i2b>
 8015d5c:	4680      	mov	r8, r0
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	f43f aed8 	beq.w	8015b14 <_strtod_l+0x43c>
 8015d64:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015d66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015d68:	2e00      	cmp	r6, #0
 8015d6a:	bfab      	itete	ge
 8015d6c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015d6e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015d70:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015d72:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015d74:	bfac      	ite	ge
 8015d76:	18f7      	addge	r7, r6, r3
 8015d78:	1b9d      	sublt	r5, r3, r6
 8015d7a:	9b04      	ldr	r3, [sp, #16]
 8015d7c:	1af6      	subs	r6, r6, r3
 8015d7e:	4416      	add	r6, r2
 8015d80:	4b63      	ldr	r3, [pc, #396]	; (8015f10 <_strtod_l+0x838>)
 8015d82:	3e01      	subs	r6, #1
 8015d84:	429e      	cmp	r6, r3
 8015d86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015d8a:	f280 80af 	bge.w	8015eec <_strtod_l+0x814>
 8015d8e:	1b9b      	subs	r3, r3, r6
 8015d90:	2b1f      	cmp	r3, #31
 8015d92:	eba2 0203 	sub.w	r2, r2, r3
 8015d96:	f04f 0101 	mov.w	r1, #1
 8015d9a:	f300 809b 	bgt.w	8015ed4 <_strtod_l+0x7fc>
 8015d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8015da2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015da4:	2300      	movs	r3, #0
 8015da6:	930a      	str	r3, [sp, #40]	; 0x28
 8015da8:	18be      	adds	r6, r7, r2
 8015daa:	9b04      	ldr	r3, [sp, #16]
 8015dac:	42b7      	cmp	r7, r6
 8015dae:	4415      	add	r5, r2
 8015db0:	441d      	add	r5, r3
 8015db2:	463b      	mov	r3, r7
 8015db4:	bfa8      	it	ge
 8015db6:	4633      	movge	r3, r6
 8015db8:	42ab      	cmp	r3, r5
 8015dba:	bfa8      	it	ge
 8015dbc:	462b      	movge	r3, r5
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	bfc2      	ittt	gt
 8015dc2:	1af6      	subgt	r6, r6, r3
 8015dc4:	1aed      	subgt	r5, r5, r3
 8015dc6:	1aff      	subgt	r7, r7, r3
 8015dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dca:	b1bb      	cbz	r3, 8015dfc <_strtod_l+0x724>
 8015dcc:	4641      	mov	r1, r8
 8015dce:	461a      	mov	r2, r3
 8015dd0:	4648      	mov	r0, r9
 8015dd2:	f001 fe8d 	bl	8017af0 <__pow5mult>
 8015dd6:	4680      	mov	r8, r0
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	f43f ae9b 	beq.w	8015b14 <_strtod_l+0x43c>
 8015dde:	4601      	mov	r1, r0
 8015de0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015de2:	4648      	mov	r0, r9
 8015de4:	f001 fded 	bl	80179c2 <__multiply>
 8015de8:	900c      	str	r0, [sp, #48]	; 0x30
 8015dea:	2800      	cmp	r0, #0
 8015dec:	f43f ae92 	beq.w	8015b14 <_strtod_l+0x43c>
 8015df0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015df2:	4648      	mov	r0, r9
 8015df4:	f001 fcfe 	bl	80177f4 <_Bfree>
 8015df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dfa:	931c      	str	r3, [sp, #112]	; 0x70
 8015dfc:	2e00      	cmp	r6, #0
 8015dfe:	dc7a      	bgt.n	8015ef6 <_strtod_l+0x81e>
 8015e00:	9b06      	ldr	r3, [sp, #24]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	dd08      	ble.n	8015e18 <_strtod_l+0x740>
 8015e06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e08:	9905      	ldr	r1, [sp, #20]
 8015e0a:	4648      	mov	r0, r9
 8015e0c:	f001 fe70 	bl	8017af0 <__pow5mult>
 8015e10:	9005      	str	r0, [sp, #20]
 8015e12:	2800      	cmp	r0, #0
 8015e14:	f43f ae7e 	beq.w	8015b14 <_strtod_l+0x43c>
 8015e18:	2d00      	cmp	r5, #0
 8015e1a:	dd08      	ble.n	8015e2e <_strtod_l+0x756>
 8015e1c:	462a      	mov	r2, r5
 8015e1e:	9905      	ldr	r1, [sp, #20]
 8015e20:	4648      	mov	r0, r9
 8015e22:	f001 feb3 	bl	8017b8c <__lshift>
 8015e26:	9005      	str	r0, [sp, #20]
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	f43f ae73 	beq.w	8015b14 <_strtod_l+0x43c>
 8015e2e:	2f00      	cmp	r7, #0
 8015e30:	dd08      	ble.n	8015e44 <_strtod_l+0x76c>
 8015e32:	4641      	mov	r1, r8
 8015e34:	463a      	mov	r2, r7
 8015e36:	4648      	mov	r0, r9
 8015e38:	f001 fea8 	bl	8017b8c <__lshift>
 8015e3c:	4680      	mov	r8, r0
 8015e3e:	2800      	cmp	r0, #0
 8015e40:	f43f ae68 	beq.w	8015b14 <_strtod_l+0x43c>
 8015e44:	9a05      	ldr	r2, [sp, #20]
 8015e46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e48:	4648      	mov	r0, r9
 8015e4a:	f001 ff0d 	bl	8017c68 <__mdiff>
 8015e4e:	4604      	mov	r4, r0
 8015e50:	2800      	cmp	r0, #0
 8015e52:	f43f ae5f 	beq.w	8015b14 <_strtod_l+0x43c>
 8015e56:	68c3      	ldr	r3, [r0, #12]
 8015e58:	930c      	str	r3, [sp, #48]	; 0x30
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	60c3      	str	r3, [r0, #12]
 8015e5e:	4641      	mov	r1, r8
 8015e60:	f001 fee8 	bl	8017c34 <__mcmp>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	da55      	bge.n	8015f14 <_strtod_l+0x83c>
 8015e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e6a:	b9e3      	cbnz	r3, 8015ea6 <_strtod_l+0x7ce>
 8015e6c:	f1ba 0f00 	cmp.w	sl, #0
 8015e70:	d119      	bne.n	8015ea6 <_strtod_l+0x7ce>
 8015e72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e76:	b9b3      	cbnz	r3, 8015ea6 <_strtod_l+0x7ce>
 8015e78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015e7c:	0d1b      	lsrs	r3, r3, #20
 8015e7e:	051b      	lsls	r3, r3, #20
 8015e80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015e84:	d90f      	bls.n	8015ea6 <_strtod_l+0x7ce>
 8015e86:	6963      	ldr	r3, [r4, #20]
 8015e88:	b913      	cbnz	r3, 8015e90 <_strtod_l+0x7b8>
 8015e8a:	6923      	ldr	r3, [r4, #16]
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	dd0a      	ble.n	8015ea6 <_strtod_l+0x7ce>
 8015e90:	4621      	mov	r1, r4
 8015e92:	2201      	movs	r2, #1
 8015e94:	4648      	mov	r0, r9
 8015e96:	f001 fe79 	bl	8017b8c <__lshift>
 8015e9a:	4641      	mov	r1, r8
 8015e9c:	4604      	mov	r4, r0
 8015e9e:	f001 fec9 	bl	8017c34 <__mcmp>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	dc67      	bgt.n	8015f76 <_strtod_l+0x89e>
 8015ea6:	9b04      	ldr	r3, [sp, #16]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d171      	bne.n	8015f90 <_strtod_l+0x8b8>
 8015eac:	e63d      	b.n	8015b2a <_strtod_l+0x452>
 8015eae:	f018 0f01 	tst.w	r8, #1
 8015eb2:	d004      	beq.n	8015ebe <_strtod_l+0x7e6>
 8015eb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015eb8:	f7ea fbb6 	bl	8000628 <__aeabi_dmul>
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015ec2:	3508      	adds	r5, #8
 8015ec4:	e6e5      	b.n	8015c92 <_strtod_l+0x5ba>
 8015ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8015eca:	fa02 f303 	lsl.w	r3, r2, r3
 8015ece:	ea03 0a0a 	and.w	sl, r3, sl
 8015ed2:	e6ff      	b.n	8015cd4 <_strtod_l+0x5fc>
 8015ed4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015ed8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015edc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015ee0:	36e2      	adds	r6, #226	; 0xe2
 8015ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8015ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ee8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015eea:	e75d      	b.n	8015da8 <_strtod_l+0x6d0>
 8015eec:	2300      	movs	r3, #0
 8015eee:	930a      	str	r3, [sp, #40]	; 0x28
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ef4:	e758      	b.n	8015da8 <_strtod_l+0x6d0>
 8015ef6:	4632      	mov	r2, r6
 8015ef8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015efa:	4648      	mov	r0, r9
 8015efc:	f001 fe46 	bl	8017b8c <__lshift>
 8015f00:	901c      	str	r0, [sp, #112]	; 0x70
 8015f02:	2800      	cmp	r0, #0
 8015f04:	f47f af7c 	bne.w	8015e00 <_strtod_l+0x728>
 8015f08:	e604      	b.n	8015b14 <_strtod_l+0x43c>
 8015f0a:	bf00      	nop
 8015f0c:	08019540 	.word	0x08019540
 8015f10:	fffffc02 	.word	0xfffffc02
 8015f14:	465d      	mov	r5, fp
 8015f16:	f040 8086 	bne.w	8016026 <_strtod_l+0x94e>
 8015f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f20:	b32a      	cbz	r2, 8015f6e <_strtod_l+0x896>
 8015f22:	4aaf      	ldr	r2, [pc, #700]	; (80161e0 <_strtod_l+0xb08>)
 8015f24:	4293      	cmp	r3, r2
 8015f26:	d153      	bne.n	8015fd0 <_strtod_l+0x8f8>
 8015f28:	9b04      	ldr	r3, [sp, #16]
 8015f2a:	4650      	mov	r0, sl
 8015f2c:	b1d3      	cbz	r3, 8015f64 <_strtod_l+0x88c>
 8015f2e:	4aad      	ldr	r2, [pc, #692]	; (80161e4 <_strtod_l+0xb0c>)
 8015f30:	402a      	ands	r2, r5
 8015f32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015f36:	f04f 31ff 	mov.w	r1, #4294967295
 8015f3a:	d816      	bhi.n	8015f6a <_strtod_l+0x892>
 8015f3c:	0d12      	lsrs	r2, r2, #20
 8015f3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015f42:	fa01 f303 	lsl.w	r3, r1, r3
 8015f46:	4298      	cmp	r0, r3
 8015f48:	d142      	bne.n	8015fd0 <_strtod_l+0x8f8>
 8015f4a:	4ba7      	ldr	r3, [pc, #668]	; (80161e8 <_strtod_l+0xb10>)
 8015f4c:	429d      	cmp	r5, r3
 8015f4e:	d102      	bne.n	8015f56 <_strtod_l+0x87e>
 8015f50:	3001      	adds	r0, #1
 8015f52:	f43f addf 	beq.w	8015b14 <_strtod_l+0x43c>
 8015f56:	4ba3      	ldr	r3, [pc, #652]	; (80161e4 <_strtod_l+0xb0c>)
 8015f58:	402b      	ands	r3, r5
 8015f5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015f5e:	f04f 0a00 	mov.w	sl, #0
 8015f62:	e7a0      	b.n	8015ea6 <_strtod_l+0x7ce>
 8015f64:	f04f 33ff 	mov.w	r3, #4294967295
 8015f68:	e7ed      	b.n	8015f46 <_strtod_l+0x86e>
 8015f6a:	460b      	mov	r3, r1
 8015f6c:	e7eb      	b.n	8015f46 <_strtod_l+0x86e>
 8015f6e:	bb7b      	cbnz	r3, 8015fd0 <_strtod_l+0x8f8>
 8015f70:	f1ba 0f00 	cmp.w	sl, #0
 8015f74:	d12c      	bne.n	8015fd0 <_strtod_l+0x8f8>
 8015f76:	9904      	ldr	r1, [sp, #16]
 8015f78:	4a9a      	ldr	r2, [pc, #616]	; (80161e4 <_strtod_l+0xb0c>)
 8015f7a:	465b      	mov	r3, fp
 8015f7c:	b1f1      	cbz	r1, 8015fbc <_strtod_l+0x8e4>
 8015f7e:	ea02 010b 	and.w	r1, r2, fp
 8015f82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015f86:	dc19      	bgt.n	8015fbc <_strtod_l+0x8e4>
 8015f88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015f8c:	f77f ae5b 	ble.w	8015c46 <_strtod_l+0x56e>
 8015f90:	4a96      	ldr	r2, [pc, #600]	; (80161ec <_strtod_l+0xb14>)
 8015f92:	2300      	movs	r3, #0
 8015f94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015f98:	4650      	mov	r0, sl
 8015f9a:	4659      	mov	r1, fp
 8015f9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015fa0:	f7ea fb42 	bl	8000628 <__aeabi_dmul>
 8015fa4:	4682      	mov	sl, r0
 8015fa6:	468b      	mov	fp, r1
 8015fa8:	2900      	cmp	r1, #0
 8015faa:	f47f adbe 	bne.w	8015b2a <_strtod_l+0x452>
 8015fae:	2800      	cmp	r0, #0
 8015fb0:	f47f adbb 	bne.w	8015b2a <_strtod_l+0x452>
 8015fb4:	2322      	movs	r3, #34	; 0x22
 8015fb6:	f8c9 3000 	str.w	r3, [r9]
 8015fba:	e5b6      	b.n	8015b2a <_strtod_l+0x452>
 8015fbc:	4013      	ands	r3, r2
 8015fbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015fc2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015fc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015fca:	f04f 3aff 	mov.w	sl, #4294967295
 8015fce:	e76a      	b.n	8015ea6 <_strtod_l+0x7ce>
 8015fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fd2:	b193      	cbz	r3, 8015ffa <_strtod_l+0x922>
 8015fd4:	422b      	tst	r3, r5
 8015fd6:	f43f af66 	beq.w	8015ea6 <_strtod_l+0x7ce>
 8015fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fdc:	9a04      	ldr	r2, [sp, #16]
 8015fde:	4650      	mov	r0, sl
 8015fe0:	4659      	mov	r1, fp
 8015fe2:	b173      	cbz	r3, 8016002 <_strtod_l+0x92a>
 8015fe4:	f7ff fb5c 	bl	80156a0 <sulp>
 8015fe8:	4602      	mov	r2, r0
 8015fea:	460b      	mov	r3, r1
 8015fec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015ff0:	f7ea f964 	bl	80002bc <__adddf3>
 8015ff4:	4682      	mov	sl, r0
 8015ff6:	468b      	mov	fp, r1
 8015ff8:	e755      	b.n	8015ea6 <_strtod_l+0x7ce>
 8015ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ffc:	ea13 0f0a 	tst.w	r3, sl
 8016000:	e7e9      	b.n	8015fd6 <_strtod_l+0x8fe>
 8016002:	f7ff fb4d 	bl	80156a0 <sulp>
 8016006:	4602      	mov	r2, r0
 8016008:	460b      	mov	r3, r1
 801600a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801600e:	f7ea f953 	bl	80002b8 <__aeabi_dsub>
 8016012:	2200      	movs	r2, #0
 8016014:	2300      	movs	r3, #0
 8016016:	4682      	mov	sl, r0
 8016018:	468b      	mov	fp, r1
 801601a:	f7ea fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 801601e:	2800      	cmp	r0, #0
 8016020:	f47f ae11 	bne.w	8015c46 <_strtod_l+0x56e>
 8016024:	e73f      	b.n	8015ea6 <_strtod_l+0x7ce>
 8016026:	4641      	mov	r1, r8
 8016028:	4620      	mov	r0, r4
 801602a:	f001 ff40 	bl	8017eae <__ratio>
 801602e:	ec57 6b10 	vmov	r6, r7, d0
 8016032:	2200      	movs	r2, #0
 8016034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016038:	ee10 0a10 	vmov	r0, s0
 801603c:	4639      	mov	r1, r7
 801603e:	f7ea fd6f 	bl	8000b20 <__aeabi_dcmple>
 8016042:	2800      	cmp	r0, #0
 8016044:	d077      	beq.n	8016136 <_strtod_l+0xa5e>
 8016046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016048:	2b00      	cmp	r3, #0
 801604a:	d04a      	beq.n	80160e2 <_strtod_l+0xa0a>
 801604c:	4b68      	ldr	r3, [pc, #416]	; (80161f0 <_strtod_l+0xb18>)
 801604e:	2200      	movs	r2, #0
 8016050:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016054:	4f66      	ldr	r7, [pc, #408]	; (80161f0 <_strtod_l+0xb18>)
 8016056:	2600      	movs	r6, #0
 8016058:	4b62      	ldr	r3, [pc, #392]	; (80161e4 <_strtod_l+0xb0c>)
 801605a:	402b      	ands	r3, r5
 801605c:	930f      	str	r3, [sp, #60]	; 0x3c
 801605e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016060:	4b64      	ldr	r3, [pc, #400]	; (80161f4 <_strtod_l+0xb1c>)
 8016062:	429a      	cmp	r2, r3
 8016064:	f040 80ce 	bne.w	8016204 <_strtod_l+0xb2c>
 8016068:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801606c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016070:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016074:	ec4b ab10 	vmov	d0, sl, fp
 8016078:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801607c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016080:	f001 fe50 	bl	8017d24 <__ulp>
 8016084:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016088:	ec53 2b10 	vmov	r2, r3, d0
 801608c:	f7ea facc 	bl	8000628 <__aeabi_dmul>
 8016090:	4652      	mov	r2, sl
 8016092:	465b      	mov	r3, fp
 8016094:	f7ea f912 	bl	80002bc <__adddf3>
 8016098:	460b      	mov	r3, r1
 801609a:	4952      	ldr	r1, [pc, #328]	; (80161e4 <_strtod_l+0xb0c>)
 801609c:	4a56      	ldr	r2, [pc, #344]	; (80161f8 <_strtod_l+0xb20>)
 801609e:	4019      	ands	r1, r3
 80160a0:	4291      	cmp	r1, r2
 80160a2:	4682      	mov	sl, r0
 80160a4:	d95b      	bls.n	801615e <_strtod_l+0xa86>
 80160a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d103      	bne.n	80160b8 <_strtod_l+0x9e0>
 80160b0:	9b08      	ldr	r3, [sp, #32]
 80160b2:	3301      	adds	r3, #1
 80160b4:	f43f ad2e 	beq.w	8015b14 <_strtod_l+0x43c>
 80160b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80161e8 <_strtod_l+0xb10>
 80160bc:	f04f 3aff 	mov.w	sl, #4294967295
 80160c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80160c2:	4648      	mov	r0, r9
 80160c4:	f001 fb96 	bl	80177f4 <_Bfree>
 80160c8:	9905      	ldr	r1, [sp, #20]
 80160ca:	4648      	mov	r0, r9
 80160cc:	f001 fb92 	bl	80177f4 <_Bfree>
 80160d0:	4641      	mov	r1, r8
 80160d2:	4648      	mov	r0, r9
 80160d4:	f001 fb8e 	bl	80177f4 <_Bfree>
 80160d8:	4621      	mov	r1, r4
 80160da:	4648      	mov	r0, r9
 80160dc:	f001 fb8a 	bl	80177f4 <_Bfree>
 80160e0:	e619      	b.n	8015d16 <_strtod_l+0x63e>
 80160e2:	f1ba 0f00 	cmp.w	sl, #0
 80160e6:	d11a      	bne.n	801611e <_strtod_l+0xa46>
 80160e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160ec:	b9eb      	cbnz	r3, 801612a <_strtod_l+0xa52>
 80160ee:	2200      	movs	r2, #0
 80160f0:	4b3f      	ldr	r3, [pc, #252]	; (80161f0 <_strtod_l+0xb18>)
 80160f2:	4630      	mov	r0, r6
 80160f4:	4639      	mov	r1, r7
 80160f6:	f7ea fd09 	bl	8000b0c <__aeabi_dcmplt>
 80160fa:	b9c8      	cbnz	r0, 8016130 <_strtod_l+0xa58>
 80160fc:	4630      	mov	r0, r6
 80160fe:	4639      	mov	r1, r7
 8016100:	2200      	movs	r2, #0
 8016102:	4b3e      	ldr	r3, [pc, #248]	; (80161fc <_strtod_l+0xb24>)
 8016104:	f7ea fa90 	bl	8000628 <__aeabi_dmul>
 8016108:	4606      	mov	r6, r0
 801610a:	460f      	mov	r7, r1
 801610c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016110:	9618      	str	r6, [sp, #96]	; 0x60
 8016112:	9319      	str	r3, [sp, #100]	; 0x64
 8016114:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016118:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801611c:	e79c      	b.n	8016058 <_strtod_l+0x980>
 801611e:	f1ba 0f01 	cmp.w	sl, #1
 8016122:	d102      	bne.n	801612a <_strtod_l+0xa52>
 8016124:	2d00      	cmp	r5, #0
 8016126:	f43f ad8e 	beq.w	8015c46 <_strtod_l+0x56e>
 801612a:	2200      	movs	r2, #0
 801612c:	4b34      	ldr	r3, [pc, #208]	; (8016200 <_strtod_l+0xb28>)
 801612e:	e78f      	b.n	8016050 <_strtod_l+0x978>
 8016130:	2600      	movs	r6, #0
 8016132:	4f32      	ldr	r7, [pc, #200]	; (80161fc <_strtod_l+0xb24>)
 8016134:	e7ea      	b.n	801610c <_strtod_l+0xa34>
 8016136:	4b31      	ldr	r3, [pc, #196]	; (80161fc <_strtod_l+0xb24>)
 8016138:	4630      	mov	r0, r6
 801613a:	4639      	mov	r1, r7
 801613c:	2200      	movs	r2, #0
 801613e:	f7ea fa73 	bl	8000628 <__aeabi_dmul>
 8016142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016144:	4606      	mov	r6, r0
 8016146:	460f      	mov	r7, r1
 8016148:	b933      	cbnz	r3, 8016158 <_strtod_l+0xa80>
 801614a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801614e:	9010      	str	r0, [sp, #64]	; 0x40
 8016150:	9311      	str	r3, [sp, #68]	; 0x44
 8016152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016156:	e7df      	b.n	8016118 <_strtod_l+0xa40>
 8016158:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801615c:	e7f9      	b.n	8016152 <_strtod_l+0xa7a>
 801615e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016162:	9b04      	ldr	r3, [sp, #16]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d1ab      	bne.n	80160c0 <_strtod_l+0x9e8>
 8016168:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801616c:	0d1b      	lsrs	r3, r3, #20
 801616e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016170:	051b      	lsls	r3, r3, #20
 8016172:	429a      	cmp	r2, r3
 8016174:	465d      	mov	r5, fp
 8016176:	d1a3      	bne.n	80160c0 <_strtod_l+0x9e8>
 8016178:	4639      	mov	r1, r7
 801617a:	4630      	mov	r0, r6
 801617c:	f7ea fd04 	bl	8000b88 <__aeabi_d2iz>
 8016180:	f7ea f9e8 	bl	8000554 <__aeabi_i2d>
 8016184:	460b      	mov	r3, r1
 8016186:	4602      	mov	r2, r0
 8016188:	4639      	mov	r1, r7
 801618a:	4630      	mov	r0, r6
 801618c:	f7ea f894 	bl	80002b8 <__aeabi_dsub>
 8016190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016192:	4606      	mov	r6, r0
 8016194:	460f      	mov	r7, r1
 8016196:	b933      	cbnz	r3, 80161a6 <_strtod_l+0xace>
 8016198:	f1ba 0f00 	cmp.w	sl, #0
 801619c:	d103      	bne.n	80161a6 <_strtod_l+0xace>
 801619e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80161a2:	2d00      	cmp	r5, #0
 80161a4:	d06d      	beq.n	8016282 <_strtod_l+0xbaa>
 80161a6:	a30a      	add	r3, pc, #40	; (adr r3, 80161d0 <_strtod_l+0xaf8>)
 80161a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ac:	4630      	mov	r0, r6
 80161ae:	4639      	mov	r1, r7
 80161b0:	f7ea fcac 	bl	8000b0c <__aeabi_dcmplt>
 80161b4:	2800      	cmp	r0, #0
 80161b6:	f47f acb8 	bne.w	8015b2a <_strtod_l+0x452>
 80161ba:	a307      	add	r3, pc, #28	; (adr r3, 80161d8 <_strtod_l+0xb00>)
 80161bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c0:	4630      	mov	r0, r6
 80161c2:	4639      	mov	r1, r7
 80161c4:	f7ea fcc0 	bl	8000b48 <__aeabi_dcmpgt>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	f43f af79 	beq.w	80160c0 <_strtod_l+0x9e8>
 80161ce:	e4ac      	b.n	8015b2a <_strtod_l+0x452>
 80161d0:	94a03595 	.word	0x94a03595
 80161d4:	3fdfffff 	.word	0x3fdfffff
 80161d8:	35afe535 	.word	0x35afe535
 80161dc:	3fe00000 	.word	0x3fe00000
 80161e0:	000fffff 	.word	0x000fffff
 80161e4:	7ff00000 	.word	0x7ff00000
 80161e8:	7fefffff 	.word	0x7fefffff
 80161ec:	39500000 	.word	0x39500000
 80161f0:	3ff00000 	.word	0x3ff00000
 80161f4:	7fe00000 	.word	0x7fe00000
 80161f8:	7c9fffff 	.word	0x7c9fffff
 80161fc:	3fe00000 	.word	0x3fe00000
 8016200:	bff00000 	.word	0xbff00000
 8016204:	9b04      	ldr	r3, [sp, #16]
 8016206:	b333      	cbz	r3, 8016256 <_strtod_l+0xb7e>
 8016208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801620a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801620e:	d822      	bhi.n	8016256 <_strtod_l+0xb7e>
 8016210:	a327      	add	r3, pc, #156	; (adr r3, 80162b0 <_strtod_l+0xbd8>)
 8016212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016216:	4630      	mov	r0, r6
 8016218:	4639      	mov	r1, r7
 801621a:	f7ea fc81 	bl	8000b20 <__aeabi_dcmple>
 801621e:	b1a0      	cbz	r0, 801624a <_strtod_l+0xb72>
 8016220:	4639      	mov	r1, r7
 8016222:	4630      	mov	r0, r6
 8016224:	f7ea fcd8 	bl	8000bd8 <__aeabi_d2uiz>
 8016228:	2800      	cmp	r0, #0
 801622a:	bf08      	it	eq
 801622c:	2001      	moveq	r0, #1
 801622e:	f7ea f981 	bl	8000534 <__aeabi_ui2d>
 8016232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016234:	4606      	mov	r6, r0
 8016236:	460f      	mov	r7, r1
 8016238:	bb03      	cbnz	r3, 801627c <_strtod_l+0xba4>
 801623a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801623e:	9012      	str	r0, [sp, #72]	; 0x48
 8016240:	9313      	str	r3, [sp, #76]	; 0x4c
 8016242:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016246:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801624a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801624c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801624e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016252:	1a9b      	subs	r3, r3, r2
 8016254:	930b      	str	r3, [sp, #44]	; 0x2c
 8016256:	ed9d 0b08 	vldr	d0, [sp, #32]
 801625a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801625e:	f001 fd61 	bl	8017d24 <__ulp>
 8016262:	4650      	mov	r0, sl
 8016264:	ec53 2b10 	vmov	r2, r3, d0
 8016268:	4659      	mov	r1, fp
 801626a:	f7ea f9dd 	bl	8000628 <__aeabi_dmul>
 801626e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016272:	f7ea f823 	bl	80002bc <__adddf3>
 8016276:	4682      	mov	sl, r0
 8016278:	468b      	mov	fp, r1
 801627a:	e772      	b.n	8016162 <_strtod_l+0xa8a>
 801627c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016280:	e7df      	b.n	8016242 <_strtod_l+0xb6a>
 8016282:	a30d      	add	r3, pc, #52	; (adr r3, 80162b8 <_strtod_l+0xbe0>)
 8016284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016288:	f7ea fc40 	bl	8000b0c <__aeabi_dcmplt>
 801628c:	e79c      	b.n	80161c8 <_strtod_l+0xaf0>
 801628e:	2300      	movs	r3, #0
 8016290:	930d      	str	r3, [sp, #52]	; 0x34
 8016292:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016296:	6013      	str	r3, [r2, #0]
 8016298:	f7ff ba61 	b.w	801575e <_strtod_l+0x86>
 801629c:	2b65      	cmp	r3, #101	; 0x65
 801629e:	f04f 0200 	mov.w	r2, #0
 80162a2:	f43f ab4e 	beq.w	8015942 <_strtod_l+0x26a>
 80162a6:	2101      	movs	r1, #1
 80162a8:	4614      	mov	r4, r2
 80162aa:	9104      	str	r1, [sp, #16]
 80162ac:	f7ff bacb 	b.w	8015846 <_strtod_l+0x16e>
 80162b0:	ffc00000 	.word	0xffc00000
 80162b4:	41dfffff 	.word	0x41dfffff
 80162b8:	94a03595 	.word	0x94a03595
 80162bc:	3fcfffff 	.word	0x3fcfffff

080162c0 <_strtod_r>:
 80162c0:	4b05      	ldr	r3, [pc, #20]	; (80162d8 <_strtod_r+0x18>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	b410      	push	{r4}
 80162c6:	6a1b      	ldr	r3, [r3, #32]
 80162c8:	4c04      	ldr	r4, [pc, #16]	; (80162dc <_strtod_r+0x1c>)
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	bf08      	it	eq
 80162ce:	4623      	moveq	r3, r4
 80162d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162d4:	f7ff ba00 	b.w	80156d8 <_strtod_l>
 80162d8:	2000000c 	.word	0x2000000c
 80162dc:	20000070 	.word	0x20000070

080162e0 <_strtol_l.isra.0>:
 80162e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162e4:	4680      	mov	r8, r0
 80162e6:	4689      	mov	r9, r1
 80162e8:	4692      	mov	sl, r2
 80162ea:	461e      	mov	r6, r3
 80162ec:	460f      	mov	r7, r1
 80162ee:	463d      	mov	r5, r7
 80162f0:	9808      	ldr	r0, [sp, #32]
 80162f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162f6:	f001 fa0d 	bl	8017714 <__locale_ctype_ptr_l>
 80162fa:	4420      	add	r0, r4
 80162fc:	7843      	ldrb	r3, [r0, #1]
 80162fe:	f013 0308 	ands.w	r3, r3, #8
 8016302:	d132      	bne.n	801636a <_strtol_l.isra.0+0x8a>
 8016304:	2c2d      	cmp	r4, #45	; 0x2d
 8016306:	d132      	bne.n	801636e <_strtol_l.isra.0+0x8e>
 8016308:	787c      	ldrb	r4, [r7, #1]
 801630a:	1cbd      	adds	r5, r7, #2
 801630c:	2201      	movs	r2, #1
 801630e:	2e00      	cmp	r6, #0
 8016310:	d05d      	beq.n	80163ce <_strtol_l.isra.0+0xee>
 8016312:	2e10      	cmp	r6, #16
 8016314:	d109      	bne.n	801632a <_strtol_l.isra.0+0x4a>
 8016316:	2c30      	cmp	r4, #48	; 0x30
 8016318:	d107      	bne.n	801632a <_strtol_l.isra.0+0x4a>
 801631a:	782b      	ldrb	r3, [r5, #0]
 801631c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016320:	2b58      	cmp	r3, #88	; 0x58
 8016322:	d14f      	bne.n	80163c4 <_strtol_l.isra.0+0xe4>
 8016324:	786c      	ldrb	r4, [r5, #1]
 8016326:	2610      	movs	r6, #16
 8016328:	3502      	adds	r5, #2
 801632a:	2a00      	cmp	r2, #0
 801632c:	bf14      	ite	ne
 801632e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016332:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016336:	2700      	movs	r7, #0
 8016338:	fbb1 fcf6 	udiv	ip, r1, r6
 801633c:	4638      	mov	r0, r7
 801633e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016342:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016346:	2b09      	cmp	r3, #9
 8016348:	d817      	bhi.n	801637a <_strtol_l.isra.0+0x9a>
 801634a:	461c      	mov	r4, r3
 801634c:	42a6      	cmp	r6, r4
 801634e:	dd23      	ble.n	8016398 <_strtol_l.isra.0+0xb8>
 8016350:	1c7b      	adds	r3, r7, #1
 8016352:	d007      	beq.n	8016364 <_strtol_l.isra.0+0x84>
 8016354:	4584      	cmp	ip, r0
 8016356:	d31c      	bcc.n	8016392 <_strtol_l.isra.0+0xb2>
 8016358:	d101      	bne.n	801635e <_strtol_l.isra.0+0x7e>
 801635a:	45a6      	cmp	lr, r4
 801635c:	db19      	blt.n	8016392 <_strtol_l.isra.0+0xb2>
 801635e:	fb00 4006 	mla	r0, r0, r6, r4
 8016362:	2701      	movs	r7, #1
 8016364:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016368:	e7eb      	b.n	8016342 <_strtol_l.isra.0+0x62>
 801636a:	462f      	mov	r7, r5
 801636c:	e7bf      	b.n	80162ee <_strtol_l.isra.0+0xe>
 801636e:	2c2b      	cmp	r4, #43	; 0x2b
 8016370:	bf04      	itt	eq
 8016372:	1cbd      	addeq	r5, r7, #2
 8016374:	787c      	ldrbeq	r4, [r7, #1]
 8016376:	461a      	mov	r2, r3
 8016378:	e7c9      	b.n	801630e <_strtol_l.isra.0+0x2e>
 801637a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801637e:	2b19      	cmp	r3, #25
 8016380:	d801      	bhi.n	8016386 <_strtol_l.isra.0+0xa6>
 8016382:	3c37      	subs	r4, #55	; 0x37
 8016384:	e7e2      	b.n	801634c <_strtol_l.isra.0+0x6c>
 8016386:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801638a:	2b19      	cmp	r3, #25
 801638c:	d804      	bhi.n	8016398 <_strtol_l.isra.0+0xb8>
 801638e:	3c57      	subs	r4, #87	; 0x57
 8016390:	e7dc      	b.n	801634c <_strtol_l.isra.0+0x6c>
 8016392:	f04f 37ff 	mov.w	r7, #4294967295
 8016396:	e7e5      	b.n	8016364 <_strtol_l.isra.0+0x84>
 8016398:	1c7b      	adds	r3, r7, #1
 801639a:	d108      	bne.n	80163ae <_strtol_l.isra.0+0xce>
 801639c:	2322      	movs	r3, #34	; 0x22
 801639e:	f8c8 3000 	str.w	r3, [r8]
 80163a2:	4608      	mov	r0, r1
 80163a4:	f1ba 0f00 	cmp.w	sl, #0
 80163a8:	d107      	bne.n	80163ba <_strtol_l.isra.0+0xda>
 80163aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163ae:	b102      	cbz	r2, 80163b2 <_strtol_l.isra.0+0xd2>
 80163b0:	4240      	negs	r0, r0
 80163b2:	f1ba 0f00 	cmp.w	sl, #0
 80163b6:	d0f8      	beq.n	80163aa <_strtol_l.isra.0+0xca>
 80163b8:	b10f      	cbz	r7, 80163be <_strtol_l.isra.0+0xde>
 80163ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80163be:	f8ca 9000 	str.w	r9, [sl]
 80163c2:	e7f2      	b.n	80163aa <_strtol_l.isra.0+0xca>
 80163c4:	2430      	movs	r4, #48	; 0x30
 80163c6:	2e00      	cmp	r6, #0
 80163c8:	d1af      	bne.n	801632a <_strtol_l.isra.0+0x4a>
 80163ca:	2608      	movs	r6, #8
 80163cc:	e7ad      	b.n	801632a <_strtol_l.isra.0+0x4a>
 80163ce:	2c30      	cmp	r4, #48	; 0x30
 80163d0:	d0a3      	beq.n	801631a <_strtol_l.isra.0+0x3a>
 80163d2:	260a      	movs	r6, #10
 80163d4:	e7a9      	b.n	801632a <_strtol_l.isra.0+0x4a>
	...

080163d8 <_strtol_r>:
 80163d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163da:	4c06      	ldr	r4, [pc, #24]	; (80163f4 <_strtol_r+0x1c>)
 80163dc:	4d06      	ldr	r5, [pc, #24]	; (80163f8 <_strtol_r+0x20>)
 80163de:	6824      	ldr	r4, [r4, #0]
 80163e0:	6a24      	ldr	r4, [r4, #32]
 80163e2:	2c00      	cmp	r4, #0
 80163e4:	bf08      	it	eq
 80163e6:	462c      	moveq	r4, r5
 80163e8:	9400      	str	r4, [sp, #0]
 80163ea:	f7ff ff79 	bl	80162e0 <_strtol_l.isra.0>
 80163ee:	b003      	add	sp, #12
 80163f0:	bd30      	pop	{r4, r5, pc}
 80163f2:	bf00      	nop
 80163f4:	2000000c 	.word	0x2000000c
 80163f8:	20000070 	.word	0x20000070

080163fc <_vsiprintf_r>:
 80163fc:	b500      	push	{lr}
 80163fe:	b09b      	sub	sp, #108	; 0x6c
 8016400:	9100      	str	r1, [sp, #0]
 8016402:	9104      	str	r1, [sp, #16]
 8016404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016408:	9105      	str	r1, [sp, #20]
 801640a:	9102      	str	r1, [sp, #8]
 801640c:	4905      	ldr	r1, [pc, #20]	; (8016424 <_vsiprintf_r+0x28>)
 801640e:	9103      	str	r1, [sp, #12]
 8016410:	4669      	mov	r1, sp
 8016412:	f001 fecb 	bl	80181ac <_svfiprintf_r>
 8016416:	9b00      	ldr	r3, [sp, #0]
 8016418:	2200      	movs	r2, #0
 801641a:	701a      	strb	r2, [r3, #0]
 801641c:	b01b      	add	sp, #108	; 0x6c
 801641e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016422:	bf00      	nop
 8016424:	ffff0208 	.word	0xffff0208

08016428 <vsiprintf>:
 8016428:	4613      	mov	r3, r2
 801642a:	460a      	mov	r2, r1
 801642c:	4601      	mov	r1, r0
 801642e:	4802      	ldr	r0, [pc, #8]	; (8016438 <vsiprintf+0x10>)
 8016430:	6800      	ldr	r0, [r0, #0]
 8016432:	f7ff bfe3 	b.w	80163fc <_vsiprintf_r>
 8016436:	bf00      	nop
 8016438:	2000000c 	.word	0x2000000c

0801643c <quorem>:
 801643c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016440:	6903      	ldr	r3, [r0, #16]
 8016442:	690c      	ldr	r4, [r1, #16]
 8016444:	42a3      	cmp	r3, r4
 8016446:	4680      	mov	r8, r0
 8016448:	f2c0 8082 	blt.w	8016550 <quorem+0x114>
 801644c:	3c01      	subs	r4, #1
 801644e:	f101 0714 	add.w	r7, r1, #20
 8016452:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016456:	f100 0614 	add.w	r6, r0, #20
 801645a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801645e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016462:	eb06 030c 	add.w	r3, r6, ip
 8016466:	3501      	adds	r5, #1
 8016468:	eb07 090c 	add.w	r9, r7, ip
 801646c:	9301      	str	r3, [sp, #4]
 801646e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016472:	b395      	cbz	r5, 80164da <quorem+0x9e>
 8016474:	f04f 0a00 	mov.w	sl, #0
 8016478:	4638      	mov	r0, r7
 801647a:	46b6      	mov	lr, r6
 801647c:	46d3      	mov	fp, sl
 801647e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016482:	b293      	uxth	r3, r2
 8016484:	fb05 a303 	mla	r3, r5, r3, sl
 8016488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801648c:	b29b      	uxth	r3, r3
 801648e:	ebab 0303 	sub.w	r3, fp, r3
 8016492:	0c12      	lsrs	r2, r2, #16
 8016494:	f8de b000 	ldr.w	fp, [lr]
 8016498:	fb05 a202 	mla	r2, r5, r2, sl
 801649c:	fa13 f38b 	uxtah	r3, r3, fp
 80164a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80164a4:	fa1f fb82 	uxth.w	fp, r2
 80164a8:	f8de 2000 	ldr.w	r2, [lr]
 80164ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80164b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80164ba:	4581      	cmp	r9, r0
 80164bc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80164c0:	f84e 3b04 	str.w	r3, [lr], #4
 80164c4:	d2db      	bcs.n	801647e <quorem+0x42>
 80164c6:	f856 300c 	ldr.w	r3, [r6, ip]
 80164ca:	b933      	cbnz	r3, 80164da <quorem+0x9e>
 80164cc:	9b01      	ldr	r3, [sp, #4]
 80164ce:	3b04      	subs	r3, #4
 80164d0:	429e      	cmp	r6, r3
 80164d2:	461a      	mov	r2, r3
 80164d4:	d330      	bcc.n	8016538 <quorem+0xfc>
 80164d6:	f8c8 4010 	str.w	r4, [r8, #16]
 80164da:	4640      	mov	r0, r8
 80164dc:	f001 fbaa 	bl	8017c34 <__mcmp>
 80164e0:	2800      	cmp	r0, #0
 80164e2:	db25      	blt.n	8016530 <quorem+0xf4>
 80164e4:	3501      	adds	r5, #1
 80164e6:	4630      	mov	r0, r6
 80164e8:	f04f 0c00 	mov.w	ip, #0
 80164ec:	f857 2b04 	ldr.w	r2, [r7], #4
 80164f0:	f8d0 e000 	ldr.w	lr, [r0]
 80164f4:	b293      	uxth	r3, r2
 80164f6:	ebac 0303 	sub.w	r3, ip, r3
 80164fa:	0c12      	lsrs	r2, r2, #16
 80164fc:	fa13 f38e 	uxtah	r3, r3, lr
 8016500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016508:	b29b      	uxth	r3, r3
 801650a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801650e:	45b9      	cmp	r9, r7
 8016510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016514:	f840 3b04 	str.w	r3, [r0], #4
 8016518:	d2e8      	bcs.n	80164ec <quorem+0xb0>
 801651a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801651e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016522:	b92a      	cbnz	r2, 8016530 <quorem+0xf4>
 8016524:	3b04      	subs	r3, #4
 8016526:	429e      	cmp	r6, r3
 8016528:	461a      	mov	r2, r3
 801652a:	d30b      	bcc.n	8016544 <quorem+0x108>
 801652c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016530:	4628      	mov	r0, r5
 8016532:	b003      	add	sp, #12
 8016534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016538:	6812      	ldr	r2, [r2, #0]
 801653a:	3b04      	subs	r3, #4
 801653c:	2a00      	cmp	r2, #0
 801653e:	d1ca      	bne.n	80164d6 <quorem+0x9a>
 8016540:	3c01      	subs	r4, #1
 8016542:	e7c5      	b.n	80164d0 <quorem+0x94>
 8016544:	6812      	ldr	r2, [r2, #0]
 8016546:	3b04      	subs	r3, #4
 8016548:	2a00      	cmp	r2, #0
 801654a:	d1ef      	bne.n	801652c <quorem+0xf0>
 801654c:	3c01      	subs	r4, #1
 801654e:	e7ea      	b.n	8016526 <quorem+0xea>
 8016550:	2000      	movs	r0, #0
 8016552:	e7ee      	b.n	8016532 <quorem+0xf6>
 8016554:	0000      	movs	r0, r0
	...

08016558 <_dtoa_r>:
 8016558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801655c:	ec57 6b10 	vmov	r6, r7, d0
 8016560:	b097      	sub	sp, #92	; 0x5c
 8016562:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016564:	9106      	str	r1, [sp, #24]
 8016566:	4604      	mov	r4, r0
 8016568:	920b      	str	r2, [sp, #44]	; 0x2c
 801656a:	9312      	str	r3, [sp, #72]	; 0x48
 801656c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016570:	e9cd 6700 	strd	r6, r7, [sp]
 8016574:	b93d      	cbnz	r5, 8016586 <_dtoa_r+0x2e>
 8016576:	2010      	movs	r0, #16
 8016578:	f001 f8ee 	bl	8017758 <malloc>
 801657c:	6260      	str	r0, [r4, #36]	; 0x24
 801657e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016582:	6005      	str	r5, [r0, #0]
 8016584:	60c5      	str	r5, [r0, #12]
 8016586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016588:	6819      	ldr	r1, [r3, #0]
 801658a:	b151      	cbz	r1, 80165a2 <_dtoa_r+0x4a>
 801658c:	685a      	ldr	r2, [r3, #4]
 801658e:	604a      	str	r2, [r1, #4]
 8016590:	2301      	movs	r3, #1
 8016592:	4093      	lsls	r3, r2
 8016594:	608b      	str	r3, [r1, #8]
 8016596:	4620      	mov	r0, r4
 8016598:	f001 f92c 	bl	80177f4 <_Bfree>
 801659c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801659e:	2200      	movs	r2, #0
 80165a0:	601a      	str	r2, [r3, #0]
 80165a2:	1e3b      	subs	r3, r7, #0
 80165a4:	bfbb      	ittet	lt
 80165a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80165aa:	9301      	strlt	r3, [sp, #4]
 80165ac:	2300      	movge	r3, #0
 80165ae:	2201      	movlt	r2, #1
 80165b0:	bfac      	ite	ge
 80165b2:	f8c8 3000 	strge.w	r3, [r8]
 80165b6:	f8c8 2000 	strlt.w	r2, [r8]
 80165ba:	4baf      	ldr	r3, [pc, #700]	; (8016878 <_dtoa_r+0x320>)
 80165bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80165c0:	ea33 0308 	bics.w	r3, r3, r8
 80165c4:	d114      	bne.n	80165f0 <_dtoa_r+0x98>
 80165c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80165cc:	6013      	str	r3, [r2, #0]
 80165ce:	9b00      	ldr	r3, [sp, #0]
 80165d0:	b923      	cbnz	r3, 80165dc <_dtoa_r+0x84>
 80165d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80165d6:	2800      	cmp	r0, #0
 80165d8:	f000 8542 	beq.w	8017060 <_dtoa_r+0xb08>
 80165dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801688c <_dtoa_r+0x334>
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	f000 8544 	beq.w	8017070 <_dtoa_r+0xb18>
 80165e8:	f10b 0303 	add.w	r3, fp, #3
 80165ec:	f000 bd3e 	b.w	801706c <_dtoa_r+0xb14>
 80165f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80165f4:	2200      	movs	r2, #0
 80165f6:	2300      	movs	r3, #0
 80165f8:	4630      	mov	r0, r6
 80165fa:	4639      	mov	r1, r7
 80165fc:	f7ea fa7c 	bl	8000af8 <__aeabi_dcmpeq>
 8016600:	4681      	mov	r9, r0
 8016602:	b168      	cbz	r0, 8016620 <_dtoa_r+0xc8>
 8016604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016606:	2301      	movs	r3, #1
 8016608:	6013      	str	r3, [r2, #0]
 801660a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801660c:	2b00      	cmp	r3, #0
 801660e:	f000 8524 	beq.w	801705a <_dtoa_r+0xb02>
 8016612:	4b9a      	ldr	r3, [pc, #616]	; (801687c <_dtoa_r+0x324>)
 8016614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016616:	f103 3bff 	add.w	fp, r3, #4294967295
 801661a:	6013      	str	r3, [r2, #0]
 801661c:	f000 bd28 	b.w	8017070 <_dtoa_r+0xb18>
 8016620:	aa14      	add	r2, sp, #80	; 0x50
 8016622:	a915      	add	r1, sp, #84	; 0x54
 8016624:	ec47 6b10 	vmov	d0, r6, r7
 8016628:	4620      	mov	r0, r4
 801662a:	f001 fbf1 	bl	8017e10 <__d2b>
 801662e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016632:	9004      	str	r0, [sp, #16]
 8016634:	2d00      	cmp	r5, #0
 8016636:	d07c      	beq.n	8016732 <_dtoa_r+0x1da>
 8016638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801663c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016640:	46b2      	mov	sl, r6
 8016642:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801664a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801664e:	2200      	movs	r2, #0
 8016650:	4b8b      	ldr	r3, [pc, #556]	; (8016880 <_dtoa_r+0x328>)
 8016652:	4650      	mov	r0, sl
 8016654:	4659      	mov	r1, fp
 8016656:	f7e9 fe2f 	bl	80002b8 <__aeabi_dsub>
 801665a:	a381      	add	r3, pc, #516	; (adr r3, 8016860 <_dtoa_r+0x308>)
 801665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016660:	f7e9 ffe2 	bl	8000628 <__aeabi_dmul>
 8016664:	a380      	add	r3, pc, #512	; (adr r3, 8016868 <_dtoa_r+0x310>)
 8016666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666a:	f7e9 fe27 	bl	80002bc <__adddf3>
 801666e:	4606      	mov	r6, r0
 8016670:	4628      	mov	r0, r5
 8016672:	460f      	mov	r7, r1
 8016674:	f7e9 ff6e 	bl	8000554 <__aeabi_i2d>
 8016678:	a37d      	add	r3, pc, #500	; (adr r3, 8016870 <_dtoa_r+0x318>)
 801667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801667e:	f7e9 ffd3 	bl	8000628 <__aeabi_dmul>
 8016682:	4602      	mov	r2, r0
 8016684:	460b      	mov	r3, r1
 8016686:	4630      	mov	r0, r6
 8016688:	4639      	mov	r1, r7
 801668a:	f7e9 fe17 	bl	80002bc <__adddf3>
 801668e:	4606      	mov	r6, r0
 8016690:	460f      	mov	r7, r1
 8016692:	f7ea fa79 	bl	8000b88 <__aeabi_d2iz>
 8016696:	2200      	movs	r2, #0
 8016698:	4682      	mov	sl, r0
 801669a:	2300      	movs	r3, #0
 801669c:	4630      	mov	r0, r6
 801669e:	4639      	mov	r1, r7
 80166a0:	f7ea fa34 	bl	8000b0c <__aeabi_dcmplt>
 80166a4:	b148      	cbz	r0, 80166ba <_dtoa_r+0x162>
 80166a6:	4650      	mov	r0, sl
 80166a8:	f7e9 ff54 	bl	8000554 <__aeabi_i2d>
 80166ac:	4632      	mov	r2, r6
 80166ae:	463b      	mov	r3, r7
 80166b0:	f7ea fa22 	bl	8000af8 <__aeabi_dcmpeq>
 80166b4:	b908      	cbnz	r0, 80166ba <_dtoa_r+0x162>
 80166b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166ba:	f1ba 0f16 	cmp.w	sl, #22
 80166be:	d859      	bhi.n	8016774 <_dtoa_r+0x21c>
 80166c0:	4970      	ldr	r1, [pc, #448]	; (8016884 <_dtoa_r+0x32c>)
 80166c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80166c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166ce:	f7ea fa3b 	bl	8000b48 <__aeabi_dcmpgt>
 80166d2:	2800      	cmp	r0, #0
 80166d4:	d050      	beq.n	8016778 <_dtoa_r+0x220>
 80166d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80166da:	2300      	movs	r3, #0
 80166dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80166de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166e0:	1b5d      	subs	r5, r3, r5
 80166e2:	f1b5 0801 	subs.w	r8, r5, #1
 80166e6:	bf49      	itett	mi
 80166e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80166ec:	2300      	movpl	r3, #0
 80166ee:	9305      	strmi	r3, [sp, #20]
 80166f0:	f04f 0800 	movmi.w	r8, #0
 80166f4:	bf58      	it	pl
 80166f6:	9305      	strpl	r3, [sp, #20]
 80166f8:	f1ba 0f00 	cmp.w	sl, #0
 80166fc:	db3e      	blt.n	801677c <_dtoa_r+0x224>
 80166fe:	2300      	movs	r3, #0
 8016700:	44d0      	add	r8, sl
 8016702:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016706:	9307      	str	r3, [sp, #28]
 8016708:	9b06      	ldr	r3, [sp, #24]
 801670a:	2b09      	cmp	r3, #9
 801670c:	f200 8090 	bhi.w	8016830 <_dtoa_r+0x2d8>
 8016710:	2b05      	cmp	r3, #5
 8016712:	bfc4      	itt	gt
 8016714:	3b04      	subgt	r3, #4
 8016716:	9306      	strgt	r3, [sp, #24]
 8016718:	9b06      	ldr	r3, [sp, #24]
 801671a:	f1a3 0302 	sub.w	r3, r3, #2
 801671e:	bfcc      	ite	gt
 8016720:	2500      	movgt	r5, #0
 8016722:	2501      	movle	r5, #1
 8016724:	2b03      	cmp	r3, #3
 8016726:	f200 808f 	bhi.w	8016848 <_dtoa_r+0x2f0>
 801672a:	e8df f003 	tbb	[pc, r3]
 801672e:	7f7d      	.short	0x7f7d
 8016730:	7131      	.short	0x7131
 8016732:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016736:	441d      	add	r5, r3
 8016738:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801673c:	2820      	cmp	r0, #32
 801673e:	dd13      	ble.n	8016768 <_dtoa_r+0x210>
 8016740:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016744:	9b00      	ldr	r3, [sp, #0]
 8016746:	fa08 f800 	lsl.w	r8, r8, r0
 801674a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801674e:	fa23 f000 	lsr.w	r0, r3, r0
 8016752:	ea48 0000 	orr.w	r0, r8, r0
 8016756:	f7e9 feed 	bl	8000534 <__aeabi_ui2d>
 801675a:	2301      	movs	r3, #1
 801675c:	4682      	mov	sl, r0
 801675e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016762:	3d01      	subs	r5, #1
 8016764:	9313      	str	r3, [sp, #76]	; 0x4c
 8016766:	e772      	b.n	801664e <_dtoa_r+0xf6>
 8016768:	9b00      	ldr	r3, [sp, #0]
 801676a:	f1c0 0020 	rsb	r0, r0, #32
 801676e:	fa03 f000 	lsl.w	r0, r3, r0
 8016772:	e7f0      	b.n	8016756 <_dtoa_r+0x1fe>
 8016774:	2301      	movs	r3, #1
 8016776:	e7b1      	b.n	80166dc <_dtoa_r+0x184>
 8016778:	900f      	str	r0, [sp, #60]	; 0x3c
 801677a:	e7b0      	b.n	80166de <_dtoa_r+0x186>
 801677c:	9b05      	ldr	r3, [sp, #20]
 801677e:	eba3 030a 	sub.w	r3, r3, sl
 8016782:	9305      	str	r3, [sp, #20]
 8016784:	f1ca 0300 	rsb	r3, sl, #0
 8016788:	9307      	str	r3, [sp, #28]
 801678a:	2300      	movs	r3, #0
 801678c:	930e      	str	r3, [sp, #56]	; 0x38
 801678e:	e7bb      	b.n	8016708 <_dtoa_r+0x1b0>
 8016790:	2301      	movs	r3, #1
 8016792:	930a      	str	r3, [sp, #40]	; 0x28
 8016794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016796:	2b00      	cmp	r3, #0
 8016798:	dd59      	ble.n	801684e <_dtoa_r+0x2f6>
 801679a:	9302      	str	r3, [sp, #8]
 801679c:	4699      	mov	r9, r3
 801679e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80167a0:	2200      	movs	r2, #0
 80167a2:	6072      	str	r2, [r6, #4]
 80167a4:	2204      	movs	r2, #4
 80167a6:	f102 0014 	add.w	r0, r2, #20
 80167aa:	4298      	cmp	r0, r3
 80167ac:	6871      	ldr	r1, [r6, #4]
 80167ae:	d953      	bls.n	8016858 <_dtoa_r+0x300>
 80167b0:	4620      	mov	r0, r4
 80167b2:	f000 ffeb 	bl	801778c <_Balloc>
 80167b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167b8:	6030      	str	r0, [r6, #0]
 80167ba:	f1b9 0f0e 	cmp.w	r9, #14
 80167be:	f8d3 b000 	ldr.w	fp, [r3]
 80167c2:	f200 80e6 	bhi.w	8016992 <_dtoa_r+0x43a>
 80167c6:	2d00      	cmp	r5, #0
 80167c8:	f000 80e3 	beq.w	8016992 <_dtoa_r+0x43a>
 80167cc:	ed9d 7b00 	vldr	d7, [sp]
 80167d0:	f1ba 0f00 	cmp.w	sl, #0
 80167d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80167d8:	dd74      	ble.n	80168c4 <_dtoa_r+0x36c>
 80167da:	4a2a      	ldr	r2, [pc, #168]	; (8016884 <_dtoa_r+0x32c>)
 80167dc:	f00a 030f 	and.w	r3, sl, #15
 80167e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80167e4:	ed93 7b00 	vldr	d7, [r3]
 80167e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80167ec:	06f0      	lsls	r0, r6, #27
 80167ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80167f2:	d565      	bpl.n	80168c0 <_dtoa_r+0x368>
 80167f4:	4b24      	ldr	r3, [pc, #144]	; (8016888 <_dtoa_r+0x330>)
 80167f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80167fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80167fe:	f7ea f83d 	bl	800087c <__aeabi_ddiv>
 8016802:	e9cd 0100 	strd	r0, r1, [sp]
 8016806:	f006 060f 	and.w	r6, r6, #15
 801680a:	2503      	movs	r5, #3
 801680c:	4f1e      	ldr	r7, [pc, #120]	; (8016888 <_dtoa_r+0x330>)
 801680e:	e04c      	b.n	80168aa <_dtoa_r+0x352>
 8016810:	2301      	movs	r3, #1
 8016812:	930a      	str	r3, [sp, #40]	; 0x28
 8016814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016816:	4453      	add	r3, sl
 8016818:	f103 0901 	add.w	r9, r3, #1
 801681c:	9302      	str	r3, [sp, #8]
 801681e:	464b      	mov	r3, r9
 8016820:	2b01      	cmp	r3, #1
 8016822:	bfb8      	it	lt
 8016824:	2301      	movlt	r3, #1
 8016826:	e7ba      	b.n	801679e <_dtoa_r+0x246>
 8016828:	2300      	movs	r3, #0
 801682a:	e7b2      	b.n	8016792 <_dtoa_r+0x23a>
 801682c:	2300      	movs	r3, #0
 801682e:	e7f0      	b.n	8016812 <_dtoa_r+0x2ba>
 8016830:	2501      	movs	r5, #1
 8016832:	2300      	movs	r3, #0
 8016834:	9306      	str	r3, [sp, #24]
 8016836:	950a      	str	r5, [sp, #40]	; 0x28
 8016838:	f04f 33ff 	mov.w	r3, #4294967295
 801683c:	9302      	str	r3, [sp, #8]
 801683e:	4699      	mov	r9, r3
 8016840:	2200      	movs	r2, #0
 8016842:	2312      	movs	r3, #18
 8016844:	920b      	str	r2, [sp, #44]	; 0x2c
 8016846:	e7aa      	b.n	801679e <_dtoa_r+0x246>
 8016848:	2301      	movs	r3, #1
 801684a:	930a      	str	r3, [sp, #40]	; 0x28
 801684c:	e7f4      	b.n	8016838 <_dtoa_r+0x2e0>
 801684e:	2301      	movs	r3, #1
 8016850:	9302      	str	r3, [sp, #8]
 8016852:	4699      	mov	r9, r3
 8016854:	461a      	mov	r2, r3
 8016856:	e7f5      	b.n	8016844 <_dtoa_r+0x2ec>
 8016858:	3101      	adds	r1, #1
 801685a:	6071      	str	r1, [r6, #4]
 801685c:	0052      	lsls	r2, r2, #1
 801685e:	e7a2      	b.n	80167a6 <_dtoa_r+0x24e>
 8016860:	636f4361 	.word	0x636f4361
 8016864:	3fd287a7 	.word	0x3fd287a7
 8016868:	8b60c8b3 	.word	0x8b60c8b3
 801686c:	3fc68a28 	.word	0x3fc68a28
 8016870:	509f79fb 	.word	0x509f79fb
 8016874:	3fd34413 	.word	0x3fd34413
 8016878:	7ff00000 	.word	0x7ff00000
 801687c:	0801970c 	.word	0x0801970c
 8016880:	3ff80000 	.word	0x3ff80000
 8016884:	08019610 	.word	0x08019610
 8016888:	080195e8 	.word	0x080195e8
 801688c:	08019571 	.word	0x08019571
 8016890:	07f1      	lsls	r1, r6, #31
 8016892:	d508      	bpl.n	80168a6 <_dtoa_r+0x34e>
 8016894:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016898:	e9d7 2300 	ldrd	r2, r3, [r7]
 801689c:	f7e9 fec4 	bl	8000628 <__aeabi_dmul>
 80168a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80168a4:	3501      	adds	r5, #1
 80168a6:	1076      	asrs	r6, r6, #1
 80168a8:	3708      	adds	r7, #8
 80168aa:	2e00      	cmp	r6, #0
 80168ac:	d1f0      	bne.n	8016890 <_dtoa_r+0x338>
 80168ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80168b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168b6:	f7e9 ffe1 	bl	800087c <__aeabi_ddiv>
 80168ba:	e9cd 0100 	strd	r0, r1, [sp]
 80168be:	e01a      	b.n	80168f6 <_dtoa_r+0x39e>
 80168c0:	2502      	movs	r5, #2
 80168c2:	e7a3      	b.n	801680c <_dtoa_r+0x2b4>
 80168c4:	f000 80a0 	beq.w	8016a08 <_dtoa_r+0x4b0>
 80168c8:	f1ca 0600 	rsb	r6, sl, #0
 80168cc:	4b9f      	ldr	r3, [pc, #636]	; (8016b4c <_dtoa_r+0x5f4>)
 80168ce:	4fa0      	ldr	r7, [pc, #640]	; (8016b50 <_dtoa_r+0x5f8>)
 80168d0:	f006 020f 	and.w	r2, r6, #15
 80168d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80168d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80168e0:	f7e9 fea2 	bl	8000628 <__aeabi_dmul>
 80168e4:	e9cd 0100 	strd	r0, r1, [sp]
 80168e8:	1136      	asrs	r6, r6, #4
 80168ea:	2300      	movs	r3, #0
 80168ec:	2502      	movs	r5, #2
 80168ee:	2e00      	cmp	r6, #0
 80168f0:	d17f      	bne.n	80169f2 <_dtoa_r+0x49a>
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d1e1      	bne.n	80168ba <_dtoa_r+0x362>
 80168f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 8087 	beq.w	8016a0c <_dtoa_r+0x4b4>
 80168fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016902:	2200      	movs	r2, #0
 8016904:	4b93      	ldr	r3, [pc, #588]	; (8016b54 <_dtoa_r+0x5fc>)
 8016906:	4630      	mov	r0, r6
 8016908:	4639      	mov	r1, r7
 801690a:	f7ea f8ff 	bl	8000b0c <__aeabi_dcmplt>
 801690e:	2800      	cmp	r0, #0
 8016910:	d07c      	beq.n	8016a0c <_dtoa_r+0x4b4>
 8016912:	f1b9 0f00 	cmp.w	r9, #0
 8016916:	d079      	beq.n	8016a0c <_dtoa_r+0x4b4>
 8016918:	9b02      	ldr	r3, [sp, #8]
 801691a:	2b00      	cmp	r3, #0
 801691c:	dd35      	ble.n	801698a <_dtoa_r+0x432>
 801691e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016922:	9308      	str	r3, [sp, #32]
 8016924:	4639      	mov	r1, r7
 8016926:	2200      	movs	r2, #0
 8016928:	4b8b      	ldr	r3, [pc, #556]	; (8016b58 <_dtoa_r+0x600>)
 801692a:	4630      	mov	r0, r6
 801692c:	f7e9 fe7c 	bl	8000628 <__aeabi_dmul>
 8016930:	e9cd 0100 	strd	r0, r1, [sp]
 8016934:	9f02      	ldr	r7, [sp, #8]
 8016936:	3501      	adds	r5, #1
 8016938:	4628      	mov	r0, r5
 801693a:	f7e9 fe0b 	bl	8000554 <__aeabi_i2d>
 801693e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016942:	f7e9 fe71 	bl	8000628 <__aeabi_dmul>
 8016946:	2200      	movs	r2, #0
 8016948:	4b84      	ldr	r3, [pc, #528]	; (8016b5c <_dtoa_r+0x604>)
 801694a:	f7e9 fcb7 	bl	80002bc <__adddf3>
 801694e:	4605      	mov	r5, r0
 8016950:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016954:	2f00      	cmp	r7, #0
 8016956:	d15d      	bne.n	8016a14 <_dtoa_r+0x4bc>
 8016958:	2200      	movs	r2, #0
 801695a:	4b81      	ldr	r3, [pc, #516]	; (8016b60 <_dtoa_r+0x608>)
 801695c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016960:	f7e9 fcaa 	bl	80002b8 <__aeabi_dsub>
 8016964:	462a      	mov	r2, r5
 8016966:	4633      	mov	r3, r6
 8016968:	e9cd 0100 	strd	r0, r1, [sp]
 801696c:	f7ea f8ec 	bl	8000b48 <__aeabi_dcmpgt>
 8016970:	2800      	cmp	r0, #0
 8016972:	f040 8288 	bne.w	8016e86 <_dtoa_r+0x92e>
 8016976:	462a      	mov	r2, r5
 8016978:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801697c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016980:	f7ea f8c4 	bl	8000b0c <__aeabi_dcmplt>
 8016984:	2800      	cmp	r0, #0
 8016986:	f040 827c 	bne.w	8016e82 <_dtoa_r+0x92a>
 801698a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801698e:	e9cd 2300 	strd	r2, r3, [sp]
 8016992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016994:	2b00      	cmp	r3, #0
 8016996:	f2c0 8150 	blt.w	8016c3a <_dtoa_r+0x6e2>
 801699a:	f1ba 0f0e 	cmp.w	sl, #14
 801699e:	f300 814c 	bgt.w	8016c3a <_dtoa_r+0x6e2>
 80169a2:	4b6a      	ldr	r3, [pc, #424]	; (8016b4c <_dtoa_r+0x5f4>)
 80169a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80169a8:	ed93 7b00 	vldr	d7, [r3]
 80169ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80169b4:	f280 80d8 	bge.w	8016b68 <_dtoa_r+0x610>
 80169b8:	f1b9 0f00 	cmp.w	r9, #0
 80169bc:	f300 80d4 	bgt.w	8016b68 <_dtoa_r+0x610>
 80169c0:	f040 825e 	bne.w	8016e80 <_dtoa_r+0x928>
 80169c4:	2200      	movs	r2, #0
 80169c6:	4b66      	ldr	r3, [pc, #408]	; (8016b60 <_dtoa_r+0x608>)
 80169c8:	ec51 0b17 	vmov	r0, r1, d7
 80169cc:	f7e9 fe2c 	bl	8000628 <__aeabi_dmul>
 80169d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169d4:	f7ea f8ae 	bl	8000b34 <__aeabi_dcmpge>
 80169d8:	464f      	mov	r7, r9
 80169da:	464e      	mov	r6, r9
 80169dc:	2800      	cmp	r0, #0
 80169de:	f040 8234 	bne.w	8016e4a <_dtoa_r+0x8f2>
 80169e2:	2331      	movs	r3, #49	; 0x31
 80169e4:	f10b 0501 	add.w	r5, fp, #1
 80169e8:	f88b 3000 	strb.w	r3, [fp]
 80169ec:	f10a 0a01 	add.w	sl, sl, #1
 80169f0:	e22f      	b.n	8016e52 <_dtoa_r+0x8fa>
 80169f2:	07f2      	lsls	r2, r6, #31
 80169f4:	d505      	bpl.n	8016a02 <_dtoa_r+0x4aa>
 80169f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169fa:	f7e9 fe15 	bl	8000628 <__aeabi_dmul>
 80169fe:	3501      	adds	r5, #1
 8016a00:	2301      	movs	r3, #1
 8016a02:	1076      	asrs	r6, r6, #1
 8016a04:	3708      	adds	r7, #8
 8016a06:	e772      	b.n	80168ee <_dtoa_r+0x396>
 8016a08:	2502      	movs	r5, #2
 8016a0a:	e774      	b.n	80168f6 <_dtoa_r+0x39e>
 8016a0c:	f8cd a020 	str.w	sl, [sp, #32]
 8016a10:	464f      	mov	r7, r9
 8016a12:	e791      	b.n	8016938 <_dtoa_r+0x3e0>
 8016a14:	4b4d      	ldr	r3, [pc, #308]	; (8016b4c <_dtoa_r+0x5f4>)
 8016a16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016a1a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d047      	beq.n	8016ab4 <_dtoa_r+0x55c>
 8016a24:	4602      	mov	r2, r0
 8016a26:	460b      	mov	r3, r1
 8016a28:	2000      	movs	r0, #0
 8016a2a:	494e      	ldr	r1, [pc, #312]	; (8016b64 <_dtoa_r+0x60c>)
 8016a2c:	f7e9 ff26 	bl	800087c <__aeabi_ddiv>
 8016a30:	462a      	mov	r2, r5
 8016a32:	4633      	mov	r3, r6
 8016a34:	f7e9 fc40 	bl	80002b8 <__aeabi_dsub>
 8016a38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a3c:	465d      	mov	r5, fp
 8016a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a42:	f7ea f8a1 	bl	8000b88 <__aeabi_d2iz>
 8016a46:	4606      	mov	r6, r0
 8016a48:	f7e9 fd84 	bl	8000554 <__aeabi_i2d>
 8016a4c:	4602      	mov	r2, r0
 8016a4e:	460b      	mov	r3, r1
 8016a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a54:	f7e9 fc30 	bl	80002b8 <__aeabi_dsub>
 8016a58:	3630      	adds	r6, #48	; 0x30
 8016a5a:	f805 6b01 	strb.w	r6, [r5], #1
 8016a5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a62:	e9cd 0100 	strd	r0, r1, [sp]
 8016a66:	f7ea f851 	bl	8000b0c <__aeabi_dcmplt>
 8016a6a:	2800      	cmp	r0, #0
 8016a6c:	d163      	bne.n	8016b36 <_dtoa_r+0x5de>
 8016a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a72:	2000      	movs	r0, #0
 8016a74:	4937      	ldr	r1, [pc, #220]	; (8016b54 <_dtoa_r+0x5fc>)
 8016a76:	f7e9 fc1f 	bl	80002b8 <__aeabi_dsub>
 8016a7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a7e:	f7ea f845 	bl	8000b0c <__aeabi_dcmplt>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	f040 80b7 	bne.w	8016bf6 <_dtoa_r+0x69e>
 8016a88:	eba5 030b 	sub.w	r3, r5, fp
 8016a8c:	429f      	cmp	r7, r3
 8016a8e:	f77f af7c 	ble.w	801698a <_dtoa_r+0x432>
 8016a92:	2200      	movs	r2, #0
 8016a94:	4b30      	ldr	r3, [pc, #192]	; (8016b58 <_dtoa_r+0x600>)
 8016a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016a9a:	f7e9 fdc5 	bl	8000628 <__aeabi_dmul>
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016aa4:	4b2c      	ldr	r3, [pc, #176]	; (8016b58 <_dtoa_r+0x600>)
 8016aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aaa:	f7e9 fdbd 	bl	8000628 <__aeabi_dmul>
 8016aae:	e9cd 0100 	strd	r0, r1, [sp]
 8016ab2:	e7c4      	b.n	8016a3e <_dtoa_r+0x4e6>
 8016ab4:	462a      	mov	r2, r5
 8016ab6:	4633      	mov	r3, r6
 8016ab8:	f7e9 fdb6 	bl	8000628 <__aeabi_dmul>
 8016abc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016ac0:	eb0b 0507 	add.w	r5, fp, r7
 8016ac4:	465e      	mov	r6, fp
 8016ac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016aca:	f7ea f85d 	bl	8000b88 <__aeabi_d2iz>
 8016ace:	4607      	mov	r7, r0
 8016ad0:	f7e9 fd40 	bl	8000554 <__aeabi_i2d>
 8016ad4:	3730      	adds	r7, #48	; 0x30
 8016ad6:	4602      	mov	r2, r0
 8016ad8:	460b      	mov	r3, r1
 8016ada:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ade:	f7e9 fbeb 	bl	80002b8 <__aeabi_dsub>
 8016ae2:	f806 7b01 	strb.w	r7, [r6], #1
 8016ae6:	42ae      	cmp	r6, r5
 8016ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8016aec:	f04f 0200 	mov.w	r2, #0
 8016af0:	d126      	bne.n	8016b40 <_dtoa_r+0x5e8>
 8016af2:	4b1c      	ldr	r3, [pc, #112]	; (8016b64 <_dtoa_r+0x60c>)
 8016af4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016af8:	f7e9 fbe0 	bl	80002bc <__adddf3>
 8016afc:	4602      	mov	r2, r0
 8016afe:	460b      	mov	r3, r1
 8016b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b04:	f7ea f820 	bl	8000b48 <__aeabi_dcmpgt>
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	d174      	bne.n	8016bf6 <_dtoa_r+0x69e>
 8016b0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b10:	2000      	movs	r0, #0
 8016b12:	4914      	ldr	r1, [pc, #80]	; (8016b64 <_dtoa_r+0x60c>)
 8016b14:	f7e9 fbd0 	bl	80002b8 <__aeabi_dsub>
 8016b18:	4602      	mov	r2, r0
 8016b1a:	460b      	mov	r3, r1
 8016b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b20:	f7e9 fff4 	bl	8000b0c <__aeabi_dcmplt>
 8016b24:	2800      	cmp	r0, #0
 8016b26:	f43f af30 	beq.w	801698a <_dtoa_r+0x432>
 8016b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016b2e:	2b30      	cmp	r3, #48	; 0x30
 8016b30:	f105 32ff 	add.w	r2, r5, #4294967295
 8016b34:	d002      	beq.n	8016b3c <_dtoa_r+0x5e4>
 8016b36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016b3a:	e04a      	b.n	8016bd2 <_dtoa_r+0x67a>
 8016b3c:	4615      	mov	r5, r2
 8016b3e:	e7f4      	b.n	8016b2a <_dtoa_r+0x5d2>
 8016b40:	4b05      	ldr	r3, [pc, #20]	; (8016b58 <_dtoa_r+0x600>)
 8016b42:	f7e9 fd71 	bl	8000628 <__aeabi_dmul>
 8016b46:	e9cd 0100 	strd	r0, r1, [sp]
 8016b4a:	e7bc      	b.n	8016ac6 <_dtoa_r+0x56e>
 8016b4c:	08019610 	.word	0x08019610
 8016b50:	080195e8 	.word	0x080195e8
 8016b54:	3ff00000 	.word	0x3ff00000
 8016b58:	40240000 	.word	0x40240000
 8016b5c:	401c0000 	.word	0x401c0000
 8016b60:	40140000 	.word	0x40140000
 8016b64:	3fe00000 	.word	0x3fe00000
 8016b68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016b6c:	465d      	mov	r5, fp
 8016b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b72:	4630      	mov	r0, r6
 8016b74:	4639      	mov	r1, r7
 8016b76:	f7e9 fe81 	bl	800087c <__aeabi_ddiv>
 8016b7a:	f7ea f805 	bl	8000b88 <__aeabi_d2iz>
 8016b7e:	4680      	mov	r8, r0
 8016b80:	f7e9 fce8 	bl	8000554 <__aeabi_i2d>
 8016b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b88:	f7e9 fd4e 	bl	8000628 <__aeabi_dmul>
 8016b8c:	4602      	mov	r2, r0
 8016b8e:	460b      	mov	r3, r1
 8016b90:	4630      	mov	r0, r6
 8016b92:	4639      	mov	r1, r7
 8016b94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016b98:	f7e9 fb8e 	bl	80002b8 <__aeabi_dsub>
 8016b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8016ba0:	eba5 060b 	sub.w	r6, r5, fp
 8016ba4:	45b1      	cmp	r9, r6
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	460b      	mov	r3, r1
 8016baa:	d139      	bne.n	8016c20 <_dtoa_r+0x6c8>
 8016bac:	f7e9 fb86 	bl	80002bc <__adddf3>
 8016bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bb4:	4606      	mov	r6, r0
 8016bb6:	460f      	mov	r7, r1
 8016bb8:	f7e9 ffc6 	bl	8000b48 <__aeabi_dcmpgt>
 8016bbc:	b9c8      	cbnz	r0, 8016bf2 <_dtoa_r+0x69a>
 8016bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	4639      	mov	r1, r7
 8016bc6:	f7e9 ff97 	bl	8000af8 <__aeabi_dcmpeq>
 8016bca:	b110      	cbz	r0, 8016bd2 <_dtoa_r+0x67a>
 8016bcc:	f018 0f01 	tst.w	r8, #1
 8016bd0:	d10f      	bne.n	8016bf2 <_dtoa_r+0x69a>
 8016bd2:	9904      	ldr	r1, [sp, #16]
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f000 fe0d 	bl	80177f4 <_Bfree>
 8016bda:	2300      	movs	r3, #0
 8016bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016bde:	702b      	strb	r3, [r5, #0]
 8016be0:	f10a 0301 	add.w	r3, sl, #1
 8016be4:	6013      	str	r3, [r2, #0]
 8016be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	f000 8241 	beq.w	8017070 <_dtoa_r+0xb18>
 8016bee:	601d      	str	r5, [r3, #0]
 8016bf0:	e23e      	b.n	8017070 <_dtoa_r+0xb18>
 8016bf2:	f8cd a020 	str.w	sl, [sp, #32]
 8016bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016bfa:	2a39      	cmp	r2, #57	; 0x39
 8016bfc:	f105 33ff 	add.w	r3, r5, #4294967295
 8016c00:	d108      	bne.n	8016c14 <_dtoa_r+0x6bc>
 8016c02:	459b      	cmp	fp, r3
 8016c04:	d10a      	bne.n	8016c1c <_dtoa_r+0x6c4>
 8016c06:	9b08      	ldr	r3, [sp, #32]
 8016c08:	3301      	adds	r3, #1
 8016c0a:	9308      	str	r3, [sp, #32]
 8016c0c:	2330      	movs	r3, #48	; 0x30
 8016c0e:	f88b 3000 	strb.w	r3, [fp]
 8016c12:	465b      	mov	r3, fp
 8016c14:	781a      	ldrb	r2, [r3, #0]
 8016c16:	3201      	adds	r2, #1
 8016c18:	701a      	strb	r2, [r3, #0]
 8016c1a:	e78c      	b.n	8016b36 <_dtoa_r+0x5de>
 8016c1c:	461d      	mov	r5, r3
 8016c1e:	e7ea      	b.n	8016bf6 <_dtoa_r+0x69e>
 8016c20:	2200      	movs	r2, #0
 8016c22:	4b9b      	ldr	r3, [pc, #620]	; (8016e90 <_dtoa_r+0x938>)
 8016c24:	f7e9 fd00 	bl	8000628 <__aeabi_dmul>
 8016c28:	2200      	movs	r2, #0
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	4606      	mov	r6, r0
 8016c2e:	460f      	mov	r7, r1
 8016c30:	f7e9 ff62 	bl	8000af8 <__aeabi_dcmpeq>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	d09a      	beq.n	8016b6e <_dtoa_r+0x616>
 8016c38:	e7cb      	b.n	8016bd2 <_dtoa_r+0x67a>
 8016c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c3c:	2a00      	cmp	r2, #0
 8016c3e:	f000 808b 	beq.w	8016d58 <_dtoa_r+0x800>
 8016c42:	9a06      	ldr	r2, [sp, #24]
 8016c44:	2a01      	cmp	r2, #1
 8016c46:	dc6e      	bgt.n	8016d26 <_dtoa_r+0x7ce>
 8016c48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c4a:	2a00      	cmp	r2, #0
 8016c4c:	d067      	beq.n	8016d1e <_dtoa_r+0x7c6>
 8016c4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016c52:	9f07      	ldr	r7, [sp, #28]
 8016c54:	9d05      	ldr	r5, [sp, #20]
 8016c56:	9a05      	ldr	r2, [sp, #20]
 8016c58:	2101      	movs	r1, #1
 8016c5a:	441a      	add	r2, r3
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	9205      	str	r2, [sp, #20]
 8016c60:	4498      	add	r8, r3
 8016c62:	f000 fea5 	bl	80179b0 <__i2b>
 8016c66:	4606      	mov	r6, r0
 8016c68:	2d00      	cmp	r5, #0
 8016c6a:	dd0c      	ble.n	8016c86 <_dtoa_r+0x72e>
 8016c6c:	f1b8 0f00 	cmp.w	r8, #0
 8016c70:	dd09      	ble.n	8016c86 <_dtoa_r+0x72e>
 8016c72:	4545      	cmp	r5, r8
 8016c74:	9a05      	ldr	r2, [sp, #20]
 8016c76:	462b      	mov	r3, r5
 8016c78:	bfa8      	it	ge
 8016c7a:	4643      	movge	r3, r8
 8016c7c:	1ad2      	subs	r2, r2, r3
 8016c7e:	9205      	str	r2, [sp, #20]
 8016c80:	1aed      	subs	r5, r5, r3
 8016c82:	eba8 0803 	sub.w	r8, r8, r3
 8016c86:	9b07      	ldr	r3, [sp, #28]
 8016c88:	b1eb      	cbz	r3, 8016cc6 <_dtoa_r+0x76e>
 8016c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d067      	beq.n	8016d60 <_dtoa_r+0x808>
 8016c90:	b18f      	cbz	r7, 8016cb6 <_dtoa_r+0x75e>
 8016c92:	4631      	mov	r1, r6
 8016c94:	463a      	mov	r2, r7
 8016c96:	4620      	mov	r0, r4
 8016c98:	f000 ff2a 	bl	8017af0 <__pow5mult>
 8016c9c:	9a04      	ldr	r2, [sp, #16]
 8016c9e:	4601      	mov	r1, r0
 8016ca0:	4606      	mov	r6, r0
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	f000 fe8d 	bl	80179c2 <__multiply>
 8016ca8:	9904      	ldr	r1, [sp, #16]
 8016caa:	9008      	str	r0, [sp, #32]
 8016cac:	4620      	mov	r0, r4
 8016cae:	f000 fda1 	bl	80177f4 <_Bfree>
 8016cb2:	9b08      	ldr	r3, [sp, #32]
 8016cb4:	9304      	str	r3, [sp, #16]
 8016cb6:	9b07      	ldr	r3, [sp, #28]
 8016cb8:	1bda      	subs	r2, r3, r7
 8016cba:	d004      	beq.n	8016cc6 <_dtoa_r+0x76e>
 8016cbc:	9904      	ldr	r1, [sp, #16]
 8016cbe:	4620      	mov	r0, r4
 8016cc0:	f000 ff16 	bl	8017af0 <__pow5mult>
 8016cc4:	9004      	str	r0, [sp, #16]
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f000 fe71 	bl	80179b0 <__i2b>
 8016cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cd0:	4607      	mov	r7, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	f000 81d0 	beq.w	8017078 <_dtoa_r+0xb20>
 8016cd8:	461a      	mov	r2, r3
 8016cda:	4601      	mov	r1, r0
 8016cdc:	4620      	mov	r0, r4
 8016cde:	f000 ff07 	bl	8017af0 <__pow5mult>
 8016ce2:	9b06      	ldr	r3, [sp, #24]
 8016ce4:	2b01      	cmp	r3, #1
 8016ce6:	4607      	mov	r7, r0
 8016ce8:	dc40      	bgt.n	8016d6c <_dtoa_r+0x814>
 8016cea:	9b00      	ldr	r3, [sp, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d139      	bne.n	8016d64 <_dtoa_r+0x80c>
 8016cf0:	9b01      	ldr	r3, [sp, #4]
 8016cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d136      	bne.n	8016d68 <_dtoa_r+0x810>
 8016cfa:	9b01      	ldr	r3, [sp, #4]
 8016cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016d00:	0d1b      	lsrs	r3, r3, #20
 8016d02:	051b      	lsls	r3, r3, #20
 8016d04:	b12b      	cbz	r3, 8016d12 <_dtoa_r+0x7ba>
 8016d06:	9b05      	ldr	r3, [sp, #20]
 8016d08:	3301      	adds	r3, #1
 8016d0a:	9305      	str	r3, [sp, #20]
 8016d0c:	f108 0801 	add.w	r8, r8, #1
 8016d10:	2301      	movs	r3, #1
 8016d12:	9307      	str	r3, [sp, #28]
 8016d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d12a      	bne.n	8016d70 <_dtoa_r+0x818>
 8016d1a:	2001      	movs	r0, #1
 8016d1c:	e030      	b.n	8016d80 <_dtoa_r+0x828>
 8016d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d20:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016d24:	e795      	b.n	8016c52 <_dtoa_r+0x6fa>
 8016d26:	9b07      	ldr	r3, [sp, #28]
 8016d28:	f109 37ff 	add.w	r7, r9, #4294967295
 8016d2c:	42bb      	cmp	r3, r7
 8016d2e:	bfbf      	itttt	lt
 8016d30:	9b07      	ldrlt	r3, [sp, #28]
 8016d32:	9707      	strlt	r7, [sp, #28]
 8016d34:	1afa      	sublt	r2, r7, r3
 8016d36:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016d38:	bfbb      	ittet	lt
 8016d3a:	189b      	addlt	r3, r3, r2
 8016d3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016d3e:	1bdf      	subge	r7, r3, r7
 8016d40:	2700      	movlt	r7, #0
 8016d42:	f1b9 0f00 	cmp.w	r9, #0
 8016d46:	bfb5      	itete	lt
 8016d48:	9b05      	ldrlt	r3, [sp, #20]
 8016d4a:	9d05      	ldrge	r5, [sp, #20]
 8016d4c:	eba3 0509 	sublt.w	r5, r3, r9
 8016d50:	464b      	movge	r3, r9
 8016d52:	bfb8      	it	lt
 8016d54:	2300      	movlt	r3, #0
 8016d56:	e77e      	b.n	8016c56 <_dtoa_r+0x6fe>
 8016d58:	9f07      	ldr	r7, [sp, #28]
 8016d5a:	9d05      	ldr	r5, [sp, #20]
 8016d5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016d5e:	e783      	b.n	8016c68 <_dtoa_r+0x710>
 8016d60:	9a07      	ldr	r2, [sp, #28]
 8016d62:	e7ab      	b.n	8016cbc <_dtoa_r+0x764>
 8016d64:	2300      	movs	r3, #0
 8016d66:	e7d4      	b.n	8016d12 <_dtoa_r+0x7ba>
 8016d68:	9b00      	ldr	r3, [sp, #0]
 8016d6a:	e7d2      	b.n	8016d12 <_dtoa_r+0x7ba>
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	9307      	str	r3, [sp, #28]
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016d76:	6918      	ldr	r0, [r3, #16]
 8016d78:	f000 fdcc 	bl	8017914 <__hi0bits>
 8016d7c:	f1c0 0020 	rsb	r0, r0, #32
 8016d80:	4440      	add	r0, r8
 8016d82:	f010 001f 	ands.w	r0, r0, #31
 8016d86:	d047      	beq.n	8016e18 <_dtoa_r+0x8c0>
 8016d88:	f1c0 0320 	rsb	r3, r0, #32
 8016d8c:	2b04      	cmp	r3, #4
 8016d8e:	dd3b      	ble.n	8016e08 <_dtoa_r+0x8b0>
 8016d90:	9b05      	ldr	r3, [sp, #20]
 8016d92:	f1c0 001c 	rsb	r0, r0, #28
 8016d96:	4403      	add	r3, r0
 8016d98:	9305      	str	r3, [sp, #20]
 8016d9a:	4405      	add	r5, r0
 8016d9c:	4480      	add	r8, r0
 8016d9e:	9b05      	ldr	r3, [sp, #20]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	dd05      	ble.n	8016db0 <_dtoa_r+0x858>
 8016da4:	461a      	mov	r2, r3
 8016da6:	9904      	ldr	r1, [sp, #16]
 8016da8:	4620      	mov	r0, r4
 8016daa:	f000 feef 	bl	8017b8c <__lshift>
 8016dae:	9004      	str	r0, [sp, #16]
 8016db0:	f1b8 0f00 	cmp.w	r8, #0
 8016db4:	dd05      	ble.n	8016dc2 <_dtoa_r+0x86a>
 8016db6:	4639      	mov	r1, r7
 8016db8:	4642      	mov	r2, r8
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f000 fee6 	bl	8017b8c <__lshift>
 8016dc0:	4607      	mov	r7, r0
 8016dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dc4:	b353      	cbz	r3, 8016e1c <_dtoa_r+0x8c4>
 8016dc6:	4639      	mov	r1, r7
 8016dc8:	9804      	ldr	r0, [sp, #16]
 8016dca:	f000 ff33 	bl	8017c34 <__mcmp>
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	da24      	bge.n	8016e1c <_dtoa_r+0x8c4>
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	220a      	movs	r2, #10
 8016dd6:	9904      	ldr	r1, [sp, #16]
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f000 fd22 	bl	8017822 <__multadd>
 8016dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016de0:	9004      	str	r0, [sp, #16]
 8016de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f000 814d 	beq.w	8017086 <_dtoa_r+0xb2e>
 8016dec:	2300      	movs	r3, #0
 8016dee:	4631      	mov	r1, r6
 8016df0:	220a      	movs	r2, #10
 8016df2:	4620      	mov	r0, r4
 8016df4:	f000 fd15 	bl	8017822 <__multadd>
 8016df8:	9b02      	ldr	r3, [sp, #8]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	dc4f      	bgt.n	8016ea0 <_dtoa_r+0x948>
 8016e00:	9b06      	ldr	r3, [sp, #24]
 8016e02:	2b02      	cmp	r3, #2
 8016e04:	dd4c      	ble.n	8016ea0 <_dtoa_r+0x948>
 8016e06:	e011      	b.n	8016e2c <_dtoa_r+0x8d4>
 8016e08:	d0c9      	beq.n	8016d9e <_dtoa_r+0x846>
 8016e0a:	9a05      	ldr	r2, [sp, #20]
 8016e0c:	331c      	adds	r3, #28
 8016e0e:	441a      	add	r2, r3
 8016e10:	9205      	str	r2, [sp, #20]
 8016e12:	441d      	add	r5, r3
 8016e14:	4498      	add	r8, r3
 8016e16:	e7c2      	b.n	8016d9e <_dtoa_r+0x846>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	e7f6      	b.n	8016e0a <_dtoa_r+0x8b2>
 8016e1c:	f1b9 0f00 	cmp.w	r9, #0
 8016e20:	dc38      	bgt.n	8016e94 <_dtoa_r+0x93c>
 8016e22:	9b06      	ldr	r3, [sp, #24]
 8016e24:	2b02      	cmp	r3, #2
 8016e26:	dd35      	ble.n	8016e94 <_dtoa_r+0x93c>
 8016e28:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e2c:	9b02      	ldr	r3, [sp, #8]
 8016e2e:	b963      	cbnz	r3, 8016e4a <_dtoa_r+0x8f2>
 8016e30:	4639      	mov	r1, r7
 8016e32:	2205      	movs	r2, #5
 8016e34:	4620      	mov	r0, r4
 8016e36:	f000 fcf4 	bl	8017822 <__multadd>
 8016e3a:	4601      	mov	r1, r0
 8016e3c:	4607      	mov	r7, r0
 8016e3e:	9804      	ldr	r0, [sp, #16]
 8016e40:	f000 fef8 	bl	8017c34 <__mcmp>
 8016e44:	2800      	cmp	r0, #0
 8016e46:	f73f adcc 	bgt.w	80169e2 <_dtoa_r+0x48a>
 8016e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e4c:	465d      	mov	r5, fp
 8016e4e:	ea6f 0a03 	mvn.w	sl, r3
 8016e52:	f04f 0900 	mov.w	r9, #0
 8016e56:	4639      	mov	r1, r7
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f000 fccb 	bl	80177f4 <_Bfree>
 8016e5e:	2e00      	cmp	r6, #0
 8016e60:	f43f aeb7 	beq.w	8016bd2 <_dtoa_r+0x67a>
 8016e64:	f1b9 0f00 	cmp.w	r9, #0
 8016e68:	d005      	beq.n	8016e76 <_dtoa_r+0x91e>
 8016e6a:	45b1      	cmp	r9, r6
 8016e6c:	d003      	beq.n	8016e76 <_dtoa_r+0x91e>
 8016e6e:	4649      	mov	r1, r9
 8016e70:	4620      	mov	r0, r4
 8016e72:	f000 fcbf 	bl	80177f4 <_Bfree>
 8016e76:	4631      	mov	r1, r6
 8016e78:	4620      	mov	r0, r4
 8016e7a:	f000 fcbb 	bl	80177f4 <_Bfree>
 8016e7e:	e6a8      	b.n	8016bd2 <_dtoa_r+0x67a>
 8016e80:	2700      	movs	r7, #0
 8016e82:	463e      	mov	r6, r7
 8016e84:	e7e1      	b.n	8016e4a <_dtoa_r+0x8f2>
 8016e86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016e8a:	463e      	mov	r6, r7
 8016e8c:	e5a9      	b.n	80169e2 <_dtoa_r+0x48a>
 8016e8e:	bf00      	nop
 8016e90:	40240000 	.word	0x40240000
 8016e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e96:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	f000 80fa 	beq.w	8017094 <_dtoa_r+0xb3c>
 8016ea0:	2d00      	cmp	r5, #0
 8016ea2:	dd05      	ble.n	8016eb0 <_dtoa_r+0x958>
 8016ea4:	4631      	mov	r1, r6
 8016ea6:	462a      	mov	r2, r5
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f000 fe6f 	bl	8017b8c <__lshift>
 8016eae:	4606      	mov	r6, r0
 8016eb0:	9b07      	ldr	r3, [sp, #28]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d04c      	beq.n	8016f50 <_dtoa_r+0x9f8>
 8016eb6:	6871      	ldr	r1, [r6, #4]
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f000 fc67 	bl	801778c <_Balloc>
 8016ebe:	6932      	ldr	r2, [r6, #16]
 8016ec0:	3202      	adds	r2, #2
 8016ec2:	4605      	mov	r5, r0
 8016ec4:	0092      	lsls	r2, r2, #2
 8016ec6:	f106 010c 	add.w	r1, r6, #12
 8016eca:	300c      	adds	r0, #12
 8016ecc:	f7fd fd08 	bl	80148e0 <memcpy>
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	4629      	mov	r1, r5
 8016ed4:	4620      	mov	r0, r4
 8016ed6:	f000 fe59 	bl	8017b8c <__lshift>
 8016eda:	9b00      	ldr	r3, [sp, #0]
 8016edc:	f8cd b014 	str.w	fp, [sp, #20]
 8016ee0:	f003 0301 	and.w	r3, r3, #1
 8016ee4:	46b1      	mov	r9, r6
 8016ee6:	9307      	str	r3, [sp, #28]
 8016ee8:	4606      	mov	r6, r0
 8016eea:	4639      	mov	r1, r7
 8016eec:	9804      	ldr	r0, [sp, #16]
 8016eee:	f7ff faa5 	bl	801643c <quorem>
 8016ef2:	4649      	mov	r1, r9
 8016ef4:	4605      	mov	r5, r0
 8016ef6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016efa:	9804      	ldr	r0, [sp, #16]
 8016efc:	f000 fe9a 	bl	8017c34 <__mcmp>
 8016f00:	4632      	mov	r2, r6
 8016f02:	9000      	str	r0, [sp, #0]
 8016f04:	4639      	mov	r1, r7
 8016f06:	4620      	mov	r0, r4
 8016f08:	f000 feae 	bl	8017c68 <__mdiff>
 8016f0c:	68c3      	ldr	r3, [r0, #12]
 8016f0e:	4602      	mov	r2, r0
 8016f10:	bb03      	cbnz	r3, 8016f54 <_dtoa_r+0x9fc>
 8016f12:	4601      	mov	r1, r0
 8016f14:	9008      	str	r0, [sp, #32]
 8016f16:	9804      	ldr	r0, [sp, #16]
 8016f18:	f000 fe8c 	bl	8017c34 <__mcmp>
 8016f1c:	9a08      	ldr	r2, [sp, #32]
 8016f1e:	4603      	mov	r3, r0
 8016f20:	4611      	mov	r1, r2
 8016f22:	4620      	mov	r0, r4
 8016f24:	9308      	str	r3, [sp, #32]
 8016f26:	f000 fc65 	bl	80177f4 <_Bfree>
 8016f2a:	9b08      	ldr	r3, [sp, #32]
 8016f2c:	b9a3      	cbnz	r3, 8016f58 <_dtoa_r+0xa00>
 8016f2e:	9a06      	ldr	r2, [sp, #24]
 8016f30:	b992      	cbnz	r2, 8016f58 <_dtoa_r+0xa00>
 8016f32:	9a07      	ldr	r2, [sp, #28]
 8016f34:	b982      	cbnz	r2, 8016f58 <_dtoa_r+0xa00>
 8016f36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016f3a:	d029      	beq.n	8016f90 <_dtoa_r+0xa38>
 8016f3c:	9b00      	ldr	r3, [sp, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	dd01      	ble.n	8016f46 <_dtoa_r+0x9ee>
 8016f42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016f46:	9b05      	ldr	r3, [sp, #20]
 8016f48:	1c5d      	adds	r5, r3, #1
 8016f4a:	f883 8000 	strb.w	r8, [r3]
 8016f4e:	e782      	b.n	8016e56 <_dtoa_r+0x8fe>
 8016f50:	4630      	mov	r0, r6
 8016f52:	e7c2      	b.n	8016eda <_dtoa_r+0x982>
 8016f54:	2301      	movs	r3, #1
 8016f56:	e7e3      	b.n	8016f20 <_dtoa_r+0x9c8>
 8016f58:	9a00      	ldr	r2, [sp, #0]
 8016f5a:	2a00      	cmp	r2, #0
 8016f5c:	db04      	blt.n	8016f68 <_dtoa_r+0xa10>
 8016f5e:	d125      	bne.n	8016fac <_dtoa_r+0xa54>
 8016f60:	9a06      	ldr	r2, [sp, #24]
 8016f62:	bb1a      	cbnz	r2, 8016fac <_dtoa_r+0xa54>
 8016f64:	9a07      	ldr	r2, [sp, #28]
 8016f66:	bb0a      	cbnz	r2, 8016fac <_dtoa_r+0xa54>
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	ddec      	ble.n	8016f46 <_dtoa_r+0x9ee>
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	9904      	ldr	r1, [sp, #16]
 8016f70:	4620      	mov	r0, r4
 8016f72:	f000 fe0b 	bl	8017b8c <__lshift>
 8016f76:	4639      	mov	r1, r7
 8016f78:	9004      	str	r0, [sp, #16]
 8016f7a:	f000 fe5b 	bl	8017c34 <__mcmp>
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	dc03      	bgt.n	8016f8a <_dtoa_r+0xa32>
 8016f82:	d1e0      	bne.n	8016f46 <_dtoa_r+0x9ee>
 8016f84:	f018 0f01 	tst.w	r8, #1
 8016f88:	d0dd      	beq.n	8016f46 <_dtoa_r+0x9ee>
 8016f8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016f8e:	d1d8      	bne.n	8016f42 <_dtoa_r+0x9ea>
 8016f90:	9b05      	ldr	r3, [sp, #20]
 8016f92:	9a05      	ldr	r2, [sp, #20]
 8016f94:	1c5d      	adds	r5, r3, #1
 8016f96:	2339      	movs	r3, #57	; 0x39
 8016f98:	7013      	strb	r3, [r2, #0]
 8016f9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f9e:	2b39      	cmp	r3, #57	; 0x39
 8016fa0:	f105 32ff 	add.w	r2, r5, #4294967295
 8016fa4:	d04f      	beq.n	8017046 <_dtoa_r+0xaee>
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	7013      	strb	r3, [r2, #0]
 8016faa:	e754      	b.n	8016e56 <_dtoa_r+0x8fe>
 8016fac:	9a05      	ldr	r2, [sp, #20]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	f102 0501 	add.w	r5, r2, #1
 8016fb4:	dd06      	ble.n	8016fc4 <_dtoa_r+0xa6c>
 8016fb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016fba:	d0e9      	beq.n	8016f90 <_dtoa_r+0xa38>
 8016fbc:	f108 0801 	add.w	r8, r8, #1
 8016fc0:	9b05      	ldr	r3, [sp, #20]
 8016fc2:	e7c2      	b.n	8016f4a <_dtoa_r+0x9f2>
 8016fc4:	9a02      	ldr	r2, [sp, #8]
 8016fc6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016fca:	eba5 030b 	sub.w	r3, r5, fp
 8016fce:	4293      	cmp	r3, r2
 8016fd0:	d021      	beq.n	8017016 <_dtoa_r+0xabe>
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	220a      	movs	r2, #10
 8016fd6:	9904      	ldr	r1, [sp, #16]
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f000 fc22 	bl	8017822 <__multadd>
 8016fde:	45b1      	cmp	r9, r6
 8016fe0:	9004      	str	r0, [sp, #16]
 8016fe2:	f04f 0300 	mov.w	r3, #0
 8016fe6:	f04f 020a 	mov.w	r2, #10
 8016fea:	4649      	mov	r1, r9
 8016fec:	4620      	mov	r0, r4
 8016fee:	d105      	bne.n	8016ffc <_dtoa_r+0xaa4>
 8016ff0:	f000 fc17 	bl	8017822 <__multadd>
 8016ff4:	4681      	mov	r9, r0
 8016ff6:	4606      	mov	r6, r0
 8016ff8:	9505      	str	r5, [sp, #20]
 8016ffa:	e776      	b.n	8016eea <_dtoa_r+0x992>
 8016ffc:	f000 fc11 	bl	8017822 <__multadd>
 8017000:	4631      	mov	r1, r6
 8017002:	4681      	mov	r9, r0
 8017004:	2300      	movs	r3, #0
 8017006:	220a      	movs	r2, #10
 8017008:	4620      	mov	r0, r4
 801700a:	f000 fc0a 	bl	8017822 <__multadd>
 801700e:	4606      	mov	r6, r0
 8017010:	e7f2      	b.n	8016ff8 <_dtoa_r+0xaa0>
 8017012:	f04f 0900 	mov.w	r9, #0
 8017016:	2201      	movs	r2, #1
 8017018:	9904      	ldr	r1, [sp, #16]
 801701a:	4620      	mov	r0, r4
 801701c:	f000 fdb6 	bl	8017b8c <__lshift>
 8017020:	4639      	mov	r1, r7
 8017022:	9004      	str	r0, [sp, #16]
 8017024:	f000 fe06 	bl	8017c34 <__mcmp>
 8017028:	2800      	cmp	r0, #0
 801702a:	dcb6      	bgt.n	8016f9a <_dtoa_r+0xa42>
 801702c:	d102      	bne.n	8017034 <_dtoa_r+0xadc>
 801702e:	f018 0f01 	tst.w	r8, #1
 8017032:	d1b2      	bne.n	8016f9a <_dtoa_r+0xa42>
 8017034:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017038:	2b30      	cmp	r3, #48	; 0x30
 801703a:	f105 32ff 	add.w	r2, r5, #4294967295
 801703e:	f47f af0a 	bne.w	8016e56 <_dtoa_r+0x8fe>
 8017042:	4615      	mov	r5, r2
 8017044:	e7f6      	b.n	8017034 <_dtoa_r+0xadc>
 8017046:	4593      	cmp	fp, r2
 8017048:	d105      	bne.n	8017056 <_dtoa_r+0xafe>
 801704a:	2331      	movs	r3, #49	; 0x31
 801704c:	f10a 0a01 	add.w	sl, sl, #1
 8017050:	f88b 3000 	strb.w	r3, [fp]
 8017054:	e6ff      	b.n	8016e56 <_dtoa_r+0x8fe>
 8017056:	4615      	mov	r5, r2
 8017058:	e79f      	b.n	8016f9a <_dtoa_r+0xa42>
 801705a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80170c0 <_dtoa_r+0xb68>
 801705e:	e007      	b.n	8017070 <_dtoa_r+0xb18>
 8017060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017062:	f8df b060 	ldr.w	fp, [pc, #96]	; 80170c4 <_dtoa_r+0xb6c>
 8017066:	b11b      	cbz	r3, 8017070 <_dtoa_r+0xb18>
 8017068:	f10b 0308 	add.w	r3, fp, #8
 801706c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801706e:	6013      	str	r3, [r2, #0]
 8017070:	4658      	mov	r0, fp
 8017072:	b017      	add	sp, #92	; 0x5c
 8017074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017078:	9b06      	ldr	r3, [sp, #24]
 801707a:	2b01      	cmp	r3, #1
 801707c:	f77f ae35 	ble.w	8016cea <_dtoa_r+0x792>
 8017080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017082:	9307      	str	r3, [sp, #28]
 8017084:	e649      	b.n	8016d1a <_dtoa_r+0x7c2>
 8017086:	9b02      	ldr	r3, [sp, #8]
 8017088:	2b00      	cmp	r3, #0
 801708a:	dc03      	bgt.n	8017094 <_dtoa_r+0xb3c>
 801708c:	9b06      	ldr	r3, [sp, #24]
 801708e:	2b02      	cmp	r3, #2
 8017090:	f73f aecc 	bgt.w	8016e2c <_dtoa_r+0x8d4>
 8017094:	465d      	mov	r5, fp
 8017096:	4639      	mov	r1, r7
 8017098:	9804      	ldr	r0, [sp, #16]
 801709a:	f7ff f9cf 	bl	801643c <quorem>
 801709e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80170a2:	f805 8b01 	strb.w	r8, [r5], #1
 80170a6:	9a02      	ldr	r2, [sp, #8]
 80170a8:	eba5 030b 	sub.w	r3, r5, fp
 80170ac:	429a      	cmp	r2, r3
 80170ae:	ddb0      	ble.n	8017012 <_dtoa_r+0xaba>
 80170b0:	2300      	movs	r3, #0
 80170b2:	220a      	movs	r2, #10
 80170b4:	9904      	ldr	r1, [sp, #16]
 80170b6:	4620      	mov	r0, r4
 80170b8:	f000 fbb3 	bl	8017822 <__multadd>
 80170bc:	9004      	str	r0, [sp, #16]
 80170be:	e7ea      	b.n	8017096 <_dtoa_r+0xb3e>
 80170c0:	0801970b 	.word	0x0801970b
 80170c4:	08019568 	.word	0x08019568

080170c8 <rshift>:
 80170c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ca:	6906      	ldr	r6, [r0, #16]
 80170cc:	114b      	asrs	r3, r1, #5
 80170ce:	429e      	cmp	r6, r3
 80170d0:	f100 0414 	add.w	r4, r0, #20
 80170d4:	dd30      	ble.n	8017138 <rshift+0x70>
 80170d6:	f011 011f 	ands.w	r1, r1, #31
 80170da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80170de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80170e2:	d108      	bne.n	80170f6 <rshift+0x2e>
 80170e4:	4621      	mov	r1, r4
 80170e6:	42b2      	cmp	r2, r6
 80170e8:	460b      	mov	r3, r1
 80170ea:	d211      	bcs.n	8017110 <rshift+0x48>
 80170ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80170f0:	f841 3b04 	str.w	r3, [r1], #4
 80170f4:	e7f7      	b.n	80170e6 <rshift+0x1e>
 80170f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80170fa:	f1c1 0c20 	rsb	ip, r1, #32
 80170fe:	40cd      	lsrs	r5, r1
 8017100:	3204      	adds	r2, #4
 8017102:	4623      	mov	r3, r4
 8017104:	42b2      	cmp	r2, r6
 8017106:	4617      	mov	r7, r2
 8017108:	d30c      	bcc.n	8017124 <rshift+0x5c>
 801710a:	601d      	str	r5, [r3, #0]
 801710c:	b105      	cbz	r5, 8017110 <rshift+0x48>
 801710e:	3304      	adds	r3, #4
 8017110:	1b1a      	subs	r2, r3, r4
 8017112:	42a3      	cmp	r3, r4
 8017114:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017118:	bf08      	it	eq
 801711a:	2300      	moveq	r3, #0
 801711c:	6102      	str	r2, [r0, #16]
 801711e:	bf08      	it	eq
 8017120:	6143      	streq	r3, [r0, #20]
 8017122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017124:	683f      	ldr	r7, [r7, #0]
 8017126:	fa07 f70c 	lsl.w	r7, r7, ip
 801712a:	433d      	orrs	r5, r7
 801712c:	f843 5b04 	str.w	r5, [r3], #4
 8017130:	f852 5b04 	ldr.w	r5, [r2], #4
 8017134:	40cd      	lsrs	r5, r1
 8017136:	e7e5      	b.n	8017104 <rshift+0x3c>
 8017138:	4623      	mov	r3, r4
 801713a:	e7e9      	b.n	8017110 <rshift+0x48>

0801713c <__hexdig_fun>:
 801713c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017140:	2b09      	cmp	r3, #9
 8017142:	d802      	bhi.n	801714a <__hexdig_fun+0xe>
 8017144:	3820      	subs	r0, #32
 8017146:	b2c0      	uxtb	r0, r0
 8017148:	4770      	bx	lr
 801714a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801714e:	2b05      	cmp	r3, #5
 8017150:	d801      	bhi.n	8017156 <__hexdig_fun+0x1a>
 8017152:	3847      	subs	r0, #71	; 0x47
 8017154:	e7f7      	b.n	8017146 <__hexdig_fun+0xa>
 8017156:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801715a:	2b05      	cmp	r3, #5
 801715c:	d801      	bhi.n	8017162 <__hexdig_fun+0x26>
 801715e:	3827      	subs	r0, #39	; 0x27
 8017160:	e7f1      	b.n	8017146 <__hexdig_fun+0xa>
 8017162:	2000      	movs	r0, #0
 8017164:	4770      	bx	lr

08017166 <__gethex>:
 8017166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801716a:	b08b      	sub	sp, #44	; 0x2c
 801716c:	468a      	mov	sl, r1
 801716e:	9002      	str	r0, [sp, #8]
 8017170:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017172:	9306      	str	r3, [sp, #24]
 8017174:	4690      	mov	r8, r2
 8017176:	f000 fadf 	bl	8017738 <__localeconv_l>
 801717a:	6803      	ldr	r3, [r0, #0]
 801717c:	9303      	str	r3, [sp, #12]
 801717e:	4618      	mov	r0, r3
 8017180:	f7e9 f83e 	bl	8000200 <strlen>
 8017184:	9b03      	ldr	r3, [sp, #12]
 8017186:	9001      	str	r0, [sp, #4]
 8017188:	4403      	add	r3, r0
 801718a:	f04f 0b00 	mov.w	fp, #0
 801718e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017192:	9307      	str	r3, [sp, #28]
 8017194:	f8da 3000 	ldr.w	r3, [sl]
 8017198:	3302      	adds	r3, #2
 801719a:	461f      	mov	r7, r3
 801719c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80171a0:	2830      	cmp	r0, #48	; 0x30
 80171a2:	d06c      	beq.n	801727e <__gethex+0x118>
 80171a4:	f7ff ffca 	bl	801713c <__hexdig_fun>
 80171a8:	4604      	mov	r4, r0
 80171aa:	2800      	cmp	r0, #0
 80171ac:	d16a      	bne.n	8017284 <__gethex+0x11e>
 80171ae:	9a01      	ldr	r2, [sp, #4]
 80171b0:	9903      	ldr	r1, [sp, #12]
 80171b2:	4638      	mov	r0, r7
 80171b4:	f001 fc36 	bl	8018a24 <strncmp>
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d166      	bne.n	801728a <__gethex+0x124>
 80171bc:	9b01      	ldr	r3, [sp, #4]
 80171be:	5cf8      	ldrb	r0, [r7, r3]
 80171c0:	18fe      	adds	r6, r7, r3
 80171c2:	f7ff ffbb 	bl	801713c <__hexdig_fun>
 80171c6:	2800      	cmp	r0, #0
 80171c8:	d062      	beq.n	8017290 <__gethex+0x12a>
 80171ca:	4633      	mov	r3, r6
 80171cc:	7818      	ldrb	r0, [r3, #0]
 80171ce:	2830      	cmp	r0, #48	; 0x30
 80171d0:	461f      	mov	r7, r3
 80171d2:	f103 0301 	add.w	r3, r3, #1
 80171d6:	d0f9      	beq.n	80171cc <__gethex+0x66>
 80171d8:	f7ff ffb0 	bl	801713c <__hexdig_fun>
 80171dc:	fab0 f580 	clz	r5, r0
 80171e0:	096d      	lsrs	r5, r5, #5
 80171e2:	4634      	mov	r4, r6
 80171e4:	f04f 0b01 	mov.w	fp, #1
 80171e8:	463a      	mov	r2, r7
 80171ea:	4616      	mov	r6, r2
 80171ec:	3201      	adds	r2, #1
 80171ee:	7830      	ldrb	r0, [r6, #0]
 80171f0:	f7ff ffa4 	bl	801713c <__hexdig_fun>
 80171f4:	2800      	cmp	r0, #0
 80171f6:	d1f8      	bne.n	80171ea <__gethex+0x84>
 80171f8:	9a01      	ldr	r2, [sp, #4]
 80171fa:	9903      	ldr	r1, [sp, #12]
 80171fc:	4630      	mov	r0, r6
 80171fe:	f001 fc11 	bl	8018a24 <strncmp>
 8017202:	b950      	cbnz	r0, 801721a <__gethex+0xb4>
 8017204:	b954      	cbnz	r4, 801721c <__gethex+0xb6>
 8017206:	9b01      	ldr	r3, [sp, #4]
 8017208:	18f4      	adds	r4, r6, r3
 801720a:	4622      	mov	r2, r4
 801720c:	4616      	mov	r6, r2
 801720e:	3201      	adds	r2, #1
 8017210:	7830      	ldrb	r0, [r6, #0]
 8017212:	f7ff ff93 	bl	801713c <__hexdig_fun>
 8017216:	2800      	cmp	r0, #0
 8017218:	d1f8      	bne.n	801720c <__gethex+0xa6>
 801721a:	b10c      	cbz	r4, 8017220 <__gethex+0xba>
 801721c:	1ba4      	subs	r4, r4, r6
 801721e:	00a4      	lsls	r4, r4, #2
 8017220:	7833      	ldrb	r3, [r6, #0]
 8017222:	2b50      	cmp	r3, #80	; 0x50
 8017224:	d001      	beq.n	801722a <__gethex+0xc4>
 8017226:	2b70      	cmp	r3, #112	; 0x70
 8017228:	d140      	bne.n	80172ac <__gethex+0x146>
 801722a:	7873      	ldrb	r3, [r6, #1]
 801722c:	2b2b      	cmp	r3, #43	; 0x2b
 801722e:	d031      	beq.n	8017294 <__gethex+0x12e>
 8017230:	2b2d      	cmp	r3, #45	; 0x2d
 8017232:	d033      	beq.n	801729c <__gethex+0x136>
 8017234:	1c71      	adds	r1, r6, #1
 8017236:	f04f 0900 	mov.w	r9, #0
 801723a:	7808      	ldrb	r0, [r1, #0]
 801723c:	f7ff ff7e 	bl	801713c <__hexdig_fun>
 8017240:	1e43      	subs	r3, r0, #1
 8017242:	b2db      	uxtb	r3, r3
 8017244:	2b18      	cmp	r3, #24
 8017246:	d831      	bhi.n	80172ac <__gethex+0x146>
 8017248:	f1a0 0210 	sub.w	r2, r0, #16
 801724c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017250:	f7ff ff74 	bl	801713c <__hexdig_fun>
 8017254:	1e43      	subs	r3, r0, #1
 8017256:	b2db      	uxtb	r3, r3
 8017258:	2b18      	cmp	r3, #24
 801725a:	d922      	bls.n	80172a2 <__gethex+0x13c>
 801725c:	f1b9 0f00 	cmp.w	r9, #0
 8017260:	d000      	beq.n	8017264 <__gethex+0xfe>
 8017262:	4252      	negs	r2, r2
 8017264:	4414      	add	r4, r2
 8017266:	f8ca 1000 	str.w	r1, [sl]
 801726a:	b30d      	cbz	r5, 80172b0 <__gethex+0x14a>
 801726c:	f1bb 0f00 	cmp.w	fp, #0
 8017270:	bf0c      	ite	eq
 8017272:	2706      	moveq	r7, #6
 8017274:	2700      	movne	r7, #0
 8017276:	4638      	mov	r0, r7
 8017278:	b00b      	add	sp, #44	; 0x2c
 801727a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801727e:	f10b 0b01 	add.w	fp, fp, #1
 8017282:	e78a      	b.n	801719a <__gethex+0x34>
 8017284:	2500      	movs	r5, #0
 8017286:	462c      	mov	r4, r5
 8017288:	e7ae      	b.n	80171e8 <__gethex+0x82>
 801728a:	463e      	mov	r6, r7
 801728c:	2501      	movs	r5, #1
 801728e:	e7c7      	b.n	8017220 <__gethex+0xba>
 8017290:	4604      	mov	r4, r0
 8017292:	e7fb      	b.n	801728c <__gethex+0x126>
 8017294:	f04f 0900 	mov.w	r9, #0
 8017298:	1cb1      	adds	r1, r6, #2
 801729a:	e7ce      	b.n	801723a <__gethex+0xd4>
 801729c:	f04f 0901 	mov.w	r9, #1
 80172a0:	e7fa      	b.n	8017298 <__gethex+0x132>
 80172a2:	230a      	movs	r3, #10
 80172a4:	fb03 0202 	mla	r2, r3, r2, r0
 80172a8:	3a10      	subs	r2, #16
 80172aa:	e7cf      	b.n	801724c <__gethex+0xe6>
 80172ac:	4631      	mov	r1, r6
 80172ae:	e7da      	b.n	8017266 <__gethex+0x100>
 80172b0:	1bf3      	subs	r3, r6, r7
 80172b2:	3b01      	subs	r3, #1
 80172b4:	4629      	mov	r1, r5
 80172b6:	2b07      	cmp	r3, #7
 80172b8:	dc49      	bgt.n	801734e <__gethex+0x1e8>
 80172ba:	9802      	ldr	r0, [sp, #8]
 80172bc:	f000 fa66 	bl	801778c <_Balloc>
 80172c0:	9b01      	ldr	r3, [sp, #4]
 80172c2:	f100 0914 	add.w	r9, r0, #20
 80172c6:	f04f 0b00 	mov.w	fp, #0
 80172ca:	f1c3 0301 	rsb	r3, r3, #1
 80172ce:	4605      	mov	r5, r0
 80172d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80172d4:	46da      	mov	sl, fp
 80172d6:	9308      	str	r3, [sp, #32]
 80172d8:	42b7      	cmp	r7, r6
 80172da:	d33b      	bcc.n	8017354 <__gethex+0x1ee>
 80172dc:	9804      	ldr	r0, [sp, #16]
 80172de:	f840 ab04 	str.w	sl, [r0], #4
 80172e2:	eba0 0009 	sub.w	r0, r0, r9
 80172e6:	1080      	asrs	r0, r0, #2
 80172e8:	6128      	str	r0, [r5, #16]
 80172ea:	0147      	lsls	r7, r0, #5
 80172ec:	4650      	mov	r0, sl
 80172ee:	f000 fb11 	bl	8017914 <__hi0bits>
 80172f2:	f8d8 6000 	ldr.w	r6, [r8]
 80172f6:	1a3f      	subs	r7, r7, r0
 80172f8:	42b7      	cmp	r7, r6
 80172fa:	dd64      	ble.n	80173c6 <__gethex+0x260>
 80172fc:	1bbf      	subs	r7, r7, r6
 80172fe:	4639      	mov	r1, r7
 8017300:	4628      	mov	r0, r5
 8017302:	f000 fe21 	bl	8017f48 <__any_on>
 8017306:	4682      	mov	sl, r0
 8017308:	b178      	cbz	r0, 801732a <__gethex+0x1c4>
 801730a:	1e7b      	subs	r3, r7, #1
 801730c:	1159      	asrs	r1, r3, #5
 801730e:	f003 021f 	and.w	r2, r3, #31
 8017312:	f04f 0a01 	mov.w	sl, #1
 8017316:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801731a:	fa0a f202 	lsl.w	r2, sl, r2
 801731e:	420a      	tst	r2, r1
 8017320:	d003      	beq.n	801732a <__gethex+0x1c4>
 8017322:	4553      	cmp	r3, sl
 8017324:	dc46      	bgt.n	80173b4 <__gethex+0x24e>
 8017326:	f04f 0a02 	mov.w	sl, #2
 801732a:	4639      	mov	r1, r7
 801732c:	4628      	mov	r0, r5
 801732e:	f7ff fecb 	bl	80170c8 <rshift>
 8017332:	443c      	add	r4, r7
 8017334:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017338:	42a3      	cmp	r3, r4
 801733a:	da52      	bge.n	80173e2 <__gethex+0x27c>
 801733c:	4629      	mov	r1, r5
 801733e:	9802      	ldr	r0, [sp, #8]
 8017340:	f000 fa58 	bl	80177f4 <_Bfree>
 8017344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017346:	2300      	movs	r3, #0
 8017348:	6013      	str	r3, [r2, #0]
 801734a:	27a3      	movs	r7, #163	; 0xa3
 801734c:	e793      	b.n	8017276 <__gethex+0x110>
 801734e:	3101      	adds	r1, #1
 8017350:	105b      	asrs	r3, r3, #1
 8017352:	e7b0      	b.n	80172b6 <__gethex+0x150>
 8017354:	1e73      	subs	r3, r6, #1
 8017356:	9305      	str	r3, [sp, #20]
 8017358:	9a07      	ldr	r2, [sp, #28]
 801735a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801735e:	4293      	cmp	r3, r2
 8017360:	d018      	beq.n	8017394 <__gethex+0x22e>
 8017362:	f1bb 0f20 	cmp.w	fp, #32
 8017366:	d107      	bne.n	8017378 <__gethex+0x212>
 8017368:	9b04      	ldr	r3, [sp, #16]
 801736a:	f8c3 a000 	str.w	sl, [r3]
 801736e:	3304      	adds	r3, #4
 8017370:	f04f 0a00 	mov.w	sl, #0
 8017374:	9304      	str	r3, [sp, #16]
 8017376:	46d3      	mov	fp, sl
 8017378:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801737c:	f7ff fede 	bl	801713c <__hexdig_fun>
 8017380:	f000 000f 	and.w	r0, r0, #15
 8017384:	fa00 f00b 	lsl.w	r0, r0, fp
 8017388:	ea4a 0a00 	orr.w	sl, sl, r0
 801738c:	f10b 0b04 	add.w	fp, fp, #4
 8017390:	9b05      	ldr	r3, [sp, #20]
 8017392:	e00d      	b.n	80173b0 <__gethex+0x24a>
 8017394:	9b05      	ldr	r3, [sp, #20]
 8017396:	9a08      	ldr	r2, [sp, #32]
 8017398:	4413      	add	r3, r2
 801739a:	42bb      	cmp	r3, r7
 801739c:	d3e1      	bcc.n	8017362 <__gethex+0x1fc>
 801739e:	4618      	mov	r0, r3
 80173a0:	9a01      	ldr	r2, [sp, #4]
 80173a2:	9903      	ldr	r1, [sp, #12]
 80173a4:	9309      	str	r3, [sp, #36]	; 0x24
 80173a6:	f001 fb3d 	bl	8018a24 <strncmp>
 80173aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ac:	2800      	cmp	r0, #0
 80173ae:	d1d8      	bne.n	8017362 <__gethex+0x1fc>
 80173b0:	461e      	mov	r6, r3
 80173b2:	e791      	b.n	80172d8 <__gethex+0x172>
 80173b4:	1eb9      	subs	r1, r7, #2
 80173b6:	4628      	mov	r0, r5
 80173b8:	f000 fdc6 	bl	8017f48 <__any_on>
 80173bc:	2800      	cmp	r0, #0
 80173be:	d0b2      	beq.n	8017326 <__gethex+0x1c0>
 80173c0:	f04f 0a03 	mov.w	sl, #3
 80173c4:	e7b1      	b.n	801732a <__gethex+0x1c4>
 80173c6:	da09      	bge.n	80173dc <__gethex+0x276>
 80173c8:	1bf7      	subs	r7, r6, r7
 80173ca:	4629      	mov	r1, r5
 80173cc:	463a      	mov	r2, r7
 80173ce:	9802      	ldr	r0, [sp, #8]
 80173d0:	f000 fbdc 	bl	8017b8c <__lshift>
 80173d4:	1be4      	subs	r4, r4, r7
 80173d6:	4605      	mov	r5, r0
 80173d8:	f100 0914 	add.w	r9, r0, #20
 80173dc:	f04f 0a00 	mov.w	sl, #0
 80173e0:	e7a8      	b.n	8017334 <__gethex+0x1ce>
 80173e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80173e6:	42a0      	cmp	r0, r4
 80173e8:	dd6a      	ble.n	80174c0 <__gethex+0x35a>
 80173ea:	1b04      	subs	r4, r0, r4
 80173ec:	42a6      	cmp	r6, r4
 80173ee:	dc2e      	bgt.n	801744e <__gethex+0x2e8>
 80173f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80173f4:	2b02      	cmp	r3, #2
 80173f6:	d022      	beq.n	801743e <__gethex+0x2d8>
 80173f8:	2b03      	cmp	r3, #3
 80173fa:	d024      	beq.n	8017446 <__gethex+0x2e0>
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	d115      	bne.n	801742c <__gethex+0x2c6>
 8017400:	42a6      	cmp	r6, r4
 8017402:	d113      	bne.n	801742c <__gethex+0x2c6>
 8017404:	2e01      	cmp	r6, #1
 8017406:	dc0b      	bgt.n	8017420 <__gethex+0x2ba>
 8017408:	9a06      	ldr	r2, [sp, #24]
 801740a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801740e:	6013      	str	r3, [r2, #0]
 8017410:	2301      	movs	r3, #1
 8017412:	612b      	str	r3, [r5, #16]
 8017414:	f8c9 3000 	str.w	r3, [r9]
 8017418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801741a:	2762      	movs	r7, #98	; 0x62
 801741c:	601d      	str	r5, [r3, #0]
 801741e:	e72a      	b.n	8017276 <__gethex+0x110>
 8017420:	1e71      	subs	r1, r6, #1
 8017422:	4628      	mov	r0, r5
 8017424:	f000 fd90 	bl	8017f48 <__any_on>
 8017428:	2800      	cmp	r0, #0
 801742a:	d1ed      	bne.n	8017408 <__gethex+0x2a2>
 801742c:	4629      	mov	r1, r5
 801742e:	9802      	ldr	r0, [sp, #8]
 8017430:	f000 f9e0 	bl	80177f4 <_Bfree>
 8017434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017436:	2300      	movs	r3, #0
 8017438:	6013      	str	r3, [r2, #0]
 801743a:	2750      	movs	r7, #80	; 0x50
 801743c:	e71b      	b.n	8017276 <__gethex+0x110>
 801743e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017440:	2b00      	cmp	r3, #0
 8017442:	d0e1      	beq.n	8017408 <__gethex+0x2a2>
 8017444:	e7f2      	b.n	801742c <__gethex+0x2c6>
 8017446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017448:	2b00      	cmp	r3, #0
 801744a:	d1dd      	bne.n	8017408 <__gethex+0x2a2>
 801744c:	e7ee      	b.n	801742c <__gethex+0x2c6>
 801744e:	1e67      	subs	r7, r4, #1
 8017450:	f1ba 0f00 	cmp.w	sl, #0
 8017454:	d131      	bne.n	80174ba <__gethex+0x354>
 8017456:	b127      	cbz	r7, 8017462 <__gethex+0x2fc>
 8017458:	4639      	mov	r1, r7
 801745a:	4628      	mov	r0, r5
 801745c:	f000 fd74 	bl	8017f48 <__any_on>
 8017460:	4682      	mov	sl, r0
 8017462:	117a      	asrs	r2, r7, #5
 8017464:	2301      	movs	r3, #1
 8017466:	f007 071f 	and.w	r7, r7, #31
 801746a:	fa03 f707 	lsl.w	r7, r3, r7
 801746e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017472:	4621      	mov	r1, r4
 8017474:	421f      	tst	r7, r3
 8017476:	4628      	mov	r0, r5
 8017478:	bf18      	it	ne
 801747a:	f04a 0a02 	orrne.w	sl, sl, #2
 801747e:	1b36      	subs	r6, r6, r4
 8017480:	f7ff fe22 	bl	80170c8 <rshift>
 8017484:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017488:	2702      	movs	r7, #2
 801748a:	f1ba 0f00 	cmp.w	sl, #0
 801748e:	d048      	beq.n	8017522 <__gethex+0x3bc>
 8017490:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017494:	2b02      	cmp	r3, #2
 8017496:	d015      	beq.n	80174c4 <__gethex+0x35e>
 8017498:	2b03      	cmp	r3, #3
 801749a:	d017      	beq.n	80174cc <__gethex+0x366>
 801749c:	2b01      	cmp	r3, #1
 801749e:	d109      	bne.n	80174b4 <__gethex+0x34e>
 80174a0:	f01a 0f02 	tst.w	sl, #2
 80174a4:	d006      	beq.n	80174b4 <__gethex+0x34e>
 80174a6:	f8d9 3000 	ldr.w	r3, [r9]
 80174aa:	ea4a 0a03 	orr.w	sl, sl, r3
 80174ae:	f01a 0f01 	tst.w	sl, #1
 80174b2:	d10e      	bne.n	80174d2 <__gethex+0x36c>
 80174b4:	f047 0710 	orr.w	r7, r7, #16
 80174b8:	e033      	b.n	8017522 <__gethex+0x3bc>
 80174ba:	f04f 0a01 	mov.w	sl, #1
 80174be:	e7d0      	b.n	8017462 <__gethex+0x2fc>
 80174c0:	2701      	movs	r7, #1
 80174c2:	e7e2      	b.n	801748a <__gethex+0x324>
 80174c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174c6:	f1c3 0301 	rsb	r3, r3, #1
 80174ca:	9315      	str	r3, [sp, #84]	; 0x54
 80174cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d0f0      	beq.n	80174b4 <__gethex+0x34e>
 80174d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80174d6:	f105 0314 	add.w	r3, r5, #20
 80174da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80174de:	eb03 010a 	add.w	r1, r3, sl
 80174e2:	f04f 0c00 	mov.w	ip, #0
 80174e6:	4618      	mov	r0, r3
 80174e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80174ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80174f0:	d01c      	beq.n	801752c <__gethex+0x3c6>
 80174f2:	3201      	adds	r2, #1
 80174f4:	6002      	str	r2, [r0, #0]
 80174f6:	2f02      	cmp	r7, #2
 80174f8:	f105 0314 	add.w	r3, r5, #20
 80174fc:	d138      	bne.n	8017570 <__gethex+0x40a>
 80174fe:	f8d8 2000 	ldr.w	r2, [r8]
 8017502:	3a01      	subs	r2, #1
 8017504:	42b2      	cmp	r2, r6
 8017506:	d10a      	bne.n	801751e <__gethex+0x3b8>
 8017508:	1171      	asrs	r1, r6, #5
 801750a:	2201      	movs	r2, #1
 801750c:	f006 061f 	and.w	r6, r6, #31
 8017510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017514:	fa02 f606 	lsl.w	r6, r2, r6
 8017518:	421e      	tst	r6, r3
 801751a:	bf18      	it	ne
 801751c:	4617      	movne	r7, r2
 801751e:	f047 0720 	orr.w	r7, r7, #32
 8017522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017524:	601d      	str	r5, [r3, #0]
 8017526:	9b06      	ldr	r3, [sp, #24]
 8017528:	601c      	str	r4, [r3, #0]
 801752a:	e6a4      	b.n	8017276 <__gethex+0x110>
 801752c:	4299      	cmp	r1, r3
 801752e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017532:	d8d8      	bhi.n	80174e6 <__gethex+0x380>
 8017534:	68ab      	ldr	r3, [r5, #8]
 8017536:	4599      	cmp	r9, r3
 8017538:	db12      	blt.n	8017560 <__gethex+0x3fa>
 801753a:	6869      	ldr	r1, [r5, #4]
 801753c:	9802      	ldr	r0, [sp, #8]
 801753e:	3101      	adds	r1, #1
 8017540:	f000 f924 	bl	801778c <_Balloc>
 8017544:	692a      	ldr	r2, [r5, #16]
 8017546:	3202      	adds	r2, #2
 8017548:	f105 010c 	add.w	r1, r5, #12
 801754c:	4683      	mov	fp, r0
 801754e:	0092      	lsls	r2, r2, #2
 8017550:	300c      	adds	r0, #12
 8017552:	f7fd f9c5 	bl	80148e0 <memcpy>
 8017556:	4629      	mov	r1, r5
 8017558:	9802      	ldr	r0, [sp, #8]
 801755a:	f000 f94b 	bl	80177f4 <_Bfree>
 801755e:	465d      	mov	r5, fp
 8017560:	692b      	ldr	r3, [r5, #16]
 8017562:	1c5a      	adds	r2, r3, #1
 8017564:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017568:	612a      	str	r2, [r5, #16]
 801756a:	2201      	movs	r2, #1
 801756c:	615a      	str	r2, [r3, #20]
 801756e:	e7c2      	b.n	80174f6 <__gethex+0x390>
 8017570:	692a      	ldr	r2, [r5, #16]
 8017572:	454a      	cmp	r2, r9
 8017574:	dd0b      	ble.n	801758e <__gethex+0x428>
 8017576:	2101      	movs	r1, #1
 8017578:	4628      	mov	r0, r5
 801757a:	f7ff fda5 	bl	80170c8 <rshift>
 801757e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017582:	3401      	adds	r4, #1
 8017584:	42a3      	cmp	r3, r4
 8017586:	f6ff aed9 	blt.w	801733c <__gethex+0x1d6>
 801758a:	2701      	movs	r7, #1
 801758c:	e7c7      	b.n	801751e <__gethex+0x3b8>
 801758e:	f016 061f 	ands.w	r6, r6, #31
 8017592:	d0fa      	beq.n	801758a <__gethex+0x424>
 8017594:	449a      	add	sl, r3
 8017596:	f1c6 0620 	rsb	r6, r6, #32
 801759a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801759e:	f000 f9b9 	bl	8017914 <__hi0bits>
 80175a2:	42b0      	cmp	r0, r6
 80175a4:	dbe7      	blt.n	8017576 <__gethex+0x410>
 80175a6:	e7f0      	b.n	801758a <__gethex+0x424>

080175a8 <L_shift>:
 80175a8:	f1c2 0208 	rsb	r2, r2, #8
 80175ac:	0092      	lsls	r2, r2, #2
 80175ae:	b570      	push	{r4, r5, r6, lr}
 80175b0:	f1c2 0620 	rsb	r6, r2, #32
 80175b4:	6843      	ldr	r3, [r0, #4]
 80175b6:	6804      	ldr	r4, [r0, #0]
 80175b8:	fa03 f506 	lsl.w	r5, r3, r6
 80175bc:	432c      	orrs	r4, r5
 80175be:	40d3      	lsrs	r3, r2
 80175c0:	6004      	str	r4, [r0, #0]
 80175c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80175c6:	4288      	cmp	r0, r1
 80175c8:	d3f4      	bcc.n	80175b4 <L_shift+0xc>
 80175ca:	bd70      	pop	{r4, r5, r6, pc}

080175cc <__match>:
 80175cc:	b530      	push	{r4, r5, lr}
 80175ce:	6803      	ldr	r3, [r0, #0]
 80175d0:	3301      	adds	r3, #1
 80175d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80175d6:	b914      	cbnz	r4, 80175de <__match+0x12>
 80175d8:	6003      	str	r3, [r0, #0]
 80175da:	2001      	movs	r0, #1
 80175dc:	bd30      	pop	{r4, r5, pc}
 80175de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80175e6:	2d19      	cmp	r5, #25
 80175e8:	bf98      	it	ls
 80175ea:	3220      	addls	r2, #32
 80175ec:	42a2      	cmp	r2, r4
 80175ee:	d0f0      	beq.n	80175d2 <__match+0x6>
 80175f0:	2000      	movs	r0, #0
 80175f2:	e7f3      	b.n	80175dc <__match+0x10>

080175f4 <__hexnan>:
 80175f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f8:	680b      	ldr	r3, [r1, #0]
 80175fa:	6801      	ldr	r1, [r0, #0]
 80175fc:	115f      	asrs	r7, r3, #5
 80175fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017602:	f013 031f 	ands.w	r3, r3, #31
 8017606:	b087      	sub	sp, #28
 8017608:	bf18      	it	ne
 801760a:	3704      	addne	r7, #4
 801760c:	2500      	movs	r5, #0
 801760e:	1f3e      	subs	r6, r7, #4
 8017610:	4682      	mov	sl, r0
 8017612:	4690      	mov	r8, r2
 8017614:	9301      	str	r3, [sp, #4]
 8017616:	f847 5c04 	str.w	r5, [r7, #-4]
 801761a:	46b1      	mov	r9, r6
 801761c:	4634      	mov	r4, r6
 801761e:	9502      	str	r5, [sp, #8]
 8017620:	46ab      	mov	fp, r5
 8017622:	784a      	ldrb	r2, [r1, #1]
 8017624:	1c4b      	adds	r3, r1, #1
 8017626:	9303      	str	r3, [sp, #12]
 8017628:	b342      	cbz	r2, 801767c <__hexnan+0x88>
 801762a:	4610      	mov	r0, r2
 801762c:	9105      	str	r1, [sp, #20]
 801762e:	9204      	str	r2, [sp, #16]
 8017630:	f7ff fd84 	bl	801713c <__hexdig_fun>
 8017634:	2800      	cmp	r0, #0
 8017636:	d143      	bne.n	80176c0 <__hexnan+0xcc>
 8017638:	9a04      	ldr	r2, [sp, #16]
 801763a:	9905      	ldr	r1, [sp, #20]
 801763c:	2a20      	cmp	r2, #32
 801763e:	d818      	bhi.n	8017672 <__hexnan+0x7e>
 8017640:	9b02      	ldr	r3, [sp, #8]
 8017642:	459b      	cmp	fp, r3
 8017644:	dd13      	ble.n	801766e <__hexnan+0x7a>
 8017646:	454c      	cmp	r4, r9
 8017648:	d206      	bcs.n	8017658 <__hexnan+0x64>
 801764a:	2d07      	cmp	r5, #7
 801764c:	dc04      	bgt.n	8017658 <__hexnan+0x64>
 801764e:	462a      	mov	r2, r5
 8017650:	4649      	mov	r1, r9
 8017652:	4620      	mov	r0, r4
 8017654:	f7ff ffa8 	bl	80175a8 <L_shift>
 8017658:	4544      	cmp	r4, r8
 801765a:	d944      	bls.n	80176e6 <__hexnan+0xf2>
 801765c:	2300      	movs	r3, #0
 801765e:	f1a4 0904 	sub.w	r9, r4, #4
 8017662:	f844 3c04 	str.w	r3, [r4, #-4]
 8017666:	f8cd b008 	str.w	fp, [sp, #8]
 801766a:	464c      	mov	r4, r9
 801766c:	461d      	mov	r5, r3
 801766e:	9903      	ldr	r1, [sp, #12]
 8017670:	e7d7      	b.n	8017622 <__hexnan+0x2e>
 8017672:	2a29      	cmp	r2, #41	; 0x29
 8017674:	d14a      	bne.n	801770c <__hexnan+0x118>
 8017676:	3102      	adds	r1, #2
 8017678:	f8ca 1000 	str.w	r1, [sl]
 801767c:	f1bb 0f00 	cmp.w	fp, #0
 8017680:	d044      	beq.n	801770c <__hexnan+0x118>
 8017682:	454c      	cmp	r4, r9
 8017684:	d206      	bcs.n	8017694 <__hexnan+0xa0>
 8017686:	2d07      	cmp	r5, #7
 8017688:	dc04      	bgt.n	8017694 <__hexnan+0xa0>
 801768a:	462a      	mov	r2, r5
 801768c:	4649      	mov	r1, r9
 801768e:	4620      	mov	r0, r4
 8017690:	f7ff ff8a 	bl	80175a8 <L_shift>
 8017694:	4544      	cmp	r4, r8
 8017696:	d928      	bls.n	80176ea <__hexnan+0xf6>
 8017698:	4643      	mov	r3, r8
 801769a:	f854 2b04 	ldr.w	r2, [r4], #4
 801769e:	f843 2b04 	str.w	r2, [r3], #4
 80176a2:	42a6      	cmp	r6, r4
 80176a4:	d2f9      	bcs.n	801769a <__hexnan+0xa6>
 80176a6:	2200      	movs	r2, #0
 80176a8:	f843 2b04 	str.w	r2, [r3], #4
 80176ac:	429e      	cmp	r6, r3
 80176ae:	d2fb      	bcs.n	80176a8 <__hexnan+0xb4>
 80176b0:	6833      	ldr	r3, [r6, #0]
 80176b2:	b91b      	cbnz	r3, 80176bc <__hexnan+0xc8>
 80176b4:	4546      	cmp	r6, r8
 80176b6:	d127      	bne.n	8017708 <__hexnan+0x114>
 80176b8:	2301      	movs	r3, #1
 80176ba:	6033      	str	r3, [r6, #0]
 80176bc:	2005      	movs	r0, #5
 80176be:	e026      	b.n	801770e <__hexnan+0x11a>
 80176c0:	3501      	adds	r5, #1
 80176c2:	2d08      	cmp	r5, #8
 80176c4:	f10b 0b01 	add.w	fp, fp, #1
 80176c8:	dd06      	ble.n	80176d8 <__hexnan+0xe4>
 80176ca:	4544      	cmp	r4, r8
 80176cc:	d9cf      	bls.n	801766e <__hexnan+0x7a>
 80176ce:	2300      	movs	r3, #0
 80176d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80176d4:	2501      	movs	r5, #1
 80176d6:	3c04      	subs	r4, #4
 80176d8:	6822      	ldr	r2, [r4, #0]
 80176da:	f000 000f 	and.w	r0, r0, #15
 80176de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80176e2:	6020      	str	r0, [r4, #0]
 80176e4:	e7c3      	b.n	801766e <__hexnan+0x7a>
 80176e6:	2508      	movs	r5, #8
 80176e8:	e7c1      	b.n	801766e <__hexnan+0x7a>
 80176ea:	9b01      	ldr	r3, [sp, #4]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d0df      	beq.n	80176b0 <__hexnan+0xbc>
 80176f0:	f04f 32ff 	mov.w	r2, #4294967295
 80176f4:	f1c3 0320 	rsb	r3, r3, #32
 80176f8:	fa22 f303 	lsr.w	r3, r2, r3
 80176fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017700:	401a      	ands	r2, r3
 8017702:	f847 2c04 	str.w	r2, [r7, #-4]
 8017706:	e7d3      	b.n	80176b0 <__hexnan+0xbc>
 8017708:	3e04      	subs	r6, #4
 801770a:	e7d1      	b.n	80176b0 <__hexnan+0xbc>
 801770c:	2004      	movs	r0, #4
 801770e:	b007      	add	sp, #28
 8017710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017714 <__locale_ctype_ptr_l>:
 8017714:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017718:	4770      	bx	lr
	...

0801771c <__locale_ctype_ptr>:
 801771c:	4b04      	ldr	r3, [pc, #16]	; (8017730 <__locale_ctype_ptr+0x14>)
 801771e:	4a05      	ldr	r2, [pc, #20]	; (8017734 <__locale_ctype_ptr+0x18>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	6a1b      	ldr	r3, [r3, #32]
 8017724:	2b00      	cmp	r3, #0
 8017726:	bf08      	it	eq
 8017728:	4613      	moveq	r3, r2
 801772a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801772e:	4770      	bx	lr
 8017730:	2000000c 	.word	0x2000000c
 8017734:	20000070 	.word	0x20000070

08017738 <__localeconv_l>:
 8017738:	30f0      	adds	r0, #240	; 0xf0
 801773a:	4770      	bx	lr

0801773c <_localeconv_r>:
 801773c:	4b04      	ldr	r3, [pc, #16]	; (8017750 <_localeconv_r+0x14>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	6a18      	ldr	r0, [r3, #32]
 8017742:	4b04      	ldr	r3, [pc, #16]	; (8017754 <_localeconv_r+0x18>)
 8017744:	2800      	cmp	r0, #0
 8017746:	bf08      	it	eq
 8017748:	4618      	moveq	r0, r3
 801774a:	30f0      	adds	r0, #240	; 0xf0
 801774c:	4770      	bx	lr
 801774e:	bf00      	nop
 8017750:	2000000c 	.word	0x2000000c
 8017754:	20000070 	.word	0x20000070

08017758 <malloc>:
 8017758:	4b02      	ldr	r3, [pc, #8]	; (8017764 <malloc+0xc>)
 801775a:	4601      	mov	r1, r0
 801775c:	6818      	ldr	r0, [r3, #0]
 801775e:	f000 bc71 	b.w	8018044 <_malloc_r>
 8017762:	bf00      	nop
 8017764:	2000000c 	.word	0x2000000c

08017768 <__ascii_mbtowc>:
 8017768:	b082      	sub	sp, #8
 801776a:	b901      	cbnz	r1, 801776e <__ascii_mbtowc+0x6>
 801776c:	a901      	add	r1, sp, #4
 801776e:	b142      	cbz	r2, 8017782 <__ascii_mbtowc+0x1a>
 8017770:	b14b      	cbz	r3, 8017786 <__ascii_mbtowc+0x1e>
 8017772:	7813      	ldrb	r3, [r2, #0]
 8017774:	600b      	str	r3, [r1, #0]
 8017776:	7812      	ldrb	r2, [r2, #0]
 8017778:	1c10      	adds	r0, r2, #0
 801777a:	bf18      	it	ne
 801777c:	2001      	movne	r0, #1
 801777e:	b002      	add	sp, #8
 8017780:	4770      	bx	lr
 8017782:	4610      	mov	r0, r2
 8017784:	e7fb      	b.n	801777e <__ascii_mbtowc+0x16>
 8017786:	f06f 0001 	mvn.w	r0, #1
 801778a:	e7f8      	b.n	801777e <__ascii_mbtowc+0x16>

0801778c <_Balloc>:
 801778c:	b570      	push	{r4, r5, r6, lr}
 801778e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017790:	4604      	mov	r4, r0
 8017792:	460e      	mov	r6, r1
 8017794:	b93d      	cbnz	r5, 80177a6 <_Balloc+0x1a>
 8017796:	2010      	movs	r0, #16
 8017798:	f7ff ffde 	bl	8017758 <malloc>
 801779c:	6260      	str	r0, [r4, #36]	; 0x24
 801779e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80177a2:	6005      	str	r5, [r0, #0]
 80177a4:	60c5      	str	r5, [r0, #12]
 80177a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80177a8:	68eb      	ldr	r3, [r5, #12]
 80177aa:	b183      	cbz	r3, 80177ce <_Balloc+0x42>
 80177ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177ae:	68db      	ldr	r3, [r3, #12]
 80177b0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80177b4:	b9b8      	cbnz	r0, 80177e6 <_Balloc+0x5a>
 80177b6:	2101      	movs	r1, #1
 80177b8:	fa01 f506 	lsl.w	r5, r1, r6
 80177bc:	1d6a      	adds	r2, r5, #5
 80177be:	0092      	lsls	r2, r2, #2
 80177c0:	4620      	mov	r0, r4
 80177c2:	f000 fbe2 	bl	8017f8a <_calloc_r>
 80177c6:	b160      	cbz	r0, 80177e2 <_Balloc+0x56>
 80177c8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80177cc:	e00e      	b.n	80177ec <_Balloc+0x60>
 80177ce:	2221      	movs	r2, #33	; 0x21
 80177d0:	2104      	movs	r1, #4
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 fbd9 	bl	8017f8a <_calloc_r>
 80177d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177da:	60e8      	str	r0, [r5, #12]
 80177dc:	68db      	ldr	r3, [r3, #12]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d1e4      	bne.n	80177ac <_Balloc+0x20>
 80177e2:	2000      	movs	r0, #0
 80177e4:	bd70      	pop	{r4, r5, r6, pc}
 80177e6:	6802      	ldr	r2, [r0, #0]
 80177e8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80177ec:	2300      	movs	r3, #0
 80177ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80177f2:	e7f7      	b.n	80177e4 <_Balloc+0x58>

080177f4 <_Bfree>:
 80177f4:	b570      	push	{r4, r5, r6, lr}
 80177f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80177f8:	4606      	mov	r6, r0
 80177fa:	460d      	mov	r5, r1
 80177fc:	b93c      	cbnz	r4, 801780e <_Bfree+0x1a>
 80177fe:	2010      	movs	r0, #16
 8017800:	f7ff ffaa 	bl	8017758 <malloc>
 8017804:	6270      	str	r0, [r6, #36]	; 0x24
 8017806:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801780a:	6004      	str	r4, [r0, #0]
 801780c:	60c4      	str	r4, [r0, #12]
 801780e:	b13d      	cbz	r5, 8017820 <_Bfree+0x2c>
 8017810:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017812:	686a      	ldr	r2, [r5, #4]
 8017814:	68db      	ldr	r3, [r3, #12]
 8017816:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801781a:	6029      	str	r1, [r5, #0]
 801781c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017820:	bd70      	pop	{r4, r5, r6, pc}

08017822 <__multadd>:
 8017822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017826:	690d      	ldr	r5, [r1, #16]
 8017828:	461f      	mov	r7, r3
 801782a:	4606      	mov	r6, r0
 801782c:	460c      	mov	r4, r1
 801782e:	f101 0c14 	add.w	ip, r1, #20
 8017832:	2300      	movs	r3, #0
 8017834:	f8dc 0000 	ldr.w	r0, [ip]
 8017838:	b281      	uxth	r1, r0
 801783a:	fb02 7101 	mla	r1, r2, r1, r7
 801783e:	0c0f      	lsrs	r7, r1, #16
 8017840:	0c00      	lsrs	r0, r0, #16
 8017842:	fb02 7000 	mla	r0, r2, r0, r7
 8017846:	b289      	uxth	r1, r1
 8017848:	3301      	adds	r3, #1
 801784a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801784e:	429d      	cmp	r5, r3
 8017850:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017854:	f84c 1b04 	str.w	r1, [ip], #4
 8017858:	dcec      	bgt.n	8017834 <__multadd+0x12>
 801785a:	b1d7      	cbz	r7, 8017892 <__multadd+0x70>
 801785c:	68a3      	ldr	r3, [r4, #8]
 801785e:	42ab      	cmp	r3, r5
 8017860:	dc12      	bgt.n	8017888 <__multadd+0x66>
 8017862:	6861      	ldr	r1, [r4, #4]
 8017864:	4630      	mov	r0, r6
 8017866:	3101      	adds	r1, #1
 8017868:	f7ff ff90 	bl	801778c <_Balloc>
 801786c:	6922      	ldr	r2, [r4, #16]
 801786e:	3202      	adds	r2, #2
 8017870:	f104 010c 	add.w	r1, r4, #12
 8017874:	4680      	mov	r8, r0
 8017876:	0092      	lsls	r2, r2, #2
 8017878:	300c      	adds	r0, #12
 801787a:	f7fd f831 	bl	80148e0 <memcpy>
 801787e:	4621      	mov	r1, r4
 8017880:	4630      	mov	r0, r6
 8017882:	f7ff ffb7 	bl	80177f4 <_Bfree>
 8017886:	4644      	mov	r4, r8
 8017888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801788c:	3501      	adds	r5, #1
 801788e:	615f      	str	r7, [r3, #20]
 8017890:	6125      	str	r5, [r4, #16]
 8017892:	4620      	mov	r0, r4
 8017894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017898 <__s2b>:
 8017898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801789c:	460c      	mov	r4, r1
 801789e:	4615      	mov	r5, r2
 80178a0:	461f      	mov	r7, r3
 80178a2:	2209      	movs	r2, #9
 80178a4:	3308      	adds	r3, #8
 80178a6:	4606      	mov	r6, r0
 80178a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80178ac:	2100      	movs	r1, #0
 80178ae:	2201      	movs	r2, #1
 80178b0:	429a      	cmp	r2, r3
 80178b2:	db20      	blt.n	80178f6 <__s2b+0x5e>
 80178b4:	4630      	mov	r0, r6
 80178b6:	f7ff ff69 	bl	801778c <_Balloc>
 80178ba:	9b08      	ldr	r3, [sp, #32]
 80178bc:	6143      	str	r3, [r0, #20]
 80178be:	2d09      	cmp	r5, #9
 80178c0:	f04f 0301 	mov.w	r3, #1
 80178c4:	6103      	str	r3, [r0, #16]
 80178c6:	dd19      	ble.n	80178fc <__s2b+0x64>
 80178c8:	f104 0809 	add.w	r8, r4, #9
 80178cc:	46c1      	mov	r9, r8
 80178ce:	442c      	add	r4, r5
 80178d0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80178d4:	4601      	mov	r1, r0
 80178d6:	3b30      	subs	r3, #48	; 0x30
 80178d8:	220a      	movs	r2, #10
 80178da:	4630      	mov	r0, r6
 80178dc:	f7ff ffa1 	bl	8017822 <__multadd>
 80178e0:	45a1      	cmp	r9, r4
 80178e2:	d1f5      	bne.n	80178d0 <__s2b+0x38>
 80178e4:	eb08 0405 	add.w	r4, r8, r5
 80178e8:	3c08      	subs	r4, #8
 80178ea:	1b2d      	subs	r5, r5, r4
 80178ec:	1963      	adds	r3, r4, r5
 80178ee:	42bb      	cmp	r3, r7
 80178f0:	db07      	blt.n	8017902 <__s2b+0x6a>
 80178f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178f6:	0052      	lsls	r2, r2, #1
 80178f8:	3101      	adds	r1, #1
 80178fa:	e7d9      	b.n	80178b0 <__s2b+0x18>
 80178fc:	340a      	adds	r4, #10
 80178fe:	2509      	movs	r5, #9
 8017900:	e7f3      	b.n	80178ea <__s2b+0x52>
 8017902:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017906:	4601      	mov	r1, r0
 8017908:	3b30      	subs	r3, #48	; 0x30
 801790a:	220a      	movs	r2, #10
 801790c:	4630      	mov	r0, r6
 801790e:	f7ff ff88 	bl	8017822 <__multadd>
 8017912:	e7eb      	b.n	80178ec <__s2b+0x54>

08017914 <__hi0bits>:
 8017914:	0c02      	lsrs	r2, r0, #16
 8017916:	0412      	lsls	r2, r2, #16
 8017918:	4603      	mov	r3, r0
 801791a:	b9b2      	cbnz	r2, 801794a <__hi0bits+0x36>
 801791c:	0403      	lsls	r3, r0, #16
 801791e:	2010      	movs	r0, #16
 8017920:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017924:	bf04      	itt	eq
 8017926:	021b      	lsleq	r3, r3, #8
 8017928:	3008      	addeq	r0, #8
 801792a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801792e:	bf04      	itt	eq
 8017930:	011b      	lsleq	r3, r3, #4
 8017932:	3004      	addeq	r0, #4
 8017934:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017938:	bf04      	itt	eq
 801793a:	009b      	lsleq	r3, r3, #2
 801793c:	3002      	addeq	r0, #2
 801793e:	2b00      	cmp	r3, #0
 8017940:	db06      	blt.n	8017950 <__hi0bits+0x3c>
 8017942:	005b      	lsls	r3, r3, #1
 8017944:	d503      	bpl.n	801794e <__hi0bits+0x3a>
 8017946:	3001      	adds	r0, #1
 8017948:	4770      	bx	lr
 801794a:	2000      	movs	r0, #0
 801794c:	e7e8      	b.n	8017920 <__hi0bits+0xc>
 801794e:	2020      	movs	r0, #32
 8017950:	4770      	bx	lr

08017952 <__lo0bits>:
 8017952:	6803      	ldr	r3, [r0, #0]
 8017954:	f013 0207 	ands.w	r2, r3, #7
 8017958:	4601      	mov	r1, r0
 801795a:	d00b      	beq.n	8017974 <__lo0bits+0x22>
 801795c:	07da      	lsls	r2, r3, #31
 801795e:	d423      	bmi.n	80179a8 <__lo0bits+0x56>
 8017960:	0798      	lsls	r0, r3, #30
 8017962:	bf49      	itett	mi
 8017964:	085b      	lsrmi	r3, r3, #1
 8017966:	089b      	lsrpl	r3, r3, #2
 8017968:	2001      	movmi	r0, #1
 801796a:	600b      	strmi	r3, [r1, #0]
 801796c:	bf5c      	itt	pl
 801796e:	600b      	strpl	r3, [r1, #0]
 8017970:	2002      	movpl	r0, #2
 8017972:	4770      	bx	lr
 8017974:	b298      	uxth	r0, r3
 8017976:	b9a8      	cbnz	r0, 80179a4 <__lo0bits+0x52>
 8017978:	0c1b      	lsrs	r3, r3, #16
 801797a:	2010      	movs	r0, #16
 801797c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017980:	bf04      	itt	eq
 8017982:	0a1b      	lsreq	r3, r3, #8
 8017984:	3008      	addeq	r0, #8
 8017986:	071a      	lsls	r2, r3, #28
 8017988:	bf04      	itt	eq
 801798a:	091b      	lsreq	r3, r3, #4
 801798c:	3004      	addeq	r0, #4
 801798e:	079a      	lsls	r2, r3, #30
 8017990:	bf04      	itt	eq
 8017992:	089b      	lsreq	r3, r3, #2
 8017994:	3002      	addeq	r0, #2
 8017996:	07da      	lsls	r2, r3, #31
 8017998:	d402      	bmi.n	80179a0 <__lo0bits+0x4e>
 801799a:	085b      	lsrs	r3, r3, #1
 801799c:	d006      	beq.n	80179ac <__lo0bits+0x5a>
 801799e:	3001      	adds	r0, #1
 80179a0:	600b      	str	r3, [r1, #0]
 80179a2:	4770      	bx	lr
 80179a4:	4610      	mov	r0, r2
 80179a6:	e7e9      	b.n	801797c <__lo0bits+0x2a>
 80179a8:	2000      	movs	r0, #0
 80179aa:	4770      	bx	lr
 80179ac:	2020      	movs	r0, #32
 80179ae:	4770      	bx	lr

080179b0 <__i2b>:
 80179b0:	b510      	push	{r4, lr}
 80179b2:	460c      	mov	r4, r1
 80179b4:	2101      	movs	r1, #1
 80179b6:	f7ff fee9 	bl	801778c <_Balloc>
 80179ba:	2201      	movs	r2, #1
 80179bc:	6144      	str	r4, [r0, #20]
 80179be:	6102      	str	r2, [r0, #16]
 80179c0:	bd10      	pop	{r4, pc}

080179c2 <__multiply>:
 80179c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c6:	4614      	mov	r4, r2
 80179c8:	690a      	ldr	r2, [r1, #16]
 80179ca:	6923      	ldr	r3, [r4, #16]
 80179cc:	429a      	cmp	r2, r3
 80179ce:	bfb8      	it	lt
 80179d0:	460b      	movlt	r3, r1
 80179d2:	4688      	mov	r8, r1
 80179d4:	bfbc      	itt	lt
 80179d6:	46a0      	movlt	r8, r4
 80179d8:	461c      	movlt	r4, r3
 80179da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80179de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80179e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80179e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80179ea:	eb07 0609 	add.w	r6, r7, r9
 80179ee:	42b3      	cmp	r3, r6
 80179f0:	bfb8      	it	lt
 80179f2:	3101      	addlt	r1, #1
 80179f4:	f7ff feca 	bl	801778c <_Balloc>
 80179f8:	f100 0514 	add.w	r5, r0, #20
 80179fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017a00:	462b      	mov	r3, r5
 8017a02:	2200      	movs	r2, #0
 8017a04:	4573      	cmp	r3, lr
 8017a06:	d316      	bcc.n	8017a36 <__multiply+0x74>
 8017a08:	f104 0214 	add.w	r2, r4, #20
 8017a0c:	f108 0114 	add.w	r1, r8, #20
 8017a10:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017a14:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017a18:	9300      	str	r3, [sp, #0]
 8017a1a:	9b00      	ldr	r3, [sp, #0]
 8017a1c:	9201      	str	r2, [sp, #4]
 8017a1e:	4293      	cmp	r3, r2
 8017a20:	d80c      	bhi.n	8017a3c <__multiply+0x7a>
 8017a22:	2e00      	cmp	r6, #0
 8017a24:	dd03      	ble.n	8017a2e <__multiply+0x6c>
 8017a26:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d05d      	beq.n	8017aea <__multiply+0x128>
 8017a2e:	6106      	str	r6, [r0, #16]
 8017a30:	b003      	add	sp, #12
 8017a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a36:	f843 2b04 	str.w	r2, [r3], #4
 8017a3a:	e7e3      	b.n	8017a04 <__multiply+0x42>
 8017a3c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017a40:	f1bb 0f00 	cmp.w	fp, #0
 8017a44:	d023      	beq.n	8017a8e <__multiply+0xcc>
 8017a46:	4689      	mov	r9, r1
 8017a48:	46ac      	mov	ip, r5
 8017a4a:	f04f 0800 	mov.w	r8, #0
 8017a4e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017a52:	f8dc a000 	ldr.w	sl, [ip]
 8017a56:	b2a3      	uxth	r3, r4
 8017a58:	fa1f fa8a 	uxth.w	sl, sl
 8017a5c:	fb0b a303 	mla	r3, fp, r3, sl
 8017a60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017a64:	f8dc 4000 	ldr.w	r4, [ip]
 8017a68:	4443      	add	r3, r8
 8017a6a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017a6e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017a72:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017a76:	46e2      	mov	sl, ip
 8017a78:	b29b      	uxth	r3, r3
 8017a7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017a7e:	454f      	cmp	r7, r9
 8017a80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017a84:	f84a 3b04 	str.w	r3, [sl], #4
 8017a88:	d82b      	bhi.n	8017ae2 <__multiply+0x120>
 8017a8a:	f8cc 8004 	str.w	r8, [ip, #4]
 8017a8e:	9b01      	ldr	r3, [sp, #4]
 8017a90:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017a94:	3204      	adds	r2, #4
 8017a96:	f1ba 0f00 	cmp.w	sl, #0
 8017a9a:	d020      	beq.n	8017ade <__multiply+0x11c>
 8017a9c:	682b      	ldr	r3, [r5, #0]
 8017a9e:	4689      	mov	r9, r1
 8017aa0:	46a8      	mov	r8, r5
 8017aa2:	f04f 0b00 	mov.w	fp, #0
 8017aa6:	f8b9 c000 	ldrh.w	ip, [r9]
 8017aaa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017aae:	fb0a 440c 	mla	r4, sl, ip, r4
 8017ab2:	445c      	add	r4, fp
 8017ab4:	46c4      	mov	ip, r8
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017abc:	f84c 3b04 	str.w	r3, [ip], #4
 8017ac0:	f859 3b04 	ldr.w	r3, [r9], #4
 8017ac4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017ac8:	0c1b      	lsrs	r3, r3, #16
 8017aca:	fb0a b303 	mla	r3, sl, r3, fp
 8017ace:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017ad2:	454f      	cmp	r7, r9
 8017ad4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017ad8:	d805      	bhi.n	8017ae6 <__multiply+0x124>
 8017ada:	f8c8 3004 	str.w	r3, [r8, #4]
 8017ade:	3504      	adds	r5, #4
 8017ae0:	e79b      	b.n	8017a1a <__multiply+0x58>
 8017ae2:	46d4      	mov	ip, sl
 8017ae4:	e7b3      	b.n	8017a4e <__multiply+0x8c>
 8017ae6:	46e0      	mov	r8, ip
 8017ae8:	e7dd      	b.n	8017aa6 <__multiply+0xe4>
 8017aea:	3e01      	subs	r6, #1
 8017aec:	e799      	b.n	8017a22 <__multiply+0x60>
	...

08017af0 <__pow5mult>:
 8017af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017af4:	4615      	mov	r5, r2
 8017af6:	f012 0203 	ands.w	r2, r2, #3
 8017afa:	4606      	mov	r6, r0
 8017afc:	460f      	mov	r7, r1
 8017afe:	d007      	beq.n	8017b10 <__pow5mult+0x20>
 8017b00:	3a01      	subs	r2, #1
 8017b02:	4c21      	ldr	r4, [pc, #132]	; (8017b88 <__pow5mult+0x98>)
 8017b04:	2300      	movs	r3, #0
 8017b06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b0a:	f7ff fe8a 	bl	8017822 <__multadd>
 8017b0e:	4607      	mov	r7, r0
 8017b10:	10ad      	asrs	r5, r5, #2
 8017b12:	d035      	beq.n	8017b80 <__pow5mult+0x90>
 8017b14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017b16:	b93c      	cbnz	r4, 8017b28 <__pow5mult+0x38>
 8017b18:	2010      	movs	r0, #16
 8017b1a:	f7ff fe1d 	bl	8017758 <malloc>
 8017b1e:	6270      	str	r0, [r6, #36]	; 0x24
 8017b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017b24:	6004      	str	r4, [r0, #0]
 8017b26:	60c4      	str	r4, [r0, #12]
 8017b28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017b30:	b94c      	cbnz	r4, 8017b46 <__pow5mult+0x56>
 8017b32:	f240 2171 	movw	r1, #625	; 0x271
 8017b36:	4630      	mov	r0, r6
 8017b38:	f7ff ff3a 	bl	80179b0 <__i2b>
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017b42:	4604      	mov	r4, r0
 8017b44:	6003      	str	r3, [r0, #0]
 8017b46:	f04f 0800 	mov.w	r8, #0
 8017b4a:	07eb      	lsls	r3, r5, #31
 8017b4c:	d50a      	bpl.n	8017b64 <__pow5mult+0x74>
 8017b4e:	4639      	mov	r1, r7
 8017b50:	4622      	mov	r2, r4
 8017b52:	4630      	mov	r0, r6
 8017b54:	f7ff ff35 	bl	80179c2 <__multiply>
 8017b58:	4639      	mov	r1, r7
 8017b5a:	4681      	mov	r9, r0
 8017b5c:	4630      	mov	r0, r6
 8017b5e:	f7ff fe49 	bl	80177f4 <_Bfree>
 8017b62:	464f      	mov	r7, r9
 8017b64:	106d      	asrs	r5, r5, #1
 8017b66:	d00b      	beq.n	8017b80 <__pow5mult+0x90>
 8017b68:	6820      	ldr	r0, [r4, #0]
 8017b6a:	b938      	cbnz	r0, 8017b7c <__pow5mult+0x8c>
 8017b6c:	4622      	mov	r2, r4
 8017b6e:	4621      	mov	r1, r4
 8017b70:	4630      	mov	r0, r6
 8017b72:	f7ff ff26 	bl	80179c2 <__multiply>
 8017b76:	6020      	str	r0, [r4, #0]
 8017b78:	f8c0 8000 	str.w	r8, [r0]
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	e7e4      	b.n	8017b4a <__pow5mult+0x5a>
 8017b80:	4638      	mov	r0, r7
 8017b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b86:	bf00      	nop
 8017b88:	080196d8 	.word	0x080196d8

08017b8c <__lshift>:
 8017b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b90:	460c      	mov	r4, r1
 8017b92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017b96:	6923      	ldr	r3, [r4, #16]
 8017b98:	6849      	ldr	r1, [r1, #4]
 8017b9a:	eb0a 0903 	add.w	r9, sl, r3
 8017b9e:	68a3      	ldr	r3, [r4, #8]
 8017ba0:	4607      	mov	r7, r0
 8017ba2:	4616      	mov	r6, r2
 8017ba4:	f109 0501 	add.w	r5, r9, #1
 8017ba8:	42ab      	cmp	r3, r5
 8017baa:	db32      	blt.n	8017c12 <__lshift+0x86>
 8017bac:	4638      	mov	r0, r7
 8017bae:	f7ff fded 	bl	801778c <_Balloc>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	4680      	mov	r8, r0
 8017bb6:	f100 0114 	add.w	r1, r0, #20
 8017bba:	461a      	mov	r2, r3
 8017bbc:	4553      	cmp	r3, sl
 8017bbe:	db2b      	blt.n	8017c18 <__lshift+0x8c>
 8017bc0:	6920      	ldr	r0, [r4, #16]
 8017bc2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017bc6:	f104 0314 	add.w	r3, r4, #20
 8017bca:	f016 021f 	ands.w	r2, r6, #31
 8017bce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017bd2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017bd6:	d025      	beq.n	8017c24 <__lshift+0x98>
 8017bd8:	f1c2 0e20 	rsb	lr, r2, #32
 8017bdc:	2000      	movs	r0, #0
 8017bde:	681e      	ldr	r6, [r3, #0]
 8017be0:	468a      	mov	sl, r1
 8017be2:	4096      	lsls	r6, r2
 8017be4:	4330      	orrs	r0, r6
 8017be6:	f84a 0b04 	str.w	r0, [sl], #4
 8017bea:	f853 0b04 	ldr.w	r0, [r3], #4
 8017bee:	459c      	cmp	ip, r3
 8017bf0:	fa20 f00e 	lsr.w	r0, r0, lr
 8017bf4:	d814      	bhi.n	8017c20 <__lshift+0x94>
 8017bf6:	6048      	str	r0, [r1, #4]
 8017bf8:	b108      	cbz	r0, 8017bfe <__lshift+0x72>
 8017bfa:	f109 0502 	add.w	r5, r9, #2
 8017bfe:	3d01      	subs	r5, #1
 8017c00:	4638      	mov	r0, r7
 8017c02:	f8c8 5010 	str.w	r5, [r8, #16]
 8017c06:	4621      	mov	r1, r4
 8017c08:	f7ff fdf4 	bl	80177f4 <_Bfree>
 8017c0c:	4640      	mov	r0, r8
 8017c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c12:	3101      	adds	r1, #1
 8017c14:	005b      	lsls	r3, r3, #1
 8017c16:	e7c7      	b.n	8017ba8 <__lshift+0x1c>
 8017c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	e7cd      	b.n	8017bbc <__lshift+0x30>
 8017c20:	4651      	mov	r1, sl
 8017c22:	e7dc      	b.n	8017bde <__lshift+0x52>
 8017c24:	3904      	subs	r1, #4
 8017c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c2e:	459c      	cmp	ip, r3
 8017c30:	d8f9      	bhi.n	8017c26 <__lshift+0x9a>
 8017c32:	e7e4      	b.n	8017bfe <__lshift+0x72>

08017c34 <__mcmp>:
 8017c34:	6903      	ldr	r3, [r0, #16]
 8017c36:	690a      	ldr	r2, [r1, #16]
 8017c38:	1a9b      	subs	r3, r3, r2
 8017c3a:	b530      	push	{r4, r5, lr}
 8017c3c:	d10c      	bne.n	8017c58 <__mcmp+0x24>
 8017c3e:	0092      	lsls	r2, r2, #2
 8017c40:	3014      	adds	r0, #20
 8017c42:	3114      	adds	r1, #20
 8017c44:	1884      	adds	r4, r0, r2
 8017c46:	4411      	add	r1, r2
 8017c48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017c4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017c50:	4295      	cmp	r5, r2
 8017c52:	d003      	beq.n	8017c5c <__mcmp+0x28>
 8017c54:	d305      	bcc.n	8017c62 <__mcmp+0x2e>
 8017c56:	2301      	movs	r3, #1
 8017c58:	4618      	mov	r0, r3
 8017c5a:	bd30      	pop	{r4, r5, pc}
 8017c5c:	42a0      	cmp	r0, r4
 8017c5e:	d3f3      	bcc.n	8017c48 <__mcmp+0x14>
 8017c60:	e7fa      	b.n	8017c58 <__mcmp+0x24>
 8017c62:	f04f 33ff 	mov.w	r3, #4294967295
 8017c66:	e7f7      	b.n	8017c58 <__mcmp+0x24>

08017c68 <__mdiff>:
 8017c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c6c:	460d      	mov	r5, r1
 8017c6e:	4607      	mov	r7, r0
 8017c70:	4611      	mov	r1, r2
 8017c72:	4628      	mov	r0, r5
 8017c74:	4614      	mov	r4, r2
 8017c76:	f7ff ffdd 	bl	8017c34 <__mcmp>
 8017c7a:	1e06      	subs	r6, r0, #0
 8017c7c:	d108      	bne.n	8017c90 <__mdiff+0x28>
 8017c7e:	4631      	mov	r1, r6
 8017c80:	4638      	mov	r0, r7
 8017c82:	f7ff fd83 	bl	801778c <_Balloc>
 8017c86:	2301      	movs	r3, #1
 8017c88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c90:	bfa4      	itt	ge
 8017c92:	4623      	movge	r3, r4
 8017c94:	462c      	movge	r4, r5
 8017c96:	4638      	mov	r0, r7
 8017c98:	6861      	ldr	r1, [r4, #4]
 8017c9a:	bfa6      	itte	ge
 8017c9c:	461d      	movge	r5, r3
 8017c9e:	2600      	movge	r6, #0
 8017ca0:	2601      	movlt	r6, #1
 8017ca2:	f7ff fd73 	bl	801778c <_Balloc>
 8017ca6:	692b      	ldr	r3, [r5, #16]
 8017ca8:	60c6      	str	r6, [r0, #12]
 8017caa:	6926      	ldr	r6, [r4, #16]
 8017cac:	f105 0914 	add.w	r9, r5, #20
 8017cb0:	f104 0214 	add.w	r2, r4, #20
 8017cb4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017cb8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017cbc:	f100 0514 	add.w	r5, r0, #20
 8017cc0:	f04f 0e00 	mov.w	lr, #0
 8017cc4:	f852 ab04 	ldr.w	sl, [r2], #4
 8017cc8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017ccc:	fa1e f18a 	uxtah	r1, lr, sl
 8017cd0:	b2a3      	uxth	r3, r4
 8017cd2:	1ac9      	subs	r1, r1, r3
 8017cd4:	0c23      	lsrs	r3, r4, #16
 8017cd6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017cda:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017cde:	b289      	uxth	r1, r1
 8017ce0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017ce4:	45c8      	cmp	r8, r9
 8017ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017cea:	4694      	mov	ip, r2
 8017cec:	f845 3b04 	str.w	r3, [r5], #4
 8017cf0:	d8e8      	bhi.n	8017cc4 <__mdiff+0x5c>
 8017cf2:	45bc      	cmp	ip, r7
 8017cf4:	d304      	bcc.n	8017d00 <__mdiff+0x98>
 8017cf6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017cfa:	b183      	cbz	r3, 8017d1e <__mdiff+0xb6>
 8017cfc:	6106      	str	r6, [r0, #16]
 8017cfe:	e7c5      	b.n	8017c8c <__mdiff+0x24>
 8017d00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017d04:	fa1e f381 	uxtah	r3, lr, r1
 8017d08:	141a      	asrs	r2, r3, #16
 8017d0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017d18:	f845 3b04 	str.w	r3, [r5], #4
 8017d1c:	e7e9      	b.n	8017cf2 <__mdiff+0x8a>
 8017d1e:	3e01      	subs	r6, #1
 8017d20:	e7e9      	b.n	8017cf6 <__mdiff+0x8e>
	...

08017d24 <__ulp>:
 8017d24:	4b12      	ldr	r3, [pc, #72]	; (8017d70 <__ulp+0x4c>)
 8017d26:	ee10 2a90 	vmov	r2, s1
 8017d2a:	401a      	ands	r2, r3
 8017d2c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	dd04      	ble.n	8017d3e <__ulp+0x1a>
 8017d34:	2000      	movs	r0, #0
 8017d36:	4619      	mov	r1, r3
 8017d38:	ec41 0b10 	vmov	d0, r0, r1
 8017d3c:	4770      	bx	lr
 8017d3e:	425b      	negs	r3, r3
 8017d40:	151b      	asrs	r3, r3, #20
 8017d42:	2b13      	cmp	r3, #19
 8017d44:	f04f 0000 	mov.w	r0, #0
 8017d48:	f04f 0100 	mov.w	r1, #0
 8017d4c:	dc04      	bgt.n	8017d58 <__ulp+0x34>
 8017d4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017d52:	fa42 f103 	asr.w	r1, r2, r3
 8017d56:	e7ef      	b.n	8017d38 <__ulp+0x14>
 8017d58:	3b14      	subs	r3, #20
 8017d5a:	2b1e      	cmp	r3, #30
 8017d5c:	f04f 0201 	mov.w	r2, #1
 8017d60:	bfda      	itte	le
 8017d62:	f1c3 031f 	rsble	r3, r3, #31
 8017d66:	fa02 f303 	lslle.w	r3, r2, r3
 8017d6a:	4613      	movgt	r3, r2
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	e7e3      	b.n	8017d38 <__ulp+0x14>
 8017d70:	7ff00000 	.word	0x7ff00000

08017d74 <__b2d>:
 8017d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d76:	6905      	ldr	r5, [r0, #16]
 8017d78:	f100 0714 	add.w	r7, r0, #20
 8017d7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017d80:	1f2e      	subs	r6, r5, #4
 8017d82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017d86:	4620      	mov	r0, r4
 8017d88:	f7ff fdc4 	bl	8017914 <__hi0bits>
 8017d8c:	f1c0 0320 	rsb	r3, r0, #32
 8017d90:	280a      	cmp	r0, #10
 8017d92:	600b      	str	r3, [r1, #0]
 8017d94:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017e0c <__b2d+0x98>
 8017d98:	dc14      	bgt.n	8017dc4 <__b2d+0x50>
 8017d9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8017d9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8017da2:	42b7      	cmp	r7, r6
 8017da4:	ea41 030c 	orr.w	r3, r1, ip
 8017da8:	bf34      	ite	cc
 8017daa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017dae:	2100      	movcs	r1, #0
 8017db0:	3015      	adds	r0, #21
 8017db2:	fa04 f000 	lsl.w	r0, r4, r0
 8017db6:	fa21 f10e 	lsr.w	r1, r1, lr
 8017dba:	ea40 0201 	orr.w	r2, r0, r1
 8017dbe:	ec43 2b10 	vmov	d0, r2, r3
 8017dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dc4:	42b7      	cmp	r7, r6
 8017dc6:	bf3a      	itte	cc
 8017dc8:	f1a5 0608 	subcc.w	r6, r5, #8
 8017dcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017dd0:	2100      	movcs	r1, #0
 8017dd2:	380b      	subs	r0, #11
 8017dd4:	d015      	beq.n	8017e02 <__b2d+0x8e>
 8017dd6:	4084      	lsls	r4, r0
 8017dd8:	f1c0 0520 	rsb	r5, r0, #32
 8017ddc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017de0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017de4:	42be      	cmp	r6, r7
 8017de6:	fa21 fc05 	lsr.w	ip, r1, r5
 8017dea:	ea44 030c 	orr.w	r3, r4, ip
 8017dee:	bf8c      	ite	hi
 8017df0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017df4:	2400      	movls	r4, #0
 8017df6:	fa01 f000 	lsl.w	r0, r1, r0
 8017dfa:	40ec      	lsrs	r4, r5
 8017dfc:	ea40 0204 	orr.w	r2, r0, r4
 8017e00:	e7dd      	b.n	8017dbe <__b2d+0x4a>
 8017e02:	ea44 030c 	orr.w	r3, r4, ip
 8017e06:	460a      	mov	r2, r1
 8017e08:	e7d9      	b.n	8017dbe <__b2d+0x4a>
 8017e0a:	bf00      	nop
 8017e0c:	3ff00000 	.word	0x3ff00000

08017e10 <__d2b>:
 8017e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017e14:	460e      	mov	r6, r1
 8017e16:	2101      	movs	r1, #1
 8017e18:	ec59 8b10 	vmov	r8, r9, d0
 8017e1c:	4615      	mov	r5, r2
 8017e1e:	f7ff fcb5 	bl	801778c <_Balloc>
 8017e22:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017e26:	4607      	mov	r7, r0
 8017e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e2c:	bb34      	cbnz	r4, 8017e7c <__d2b+0x6c>
 8017e2e:	9301      	str	r3, [sp, #4]
 8017e30:	f1b8 0300 	subs.w	r3, r8, #0
 8017e34:	d027      	beq.n	8017e86 <__d2b+0x76>
 8017e36:	a802      	add	r0, sp, #8
 8017e38:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017e3c:	f7ff fd89 	bl	8017952 <__lo0bits>
 8017e40:	9900      	ldr	r1, [sp, #0]
 8017e42:	b1f0      	cbz	r0, 8017e82 <__d2b+0x72>
 8017e44:	9a01      	ldr	r2, [sp, #4]
 8017e46:	f1c0 0320 	rsb	r3, r0, #32
 8017e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8017e4e:	430b      	orrs	r3, r1
 8017e50:	40c2      	lsrs	r2, r0
 8017e52:	617b      	str	r3, [r7, #20]
 8017e54:	9201      	str	r2, [sp, #4]
 8017e56:	9b01      	ldr	r3, [sp, #4]
 8017e58:	61bb      	str	r3, [r7, #24]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	bf14      	ite	ne
 8017e5e:	2102      	movne	r1, #2
 8017e60:	2101      	moveq	r1, #1
 8017e62:	6139      	str	r1, [r7, #16]
 8017e64:	b1c4      	cbz	r4, 8017e98 <__d2b+0x88>
 8017e66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017e6a:	4404      	add	r4, r0
 8017e6c:	6034      	str	r4, [r6, #0]
 8017e6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017e72:	6028      	str	r0, [r5, #0]
 8017e74:	4638      	mov	r0, r7
 8017e76:	b003      	add	sp, #12
 8017e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e80:	e7d5      	b.n	8017e2e <__d2b+0x1e>
 8017e82:	6179      	str	r1, [r7, #20]
 8017e84:	e7e7      	b.n	8017e56 <__d2b+0x46>
 8017e86:	a801      	add	r0, sp, #4
 8017e88:	f7ff fd63 	bl	8017952 <__lo0bits>
 8017e8c:	9b01      	ldr	r3, [sp, #4]
 8017e8e:	617b      	str	r3, [r7, #20]
 8017e90:	2101      	movs	r1, #1
 8017e92:	6139      	str	r1, [r7, #16]
 8017e94:	3020      	adds	r0, #32
 8017e96:	e7e5      	b.n	8017e64 <__d2b+0x54>
 8017e98:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017e9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017ea0:	6030      	str	r0, [r6, #0]
 8017ea2:	6918      	ldr	r0, [r3, #16]
 8017ea4:	f7ff fd36 	bl	8017914 <__hi0bits>
 8017ea8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017eac:	e7e1      	b.n	8017e72 <__d2b+0x62>

08017eae <__ratio>:
 8017eae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb2:	4688      	mov	r8, r1
 8017eb4:	4669      	mov	r1, sp
 8017eb6:	4681      	mov	r9, r0
 8017eb8:	f7ff ff5c 	bl	8017d74 <__b2d>
 8017ebc:	a901      	add	r1, sp, #4
 8017ebe:	4640      	mov	r0, r8
 8017ec0:	ec57 6b10 	vmov	r6, r7, d0
 8017ec4:	f7ff ff56 	bl	8017d74 <__b2d>
 8017ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ecc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017ed0:	eba3 0c02 	sub.w	ip, r3, r2
 8017ed4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017ed8:	1a9b      	subs	r3, r3, r2
 8017eda:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017ede:	ec5b ab10 	vmov	sl, fp, d0
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	bfce      	itee	gt
 8017ee6:	463a      	movgt	r2, r7
 8017ee8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017eec:	465a      	movle	r2, fp
 8017eee:	4659      	mov	r1, fp
 8017ef0:	463d      	mov	r5, r7
 8017ef2:	bfd4      	ite	le
 8017ef4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017ef8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017efc:	4630      	mov	r0, r6
 8017efe:	ee10 2a10 	vmov	r2, s0
 8017f02:	460b      	mov	r3, r1
 8017f04:	4629      	mov	r1, r5
 8017f06:	f7e8 fcb9 	bl	800087c <__aeabi_ddiv>
 8017f0a:	ec41 0b10 	vmov	d0, r0, r1
 8017f0e:	b003      	add	sp, #12
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f14 <__copybits>:
 8017f14:	3901      	subs	r1, #1
 8017f16:	b510      	push	{r4, lr}
 8017f18:	1149      	asrs	r1, r1, #5
 8017f1a:	6914      	ldr	r4, [r2, #16]
 8017f1c:	3101      	adds	r1, #1
 8017f1e:	f102 0314 	add.w	r3, r2, #20
 8017f22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017f26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017f2a:	42a3      	cmp	r3, r4
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	d303      	bcc.n	8017f38 <__copybits+0x24>
 8017f30:	2300      	movs	r3, #0
 8017f32:	428a      	cmp	r2, r1
 8017f34:	d305      	bcc.n	8017f42 <__copybits+0x2e>
 8017f36:	bd10      	pop	{r4, pc}
 8017f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f3c:	f840 2b04 	str.w	r2, [r0], #4
 8017f40:	e7f3      	b.n	8017f2a <__copybits+0x16>
 8017f42:	f842 3b04 	str.w	r3, [r2], #4
 8017f46:	e7f4      	b.n	8017f32 <__copybits+0x1e>

08017f48 <__any_on>:
 8017f48:	f100 0214 	add.w	r2, r0, #20
 8017f4c:	6900      	ldr	r0, [r0, #16]
 8017f4e:	114b      	asrs	r3, r1, #5
 8017f50:	4298      	cmp	r0, r3
 8017f52:	b510      	push	{r4, lr}
 8017f54:	db11      	blt.n	8017f7a <__any_on+0x32>
 8017f56:	dd0a      	ble.n	8017f6e <__any_on+0x26>
 8017f58:	f011 011f 	ands.w	r1, r1, #31
 8017f5c:	d007      	beq.n	8017f6e <__any_on+0x26>
 8017f5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017f62:	fa24 f001 	lsr.w	r0, r4, r1
 8017f66:	fa00 f101 	lsl.w	r1, r0, r1
 8017f6a:	428c      	cmp	r4, r1
 8017f6c:	d10b      	bne.n	8017f86 <__any_on+0x3e>
 8017f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017f72:	4293      	cmp	r3, r2
 8017f74:	d803      	bhi.n	8017f7e <__any_on+0x36>
 8017f76:	2000      	movs	r0, #0
 8017f78:	bd10      	pop	{r4, pc}
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	e7f7      	b.n	8017f6e <__any_on+0x26>
 8017f7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017f82:	2900      	cmp	r1, #0
 8017f84:	d0f5      	beq.n	8017f72 <__any_on+0x2a>
 8017f86:	2001      	movs	r0, #1
 8017f88:	e7f6      	b.n	8017f78 <__any_on+0x30>

08017f8a <_calloc_r>:
 8017f8a:	b538      	push	{r3, r4, r5, lr}
 8017f8c:	fb02 f401 	mul.w	r4, r2, r1
 8017f90:	4621      	mov	r1, r4
 8017f92:	f000 f857 	bl	8018044 <_malloc_r>
 8017f96:	4605      	mov	r5, r0
 8017f98:	b118      	cbz	r0, 8017fa2 <_calloc_r+0x18>
 8017f9a:	4622      	mov	r2, r4
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	f7fc fcaa 	bl	80148f6 <memset>
 8017fa2:	4628      	mov	r0, r5
 8017fa4:	bd38      	pop	{r3, r4, r5, pc}
	...

08017fa8 <_free_r>:
 8017fa8:	b538      	push	{r3, r4, r5, lr}
 8017faa:	4605      	mov	r5, r0
 8017fac:	2900      	cmp	r1, #0
 8017fae:	d045      	beq.n	801803c <_free_r+0x94>
 8017fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fb4:	1f0c      	subs	r4, r1, #4
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	bfb8      	it	lt
 8017fba:	18e4      	addlt	r4, r4, r3
 8017fbc:	f000 fe30 	bl	8018c20 <__malloc_lock>
 8017fc0:	4a1f      	ldr	r2, [pc, #124]	; (8018040 <_free_r+0x98>)
 8017fc2:	6813      	ldr	r3, [r2, #0]
 8017fc4:	4610      	mov	r0, r2
 8017fc6:	b933      	cbnz	r3, 8017fd6 <_free_r+0x2e>
 8017fc8:	6063      	str	r3, [r4, #4]
 8017fca:	6014      	str	r4, [r2, #0]
 8017fcc:	4628      	mov	r0, r5
 8017fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fd2:	f000 be26 	b.w	8018c22 <__malloc_unlock>
 8017fd6:	42a3      	cmp	r3, r4
 8017fd8:	d90c      	bls.n	8017ff4 <_free_r+0x4c>
 8017fda:	6821      	ldr	r1, [r4, #0]
 8017fdc:	1862      	adds	r2, r4, r1
 8017fde:	4293      	cmp	r3, r2
 8017fe0:	bf04      	itt	eq
 8017fe2:	681a      	ldreq	r2, [r3, #0]
 8017fe4:	685b      	ldreq	r3, [r3, #4]
 8017fe6:	6063      	str	r3, [r4, #4]
 8017fe8:	bf04      	itt	eq
 8017fea:	1852      	addeq	r2, r2, r1
 8017fec:	6022      	streq	r2, [r4, #0]
 8017fee:	6004      	str	r4, [r0, #0]
 8017ff0:	e7ec      	b.n	8017fcc <_free_r+0x24>
 8017ff2:	4613      	mov	r3, r2
 8017ff4:	685a      	ldr	r2, [r3, #4]
 8017ff6:	b10a      	cbz	r2, 8017ffc <_free_r+0x54>
 8017ff8:	42a2      	cmp	r2, r4
 8017ffa:	d9fa      	bls.n	8017ff2 <_free_r+0x4a>
 8017ffc:	6819      	ldr	r1, [r3, #0]
 8017ffe:	1858      	adds	r0, r3, r1
 8018000:	42a0      	cmp	r0, r4
 8018002:	d10b      	bne.n	801801c <_free_r+0x74>
 8018004:	6820      	ldr	r0, [r4, #0]
 8018006:	4401      	add	r1, r0
 8018008:	1858      	adds	r0, r3, r1
 801800a:	4282      	cmp	r2, r0
 801800c:	6019      	str	r1, [r3, #0]
 801800e:	d1dd      	bne.n	8017fcc <_free_r+0x24>
 8018010:	6810      	ldr	r0, [r2, #0]
 8018012:	6852      	ldr	r2, [r2, #4]
 8018014:	605a      	str	r2, [r3, #4]
 8018016:	4401      	add	r1, r0
 8018018:	6019      	str	r1, [r3, #0]
 801801a:	e7d7      	b.n	8017fcc <_free_r+0x24>
 801801c:	d902      	bls.n	8018024 <_free_r+0x7c>
 801801e:	230c      	movs	r3, #12
 8018020:	602b      	str	r3, [r5, #0]
 8018022:	e7d3      	b.n	8017fcc <_free_r+0x24>
 8018024:	6820      	ldr	r0, [r4, #0]
 8018026:	1821      	adds	r1, r4, r0
 8018028:	428a      	cmp	r2, r1
 801802a:	bf04      	itt	eq
 801802c:	6811      	ldreq	r1, [r2, #0]
 801802e:	6852      	ldreq	r2, [r2, #4]
 8018030:	6062      	str	r2, [r4, #4]
 8018032:	bf04      	itt	eq
 8018034:	1809      	addeq	r1, r1, r0
 8018036:	6021      	streq	r1, [r4, #0]
 8018038:	605c      	str	r4, [r3, #4]
 801803a:	e7c7      	b.n	8017fcc <_free_r+0x24>
 801803c:	bd38      	pop	{r3, r4, r5, pc}
 801803e:	bf00      	nop
 8018040:	2003c4d0 	.word	0x2003c4d0

08018044 <_malloc_r>:
 8018044:	b570      	push	{r4, r5, r6, lr}
 8018046:	1ccd      	adds	r5, r1, #3
 8018048:	f025 0503 	bic.w	r5, r5, #3
 801804c:	3508      	adds	r5, #8
 801804e:	2d0c      	cmp	r5, #12
 8018050:	bf38      	it	cc
 8018052:	250c      	movcc	r5, #12
 8018054:	2d00      	cmp	r5, #0
 8018056:	4606      	mov	r6, r0
 8018058:	db01      	blt.n	801805e <_malloc_r+0x1a>
 801805a:	42a9      	cmp	r1, r5
 801805c:	d903      	bls.n	8018066 <_malloc_r+0x22>
 801805e:	230c      	movs	r3, #12
 8018060:	6033      	str	r3, [r6, #0]
 8018062:	2000      	movs	r0, #0
 8018064:	bd70      	pop	{r4, r5, r6, pc}
 8018066:	f000 fddb 	bl	8018c20 <__malloc_lock>
 801806a:	4a21      	ldr	r2, [pc, #132]	; (80180f0 <_malloc_r+0xac>)
 801806c:	6814      	ldr	r4, [r2, #0]
 801806e:	4621      	mov	r1, r4
 8018070:	b991      	cbnz	r1, 8018098 <_malloc_r+0x54>
 8018072:	4c20      	ldr	r4, [pc, #128]	; (80180f4 <_malloc_r+0xb0>)
 8018074:	6823      	ldr	r3, [r4, #0]
 8018076:	b91b      	cbnz	r3, 8018080 <_malloc_r+0x3c>
 8018078:	4630      	mov	r0, r6
 801807a:	f000 fc91 	bl	80189a0 <_sbrk_r>
 801807e:	6020      	str	r0, [r4, #0]
 8018080:	4629      	mov	r1, r5
 8018082:	4630      	mov	r0, r6
 8018084:	f000 fc8c 	bl	80189a0 <_sbrk_r>
 8018088:	1c43      	adds	r3, r0, #1
 801808a:	d124      	bne.n	80180d6 <_malloc_r+0x92>
 801808c:	230c      	movs	r3, #12
 801808e:	6033      	str	r3, [r6, #0]
 8018090:	4630      	mov	r0, r6
 8018092:	f000 fdc6 	bl	8018c22 <__malloc_unlock>
 8018096:	e7e4      	b.n	8018062 <_malloc_r+0x1e>
 8018098:	680b      	ldr	r3, [r1, #0]
 801809a:	1b5b      	subs	r3, r3, r5
 801809c:	d418      	bmi.n	80180d0 <_malloc_r+0x8c>
 801809e:	2b0b      	cmp	r3, #11
 80180a0:	d90f      	bls.n	80180c2 <_malloc_r+0x7e>
 80180a2:	600b      	str	r3, [r1, #0]
 80180a4:	50cd      	str	r5, [r1, r3]
 80180a6:	18cc      	adds	r4, r1, r3
 80180a8:	4630      	mov	r0, r6
 80180aa:	f000 fdba 	bl	8018c22 <__malloc_unlock>
 80180ae:	f104 000b 	add.w	r0, r4, #11
 80180b2:	1d23      	adds	r3, r4, #4
 80180b4:	f020 0007 	bic.w	r0, r0, #7
 80180b8:	1ac3      	subs	r3, r0, r3
 80180ba:	d0d3      	beq.n	8018064 <_malloc_r+0x20>
 80180bc:	425a      	negs	r2, r3
 80180be:	50e2      	str	r2, [r4, r3]
 80180c0:	e7d0      	b.n	8018064 <_malloc_r+0x20>
 80180c2:	428c      	cmp	r4, r1
 80180c4:	684b      	ldr	r3, [r1, #4]
 80180c6:	bf16      	itet	ne
 80180c8:	6063      	strne	r3, [r4, #4]
 80180ca:	6013      	streq	r3, [r2, #0]
 80180cc:	460c      	movne	r4, r1
 80180ce:	e7eb      	b.n	80180a8 <_malloc_r+0x64>
 80180d0:	460c      	mov	r4, r1
 80180d2:	6849      	ldr	r1, [r1, #4]
 80180d4:	e7cc      	b.n	8018070 <_malloc_r+0x2c>
 80180d6:	1cc4      	adds	r4, r0, #3
 80180d8:	f024 0403 	bic.w	r4, r4, #3
 80180dc:	42a0      	cmp	r0, r4
 80180de:	d005      	beq.n	80180ec <_malloc_r+0xa8>
 80180e0:	1a21      	subs	r1, r4, r0
 80180e2:	4630      	mov	r0, r6
 80180e4:	f000 fc5c 	bl	80189a0 <_sbrk_r>
 80180e8:	3001      	adds	r0, #1
 80180ea:	d0cf      	beq.n	801808c <_malloc_r+0x48>
 80180ec:	6025      	str	r5, [r4, #0]
 80180ee:	e7db      	b.n	80180a8 <_malloc_r+0x64>
 80180f0:	2003c4d0 	.word	0x2003c4d0
 80180f4:	2003c4d4 	.word	0x2003c4d4

080180f8 <__ssputs_r>:
 80180f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180fc:	688e      	ldr	r6, [r1, #8]
 80180fe:	429e      	cmp	r6, r3
 8018100:	4682      	mov	sl, r0
 8018102:	460c      	mov	r4, r1
 8018104:	4690      	mov	r8, r2
 8018106:	4699      	mov	r9, r3
 8018108:	d837      	bhi.n	801817a <__ssputs_r+0x82>
 801810a:	898a      	ldrh	r2, [r1, #12]
 801810c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018110:	d031      	beq.n	8018176 <__ssputs_r+0x7e>
 8018112:	6825      	ldr	r5, [r4, #0]
 8018114:	6909      	ldr	r1, [r1, #16]
 8018116:	1a6f      	subs	r7, r5, r1
 8018118:	6965      	ldr	r5, [r4, #20]
 801811a:	2302      	movs	r3, #2
 801811c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018120:	fb95 f5f3 	sdiv	r5, r5, r3
 8018124:	f109 0301 	add.w	r3, r9, #1
 8018128:	443b      	add	r3, r7
 801812a:	429d      	cmp	r5, r3
 801812c:	bf38      	it	cc
 801812e:	461d      	movcc	r5, r3
 8018130:	0553      	lsls	r3, r2, #21
 8018132:	d530      	bpl.n	8018196 <__ssputs_r+0x9e>
 8018134:	4629      	mov	r1, r5
 8018136:	f7ff ff85 	bl	8018044 <_malloc_r>
 801813a:	4606      	mov	r6, r0
 801813c:	b950      	cbnz	r0, 8018154 <__ssputs_r+0x5c>
 801813e:	230c      	movs	r3, #12
 8018140:	f8ca 3000 	str.w	r3, [sl]
 8018144:	89a3      	ldrh	r3, [r4, #12]
 8018146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801814a:	81a3      	strh	r3, [r4, #12]
 801814c:	f04f 30ff 	mov.w	r0, #4294967295
 8018150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018154:	463a      	mov	r2, r7
 8018156:	6921      	ldr	r1, [r4, #16]
 8018158:	f7fc fbc2 	bl	80148e0 <memcpy>
 801815c:	89a3      	ldrh	r3, [r4, #12]
 801815e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018166:	81a3      	strh	r3, [r4, #12]
 8018168:	6126      	str	r6, [r4, #16]
 801816a:	6165      	str	r5, [r4, #20]
 801816c:	443e      	add	r6, r7
 801816e:	1bed      	subs	r5, r5, r7
 8018170:	6026      	str	r6, [r4, #0]
 8018172:	60a5      	str	r5, [r4, #8]
 8018174:	464e      	mov	r6, r9
 8018176:	454e      	cmp	r6, r9
 8018178:	d900      	bls.n	801817c <__ssputs_r+0x84>
 801817a:	464e      	mov	r6, r9
 801817c:	4632      	mov	r2, r6
 801817e:	4641      	mov	r1, r8
 8018180:	6820      	ldr	r0, [r4, #0]
 8018182:	f000 fd34 	bl	8018bee <memmove>
 8018186:	68a3      	ldr	r3, [r4, #8]
 8018188:	1b9b      	subs	r3, r3, r6
 801818a:	60a3      	str	r3, [r4, #8]
 801818c:	6823      	ldr	r3, [r4, #0]
 801818e:	441e      	add	r6, r3
 8018190:	6026      	str	r6, [r4, #0]
 8018192:	2000      	movs	r0, #0
 8018194:	e7dc      	b.n	8018150 <__ssputs_r+0x58>
 8018196:	462a      	mov	r2, r5
 8018198:	f000 fd44 	bl	8018c24 <_realloc_r>
 801819c:	4606      	mov	r6, r0
 801819e:	2800      	cmp	r0, #0
 80181a0:	d1e2      	bne.n	8018168 <__ssputs_r+0x70>
 80181a2:	6921      	ldr	r1, [r4, #16]
 80181a4:	4650      	mov	r0, sl
 80181a6:	f7ff feff 	bl	8017fa8 <_free_r>
 80181aa:	e7c8      	b.n	801813e <__ssputs_r+0x46>

080181ac <_svfiprintf_r>:
 80181ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b0:	461d      	mov	r5, r3
 80181b2:	898b      	ldrh	r3, [r1, #12]
 80181b4:	061f      	lsls	r7, r3, #24
 80181b6:	b09d      	sub	sp, #116	; 0x74
 80181b8:	4680      	mov	r8, r0
 80181ba:	460c      	mov	r4, r1
 80181bc:	4616      	mov	r6, r2
 80181be:	d50f      	bpl.n	80181e0 <_svfiprintf_r+0x34>
 80181c0:	690b      	ldr	r3, [r1, #16]
 80181c2:	b96b      	cbnz	r3, 80181e0 <_svfiprintf_r+0x34>
 80181c4:	2140      	movs	r1, #64	; 0x40
 80181c6:	f7ff ff3d 	bl	8018044 <_malloc_r>
 80181ca:	6020      	str	r0, [r4, #0]
 80181cc:	6120      	str	r0, [r4, #16]
 80181ce:	b928      	cbnz	r0, 80181dc <_svfiprintf_r+0x30>
 80181d0:	230c      	movs	r3, #12
 80181d2:	f8c8 3000 	str.w	r3, [r8]
 80181d6:	f04f 30ff 	mov.w	r0, #4294967295
 80181da:	e0c8      	b.n	801836e <_svfiprintf_r+0x1c2>
 80181dc:	2340      	movs	r3, #64	; 0x40
 80181de:	6163      	str	r3, [r4, #20]
 80181e0:	2300      	movs	r3, #0
 80181e2:	9309      	str	r3, [sp, #36]	; 0x24
 80181e4:	2320      	movs	r3, #32
 80181e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181ea:	2330      	movs	r3, #48	; 0x30
 80181ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181f0:	9503      	str	r5, [sp, #12]
 80181f2:	f04f 0b01 	mov.w	fp, #1
 80181f6:	4637      	mov	r7, r6
 80181f8:	463d      	mov	r5, r7
 80181fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80181fe:	b10b      	cbz	r3, 8018204 <_svfiprintf_r+0x58>
 8018200:	2b25      	cmp	r3, #37	; 0x25
 8018202:	d13e      	bne.n	8018282 <_svfiprintf_r+0xd6>
 8018204:	ebb7 0a06 	subs.w	sl, r7, r6
 8018208:	d00b      	beq.n	8018222 <_svfiprintf_r+0x76>
 801820a:	4653      	mov	r3, sl
 801820c:	4632      	mov	r2, r6
 801820e:	4621      	mov	r1, r4
 8018210:	4640      	mov	r0, r8
 8018212:	f7ff ff71 	bl	80180f8 <__ssputs_r>
 8018216:	3001      	adds	r0, #1
 8018218:	f000 80a4 	beq.w	8018364 <_svfiprintf_r+0x1b8>
 801821c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801821e:	4453      	add	r3, sl
 8018220:	9309      	str	r3, [sp, #36]	; 0x24
 8018222:	783b      	ldrb	r3, [r7, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	f000 809d 	beq.w	8018364 <_svfiprintf_r+0x1b8>
 801822a:	2300      	movs	r3, #0
 801822c:	f04f 32ff 	mov.w	r2, #4294967295
 8018230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018234:	9304      	str	r3, [sp, #16]
 8018236:	9307      	str	r3, [sp, #28]
 8018238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801823c:	931a      	str	r3, [sp, #104]	; 0x68
 801823e:	462f      	mov	r7, r5
 8018240:	2205      	movs	r2, #5
 8018242:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018246:	4850      	ldr	r0, [pc, #320]	; (8018388 <_svfiprintf_r+0x1dc>)
 8018248:	f7e7 ffe2 	bl	8000210 <memchr>
 801824c:	9b04      	ldr	r3, [sp, #16]
 801824e:	b9d0      	cbnz	r0, 8018286 <_svfiprintf_r+0xda>
 8018250:	06d9      	lsls	r1, r3, #27
 8018252:	bf44      	itt	mi
 8018254:	2220      	movmi	r2, #32
 8018256:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801825a:	071a      	lsls	r2, r3, #28
 801825c:	bf44      	itt	mi
 801825e:	222b      	movmi	r2, #43	; 0x2b
 8018260:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018264:	782a      	ldrb	r2, [r5, #0]
 8018266:	2a2a      	cmp	r2, #42	; 0x2a
 8018268:	d015      	beq.n	8018296 <_svfiprintf_r+0xea>
 801826a:	9a07      	ldr	r2, [sp, #28]
 801826c:	462f      	mov	r7, r5
 801826e:	2000      	movs	r0, #0
 8018270:	250a      	movs	r5, #10
 8018272:	4639      	mov	r1, r7
 8018274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018278:	3b30      	subs	r3, #48	; 0x30
 801827a:	2b09      	cmp	r3, #9
 801827c:	d94d      	bls.n	801831a <_svfiprintf_r+0x16e>
 801827e:	b1b8      	cbz	r0, 80182b0 <_svfiprintf_r+0x104>
 8018280:	e00f      	b.n	80182a2 <_svfiprintf_r+0xf6>
 8018282:	462f      	mov	r7, r5
 8018284:	e7b8      	b.n	80181f8 <_svfiprintf_r+0x4c>
 8018286:	4a40      	ldr	r2, [pc, #256]	; (8018388 <_svfiprintf_r+0x1dc>)
 8018288:	1a80      	subs	r0, r0, r2
 801828a:	fa0b f000 	lsl.w	r0, fp, r0
 801828e:	4318      	orrs	r0, r3
 8018290:	9004      	str	r0, [sp, #16]
 8018292:	463d      	mov	r5, r7
 8018294:	e7d3      	b.n	801823e <_svfiprintf_r+0x92>
 8018296:	9a03      	ldr	r2, [sp, #12]
 8018298:	1d11      	adds	r1, r2, #4
 801829a:	6812      	ldr	r2, [r2, #0]
 801829c:	9103      	str	r1, [sp, #12]
 801829e:	2a00      	cmp	r2, #0
 80182a0:	db01      	blt.n	80182a6 <_svfiprintf_r+0xfa>
 80182a2:	9207      	str	r2, [sp, #28]
 80182a4:	e004      	b.n	80182b0 <_svfiprintf_r+0x104>
 80182a6:	4252      	negs	r2, r2
 80182a8:	f043 0302 	orr.w	r3, r3, #2
 80182ac:	9207      	str	r2, [sp, #28]
 80182ae:	9304      	str	r3, [sp, #16]
 80182b0:	783b      	ldrb	r3, [r7, #0]
 80182b2:	2b2e      	cmp	r3, #46	; 0x2e
 80182b4:	d10c      	bne.n	80182d0 <_svfiprintf_r+0x124>
 80182b6:	787b      	ldrb	r3, [r7, #1]
 80182b8:	2b2a      	cmp	r3, #42	; 0x2a
 80182ba:	d133      	bne.n	8018324 <_svfiprintf_r+0x178>
 80182bc:	9b03      	ldr	r3, [sp, #12]
 80182be:	1d1a      	adds	r2, r3, #4
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	9203      	str	r2, [sp, #12]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	bfb8      	it	lt
 80182c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80182cc:	3702      	adds	r7, #2
 80182ce:	9305      	str	r3, [sp, #20]
 80182d0:	4d2e      	ldr	r5, [pc, #184]	; (801838c <_svfiprintf_r+0x1e0>)
 80182d2:	7839      	ldrb	r1, [r7, #0]
 80182d4:	2203      	movs	r2, #3
 80182d6:	4628      	mov	r0, r5
 80182d8:	f7e7 ff9a 	bl	8000210 <memchr>
 80182dc:	b138      	cbz	r0, 80182ee <_svfiprintf_r+0x142>
 80182de:	2340      	movs	r3, #64	; 0x40
 80182e0:	1b40      	subs	r0, r0, r5
 80182e2:	fa03 f000 	lsl.w	r0, r3, r0
 80182e6:	9b04      	ldr	r3, [sp, #16]
 80182e8:	4303      	orrs	r3, r0
 80182ea:	3701      	adds	r7, #1
 80182ec:	9304      	str	r3, [sp, #16]
 80182ee:	7839      	ldrb	r1, [r7, #0]
 80182f0:	4827      	ldr	r0, [pc, #156]	; (8018390 <_svfiprintf_r+0x1e4>)
 80182f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80182f6:	2206      	movs	r2, #6
 80182f8:	1c7e      	adds	r6, r7, #1
 80182fa:	f7e7 ff89 	bl	8000210 <memchr>
 80182fe:	2800      	cmp	r0, #0
 8018300:	d038      	beq.n	8018374 <_svfiprintf_r+0x1c8>
 8018302:	4b24      	ldr	r3, [pc, #144]	; (8018394 <_svfiprintf_r+0x1e8>)
 8018304:	bb13      	cbnz	r3, 801834c <_svfiprintf_r+0x1a0>
 8018306:	9b03      	ldr	r3, [sp, #12]
 8018308:	3307      	adds	r3, #7
 801830a:	f023 0307 	bic.w	r3, r3, #7
 801830e:	3308      	adds	r3, #8
 8018310:	9303      	str	r3, [sp, #12]
 8018312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018314:	444b      	add	r3, r9
 8018316:	9309      	str	r3, [sp, #36]	; 0x24
 8018318:	e76d      	b.n	80181f6 <_svfiprintf_r+0x4a>
 801831a:	fb05 3202 	mla	r2, r5, r2, r3
 801831e:	2001      	movs	r0, #1
 8018320:	460f      	mov	r7, r1
 8018322:	e7a6      	b.n	8018272 <_svfiprintf_r+0xc6>
 8018324:	2300      	movs	r3, #0
 8018326:	3701      	adds	r7, #1
 8018328:	9305      	str	r3, [sp, #20]
 801832a:	4619      	mov	r1, r3
 801832c:	250a      	movs	r5, #10
 801832e:	4638      	mov	r0, r7
 8018330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018334:	3a30      	subs	r2, #48	; 0x30
 8018336:	2a09      	cmp	r2, #9
 8018338:	d903      	bls.n	8018342 <_svfiprintf_r+0x196>
 801833a:	2b00      	cmp	r3, #0
 801833c:	d0c8      	beq.n	80182d0 <_svfiprintf_r+0x124>
 801833e:	9105      	str	r1, [sp, #20]
 8018340:	e7c6      	b.n	80182d0 <_svfiprintf_r+0x124>
 8018342:	fb05 2101 	mla	r1, r5, r1, r2
 8018346:	2301      	movs	r3, #1
 8018348:	4607      	mov	r7, r0
 801834a:	e7f0      	b.n	801832e <_svfiprintf_r+0x182>
 801834c:	ab03      	add	r3, sp, #12
 801834e:	9300      	str	r3, [sp, #0]
 8018350:	4622      	mov	r2, r4
 8018352:	4b11      	ldr	r3, [pc, #68]	; (8018398 <_svfiprintf_r+0x1ec>)
 8018354:	a904      	add	r1, sp, #16
 8018356:	4640      	mov	r0, r8
 8018358:	f7fc fb6a 	bl	8014a30 <_printf_float>
 801835c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018360:	4681      	mov	r9, r0
 8018362:	d1d6      	bne.n	8018312 <_svfiprintf_r+0x166>
 8018364:	89a3      	ldrh	r3, [r4, #12]
 8018366:	065b      	lsls	r3, r3, #25
 8018368:	f53f af35 	bmi.w	80181d6 <_svfiprintf_r+0x2a>
 801836c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801836e:	b01d      	add	sp, #116	; 0x74
 8018370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018374:	ab03      	add	r3, sp, #12
 8018376:	9300      	str	r3, [sp, #0]
 8018378:	4622      	mov	r2, r4
 801837a:	4b07      	ldr	r3, [pc, #28]	; (8018398 <_svfiprintf_r+0x1ec>)
 801837c:	a904      	add	r1, sp, #16
 801837e:	4640      	mov	r0, r8
 8018380:	f7fc fe0c 	bl	8014f9c <_printf_i>
 8018384:	e7ea      	b.n	801835c <_svfiprintf_r+0x1b0>
 8018386:	bf00      	nop
 8018388:	080196e4 	.word	0x080196e4
 801838c:	080196ea 	.word	0x080196ea
 8018390:	080196ee 	.word	0x080196ee
 8018394:	08014a31 	.word	0x08014a31
 8018398:	080180f9 	.word	0x080180f9

0801839c <_sungetc_r>:
 801839c:	b538      	push	{r3, r4, r5, lr}
 801839e:	1c4b      	adds	r3, r1, #1
 80183a0:	4614      	mov	r4, r2
 80183a2:	d103      	bne.n	80183ac <_sungetc_r+0x10>
 80183a4:	f04f 35ff 	mov.w	r5, #4294967295
 80183a8:	4628      	mov	r0, r5
 80183aa:	bd38      	pop	{r3, r4, r5, pc}
 80183ac:	8993      	ldrh	r3, [r2, #12]
 80183ae:	f023 0320 	bic.w	r3, r3, #32
 80183b2:	8193      	strh	r3, [r2, #12]
 80183b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80183b6:	6852      	ldr	r2, [r2, #4]
 80183b8:	b2cd      	uxtb	r5, r1
 80183ba:	b18b      	cbz	r3, 80183e0 <_sungetc_r+0x44>
 80183bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80183be:	4293      	cmp	r3, r2
 80183c0:	dd08      	ble.n	80183d4 <_sungetc_r+0x38>
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	1e5a      	subs	r2, r3, #1
 80183c6:	6022      	str	r2, [r4, #0]
 80183c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80183cc:	6863      	ldr	r3, [r4, #4]
 80183ce:	3301      	adds	r3, #1
 80183d0:	6063      	str	r3, [r4, #4]
 80183d2:	e7e9      	b.n	80183a8 <_sungetc_r+0xc>
 80183d4:	4621      	mov	r1, r4
 80183d6:	f000 fbc3 	bl	8018b60 <__submore>
 80183da:	2800      	cmp	r0, #0
 80183dc:	d0f1      	beq.n	80183c2 <_sungetc_r+0x26>
 80183de:	e7e1      	b.n	80183a4 <_sungetc_r+0x8>
 80183e0:	6921      	ldr	r1, [r4, #16]
 80183e2:	6823      	ldr	r3, [r4, #0]
 80183e4:	b151      	cbz	r1, 80183fc <_sungetc_r+0x60>
 80183e6:	4299      	cmp	r1, r3
 80183e8:	d208      	bcs.n	80183fc <_sungetc_r+0x60>
 80183ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80183ee:	42a9      	cmp	r1, r5
 80183f0:	d104      	bne.n	80183fc <_sungetc_r+0x60>
 80183f2:	3b01      	subs	r3, #1
 80183f4:	3201      	adds	r2, #1
 80183f6:	6023      	str	r3, [r4, #0]
 80183f8:	6062      	str	r2, [r4, #4]
 80183fa:	e7d5      	b.n	80183a8 <_sungetc_r+0xc>
 80183fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018404:	6363      	str	r3, [r4, #52]	; 0x34
 8018406:	2303      	movs	r3, #3
 8018408:	63a3      	str	r3, [r4, #56]	; 0x38
 801840a:	4623      	mov	r3, r4
 801840c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018410:	6023      	str	r3, [r4, #0]
 8018412:	2301      	movs	r3, #1
 8018414:	e7dc      	b.n	80183d0 <_sungetc_r+0x34>

08018416 <__ssrefill_r>:
 8018416:	b510      	push	{r4, lr}
 8018418:	460c      	mov	r4, r1
 801841a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801841c:	b169      	cbz	r1, 801843a <__ssrefill_r+0x24>
 801841e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018422:	4299      	cmp	r1, r3
 8018424:	d001      	beq.n	801842a <__ssrefill_r+0x14>
 8018426:	f7ff fdbf 	bl	8017fa8 <_free_r>
 801842a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801842c:	6063      	str	r3, [r4, #4]
 801842e:	2000      	movs	r0, #0
 8018430:	6360      	str	r0, [r4, #52]	; 0x34
 8018432:	b113      	cbz	r3, 801843a <__ssrefill_r+0x24>
 8018434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018436:	6023      	str	r3, [r4, #0]
 8018438:	bd10      	pop	{r4, pc}
 801843a:	6923      	ldr	r3, [r4, #16]
 801843c:	6023      	str	r3, [r4, #0]
 801843e:	2300      	movs	r3, #0
 8018440:	6063      	str	r3, [r4, #4]
 8018442:	89a3      	ldrh	r3, [r4, #12]
 8018444:	f043 0320 	orr.w	r3, r3, #32
 8018448:	81a3      	strh	r3, [r4, #12]
 801844a:	f04f 30ff 	mov.w	r0, #4294967295
 801844e:	e7f3      	b.n	8018438 <__ssrefill_r+0x22>

08018450 <__ssvfiscanf_r>:
 8018450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018454:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018458:	460c      	mov	r4, r1
 801845a:	2100      	movs	r1, #0
 801845c:	9144      	str	r1, [sp, #272]	; 0x110
 801845e:	9145      	str	r1, [sp, #276]	; 0x114
 8018460:	499f      	ldr	r1, [pc, #636]	; (80186e0 <__ssvfiscanf_r+0x290>)
 8018462:	91a0      	str	r1, [sp, #640]	; 0x280
 8018464:	f10d 0804 	add.w	r8, sp, #4
 8018468:	499e      	ldr	r1, [pc, #632]	; (80186e4 <__ssvfiscanf_r+0x294>)
 801846a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80186e8 <__ssvfiscanf_r+0x298>
 801846e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018472:	4606      	mov	r6, r0
 8018474:	4692      	mov	sl, r2
 8018476:	91a1      	str	r1, [sp, #644]	; 0x284
 8018478:	9300      	str	r3, [sp, #0]
 801847a:	270a      	movs	r7, #10
 801847c:	f89a 3000 	ldrb.w	r3, [sl]
 8018480:	2b00      	cmp	r3, #0
 8018482:	f000 812a 	beq.w	80186da <__ssvfiscanf_r+0x28a>
 8018486:	4655      	mov	r5, sl
 8018488:	f7ff f948 	bl	801771c <__locale_ctype_ptr>
 801848c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018490:	4458      	add	r0, fp
 8018492:	7843      	ldrb	r3, [r0, #1]
 8018494:	f013 0308 	ands.w	r3, r3, #8
 8018498:	d01c      	beq.n	80184d4 <__ssvfiscanf_r+0x84>
 801849a:	6863      	ldr	r3, [r4, #4]
 801849c:	2b00      	cmp	r3, #0
 801849e:	dd12      	ble.n	80184c6 <__ssvfiscanf_r+0x76>
 80184a0:	f7ff f93c 	bl	801771c <__locale_ctype_ptr>
 80184a4:	6823      	ldr	r3, [r4, #0]
 80184a6:	781a      	ldrb	r2, [r3, #0]
 80184a8:	4410      	add	r0, r2
 80184aa:	7842      	ldrb	r2, [r0, #1]
 80184ac:	0712      	lsls	r2, r2, #28
 80184ae:	d401      	bmi.n	80184b4 <__ssvfiscanf_r+0x64>
 80184b0:	46aa      	mov	sl, r5
 80184b2:	e7e3      	b.n	801847c <__ssvfiscanf_r+0x2c>
 80184b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80184b6:	3201      	adds	r2, #1
 80184b8:	9245      	str	r2, [sp, #276]	; 0x114
 80184ba:	6862      	ldr	r2, [r4, #4]
 80184bc:	3301      	adds	r3, #1
 80184be:	3a01      	subs	r2, #1
 80184c0:	6062      	str	r2, [r4, #4]
 80184c2:	6023      	str	r3, [r4, #0]
 80184c4:	e7e9      	b.n	801849a <__ssvfiscanf_r+0x4a>
 80184c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80184c8:	4621      	mov	r1, r4
 80184ca:	4630      	mov	r0, r6
 80184cc:	4798      	blx	r3
 80184ce:	2800      	cmp	r0, #0
 80184d0:	d0e6      	beq.n	80184a0 <__ssvfiscanf_r+0x50>
 80184d2:	e7ed      	b.n	80184b0 <__ssvfiscanf_r+0x60>
 80184d4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80184d8:	f040 8082 	bne.w	80185e0 <__ssvfiscanf_r+0x190>
 80184dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80184de:	9341      	str	r3, [sp, #260]	; 0x104
 80184e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80184e4:	2b2a      	cmp	r3, #42	; 0x2a
 80184e6:	d103      	bne.n	80184f0 <__ssvfiscanf_r+0xa0>
 80184e8:	2310      	movs	r3, #16
 80184ea:	9341      	str	r3, [sp, #260]	; 0x104
 80184ec:	f10a 0502 	add.w	r5, sl, #2
 80184f0:	46aa      	mov	sl, r5
 80184f2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80184f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80184fa:	2a09      	cmp	r2, #9
 80184fc:	d922      	bls.n	8018544 <__ssvfiscanf_r+0xf4>
 80184fe:	2203      	movs	r2, #3
 8018500:	4879      	ldr	r0, [pc, #484]	; (80186e8 <__ssvfiscanf_r+0x298>)
 8018502:	f7e7 fe85 	bl	8000210 <memchr>
 8018506:	b138      	cbz	r0, 8018518 <__ssvfiscanf_r+0xc8>
 8018508:	eba0 0309 	sub.w	r3, r0, r9
 801850c:	2001      	movs	r0, #1
 801850e:	4098      	lsls	r0, r3
 8018510:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018512:	4318      	orrs	r0, r3
 8018514:	9041      	str	r0, [sp, #260]	; 0x104
 8018516:	46aa      	mov	sl, r5
 8018518:	f89a 3000 	ldrb.w	r3, [sl]
 801851c:	2b67      	cmp	r3, #103	; 0x67
 801851e:	f10a 0501 	add.w	r5, sl, #1
 8018522:	d82b      	bhi.n	801857c <__ssvfiscanf_r+0x12c>
 8018524:	2b65      	cmp	r3, #101	; 0x65
 8018526:	f080 809f 	bcs.w	8018668 <__ssvfiscanf_r+0x218>
 801852a:	2b47      	cmp	r3, #71	; 0x47
 801852c:	d810      	bhi.n	8018550 <__ssvfiscanf_r+0x100>
 801852e:	2b45      	cmp	r3, #69	; 0x45
 8018530:	f080 809a 	bcs.w	8018668 <__ssvfiscanf_r+0x218>
 8018534:	2b00      	cmp	r3, #0
 8018536:	d06c      	beq.n	8018612 <__ssvfiscanf_r+0x1c2>
 8018538:	2b25      	cmp	r3, #37	; 0x25
 801853a:	d051      	beq.n	80185e0 <__ssvfiscanf_r+0x190>
 801853c:	2303      	movs	r3, #3
 801853e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018540:	9742      	str	r7, [sp, #264]	; 0x108
 8018542:	e027      	b.n	8018594 <__ssvfiscanf_r+0x144>
 8018544:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018546:	fb07 1303 	mla	r3, r7, r3, r1
 801854a:	3b30      	subs	r3, #48	; 0x30
 801854c:	9343      	str	r3, [sp, #268]	; 0x10c
 801854e:	e7cf      	b.n	80184f0 <__ssvfiscanf_r+0xa0>
 8018550:	2b5b      	cmp	r3, #91	; 0x5b
 8018552:	d06a      	beq.n	801862a <__ssvfiscanf_r+0x1da>
 8018554:	d80c      	bhi.n	8018570 <__ssvfiscanf_r+0x120>
 8018556:	2b58      	cmp	r3, #88	; 0x58
 8018558:	d1f0      	bne.n	801853c <__ssvfiscanf_r+0xec>
 801855a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801855c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018560:	9241      	str	r2, [sp, #260]	; 0x104
 8018562:	2210      	movs	r2, #16
 8018564:	9242      	str	r2, [sp, #264]	; 0x108
 8018566:	2b6e      	cmp	r3, #110	; 0x6e
 8018568:	bf8c      	ite	hi
 801856a:	2304      	movhi	r3, #4
 801856c:	2303      	movls	r3, #3
 801856e:	e010      	b.n	8018592 <__ssvfiscanf_r+0x142>
 8018570:	2b63      	cmp	r3, #99	; 0x63
 8018572:	d065      	beq.n	8018640 <__ssvfiscanf_r+0x1f0>
 8018574:	2b64      	cmp	r3, #100	; 0x64
 8018576:	d1e1      	bne.n	801853c <__ssvfiscanf_r+0xec>
 8018578:	9742      	str	r7, [sp, #264]	; 0x108
 801857a:	e7f4      	b.n	8018566 <__ssvfiscanf_r+0x116>
 801857c:	2b70      	cmp	r3, #112	; 0x70
 801857e:	d04b      	beq.n	8018618 <__ssvfiscanf_r+0x1c8>
 8018580:	d826      	bhi.n	80185d0 <__ssvfiscanf_r+0x180>
 8018582:	2b6e      	cmp	r3, #110	; 0x6e
 8018584:	d062      	beq.n	801864c <__ssvfiscanf_r+0x1fc>
 8018586:	d84c      	bhi.n	8018622 <__ssvfiscanf_r+0x1d2>
 8018588:	2b69      	cmp	r3, #105	; 0x69
 801858a:	d1d7      	bne.n	801853c <__ssvfiscanf_r+0xec>
 801858c:	2300      	movs	r3, #0
 801858e:	9342      	str	r3, [sp, #264]	; 0x108
 8018590:	2303      	movs	r3, #3
 8018592:	9347      	str	r3, [sp, #284]	; 0x11c
 8018594:	6863      	ldr	r3, [r4, #4]
 8018596:	2b00      	cmp	r3, #0
 8018598:	dd68      	ble.n	801866c <__ssvfiscanf_r+0x21c>
 801859a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801859c:	0659      	lsls	r1, r3, #25
 801859e:	d407      	bmi.n	80185b0 <__ssvfiscanf_r+0x160>
 80185a0:	f7ff f8bc 	bl	801771c <__locale_ctype_ptr>
 80185a4:	6823      	ldr	r3, [r4, #0]
 80185a6:	781a      	ldrb	r2, [r3, #0]
 80185a8:	4410      	add	r0, r2
 80185aa:	7842      	ldrb	r2, [r0, #1]
 80185ac:	0712      	lsls	r2, r2, #28
 80185ae:	d464      	bmi.n	801867a <__ssvfiscanf_r+0x22a>
 80185b0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80185b2:	2b02      	cmp	r3, #2
 80185b4:	dc73      	bgt.n	801869e <__ssvfiscanf_r+0x24e>
 80185b6:	466b      	mov	r3, sp
 80185b8:	4622      	mov	r2, r4
 80185ba:	a941      	add	r1, sp, #260	; 0x104
 80185bc:	4630      	mov	r0, r6
 80185be:	f000 f897 	bl	80186f0 <_scanf_chars>
 80185c2:	2801      	cmp	r0, #1
 80185c4:	f000 8089 	beq.w	80186da <__ssvfiscanf_r+0x28a>
 80185c8:	2802      	cmp	r0, #2
 80185ca:	f47f af71 	bne.w	80184b0 <__ssvfiscanf_r+0x60>
 80185ce:	e01d      	b.n	801860c <__ssvfiscanf_r+0x1bc>
 80185d0:	2b75      	cmp	r3, #117	; 0x75
 80185d2:	d0d1      	beq.n	8018578 <__ssvfiscanf_r+0x128>
 80185d4:	2b78      	cmp	r3, #120	; 0x78
 80185d6:	d0c0      	beq.n	801855a <__ssvfiscanf_r+0x10a>
 80185d8:	2b73      	cmp	r3, #115	; 0x73
 80185da:	d1af      	bne.n	801853c <__ssvfiscanf_r+0xec>
 80185dc:	2302      	movs	r3, #2
 80185de:	e7d8      	b.n	8018592 <__ssvfiscanf_r+0x142>
 80185e0:	6863      	ldr	r3, [r4, #4]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	dd0c      	ble.n	8018600 <__ssvfiscanf_r+0x1b0>
 80185e6:	6823      	ldr	r3, [r4, #0]
 80185e8:	781a      	ldrb	r2, [r3, #0]
 80185ea:	455a      	cmp	r2, fp
 80185ec:	d175      	bne.n	80186da <__ssvfiscanf_r+0x28a>
 80185ee:	3301      	adds	r3, #1
 80185f0:	6862      	ldr	r2, [r4, #4]
 80185f2:	6023      	str	r3, [r4, #0]
 80185f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80185f6:	3a01      	subs	r2, #1
 80185f8:	3301      	adds	r3, #1
 80185fa:	6062      	str	r2, [r4, #4]
 80185fc:	9345      	str	r3, [sp, #276]	; 0x114
 80185fe:	e757      	b.n	80184b0 <__ssvfiscanf_r+0x60>
 8018600:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018602:	4621      	mov	r1, r4
 8018604:	4630      	mov	r0, r6
 8018606:	4798      	blx	r3
 8018608:	2800      	cmp	r0, #0
 801860a:	d0ec      	beq.n	80185e6 <__ssvfiscanf_r+0x196>
 801860c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801860e:	2800      	cmp	r0, #0
 8018610:	d159      	bne.n	80186c6 <__ssvfiscanf_r+0x276>
 8018612:	f04f 30ff 	mov.w	r0, #4294967295
 8018616:	e05c      	b.n	80186d2 <__ssvfiscanf_r+0x282>
 8018618:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801861a:	f042 0220 	orr.w	r2, r2, #32
 801861e:	9241      	str	r2, [sp, #260]	; 0x104
 8018620:	e79b      	b.n	801855a <__ssvfiscanf_r+0x10a>
 8018622:	2308      	movs	r3, #8
 8018624:	9342      	str	r3, [sp, #264]	; 0x108
 8018626:	2304      	movs	r3, #4
 8018628:	e7b3      	b.n	8018592 <__ssvfiscanf_r+0x142>
 801862a:	4629      	mov	r1, r5
 801862c:	4640      	mov	r0, r8
 801862e:	f000 f9c7 	bl	80189c0 <__sccl>
 8018632:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018638:	9341      	str	r3, [sp, #260]	; 0x104
 801863a:	4605      	mov	r5, r0
 801863c:	2301      	movs	r3, #1
 801863e:	e7a8      	b.n	8018592 <__ssvfiscanf_r+0x142>
 8018640:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018646:	9341      	str	r3, [sp, #260]	; 0x104
 8018648:	2300      	movs	r3, #0
 801864a:	e7a2      	b.n	8018592 <__ssvfiscanf_r+0x142>
 801864c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801864e:	06c3      	lsls	r3, r0, #27
 8018650:	f53f af2e 	bmi.w	80184b0 <__ssvfiscanf_r+0x60>
 8018654:	9b00      	ldr	r3, [sp, #0]
 8018656:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018658:	1d19      	adds	r1, r3, #4
 801865a:	9100      	str	r1, [sp, #0]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	07c0      	lsls	r0, r0, #31
 8018660:	bf4c      	ite	mi
 8018662:	801a      	strhmi	r2, [r3, #0]
 8018664:	601a      	strpl	r2, [r3, #0]
 8018666:	e723      	b.n	80184b0 <__ssvfiscanf_r+0x60>
 8018668:	2305      	movs	r3, #5
 801866a:	e792      	b.n	8018592 <__ssvfiscanf_r+0x142>
 801866c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801866e:	4621      	mov	r1, r4
 8018670:	4630      	mov	r0, r6
 8018672:	4798      	blx	r3
 8018674:	2800      	cmp	r0, #0
 8018676:	d090      	beq.n	801859a <__ssvfiscanf_r+0x14a>
 8018678:	e7c8      	b.n	801860c <__ssvfiscanf_r+0x1bc>
 801867a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801867c:	3201      	adds	r2, #1
 801867e:	9245      	str	r2, [sp, #276]	; 0x114
 8018680:	6862      	ldr	r2, [r4, #4]
 8018682:	3a01      	subs	r2, #1
 8018684:	2a00      	cmp	r2, #0
 8018686:	6062      	str	r2, [r4, #4]
 8018688:	dd02      	ble.n	8018690 <__ssvfiscanf_r+0x240>
 801868a:	3301      	adds	r3, #1
 801868c:	6023      	str	r3, [r4, #0]
 801868e:	e787      	b.n	80185a0 <__ssvfiscanf_r+0x150>
 8018690:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018692:	4621      	mov	r1, r4
 8018694:	4630      	mov	r0, r6
 8018696:	4798      	blx	r3
 8018698:	2800      	cmp	r0, #0
 801869a:	d081      	beq.n	80185a0 <__ssvfiscanf_r+0x150>
 801869c:	e7b6      	b.n	801860c <__ssvfiscanf_r+0x1bc>
 801869e:	2b04      	cmp	r3, #4
 80186a0:	dc06      	bgt.n	80186b0 <__ssvfiscanf_r+0x260>
 80186a2:	466b      	mov	r3, sp
 80186a4:	4622      	mov	r2, r4
 80186a6:	a941      	add	r1, sp, #260	; 0x104
 80186a8:	4630      	mov	r0, r6
 80186aa:	f000 f885 	bl	80187b8 <_scanf_i>
 80186ae:	e788      	b.n	80185c2 <__ssvfiscanf_r+0x172>
 80186b0:	4b0e      	ldr	r3, [pc, #56]	; (80186ec <__ssvfiscanf_r+0x29c>)
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	f43f aefc 	beq.w	80184b0 <__ssvfiscanf_r+0x60>
 80186b8:	466b      	mov	r3, sp
 80186ba:	4622      	mov	r2, r4
 80186bc:	a941      	add	r1, sp, #260	; 0x104
 80186be:	4630      	mov	r0, r6
 80186c0:	f7fc fd7e 	bl	80151c0 <_scanf_float>
 80186c4:	e77d      	b.n	80185c2 <__ssvfiscanf_r+0x172>
 80186c6:	89a3      	ldrh	r3, [r4, #12]
 80186c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80186cc:	bf18      	it	ne
 80186ce:	f04f 30ff 	movne.w	r0, #4294967295
 80186d2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80186d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80186dc:	e7f9      	b.n	80186d2 <__ssvfiscanf_r+0x282>
 80186de:	bf00      	nop
 80186e0:	0801839d 	.word	0x0801839d
 80186e4:	08018417 	.word	0x08018417
 80186e8:	080196ea 	.word	0x080196ea
 80186ec:	080151c1 	.word	0x080151c1

080186f0 <_scanf_chars>:
 80186f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186f4:	4615      	mov	r5, r2
 80186f6:	688a      	ldr	r2, [r1, #8]
 80186f8:	4680      	mov	r8, r0
 80186fa:	460c      	mov	r4, r1
 80186fc:	b932      	cbnz	r2, 801870c <_scanf_chars+0x1c>
 80186fe:	698a      	ldr	r2, [r1, #24]
 8018700:	2a00      	cmp	r2, #0
 8018702:	bf14      	ite	ne
 8018704:	f04f 32ff 	movne.w	r2, #4294967295
 8018708:	2201      	moveq	r2, #1
 801870a:	608a      	str	r2, [r1, #8]
 801870c:	6822      	ldr	r2, [r4, #0]
 801870e:	06d1      	lsls	r1, r2, #27
 8018710:	bf5f      	itttt	pl
 8018712:	681a      	ldrpl	r2, [r3, #0]
 8018714:	1d11      	addpl	r1, r2, #4
 8018716:	6019      	strpl	r1, [r3, #0]
 8018718:	6817      	ldrpl	r7, [r2, #0]
 801871a:	2600      	movs	r6, #0
 801871c:	69a3      	ldr	r3, [r4, #24]
 801871e:	b1db      	cbz	r3, 8018758 <_scanf_chars+0x68>
 8018720:	2b01      	cmp	r3, #1
 8018722:	d107      	bne.n	8018734 <_scanf_chars+0x44>
 8018724:	682b      	ldr	r3, [r5, #0]
 8018726:	6962      	ldr	r2, [r4, #20]
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	5cd3      	ldrb	r3, [r2, r3]
 801872c:	b9a3      	cbnz	r3, 8018758 <_scanf_chars+0x68>
 801872e:	2e00      	cmp	r6, #0
 8018730:	d132      	bne.n	8018798 <_scanf_chars+0xa8>
 8018732:	e006      	b.n	8018742 <_scanf_chars+0x52>
 8018734:	2b02      	cmp	r3, #2
 8018736:	d007      	beq.n	8018748 <_scanf_chars+0x58>
 8018738:	2e00      	cmp	r6, #0
 801873a:	d12d      	bne.n	8018798 <_scanf_chars+0xa8>
 801873c:	69a3      	ldr	r3, [r4, #24]
 801873e:	2b01      	cmp	r3, #1
 8018740:	d12a      	bne.n	8018798 <_scanf_chars+0xa8>
 8018742:	2001      	movs	r0, #1
 8018744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018748:	f7fe ffe8 	bl	801771c <__locale_ctype_ptr>
 801874c:	682b      	ldr	r3, [r5, #0]
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	4418      	add	r0, r3
 8018752:	7843      	ldrb	r3, [r0, #1]
 8018754:	071b      	lsls	r3, r3, #28
 8018756:	d4ef      	bmi.n	8018738 <_scanf_chars+0x48>
 8018758:	6823      	ldr	r3, [r4, #0]
 801875a:	06da      	lsls	r2, r3, #27
 801875c:	bf5e      	ittt	pl
 801875e:	682b      	ldrpl	r3, [r5, #0]
 8018760:	781b      	ldrbpl	r3, [r3, #0]
 8018762:	703b      	strbpl	r3, [r7, #0]
 8018764:	682a      	ldr	r2, [r5, #0]
 8018766:	686b      	ldr	r3, [r5, #4]
 8018768:	f102 0201 	add.w	r2, r2, #1
 801876c:	602a      	str	r2, [r5, #0]
 801876e:	68a2      	ldr	r2, [r4, #8]
 8018770:	f103 33ff 	add.w	r3, r3, #4294967295
 8018774:	f102 32ff 	add.w	r2, r2, #4294967295
 8018778:	606b      	str	r3, [r5, #4]
 801877a:	f106 0601 	add.w	r6, r6, #1
 801877e:	bf58      	it	pl
 8018780:	3701      	addpl	r7, #1
 8018782:	60a2      	str	r2, [r4, #8]
 8018784:	b142      	cbz	r2, 8018798 <_scanf_chars+0xa8>
 8018786:	2b00      	cmp	r3, #0
 8018788:	dcc8      	bgt.n	801871c <_scanf_chars+0x2c>
 801878a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801878e:	4629      	mov	r1, r5
 8018790:	4640      	mov	r0, r8
 8018792:	4798      	blx	r3
 8018794:	2800      	cmp	r0, #0
 8018796:	d0c1      	beq.n	801871c <_scanf_chars+0x2c>
 8018798:	6823      	ldr	r3, [r4, #0]
 801879a:	f013 0310 	ands.w	r3, r3, #16
 801879e:	d105      	bne.n	80187ac <_scanf_chars+0xbc>
 80187a0:	68e2      	ldr	r2, [r4, #12]
 80187a2:	3201      	adds	r2, #1
 80187a4:	60e2      	str	r2, [r4, #12]
 80187a6:	69a2      	ldr	r2, [r4, #24]
 80187a8:	b102      	cbz	r2, 80187ac <_scanf_chars+0xbc>
 80187aa:	703b      	strb	r3, [r7, #0]
 80187ac:	6923      	ldr	r3, [r4, #16]
 80187ae:	441e      	add	r6, r3
 80187b0:	6126      	str	r6, [r4, #16]
 80187b2:	2000      	movs	r0, #0
 80187b4:	e7c6      	b.n	8018744 <_scanf_chars+0x54>
	...

080187b8 <_scanf_i>:
 80187b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187bc:	469a      	mov	sl, r3
 80187be:	4b74      	ldr	r3, [pc, #464]	; (8018990 <_scanf_i+0x1d8>)
 80187c0:	460c      	mov	r4, r1
 80187c2:	4683      	mov	fp, r0
 80187c4:	4616      	mov	r6, r2
 80187c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80187ca:	b087      	sub	sp, #28
 80187cc:	ab03      	add	r3, sp, #12
 80187ce:	68a7      	ldr	r7, [r4, #8]
 80187d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80187d4:	4b6f      	ldr	r3, [pc, #444]	; (8018994 <_scanf_i+0x1dc>)
 80187d6:	69a1      	ldr	r1, [r4, #24]
 80187d8:	4a6f      	ldr	r2, [pc, #444]	; (8018998 <_scanf_i+0x1e0>)
 80187da:	2903      	cmp	r1, #3
 80187dc:	bf08      	it	eq
 80187de:	461a      	moveq	r2, r3
 80187e0:	1e7b      	subs	r3, r7, #1
 80187e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80187e6:	bf84      	itt	hi
 80187e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80187ec:	60a3      	strhi	r3, [r4, #8]
 80187ee:	6823      	ldr	r3, [r4, #0]
 80187f0:	9200      	str	r2, [sp, #0]
 80187f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80187f6:	bf88      	it	hi
 80187f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80187fc:	f104 091c 	add.w	r9, r4, #28
 8018800:	6023      	str	r3, [r4, #0]
 8018802:	bf8c      	ite	hi
 8018804:	197f      	addhi	r7, r7, r5
 8018806:	2700      	movls	r7, #0
 8018808:	464b      	mov	r3, r9
 801880a:	f04f 0800 	mov.w	r8, #0
 801880e:	9301      	str	r3, [sp, #4]
 8018810:	6831      	ldr	r1, [r6, #0]
 8018812:	ab03      	add	r3, sp, #12
 8018814:	2202      	movs	r2, #2
 8018816:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801881a:	7809      	ldrb	r1, [r1, #0]
 801881c:	f7e7 fcf8 	bl	8000210 <memchr>
 8018820:	9b01      	ldr	r3, [sp, #4]
 8018822:	b330      	cbz	r0, 8018872 <_scanf_i+0xba>
 8018824:	f1b8 0f01 	cmp.w	r8, #1
 8018828:	d15a      	bne.n	80188e0 <_scanf_i+0x128>
 801882a:	6862      	ldr	r2, [r4, #4]
 801882c:	b92a      	cbnz	r2, 801883a <_scanf_i+0x82>
 801882e:	6822      	ldr	r2, [r4, #0]
 8018830:	2108      	movs	r1, #8
 8018832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018836:	6061      	str	r1, [r4, #4]
 8018838:	6022      	str	r2, [r4, #0]
 801883a:	6822      	ldr	r2, [r4, #0]
 801883c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018840:	6022      	str	r2, [r4, #0]
 8018842:	68a2      	ldr	r2, [r4, #8]
 8018844:	1e51      	subs	r1, r2, #1
 8018846:	60a1      	str	r1, [r4, #8]
 8018848:	b19a      	cbz	r2, 8018872 <_scanf_i+0xba>
 801884a:	6832      	ldr	r2, [r6, #0]
 801884c:	1c51      	adds	r1, r2, #1
 801884e:	6031      	str	r1, [r6, #0]
 8018850:	7812      	ldrb	r2, [r2, #0]
 8018852:	701a      	strb	r2, [r3, #0]
 8018854:	1c5d      	adds	r5, r3, #1
 8018856:	6873      	ldr	r3, [r6, #4]
 8018858:	3b01      	subs	r3, #1
 801885a:	2b00      	cmp	r3, #0
 801885c:	6073      	str	r3, [r6, #4]
 801885e:	dc07      	bgt.n	8018870 <_scanf_i+0xb8>
 8018860:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018864:	4631      	mov	r1, r6
 8018866:	4658      	mov	r0, fp
 8018868:	4798      	blx	r3
 801886a:	2800      	cmp	r0, #0
 801886c:	f040 8086 	bne.w	801897c <_scanf_i+0x1c4>
 8018870:	462b      	mov	r3, r5
 8018872:	f108 0801 	add.w	r8, r8, #1
 8018876:	f1b8 0f03 	cmp.w	r8, #3
 801887a:	d1c8      	bne.n	801880e <_scanf_i+0x56>
 801887c:	6862      	ldr	r2, [r4, #4]
 801887e:	b90a      	cbnz	r2, 8018884 <_scanf_i+0xcc>
 8018880:	220a      	movs	r2, #10
 8018882:	6062      	str	r2, [r4, #4]
 8018884:	6862      	ldr	r2, [r4, #4]
 8018886:	4945      	ldr	r1, [pc, #276]	; (801899c <_scanf_i+0x1e4>)
 8018888:	6960      	ldr	r0, [r4, #20]
 801888a:	9301      	str	r3, [sp, #4]
 801888c:	1a89      	subs	r1, r1, r2
 801888e:	f000 f897 	bl	80189c0 <__sccl>
 8018892:	9b01      	ldr	r3, [sp, #4]
 8018894:	f04f 0800 	mov.w	r8, #0
 8018898:	461d      	mov	r5, r3
 801889a:	68a3      	ldr	r3, [r4, #8]
 801889c:	6822      	ldr	r2, [r4, #0]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d03a      	beq.n	8018918 <_scanf_i+0x160>
 80188a2:	6831      	ldr	r1, [r6, #0]
 80188a4:	6960      	ldr	r0, [r4, #20]
 80188a6:	f891 c000 	ldrb.w	ip, [r1]
 80188aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80188ae:	2800      	cmp	r0, #0
 80188b0:	d032      	beq.n	8018918 <_scanf_i+0x160>
 80188b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80188b6:	d121      	bne.n	80188fc <_scanf_i+0x144>
 80188b8:	0510      	lsls	r0, r2, #20
 80188ba:	d51f      	bpl.n	80188fc <_scanf_i+0x144>
 80188bc:	f108 0801 	add.w	r8, r8, #1
 80188c0:	b117      	cbz	r7, 80188c8 <_scanf_i+0x110>
 80188c2:	3301      	adds	r3, #1
 80188c4:	3f01      	subs	r7, #1
 80188c6:	60a3      	str	r3, [r4, #8]
 80188c8:	6873      	ldr	r3, [r6, #4]
 80188ca:	3b01      	subs	r3, #1
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	6073      	str	r3, [r6, #4]
 80188d0:	dd1b      	ble.n	801890a <_scanf_i+0x152>
 80188d2:	6833      	ldr	r3, [r6, #0]
 80188d4:	3301      	adds	r3, #1
 80188d6:	6033      	str	r3, [r6, #0]
 80188d8:	68a3      	ldr	r3, [r4, #8]
 80188da:	3b01      	subs	r3, #1
 80188dc:	60a3      	str	r3, [r4, #8]
 80188de:	e7dc      	b.n	801889a <_scanf_i+0xe2>
 80188e0:	f1b8 0f02 	cmp.w	r8, #2
 80188e4:	d1ad      	bne.n	8018842 <_scanf_i+0x8a>
 80188e6:	6822      	ldr	r2, [r4, #0]
 80188e8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80188ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80188f0:	d1bf      	bne.n	8018872 <_scanf_i+0xba>
 80188f2:	2110      	movs	r1, #16
 80188f4:	6061      	str	r1, [r4, #4]
 80188f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80188fa:	e7a1      	b.n	8018840 <_scanf_i+0x88>
 80188fc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018900:	6022      	str	r2, [r4, #0]
 8018902:	780b      	ldrb	r3, [r1, #0]
 8018904:	702b      	strb	r3, [r5, #0]
 8018906:	3501      	adds	r5, #1
 8018908:	e7de      	b.n	80188c8 <_scanf_i+0x110>
 801890a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801890e:	4631      	mov	r1, r6
 8018910:	4658      	mov	r0, fp
 8018912:	4798      	blx	r3
 8018914:	2800      	cmp	r0, #0
 8018916:	d0df      	beq.n	80188d8 <_scanf_i+0x120>
 8018918:	6823      	ldr	r3, [r4, #0]
 801891a:	05d9      	lsls	r1, r3, #23
 801891c:	d50c      	bpl.n	8018938 <_scanf_i+0x180>
 801891e:	454d      	cmp	r5, r9
 8018920:	d908      	bls.n	8018934 <_scanf_i+0x17c>
 8018922:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801892a:	4632      	mov	r2, r6
 801892c:	4658      	mov	r0, fp
 801892e:	4798      	blx	r3
 8018930:	1e6f      	subs	r7, r5, #1
 8018932:	463d      	mov	r5, r7
 8018934:	454d      	cmp	r5, r9
 8018936:	d029      	beq.n	801898c <_scanf_i+0x1d4>
 8018938:	6822      	ldr	r2, [r4, #0]
 801893a:	f012 0210 	ands.w	r2, r2, #16
 801893e:	d113      	bne.n	8018968 <_scanf_i+0x1b0>
 8018940:	702a      	strb	r2, [r5, #0]
 8018942:	6863      	ldr	r3, [r4, #4]
 8018944:	9e00      	ldr	r6, [sp, #0]
 8018946:	4649      	mov	r1, r9
 8018948:	4658      	mov	r0, fp
 801894a:	47b0      	blx	r6
 801894c:	f8da 3000 	ldr.w	r3, [sl]
 8018950:	6821      	ldr	r1, [r4, #0]
 8018952:	1d1a      	adds	r2, r3, #4
 8018954:	f8ca 2000 	str.w	r2, [sl]
 8018958:	f011 0f20 	tst.w	r1, #32
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	d010      	beq.n	8018982 <_scanf_i+0x1ca>
 8018960:	6018      	str	r0, [r3, #0]
 8018962:	68e3      	ldr	r3, [r4, #12]
 8018964:	3301      	adds	r3, #1
 8018966:	60e3      	str	r3, [r4, #12]
 8018968:	eba5 0509 	sub.w	r5, r5, r9
 801896c:	44a8      	add	r8, r5
 801896e:	6925      	ldr	r5, [r4, #16]
 8018970:	4445      	add	r5, r8
 8018972:	6125      	str	r5, [r4, #16]
 8018974:	2000      	movs	r0, #0
 8018976:	b007      	add	sp, #28
 8018978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897c:	f04f 0800 	mov.w	r8, #0
 8018980:	e7ca      	b.n	8018918 <_scanf_i+0x160>
 8018982:	07ca      	lsls	r2, r1, #31
 8018984:	bf4c      	ite	mi
 8018986:	8018      	strhmi	r0, [r3, #0]
 8018988:	6018      	strpl	r0, [r3, #0]
 801898a:	e7ea      	b.n	8018962 <_scanf_i+0x1aa>
 801898c:	2001      	movs	r0, #1
 801898e:	e7f2      	b.n	8018976 <_scanf_i+0x1be>
 8018990:	08019248 	.word	0x08019248
 8018994:	080163d9 	.word	0x080163d9
 8018998:	08018b3d 	.word	0x08018b3d
 801899c:	08019705 	.word	0x08019705

080189a0 <_sbrk_r>:
 80189a0:	b538      	push	{r3, r4, r5, lr}
 80189a2:	4c06      	ldr	r4, [pc, #24]	; (80189bc <_sbrk_r+0x1c>)
 80189a4:	2300      	movs	r3, #0
 80189a6:	4605      	mov	r5, r0
 80189a8:	4608      	mov	r0, r1
 80189aa:	6023      	str	r3, [r4, #0]
 80189ac:	f7ee fbb4 	bl	8007118 <_sbrk>
 80189b0:	1c43      	adds	r3, r0, #1
 80189b2:	d102      	bne.n	80189ba <_sbrk_r+0x1a>
 80189b4:	6823      	ldr	r3, [r4, #0]
 80189b6:	b103      	cbz	r3, 80189ba <_sbrk_r+0x1a>
 80189b8:	602b      	str	r3, [r5, #0]
 80189ba:	bd38      	pop	{r3, r4, r5, pc}
 80189bc:	20040e6c 	.word	0x20040e6c

080189c0 <__sccl>:
 80189c0:	b570      	push	{r4, r5, r6, lr}
 80189c2:	780b      	ldrb	r3, [r1, #0]
 80189c4:	2b5e      	cmp	r3, #94	; 0x5e
 80189c6:	bf13      	iteet	ne
 80189c8:	1c4a      	addne	r2, r1, #1
 80189ca:	1c8a      	addeq	r2, r1, #2
 80189cc:	784b      	ldrbeq	r3, [r1, #1]
 80189ce:	2100      	movne	r1, #0
 80189d0:	bf08      	it	eq
 80189d2:	2101      	moveq	r1, #1
 80189d4:	1e44      	subs	r4, r0, #1
 80189d6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80189da:	f804 1f01 	strb.w	r1, [r4, #1]!
 80189de:	42ac      	cmp	r4, r5
 80189e0:	d1fb      	bne.n	80189da <__sccl+0x1a>
 80189e2:	b913      	cbnz	r3, 80189ea <__sccl+0x2a>
 80189e4:	3a01      	subs	r2, #1
 80189e6:	4610      	mov	r0, r2
 80189e8:	bd70      	pop	{r4, r5, r6, pc}
 80189ea:	f081 0401 	eor.w	r4, r1, #1
 80189ee:	54c4      	strb	r4, [r0, r3]
 80189f0:	1c51      	adds	r1, r2, #1
 80189f2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80189f6:	2d2d      	cmp	r5, #45	; 0x2d
 80189f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80189fc:	460a      	mov	r2, r1
 80189fe:	d006      	beq.n	8018a0e <__sccl+0x4e>
 8018a00:	2d5d      	cmp	r5, #93	; 0x5d
 8018a02:	d0f0      	beq.n	80189e6 <__sccl+0x26>
 8018a04:	b90d      	cbnz	r5, 8018a0a <__sccl+0x4a>
 8018a06:	4632      	mov	r2, r6
 8018a08:	e7ed      	b.n	80189e6 <__sccl+0x26>
 8018a0a:	462b      	mov	r3, r5
 8018a0c:	e7ef      	b.n	80189ee <__sccl+0x2e>
 8018a0e:	780e      	ldrb	r6, [r1, #0]
 8018a10:	2e5d      	cmp	r6, #93	; 0x5d
 8018a12:	d0fa      	beq.n	8018a0a <__sccl+0x4a>
 8018a14:	42b3      	cmp	r3, r6
 8018a16:	dcf8      	bgt.n	8018a0a <__sccl+0x4a>
 8018a18:	3301      	adds	r3, #1
 8018a1a:	429e      	cmp	r6, r3
 8018a1c:	54c4      	strb	r4, [r0, r3]
 8018a1e:	dcfb      	bgt.n	8018a18 <__sccl+0x58>
 8018a20:	3102      	adds	r1, #2
 8018a22:	e7e6      	b.n	80189f2 <__sccl+0x32>

08018a24 <strncmp>:
 8018a24:	b510      	push	{r4, lr}
 8018a26:	b16a      	cbz	r2, 8018a44 <strncmp+0x20>
 8018a28:	3901      	subs	r1, #1
 8018a2a:	1884      	adds	r4, r0, r2
 8018a2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018a30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018a34:	4293      	cmp	r3, r2
 8018a36:	d103      	bne.n	8018a40 <strncmp+0x1c>
 8018a38:	42a0      	cmp	r0, r4
 8018a3a:	d001      	beq.n	8018a40 <strncmp+0x1c>
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d1f5      	bne.n	8018a2c <strncmp+0x8>
 8018a40:	1a98      	subs	r0, r3, r2
 8018a42:	bd10      	pop	{r4, pc}
 8018a44:	4610      	mov	r0, r2
 8018a46:	e7fc      	b.n	8018a42 <strncmp+0x1e>

08018a48 <_strtoul_l.isra.0>:
 8018a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a4c:	4680      	mov	r8, r0
 8018a4e:	4689      	mov	r9, r1
 8018a50:	4692      	mov	sl, r2
 8018a52:	461e      	mov	r6, r3
 8018a54:	460f      	mov	r7, r1
 8018a56:	463d      	mov	r5, r7
 8018a58:	9808      	ldr	r0, [sp, #32]
 8018a5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a5e:	f7fe fe59 	bl	8017714 <__locale_ctype_ptr_l>
 8018a62:	4420      	add	r0, r4
 8018a64:	7843      	ldrb	r3, [r0, #1]
 8018a66:	f013 0308 	ands.w	r3, r3, #8
 8018a6a:	d130      	bne.n	8018ace <_strtoul_l.isra.0+0x86>
 8018a6c:	2c2d      	cmp	r4, #45	; 0x2d
 8018a6e:	d130      	bne.n	8018ad2 <_strtoul_l.isra.0+0x8a>
 8018a70:	787c      	ldrb	r4, [r7, #1]
 8018a72:	1cbd      	adds	r5, r7, #2
 8018a74:	2101      	movs	r1, #1
 8018a76:	2e00      	cmp	r6, #0
 8018a78:	d05c      	beq.n	8018b34 <_strtoul_l.isra.0+0xec>
 8018a7a:	2e10      	cmp	r6, #16
 8018a7c:	d109      	bne.n	8018a92 <_strtoul_l.isra.0+0x4a>
 8018a7e:	2c30      	cmp	r4, #48	; 0x30
 8018a80:	d107      	bne.n	8018a92 <_strtoul_l.isra.0+0x4a>
 8018a82:	782b      	ldrb	r3, [r5, #0]
 8018a84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018a88:	2b58      	cmp	r3, #88	; 0x58
 8018a8a:	d14e      	bne.n	8018b2a <_strtoul_l.isra.0+0xe2>
 8018a8c:	786c      	ldrb	r4, [r5, #1]
 8018a8e:	2610      	movs	r6, #16
 8018a90:	3502      	adds	r5, #2
 8018a92:	f04f 32ff 	mov.w	r2, #4294967295
 8018a96:	2300      	movs	r3, #0
 8018a98:	fbb2 f2f6 	udiv	r2, r2, r6
 8018a9c:	fb06 fc02 	mul.w	ip, r6, r2
 8018aa0:	ea6f 0c0c 	mvn.w	ip, ip
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018aaa:	2f09      	cmp	r7, #9
 8018aac:	d817      	bhi.n	8018ade <_strtoul_l.isra.0+0x96>
 8018aae:	463c      	mov	r4, r7
 8018ab0:	42a6      	cmp	r6, r4
 8018ab2:	dd23      	ble.n	8018afc <_strtoul_l.isra.0+0xb4>
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	db1e      	blt.n	8018af6 <_strtoul_l.isra.0+0xae>
 8018ab8:	4282      	cmp	r2, r0
 8018aba:	d31c      	bcc.n	8018af6 <_strtoul_l.isra.0+0xae>
 8018abc:	d101      	bne.n	8018ac2 <_strtoul_l.isra.0+0x7a>
 8018abe:	45a4      	cmp	ip, r4
 8018ac0:	db19      	blt.n	8018af6 <_strtoul_l.isra.0+0xae>
 8018ac2:	fb00 4006 	mla	r0, r0, r6, r4
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018acc:	e7eb      	b.n	8018aa6 <_strtoul_l.isra.0+0x5e>
 8018ace:	462f      	mov	r7, r5
 8018ad0:	e7c1      	b.n	8018a56 <_strtoul_l.isra.0+0xe>
 8018ad2:	2c2b      	cmp	r4, #43	; 0x2b
 8018ad4:	bf04      	itt	eq
 8018ad6:	1cbd      	addeq	r5, r7, #2
 8018ad8:	787c      	ldrbeq	r4, [r7, #1]
 8018ada:	4619      	mov	r1, r3
 8018adc:	e7cb      	b.n	8018a76 <_strtoul_l.isra.0+0x2e>
 8018ade:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018ae2:	2f19      	cmp	r7, #25
 8018ae4:	d801      	bhi.n	8018aea <_strtoul_l.isra.0+0xa2>
 8018ae6:	3c37      	subs	r4, #55	; 0x37
 8018ae8:	e7e2      	b.n	8018ab0 <_strtoul_l.isra.0+0x68>
 8018aea:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018aee:	2f19      	cmp	r7, #25
 8018af0:	d804      	bhi.n	8018afc <_strtoul_l.isra.0+0xb4>
 8018af2:	3c57      	subs	r4, #87	; 0x57
 8018af4:	e7dc      	b.n	8018ab0 <_strtoul_l.isra.0+0x68>
 8018af6:	f04f 33ff 	mov.w	r3, #4294967295
 8018afa:	e7e5      	b.n	8018ac8 <_strtoul_l.isra.0+0x80>
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	da09      	bge.n	8018b14 <_strtoul_l.isra.0+0xcc>
 8018b00:	2322      	movs	r3, #34	; 0x22
 8018b02:	f8c8 3000 	str.w	r3, [r8]
 8018b06:	f04f 30ff 	mov.w	r0, #4294967295
 8018b0a:	f1ba 0f00 	cmp.w	sl, #0
 8018b0e:	d107      	bne.n	8018b20 <_strtoul_l.isra.0+0xd8>
 8018b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b14:	b101      	cbz	r1, 8018b18 <_strtoul_l.isra.0+0xd0>
 8018b16:	4240      	negs	r0, r0
 8018b18:	f1ba 0f00 	cmp.w	sl, #0
 8018b1c:	d0f8      	beq.n	8018b10 <_strtoul_l.isra.0+0xc8>
 8018b1e:	b10b      	cbz	r3, 8018b24 <_strtoul_l.isra.0+0xdc>
 8018b20:	f105 39ff 	add.w	r9, r5, #4294967295
 8018b24:	f8ca 9000 	str.w	r9, [sl]
 8018b28:	e7f2      	b.n	8018b10 <_strtoul_l.isra.0+0xc8>
 8018b2a:	2430      	movs	r4, #48	; 0x30
 8018b2c:	2e00      	cmp	r6, #0
 8018b2e:	d1b0      	bne.n	8018a92 <_strtoul_l.isra.0+0x4a>
 8018b30:	2608      	movs	r6, #8
 8018b32:	e7ae      	b.n	8018a92 <_strtoul_l.isra.0+0x4a>
 8018b34:	2c30      	cmp	r4, #48	; 0x30
 8018b36:	d0a4      	beq.n	8018a82 <_strtoul_l.isra.0+0x3a>
 8018b38:	260a      	movs	r6, #10
 8018b3a:	e7aa      	b.n	8018a92 <_strtoul_l.isra.0+0x4a>

08018b3c <_strtoul_r>:
 8018b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b3e:	4c06      	ldr	r4, [pc, #24]	; (8018b58 <_strtoul_r+0x1c>)
 8018b40:	4d06      	ldr	r5, [pc, #24]	; (8018b5c <_strtoul_r+0x20>)
 8018b42:	6824      	ldr	r4, [r4, #0]
 8018b44:	6a24      	ldr	r4, [r4, #32]
 8018b46:	2c00      	cmp	r4, #0
 8018b48:	bf08      	it	eq
 8018b4a:	462c      	moveq	r4, r5
 8018b4c:	9400      	str	r4, [sp, #0]
 8018b4e:	f7ff ff7b 	bl	8018a48 <_strtoul_l.isra.0>
 8018b52:	b003      	add	sp, #12
 8018b54:	bd30      	pop	{r4, r5, pc}
 8018b56:	bf00      	nop
 8018b58:	2000000c 	.word	0x2000000c
 8018b5c:	20000070 	.word	0x20000070

08018b60 <__submore>:
 8018b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b64:	460c      	mov	r4, r1
 8018b66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b6c:	4299      	cmp	r1, r3
 8018b6e:	d11d      	bne.n	8018bac <__submore+0x4c>
 8018b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018b74:	f7ff fa66 	bl	8018044 <_malloc_r>
 8018b78:	b918      	cbnz	r0, 8018b82 <__submore+0x22>
 8018b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8018b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b86:	63a3      	str	r3, [r4, #56]	; 0x38
 8018b88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8018b8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018b92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018b96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018b9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018b9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018ba2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018ba6:	6020      	str	r0, [r4, #0]
 8018ba8:	2000      	movs	r0, #0
 8018baa:	e7e8      	b.n	8018b7e <__submore+0x1e>
 8018bac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018bae:	0077      	lsls	r7, r6, #1
 8018bb0:	463a      	mov	r2, r7
 8018bb2:	f000 f837 	bl	8018c24 <_realloc_r>
 8018bb6:	4605      	mov	r5, r0
 8018bb8:	2800      	cmp	r0, #0
 8018bba:	d0de      	beq.n	8018b7a <__submore+0x1a>
 8018bbc:	eb00 0806 	add.w	r8, r0, r6
 8018bc0:	4601      	mov	r1, r0
 8018bc2:	4632      	mov	r2, r6
 8018bc4:	4640      	mov	r0, r8
 8018bc6:	f7fb fe8b 	bl	80148e0 <memcpy>
 8018bca:	f8c4 8000 	str.w	r8, [r4]
 8018bce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018bd2:	e7e9      	b.n	8018ba8 <__submore+0x48>

08018bd4 <__ascii_wctomb>:
 8018bd4:	b149      	cbz	r1, 8018bea <__ascii_wctomb+0x16>
 8018bd6:	2aff      	cmp	r2, #255	; 0xff
 8018bd8:	bf85      	ittet	hi
 8018bda:	238a      	movhi	r3, #138	; 0x8a
 8018bdc:	6003      	strhi	r3, [r0, #0]
 8018bde:	700a      	strbls	r2, [r1, #0]
 8018be0:	f04f 30ff 	movhi.w	r0, #4294967295
 8018be4:	bf98      	it	ls
 8018be6:	2001      	movls	r0, #1
 8018be8:	4770      	bx	lr
 8018bea:	4608      	mov	r0, r1
 8018bec:	4770      	bx	lr

08018bee <memmove>:
 8018bee:	4288      	cmp	r0, r1
 8018bf0:	b510      	push	{r4, lr}
 8018bf2:	eb01 0302 	add.w	r3, r1, r2
 8018bf6:	d807      	bhi.n	8018c08 <memmove+0x1a>
 8018bf8:	1e42      	subs	r2, r0, #1
 8018bfa:	4299      	cmp	r1, r3
 8018bfc:	d00a      	beq.n	8018c14 <memmove+0x26>
 8018bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018c06:	e7f8      	b.n	8018bfa <memmove+0xc>
 8018c08:	4283      	cmp	r3, r0
 8018c0a:	d9f5      	bls.n	8018bf8 <memmove+0xa>
 8018c0c:	1881      	adds	r1, r0, r2
 8018c0e:	1ad2      	subs	r2, r2, r3
 8018c10:	42d3      	cmn	r3, r2
 8018c12:	d100      	bne.n	8018c16 <memmove+0x28>
 8018c14:	bd10      	pop	{r4, pc}
 8018c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018c1e:	e7f7      	b.n	8018c10 <memmove+0x22>

08018c20 <__malloc_lock>:
 8018c20:	4770      	bx	lr

08018c22 <__malloc_unlock>:
 8018c22:	4770      	bx	lr

08018c24 <_realloc_r>:
 8018c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c26:	4607      	mov	r7, r0
 8018c28:	4614      	mov	r4, r2
 8018c2a:	460e      	mov	r6, r1
 8018c2c:	b921      	cbnz	r1, 8018c38 <_realloc_r+0x14>
 8018c2e:	4611      	mov	r1, r2
 8018c30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018c34:	f7ff ba06 	b.w	8018044 <_malloc_r>
 8018c38:	b922      	cbnz	r2, 8018c44 <_realloc_r+0x20>
 8018c3a:	f7ff f9b5 	bl	8017fa8 <_free_r>
 8018c3e:	4625      	mov	r5, r4
 8018c40:	4628      	mov	r0, r5
 8018c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c44:	f000 f814 	bl	8018c70 <_malloc_usable_size_r>
 8018c48:	42a0      	cmp	r0, r4
 8018c4a:	d20f      	bcs.n	8018c6c <_realloc_r+0x48>
 8018c4c:	4621      	mov	r1, r4
 8018c4e:	4638      	mov	r0, r7
 8018c50:	f7ff f9f8 	bl	8018044 <_malloc_r>
 8018c54:	4605      	mov	r5, r0
 8018c56:	2800      	cmp	r0, #0
 8018c58:	d0f2      	beq.n	8018c40 <_realloc_r+0x1c>
 8018c5a:	4631      	mov	r1, r6
 8018c5c:	4622      	mov	r2, r4
 8018c5e:	f7fb fe3f 	bl	80148e0 <memcpy>
 8018c62:	4631      	mov	r1, r6
 8018c64:	4638      	mov	r0, r7
 8018c66:	f7ff f99f 	bl	8017fa8 <_free_r>
 8018c6a:	e7e9      	b.n	8018c40 <_realloc_r+0x1c>
 8018c6c:	4635      	mov	r5, r6
 8018c6e:	e7e7      	b.n	8018c40 <_realloc_r+0x1c>

08018c70 <_malloc_usable_size_r>:
 8018c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c74:	1f18      	subs	r0, r3, #4
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	bfbc      	itt	lt
 8018c7a:	580b      	ldrlt	r3, [r1, r0]
 8018c7c:	18c0      	addlt	r0, r0, r3
 8018c7e:	4770      	bx	lr

08018c80 <_init>:
 8018c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c82:	bf00      	nop
 8018c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c86:	bc08      	pop	{r3}
 8018c88:	469e      	mov	lr, r3
 8018c8a:	4770      	bx	lr

08018c8c <_fini>:
 8018c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c8e:	bf00      	nop
 8018c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c92:	bc08      	pop	{r3}
 8018c94:	469e      	mov	lr, r3
 8018c96:	4770      	bx	lr
